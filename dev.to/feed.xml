<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Neumorphic Social Media Buttons in CSS</title>
      <author>Shubham Jadhav</author>
      <pubDate>Mon, 27 Sep 2021 04:35:46 +0000</pubDate>
      <link>https://dev.to/dev_shubham/neumorphic-social-media-buttons-in-css-49ip</link>
      <guid>https://dev.to/dev_shubham/neumorphic-social-media-buttons-in-css-49ip</guid>
      <description>&lt;p&gt;Neumorphic Social Media Button using pure CSS 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/shubham-web2144/embed/oNwBEvL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 essential Web UX laws</title>
      <author>Abhiraj Bhowmick</author>
      <pubDate>Mon, 27 Sep 2021 04:12:06 +0000</pubDate>
      <link>https://dev.to/abhirajb/5-essential-web-ux-laws-318a</link>
      <guid>https://dev.to/abhirajb/5-essential-web-ux-laws-318a</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-jakobs-law"&gt;
  &lt;/a&gt;
  1. JAKOB’S LAW
&lt;/h2&gt;

&lt;p&gt;Users spend most of their time on other sites. This means that users prefer your site to work the same way as all the other sites they already know. Websites do better the more standardized their design is.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHzwAKIF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Jakobs-Law.png" alt="jakob"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-fitts-law"&gt;
  &lt;/a&gt;
  2. FITT’S LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes someone to select an object in the screen depends on how far the cursor is from the object and the size of the object.&lt;br&gt;
Thus, the longer the distance and the smaller the target’s size, the longer it takes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PRvAjQVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Fittss-Law-1.png" alt="fitt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-millers-law"&gt;
  &lt;/a&gt;
  3. MILLER’S LAW
&lt;/h2&gt;

&lt;p&gt;The average person can only keep 7 (plus or minus 2) items in their working memory.&lt;br&gt;
Organize content into smaller chunks to help users process, understand, and memorize easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeGr_MSA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Millerss-Law.png" alt="miller"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-law-of-proximity"&gt;
  &lt;/a&gt;
  4. LAW OF PROXIMITY
&lt;/h2&gt;

&lt;p&gt;Objects that are near, or proximate to each other, tend to be grouped together.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proximity helps to establish a relationship with nearby objects.&lt;/li&gt;
&lt;li&gt;Proximity helps users understand and organize information faster and more efficiently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uVB_MSEn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Law-of-Proximity.png" alt="proximity"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-hicks-law"&gt;
  &lt;/a&gt;
  5. HICK'S LAW
&lt;/h2&gt;

&lt;p&gt;The time it takes to make a decision increases with the number and complexity of choices. Hick’s Law is a fairly commonsense idea: the more choices you present to a person, the longer they take to make a decision. It’s essentially a fancier way to describe the KISS rule: Keep It Simple, Stupid!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZlfYtGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://4ciipx2wt5iq3qj5qr4cu74k-wpengine.netdna-ssl.com/wp-content/uploads/2021/07/Hicks-Law.png" alt="hick"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>design</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>JavaScript Functions: Explain Like I'm Five</title>
      <author>Sumudu Siriwardana</author>
      <pubDate>Mon, 27 Sep 2021 04:10:14 +0000</pubDate>
      <link>https://dev.to/sumusiriwardana/javascript-functions-explain-like-i-m-five-5009</link>
      <guid>https://dev.to/sumusiriwardana/javascript-functions-explain-like-i-m-five-5009</guid>
      <description>&lt;p&gt;If you are a newbie to programming and JavaScript, you might first find it hard to grasp the concept of functions. &lt;/p&gt;

&lt;p&gt;When I first learned about functions, I thought I got it all right. Then, when I tried to apply it in some code challenges, I got more confused, and I had to go back and forth reading my notes to understand functions more deeply. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SS7XJXZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632580244340/Fuj8MCX5B.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SS7XJXZs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632580244340/Fuj8MCX5B.jpeg" alt="Group 50.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I came to the point that I doubted myself and felt like I was not up for this. But without giving up, I started digging deeper into functions and finally understood them. &lt;/p&gt;

&lt;p&gt;So this post is for newbies like me, who are trying to understand this concept in a simple form!&lt;/p&gt;

&lt;p&gt;Let's get going! 😂&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CT7YOwn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632647952730/wzf1eJKB0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CT7YOwn_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632647952730/wzf1eJKB0.gif" alt="giphy (4).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check out the Table of Content below to see what we will be going over in this post. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#table-of-content"&gt;
  &lt;/a&gt;
  Table of Content
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#what-is-a-function"&gt;What is a function&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#parameters-and-arguments"&gt;Parameters and Arguments &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#return-statement"&gt;Return Statement&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#calling-a-function"&gt;Calling a Function&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#function-declarations"&gt;Function Declarations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#function-expressions"&gt;Function Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#arrow-functions"&gt;Arrow Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h1&gt;
  &lt;a href="#what-is-a-function"&gt;
  &lt;/a&gt;
  What is a function
&lt;/h1&gt;

&lt;p&gt;A function is the fundamental building block of a JavaScript application. It is one of the most essential concepts in the language. &lt;/p&gt;

&lt;p&gt;Let's take a simple machine. What does it do? It takes an input, processes it inside, and gives an output. &lt;/p&gt;

&lt;p&gt;For example, think about this coffee machine below. It takes ground coffee, brews it, and makes a great cup of black coffee.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TTFUe8T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632583033042/uJoOVJBaU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TTFUe8T_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632583033042/uJoOVJBaU.gif" alt="coffee.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's exactly what functions do as well! 😊&lt;/p&gt;

&lt;p&gt;We pass data into a function, and we process that data inside the function or do something with that data inside a function, and then we output or return that data. &lt;/p&gt;

&lt;p&gt;The most simple form of a function is a simple piece of code that we can repeatedly reuse in our code. What does this mean?&lt;/p&gt;

&lt;p&gt;With function, you don't have to write that code over and over again throughout your program. Instead, once you create a function, you can reuse it whenever you want. Confused? Let's come back to it later. &lt;/p&gt;

&lt;p&gt;Now let's create a simple function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myName() {
    console.log('My name is Sumudu');
}

myName();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So what have we done here?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We started with the &lt;code&gt;function&lt;/code&gt; keyword. This is how we &lt;strong&gt;declare a function&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Then, we defined a &lt;strong&gt;function name&lt;/strong&gt;, which is &lt;code&gt;myName&lt;/code&gt;. This is the given name for the function, which is a function that will simply log something to the console. &lt;/li&gt;
&lt;li&gt;Then, we added &lt;code&gt;parenthesis&lt;/code&gt;. We use &lt;code&gt;parenthesis&lt;/code&gt; to add &lt;strong&gt;parameters&lt;/strong&gt;, which we will be exploring more later in this post. &lt;/li&gt;
&lt;li&gt;Then, we used &lt;code&gt;curly braces&lt;/code&gt; to create a &lt;em&gt;function body&lt;/em&gt;. All the code that is within this &lt;code&gt;curly braces&lt;/code&gt; is called the function body. And it's this code that will be executed when we run this function.&lt;/li&gt;
&lt;li&gt;To use this function, we simply write the function name followed by a &lt;code&gt;parenthesis&lt;/code&gt;.  And this process is called "invoking", "running", or "calling" the function. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is the simple way of writing a JavaScript function and the syntax of it! 😊 &lt;/p&gt;

&lt;p&gt;Now you might be thinking that we are writing more code with functions. That's true!&lt;/p&gt;

&lt;p&gt;But the beauty of it is that we can use this function again and again throughout our program when we need it. So we don't have to duplicate the code. Let's look at a simple example to understand this. &lt;/p&gt;

&lt;p&gt;Let's say you want to add ten to a number. Here's how we can do it without functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const number = 1 + 10;  
// Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's write this using a function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
}

const firstNumber = addTen(1);  // Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, we have written more code in the second example, but it would be useful to write a cleaner code when we want to add ten to &lt;strong&gt;more&lt;/strong&gt; numbers. Check the below example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
}

const firstNumber = addTen(1); // Answer = 11
const secondNumber = addTen(2); // Answer = 12
const thirdNumber = addTen(3); // Answer = 13
const fourthNumber = addTen(4); // Answer = 14
const fifthNumber = addTen(5); // Answer = 15
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I hope now you can understand how we can write something once and reuse it again with functions. Functions help us reduce, reuse, and recycle our code, which is something awesome! 💃&lt;/p&gt;

&lt;p&gt;Now let's move on to understand few other parts of functions. Which are;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Parameters and Arguments&lt;/li&gt;
&lt;li&gt;Return Statement&lt;/li&gt;
&lt;li&gt;Calling a Function&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#parameters-and-arguments"&gt;
  &lt;/a&gt;
  Parameters and Arguments
&lt;/h2&gt;

&lt;p&gt;This is something I really got confused with when I was learning about functions. I couldn't remember the difference properly and was wondering why my function was not working properly 😄&lt;/p&gt;

&lt;p&gt;Let's check the below picture. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UKmLDcGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632593934314/9yORpKal0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UKmLDcGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632593934314/9yORpKal0.jpeg" alt="Parameters.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we added the function parameter inside the parenthesis. This is the input or list of input values that need to be received to perform the function. You can think of it as an empty placeholder that needs to be replaced later on. &lt;/p&gt;

&lt;p&gt;Arguments are actual values of function parameters for those input data. So in the above examples, the placeholder is replaced by the actual data, the number "1".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vvRC9a2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594341513/YXiCAnxAi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vvRC9a2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632594341513/YXiCAnxAi.gif" alt="easy.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#return-statement"&gt;
  &lt;/a&gt;
  Return Statement
&lt;/h2&gt;

&lt;p&gt;With the &lt;code&gt;return&lt;/code&gt; keyword, we can return any value from the function. Some functions may not return a value, but most functions do. We call this value the result of the function. Then, this value that is returned can be used anywhere later in the code. &lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    console.log(number + 10);
}

addTen(1);  // Answer = 11



function addTwenty(number) {
    return number + 20;
}

const firstNumber = addTwenty(1);  // Answer = 21
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the first function, we haven't returned a value; we have simply logged a value inside the function. And then, we called the function and got the logged value as "11".&lt;/p&gt;

&lt;p&gt;In the second function, we have returned a value as a result of the function. And then, we have stored the function in another variable (&lt;code&gt;firstNumber&lt;/code&gt;) and called the function. So every time the function is called, the returned value will be the result of the function. &lt;/p&gt;

&lt;p&gt;One important thing that you have to keep in mind is that this &lt;code&gt;return&lt;/code&gt; keyword immediately exits the function. It first returns the value that we ask it to return, in this case, the &lt;code&gt;number + 20&lt;/code&gt;. After that, the function is DONE! &lt;/p&gt;

&lt;p&gt;It doesn't execute any other code after the &lt;code&gt;return&lt;/code&gt; keyword. So, for example, in the below code, you can see that there's a &lt;code&gt;console.log&lt;/code&gt; after the &lt;code&gt;return&lt;/code&gt;. But if you run this code, you can see that code stops right after the &lt;code&gt;return&lt;/code&gt; and doesn't run the &lt;code&gt;console.log&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
    console.log("Let's add numbers!")
}

const firstNumber = addTen(1);  // Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So if you want to run the &lt;code&gt;console.log&lt;/code&gt;, you have to place it before the &lt;code&gt;return&lt;/code&gt; keyword. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-a-function"&gt;
  &lt;/a&gt;
  Calling a Function
&lt;/h2&gt;

&lt;p&gt;Let's say that you have written a function. So how do we use this function?&lt;/p&gt;

&lt;p&gt;To use a function, we simply write the function name followed by a &lt;code&gt;parenthesis&lt;/code&gt;.  And this process is called "invoking", "running", or "calling" the function. &lt;/p&gt;

&lt;p&gt;If you remember the first example, to log the name using the function we created, we used the function name followed by the &lt;code&gt;parenthesis&lt;/code&gt; below the function that we have written (outside of the function).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function myName(){
    console.log('My name is Sumudu');
}

myName();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to store the values that are returning from the functions and use them later on, you can always store it in another variable by creating another variable and adding the function name as the value of that variable. &lt;/p&gt;

&lt;p&gt;Let's look at the below example to understand how to do that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function addTen(number) {
    return number + 10;
}

const firstNumber = addTen(1);  // Answer = 11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above example,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a variable called &lt;code&gt;firstNumber&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We have given the function name (&lt;code&gt;addTen&lt;/code&gt;) as the value to that variable. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you can use this variable to call the function whenever you want! 😊&lt;/p&gt;

&lt;p&gt;&lt;br&gt;
Alright! Now you have learned the basic parts of a function. So let's look at the below pictures to recap everything and understand the anatomy of a function! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6_3spkhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626520790/IGCO1mz2V.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6_3spkhM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626520790/IGCO1mz2V.gif" alt="anatomy-of-js.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--faHVsKlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626567964/hHy2FdElR.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--faHVsKlr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632626567964/hHy2FdElR.jpeg" alt="Anatomy of Function.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope now you have a basic idea of how the function works and the basic parts of Javascript functions. &lt;/p&gt;




&lt;p&gt;There are different ways to write JavaScript functions. We will be looking at three ways of writing functions in the next few sections. These three types are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Function Declarations&lt;/li&gt;
&lt;li&gt;Function Expressions&lt;/li&gt;
&lt;li&gt;Arrow Function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are you ready? Let's go! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yUpRYnjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632631097565/khLIUxIrH.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yUpRYnjK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632631097565/khLIUxIrH.gif" alt="giphy (1).gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#function-declarations"&gt;
  &lt;/a&gt;
  Function Declarations
&lt;/h1&gt;

&lt;p&gt;We use the &lt;code&gt;function&lt;/code&gt; keyword to declare a function. Same like we declare a variable 😊 &lt;/p&gt;

&lt;p&gt;So let's declare another function to calculate the age based on the birth year.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function declaration
function calcAge1(birthyear) {
    return 2021 - birthyear;
}

const age1 = calcAge1(1986);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see what we have done here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a &lt;code&gt;function&lt;/code&gt; by giving the name &lt;code&gt;calcAge1&lt;/code&gt; to calculate the age.&lt;/li&gt;
&lt;li&gt;And we have given the function parameter as &lt;code&gt;birthyear&lt;/code&gt;. So that's the input data that we will be taking to calculate the age. &lt;/li&gt;
&lt;li&gt;We will be returning the results by subtracting the &lt;code&gt;birthyear&lt;/code&gt; from the current year to calculate the age. &lt;/li&gt;
&lt;li&gt;Then, we stored this &lt;code&gt;function&lt;/code&gt; in another variable (&lt;code&gt;age1&lt;/code&gt;) and called the function, and we have given the actual data to calculate the age inside the &lt;code&gt;calcAge1&lt;/code&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is how we simply declare a function.  I hope this is clear to you! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#function-expressions"&gt;
  &lt;/a&gt;
  Function Expressions
&lt;/h1&gt;

&lt;p&gt;Now let's see how we can perform the same function with the function expression.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function expression
const calcAge2 = function(birthyear) {
    return 2021 - birthyear;
}

const age2 = calcAge2(1986);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Earlier, we have started with the &lt;code&gt;function&lt;/code&gt; keyword. But with function expression, we write the function as an expression. Remember that an expression produces a value, so we must create a variable to store that value. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, we create a variable to store the function (&lt;code&gt;calcAge2&lt;/code&gt;), which will be the actual function. &lt;/li&gt;
&lt;li&gt;Then, we write the function as same as before,  &lt;strong&gt;but without a function name&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Next, we add the function parameters, function body, and then call the function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yes, simple as that! &lt;/p&gt;

&lt;p&gt;Alright! Now you might be wondering what's the big difference or big deal between function declaration and function expression. &lt;/p&gt;

&lt;p&gt;There's one major difference between these two. And that is, we can actually &lt;strong&gt;call function declaration before it is defined in the code.&lt;/strong&gt; We call this &lt;strong&gt;hoisting&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Function declarations are hoisted, but expressions are not!&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In the code below, I've called the function before the function declaration and the function expression. So, if you run this code, &lt;code&gt;cosole.log&lt;/code&gt; will produce an error for the 'calcAge2`. Try it out!&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function declaration
const age1 = calcAge1(1986);

function calcAge1(birthyear) {
    return 2021 - birthyear;
}


//Function expression
const age2 = calcAge2(1986);

const calcAge2 = function(birthyear) {
    return 2021 - birthyear;
}

console.log(age1, age2);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;You can learn more about &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"&gt;JavaScript hoisting here.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Okay, let's dive into arrow functions! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bj1KLK8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632634938289/xs8Z3pWLd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bj1KLK8N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632634938289/xs8Z3pWLd.gif" alt="giphy (2).gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  Arrow Functions
&lt;/h1&gt;

&lt;p&gt;There is another way of declaring functions in modern JavaScript, and that's with the arrow function, which actually looks like an arrow: () =&amp;gt; {}&lt;/p&gt;

&lt;p&gt;Arrow functions are actually shorter and faster to write. Let's look at the same example that we used before and convert it to an arrow function. &lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Arrow function
const calcAge3 = birthyear =&amp;gt; 2021 - birthyear;

const age3 = calcAge3(1998);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;Let's see what we have done here,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have created a variable (&lt;code&gt;calcAge3&lt;/code&gt;) to store the function the same as before since the arrow function is also a function expression. &lt;/li&gt;
&lt;li&gt;Then, we have added the &lt;code&gt;birthyear&lt;/code&gt; because we want to calculate the birth year. &lt;/li&gt;
&lt;li&gt;Then, we added an arrow (&lt;code&gt;=&amp;gt;&lt;/code&gt;), and that's the reason we call this &lt;code&gt;arrow function&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;Then, we simply wrote what we wanted to return (&lt;code&gt;2021 - birthyear&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then, we have called the function the same as earlier.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you can see, this code is a lot easier and faster to write. And one of the reasons for that is that we don't need the &lt;code&gt;curly braces&lt;/code&gt; like previously to define a code block for the function body. And another reason is that &lt;code&gt;return&lt;/code&gt; actually happens implicitly here; it automatically returns the value without explicitly defining the &lt;code&gt;return&lt;/code&gt; keyword. &lt;/p&gt;

&lt;p&gt;So this is actually just the simplest form! &lt;/p&gt;

&lt;p&gt;But this form will be changed and gets more complicated when we have more than one parameter or more than one result to return. &lt;/p&gt;

&lt;p&gt;Now let's look at a more complex example where we have to use multiple parameters and code. &lt;/p&gt;

&lt;p&gt;Let's say that we need to check whether I'm eligible to drive. To do that, I need my birth year and my name as parameters. And then, I want to check my current age and then check it against the eligible age to have a driver's license. Then, produce a result saying that I'm eligible or not. &lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const eligibileToDrive = (birthyear, firstName) =&amp;gt; {
    const age = 2021 - birthyear;
    const EligibleToDrive = age &amp;gt; 18;
    return `${firstName} is eligible to drive!`;
}

const eligible = eligibileToDrive(1986, 'Sumudu');
console.log(eligible);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;So in here, we have wrapped the parameters in &lt;code&gt;parenthesis&lt;/code&gt; and wrapped our code in &lt;code&gt;curly braces&lt;/code&gt;. Same as we have done in function declarations and expressions. That's the only difference that you will see between simple and complex arrow functions. &lt;/p&gt;

&lt;p&gt;I hope that now you can understand how you can write simple and complex arrow functions. &lt;/p&gt;



&lt;p&gt;To recap and better understand the difference between these three types of functions, refer to the below code.&lt;/p&gt;

&lt;p&gt;`&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Function declaration
function calcAge1(birthyear) {
    return 2021 - birthyear;
}


//Function expression
const calcAge2 = function(birthyear) {
    return 2021 - birthyear;
}


//Arrow function
const calcAge3 = birthyear =&amp;gt; 2021 - birthyear;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;/p&gt;

&lt;p&gt;So this is all about the basics of JavaScript functions. Of course, there's a lot more to functions than these basic concepts, but you can easily get through the rest when you understand these basics. &lt;/p&gt;

&lt;p&gt;Let's give you all a big hand for reading to the end of this post and trying to understand this complex concept. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--igj9Cn_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632639429878/Yxfzr05y7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--igj9Cn_F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632639429878/Yxfzr05y7.gif" alt="giphy (3).gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this post helps you to clarify all your doubts about functions!&lt;/p&gt;

&lt;p&gt;Happy learning! 🤗&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Usando a Biblioteca Exposed</title>
      <author>Ederson Ferreira</author>
      <pubDate>Mon, 27 Sep 2021 00:33:42 +0000</pubDate>
      <link>https://dev.to/kotlinautas/usando-a-biblioteca-exposed-442</link>
      <guid>https://dev.to/kotlinautas/usando-a-biblioteca-exposed-442</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kotlinautas"&gt;
  &lt;/a&gt;
  Kotlinautas
&lt;/h2&gt;

&lt;p&gt;Esse conteúdo é oferecido e distribuído pela comunidade &lt;a href="https://twitter.com/kotlinautas/"&gt;Kotlinautas&lt;/a&gt;, uma comunidade brasileira que busca oferecer conteúdo gratuito sobre a linguagem Kotlin em um espaço plural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" alt="capa Kotlinautas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-um-orm"&gt;
  &lt;/a&gt;
  O quê é um ORM?
&lt;/h2&gt;

&lt;p&gt;ORM (Mapeamento de Objeto Relacional) é uma maneira de mapear dados de um banco de dados, em objetos de uma aplicação. Como se fosse uma ponte entre classes da nossa aplicação, e o banco de dados da aplicação.&lt;/p&gt;

&lt;p&gt;ORM's servem principalmente para facilitar a comunicação entre uma aplicação e seu banco de dados. Facilitando processos de leitura, escrita, atualização e remoção de dados.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-exposed"&gt;
  &lt;/a&gt;
  O quê é Exposed?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt; é a biblioteca oficial de ORM para Kotlin, criada pela própria JetBrains. Uma de suas principais vantagens é poder usar diferentes bancos de dados, e poder trocar qual banco você está usando de maneira fácil. A lista de bancos de dados atualmente suportada pelo Exposed é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;H2&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MariaDB&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-vamos-criar"&gt;
  &lt;/a&gt;
  O quê vamos criar?
&lt;/h2&gt;

&lt;p&gt;Vamos criar um sistema de cadastro de planetas. Onde poderemos inserir informações sobre um planeta, e essas informações serão inseridas em um banco de dados. Com isso, poderemos usar a Exposed para conectar a nossa aplicação, á um banco de dados que desejarmos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-o-projeto"&gt;
  &lt;/a&gt;
  Criando o projeto
&lt;/h2&gt;

&lt;p&gt;Abra seu IntelliJ no menu inicial e clique em &lt;em&gt;New Project&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfdAWxqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3xauc7y38mqtdej31ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfdAWxqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3xauc7y38mqtdej31ka.png" alt="botão New Project no menu inicial do IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois, selecione a opção &lt;strong&gt;Kotlin DSL build script&lt;/strong&gt;, selecione também a opção &lt;strong&gt;Kotlin/JVM&lt;/strong&gt;, e opicionalmente remova a primeira opção &lt;strong&gt;Java&lt;/strong&gt;. Essa opção não vai mudar em nada, pois ela dá suporte do Gradle á linguagem Java, mas apenas iremos usar Kotlin.&lt;/p&gt;

&lt;p&gt;Após isso, clique em &lt;strong&gt;Next&lt;/strong&gt; e escreva o nome do projeto e a localização na sua máquina. Essas duas opção são completamente pessoais, caso não tenha nenhuma ideia, coloque algo como &lt;strong&gt;exposed&lt;/strong&gt; apenas como identificação.&lt;/p&gt;

&lt;p&gt;Agora, com o projeto aberto, vá ao aquivo &lt;code&gt;build.gradle.kts&lt;/code&gt; e adicione as dependências da Exposed, com a seção &lt;code&gt;dependencies&lt;/code&gt; ficando assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kotlin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stdlib"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-core:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-dao:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-jdbc:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.h2database:h2:1.4.199"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-api:1.7.5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-simple:1.6.4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, clique no elefante no canto superior direito para carregar as alterações no Gradle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNZzWp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25316fmqf0v5omh9q6fi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNZzWp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25316fmqf0v5omh9q6fi.png" alt="Elefante do Gradle no canto superior direito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, poderemos começar a programar. Você pode criar um arquivo em &lt;code&gt;src/main/kotlin/&lt;/code&gt; chamado &lt;code&gt;main.kt&lt;/code&gt; para ser o arquivo principal da aplicação.&lt;/p&gt;

&lt;p&gt;Mas com qualquer nome de arquivo, como você irá usar a Exposed, sempre se lembre de importar a Exposed no começo do arquivo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usando-a-exposed"&gt;
  &lt;/a&gt;
  Usando a Exposed
&lt;/h2&gt;

&lt;p&gt;Primeiro, vamos precisar criar um objeto que irá representar uma tabela em nosso banco de dados, e dentro desse objeto inserir as colunas do nosso banco (como propriedades). Isso pode ser feito da seguinte maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.*&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.transactions.transaction&lt;/span&gt;

&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nome&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nome"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"massa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solido&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"solido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos a palavra &lt;code&gt;object&lt;/code&gt; para criar o objeto, colocamos o nome da tabela &lt;code&gt;Planetas&lt;/code&gt;, e o tipo da variável, que é um tipo da Exposed, Sendo &lt;code&gt;Table&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Dentro do objeto, criamos três variáveis, sendo &lt;code&gt;nome&lt;/code&gt;, &lt;code&gt;massa&lt;/code&gt;, e &lt;code&gt;solido&lt;/code&gt;. &lt;code&gt;nome&lt;/code&gt; irá guardar o nome do planeta, &lt;code&gt;massa&lt;/code&gt; irá guardar a massa do planeta comparada á terra e &lt;code&gt;solido&lt;/code&gt; irá determinar se o planeta é sólido ou não;&lt;/li&gt;
&lt;li&gt;Para determinar essas variáveis, usamos tipos de dados de um banco de dados, como &lt;code&gt;varchar&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, e &lt;code&gt;bool&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após isso, podemos criar a nossa função &lt;code&gt;main&lt;/code&gt;. Dentro dela, vamos primeiramente conectar ao banco de dados. Isso pode ser feito com a função &lt;code&gt;Database.connect&lt;/code&gt; dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Estamos usando o banco de dados H2. Um banco de dados Java, que pode funcionar apenas na memória. Vamos usar esse banco de dados pois a cada vez que rodarmos o programa, teremos um novo banco totalmente zerado. Com isso você ficará livre para testar o banco, criando, lendo, editando e removendo dados;&lt;/li&gt;
&lt;li&gt;Para fazer essa conexão, tivemos que passar um texto que representa esse banco. Caso você queira mudar o banco, você apenas irá precisar mudar esse texto;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora precisamos inserir a tabela &lt;code&gt;Planetas&lt;/code&gt; que criamos no banco. Isso pode ser feito de maneira completamente automática usando a função &lt;code&gt;SchemaUtils.create&lt;/code&gt;. Essa função pode ser usada da seguinte maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos um bloco &lt;code&gt;transaction&lt;/code&gt; pois toda conexão ao banco (escrita, leitura, edição e remoção) precisa estar dentro de um bloco &lt;code&gt;transaction&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Passamos ao &lt;code&gt;SchemaUtils.create&lt;/code&gt; o nosso objeto &lt;code&gt;Planetas&lt;/code&gt;. Com isso, essa tabela será criada no banco de dados;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos criar um bloco &lt;code&gt;while (true)&lt;/code&gt; onde iremos executar um mesmo trecho de código eternamente, onde iremos ler o nome, massa e se o planeta é sólido ou não, vamos enviar esses dados ao banco de dados, e também mostrar todas as linhas do banco na tela.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos usar a função &lt;code&gt;readLine&lt;/code&gt; para pegar os dados da linha de comando, mostrando na tela pergunta por pergunta:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;na variável &lt;code&gt;nomePlaneta&lt;/code&gt; apenas transformamos o texto escrito na linha de comando em &lt;code&gt;String&lt;/code&gt; com &lt;code&gt;.toString()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;na variável &lt;code&gt;massaPlaneta&lt;/code&gt; primeiro transformamos o texto escrito em &lt;code&gt;String&lt;/code&gt;, e depois transformamos essa &lt;code&gt;String&lt;/code&gt; em &lt;code&gt;Double&lt;/code&gt;. Para assim obtermos o número decimal da massa do planeta em relação á terra;&lt;/li&gt;
&lt;li&gt;na variável &lt;code&gt;solidoPlaneta&lt;/code&gt; testamos se o texto escrito é igual á "sim". se essa condição for verdadeira, o planeta é sólido. Se não, o planeta não é sólido;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos executar a transação para inserirmos esses dados no banco:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Para inserirmos esses dados, podemos usar a função &lt;code&gt;Planetas.insert&lt;/code&gt;, informando o valor de cada coluna do banco com &lt;code&gt;it[COLUNA] = valor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora já conseguimos escrever dados no banco. Por fim, vamos pegar todos os dados do banco, e mostrar na tela. Mostrando que realmente conseguimos escrever os dados. Primeiro, vamos pegar todas as linhas da tabela &lt;code&gt;Planetas&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;planetasSalvos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos percorrer por todo essa lista de dados, e mostrar na tela planeta por planeta usando um &lt;code&gt;.map&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
          &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
          &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;planetasSalvos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="n"&gt;planetasSalvos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
          &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Planeta ${it[Planetas.nome]} tem ${it[Planetas.massa]} massas terrestres e é sólido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Planeta ${it[Planetas.nome]} tem ${it[Planetas.massa]} massas terrestres e não é sólido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Dentro de um &lt;code&gt;map&lt;/code&gt;, percorrermos elemento por elemento, e para nos referirmos ao elemento atual, podemos usar a variável &lt;code&gt;it&lt;/code&gt;. e dentro desse &lt;code&gt;it&lt;/code&gt; podemos pegar os valores de cada linha, podendo assim mostrar na tela;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, executando esse programa, poderemos ver na prática como criamos um código que pode inserir e ler dados de maneira dinâmica:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Insira o nome do planeta: Mercúrio
Insira a massa do planeta: 0.1
O planeta é sólido? [sim/não]: sim
Planeta Mercúrio tem 0.1 massas terrestres e é sólido
Insira o nome do planeta: Vênus
Insira a massa do planeta: 0.9
O planeta é sólido? [sim/não]: sim
Planeta Mercúrio tem 0.1 massas terrestres e é sólido
Planeta Vênus tem 0.9 massas terrestres e é sólido
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-e-delete"&gt;
  &lt;/a&gt;
  Update e Delete
&lt;/h3&gt;

&lt;p&gt;Duas operações que não usamos foram a &lt;strong&gt;Update&lt;/strong&gt;e &lt;strong&gt;Delete&lt;/strong&gt;. Essas duas são muito parecidas em seu uso na Exposed. Pois nas duas é (quase sempre) necessário usar um parâmetro &lt;code&gt;WHERE&lt;/code&gt; para definir quais linhas desejamos mudar/remover. Por exemplo, podemos fazer um Update com WHERE colocando a condição como argumento da função, e a alteração em si no corpo. Dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s"&gt;"teste"&lt;/span&gt; &lt;span class="p"&gt;}){&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Vênus"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Colocamos a condição entre &lt;code&gt;{}&lt;/code&gt; como argumento da função, e no corpo alteramos a linha diretamente;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E para o Delete podemos fazer a mesma coisa, mas agora apenas precisamos colocar a condição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deleteWhere&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s"&gt;"teste"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usando-outros-bancos-de-dados"&gt;
  &lt;/a&gt;
  Usando outros bancos de dados
&lt;/h3&gt;

&lt;p&gt;Caso você queira usar os outros bancos de dados que a Exposed suporta, você pode ver a lista de URL's de conexão de diferentes bancos. Essa lista pode ser acessada &lt;a href="https://github.com/JetBrains/Exposed/wiki/DataBase-and-DataSource"&gt;clicando aqui&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;p&gt;Nesse artigo você aprendeu como usar de forma básica a biblioteca &lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt;, para escrever, ler, editar e remover dados de um banco.&lt;/p&gt;

&lt;p&gt;Obrigado por ler 💙&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>backend</category>
      <category>database</category>
    </item>
    <item>
      <title>📊 Intro: DORA Metrics</title>
      <author>Lorna Watson</author>
      <pubDate>Mon, 27 Sep 2021 00:14:17 +0000</pubDate>
      <link>https://dev.to/lornasw93/calculating-dora-metrics-3k1l</link>
      <guid>https://dev.to/lornasw93/calculating-dora-metrics-3k1l</guid>
      <description>&lt;p&gt;I've created a small Node.js project to calculate DORA Metrics, it's ongoing so is not finished but you can find the &lt;a href="https://github.com/lornasw93/dora-metrics"&gt;repo here&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;References/useful links: &lt;a href="https://services.google.com/fh/files/misc/state-of-devops-2021.pdf"&gt;Accelerate: State of DevOps 2021&lt;/a&gt;, &lt;a href="https://www.sleuth.io/post/dora-metrics-explained"&gt;DORA metrics explained&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-dora"&gt;
  &lt;/a&gt;
  What is DORA?
&lt;/h2&gt;

&lt;p&gt;DORA (DevOps Research and Assessment) represents 7 years of research by a team at Google to identify the most effective and efficient ways to develop and deliver software. They surveyed more than 32,000 industry professionals to find out and understand what makes a high performing team different than a low performing team. As a now industry standard, DORA's research has identified four key metrics (depending on where you look will have slightly different names):&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deployment-frequency"&gt;
  &lt;/a&gt;
  Deployment Frequency
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;throughput&lt;/u&gt; by how often an organisation successfully releases to production.&lt;/p&gt;

&lt;p&gt;For elite performers: on demand, multiple deploys per day&lt;br&gt;
For high performers: once per week - once per week&lt;br&gt;
For medium performers: once per month - once per 6 months&lt;br&gt;
For low performers: &amp;lt; once per 6 months&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lead-time-for-changes"&gt;
  &lt;/a&gt;
  Lead Time for Changes
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;throughput&lt;/u&gt; by the amount of time it takes a commit to get into production.&lt;/p&gt;

&lt;p&gt;For elite performers: &amp;lt; one hour&lt;br&gt;
For high performers: 1 day - 1 week&lt;br&gt;
For medium performers: 1 month - 6 months&lt;br&gt;
For low performers: &amp;gt; 6 months&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#time-to-restore-service"&gt;
  &lt;/a&gt;
  Time to Restore Service
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;stability&lt;/u&gt; by how long it takes an organisation to recover from a failure in production.&lt;/p&gt;

&lt;p&gt;For elite performers: &amp;lt; 1 hour&lt;br&gt;
For high performers: &amp;lt; 1 day&lt;br&gt;
For medium performers: 1 day - 1 week&lt;br&gt;
For low performers: &amp;gt; 6 months&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#change-failure-rate"&gt;
  &lt;/a&gt;
  Change Failure Rate
&lt;/h3&gt;

&lt;p&gt;Measure &lt;u&gt;stability&lt;/u&gt; by percentage of deployments causing a failure in production. &lt;/p&gt;

&lt;p&gt;For elite performers: 0% - 15%&lt;br&gt;
For high performers: 16% - 30%&lt;br&gt;
For medium performers: 16% - 30%&lt;br&gt;
For low performers: 16% - 30%&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  ✨ Thank you ✨
&lt;/h2&gt;

&lt;p&gt;This is a first post in a series #AllAboutDora, hope this post was useful and interesting!&lt;/p&gt;

</description>
      <category>node</category>
      <category>devops</category>
      <category>dora</category>
      <category>showdev</category>
    </item>
    <item>
      <title>Web 3.0 for mortals</title>
      <author>Jesus Guerrero</author>
      <pubDate>Sun, 26 Sep 2021 23:59:07 +0000</pubDate>
      <link>https://dev.to/jesusantguerrero/web-3-0-for-mortals-3h04</link>
      <guid>https://dev.to/jesusantguerrero/web-3-0-for-mortals-3h04</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1rTqoT6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkca0azk664hmy1aeggj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1rTqoT6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bkca0azk664hmy1aeggj.png" alt="Cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;Lately has emerged a lot of information and hype about Web 3.0 even though it is claimed as the future of the web I missed an honest take. Information about how to get your hands on, what useful products are made with it, the real benefits, the cons. I was looking for this rather than someone selling me the idea.&lt;/p&gt;

&lt;p&gt;That's why in this article, we'll take an honest look at the next generation of the web:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A conceptual explanation&lt;/li&gt;
&lt;li&gt;Examples of Web 3.0 apps&lt;/li&gt;
&lt;li&gt;How the code looks like.&lt;/li&gt;
&lt;li&gt;How to get started.&lt;/li&gt;
&lt;li&gt;The cons&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-concept-web-30"&gt;
  &lt;/a&gt;
  The concept "Web 3.0"
&lt;/h2&gt;

&lt;p&gt;Before telling what web3.0 is about let's explain a little bit what were the previous generations were about. It can be summed up like this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the original web A.K.A  &lt;strong&gt;Web 1.0&lt;/strong&gt; the information flowed in one direction and was static, it was from the sites to the users.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web 2.0&lt;/strong&gt;: Information started to be bidirectional, users interact with web apps feeding them with data (uploading photos, creating content, sharing, etc). Its pick was social apps, video/streaming apps as we know today.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Web 3.0&lt;/strong&gt; Aims to be a more semantic, intelligent, and decentralized web where Artificial Intelligence, Blockchain, crypto play the main role in web development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice how each generation is built upon the necessity created by the previous one, In this case, the current Web 2.0 where our data is practically owned by big companies, that can censor us, and used it to whatever thing they put in their terms and conditions made the data centralized. The main task of the &lt;strong&gt;decentralized&lt;/strong&gt; aspect that web3.0 introduces is privacy, security and brings ownership to the users; and here is where blockchain comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-blockchain"&gt;
  &lt;/a&gt;
  What is Blockchain?
&lt;/h2&gt;

&lt;p&gt;Basically, Blockchain is a way to store information where data is grouped together, secured by a crypto signature, and immutable, once created can't be changed instead a new block is created with the new information, which is known as a block. Every block saves a reference of the previous block as well as the next one if exists, the information is chained together in chronological order.&lt;/p&gt;

&lt;p&gt;But in addition, Blockchain is responsible for keeping this information in the main ledger that will work as a source of truth and can be read by anyone. This is replicated in multiple computers known as nodes that also have the role of adding new blocks to the chain and share with the network in order to be validated and finally added in the main ledger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ethereum"&gt;
  &lt;/a&gt;
  Ethereum
&lt;/h2&gt;

&lt;p&gt;There are many implementations of blockchain but here I am going to cover &lt;strong&gt;The Ethereum Blockchain&lt;/strong&gt; that not only saves transactions and state data but also serves as a platform to run programs called &lt;strong&gt;Smart Contracts&lt;/strong&gt; (we'll talk a little more about them below) this is the difference between Ethereum blockchain and others like Bitcoin Blockchain (not the cryptocurrency).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ethereum is a technology that lets you send cryptocurrency to anyone for a small fee. It also powers applications that everyone can use and no one can take down.&lt;/p&gt;

&lt;p&gt;It's the world's programmable blockchain&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ethereum works like a big computer, that uses the resources of its nodes as one and every node in the network is running a system called The Ethereum Virtual Machine(EVM) this is the one that allows us to run programs on the Blockchain. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talk-is-cheap-show-me-the-code"&gt;
  &lt;/a&gt;
  Talk is cheap, show me the code
&lt;/h2&gt;

&lt;p&gt;Now that we are familiar with the concept let's see what a blockchain developer does and how the programs look like. &lt;/p&gt;

&lt;p&gt;The resulting program for the Ethereum Blockchain is known as Smart Contract. There are high-level languages that compile the code to EVM language, &lt;strong&gt;Solidity&lt;/strong&gt; is the most popular and has some similarities with javascript but there are others like Serpent and  LLL (Lisp Like Language).&lt;/p&gt;

&lt;p&gt;This is how a hello world would look like in Solidity:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;//SPDX-License-Identifier: Unlicense
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Greeter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Hello world"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="k"&gt;memory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line is an instruction for the compiler setting the version of Solidity due to breaking changes of the latest versions with the previous ones, It is a strongly typed language. Here is a variable definition and how a function is defined. Don't worry I'll let you sources to learn more about it here I just wanted to show how the code looks like to give you an idea.&lt;/p&gt;

&lt;p&gt;Smart Contracts will behave as our backend and can be connected to a frontend to create a Decentralized App (Dapp) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#live-examples"&gt;
  &lt;/a&gt;
  Live Examples
&lt;/h3&gt;

&lt;p&gt;The most common examples fall into categories like finance, games and marketplace. Some of the Dapps that standout are:  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://brave.com/"&gt;Brave Browser&lt;/a&gt;&lt;/strong&gt;: Brave made a reimplementation of how ads work in browsers offering tokens to users to see ads and selecting the frequency they want to see them. Those tokens can be used to support content creators and exchange for future services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://opensea.io/?ref=0xcd2b3c517d3de4f962dc01700dc57960cdbeb5e9&amp;amp;utm_source=DappRadar&amp;amp;utm_medium=deeplink&amp;amp;utm_campaign=visit-website"&gt;Open Sea&lt;/a&gt;&lt;/strong&gt;: Digital Art Market Place where web artists can sell digital resources (image, video, audio, or 3D art)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://gitcoin.co/"&gt;Gitcoin&lt;/a&gt;&lt;/strong&gt;: That allows users to earn money building open-source public projects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-to-get-started"&gt;
  &lt;/a&gt;
  How to get started
&lt;/h3&gt;

&lt;p&gt;There's a gamified tutorial that can serve as a practical introduction with the Solidity language and dapps called &lt;a href="https://cryptozombies.io/"&gt;cryptozombies&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After grasp some of the main concepts of Solidity you can go and install &lt;a href="https://hardhat.org/getting-started/"&gt;hardhat&lt;/a&gt; to create your own contracts and test, deploy in your own local development environment &lt;/p&gt;

&lt;p&gt;Connect the smart contract with a frontend (can be your framework of choice) &lt;a href="https://docs.ethers.io/v5/getting-started/"&gt;ether.js&lt;/a&gt; is a lightweight, ESM ready package to interact with smart contracts in javascript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockchain-challenges"&gt;
  &lt;/a&gt;
  Blockchain challenges.
&lt;/h2&gt;

&lt;p&gt;It isn't all roses in blockchain, every new block created requires a strong amount of computation to solves a &lt;strong&gt;Proof of work&lt;/strong&gt; the first node to solve that problem ends up adding the new block to the blockchain and emit the change to all other nodes.&lt;/p&gt;

&lt;p&gt;How Ethereum incentives nodes to spend those resources in solving the proof of work fast, and how to prevent developers and its smart contracts from consuming all resources with an accidental infinite loop for example. The answer was paying.&lt;/p&gt;

&lt;p&gt;The first to solve a proof of work receives a payment from the network, and every transaction requires payment so if an infinite loop consuming resources is introduced in a small contract it will stop when it has nothing to pay. The fee payments are in &lt;strong&gt;Ether(ETH)&lt;/strong&gt; the cryptocurrency of Ethereum.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is expensive to develop apps in the blockchain because of the cost associated with every transaction&lt;/li&gt;
&lt;li&gt;Computation requires a lot of energy currently&lt;/li&gt;
&lt;li&gt;Transactions are slow compared with web 2.0&lt;/li&gt;
&lt;li&gt;The extra steps, software, and education can be a barrier for new developers and by extension the main adoption&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion.
&lt;/h2&gt;

&lt;p&gt;The main concerns of web 3.0 are interesting and a big contrast of how we see and apply the web today&lt;/p&gt;

&lt;p&gt;It opens a lot of possibilities and I am willing to see how it evolves in the near future and how it creates conditions to make development more affordable to expand the vision of a more secure, decentralized and private web. &lt;/p&gt;

&lt;p&gt;Thanks for reading. I hope the article helps to bring some clarity on the topic if you have any questions the comments are open, or if you like &lt;a href="https://twitter.com/JesusntGuerrero"&gt;Twitter&lt;/a&gt; as well as my &lt;a href="https://github.com/jesusantguerrero"&gt;Github&lt;/a&gt; where I do some experiments and projects.&lt;/p&gt;

&lt;p&gt;Have a good day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resouces"&gt;
  &lt;/a&gt;
  Resouces
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dappradar.com/"&gt;DappRadar&lt;/a&gt; WebApp that list Descentralized apps&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ethereum.org/en/developers/docs/"&gt;Ethereum Developer Docs&lt;/a&gt; Official documentation describing every concept of Ethereum network&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cryptozombies.io/"&gt;Cryptozombies&lt;/a&gt; Practical introduction to Solidity in form of gamified tutorial. &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/oliverjumpertz/status/1396394220299169793"&gt;Oliver's thread on become a Web 3.0 developer&lt;/a&gt; Thread with resources (Courses, tools) with what a developer need to become a Web 3.0 developer&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/VittoStack/status/1439980837899055108"&gt;Vitto's thread on web3.0&lt;/a&gt; Useful thread with information and resources to understand and apply web3.0&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ethereum.org/en/developers/docs/web2-vs-web3/"&gt;Web 2 vs Web 3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
    </item>
    <item>
      <title>Big O Basics  </title>
      <author>Danielle Ellis</author>
      <pubDate>Sun, 26 Sep 2021 23:04:51 +0000</pubDate>
      <link>https://dev.to/thedanielleellis/big-o-basics-3j6h</link>
      <guid>https://dev.to/thedanielleellis/big-o-basics-3j6h</guid>
      <description>&lt;p&gt;The code we choose to use can impact the speed and the performance of our program. How would we know which algorithm is most efficient? Big O Notation is used in Computer Science and measures how quickly the runtime of an algorithm based on the number of input in a function. &lt;/p&gt;

&lt;p&gt;Big O looks at the worst case scenario or the max number of steps to take in a problem. On the other hand, Big Omega looks at the best case scenario or the least number of steps to take in a problem. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-runtimes-from-least-to-greatest-effectiveness"&gt;
  &lt;/a&gt;
  Common Runtimes from least to greatest effectiveness:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(n^2)&lt;/strong&gt;: Quadratic time - as (n) grows, runtime squares. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt;: Linear - as (n) scales, runtime scales. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(log n)&lt;/strong&gt;: Logarithmic time - halves dataset until it finds (n). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt;: Constant - as (n) grows, there is no impact. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#big-o-complexity-chart"&gt;
  &lt;/a&gt;
  Big O Complexity chart
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZrROxqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4c3l6pys5u3v1a6s9g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZrROxqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4c3l6pys5u3v1a6s9g8.png" alt="Big ) Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This chart shows the runtime with green shaded area being the most effective to the red shaded areas being the least effective. &lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>algorithms</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>🖐 5 Things Every Developer Must Know about Software Architecture </title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Sun, 26 Sep 2021 23:02:03 +0000</pubDate>
      <link>https://dev.to/jarjanazy/5-things-every-developer-must-know-about-software-architecture-35ki</link>
      <guid>https://dev.to/jarjanazy/5-things-every-developer-must-know-about-software-architecture-35ki</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-software-architecture-isnt-about-big-design-upfront"&gt;
  &lt;/a&gt;
  1. Software Architecture Isn’t About Big Design Upfront ☝️
&lt;/h2&gt;

&lt;p&gt;Big designs upfront are usually done in waterfall models of software development.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The waterfall model is predicted to be bad by its own inventor :)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The upfront design should be a basic, good one done with an iterative and incremental process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-do-we-stop-the-architecture-planning-%EF%B8%8F"&gt;
  &lt;/a&gt;
  When Do We Stop The Architecture Planning? ⛔️
&lt;/h3&gt;

&lt;p&gt;When we have a solid understanding of the following aspects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The significant architectural drivers

&lt;ul&gt;
&lt;li&gt;Cost, Response Time, etc...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Requirements.&lt;/li&gt;
&lt;li&gt;Constraints.&lt;/li&gt;
&lt;li&gt;The context and scope of the product.&lt;/li&gt;
&lt;li&gt;The significant design choices.&lt;/li&gt;
&lt;li&gt;Technology used.&lt;/li&gt;
&lt;li&gt;Is our application a Monolith or is a set of Microservices?&lt;/li&gt;
&lt;li&gt;The risks associated with the product.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2-every-software-teamproduct-needs-to-consider-architecture-and-needs-to-have-a-technical-leader"&gt;
  &lt;/a&gt;
  2. Every Software Team/Product Needs To Consider Architecture And Needs To Have A Technical Leader ✌️
&lt;/h2&gt;

&lt;p&gt;This is crucial to have consistent patterns in the product.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-whats-the-software-architect-role-about"&gt;
  &lt;/a&gt;
  3. What's The Software Architect Role About 👨‍🔧
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Coding.&lt;/li&gt;
&lt;li&gt;Keeping an eye on what’s going on with the code base.&lt;/li&gt;
&lt;li&gt;Coaching.&lt;/li&gt;
&lt;li&gt;Collaboration with others to incrementally draw the architecture of the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s a continuous role that spans the life of the project.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-an-architect-doesnt-need-to-use-uml"&gt;
  &lt;/a&gt;
  4. An Architect Doesn’t Need To Use UML 📐
&lt;/h2&gt;

&lt;p&gt;There are several other tools that  enable us to create architecture diagrams using GUIs or even using code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/plantuml-stdlib/C4-PlantUML"&gt;C4-PlantUML&lt;/a&gt; (code based)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.diagrams.net/"&gt;Diagrams.net&lt;/a&gt; (GUI based)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://structurizr.com/"&gt;Structurizr&lt;/a&gt; (both code and GUI based)&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#5-a-good-software-architecture-enables-agility"&gt;
  &lt;/a&gt;
  5. A Good Software Architecture Enables Agility ❤️
&lt;/h2&gt;




&lt;h2&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits 🙌
&lt;/h2&gt;

&lt;p&gt;This post has been prepared using the lecture of Simon Brown Five &lt;a href="https://www.youtube.com/watch?v=9Az0q2XHtH8&amp;amp;t=543s"&gt;Things Every Developer Should Know about Software Architecture&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>python</category>
    </item>
    <item>
      <title>Git and GitHub: The Complete Guides - Chapter 7: Forking and Cloning</title>
      <author>Goran Kortjie</author>
      <pubDate>Sun, 26 Sep 2021 22:17:15 +0000</pubDate>
      <link>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-7-forking-and-cloning-25gl</link>
      <guid>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-7-forking-and-cloning-25gl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---q85aXGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r15spp4r75strpqbnm05.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---q85aXGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r15spp4r75strpqbnm05.gif" alt="hello-bubble"&gt;&lt;/a&gt;&lt;br&gt;
Today we are going to copy 'someone else's' repository on our GitHub account and learn how to clone it to our local computer. We will be looking at &lt;strong&gt;Forking&lt;/strong&gt; and &lt;strong&gt;Cloning&lt;/strong&gt; in GitHub.&lt;/p&gt;

&lt;p&gt;Those two options allow us to get access to any open source repositories which are available on GitHub, it allows us to work on them, make some changes, update files and contribute those updates to the original &lt;u&gt;maintainers/owner&lt;/u&gt; of the project.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#here-we-will-cover"&gt;
  &lt;/a&gt;
  Here we will cover:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Forking&lt;/li&gt;
&lt;li&gt;Cloning&lt;/li&gt;
&lt;li&gt;Contribute to the original project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6x08k90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywjsn5798jowhj6kmzs3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6x08k90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywjsn5798jowhj6kmzs3.gif" alt="collab"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#forking"&gt;
  &lt;/a&gt;
  Forking
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;To follow along you will need to create a second account on GitHub.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we have a new account we need to search for the project we've been working on so far, &lt;em&gt;i.e our first account&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general we can search and use any of the open source repositories available on GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to search for the &lt;em&gt;username&lt;/em&gt; of the previous account because if we just search for the name of the project which in this case is &lt;code&gt;gitProject&lt;/code&gt;, we will get tons of results.&lt;/p&gt;

&lt;p&gt;To search for the username of the previous project we type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iFieryGodME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;My username is &lt;strong&gt;iFieryGodME&lt;/strong&gt; but yours will be different!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we run the search, we should come across a list. At the bottom of the list is a tab called &lt;code&gt;Users&lt;/code&gt;, when we click on that we should see our username of the previous account.&lt;/p&gt;

&lt;p&gt;When we click on the account, we are taken to the overview of the account where we will see the repository we've been working on as well as some other things specific to our account.&lt;/p&gt;

&lt;p&gt;We click on the repository and at the very top-right, we should see the button that says &lt;code&gt;fork&lt;/code&gt;. We click this &lt;code&gt;fork&lt;/code&gt; button to begin the forking process.&lt;/p&gt;

&lt;p&gt;It will take a few seconds for the process to complete and once it is done, we will see the entire repository has been copied to our new account.🍴&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wxItSyTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2znf1iopoidf4ito68zx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxItSyTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2znf1iopoidf4ito68zx.gif" alt="forking-on-github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the exact same copy of the original repo, all the source files are here as well as all the commits which have been made so far. The fork option in GitHub allows us to copy the original repository to our account.&lt;/p&gt;

&lt;p&gt;If we go back to the original repo, at the top-right, right after the fork button we will see the number of forks. If we click on the number we will see the owner of the original repo and the username who forked the repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IsZ4MiTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqnl6461i8h6lteaq5s4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IsZ4MiTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqnl6461i8h6lteaq5s4.gif" alt="github-fork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloning"&gt;
  &lt;/a&gt;
  Cloning
&lt;/h2&gt;

&lt;p&gt;To start with cloning lets go to the terminal in VS-CODE and create a new folder on the desktop directory.&lt;/p&gt;

&lt;p&gt;Since we are in the project directory currently, we need to go up one directory by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to create the folder and call it &lt;code&gt;git-project-clone&lt;/code&gt; by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir git-project-clone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the folder is created we can enter into it by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd git-project-clone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome we done here for now!💪&lt;/p&gt;

&lt;p&gt;We now have to go back to GitHub account with our original project and click on the green button that reads &lt;code&gt;Code&lt;/code&gt;, a dropdown will appear and we see a link, we copy the link by clicking on the &lt;code&gt;copy icon&lt;/code&gt; to the right of the link.&lt;/p&gt;

&lt;p&gt;Once the link is copied, go back to the terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the link we copied on GitHub. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/iFieryGodME/gitProject.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Your link will be different to mine since it will have a different account name or username.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVeibe59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi4z70cwlpag101vbcmx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVeibe59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi4z70cwlpag101vbcmx.gif" alt="git-clone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome job, we just cloned the remote repo to our local folder we created.👥&lt;/p&gt;

&lt;p&gt;We can check this by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will display to us the files and folders inside of our directory.&lt;/p&gt;

&lt;p&gt;We will see a folder with the name of our original project and if we go into it and show its contents, we will see all the source files. Also if we run the history we will see all the commits that we ran on the original repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNhP9qt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v731prryhiicajpczfb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNhP9qt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v731prryhiicajpczfb.gif" alt="git-clone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-the-original-project"&gt;
  &lt;/a&gt;
  Contribute to the original project
&lt;/h2&gt;

&lt;p&gt;Let us consider how we can contribute to an open source repository. Nowadays there are tons of open source projects on Github, which many different developers are working on. They copy the repo's, update them and then send pull requests to the owners.&lt;/p&gt;

&lt;p&gt;On the other side of things, the owners receive pull requests from the contributors, they consider the changes and if they are happy, they merge the updates with original repository.&lt;/p&gt;

&lt;p&gt;This process is called &lt;strong&gt;Contributing&lt;/strong&gt;, and this is the way different libraries and frameworks are updating today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" alt="collab-human-paper-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#we-are-going-to-simulate-the-scenario-of-contributing"&gt;
  &lt;/a&gt;
  We are going to simulate the scenario of contributing.
&lt;/h5&gt;

&lt;p&gt;We are starting from the directory &lt;code&gt;git-project-clone&lt;/code&gt;, where we have cloned the original repo.&lt;/p&gt;

&lt;p&gt;We now can update this repository by making changes to the index.html file and the style.css file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLz7JfDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmjgdm49ea1sd3gonlz4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLz7JfDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmjgdm49ea1sd3gonlz4.gif" alt="Modify-index-and-style"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once we make the changes we save and commit them to history as usual.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We should be familiar with this process now, since we have done it many times during the chapters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After we have committed the files to history we need to push the changes to the master branch, i.e the new GitHub account we created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y73NIFp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytivb8g7t3vzexr8xqiy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y73NIFp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytivb8g7t3vzexr8xqiy.gif" alt="git-push-to-remote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You might encounter a problem trying to push the changes to the new account, remember we setup the Git and GitHub credentials previously. We need permission to push the changes through to our new account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many ways of doing this type of thing depending on whether you are working on Windows or Mac.&lt;/p&gt;

&lt;p&gt;On Mac, in the terminal run the command to remove the remote the current origin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote rm origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to add a new origin, we need to have an SSH key to run this command. If you do not have one or you are not sure whether you have generated one, you can run the following command in the terminal to find out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls -al ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you get a response that says &lt;code&gt;no such file exists&lt;/code&gt;, then you need to generate an SSH key. To do this you need to run the following command, substituting the email with your own:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-keygen -t ed25519 -C "your_email@example.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get the following message:&lt;code&gt;&amp;gt; Generating public/private ed25519 key pair.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next you will be prompted to "Enter a file in which to save the key," just press Enter. Then at the prompt, type a secure passphrase and confirm it again.&lt;/p&gt;

&lt;p&gt;Awesome stuff👌&lt;/p&gt;

&lt;p&gt;Now you need to copy your public key to your clipboard, you can do this by running the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pbcopy &amp;lt; ~/.ssh/id_ed25519.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If your &lt;strong&gt;id_ed25519&lt;/strong&gt; is different then you need to specify that id, you can find the id by running &lt;strong&gt;cd ~/.ssh&lt;/strong&gt;, then show the contents of the folder with an &lt;strong&gt;ls&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now go to your GitHub account and go to the settings menu, in the dropdown click the &lt;code&gt;SSH and GPG Keys&lt;/code&gt;. Give your key a title and in the &lt;strong&gt;key&lt;/strong&gt; field you paste the public key, then click &lt;code&gt;add ssh key&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;You will be prompted to confirm your GitHub account password.&lt;/p&gt;

&lt;p&gt;Once complete, go back to your project in GitHub and click on the green button that reads &lt;code&gt;Code&lt;/code&gt;. Choose the SSH option and now you will see an SSH key available, click on the far right side to copy the SSH Key to your clipboard.&lt;/p&gt;

&lt;p&gt;Now back in the terminal run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by your SSH key, after you run this command you are able to push your changes to the new GitHub account. &lt;/p&gt;

&lt;p&gt;If you still run into issues you can go to the official GitHub docs for instruction. &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh"&gt;GitHub Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are on Windows you can change your GitHub login details by clicking &lt;code&gt;manage windows credentials&lt;/code&gt; in the Credential Manager and then find the GitHub link. If you run into any issues feel free to ask.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back to contributing...When we go back to our new GitHub account then we should see our commits we just made from our local repo.&lt;/p&gt;

&lt;p&gt;To send these changes to the original owner we need to create a &lt;u&gt;new pull request&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2wbScwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrv1681e0fmcxtdc7ai.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2wbScwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrv1681e0fmcxtdc7ai.gif" alt="github-pull-request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see when we create a &lt;u&gt;new pull request&lt;/u&gt;, GitHub compares the owner origin/master with the our new account origin/master. In our case we have no merging conflicts.&lt;/p&gt;

&lt;p&gt;Next we need to give a description. In the real world you want to give the owner a clear and thorough explanation of the changes you made in the description. Then we click the green button marked &lt;code&gt;create pull request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next GitHub will check if we can merge with the owner's repo. Notice that we cannot perform the merge on our side, this is because it is up to the owner whether they want to accept the merge.&lt;/p&gt;

&lt;p&gt;Now we go to the owners GitHub account of the original project. You will notice that there is &lt;strong&gt;1&lt;/strong&gt; pull request on the owners repo. We can click on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" alt="collab-human-paper-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will see the pull request from the second account with its commits and the changes, we can review the commits made by the other user as well as the changes that were made to the project. The green background indicates the changes that were added.&lt;/p&gt;

&lt;p&gt;If we are happy with the changes we can merge the branches. Also we can write a comment to the contributor. &lt;/p&gt;

&lt;p&gt;Once we click the &lt;code&gt;merge pull request&lt;/code&gt; green button. The branches will merge and the changes will be reflected on the owners repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ViP36hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tnikzs9xgsz7j1g2yu7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ViP36hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tnikzs9xgsz7j1g2yu7.gif" alt="github-pull-request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is the way we can contribute to an open source project on GitHub.&lt;/p&gt;

&lt;p&gt;Let’s consider what might happen if we encounter a &lt;strong&gt;merge conflict&lt;/strong&gt; this way.&lt;/p&gt;

&lt;p&gt;As usual a merge conflict will occur when both parties try to edit the same line of the same file. In this case we can simulate a scenario where we as the contributor try to modify the style.css file and before we create a pull request, the owner is busy editing on the same line of the same file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4q2mNenV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhwns35afen9uqrks7rb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4q2mNenV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhwns35afen9uqrks7rb.gif" alt="scenario-creating-merge-conflict"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we commit our changes and create the pull request, we will see that there is a merge conflict, however you are still able to create the pull request.&lt;/p&gt;

&lt;p&gt;Here we can choose to resolve the conflict ourselves or we can allow the owner to resolve the conflict, because there is a conflict with the repo's the pull request has been sent to the owner already.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kF2LLGiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi4qz2w7totgr25nu8jz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kF2LLGiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi4qz2w7totgr25nu8jz.gif" alt="github-merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you go to the owner account, you will see &lt;strong&gt;1&lt;/strong&gt; pull request, and this pull request has a conflict. We as the owner can resolve this issue by deciding which code we want to keep.&lt;/p&gt;

&lt;p&gt;Once we are happy we can click &lt;code&gt;marked as resolve&lt;/code&gt;, then click &lt;code&gt;commit merge&lt;/code&gt;, you will see GitHub warns us that &lt;strong&gt;this will commit to master&lt;/strong&gt;. We confirm that we understand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDm61W0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m27nh13s91awm1q5ioo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDm61W0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m27nh13s91awm1q5ioo.gif" alt="github-merge-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we merge the pull request with our master branch. If we look at the commits history, we will see all the commits of both accounts as well as the merge commits.&lt;/p&gt;

&lt;p&gt;That is it about contributing to the original open source repository, I really hope this made sense to you. Lets all move on to the next and final chapter...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXxb1ztO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u50nqbcpc90284iexqn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXxb1ztO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u50nqbcpc90284iexqn.gif" alt="shocked-gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>Optimizing Productivity With Contract Developers</title>
      <author>Nessii-green</author>
      <pubDate>Sun, 26 Sep 2021 21:55:25 +0000</pubDate>
      <link>https://dev.to/nessiigreen/optimizing-productivity-with-contract-developers-1bkb</link>
      <guid>https://dev.to/nessiigreen/optimizing-productivity-with-contract-developers-1bkb</guid>
      <description>&lt;p&gt;&lt;em&gt;Misunderstanding has become common in our daily affairs with humans. It is mainly bound to occur because we humans, undoubtedly of the same species, are a different breed. We are categorically aligned with other priorities, experiences, and environments. It is even quite questionable if a relationship, dealing, or partnership should thrive without a single moment of misunderstanding.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Often, it’s one’s inability to let go of the desire to be right that causes a common misunderstanding to soar and finally damage a relationship. We will review how these misreadings, misinterpretations, and miscalculations affect the relationship between &lt;strong&gt;a contract developer and a client&lt;/strong&gt;. You will also find analytical strategies to resolve this for a more productive working environment.&lt;/p&gt;

&lt;p&gt;Being a contract developer has it’s Benefits and equally comes with Negatives, leading us to the;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edges-and-drawbacks-of-being-a-contract-developer"&gt;
  &lt;/a&gt;
  Edges and drawbacks of being a contract developer.
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Edges&lt;/strong&gt; that come with being a contract developer are quite a handful, and below is a rundown.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Independence is the primary benefit. Having a flexible working schedule, nothing else appears to be more tempting because most folks perceive working full-time as being imprisoned. Contract Developers are working on their own time, far off any influence by a boss or under a company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next is the compensation; contractors, in most cases, are paid better than regular employees. There’s the freedom to give yourself a raise at will, which never happens with full-time developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The short duration comes in handy also; for people who mostly get bored by repetitions, there’s room for making changes without having to go through the ceremony of quitting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having the view of what it’s like to work on different things, there’s always a thrill that comes with it, and by all means, it comes with its feeling altogether.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It helps diversify the exposure to something new, too different challenges even though in the same field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experience is designated most of the time as the by-product of exposure, a full stack developer who’s been working for 5-10 years doesn’t necessarily have the 5-10 years experience because he’s doing the same thing over and over again within the span of that amount of year. But a contractor who’s had the opportunity to take on different things within the same period would be termed more experienced.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having cataloged most, if not all, of the benefits, the &lt;strong&gt;Negatives&lt;/strong&gt; follow suit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There's the added worry and stress over situations. Situations like instability; for example, halfway into working, a client cancels a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A significant drawback on this chosen part is; you don't work, you don't eat, unlike the salary earners who can call in sick, and at the end of the day, they still get their salaries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It would help if you always lined up work while handling a project; of course, it wouldn't be a pleasant experience having your hands on nothing even after running a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's also the hassle of getting paid. Contract developers experience this. With salary earners, their pay is sure, even though delayed in some cases, but it can be pretty different with contractors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contractors do not get raises or bonuses as salary earners do, only the agreed rate stipulated in the contract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sole/personal liabilities to losses caused by you because you're under no company that'll cover up for you. Sometimes in incidents like these, one could risk being sued by the client for damages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contract developers can be easily laid-off because there's no going through the process of some political safety that shields them as the full-time developers have, which has always been a hassle for managers and employers to go through before sacking an employee.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compensations can become low after additional responsibilities have been taken care of, like getting the project's equipment and when taxes and insurance come in.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This stage is where we divulge to you the &lt;strong&gt;Trials that occur in a contract developer-client Relationship&lt;/strong&gt;.&lt;br&gt;
These conflicts are the primary causes of project failures, and they come in factions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Data and facts which could be complex might be omitted before the commencement of the project—these result in unpredictabilities and fluctuation in agreement. There are situations where a client adjusts project requirements; these changes might be minor, and you cannot charge for them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confusions and misinterpretations between client and contractor put to mind disagreements. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The absence of conversations on the charges of certain risks also adds to problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When human behavior, management, and communication come in. These have escalated more conflicts than usual. Distrust in amalgamation with a poor grasp of each other's dividends derives from a state of affairs where both parties do not acknowledge and regard one another. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Non-viable expectations on the client's part in collaboration with an over-ambitious bearing of the hired contractor is very much a bad blend for a project when occurring together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contract confusions, absence of transparency like mentioned in the first faction, and proficiency can evoke conflicts. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#patience-as-requisite"&gt;
  &lt;/a&gt;
  Patience as Requisite
&lt;/h2&gt;

&lt;p&gt;There’s the ease of  jumping into conclusions, which is (every) now and then proven not to be logical at the end of the day. Sometimes either party does not carefully observe and subsequently, frustration fills out and then you find yourself enstranging the person you’re working with.&lt;/p&gt;

&lt;p&gt;Impatience can be counterproductive; when one draws inferences quickly, they arrive at fabricating a schedule in their mind. When persons or procedures stall from aligning to that schedule, the mind can run wild with frustration. &lt;br&gt;
You begin to query the rationale and intentions of the hired contractor who’s on the other side of the equation, and proffer demands that may or may not be rational, possibly leading to an unfortunate ending.&lt;/p&gt;

&lt;p&gt;Impatience can make the contractor perceive you as wanting or desperate; propelling a partner with hostility or going with insensitive demands is exceedingly appalling and is seen as a significant disadvantage to the contractor which might kill the deal.&lt;br&gt;
Also, when your judgment is overcast and when one is close-minded, damages could be done. For instance, when an operation stalls for longer than necessary. Adjusting to the “take it or leave it” stance more often than not scatters the deal.&lt;/p&gt;

&lt;p&gt;Patience is really, very necessary in every business practice. Every business-inclined person lives in a world that goes with logical thinking and brave actions and measures; thus has become an asset in the business world. If these attributes display themselves in the form of impatience, conflicts tend to rise, and damages are done. Clients must remember that patience, especially in business, is genuinely requisite as hard as it may be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approaches-to-take-down-these-challenges"&gt;
  &lt;/a&gt;
  Approaches to take down these challenges.
&lt;/h2&gt;

&lt;p&gt;The following are factors that should help in navigating the trials of a client-contractor relationship.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When there's professionalism, which is laid down procedures or ethics in every profession, this factor is essential for building a healthy relationship with your hired contractor. You, as a client, will not engage the services of a contractor who does not deliver quality work. Likewise, a contractor will not enter into a contract with a client who does not redeem his part of the deal. In this case, professionalism should be synonymous with proficiency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When there's client and contractor satisfaction, loyalty is bound to be procured.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Effective communication in a client-contractor relationship is crucial to being synonymous with the role of food to the human body; it is very essential.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The importance of the project does it too. In life as a whole, every individual or institution is ever ready to channel its assets into a life-transforming activity, provided it is a priority. Such reason pushes clients and contractors to merge their best resources into achieving value for money, creating a good relationship between them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trust stands as the genesis of every meaningful relationship. The significance of trust in a business relationship is equivalent to the foundation of a building because the absence of trust will kill the partnership within a concise term.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accepting and executing your role in a given project irrespective that you are the owner of the project in conformity with the stated principle automatically brings the client and contractor to a good place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interdependence can trigger business relationships because affiliations to a contract need the complementary part to survive; the faster this fact is acknowledged, the better the business relationship.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adaptation to changes and flexibility in terms of the contract should be appropriately applied.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are also some &lt;strong&gt;Bonus tips for connecting the dots.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To have a successful partnership between friends or family, one must keep up a severance between business and personal relationships.&lt;/li&gt;
&lt;li&gt;Differing dedication among the client and contractor can damage the relationship. The success of the project is based on contributions of both client and contractor.&lt;/li&gt;
&lt;li&gt;Clients should use a creative point of reference in sorting out contractors for their projects. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Structuring labor relations takes forbearance and persistence, and for a project to be accomplished, the possessor of the project must be prepared to make compromises and commitments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesreference"&gt;
  &lt;/a&gt;
  Resources/Reference.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.researchgate.net"&gt;www.researchgate.net&lt;/a&gt;&lt;br&gt;
Forbes magazine.&lt;br&gt;
TUDelft.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Create DatePicker By TailWindCss + Angular </title>
      <author>timsar2</author>
      <pubDate>Sun, 26 Sep 2021 20:44:07 +0000</pubDate>
      <link>https://dev.to/timsar2/create-datepicker-by-tailwindcss-angular-3p8k</link>
      <guid>https://dev.to/timsar2/create-datepicker-by-tailwindcss-angular-3p8k</guid>
      <description>&lt;p&gt;Hello friends,&lt;br&gt;
Tailwind Elements has good Collection of free, popular components like modal, dropdown and many more.&lt;br&gt;
&lt;a href="https://tailwind-elements.com/docs/standard/forms/datepicker/"&gt;https://tailwind-elements.com/docs/standard/forms/datepicker/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It has a DatePicker made by Tailwindcss and alpine js.&lt;br&gt;
I just rebuild that by angular instead of alpine js&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ua4nJQVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7m7cs6r7ey50hdeoetv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ua4nJQVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7m7cs6r7ey50hdeoetv.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#just-show-the-code-d"&gt;
  &lt;/a&gt;
  Just Show The code :D
&lt;/h4&gt;

&lt;p&gt;First add TailWindCss to your project:&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/@ngneat/tailwind"&gt;https://www.npmjs.com/package/@ngneat/tailwind&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;date-picker.component.ts:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;app-DatePicker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;templateUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./date-picker.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;DatePickerComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;MONTH_NAMES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;January&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;February&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;March&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;April&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;May&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;June&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;July&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;August&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;September&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;October&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;November&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;December&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;DAYS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sun&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Wed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Thu&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fri&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="nx"&gt;showDatepicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;datepickerValue&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// !: mean promis it will not be null, and it will definitely be assigned&lt;/span&gt;
  &lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;no_of_days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="nx"&gt;blankdays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getNoOfDays&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;initDate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getFullYear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datepickerValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;isToday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getDateValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;selectedDate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;date&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;datepickerValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;selectedDate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toDateString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showDatepicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;getNoOfDays&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;daysInMonth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getDate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// find where to start calendar day of week&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dayOfWeek&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;month&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;getDay&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blankdaysArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;dayOfWeek&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;blankdaysArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;daysArray&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;daysInMonth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;daysArray&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blankdays&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;blankdaysArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;no_of_days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;daysArray&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;trackByIdentity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;date-picker.component.html:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex items-center justify-center bg-gray-200 h-full"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"antialiased sans-serif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container mx-auto px-4 py-2 md:py-10"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"mb-5 w-64"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"datepicker"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"font-bold mb-1 text-gray-700 block"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Select Date&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"hidden"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt; &lt;span class="na"&gt;x-ref=&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
              &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
              &lt;span class="na"&gt;readonly&lt;/span&gt;
              &lt;span class="na"&gt;[(ngModel)]=&lt;/span&gt;&lt;span class="s"&gt;"datepickerValue"&lt;/span&gt;
              &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"showDatepicker = !showDatepicker"&lt;/span&gt;
              &lt;span class="na"&gt;(keydown.escape)=&lt;/span&gt;&lt;span class="s"&gt;"showDatepicker = false"&lt;/span&gt;
              &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
                w-full
                pl-4
                pr-10
                py-3
                leading-none
                rounded-lg
                shadow-sm
                focus:outline-none focus:shadow-outline
                text-gray-600
                font-medium
              "&lt;/span&gt;
              &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Select date"&lt;/span&gt;
            &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"absolute top-0 right-0 px-3 py-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6 text-gray-400"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt;
                  &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt;
                  &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt;
                  &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt;
                  &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"&lt;/span&gt;
                &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

            &lt;span class="c"&gt;&amp;lt;!-- &amp;lt;div {{no_of_days.length"&amp;gt;&amp;lt;/div&amp;gt;
                            &amp;lt;div {{32 - new Date(year, month, 32).getDate()"&amp;gt;&amp;lt;/div&amp;gt;
                            &amp;lt;div {{new Date(year, month).getDay()"&amp;gt;&amp;lt;/div&amp;gt; --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
              &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-white mt-12 rounded-lg shadow p-4 absolute top-0 left-0"&lt;/span&gt;
              &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 17rem"&lt;/span&gt;
              &lt;span class="na"&gt;[hidden]=&lt;/span&gt;&lt;span class="s"&gt;"!showDatepicker"&lt;/span&gt;
              &lt;span class="na"&gt;(keydown.away)=&lt;/span&gt;&lt;span class="s"&gt;"showDatepicker = false"&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex justify-between items-center mb-2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-lg font-bold text-gray-800"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ MONTH_NAMES[month] }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"ml-1 text-lg text-gray-600 font-normal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ year }}&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
                    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
                    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
                      transition
                      ease-in-out
                      duration-100
                      inline-flex
                      cursor-pointer
                      hover:bg-gray-200
                      p-1
                      rounded-full
                    "&lt;/span&gt;
                    &lt;span class="na"&gt;[ngClass]=&lt;/span&gt;&lt;span class="s"&gt;"{ 'cursor-not-allowed opacity-25': month === 0 }"&lt;/span&gt;
                    &lt;span class="na"&gt;[disabled]=&lt;/span&gt;&lt;span class="s"&gt;"month === 0 ? true : false"&lt;/span&gt;
                    &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"month = month - 1"&lt;/span&gt;
                    &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"getNoOfDays()"&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
                      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6 text-gray-500 inline-flex"&lt;/span&gt;
                      &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
                      &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt;
                      &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M15 19l-7-7 7-7"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
                    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;
                    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
                      transition
                      ease-in-out
                      duration-100
                      inline-flex
                      cursor-pointer
                      hover:bg-gray-200
                      p-1
                      rounded-full
                    "&lt;/span&gt;
                    &lt;span class="na"&gt;[ngClass]=&lt;/span&gt;&lt;span class="s"&gt;"{ 'cursor-not-allowed opacity-25': month === 11 }"&lt;/span&gt;
                    &lt;span class="na"&gt;[disabled]=&lt;/span&gt;&lt;span class="s"&gt;"month === 11 ? true : false"&lt;/span&gt;
                    &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"month = month + 1"&lt;/span&gt;
                    &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"getNoOfDays()"&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt;
                      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-6 w-6 text-gray-500 inline-flex"&lt;/span&gt;
                      &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
                      &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 24 24"&lt;/span&gt;
                      &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-linejoin=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M9 5l7 7-7 7"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-wrap mb-3 -mx-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let day of DAYS; let index = index"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 14.26%"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-800 font-medium text-center text-xs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ day }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

              &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"flex flex-wrap -mx-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let blankday of blankdays"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 14.28%"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center border-none p-1 border-transparent text-sm"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ng-container&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let date of no_of_days; let dateIndex = index; trackBy: trackByIdentity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"width: 14.28%"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"px-1 mb-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
                      &lt;span class="na"&gt;(click)=&lt;/span&gt;&lt;span class="s"&gt;"getDateValue(date)"&lt;/span&gt;
                      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"
                        cursor-pointer
                        text-center text-sm
                        rounded-full
                        leading-loose
                        transition
                        ease-in-out
                        duration-100
                      "&lt;/span&gt;
                      &lt;span class="na"&gt;[ngClass]=&lt;/span&gt;&lt;span class="s"&gt;"{
                        'bg-blue-500 text-white': isToday(date) === true,
                        'text-gray-700 hover:bg-blue-200': isToday(date) === false
                      }"&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                      {{ date }}
                    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/ng-container&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally Import FormModule in to the your.module.ts&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FormsModule&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/forms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;...,&lt;/span&gt; 
    &lt;span class="nx"&gt;FormsModule&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, Save and look 😏&lt;/p&gt;

</description>
      <category>angular</category>
      <category>tailwindcss</category>
      <category>ionic</category>
      <category>datepicker</category>
    </item>
    <item>
      <title>Stop abusing .map()!</title>
      <author>Pan Seba</author>
      <pubDate>Sun, 26 Sep 2021 19:41:41 +0000</pubDate>
      <link>https://dev.to/catchmareck/stop-abusing-map-51mj</link>
      <guid>https://dev.to/catchmareck/stop-abusing-map-51mj</guid>
      <description>&lt;p&gt;Every once in a while when I do code review or visit StackOverflow I stumble upon code snippets that look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oragne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;fruitIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`fruit-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as you can see it's just a simple iteration where for every element in the &lt;code&gt;fruitIds&lt;/code&gt; array we add &lt;code&gt;active&lt;/code&gt; class to a certain HTML element in a DOM.&lt;/p&gt;

&lt;p&gt;Many programmers (especially new) wouldn't notice anything wrong with the code above. &lt;strong&gt;However&lt;/strong&gt;, there is a one major issue here - the usage of &lt;code&gt;.map()&lt;/code&gt;. Let me explain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-wrong-with-raw-map-endraw-"&gt;
  &lt;/a&gt;
  What is wrong with &lt;code&gt;.map()&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Well, there is completely nothing wrong with this particular array method. In fact, I think it is very handy and beautifully wraps one of the iteration patterns - &lt;em&gt;mapping&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In simple words, mapping is an operation which applies a function to every element of a collection and returns a new collection with elements changed by the mentioned function. For example, if we have an array of numbers &lt;code&gt;const nums = [1, 2, 3, 4];&lt;/code&gt; and would like to receive a new array of doubled numbers, we could &lt;em&gt;map&lt;/em&gt; the original array to a new one like this (in JavaScript):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;biggerNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;gt;&amp;gt; [2, 4, 6, 8];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;biggerNums&lt;/code&gt; array would consist of numbers from the original &lt;code&gt;nums&lt;/code&gt; array multiplied by &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice how &lt;code&gt;.map()&lt;/code&gt; is used - we assigned the result of this method to a new variable called &lt;code&gt;biggerNums&lt;/code&gt;. I have also mentioned earlier that mapping is an operation that &lt;strong&gt;returns a new collection&lt;/strong&gt; of elements. And this is the very reason the code snippet showed at the beginning of this article is wrong. The &lt;code&gt;.map()&lt;/code&gt; returns a new array - &lt;strong&gt;always&lt;/strong&gt; - and if we don't need that array, we shouldn't use &lt;code&gt;.map()&lt;/code&gt; in the first place. In this particular case (simple iteration) a different array method should be used - &lt;code&gt;.forEach()&lt;/code&gt; - which is specifically designed for such cases. It doesn't return a new collection, it simply walks through an array and invokes a callback function for every element allowing you to do something for each of them.&lt;/p&gt;

&lt;p&gt;So the correct version of the mentioned snippet should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// good way&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oragne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;fruitIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`fruit-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need a new array so we simply iterate over the &lt;code&gt;fruitIds&lt;/code&gt; array and add the &lt;code&gt;active&lt;/code&gt; class to an HTML element for each of the array items.&lt;/p&gt;

&lt;p&gt;Okay, but why should I care? &lt;code&gt;.map()&lt;/code&gt; is shorter and easier to write than &lt;code&gt;.forEach()&lt;/code&gt;. What could possible go wrong?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consequences-of-abusing-raw-map-endraw-"&gt;
  &lt;/a&gt;
  Consequences of abusing &lt;code&gt;.map()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One of the worst consequences of abusing &lt;code&gt;.map()&lt;/code&gt; is the fact that it returns a new redundant array. To be more specific - it returns a new array of the same size as the one this method was called on. It means that if we have an array of 1000 elements, &lt;code&gt;.map()&lt;/code&gt; will return a new array of 1000 elements - &lt;strong&gt;every time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript, all functions return a value. Even if we don't use the &lt;code&gt;return&lt;/code&gt; keyword, the function will return &lt;code&gt;undefined&lt;/code&gt; implicitly. That's how the language has been designed. This rule also applies to callbacks - they are functions too.&lt;/p&gt;

&lt;p&gt;Having said that, let's get back to the original example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// wrong way&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oragne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;fruitIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`fruit-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here? An array of fruit IDs is created and then it's &lt;strong&gt;mapped&lt;/strong&gt; to another array of the same size. Even though the array returned by &lt;code&gt;.map()&lt;/code&gt; is not used, it does take place in memory. This new (unused) array looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's because the callback passed to the &lt;code&gt;.map()&lt;/code&gt; method does not have the &lt;code&gt;return&lt;/code&gt; keyword and as we know, if there is no &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; is returned implicitly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How bad is it? Very bad.&lt;/strong&gt; In this particular example it won't bring any serious consequences - there are only three items in the array so creating another three-element array won't cause any problems. However, the problem arises when we deal with big arrays of complex data. If we want to iterate over an array of five thousand objects and we abuse &lt;code&gt;.map()&lt;/code&gt;, we create another array of five thousand elements - &lt;code&gt;undefined&lt;/code&gt;s. So we end up storing 10 000 elements in memory from which a whole half is redundant. It is a very non-optimal practice and in some scenarios it may even lead to the application overload. This is why we should pick right methods to the right tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There are many practices that are essentialy bad, but the negative consequences will start to be visible only when dealing with bigger datasets. One of such practices is abuse of &lt;code&gt;.map()&lt;/code&gt;. When operating on small arrays, it won't cause any hurt. But when we make this mistake with a bigger array it will start overloading our application and it may be quite hard to debug.&lt;/p&gt;

&lt;p&gt;This is why we should never let it pass by and whenever we see this abuse, we should take care of it. I hope now you understand why.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>functional</category>
      <category>codereview</category>
    </item>
  </channel>
</rss>
