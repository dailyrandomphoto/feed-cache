<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to build a Tailwind CSS modal component</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Tue, 30 Nov 2021 12:55:23 +0000</pubDate>
      <link>https://dev.to/themesberg/how-to-build-a-tailwind-css-modal-component-31ko</link>
      <guid>https://dev.to/themesberg/how-to-build-a-tailwind-css-modal-component-31ko</guid>
      <description>&lt;p&gt;In this tutorial I would like to show you how you can build a &lt;a href="https://flowbite.com/docs/components/modal/"&gt;Tailwind CSS modal&lt;/a&gt; element using Flowbite and make it work with dark mode as well.&lt;/p&gt;

&lt;p&gt;Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/building-a-responsive-navbar-component-in-tailwind-css-1jmh"&gt;responsive navbar&lt;/a&gt; using Tailwind CSS here on the DEV community and I'm excited to get started with this modal component.&lt;/p&gt;

&lt;p&gt;Modals are a very important and interactive element that you can use to show and receive information from your website users.&lt;/p&gt;

&lt;p&gt;Here's a preview of what we will build:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4XAGygfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60v3ol2wcokknirp15t4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4XAGygfd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/60v3ol2wcokknirp15t4.gif" alt="Tailwind CSS modal component" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-modal-component"&gt;
  &lt;/a&gt;
  Tailwind CSS modal component
&lt;/h2&gt;

&lt;p&gt;Before getting started, make sure that you have Tailwind CSS and Flowbite installed on your project.&lt;/p&gt;

&lt;p&gt;I assume that you already have a working Tailwind CSS project so we'll start by installing Flowbite:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i @themesberg/flowbite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now require it as a plugin in your &lt;code&gt;tailwind.config.js&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module.exports = {

    plugins: [
        require('@themesberg/flowbite/plugin')
    ]

}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now also include the Flowbite JavaScript file either from NPM or as a CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="../path/to/@themesberg/flowbite/dist/flowbite.bundle.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Via CDN:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;link rel="stylesheet" href="https://unpkg.com/@themesberg/flowbite@1.2.0/dist/flowbite.min.css" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Let's now first add the button that will toggle the modal itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Modal toggle --&amp;gt;
&amp;lt;button class="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" type="button" data-modal-toggle="default-modal"&amp;gt;
  Toggle modal
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see we added a &lt;code&gt;data-modal-toggle&lt;/code&gt; data attribute where &lt;code&gt;default-modal&lt;/code&gt; is the id of the modal element that we will now build.&lt;/p&gt;

&lt;p&gt;Let's use one of the &lt;a href="https://flowbite.com/docs/components/modal/"&gt;modal component examples&lt;/a&gt; from Flowbite and add it just after the button component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- Main modal --&amp;gt;
&amp;lt;div id="default-modal" aria-hidden="true" class="hidden overflow-x-hidden overflow-y-auto fixed h-modal md:h-full top-4 left-0 right-0 md:inset-0 z-50 justify-center items-center"&amp;gt;
    &amp;lt;div class="relative w-full max-w-2xl px-4 h-full md:h-auto"&amp;gt;
        &amp;lt;!-- Modal content --&amp;gt;
        &amp;lt;div class="bg-white rounded-lg shadow relative dark:bg-gray-700"&amp;gt;
            &amp;lt;!-- Modal header --&amp;gt;
            &amp;lt;div class="flex items-start justify-between p-5 border-b rounded-t dark:border-gray-600"&amp;gt;
                &amp;lt;h3 class="text-gray-900 text-xl lg:text-2xl font-semibold dark:text-white"&amp;gt;
                    Terms of Service
                &amp;lt;/h3&amp;gt;
                &amp;lt;button type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white" data-modal-toggle="default-modal"&amp;gt;
                    &amp;lt;svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;  
                &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- Modal body --&amp;gt;
            &amp;lt;div class="p-6 space-y-6"&amp;gt;
                &amp;lt;p class="text-gray-500 text-base leading-relaxed dark:text-gray-400"&amp;gt;
                    With less than a month to go before the European Union enacts new consumer privacy laws for its citizens, companies around the world are updating their terms of service agreements to comply.
                &amp;lt;/p&amp;gt;
                &amp;lt;p class="text-gray-500 text-base leading-relaxed dark:text-gray-400"&amp;gt;
                    The European Union’s General Data Protection Regulation (G.D.P.R.) goes into effect on May 25 and is meant to ensure a common set of data rights in the European Union. It requires organizations to notify users as soon as possible of high-risk data breaches that could personally affect them.
                &amp;lt;/p&amp;gt;
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- Modal footer --&amp;gt;
            &amp;lt;div class="flex space-x-2 items-center p-6 border-t border-gray-200 rounded-b dark:border-gray-600"&amp;gt;
                &amp;lt;button data-modal-toggle="default-modal" type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"&amp;gt;I accept&amp;lt;/button&amp;gt;
                &amp;lt;button data-modal-toggle="default-modal" type="button" class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:ring-gray-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-500 dark:hover:text-white dark:hover:bg-gray-600"&amp;gt;Decline&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Great job! Now you have a working and responsive modal that you can use in your Tailwind CSS projects.&lt;/p&gt;

&lt;p&gt;This modal component also supports dark mode and you can check out the &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;Tailwind CSS dark mode switch&lt;/a&gt; guide from Flowbite to set it up yourself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqhIjyJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f2dfhxq6bozm0nb0zv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqhIjyJE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5f2dfhxq6bozm0nb0zv2.png" alt="Tailwind CSS dark modal" width="880" height="581"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are plenty of other modal component variations and sizes from the &lt;a href="https://flowbite.com/docs/components/modal/"&gt;Flowbite component library&lt;/a&gt; that you can check out and use for your projects.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>opensource</category>
      <category>webdev</category>
    </item>
    <item>
      <title>5 Best Java Frameworks to Learn in 2022 for Microservices and Cloud Native Development</title>
      <author>javinpaul</author>
      <pubDate>Tue, 30 Nov 2021 12:53:17 +0000</pubDate>
      <link>https://dev.to/javinpaul/5-best-java-frameworks-to-learn-in-2022-for-microservices-and-cloud-native-development-4732</link>
      <guid>https://dev.to/javinpaul/5-best-java-frameworks-to-learn-in-2022-for-microservices-and-cloud-native-development-4732</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello Java devs, if you want to develop Microservice and Cloud-Native applications in Java and looking for best resources like Microservice frameworks, libraries, and technologies then you have come to the right place. &lt;/p&gt;

&lt;p&gt;Being an author of Java blog, I often receive questions like which Java framework is best for building Microservices? whether I should us Spring Boot + Spring cloud or Quarkus? Does MicroNaut better than Quarkus? Is GrallVM good for Microservices? Is Quarkus and MicroNaut tougher than Spring Boot etc. &lt;/p&gt;

&lt;p&gt;If you are wondering what they are then don't worry, they are just a few Java framework you can use to create Microservice and cloud native Java applications. &lt;/p&gt;

&lt;p&gt;Earlier, I have shared the &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html"&gt;best Microservice courses&lt;/a&gt;, and &lt;a href="https://javarevisited.blogspot.com/2021/09/microservices-design-patterns-principles.html"&gt;Microservice design patterns&lt;/a&gt; and in this article,  I am going to share the best Microservice Framework for Java developers. &lt;/p&gt;

&lt;p&gt;While &lt;a href="https://javarevisited.blogspot.com/2018/05/top-5-courses-to-learn-spring-boot-in.html"&gt;Spring Boot&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2018/04/top-5-spring-cloud-courses-for-java.html#axzz6jsdEHyTp"&gt;Spring Cloud&lt;/a&gt; is the leading framework for developing Microservice applications in Java, there are a couple of more new options has emerged in last year &lt;a href="https://javarevisited.blogspot.com/2020/09/top-5-courses-to-learn-dropwizard-Micronaut-Quarkus-Java-Microservices.html"&gt;MicroNaut&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/10-best-free-dropwizard-vert-x-micronaut-and-quarkus-online-courses-for-java-developers-9c2b4161f17"&gt;DropWizard&lt;/a&gt;, and Quarkus IO. &lt;/p&gt;

&lt;p&gt;In this article, you will learn about the top 6 frameworks you can use to develop Microservice in Java. Along the way, I will share useful resources like online courses you can use to learn these Java frameworks for Microservices. &lt;/p&gt;

&lt;p&gt;While most of these frameworks are new and there are not many resources available about how to use these frameworks for developing production-quality Microservices in Java, except documentation and some tutorials here and there, along the way, I will also share some useful resources like online courses and books to learn these frameworks like online courses and tutorials.&lt;/p&gt;

&lt;p&gt;By the way, if you want to learn about Microservice architecture, principle and concepts then you can also checkout  &lt;a href="https://www.educative.io/courses/introduction-microservice-principles-concepts?affiliate_id=5073518643380224"&gt;&lt;strong&gt;An Introduction to Microservice Principles and Concepts&lt;/strong&gt;&lt;/a&gt; course on Educative. This interactive course is good to learn basics of Microservices. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/introduction-microservice-principles-concepts?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g7b98aSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/525/1%2ARXvRgA_aP-aEiMLHaEa7Xg.png" alt="best Java Microservices Frameworks and libraries " width="525" height="261"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-are-microservices-what-benefits-microservices-offers"&gt;
  &lt;/a&gt;
  What are Microservices? What benefits Microservices Offers?
&lt;/h3&gt;

&lt;p&gt;When you search for Microservices on the internet, you will find a lot of different definitions, some of them are too technical and some of them are too easy to describe what is Microservice.&lt;/p&gt;

&lt;p&gt;I am going to explain this based upon my own experience, this may not be the perfect or most accurate definition of Microservice, but this is what you will build or see when you work on a Microservice architecture or application.&lt;/p&gt;

&lt;p&gt;Before going to &lt;a href="https://www.java67.com/2021/04/5-free-microservice-courses-for-java.html"&gt;Microservices&lt;/a&gt;, let's take a step back and try to understand the evolution of application architecture and what caused the development of Microservices in the software development world.&lt;/p&gt;

&lt;p&gt;Long back there was a time when we just maintain one application, one code-based, and they are also deployed into each machine.&lt;/p&gt;

&lt;p&gt;For example, Windows software like Microsoft Word and other PC games. When we needed more functionality we just keep adding them into source code. This means after some years, your codebase is quite large, and adding or changing a single functionality requires a lot of regression testing, affecting delivery timelines and efforts.&lt;/p&gt;

&lt;p&gt;People realized this and they created best practices to divide code into different modules. The idea is that each module should be independent of each other so that you can develop, test, and deploy them separately, and Web applications are born.&lt;/p&gt;

&lt;p&gt;In the case of &lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-courses-to-learn-python-full-stack-web-development.html"&gt;Web applications&lt;/a&gt;, you don't need to deploy the whole application to the client machine, all you need is a browser and it can connect to the server to get whatever it needs to function. Now, you don't need to deploy the client and server on the same machine.&lt;/p&gt;

&lt;p&gt;This evolution continues on the server-side as well and people started breaking down a big monolithic application into multiple standalone, independent smaller applications, or should I say micro applications.&lt;/p&gt;

&lt;p&gt;These Micro applications provide one service and completely focus on that like authorization, authentication, service discovers load balancing, etc and they are known as &lt;a href="https://medium.com/javarevisited/8-best-online-courses-to-learn-service-oriented-soa-and-microservices-architecture-94c01d6b94e6"&gt;MicroService&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The architecture where we have multiple Micro applications providing different services connect to each and perform as one application is known as &lt;a href="https://javarevisited.blogspot.com/2021/09/microservices-design-patterns-principles.html"&gt;Microservice architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, you might be thinking what is the benefit of it? Well, these Microservices are very small as compared to Monolithic applications which means you can develop, test, and deploy them quickly and independently. This really improves the delivery and release cycle.&lt;/p&gt;

&lt;p&gt;It also makes a distributed architecture where you can deploy &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html"&gt;Microservices&lt;/a&gt; on a different host or same host, this means better utilization of server resources like storage, memory, and CPU. And, finally, it also helps with scalability as you can quickly spawn new instances of the service whose demand is increasing.&lt;/p&gt;

&lt;p&gt;For example, let's think about Amazon Prime Day when a lot of people shop and traffic to the Amazon site increases, at that point you need more processes to handle those checkouts, so you will create new instances of those processes but you don't need to scale other services which are not prime related, like services which are indexing Amazon products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i22F0jLS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-s0DgY3SKmac/YMbZezvmxSI/AAAAAAAAoPA/Z1GNpvIX1hoWHnFM1hTsU8SnxqUxBbdYgCLcBGAsYHQ/w451-h275/best%252BJava%252BMicroservice%252BFrameworks.png" alt="Top 5 Frameworks for creating Microservices in Java" width="451" height="275"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-best-java-frameworks-for-microservice-and-cloud-native-development"&gt;
  &lt;/a&gt;
  5 Best Java Frameworks for Microservice and Cloud Native Development
&lt;/h2&gt;

&lt;p&gt;So, this was my explanation of Microservices in general. As I have said, this may not be accurate or technically correct, but this is what you will see in most the places where a Microservice architecture is actually implemented.&lt;/p&gt;

&lt;p&gt;Now that we know what is Microservice and what are its benefits, let's explore a couple of &lt;a href="https://medium.com/javarevisited/5-essential-frameworks-every-java-developer-should-learn-6ed83315f1fb"&gt;best Java frameworks&lt;/a&gt; that can help you to develop Microservices in Java.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-spring-boot-spring-cloud"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot +  Spring Cloud&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There is no doubt that Spring Boot together with Spring Cloud is the best option for developing Microservices in Java. It's the most established and tested framework and you will find a bigger community to support you when you are stuck.&lt;/p&gt;

&lt;p&gt;Apart from up-to-date and in-depth documentation, there are also a lot of resources available online when it comes to learning Spring Boot and Spring Cloud, like Spring Boot Microservices course on Udemy which can get you started in no time.&lt;/p&gt;

&lt;p&gt;These are the very important point when you are starting from scratch because you need to learn quickly and deliver quickly.&lt;/p&gt;

&lt;p&gt;Now coming towards feature, Spring Cloud provides many features out-of-the-box which are needed in a Microservice architecture like service discovery and load balancing. It follows Netflix Microservice architecture, which is also the most common implementation.&lt;/p&gt;

&lt;p&gt;If you want to learn Spring Boot and Spring Cloud for Microservice development in Java and need a resource, I highly recommend &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;Master Microservices with Spring Boot and Spring Cloud&lt;/a&gt;&lt;/strong&gt; course by Ranga Karnam of In28Minutes. &lt;/p&gt;

&lt;p&gt;This 19.5-hour course is a great resource to learn Microservice with Spring Boot for both beginners and intermediate Java developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmicroservices-with-spring-boot-and-spring-cloud%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5oU-s9gV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-_9YMxOe0KEk/YMbZPM6cruI/AAAAAAAAoOw/5vQc1ck6hKEv62OA1tcQMRiMsHLAsiVQwCLcBGAsYHQ/w384-h217/Spring-BOOT-Interview-questions-1.jpg" alt="best Frameworks for creating Microservices in Java" width="384" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because of community, resources, and features, I personally think Spring Boot + Spring Cloud is the best Java framework for Microservice development. &lt;/p&gt;

&lt;p&gt;Btw, I am not alone, Marcus Biel, a Java Champion, and fellow Twitterati have asked his readers to choose between different Microservice frameworks, and Spring Boot comes out as the most popular option.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-quarkusio"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://quarkus.io/"&gt;QuarkusIO&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Quarkus is another full-stack, Kubernetes-native Java framework made for Java virtual machines (JVMs) and native compilation, optimizing Java specifically for containers and enabling it to become an effective platform for serverless, cloud, and Kubernetes environments.&lt;/p&gt;

&lt;p&gt;Quarkus is backed by Redhat and it's quickly gaining ground for creating high-performance, and scalable Java applications. One of the key features of Quarkus based applications is fast boot time.&lt;/p&gt;

&lt;p&gt;Many Java programmers are looking to try Quarkus for fast and reactive Microservices and if you also want to learn Quarkus in 2022, I highly recommend you to check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fquarkus-starting-with-quarkus%2F"&gt;Starting with Quarkus&lt;/a&gt;&lt;/strong&gt; course by Antonio Goncalves, one of the Quarkus pioneers on Udemy. This 3.5-hour long course is a great starting point for any Java developer willing to learn Quarkus.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fquarkus-starting-with-quarkus%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tYuhoSbj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-mP51mLEXiEw/YMbYTXBKQmI/AAAAAAAAoNw/5Avn9BYfMI0yUhEL75FkOSMJorKU1BFyACLcBGAsYHQ/w412-h224/Quarkus_looser.png" alt="Quarkus best Java framework for Microservice Development" width="411" height="224"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-micronaut"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://micronaut.io/"&gt;MicroNaut&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is another modern, JVM-based, full-stack framework for building modular, easily testable microservice and serverless applications. &lt;/p&gt;

&lt;p&gt;Micronaut is getting a lot of love from the Java community and with big companies like Oracle and JetBrains putting their weight behind MicroNaut may emerge as a strong contender to &lt;a href="https://medium.com/javarevisited/10-advanced-spring-boot-courses-for-experienced-java-developers-5e57606816bd"&gt;Spring Boot&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/10-best-java-microservices-courses-with-spring-boot-and-spring-cloud-6d04556bdfed"&gt;Spring cloud&lt;/a&gt; in near future.&lt;/p&gt;

&lt;p&gt;When it comes to technical things, there is a key difference between MicroaNaut and Spring Framework, Spring which relies exclusively on runtime reflection and proxies, Micronaut uses compile-time data to implement dependency injection.&lt;/p&gt;

&lt;p&gt;This is not a new approach but approaches are taken by tools such as Google's Dagger, which is designed primarily with Android in mind.&lt;/p&gt;

&lt;p&gt;Another interesting thing to know about MicroNaut is that it's created by OCI, the same company that created Grails, a popular web development framework for Groovy developers.&lt;/p&gt;

&lt;p&gt;The current version of MicroNaut is MicroNaut 2.5 which supports Gradle 6.5 and incremental compilation and has better reactive libraries for Microservices. &lt;/p&gt;

&lt;p&gt;If you want to learn MicroNaut in 2022 and need a resource, I also recommend you to check out &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-micronaut%2F"&gt;Learn Micronaut - cloud-native microservices with Java &lt;/a&gt;&lt;/strong&gt;course by Daniel Prinz on Udemy. This 6.5-hour long course is a great resource to learn MicroNaut from scratch.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-micronaut%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cocIS0EA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-A7b0-LT7p2U/YMbYEeJ4GuI/AAAAAAAAoNk/rI1HF-aRy78TGHvMkm2NLuVjFyplmzdcwCLcBGAsYHQ/w408-h223/Micronaut_OG_Logo.png" alt="best course to learn MicroNaut for Java Programmers" width="408" height="223"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-dropwizard"&gt;
  &lt;/a&gt;
  4. &lt;a href="https://www.dropwizard.io/en/latest/"&gt;DropWizard&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;DropWizard is another powerful framework for creating RESTful web services and microservices. It uses popular Java libraries like Jetty, &lt;a href="https://www.java67.com/2019/09/3-ways-to-ignore-null-fields-in-json-java-jackson.html"&gt;Jackson&lt;/a&gt;, and Jersey for creating high-performance Java applications quicker and easier.&lt;/p&gt;

&lt;p&gt;The good thing about DropWizard is that it provides in-built support for configuration, monitoring, metrics, and many more operational tasks. When it comes to learning DropWizard there are not many resources available.&lt;/p&gt;

&lt;p&gt;You can check documentation but if you are looking for books and online courses, then there are not many, I only find &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgetting-started-with-dropwizard%2F"&gt;Getting started with Dropwizard&lt;/a&gt;&lt;/strong&gt; course on Udemy which is kind of ok, not the best but you can still start with DropWizard by following this course.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgetting-started-with-dropwizard%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9tjgjYTw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-VD1cjsVCa5A/YMbYjGfhRSI/AAAAAAAAoOM/urcm2nYRu8c5h059szff666bWqQMqMF1gCLcBGAsYHQ/w519-h206/b288c33266fd6ddf99b5f93f583c0664.png" alt="best online course to learn DropWizard for beginners" width="519" height="205"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-microprofile"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://microprofile.io/"&gt;MicroProfile&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Eclipse MicroProfile is an initiative to optimize Java EE for Microservice architecture. It aims to provide a vendor-neutral specification to create &lt;a href="https://javarevisited.blogspot.com/2019/03/5-courses-programmers-can-join-to-learn.html"&gt;Microservices architecture&lt;/a&gt; by leveraging Java EE. &lt;/p&gt;

&lt;p&gt;The specification has been created by experts and backed by organizations like IBM, RedHat, and Oracle, which makes it great to use for Microservice development and deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/01/how-to-learn-spring-core-spring-mvc-boot-security-framework.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOadiomw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-XB6eirhf5HI/YMbYZE5zRoI/AAAAAAAAoOA/BJSMq348g-Q2nnFsaGn6nQRdjCRuvBgPQCLcBGAsYHQ/microprofile-logo.png" alt="" width="512" height="181"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-eclipse-vertx"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://vertx.io/"&gt;Eclipse Vert.x&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Vert.x from Eclipse is a lightweight framework to develop &lt;a href="https://javarevisited.blogspot.com/2021/04/best-reactive-spring-and-webflux-courses-for-java-developers.html"&gt;Reactive Microservices&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It supports a non-blocking and asynchronous development model and allows you to run your distributed application runs on top of a &lt;a href="https://javarevisited.blogspot.com/2019/04/top-5-courses-to-learn-jvm-internals.html"&gt;Java Virtual Machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unlike Spring Boot which provides in one solution Vert.x doesn't provide an all-in-one solution instead it provides a toolkit and building block to build your own component. Since it's a toolkit, it provides flexibility to use it as a standalone or embed it inside Spring itself.&lt;/p&gt;

&lt;p&gt;In fact, many Microservice frameworks like QuarkusIO used Vert.x for their low-level need like TCP and HTTP. &lt;/p&gt;

&lt;p&gt;If you want to learn Vert.x in 2022 and looking for resources then I also suggest you check out this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freactive-web-applications-with-vertx-and-vuejs%2F"&gt;Learn Vert.x - Reactive microservices with Java&lt;/a&gt;&lt;/strong&gt; course by Daniel Prinz on Udemy.  This 9.5-hour long course is a great resource to start with Vert.x for Reactive Microservice development in 2022.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Freactive-web-applications-with-vertx-and-vuejs%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uOjb4tuf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-wzdgPXqXgq0/YMbYnvJm2VI/AAAAAAAAoOU/BHxV6bWv6pACnR-xf0gjSkjbPuDCGksxQCLcBGAsYHQ/w432-h240/openapi_vertx.png" alt="best course to learn Vert.x for Reactive Microservices in Java" width="432" height="240"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the &lt;strong&gt;best Java Frameworks for Microservice development in 2022.&lt;/strong&gt; While most of the organizations use Spring Boot and Spring Cloud for creating their RESTful web services and Microservices but you can also learn more modern alternatives like QuarkusIO and Micronaut. &lt;/p&gt;

&lt;p&gt;I have also tried to suggest useful resources where you can learn these frameworks. If you have any other framework to add to this list feel free to comment.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;Java and Development Articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;The 2022 Java Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/03/top-20-skills-java-developers-can-learn.html#axzz6k4XBgTw4"&gt;21 Tech Skills Every Java Developer Should Learn &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-20-libraries-and-apis-for-java-programmers.html"&gt;20 Libraries Java developer should know&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915"&gt;My favorite free courses to learn Java in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/06/top-6-spring-framework-online-courses-Java-programmers.html"&gt;Top 5 courses to learn Spring Framework in Depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-maven-jenkins-and-docker-for-java-developers-51fa7a1e66f6"&gt;10 Free courses to learn Maven, Jenkins, and Docker&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/02/10-books-java-developers-should-read-in.html"&gt;10 Books Java Developers Should Read in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/11-essential-skills-software-developers-should-learn-in-2020-1bio"&gt;11 Essential Skills for Every Software Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/05/10-tips-to-become-better-java-developer.html"&gt;10 Tips to become a better Java Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2020/09/top-10-cloud-certification-you-can-aim.html"&gt;10 AWS and Cloud Certifications to Aim in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/04/10-tools-java-developers-should-learn.html"&gt;10 Tools Every Java Developer Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/06/5-best-courses-to-learn-spring-boot-in.html"&gt;Top 5 Courses to learn Spring Boot in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/10-frameworks-java-and-web-developers-should-learn.html"&gt;10 Frameworks for Java and Web Developer in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/12/10-programming-languages-to-learn-in.html"&gt;10 Programming languages to Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks, for reading this article so far. If you like these &lt;em&gt;best Java Microservice frameworks&lt;/em&gt; then please share them with your friends and colleagues. If you have any questions or feedback then please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are keen to jump into the world of Microservices and looking for free online courses to learn Microservice development then you may also like to explore &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fspring-microservices-with-spring-boot-spring-cloud-training%2F"&gt;Master Spring Microservices with Spring Boot &amp;amp; Spring Cloud!&lt;/a&gt;&lt;/strong&gt;  course by Karthikeya T on Udemy. This 1-hour long free hands-on course is a great way to start building Microservice in Java.&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>microservices</category>
      <category>softwaredevelopment</category>
    </item>
    <item>
      <title>Appwrite ❤ Appsmith: The perfect open-source duo for your business apps</title>
      <author>Aditya Oberai</author>
      <pubDate>Tue, 30 Nov 2021 12:35:08 +0000</pubDate>
      <link>https://dev.to/appwrite/appwrite-appsmith-the-perfect-open-source-duo-for-your-business-apps-4dae</link>
      <guid>https://dev.to/appwrite/appwrite-appsmith-the-perfect-open-source-duo-for-your-business-apps-4dae</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uENmCvSusMI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Last week, we at &lt;strong&gt;Appwrite&lt;/strong&gt; collaborated with the &lt;strong&gt;Appsmith&lt;/strong&gt; team to showcase how businesses can leverage both of these amazing open source solutions to build apps and dashboards faster and better 🥳. We had an amazing session where &lt;a href="https://github.com/Meldiron"&gt;&lt;strong&gt;Matej&lt;/strong&gt;&lt;/a&gt; and &lt;a href="https://github.com/cokoghenun"&gt;&lt;strong&gt;Confidence&lt;/strong&gt;&lt;/a&gt; showcased the capabilities of these platforms by building a demo application for our audience! LIVE!! 😍&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Meldiron"&gt;
        Meldiron
      &lt;/a&gt; / &lt;a href="https://github.com/Meldiron/appwrite-appsmith-demo"&gt;
        appwrite-appsmith-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Demo application to showcase communication between Appwrite and Appsmith
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;If you have any further questions or simply want to hang out with some awesome open source geeks, you can &lt;strong&gt;join the Appwrite team and community&lt;/strong&gt; on &lt;a href="https://appwrite.io/discord"&gt;&lt;strong&gt;our Discord server&lt;/strong&gt;&lt;/a&gt;💝.&lt;/p&gt;

</description>
      <category>appwrite</category>
      <category>appsmith</category>
      <category>lowcode</category>
      <category>nextjs</category>
    </item>
    <item>
      <title>Parallex Effect in CSS!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Tue, 30 Nov 2021 11:42:51 +0000</pubDate>
      <link>https://dev.to/ziratsu/parallex-effect-in-css-4235</link>
      <guid>https://dev.to/ziratsu/parallex-effect-in-css-4235</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;Learn how to do a &lt;em&gt;parallex effect in CSS&lt;/em&gt; in less than a minute! &lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TqF45C7mpZg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML structure.
&lt;/h2&gt;

&lt;p&gt;Create three sections that contain a title each:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"s1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;SECTION 1&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"s2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;SECTION 2&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"s3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;SECTION 3&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-each-section"&gt;
  &lt;/a&gt;
  2. Style each section.
&lt;/h2&gt;

&lt;p&gt;Make sure each section takes up the full height of the viewport and that the background covers the whole space and is centered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cover&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-style-the-titles"&gt;
  &lt;/a&gt;
  3. Style the titles.
&lt;/h2&gt;

&lt;p&gt;Style the titles however you want, here's how I did it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#F1F1F1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;55px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-add-the-background-images"&gt;
  &lt;/a&gt;
  4. Add the background images.
&lt;/h2&gt;

&lt;p&gt;Add your assets to a folder and then add them as backgrounds to each section:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.s1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(imgs/img1.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.s2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(imgs/img2.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.s3&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sx"&gt;url(imgs/img3.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-add-the-parallex-effect"&gt;
  &lt;/a&gt;
  5. Add the parallex effect.
&lt;/h2&gt;

&lt;p&gt;In the section styling, add a background-attachment: fixed so that each image are fixed to the background of the different sections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-attachment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you scroll down your app, you'll see that each image wipes out the one above or below it!&lt;/p&gt;

&lt;p&gt;You can now create a simple &lt;em&gt;parallex effect in pure CSS&lt;/em&gt; in under a minute ;)&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>5 Key Characteristics of an Effective Case Study</title>
      <author>jessica moore</author>
      <pubDate>Tue, 30 Nov 2021 11:33:00 +0000</pubDate>
      <link>https://dev.to/jessica31132645/5-key-characteristics-of-an-effective-case-study-2olh</link>
      <guid>https://dev.to/jessica31132645/5-key-characteristics-of-an-effective-case-study-2olh</guid>
      <description>&lt;p&gt;Writing a case study may require a little more effort than you think. Such types of papers need you to write in a group of individuals or one person. You need to develop the content as per your knowledge of a situation and present it in the form of a scenario. It is an interesting way of conveying information and the purpose to a reader. If you do not understand certain aspects of case, you can seek &lt;a href="https://assignmenthelp.us/case-study/"&gt;case study help&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By creating a case scenario, you can attract and grab a reader’s attention in a good way. You can use different creative strategies to convince your reader about a problem and also show your writing skills. Check out Sony case study samples or the same of other big brands to get a better idea.&lt;/p&gt;

&lt;p&gt;If you are required prepare a case study, you need first to figure out the purpose of the case study. For finding a solution to a problem through a case study, you need to compose and present the issues caused by it. Following are specific key characteristics of these types of studies.&lt;/p&gt;

&lt;p&gt;1.Focus on the Readers&lt;/p&gt;

&lt;p&gt;Like any other type of essay, you need to know your audience before designing these studies. When you specifically focus on your reader, then writing becomes easier. The introduction must engage the readers in your writing and it must be impactful. As the common saying goes ‘First impression is the last impression;’ so prepare an introduction that hooks your readers. &lt;/p&gt;

&lt;p&gt;2.Make your study interesting&lt;/p&gt;

&lt;p&gt;By narrating the case study in the form of a story, you make the content interesting to read. You need to convince the readers about the problem using the said strategy. You also need to explain in details about every perspective of the problem that you are discussing on the paper.&lt;/p&gt;

&lt;p&gt;3.Writing in the form of narration&lt;/p&gt;

&lt;p&gt;As you write your essay in the form of narration, do not forget to create a flow. you need to use logical explanations when linking connections between the sentences. An outline will help you with this perspective. An essay writing service can help you in developing an outline for your case study. It will provide you with factors in a sequence that will induct logical reasoning in continuing the story.&lt;/p&gt;

&lt;p&gt;4.Purpose&lt;/p&gt;

&lt;p&gt;You cannot keep your audience hooked if there is no purpose for your case. While taking the reader through your case study, keep highlighting the main purpose. You need to ensure that the content and your purpose statement are related. Most of these types of cases are proposed to resolve an issue at hand. &lt;/p&gt;

&lt;p&gt;5.Creativity&lt;/p&gt;

&lt;p&gt;Writing such a case study needs a touch of creativity for conveying the reader about the problem and possible solutions. You need to put some extra time into identifying the purpose of your case study. Once you have completed it, compose an outline for achieving that purpose. Giving in an organized effort will develop your required essay in a short time. If you have Sony case study, you can show your creative style of writing using the information you have, or you can seek &lt;a href="https://assignmenthelp.us/case-study/sony-case-study.html"&gt;Sony case study help&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The above mentioned points can help you understand the characteristics of the assignment, and you can develop assignments accordingly.&lt;/p&gt;

&lt;p&gt;Summary: Assignments are a part of academic life, and students cannot avoid them at any cost. It allows students to hone writing skills and allows them to learn something new.&lt;/p&gt;

&lt;p&gt;Author Bio: Jane Garner is a full-time writer at Assignmenthelp.us. Students can get case study help from her.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>REST APIs Testing with Hoppscotch, go from zero to hero!
</title>
      <author>Sankalp Swami</author>
      <pubDate>Tue, 30 Nov 2021 10:57:29 +0000</pubDate>
      <link>https://dev.to/aviyel/rest-apis-testing-with-hoppscotch-go-from-zero-to-hero-77f</link>
      <guid>https://dev.to/aviyel/rest-apis-testing-with-hoppscotch-go-from-zero-to-hero-77f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3x4G_az3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1638201754575-image-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3x4G_az3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1638201754575-image-resized.png" alt="Hoppscotch" width="760" height="380"&gt;&lt;/a&gt;&lt;br&gt;
I was really helpless using Postman on my 4 gig laptop as it used to take a lot of time on startup and then complete blackout. This is when I came across Hoppscotch which is a really lightweight and web-based API development suite that was very helpful for someone like me who had a very low-end laptop with chrome occupying most of my RAM.&lt;/p&gt;

&lt;p&gt;If you are a backend developer, this is for sure that you have developed many APIs for your web application. APIs act like connecting tissues as APIs connect your User Interface to your server, which states the vital role APIs play in your web application. If you push your APIs LIVE without testing their feasibility, your server will crash. To help you out, Aviyel is coming with yet another worthwhile and informative event where you will learn how to test your APIs.&lt;/p&gt;

&lt;p&gt;Why should you join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will learn the importance of API Testing.&lt;/li&gt;
&lt;li&gt;You will learn how to test your APIs with &lt;a href="https://aviyel.com/projects/5/hoppscotch"&gt;Hoppscotch&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You will learn how to organize your RESTful APIs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sankalp Swami is coming live on Coffee&amp;amp;Code where he will take you through the complete process of testing APIs and automating the process using Hoppscotch's various rich features. Sankalp is a self-taught Node.js Developer from India who is passionate about Open-Source and giving back to the community. Sankalp also writes articles on DEV and Hackernoon on JavaScript, Node.js, and OpenSource in his free time.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with APIs and &lt;a href="https://aviyel.com/"&gt;open-source!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: December 3rd, 2021&lt;br&gt;
Time: 8.00 AM PST | 11:00 AM EST&lt;br&gt;
Register here 👉:&lt;/strong&gt; &lt;a href="https://bit.ly/3lnOE9x"&gt;https://bit.ly/3lnOE9x&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our &lt;a href="https://aviyel.com/events"&gt;events&lt;/a&gt;!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sankalp Swami Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/sankalpswami01"&gt;sankalpswami01&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/SwamiSankalp"&gt;SwamiSankalp&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a href="https://dev.to/sankalpswami1122"&gt;sankalpswami1122&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/sankalp-swami/"&gt;Sankalp Swami&lt;/a&gt; &lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>testing</category>
    </item>
    <item>
      <title>Best UI/UX Design Pattern Libraries</title>
      <author>Jhonth Smith</author>
      <pubDate>Tue, 30 Nov 2021 10:56:24 +0000</pubDate>
      <link>https://dev.to/jhonthsmith/best-uiux-design-pattern-libraries-bc7</link>
      <guid>https://dev.to/jhonthsmith/best-uiux-design-pattern-libraries-bc7</guid>
      <description>&lt;p&gt;Mobile applications provide organizations with benefits inaccessible for different methods for product or services development. This is an instance of admittance to, and long-lasting presence in clients' regular routines. A mobile application can be an exceptionally effective investment - yet, it can possibly turn out to be such in the event that it's well designed. &lt;br&gt;
However, making a UI for a mobile application is challenging. The uplifting news is, design libraries furnish organizations with &lt;a href="https://www.franticpro.com/ios-ui-ux-app-development/"&gt;UI/UX design&lt;/a&gt;  formats that can either be utilized for motivation or lay the preparation for the future mobile interface. There's no deficiency of mobile UX configuration design libraries accessible on the web.&lt;br&gt;
Pttrns:Pttrns is one of the biggest pattern libraries out there. Utilizing a navigation tab on the left half of the page, you'll have the option to pick a required component and browse formats. All entries are arranged on a timeline - designers will actually want to perceive how interface patterns change throughout the long term. Pttrns contains paid formats for Android, iOS, Watch, and iPad.&lt;br&gt;
UX Archive: UX Archive is an &lt;a href="https://www.franticpro.com/ios-ui-ux-app-development/"&gt;iOS design&lt;/a&gt;  library that permits planners to make workflows get interface motivation thoughts. You will actually want to analyze the work processes of all popular applications. There are over 350 planned work processes right now. UX Archive is an arranged content platform. Clients will actually want to present their own work processes and offer them to the community. &lt;br&gt;
Mobbin Design: Mobbin Design is a mobile application UX configuration design library for iOS. It has a progression of the screenshots of 170 applications and over 10,000 examples. Originators can add top picks to their own library. &lt;br&gt;
Mobbin Design has an interface that is not difficult to utilize and good to look at. All the screenshots are assembled by components or examples. For every passage, there's a tab recognizing the iOS adaptation of the application was designed for.&lt;br&gt;
Dark Patterns: Dark Patterns is perhaps the most imaginative example library out there as it gathers the 'dark side of the UI plan'. Manipulative strategies designers use, hidden promotions, client experience obstruction, and a lot more slippery procedures partners use to deceive clients. While the pattern library can scarcely be utilized for motivation during UI configuration, it's absolutely a drawing-in site to browse through.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ios</category>
      <category>programming</category>
    </item>
    <item>
      <title>Strengthen your iOS/ANDROID application with MobSF!
</title>
      <author>Sankalp Swami</author>
      <pubDate>Tue, 30 Nov 2021 10:55:44 +0000</pubDate>
      <link>https://dev.to/aviyel/strengthen-your-iosandroid-application-with-mobsf-3mo9</link>
      <guid>https://dev.to/aviyel/strengthen-your-iosandroid-application-with-mobsf-3mo9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G7ELZQex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1638256756497-event-announcement-1-resized.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G7ELZQex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aviyel.com/assets/uploads/files/1638256756497-event-announcement-1-resized.png" alt="MobSF" width="760" height="380"&gt;&lt;/a&gt;&lt;br&gt;
When you are developing a mobile app, the data security for your mobile app is as important as other elements of your mobile app. Every app has some critical and sensitive data like your passcodes, banking information, and more which can be exploited and it is something that you don’t want at any cost. It is your responsibility to build trust with the users and maintain the user's privacy. When you are connected to the web, you don't know what might happen when. These days safety is a prime concern, Aviyel is coming with another valuable and informative event where you will learn how to secure your application before its release.&lt;/p&gt;

&lt;p&gt;Why should one join this event?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You will learn the importance of security in general.&lt;/li&gt;
&lt;li&gt;You will learn the role of &lt;a href="https://aviyel.com/projects/7/mobile-security-framework"&gt;MobSF&lt;/a&gt; in mobile application security.&lt;/li&gt;
&lt;li&gt;You will forge ahead with the computer security ecosystem.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Habdul Hazeez is coming live on Coffee&amp;amp;Code to help you gain the importance &amp;amp; viability of your mobile application security. Habdul got into technology in 2011starting with computer security reading blogs on The Hacker News, Bruce Schneier's, and Krebs on Security. This interest led to the pursuit of a B.Sc degree in computer science. Currently, Habdul is a tech blogger in Web Development and Computer Security domain. You'll find most of his writings on DEV. He has also contributed articles for the LogRocket blog and CSS-Tricks.&lt;/p&gt;

&lt;p&gt;Join us to get hands-on experience with APIs and &lt;a href="https://aviyel.com/discussions"&gt;open-source&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Date: December 4th, 2021&lt;br&gt;
Time: 8.00 AM PST | 11:00 AM EST&lt;br&gt;
Register Here 👉:&lt;/strong&gt; &lt;a href="https://bit.ly/3FXoFxA"&gt;https://bit.ly/3FXoFxA&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Impressed? Check out the rest of our &lt;a href="https://aviyel.com/events"&gt;events&lt;/a&gt;!&lt;br&gt;
Let’s build open-source together! 🎉&lt;br&gt;
Team Aviyel&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Habdul Hazeez Socials!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Twitter: &lt;a href="https://twitter.com/ziizium"&gt;ziizium&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/ziizium"&gt;ziizium&lt;/a&gt;&lt;br&gt;
Dev.to: &lt;a href="https://dev.to/ziizium"&gt;ziizium&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://linkedin.com/in/ziizium"&gt;Habdul Hazeez&lt;/a&gt;&lt;/p&gt;

</description>
      <category>android</category>
      <category>ios</category>
      <category>security</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>🧰 Setting up your username and email in Git at your first dev job</title>
      <author>Stefi Rosca</author>
      <pubDate>Tue, 30 Nov 2021 10:37:15 +0000</pubDate>
      <link>https://dev.to/stefirosca/setting-up-your-username-and-email-in-git-at-your-first-dev-job-13ej</link>
      <guid>https://dev.to/stefirosca/setting-up-your-username-and-email-in-git-at-your-first-dev-job-13ej</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TxsKK3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dub8lvb336t4xu0o4nf3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TxsKK3Io--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dub8lvb336t4xu0o4nf3.png" alt="Before and after example with image and name from profile" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the things I had to do when getting my first job was configuring Git. Unless you setup your name and email address Git will take it from the environment. This is important because every Git commit uses this information and if it's not setup correctly it will not be linked to your Github account. Hence if you have a profile picture it won't show.&lt;/p&gt;

&lt;p&gt;There are 2 ways to do it:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Globally&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open the command line and run the following commands with your name and email.&lt;/p&gt;

&lt;p&gt;To setup your username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --global user.name "Stefi Rosca"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To setup your email:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git config --global user.email "stefi.rosca@me.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case you only have to do it once and Git will always use this information for anything you do on that system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Repository-specific&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From the command line, change into a repository directory where you want to make this change and then run the commands as below.&lt;/p&gt;

&lt;p&gt;To setup your username:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.name "Stefi Rosca"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To setup your email address:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config user.email "stefi.rosca@me.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To test that you set it up correctly you can run in your in a specific Git terminal &lt;code&gt;git config user.email&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Make sure you change the name and email in the example above to yours. &lt;/p&gt;

&lt;p&gt;For more information check out chapter on Getting Started from the &lt;a href="https://git-scm.com/book/en/v2/Getting-Started-First-Time-Git-Setup"&gt;Pro Git book&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Kusk Gateway - Configuring Ingress with OpenAPI</title>
      <author>Ole Lensmar</author>
      <pubDate>Tue, 30 Nov 2021 10:26:46 +0000</pubDate>
      <link>https://dev.to/olensmar/kusk-gateway-configuring-ingress-with-openapi-101o</link>
      <guid>https://dev.to/olensmar/kusk-gateway-configuring-ingress-with-openapi-101o</guid>
      <description>&lt;p&gt;Hello everyone!&lt;/p&gt;

&lt;p&gt;We at Kubeshop have been investigating the feasibility of having an ingress controller that's configured using OpenAPI rather than Ingress resources.&lt;/p&gt;

&lt;p&gt;Would this be something of interest to you?&lt;/p&gt;

&lt;p&gt;The idea is that it will be completely self service for developers when updating the configuration that powers ingress.&lt;/p&gt;

&lt;p&gt;Our thought process was basically OpenAPI is great for describing your API, so why not use it for also describing how these services are exposed to the world?&lt;/p&gt;

&lt;p&gt;We developed an alpha open source product that implements this idea and are looking for people to evaluate it and give feedback. We have a handy example that takes ~10 minutes to get up and running for you to evaluate against.&lt;/p&gt;

&lt;p&gt;We're quite proud of what we managed to make it do thus far - instead of copying and pasting the current features here, I will just link to a blog post we wrote which goes into more detail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://kubeshop.io/blog/configure-ingress-with-openapi"&gt;https://kubeshop.io/blog/configure-ingress-with-openapi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We also have official documentation &lt;a href="https://kubeshop.github.io/kusk-gateway/"&gt;here&lt;/a&gt; and you can check out the repo on Github &lt;a href="https://github.com/kubeshop/kusk-gateway/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would greatly appreciate any feedback we receive and will allow us to develop it further to better suite the community.&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>openapi</category>
      <category>ingress</category>
      <category>swagger</category>
    </item>
    <item>
      <title>Laravel Envoy setup</title>
      <author>skino</author>
      <pubDate>Tue, 30 Nov 2021 10:20:09 +0000</pubDate>
      <link>https://dev.to/skino2020/laravel-envoy-setup-2m0</link>
      <guid>https://dev.to/skino2020/laravel-envoy-setup-2m0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;I'm sure that I'm not the only person like this but i often forget to run certain commands when pulling my blog live from GitHub. The two I'm terrible for are &lt;strong&gt;php artisan&lt;/strong&gt; &lt;strong&gt;migrate&lt;/strong&gt; and &lt;strong&gt;php artisan config:cache&lt;/strong&gt;. I don't know what the reason is for this but its been a pain in the neck for me for a while, i shamefully spent 45 mins trying to figure out why my posts weren't going over to Dev.to and the only error i was getting was "connection refused". Turns out i had not run the config cache to make my .env changes live...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-envoy"&gt;
  &lt;/a&gt;
  Introducing Envoy
&lt;/h3&gt;

&lt;p&gt;Envoy isn't a new package and I've just put off setting it up for no good reason until today.... its time to get the automation of my pull's to live working and it couldn't be easier!.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-one-require-the-package"&gt;
  &lt;/a&gt;
  Step One - Require the package
&lt;/h3&gt;

&lt;p&gt;As with almost all packages worth mentioning with Laravel this has a simple command to install:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require laravel/envoy --dev

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ye that's really it for the installation...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-specify-the-server"&gt;
  &lt;/a&gt;
  Step 2 - Specify the server
&lt;/h3&gt;

&lt;p&gt;Envoy uses code from a file in the root of your project (which you need to create) called &lt;strong&gt;Envoy.blade.php&lt;/strong&gt;. In this file we will specify our Server and the jobs required.&lt;/p&gt;

&lt;p&gt;so firs things first we need to specify the server to run the code one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['localhost' =&amp;gt; '127.0.0.1'])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm setting this up for my blog, so i don't have any replication as at this stage it would be overkill for my simple setup. if you wanted to add more than one server you would need to pass the server names and IP's to the Array like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['Raspada-web-1' =&amp;gt; '192.168.1.68', 'Raspada-web-2' =&amp;gt; '192.168.1.69'])

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-lets-tell-a-story"&gt;
  &lt;/a&gt;
  Step 3 - Lets tell a story!
&lt;/h3&gt;

&lt;p&gt;Thing i like about the way Envoy works is i can set it up and "talk out" my process like i do to my "Coding Duck"... if your Unsure what a coding duck is, quite simply its a rubber duck that when i'm struggling with a problem i talk through my issue with the duck... Sounds mental but it bloody works, often talking through your issue out loud will help you solve it... anyway back to our story. What should i be doing each time i make changes and make them live....&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git pull: Well duh! Merge the branch your working on into the main/master and pull to live&lt;/li&gt;
&lt;li&gt;Migrate: i want to run the migrate command just in case i have made some changes to tables.&lt;/li&gt;
&lt;li&gt;install composer packages for production: i want to install the packages for the live environment... not dev ones.&lt;/li&gt;
&lt;li&gt;Dump-Autoload: i want to clear out any auto-loaded classes that may have changed with my work completed.&lt;/li&gt;
&lt;li&gt;config-cache: i want to ensure all changes i have made to files like .env or saved to cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's our story! so how do we define this? well we use the &lt;a class="mentioned-user" href="https://dev.to/story"&gt;@story&lt;/a&gt;
 code and name our story... for this tutorial were going to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@story('code_update')
// story chapters here
@endstory

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So my story so far is this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['localhost' =&amp;gt; '127.0.0.1'])

@story('code_update')
gitpull
migrate
composerinstall
dumpautoload
savenewconfig
@endstory

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 4 - Create the Tasks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our main story for envoy we need to make each individual task with the required code inside.&lt;/p&gt;

&lt;p&gt;So first things first id suggest layout out each task accordingly like below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@servers(['localhost' =&amp;gt; '127.0.0.1'])

@story('code_update')
gitpull
migrate
composerinstall
dumpautoload
savenewconfig
@endstory


@task('gitpull')

@endtask

@task('migrate')

@endtask

@task('composerinstall')

@endtask

@task('dumpautoload')

@endtask

@task('savenewconfig')

@endtask

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Starting to get the idea?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-add-the-commands"&gt;
  &lt;/a&gt;
  Step 5 - Add the commands
&lt;/h3&gt;

&lt;p&gt;For this bit you just need to write the commands you would normally run (when you don't forget :S ) inside each of the tasks. when you're finished you should have something like mine below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@task('gitpull')
    git pull
@endtask

@task('migrate')
    php artisan migrate --force
@endtask

@task('composerinstall')
    composer install --no-dev
@endtask

@task('dumpautoload')
    composer dump-autoload
@endtask

@task('savenewconfig')
    php artisan config:cache
@endtask

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-6-finish-the-story"&gt;
  &lt;/a&gt;
  Step 6 - Finish the story
&lt;/h3&gt;

&lt;p&gt;All good stories come to an end... and envoy isn't any different we need to set the @finished flag&lt;/p&gt;

&lt;p&gt;You could leave this blank if you wanted to but seems a bit daft when Envoy makes it so easy to integrate with platforms like Slack, MS teams and Discord.&lt;/p&gt;

&lt;p&gt;For this im going to be just using some text in the terminal for when i pull.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@finished
    if ($exitCode &amp;gt; 0) {
       &amp;lt;span class="hljs-regexp"&amp;gt;// There were errors in one of the tasks...
    }
@endfinished
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#run-the-envoy-command"&gt;
  &lt;/a&gt;
  Run the Envoy command
&lt;/h3&gt;

&lt;p&gt;So first of we will pull this to our live environment after out branch merge (unless you were naughty and working on main/master!).&lt;/p&gt;

&lt;p&gt;we will then need to run composer install to just get Envoy working on live. and then you can run your full story by typing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php vendor/bin/envoy run code_update

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first time i ran this i got a bit scared because i seen a wall of red text.... don't worry its fine!... and that it, if you really want to be clever you could alias the command in your terminal to something like deploy-blog, deploy-saas so from anywhere on your server it will CD to the directory and run the command for you.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#all-done"&gt;
  &lt;/a&gt;
  All done...
&lt;/h3&gt;


&lt;p&gt;Now this will go live and just work and it will make my life easier. i haven't even scratched the surface yet with what i can do with envoy, I've not spoken about queue:restarts as i don't have any queues yet, I've not talked about running the envoy stories on multiple servers at the same time either. there is so much more this package can do!&lt;br&gt;&lt;br&gt; &lt;/p&gt;
&lt;h2&gt;Raspada-Blog&lt;/h2&gt;  I post on my blog primarily and share the posts via API, please check out &lt;a href="//www.raspada-blog.co.uk"&gt;Raspada-Blog&lt;/a&gt; for more posts and information. If you have any questions please message me on twitter or use my website contact form.

</description>
      <category>git</category>
      <category>php</category>
      <category>laravelenvoy</category>
    </item>
    <item>
      <title>Django Basics: Views and URLs </title>
      <author>Meet Gor</author>
      <pubDate>Tue, 30 Nov 2021 10:18:32 +0000</pubDate>
      <link>https://dev.to/mr_destructive/django-basics-views-and-urls-3bmm</link>
      <guid>https://dev.to/mr_destructive/django-basics-views-and-urls-3bmm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;After getting familiar with the folder structure of the Django framework, we'll create our first view in an app. The basics of creating and mapping a view with a URL will be cleared by the end of this part. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-views"&gt;
  &lt;/a&gt;
  Creating Views
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Views are the functions written in python as a logic control unit of the webserver &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To create a view or typically-like function, we need to write a function in the &lt;code&gt;views.py&lt;/code&gt; file inside of the application folder. The function name can be anything but should be a sensible name as far as its usability is concerned. Let's take a basic example of sending an HTTP response of 'Hello World'. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameviewspy"&gt;
  &lt;/a&gt;
  project_name/app_name/views.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.http import HttpResponse 

def index(request):
    return HttpResponse('Hello World') 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yes, we are simply returning an HTTP Response right now, but rendering Templates/HTML Documents is quite similar and easy to grasp in Django. So, this is a view or a piece of logic but there is a piece missing in this. Where should this function be used? Of course a URL i.e a path to a web server. &lt;/p&gt;

&lt;p&gt;We'll see how to map the views to an URL in Django in the next section &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mapping-the-views-to-a-url"&gt;
  &lt;/a&gt;
  Mapping the Views to a URL
&lt;/h2&gt;

&lt;p&gt;We need to first create a &lt;code&gt;urls.py&lt;/code&gt; file in the application folder to create a map of the URL to be mapped with the view. After creating the file in the same app folder as the &lt;code&gt;views.py&lt;/code&gt;, import the function in the view into the file. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameurlspy"&gt;
  &lt;/a&gt;
  project_name/app_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from .views import index 
from django.urls import path  

urlpatterns = [     
    path('', index, name='index'), 
] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The path can be anything you like but for simplicity, we'll keep it blank('') for now.    &lt;/p&gt;

&lt;p&gt;Now, you have the path for your view to work but it's not linked to the main project. We need to link the app urls to the project urls.  &lt;/p&gt;

&lt;p&gt;To link the urls of your app to the main project folder, you need to just add a single line of code in the &lt;code&gt;urls.py&lt;/code&gt; file of the project folder. &lt;/p&gt;

&lt;p&gt;In projectname folder -&amp;gt; urls.py &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameurlspy"&gt;
  &lt;/a&gt;
  project_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from django.contrib import admin 
from django.urls import path, include 

urlpatterns = [     
    path('admin/', admin.site.urls), 
    path('', include('post.urls')), 
] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You need to add the line &lt;code&gt;path('', include('post.urls')),&lt;/code&gt; and also import the &lt;code&gt;include&lt;/code&gt; function from &lt;code&gt;django.urls&lt;/code&gt;. This additional statement includes the urls or all the &lt;code&gt;urlpatterns&lt;/code&gt; in the &lt;code&gt;post&lt;/code&gt; app from the &lt;code&gt;urls.py&lt;/code&gt; file into the project's url-routes.  &lt;/p&gt;

&lt;p&gt;Here, the URL path can be anything like &lt;code&gt;'home/'&lt;/code&gt;, &lt;code&gt;'about/'&lt;/code&gt;, &lt;code&gt;'posts/'&lt;/code&gt;, etc. but since we are just understanding the basics, we'll keep it &lt;code&gt;''&lt;/code&gt; i.e. the root URL.  &lt;/p&gt;

&lt;p&gt;You can also see that there is another route in our project &lt;code&gt;'admin/'&lt;/code&gt; which is a path to the admin section. We'll explore this path and the entire Admin Section in some other part of this series. &lt;/p&gt;

&lt;p&gt;Now if you start the server and visit the default URL i.e &lt;code&gt;http://127.0.0.1:8000&lt;/code&gt;, you will see a simple HTTP message &lt;code&gt;Hello World&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzlBJSKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638194390/blogmedia/uv1_xf4byq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzlBJSKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638194390/blogmedia/uv1_xf4byq.png" alt="Hello World view" width="529" height="541"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-the-raw-path-endraw-function-in-urlpatterns"&gt;
  &lt;/a&gt;
  Breaking the &lt;code&gt;path&lt;/code&gt; function in urlpatterns
&lt;/h2&gt;

&lt;p&gt;The path function in the urlpatterns takes in at least 2 parameters, i.e. the URL pattern and the view of any other function that can be related to the webserver.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path( ' ',   view,    name )        
       ^       ^        ^        
       |       |        |       
       |       |     url_name       
       |   function_name    
    url_path     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#url-path"&gt;
  &lt;/a&gt;
  URL path
&lt;/h3&gt;

&lt;p&gt;The URL Path is the pattern or literally the path which you use in the Browser's search bar. This can be static i.e. some hard-coded text like &lt;code&gt;home/&lt;/code&gt;, &lt;code&gt;user/&lt;/code&gt;, &lt;code&gt;post/home/&lt;/code&gt;, etc. and we can also have dynamic URLs like &lt;code&gt;post/&amp;lt;pk:id&amp;gt;/&lt;/code&gt;, &lt;code&gt;user/&amp;lt;str:name&amp;gt;/&lt;/code&gt;, etc. here the characters &lt;code&gt;&amp;lt;pk:id&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;str:name&amp;gt;&lt;/code&gt; will be replaced by the actual id(integer/primary key) or the name(String) itself.  &lt;/p&gt;

&lt;p&gt;This is used in an actual web application, where there might be a user profile that needs the unique user-id to render it specifically for that user. The User-Profile is just an example, it can anything like posts, emails, products, any form of a content-driven application.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#view"&gt;
  &lt;/a&gt;
  View
&lt;/h3&gt;

&lt;p&gt;The view or the function is the name of the function that will be attached to that URL path. That means once the user visits that URL, the function is literally called. &lt;strong&gt;View is just a fancy word for a function(or any logic basically).&lt;/strong&gt; There is a lot to be covered when it comes to &lt;code&gt;View&lt;/code&gt; as there are a lot of ways to create it, there are two types of views, how to use them for various use-cases that can be learned along the way because it is a topic where the crust of Django exists.   &lt;/p&gt;

&lt;p&gt;We'll learn to create different implementations and structure our views, for time-being just consider them as the unit where every operation on the web can be performed. We can create other standalone functions in python to work with the views to make it a bit structured and readable. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#url-name"&gt;
  &lt;/a&gt;
  URL Name
&lt;/h3&gt;

&lt;p&gt;This is an optional parameter to the path function as we do not mandatorily need to give the URL map a name. This can be really useful in multi-page application websites where you need to link one page to another and that becomes a lot easier with the URL name. We do not need this right now, we'll touch it when we'll see the Django Templating Language.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-views"&gt;
  &lt;/a&gt;
  Example Views
&lt;/h2&gt;

&lt;p&gt;Let's create some examples to understand the working of Views and URLs. We'll create a dynamic URL and integrate the Python module in the views to get familiarized with the concept. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-urls"&gt;
  &lt;/a&gt;
  Dynamic URLs
&lt;/h3&gt;

&lt;p&gt;We can use the dynamic URLs or placeholder variables to render out the content dynamically. Let's create another set of View and URL map. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameviewspy"&gt;
  &lt;/a&gt;
  project_name/app_name/views.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def greet(request, name):
    return HttpResponse('Welcome, ' + name) 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This view or function takes an additional argument called &lt;code&gt;name&lt;/code&gt; and in response, it just says &lt;code&gt;Welcome, name&lt;/code&gt; where the name can be any string. Now after creating the view, we need to map the view to a URL pattern, We'll add a path for this greet function.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameurlspy"&gt;
  &lt;/a&gt;
  project_name/app_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path('greet/&amp;lt;str:name&amp;gt;/', greet, name='greet'), 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see how we have created the url-pattern here. The greet part is static but the &lt;code&gt;&amp;lt;str:name&amp;gt;&lt;/code&gt; is a variable or just a URL parameter to be passed to the view as the value of the variable &lt;code&gt;name&lt;/code&gt;. We have also given the URL map a name called greet, just for demonstration of its creation.  &lt;/p&gt;

&lt;p&gt;You'll get an error, 100% if you are blindly following me! Didn't you forget something? &lt;/p&gt;

&lt;p&gt;Import the greet function from the views like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from .views import index, greet   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, after we visit the URL &lt;code&gt;https://127.0.0.1:8000/greet/harry&lt;/code&gt;, you should see a response &lt;code&gt;Welcome, harry&lt;/code&gt; as simple as that.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--onlCT2vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252762/blogmedia/uv-greet_e2wg5o.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--onlCT2vd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252762/blogmedia/uv-greet_e2wg5o.gif" alt="Greet URL Demo" width="510" height="413"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, how is this working? We see the view first. The function takes two parameters one is most common the request which stores the meta-data about the request, the other parameter is the name that we will be use to respond to the server dynamically. The name variable is used in the string with the HttpResponse function to return a simple string. &lt;/p&gt;

&lt;p&gt;Then, in the URLs, we need to find a way to pass the variable name to the view, for that we use the &lt;code&gt;&amp;lt;string:name&amp;gt;&lt;/code&gt; which is like a URL parameter to the view. The path function automatically parses the name to the appropriate view and hence we call the greet function with the name variable from the URL. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-pythonic-things"&gt;
  &lt;/a&gt;
  Using Pythonic things
&lt;/h3&gt;

&lt;p&gt;We'll use some Python libraries or functions in the Django App. In this way, we'll see it's nearly no-brainer to use Python functions or libraries in the Django framework as indeed all files which we are working with are Python files. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameviewspy"&gt;
  &lt;/a&gt;
  project_name/app_name/views.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from random import randint 

def dice(request):
    number = randint(1,6)     
    return HttpResponse(f"Its {number}") 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This view is using the random module, you can pretty much use other web-compatible modules or libraries. We have used the &lt;code&gt;random.randint&lt;/code&gt; function to generate the pseudo-random number between 1 and 6. We have used the f-string (&lt;code&gt;f"{variable}"&lt;/code&gt;)styled Response string as int is not compatible with the response concatenation. So this is the logic of our map, now we'll need to link it to a URL-path.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#projectnameappnameurlspy"&gt;
  &lt;/a&gt;
  project_name/app_name/urls.py
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;path('throw/', dice, name='dice'), 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, import the view name from the views as &lt;code&gt;from .views import dice&lt;/code&gt; also add other views if present. Now if we go to the URL &lt;code&gt;https://127.0.0.1:8000/throw/&lt;/code&gt;, we shall see a random number in the response. This is how we used Python to make the logic of our view. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UkQkVTv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252951/blogmedia/uv-dice_bsodzq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UkQkVTv2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/dgpxbrwoz/image/upload/v1638252951/blogmedia/uv-dice_bsodzq.gif" alt="Dice URL Demo" width="510" height="413"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;So, that was the basics of creating and mapping views and urls. It is the most fundamental of the workflow in Django project development. You need to get familiar with the process of mapping Views and urls before diving into Templates, Models, and other complex stuff.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;From this part of the series, we touched upon the basics of views and URLs. The concept of mapping URLs and views might have been much cleared and it will be even gripping after we explore the Template handling and Static files in the next part. If you have any queries or mistakes I might have made please let me know. Thanks for reading and Happy Coding :) &lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>backend</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
