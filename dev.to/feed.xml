<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 6 Consulting Firms in Pune</title>
      <author>Sakshi Thorat</author>
      <pubDate>Tue, 28 Dec 2021 07:39:29 +0000</pubDate>
      <link>https://dev.to/sakshithorat/top-6-consulting-firms-in-pune-4i7d</link>
      <guid>https://dev.to/sakshithorat/top-6-consulting-firms-in-pune-4i7d</guid>
      <description>&lt;p&gt;Do you need consulting services in Pune to assist your company to become more productive by simplifying and enabling procedures that increase communication, save expenses, and boost overall performance? &lt;/p&gt;

&lt;p&gt;You may acquire competitive advantages and develop unique goods and services with the help of several consulting organisations in Pune. &lt;/p&gt;

&lt;p&gt;By collaborating with customers, the majority of consultants advise them on how to use information technology to fulfil their business objectives or solve challenges. &lt;/p&gt;

&lt;p&gt;We have compiled a list of the best consulting firms in Pune that can help enterprises improve the structure and effectiveness of their IT systems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Top 6 consulting firms in Pune&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following are the list of the top 10 consulting firms in Pune:&lt;/p&gt;

&lt;p&gt;1.** REGO Techno Solutions**&lt;/p&gt;

&lt;p&gt;Rego Techno Solutions is one of India's leading website design firms. Professional Online Design and Web Development Company in a wide range of creative and technical web solutions, including web design, web development, website hosting, digital marketing, and SEO. &lt;/p&gt;

&lt;p&gt;Whether it's building a successful ECommerce store (e-commerce website development) or establishing a corporate online presence, they can help.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Britwise Technologies&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Britwise Technologies is a well-known offshore Web &amp;amp; Mobile application development business in India that provides unique and best-in-class solutions to clients all over the world. &lt;/p&gt;

&lt;p&gt;With the help of qualified expert developers, They can turn your concept into a personalised and scalable application that will help you grow your business. Britwise Technology, with its empowered team of professionals and industry experts, specialises in cutting-edge technology. &lt;/p&gt;

&lt;p&gt;They deal with startups, mid-sized businesses, and major organisations, assisting them with their business operations via the use of technology. They've served customers in a variety of time zones and verticals, with retail, automotive, hotel, real estate, education, tourism, and medical being the most common.&lt;/p&gt;

&lt;p&gt;Please connect with them for more information about development services. They turn your ideas into creating apps, and they are the global leader in development.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Logic Research and Solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Hotel management, event management, b2b portal, classified services, career services, healthcare analogue forecasting tools, and many more online applications have been built by Logic Research and Solutions for our happy clients. &lt;/p&gt;

&lt;p&gt;They have a team of web application developers that are proficient in PHP, Android, Advanced Java, Asp.net, and other programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. ShivShakti Web Solutions &amp;amp; Services&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are committed to providing you with whatever you need (in terms of web and internet services) for your online presence on the internet. &lt;/p&gt;

&lt;p&gt;In the following spheres of operation, they provide a variety of personal and professional services: Web hosting, domain registration, website design and development, eCommerce services, email hosting, digital certificates, SEO services, CMS services, website logo design, web advertising, and excellent customer service are just a few of the services available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. QuadLogix Technologies Pvt. Ltd.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They are an IT consulting and software development firm that provides end-to-end IT solutions to businesses all over the world. &lt;/p&gt;

&lt;p&gt;They are the chosen IT consultants and development partners for organisations all over the world because of our strong expertise in technology, our diverse experience across numerous sectors, and our well-designed software best practices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. &lt;a href="https://www.behievehrsolutions.com/"&gt;Behieve HR Solutions&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pune Based leading best class corporate leadership training company offers analytics-focused OD and performance consulting for Small Medium Enterprises, &lt;a href="https://www.behievehrsolutions.com/services/business-coaching/"&gt;leadership training&lt;/a&gt;, soft skills training, management, and executive coaching solutions for professionals and companies looking to partner with foremost corporate leadership training companies. They customize and deliver &lt;a href="https://www.behievehrsolutions.com/services/hr-processes/"&gt;HR Processes&lt;/a&gt;, Learning &amp;amp; development, corporate pieces of training, and webinars keeping our client‚Äôs business, organizational culture.&lt;/p&gt;

&lt;p&gt;They also provide &lt;a href="https://www.behievehrsolutions.com/services/recruitment/"&gt;Recruitment Process Outsourcing (RPO)&lt;/a&gt; which is an entire business process outsourcing where a company transfer all or part of its recruitment processes to an external service provider.&lt;/p&gt;

&lt;p&gt;Behieve offer &lt;a href="https://www.behievehrsolutions.com/services/learning-development/"&gt;Learning and Development&lt;/a&gt; which best describes everything a business does to encourage professional development among its employees. Training courses, analysis, content management programs, learning plan implementations, development activities ‚Äì as well as much more ‚Äì all fall under the bracket of Learning and Development.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Flow control using JS</title>
      <author>Manu Martinez</author>
      <pubDate>Tue, 28 Dec 2021 07:38:30 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/flow-control-using-js-3f2m</link>
      <guid>https://dev.to/whitehatdevv/flow-control-using-js-3f2m</guid>
      <description>&lt;p&gt;Yes, it's one of the most &lt;strong&gt;important topic&lt;/strong&gt; when you are learning how to &lt;strong&gt;write&lt;/strong&gt; code with &lt;strong&gt;JS&lt;/strong&gt; ü§î&lt;/p&gt;

&lt;p&gt;First, you need to understand what does it mean, what is exactly &lt;em&gt;flow control&lt;/em&gt;, when your code needs to take a decision about which sentence should be run it's made with &lt;strong&gt;FLOW CONTROL&lt;/strong&gt; üòá. There are different methods to control flow using JS, let's going to see some examples: &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#if-else-clause"&gt;
  &lt;/a&gt;
  if - else clause
&lt;/h2&gt;

&lt;p&gt;This is the most &lt;strong&gt;typical&lt;/strong&gt; one, it gives us a lot of control about code execution, we can &lt;em&gt;decide&lt;/em&gt; which code should be run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// run here is condition is true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="c1"&gt;// run here is condition is false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the &lt;em&gt;basic syntax&lt;/em&gt; you must use üòÅ, it's really easy, you have a condition which is evaluated and depending on that you will run one side or &lt;strong&gt;another&lt;/strong&gt;. &lt;strong&gt;OMG!!&lt;/strong&gt; Yes, it gives us a lot of power. Let's try one more example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum contains a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum is not a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, this code checks if this &lt;code&gt;const&lt;/code&gt; is a &lt;code&gt;string&lt;/code&gt; and run the following sentences according to the condition, &lt;strong&gt;obviously&lt;/strong&gt; this condition is &lt;code&gt;true&lt;/code&gt;, the you will see &lt;code&gt;My Mum contains a string&lt;/code&gt; in your &lt;code&gt;console&lt;/code&gt; üòá. &lt;/p&gt;

&lt;p&gt;Moreover you are able to evaluate multiple conditions using &lt;code&gt;logic operators&lt;/code&gt;, AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and OR &lt;code&gt;||&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: It means that all the conditions must be true due to &lt;code&gt;true&lt;/code&gt; of the entire condition.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// It returns true due to both sides are true.&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;OR &lt;code&gt;||&lt;/code&gt;: It means that at least one of the conditions must be true to get a final &lt;code&gt;true&lt;/code&gt;:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// it returns true due to at least one side is true&lt;/span&gt;
&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It gives us more powerful tools to check multiple conditions using the same &lt;code&gt;if&lt;/code&gt; clause ü§ñ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maria&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;myMum&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum contains a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;My mum is not a string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, it will print &lt;code&gt;My mum contains a string&lt;/code&gt; because two conditions are true and I have used an &lt;strong&gt;AND&lt;/strong&gt; logic port. &lt;br&gt;
I recommend you to practise some conditions using JS to &lt;strong&gt;understand better&lt;/strong&gt; ‚ò∫Ô∏è how to use that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#switchcase-clause"&gt;
  &lt;/a&gt;
  Switch-case clause
&lt;/h2&gt;

&lt;p&gt;It allows you to check multiple &lt;em&gt;static&lt;/em&gt; conditions and take decisions depending on that value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valor1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valor1` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valor2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valor2` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nx"&gt;valorN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when the conditions is match `valorN` &lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;// It will run when all the conditions are false&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It has a lot of power and bring us the opportunity to check &lt;strong&gt;multiple possible values&lt;/strong&gt; easily, instead, we can use multiple &lt;code&gt;if-else&lt;/code&gt; clauses, but your code will not be legible ü§í. It comes to bring us more &lt;strong&gt;organisation&lt;/strong&gt; when we need to check conditions that can take a lot different values, Let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1 negative&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;// foo is 0, then the following block will be run&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Break allow us not to run case1&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Break allow us not to run case2&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Moreover, you can run the same for conditions that need to perform the same &lt;strong&gt;action&lt;/strong&gt;, let's see an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;animal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Animal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Dog&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;giraffe&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Cat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Bird&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This animal will live.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;elephant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;This animal will not.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you have just seen, we will take the same action if animal math &lt;strong&gt;one of the four&lt;/strong&gt; case exposed üòá.&lt;/p&gt;

&lt;p&gt;Here you have seen how to check conditions and how to make your code take &lt;strong&gt;decisions&lt;/strong&gt; in execution time about possible values of your &lt;strong&gt;expressions&lt;/strong&gt;.  &lt;/p&gt;

&lt;p&gt;That's all for &lt;em&gt;today&lt;/em&gt; post!!!&lt;/p&gt;

&lt;p&gt;If you really like our post, please don't forget to share with your friends and give us some likes, it'll help us to grow more and get more &lt;strong&gt;advance&lt;/strong&gt; content üë®üèº‚Äçüíª to this blog. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Vitest - Jest Alternative powered by Vite</title>
      <author>Eugene Kopich</author>
      <pubDate>Tue, 28 Dec 2021 07:27:55 +0000</pubDate>
      <link>https://dev.to/web2033/vitest-jest-alternative-powered-by-vite-5hc7</link>
      <guid>https://dev.to/web2033/vitest-jest-alternative-powered-by-vite-5hc7</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-vitest"&gt;
  &lt;/a&gt;
  Why &lt;a href="https://vitest.dev/"&gt;Vitest&lt;/a&gt;
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This guide assumes that you are familiar with Vite. A good way to start learning more is to read the &lt;a href="https://vitejs.dev/guide/why.html"&gt;Why Vite Guide&lt;/a&gt;, and &lt;a href="https://www.youtube.com/watch?v=UJypSr8IhKY"&gt;Next generation frontend tooling with ViteJS&lt;/a&gt;, a stream where &lt;a href="https://twitter.com/youyuxi"&gt;Evan You&lt;/a&gt; did a demo explaining the main concepts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#the-need-for-a-vite-native-test-runner"&gt;
  &lt;/a&gt;
  The need for a Vite native test runner
&lt;/h2&gt;

&lt;p&gt;Vite's out-of-the-box support for common web patterns, features like glob imports and SSR primitives, and its many plugins and integrations are fostering a vibrant ecosystem. Its dev and build story are key to its success. For docs, there are several SSG-based alternatives powered by Vite. Vite's Unit Testing story hasn't been clear though. Existing options like &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; were created in a different context. There is a lot of duplication between Jest and Vite, forcing users to configure two different pipelines. &lt;/p&gt;

&lt;p&gt;Using Vite dev server to transform your files during testing, enables the creation of a simple runner that doesn't need to deal with the complexity of transforming source files and can solely focus on providing the best DX during testing. A test runner that uses the same configuration of your App (through &lt;code&gt;vite.config.js&lt;/code&gt;), sharing a common transformation pipeline during dev, build, and test time. That is extensible with the same plugin API that lets you and the maintainers of your tools provide first-class integration with Vite. A tool that is built with Vite in mind from the start, taking advantage of its improvements in DX, like its instant Hot Module Reload (HMR). This is Vitest, a blazing fast unit-test framework powered by Vite. &lt;/p&gt;

&lt;p&gt;Given Jest's massive adoption, Vitest provides a compatible API that allows you to use it as a drop-in replacement in most projects. It also includes the most common features required when setting up your unit tests (mocking, snapshots, coverage). Vitest cares a lot about performance and uses Worker threads to run as much as possible in parallel. Some ports have seen test running an order of magnitude faster. Watch mode is enabled by default, aligning itself with the way Vite pushes for a dev first experience. Even with all these improvements in DX, Vitest stays lightweight by carefully choosing its dependencies (or directly inlining needed pieces). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Vitest aims to position itself as the Test Runner of choice for Vite projects, and as a solid alternative even for projects not using Vite.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vitest-vs-jest"&gt;
  &lt;/a&gt;
  Vitest vs Jest
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt; took over the Testing Framework space by providing out-of-the-box support for most JavaScript projects, a comfortable API (&lt;code&gt;it&lt;/code&gt; and &lt;code&gt;expect&lt;/code&gt;), and the full pack of testing features that most setups would require (snapshots, mocks, coverage). We are thankful to the Jest team and community for creating a delightful testing API and pushing forward a lot of the testing patterns that are now a standard in the web ecosystem. It is possible to use Jest in Vite setups. &lt;a href="https://twitter.com/haoqunjiang"&gt;@sodatea&lt;/a&gt; is building &lt;a href="https://github.com/sodatea/vite-jest#readme"&gt;vite-jest&lt;/a&gt;, which aims to provide first-class Vite integration for &lt;a href="https://jestjs.io/"&gt;Jest&lt;/a&gt;. The last &lt;a href="https://github.com/sodatea/vite-jest/blob/main/packages/vite-jest/README.md#vite-jest"&gt;blockers in Jest&lt;/a&gt; have been solved so this is a valid option for your unit tests. However, in a world where we have &lt;a href="https://vitejs.dev"&gt;Vite&lt;/a&gt; providing support for the most common web tooling (typescript, JSX, most popular UI Frameworks), Jest represents a duplication of complexity. If your app is powered by Vite, having two different pipelines to configure and maintain is not justifiable. With Vitest you get to define the configuration for your dev, build and test environments as a single pipeline, sharing the same plugins and the same vite.config.js. Even if your library is not using Vite (for example, if it is built with esbuild or rollup), Vitest is an interesting option as it gives you a faster run for your unit tests and a jump in DX thanks to the default watch mode using Vite instant Hot Module Reload (HMR). Vitest offers compatibility with most of the Jest API and ecosystem libraries, so in most projects, it should be a drop-in replacement for Jest.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vitest-features"&gt;
  &lt;/a&gt;
  Vitest Features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Vite's config, transformers, resolvers, and plugins. Use the same setup from your app!&lt;/li&gt;
&lt;li&gt;Jest Snapshot&lt;/li&gt;
&lt;li&gt;Chai built-in for assertions, with Jest expect compatible APIs.&lt;/li&gt;
&lt;li&gt;Smart &amp;amp; instant watch mode, like HMR for tests!&lt;/li&gt;
&lt;li&gt;Native code coverage via c8&lt;/li&gt;
&lt;li&gt;Tinyspy built-in for mocking, stubbing, and spies.&lt;/li&gt;
&lt;li&gt;JSDOM and happy-dom for DOM and browser API mocking&lt;/li&gt;
&lt;li&gt;Components testing (Vue, React, Lit, Vitesse)&lt;/li&gt;
&lt;li&gt;Workers multi-threading via tinypool (a lightweight fork of Piscina)&lt;/li&gt;
&lt;li&gt;ESM first, top level await&lt;/li&gt;
&lt;li&gt;Out-of-box TypeScript / JSX support&lt;/li&gt;
&lt;li&gt;Filtering, timeouts, concurrent for suite and tests&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#vitest-example"&gt;
  &lt;/a&gt;
  Vitest Example
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;assert&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vitest&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;suite name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;be&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snapshot&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;toMatchSnapshot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g50JDX0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ffh77i34mjb4dcuggs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g50JDX0U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/78ffh77i34mjb4dcuggs.png" alt="Vitest logo" width="740" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vitest.dev/guide/"&gt;Vitest Documentaion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vite</category>
      <category>jest</category>
      <category>testing</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Basics of Python "String"</title>
      <author>Umme Abira AZMARY</author>
      <pubDate>Tue, 28 Dec 2021 06:22:53 +0000</pubDate>
      <link>https://dev.to/mouly22/basics-of-python-string-glg</link>
      <guid>https://dev.to/mouly22/basics-of-python-string-glg</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Strings are what we use in python when working with words.&lt;/em&gt;&lt;/strong&gt; Strings are either enclosed with single quotes or double quotes.Also we can write multi line string using triple qutations(single and double both)&lt;br&gt;
So, we can use either single quotes or double quotes as long as we are consistant about which qutation we are using.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_name = "Hello! I am mouly"
myy_name = 'Helloo! I am Mouly'
x = '''this is
a multi line 
string
that we can write'''
print(my_name)
print(myy_name)
print(x)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hello! I am mouly
Helloo! I am Mouly
this is
a multi line 
string
that we can write
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also make an &lt;strong&gt;&lt;em&gt;empty string&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = " "                                       #empty string
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can &lt;strong&gt;&lt;em&gt;concatenate&lt;/em&gt;&lt;/strong&gt; strings by using the plus(+) sign.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var1 = "we want"
var2 = "to visit a"
var3 = "zoo"
var =  var1 +" "+ var2 +" "+ var3             #concetenation of a string
print(var)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;we want to visit a zoo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice one thing, this + sign doesn't add any &lt;strong&gt;&lt;em&gt;space&lt;/em&gt;&lt;/strong&gt; while concatenating. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;type&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;this built-in fuction returns the type of an object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name = "alan walker"  
print(type(name))                             #type of name variable
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;class 'str'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"                                      #this is a string
q = 5                                        #this is an integer
print(type(p))
print(type(q))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;class 'str'&amp;gt;
&amp;lt;class 'int'&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Even though p and q might look same to you.. their types are different and there are different consequences for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
q = 5
print(p)
print(q + 45)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
50
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;but&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
q = 5
print(p + 45)                                 #this will give an error
print(q)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TypeError: can only concatenate str (not "int") to str
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here, p is a string. Even though 5 happens to look like a number, in python it's just a sequence of characters and we can't add a number to a sequence of characters.&lt;br&gt;
we can add them if we cast this p string into an integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
q = 5
print(int(p) + 45))                          #this won't give an error
print(q)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;50
5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "5"
print(p + "45")                              #string concetenation
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;545
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we call a int of float to cast a string it needs to be a valid number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;p = "20 taka"
print(p + 25)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;TypeError: can only concatenate str (not "int") to str
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, python can't convert this string into integer.&lt;/p&gt;

&lt;p&gt;Strings are sequential collection datatype.This means a string is actually a collection of single characters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Indexing&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We can access a sub-string or part of a string using the indexing operator.&lt;br&gt;
This operator is handy for accessing a single character by it's position or &lt;strong&gt;&lt;em&gt;index value&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This index value for sequential collection datatypes always begins at &lt;strong&gt;&lt;em&gt;zero&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
For example, string with six character have entities from 0 through 5. So if we want to access a 5th character of a string we'll use an index of 4.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(xmple[0])
print(xmple[2])   
print(xmple[8]) 
print(xmple[-1])                                 #negative indexing
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;w

t
s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Positive indexing starts from 0 and from the right side while negative indexing starts from the left side,&lt;br&gt;
so we can access the last characters also by using negative indexing.&lt;br&gt;
Yess, the space also counts.&lt;br&gt;
the built-in function &lt;strong&gt;&lt;em&gt;len()&lt;/em&gt;&lt;/strong&gt; can help us determine the length of a string. So the last index of a stirng will always be &lt;strong&gt;&lt;em&gt;one less&lt;/em&gt;&lt;/strong&gt; than the length of that string.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(len(xmple))                               #length of a string
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;17
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to access last character of a string we can do either of them from below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(xmple[len(xmple)-1])
print(xmple[-1])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;e
e
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Slice Operator&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Another way of accessing characters in a stirng is to use the slice operator. This allows us to create a sub-string that is more than one character long.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;Keep in mind&lt;/em&gt;&lt;/strong&gt; that, the slice operator leaves the original operator intact.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;xmple = "we want to access"
print(xmple[1:9:1])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;e want t
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example,the colon used in this slicing operator will return the characters from index 1 upto index 8(so not including index 9) and the increment will be 1.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Built-in methods&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;It's important to remember that, Python is immutable&lt;/em&gt;&lt;/strong&gt; means they can not be changed.&lt;/p&gt;

&lt;p&gt;Python has some built-in method to access or process characters in string.&lt;/p&gt;

&lt;p&gt;For example,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;count method&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
we can use the count method to count the occurances of a particular substring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;place = "I want to visit USA"
print(place.count("i"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As python is &lt;strong&gt;&lt;em&gt;case-sensitive,&lt;/em&gt;&lt;/strong&gt; we can't access I here cause the ASCII value of I is different than i***&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;index method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;we can use the index method to find the index of the &lt;strong&gt;&lt;em&gt;first occurance&lt;/em&gt;&lt;/strong&gt; of a given substring.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;place = "I want to visit USA"
print(place.index("i"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;11
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;Upper and lower method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Upper returns the copy of a given string in all uppercase letters; while lower returns the copy of a given string in all lowercase letters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;place = "I want to visit USA"
print(place.upper())
print(place.lower())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I WANT TO VISIT USA
i want to visit usa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;upper or lower method takes no arguments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;strip method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;this strip method returns the copy of a string with the leading and trailing &lt;strong&gt;&lt;em&gt;whitespaces&lt;/em&gt;&lt;/strong&gt; removed.&lt;/p&gt;

&lt;p&gt;Whitespaces refers to any character that represents a space in text like a tab,a space or a new line character.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;new = "   Well this is another line   !     "       #Strips all whitespace characters from both ends.
print(new.strip())
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Well this is another line   !
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice, the whitespace between characters are not removed, only the leading and trailing whitespaces are removed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;split method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Split helps us breaking sentences of a string into more managable pieces.&lt;/p&gt;

&lt;p&gt;Split takes a &lt;strong&gt;&lt;em&gt;delimiter&lt;/em&gt;&lt;/strong&gt; and splits the string into sub-strings.The method returns a list where each item is a sub-string that is cut at every instance of that delimeter.&lt;/p&gt;

&lt;p&gt;For example,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;song = "Tell me why? Aint noting but a heartache. Tell me why? Aint noting but a mistake"
print(song.split("?"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Tell me why', ' Aint noting but a heartache. Tell me why', ' Aint noting but a mistake']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This output comes as a list&lt;br&gt;
Here "?" is the delimeter.. so It will cut in those places and won't return the delimeter in output.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = "Library is a place where you can find peace"
print(x.split(" "))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Library', 'is', 'a', 'place', 'where', 'you', 'can', 'find', 'peace']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here my delimeter is a space. So the resulting list will include every word in that sentence but no spaces.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = "Library is a place where you can find peace"
print(x.split("a"))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['Libr', 'ry is ', ' pl', 'ce where you c', 'n find pe', 'ce']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, the split method won't include the delimeter in the list it returns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;join method&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The inverse of the split method is join. We can choose a desired separator string, (often called the glue) and join the list with the glue between each of the elements.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;x = ["*light blue?", "sky", "it's raining hard","colin, where you go","?*"]
y = "! "
p = y.join(x)
print(p)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*light blue?! sky! it's raining hard! colin, where you go! ?*
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use empty string or multi-character strings as glue.&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>beginners</category>
      <category>basics</category>
    </item>
    <item>
      <title>Public Solving: Calculating the wind chill</title>
      <author>Chris Bongers</author>
      <pubDate>Tue, 28 Dec 2021 06:02:06 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-calculating-the-wind-chill-9mc</link>
      <guid>https://dev.to/dailydevtips1/public-solving-calculating-the-wind-chill-9mc</guid>
      <description>&lt;p&gt;Santa's sled is pretty modern. Hey, we even upgraded it to have an &lt;a href="https://daily-dev-tips.com/posts/public-solving-making-an-autopilot-navigator/"&gt;autopilot&lt;/a&gt;.&lt;br&gt;
But now, the elves want to surprise Santa by adding a wind chill gauge.&lt;/p&gt;

&lt;p&gt;The wind chill is the "feel" temperature, you know when it's like 30 degrees, but it feels like 35?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-18"&gt;You can find the complete puzzle here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do this, we can use an already provided mathematical calculation which can be found &lt;a href="https://sciencing.com/calculate-wind-chill-factor-5981683.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The wind chill can be calculated for English and Metric values.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#thinking-about-the-solution"&gt;
  &lt;/a&gt;
  Thinking about the solution
&lt;/h2&gt;

&lt;p&gt;The main thing we have to achieve today is to actually make the formula in JavaScript.&lt;br&gt;
This should be a pretty straightforward process.&lt;/p&gt;

&lt;p&gt;The formula for English units looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.6215&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="err"&gt;‚Äì&lt;/span&gt; &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.4275&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;V&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where &lt;code&gt;T&lt;/code&gt; = Temperature in degrees Fahrenheit and &lt;code&gt;V&lt;/code&gt; = wind speed in miles per hour.&lt;/p&gt;

&lt;p&gt;In JavaScript this should look similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mf"&gt;0.4275&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Did you note the &lt;code&gt;(V^0.16)&lt;/code&gt; exponent? We can use &lt;code&gt;Math.pow&lt;/code&gt; or the shortcut &lt;code&gt;**&lt;/code&gt; for that.&lt;/p&gt;

&lt;p&gt;Then we can simply wrap this in a &lt;code&gt;Math.round&lt;/code&gt; to get the rounded number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
    &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="mf"&gt;0.4275&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, we also need a way to calculate the metric version.&lt;/p&gt;

&lt;p&gt;I decided to just catch and return the English units beforehand.&lt;/p&gt;

&lt;p&gt;And if that didn't hit, surely it must be the metric version.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;units&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="mf"&gt;35.74&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
        &lt;span class="mf"&gt;35.75&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="mf"&gt;0.4275&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="mf"&gt;13.12&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="mf"&gt;0.6215&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;
      &lt;span class="mf"&gt;11.37&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="mf"&gt;0.3965&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;temperature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;windSpeed&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mf"&gt;0.16&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it! We solved the issue.&lt;/p&gt;

&lt;p&gt;Let's try it out and see if our test turns green.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hu8MrfZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639835530374/FAKl-22B2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hu8MrfZj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639835530374/FAKl-22B2.png" alt="Wind chill test in JavaScript turning green" width="634" height="288"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Would love to hear what you would do differently to solve this problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
    <item>
      <title>Reverse HTTP proxy over WebSocket in Go (Part 4)</title>
      <author>Kazuki Higashiguchi</author>
      <pubDate>Tue, 28 Dec 2021 06:01:33 +0000</pubDate>
      <link>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c</link>
      <guid>https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-3g7c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#series-introduction"&gt;
  &lt;/a&gt;
  Series introduction
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt; I talked about how to relay TCP connection from "App" to the peer of WebSocket, especially implementation to receive requests to be proxied and to pool the WebSocket connection on the server for relaying in Go.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Reverse HTTP proxy over WebSocket in Go (Part 3)&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi „Éª Dec 16 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#websocket&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;In this post, I will be starting to talk about how to relay TCP connection from "App" to the peer of WebSocket in Go.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start a WebSocket server (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-1-13n4"&gt;Part 1&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Establish a WebSocket connection (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-2-o4a"&gt;Part 2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Relay TCP connection from "App" to the peer of WebSocket (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;Part 3&lt;/a&gt; | &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-4-213i-temp-slug-1615861"&gt;Part 4&lt;/a&gt; | Part 5)&lt;/li&gt;
&lt;li&gt;Relay TCP connection in WebSocket data to "internal API"&lt;/li&gt;
&lt;li&gt;Keep a established connection&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reverse-http-proxy-over-websocket"&gt;
  &lt;/a&gt;
  Reverse HTTP proxy over WebSocket
&lt;/h2&gt;

&lt;p&gt;A reverse HTTP proxy over WebSocket is a type of proxies, which retrieves resources on behalf on a client from servers and uses the WebSocket protocol as a "tunnel" to pass TCP communication from server to client.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--46eqlV8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iupaoeq283lyeqpkg049.png" alt="A network diagram for reverse proxy over WebSocket" width="681" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I'll introduce Go sample project forked from &lt;a href="https://github.com/root-gg/wsp"&gt;root-gg/wsp&lt;/a&gt; (I forked it because maintenance has stopped and the Go language and libraries version needed to be updated).&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hgsgtk"&gt;
        hgsgtk
      &lt;/a&gt; / &lt;a href="https://github.com/hgsgtk/wsp"&gt;
        wsp
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      HTTP tunnel over Websocket
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#relay-tcp-connection-to-the-peer-websocket"&gt;
  &lt;/a&gt;
  Relay TCP connection to the peer WebSocket
&lt;/h2&gt;

&lt;p&gt;A reverse HTTP proxy over WebSocket relay TCP connection to the peer WebSocket over the WebSocket connection. &lt;/p&gt;

&lt;p&gt;HTTP communication is relayed by the following route.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app -[1]-&amp;gt; wsp server -[2](WebSocket)-&amp;gt; wsp client -&amp;gt; internal API
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And, these flow are divided into three parts to explain it.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Receive requests to be proxied (&lt;code&gt;[1]&lt;/code&gt; in the relay flow)&lt;/li&gt;
&lt;li&gt;Pool the WebSocket connection on the server for relaying&lt;/li&gt;
&lt;li&gt;Relay TCP connection to the peer WebSocket (&lt;code&gt;[2]&lt;/code&gt; in the relay flow)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I explained the 1st and 2nd flow in &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt;, so let's move on the 3rd flow.&lt;/p&gt;

&lt;p&gt;Let's take a look at the continuation of the previous &lt;a href="https://github.com/hgsgtk/wsp/blob/8d7d7b4eb6aa700950c41756608177514b935507/server/server.go#L189"&gt;HTTP handler code&lt;/a&gt;, which waits the request from "app" to the endpoint &lt;code&gt;/requests/&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit): [1]: Receive requests to be proxied&lt;/span&gt;

    &lt;span class="c"&gt;// [2]: Take a WebSocket connection available from pools for relaying received requests.&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewConnectionRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="c"&gt;// "Dispatcher" is running in a separate thread from the server by `go s.dispatchConnections()`.&lt;/span&gt;
    &lt;span class="c"&gt;// It waits to receive requests to dispatch connection from available pools to clients requests.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L93&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Notify request from handler to dispatcher through Server.dispatcher channel.&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
    &lt;span class="c"&gt;// Dispatcher tries to find an available connection pool,&lt;/span&gt;
    &lt;span class="c"&gt;// and it returns the connection through Server.connection channel.&lt;/span&gt;
    &lt;span class="c"&gt;// https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L189&lt;/span&gt;
    &lt;span class="c"&gt;//&lt;/span&gt;
    &lt;span class="c"&gt;// Here waiting for a result from dispatcher.&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// It means that dispatcher has set `nil` which is a system error case that is&lt;/span&gt;
        &lt;span class="c"&gt;// not expected in the normal flow.&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// [3]: Send the request to the peer through the WebSocket connection.&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;proxyRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// An error occurred throw the connection away&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c"&gt;// Try to return an error to the client&lt;/span&gt;
        &lt;span class="c"&gt;// This might fail if response headers have already been sent&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In brief, the following process is performed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take a WebSocket connection available from pools for relaying received requests&lt;/li&gt;
&lt;li&gt;Send the request to the peer through the WebSocket connection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'll explain the one by one.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#take-a-websocket-connection-available-from-pools-for-relaying-received-requests"&gt;
  &lt;/a&gt;
  Take a WebSocket connection available from pools for relaying received requests
&lt;/h2&gt;

&lt;p&gt;As a pre-requisite, we will start with WebSocket connection already established with the WebSocket client (&lt;code&gt;wsp_client&lt;/code&gt;) and held by the server as a pool (&lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;Chapter 2&lt;/a&gt;).&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// - 1. Upgrade a received HTTP request to a WebSocket connection&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="c"&gt;// - 2. Wait a greeting message from the peer and parse it&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// 3. Register the connection into server pools.&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="c"&gt;// Add the WebSocket connection to the pool&lt;/span&gt;
    &lt;span class="n"&gt;pool&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;There are several possible designs for retrieving the connection from the pools, and I'll explain the pattern of using multiple threads. Specifically, there are two threads running: "Server", which accepts http requests, and "Dispatcher", which dispatches connections from the pools to be used to relay. Here is &lt;a href="https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L93"&gt;the Go code&lt;/a&gt; to start "Server" and "Dispatcher" that will be called from the main function.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)...&lt;/span&gt;

    &lt;span class="c"&gt;// start the "Dispatcher"&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatchConnections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// start the "Server"&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Addr&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAddr&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="n"&gt;Handler&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListenAndServe&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;}()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://go.dev/ref/spec#Go_statements"&gt;go&lt;/a&gt; statement starts the execution of a function call as an independent concurrent thread of control, or goroutine, within the same the address space.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIcxR0Ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivlo56namrbjratgod7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIcxR0Ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivlo56namrbjratgod7z.png" alt="A diagram describing two threads in wsp_server" width="862" height="356"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's move on the implementation of &lt;a href="https://github.com/hgsgtk/wsp/blob/ea4902a8e11f820268e52a6245092728efeffd7f/server/server.go#L189"&gt;dispatchConnections&lt;/a&gt; function that starts a "dispatcher" thread.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// Through dispatcher channel it communicates between "server" thread and "dispatcher" thread.&lt;/span&gt;
    &lt;span class="c"&gt;// "server" thread sends the value to this channel when accepting requests in the endpoint /requests, &lt;/span&gt;
    &lt;span class="c"&gt;// and "dispatcher" thread reads this channel.&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ConnectionRequest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dispatchConnections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;//  The operator &amp;lt;- is "receive operator", which expression blocks until a value is available.&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// The value of `ok` is false if it is a zero value generated because the channel is closed an empty.&lt;/span&gt;
            &lt;span class="c"&gt;// In this case, that means server shutdowns.           break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// (omit)...&lt;/span&gt;

            &lt;span class="c"&gt;// Verify that we can use this connection&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// (omit)...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The type of the field &lt;code&gt;dispatcher&lt;/code&gt; in the &lt;code&gt;Server&lt;/code&gt; structure is &lt;a href="https://go.dev/ref/spec#Channel_types"&gt;channel&lt;/a&gt;. Channel types provide a mechanism for concurrently executing functions to communicate by sending and receiving values of a specified element type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0cBJ2NO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v117tv59ad82h6bxvadt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0cBJ2NO5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v117tv59ad82h6bxvadt.png" alt="A diagram describing how dispatcher channel is used" width="880" height="537"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;break&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The operator &lt;code&gt;x, ok := &amp;lt;-ch&lt;/code&gt; is &lt;a href="https://go.dev/ref/spec#Receive_operator"&gt;receiver operator&lt;/a&gt;. The value of the receive operation &lt;code&gt;&amp;lt;-s.dispatcher&lt;/code&gt; is the value received from the channel &lt;code&gt;s.dispatcher&lt;/code&gt;. Also, the expression &lt;code&gt;&amp;lt;-&lt;/code&gt; blocks until a value is available, so waits until a connection request is sent by "Server" thread.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;ok&lt;/code&gt; is false if it is a zero value generated because the channel is closed or empty. In this case, that means server shutdowns.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPqgTALN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aacxr03gw3qo752gx3bs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPqgTALN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aacxr03gw3qo752gx3bs.png" alt="A diagram describing how dispatcher channel is used" width="880" height="519"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the other hand, the &lt;code&gt;/request/&lt;/code&gt; handler on the "Server" tread sends a value to this channel.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit): [1]: Receive requests to be proxied&lt;/span&gt;

    &lt;span class="c"&gt;// Here! Sends a value to dispatcher channel&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;NewConnectionRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The operator &lt;code&gt;ch &amp;lt;- x&lt;/code&gt; is &lt;a href="https://go.dev/ref/spec#Send_operator"&gt;send statements&lt;/a&gt;, which sends a value on a channel. Here it sends the request to the &lt;code&gt;dispatcher&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;By the way, the type of variable &lt;code&gt;request&lt;/code&gt; is &lt;a href="https://github.com/hgsgtk/wsp/blob/9d5deef64b859d74f58218c310069a965e658ec9/server/server.go#L51"&gt;ConnectionRequest&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;ConnectionRequest&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;After sending the value to the &lt;code&gt;s.dispatcher&lt;/code&gt; channel, it waits to be available to get the value in the &lt;code&gt;request.connection&lt;/code&gt; channel.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IQJfsGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buoin8b4n1pvx8md300y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IQJfsGht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/buoin8b4n1pvx8md300y.png" alt="A diagram describing how connection channel is used" width="880" height="706"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="c"&gt;// Here!&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, let's look at the "Dispatcher" thread.&lt;/p&gt;

&lt;p&gt;To summarize, "Server" thread sends the value to this channel when accepting requests in the endpoint /requests, and "dispatcher" thread reads this channel.&lt;/p&gt;

&lt;p&gt;Let's move on the implementation of &lt;a href="https://github.com/hgsgtk/wsp/blob/9d5deef64b859d74f58218c310069a965e658ec9/server/server.go#L140"&gt;dispatchConnections&lt;/a&gt; function that starts a "dispatcher" thread.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;Server&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;

    &lt;span class="c"&gt;// Through dispatcher channel it communicates between "server" thread and "dispatcher" thread.&lt;/span&gt;
    &lt;span class="c"&gt;// "server" thread sends the value to this channel when accepting requests in the endpoint /requests, &lt;/span&gt;
    &lt;span class="c"&gt;// and "dispatcher" thread reads this channel.&lt;/span&gt;
    &lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="k"&gt;chan&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ConnectionRequest&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;dispatchConnections&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// Runs in an infinite loop and keeps receiving the value from the `server.dispatcher` channel&lt;/span&gt;
        &lt;span class="c"&gt;// The operator &amp;lt;- is "receive operator", which expression blocks until a value is available.&lt;/span&gt;
        &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c"&gt;// The value of `ok` is false if it is a zero value generated because the channel is closed an empty.&lt;/span&gt;
            &lt;span class="c"&gt;// In this case, that means server shutdowns.&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// A timeout is set for each dispatch request.&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// The timeout elapses&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;
            &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// Go through&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RLock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// No connection pool available&lt;/span&gt;
                &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RUnlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c"&gt;// [1]: Select a pool which has an idle connection&lt;/span&gt;
            &lt;span class="c"&gt;// Build a select statement dynamically to handle an arbitrary number of pools.&lt;/span&gt;
            &lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectRecv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;Chan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectDefault&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RUnlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="c"&gt;// a pool has been removed, try again&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;// [2]: Verify that we can use this connection and take it.&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;First, dispatchConnections runs in an infinite loop and keeps receiving the value from the &lt;code&gt;server.dispatcher&lt;/code&gt; channel.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt;
    &lt;span class="c"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The next step is to set the timeout, if no idle connection is obtained after a predetermined time, the channel will be closed.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// A timeout is set for each dispatch request.&lt;/span&gt;
&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WithTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetTimeout&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// The timeout elapses&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;
        &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="c"&gt;// Go through&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c"&gt;// ...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;When the channel is closed, a receive operation on a closed channel can always proceed immediately, yielding the element type's zero value after any previously sent values have been received (See &lt;a href="https://go.dev/ref/spec#Receive_operator"&gt;The Go Programming Language Specification#Receive operator&lt;/a&gt; more detail). In this case, the "Server" thread waits to receive the value, and will get nil from request.connection channel, so the "Server" will return the error response.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ResponseWriter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// (omit)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dispatcher&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;

    &lt;span class="c"&gt;// Here!&lt;/span&gt;
    &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;wsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ProxyErrorf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Unable to get a proxy connection"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Also, if you want to know more about timeout using the context package, please refer to the following post.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/timeout-using-context-package-in-go-1b3c" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Timeout using context package in Go&lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi „Éª Dec 28 „Éª 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Then, Select a pool which has an idle connection by building a select statement dynamically to handle an arbitrary number of pools.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;cases&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;make&lt;/span&gt;&lt;span class="p"&gt;([]&lt;/span&gt;&lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ch&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pools&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectRecv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Chan&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ValueOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ch&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;idle&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectCase&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Dir&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SelectDefault&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RUnlock&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;reflect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ok&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;continue&lt;/span&gt; &lt;span class="c"&gt;// a pool has been removed, try again&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://pkg.go.dev/reflect#Select"&gt;reflect.Select&lt;/a&gt; allows us to receive a variable number of channels. See the following post for more information.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/hgsgtk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4fiWd75c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bSqJvDso--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/720068/2aaac932-cc7d-4d7b-88a0-a1a09290e523.jpeg" alt="hgsgtk"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/hgsgtk/handling-with-arbitrary-channels-by-reflectselect-4d5g" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Handling with arbitrary channels by reflect.Select &lt;/h2&gt;
      &lt;h3&gt;Kazuki Higashiguchi „Éª Dec 28 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;Lastly, Verify that we can use this connection and take it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Take&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;
    &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;connection.Take&lt;/code&gt; verify the status of connection whether it's available one or not, then if it's available one, mark it busy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fRp7vnEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4hv4vrgexyuta605s7w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fRp7vnEv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g4hv4vrgexyuta605s7w.png" alt="A diagram describing how connection channel is used" width="880" height="716"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it to take a WebSocket connection available from pools for relaying received requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Following &lt;a href="https://dev.to/hgsgtk/reverse-http-proxy-over-websocket-in-go-part-3-2ggd"&gt;part 3&lt;/a&gt;, I explained how to relay TCP connection from "App" to the peer of WebSocket. Especially, I focused on the way to take a WebSocket connection available from pools for relaying received requests.&lt;/p&gt;

&lt;p&gt;In part 5, I'll explain how to send the request to the peer through the WebSocket connection.&lt;/p&gt;

</description>
      <category>go</category>
      <category>webdev</category>
      <category>websocket</category>
    </item>
    <item>
      <title>Git Commands Cheatsheet: Beginners (18-20+ basic Git Commands)
</title>
      <author>aashiya123</author>
      <pubDate>Tue, 28 Dec 2021 05:41:38 +0000</pubDate>
      <link>https://dev.to/aashiya123/git-commands-cheatsheet-beginners-18-20-basic-git-commands-2b4c</link>
      <guid>https://dev.to/aashiya123/git-commands-cheatsheet-beginners-18-20-basic-git-commands-2b4c</guid>
      <description>&lt;p&gt;Git is a free and open-source distributed version control system that handles every change within the project. Git software runs on the local machine to keep track of the files and their history. You can also use Git‚Äôs online hosts to store files. It also allows you to have a centralized place to store files to ensure easy access. With Git, you can easily make parallel changes that can be merged later without any issue.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Features of Git&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It allows you to track history.&lt;/li&gt;
&lt;li&gt;It is a free and open-source distributed version control system.&lt;/li&gt;
&lt;li&gt;It supports non-linear development.&lt;/li&gt;
&lt;li&gt;It allows you to create backups.&lt;/li&gt;
&lt;li&gt;You can scale it according to your business needs.&lt;/li&gt;
&lt;li&gt;It enhances team collaboration.&lt;/li&gt;
&lt;li&gt;It ensures easy branching.&lt;/li&gt;
&lt;li&gt;It supports distributed development.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*&lt;em&gt;Git workflow *&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git workflow has three different stages-&lt;/li&gt;
&lt;li&gt;Working directory- it allows you to alter the files and codes within your working directory.&lt;/li&gt;
&lt;li&gt;Staging area- it allows you to stage the files and add their snapshots to the staging area.&lt;/li&gt;
&lt;li&gt;Git directory or repository- it allows you to commit the modification permanently.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Basic Git commands&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Creating a repository&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Creating a new local repository from scratch&lt;br&gt;
$ git init [project name]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Downloading from an existing repository&lt;br&gt;
$ git clone my_url&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Observing your repository&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Listing new or modified files that are not being committed yet.&lt;br&gt;
$ git status&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Displaying the file changes that are not being staged&lt;br&gt;
$ git diff&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display the change to the staged files&lt;br&gt;
$ git diff --cached&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display all the staged and unstaged file changes&lt;br&gt;
$ git diff HEAD&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display the differences between two commit ids&lt;br&gt;
$ git diff commit1 commit2&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Listing the dates and the author of the changed file&lt;br&gt;
$ git blame [file]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display the file changes for a particular id or a file&lt;br&gt;
$ git show [commit]:[file]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Display the complete change history&lt;br&gt;
$ git log&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will display the change history for a particular file or a directory&lt;br&gt;
$ git log -p [file/directory]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Working with branches&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It will display all the local branches&lt;br&gt;
$ git branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will display all the local as well as the remote branches&lt;br&gt;
$ git branch -av&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will switch to a branch and will update the working directory accordingly&lt;br&gt;
$ git checkout my_branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will create a new branch named new_branch&lt;br&gt;
$ git branch new_branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will delete the branch named my_branch&lt;br&gt;
$ git branch -d my_branch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will merge two branches, branch_a, and branch_b&lt;br&gt;
$ git checkout branch_b &lt;br&gt;
$ git merge branch_a&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will tag the current commit.&lt;br&gt;
$ git tag my_tag&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Making changes&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To stage the file and ready to commit&lt;br&gt;
$ git add [file]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will stage all the changed file and ready to commit&lt;br&gt;
$ git add . &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will commit all the staged files to the versioned history&lt;br&gt;
$ git commit -m ‚Äúcommit message‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will commit all the tracked file to the versioned history&lt;br&gt;
$ git commit -am ‚Äúcommit message‚Äù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will unstage the file and keep the file changes&lt;br&gt;
$ git reset [file]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will revert everything to the last commit&lt;br&gt;
$ git reset --hard&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Synchronize&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It will get the latest changes from the origin&lt;br&gt;
$ git fetch&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will fetch the latest changes from the origin and merge&lt;br&gt;
$ git pull&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will fetch the latest changes from the origin and rebase&lt;br&gt;
$ git pull --rebase&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will push the local changes to the origin&lt;br&gt;
$ git push&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Help command&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the git help command for more details
$ git command --help&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>javascript</category>
      <category>devops</category>
    </item>
    <item>
      <title>Basic HTML Tags Pt: 1</title>
      <author>Oscar Ortiz</author>
      <pubDate>Tue, 28 Dec 2021 05:25:55 +0000</pubDate>
      <link>https://dev.to/cleveroscar/basic-html-tags-pt-1-2km9</link>
      <guid>https://dev.to/cleveroscar/basic-html-tags-pt-1-2km9</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;By the end of this article you will get a grasp of the most commonly used tags in the HTML language. I myself find myself using these tags just about every time I am writing any Front-End code. At some point they will become muscle memory as you won't have to keep going back and forth on searching what tags are meant for what. The purpose of this guide is to help you understand HTML from a beginner's prospective. Please feel free to leave any feedback or questions in the comments and I will do my best to respond to them as soon as I can.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#heading"&gt;Headings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#paragraphs"&gt;Paragraphs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#format"&gt;Format&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#breaks"&gt;Line Breaks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When it comes to HTML elements, a few are very commonly used and should be considered to get comfortable with them as we will be using them a lot in our web developing career. Do not get discouraged if you ever see something new that you have never seen before. The only way to get better at something new is by simply redoing or trying new things to understand better. So please make sure to take your time and go at your own pace when following along. We will be going over a few HTML tags that we should be comfortable using since they are commonly used on every HTML document. Let us get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#headings"&gt;
  &lt;/a&gt;
  Headings &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We've all seen headings! Every page will usually have some type of heading tag on the page. When it comes to headings we can think of them as titles for our sections. There are six levels of headings so that means we have six heading tags to work with, all having their own size and reasoning. Here is a list of our heading tags. The order they go is from biggest to smallest.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt; &amp;lt;/h1&amp;gt; // Biggest heading size
&amp;lt;h2&amp;gt; &amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt; &amp;lt;/h3&amp;gt;
&amp;lt;h4&amp;gt; &amp;lt;/h4&amp;gt;
&amp;lt;h5&amp;gt; &amp;lt;/h5&amp;gt;
&amp;lt;h6&amp;gt; &amp;lt;/h6&amp;gt; // Smallest Heading size
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we search things on the web, our heading tags help search engines identify key words inside our web pages to help users find our website. Search Engine key words are very important as they help bring traffic into your site so there are some practices to follow when it comes to using our heading tags.&lt;/p&gt;

&lt;p&gt;It is recommended that we only use one &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag inside our html file as this would identify as the whole pages' purpose. When users search your page, they usually skim through it quickly to see if they find what they are looking for. So using headings will help you target your users and help them locate sections in your page quickly. So make sure to pick the right heading size when trying to make a title pop. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paragraphs"&gt;
  &lt;/a&gt;
  Paragraphs &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The most commonly used HTML tag would probably be the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag, since this defines our &lt;strong&gt;paragraphs&lt;/strong&gt; or any &lt;strong&gt;words&lt;/strong&gt; wrapped between it. Here is a quick example of using the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt; Our p tag will define this as a paragraph on the browser &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Surrounding our text inside of our &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag will tell the browser the type of markup style we are trying to use for the user. This tag is used just about everywhere when it comes to displaying text.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#text-formatting"&gt;
  &lt;/a&gt;
  Text Formatting &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There are a few tags that provide additional styles to our text if we are ever trying to get a different feel for our readers. We can surround our text with a few tags that can help us achieve this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;b&amp;gt; - Bold text
&amp;lt;strong&amp;gt; - Important text
&amp;lt;i&amp;gt; - Italic text
&amp;lt;em&amp;gt; - Emphasized text
&amp;lt;mark&amp;gt; - Marked text
&amp;lt;small&amp;gt; - Smaller text
&amp;lt;del&amp;gt; - Deleted text
&amp;lt;ins&amp;gt; - Inserted text
&amp;lt;sub&amp;gt; - Subscript text
&amp;lt;sup&amp;gt; - Superscript text
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXOufVEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s8tthheni5eaglzfmg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXOufVEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5s8tthheni5eaglzfmg9.png" alt="example" width="171" height="210"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;p&amp;gt; &amp;lt;b&amp;gt; - Bold text &amp;lt;/b&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;strong&amp;gt; - Important text &amp;lt;/strong&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;i&amp;gt; - Italic text &amp;lt;/i&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;em&amp;gt; - Emphasized text &amp;lt;/em&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;mark&amp;gt; - Marked text &amp;lt;/mark&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;small&amp;gt; - Smaller text &amp;lt;/smaller&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;del&amp;gt; - Deleted text &amp;lt;/del&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;ins&amp;gt; - Inserted text &amp;lt;/ins&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;sub&amp;gt; - Subscript text &amp;lt;/sub&amp;gt; &amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt; &amp;lt;sup&amp;gt; - Superscript text &amp;lt;/sup&amp;gt; &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, these tags are able to be wrapped within other tags. Allowing us to define text meaning just about anywhere.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#line-breaks"&gt;
  &lt;/a&gt;
  Line Breaks &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There are few ways to create space inside our html file. When ever we try to add a new tag, our browser automatically adds that tag onto a new line. When ever we need to divide our sections on our html with a simple line we can add a &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; tag which will create a &lt;code&gt;thematic break&lt;/code&gt; or in other words changing the subject. Here is a quick example of it in use. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0lOMOfzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kvs8v9b3mrpwbj86cbj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0lOMOfzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3kvs8v9b3mrpwbj86cbj.png" alt="Break" width="880" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are just trying to create a new line instead of dividing sections, for example when writing a poem. We can use our &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag to create a &lt;code&gt;break&lt;/code&gt; line. This can come in handy sometimes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;h1&amp;gt;The br element&amp;lt;/h1&amp;gt;

&amp;lt;p&amp;gt;To force&amp;lt;br&amp;gt; line breaks&amp;lt;br&amp;gt; in a text,&amp;lt;br&amp;gt; use the br&amp;lt;br&amp;gt; element.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7u4apES7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rzwqdh9a4jph0t103j2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7u4apES7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rzwqdh9a4jph0t103j2.png" alt="break example" width="318" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Something if you havent noticed is that these tags are known as &lt;code&gt;empty&lt;/code&gt; tags where as you don't need to have a closing tag right after the opening tag. There are only a few tags that have this feature so be sure to do some research when using empty tags. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;I hope by the end of this article you managed to learn how to create and understood what is going on in every line of code. It is very important to understand how your code fully works, not only does it help you become a better developer but can also help you use the tools you are working with more efficient.&lt;/p&gt;

&lt;p&gt;These articles are mostly intended for personal use on becoming a better programmer, writer, and grow my programming skills. Feel free to drop any feedback or corrections that you believe that should be made to help me and others. Thank you for your time for sticking this far!&lt;/p&gt;

</description>
      <category>html</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Fetch-API</title>
      <author>Prince Verma</author>
      <pubDate>Tue, 28 Dec 2021 05:16:30 +0000</pubDate>
      <link>https://dev.to/vermaprince123/fetch-api-1nfo</link>
      <guid>https://dev.to/vermaprince123/fetch-api-1nfo</guid>
      <description>&lt;p&gt;Create own API and fetch data with the help of JavaScript with node JavaScript !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4gCf5KDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h44m272z4mnmkdfrit9q.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4gCf5KDN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h44m272z4mnmkdfrit9q.PNG" alt="Image description" width="879" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>Speed Up Your Laravel website Super Fast</title>
      <author>Ashish Yadav</author>
      <pubDate>Tue, 28 Dec 2021 04:27:32 +0000</pubDate>
      <link>https://dev.to/expoashish/speed-up-your-laravel-website-super-fast-1acg</link>
      <guid>https://dev.to/expoashish/speed-up-your-laravel-website-super-fast-1acg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#speed-up-your-laravel-website-super-fast"&gt;
  &lt;/a&gt;
  Speed Up Your Laravel website Super Fast
&lt;/h2&gt;

&lt;p&gt;In this blog we are going to discuss how to speed up laravel website super fast. We have mentioned some tips and tricks, follow these things to make your laravel app super fast. If you like my post then follow me. Lets Start:-üëá&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/speed-up-your-laravel-website-super-fast.html"&gt;Speed Up Your Laravel website Super Fast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-programming-languages-you-must.html"&gt;Top 10 Programming Languages You Must Know In 2022&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-free-blogging-sites-in-2022.html"&gt;Best Websites for Blogging&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-roadmap-2022"&gt;
  &lt;/a&gt;
  Complete Roadmap 2022:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-python-programming.html"&gt;Python Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-machine-learning.html"&gt;Machine Learning Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-c-programming.html"&gt;C++ Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/java-complete-roadmap-2022.html"&gt;Java Complete Roadmap 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/complete-roadmap-of-data-structure.html"&gt;Data Structure Complete Roadmap 2022&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-laravel-tutorial-for-developer"&gt;
  &lt;/a&gt;
  Some Laravel Tutorial for developer:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #1)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-8-interview-questions-and_22.html"&gt;Laravel 8 Interview Questions and Answers in 2022 (Part #2)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/advance-laravel-8-interview-questions.html"&gt;Advance Laravel 8 Interview Questions and Answers 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/everything-about-laravel-8-composer.html"&gt;Everything About Laravel 8 Composer 2022 | Composer in Laravel 8&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/laravel-jetstream-vs-laravel-ui-vs.html"&gt;Laravel Jetstream vs Laravel ui  vs Breeze&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-10-reasons-why-laravel-is-most.html"&gt;Top 10 Reasons Why Laravel Is The Most Popular PHP Framework&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/speed-up-your-laravel-website-super-fast.html"&gt;Speed Up Your Laravel website Super Fast&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#python-concept-and-projects"&gt;
  &lt;/a&gt;
  Python Concept and Projects:-
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/2021/12/10-best-python-libraries-for-machine.html"&gt;10 Best Python Libraries For Machine Learning&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/07/alarm-clock-in-python-with-gui.html"&gt;Alarm Clock in Python with GUI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/top-5-python-frameworks-for-game.html"&gt;Top 5 Python Frameworks for Game development 2022&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/06/tic-tac-toe-game-using-pygame-in-python.html"&gt;Tic Tac Toe Game Using Pygame in Python&lt;/a&gt;&lt;br&gt;
&lt;a href="https://codexashish.blogspot.com/2021/12/what-is-pykyra-in-python-programming.html"&gt;What is Pykyra in Python Programming?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou for reading my blogs.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#my-website"&gt;
  &lt;/a&gt;
  My Website:
&lt;/h5&gt;

&lt;p&gt;&lt;a href="https://codexashish.blogspot.com/"&gt;CodexAshish&lt;/a&gt;&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Frontend Developer Resources 2022</title>
      <author>Nick Taylor</author>
      <pubDate>Tue, 28 Dec 2021 04:16:47 +0000</pubDate>
      <link>https://dev.to/nickytonline/frontend-developer-resources-2022-4cp2</link>
      <guid>https://dev.to/nickytonline/frontend-developer-resources-2022-4cp2</guid>
      <description>&lt;p&gt;I don't know if I'll keep doing this every year, but I did one of these in 2020 and that post got some good signal, so I renamed it to Frontend Developer Resources 2020 which brings us to Frontend Developer Resources 2022. Oops, I missed 2021. Technically we're still in 2021, but humour me. üòé&lt;/p&gt;

&lt;p&gt;This is not a complete list, more a list of stuff I found compelling in 2021 that will keep you set in 2022 and on and builds off of my previous list. You may see some repeats in here from my previous post, but that's only because they're still super relevant.&lt;/p&gt;

&lt;p&gt;Most resources are free, but some are paid. I also highly recommend an &lt;a href="https://egghead.io"&gt;egghead.io&lt;/a&gt; subscription. I've been a happy subscriber for quite a while now.&lt;/p&gt;

&lt;p&gt;If you have an educational stipend, I highly recommend egghead. Also, a lot of public libraries give you access for free to paid resources like LinkedIn Learning. Check out your local library before purchasing certain content. Also, just a huge shoutout to public libraries. üòé&lt;/p&gt;

&lt;p&gt;I work with Preact in my day to day and I also work with React. There are obviously other libraries and frameworks out there, but I'm going to veer away from all that in this post. The only mention I'll make is in the browser extensions section.&lt;/p&gt;

&lt;p&gt;This is a work in progress, so expect this list to be updated over the course of 2022.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;Regardless of whether or not you start with a library or framework, at some point as a frontend developer, you will need to understand JavaScript in more depth. Here's some good resources to get you there.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript30.com"&gt;JavaScript 30&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jskatas.org"&gt;JavaScript Katas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.patterns.dev"&gt;patterns.dev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NCoLlNTN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FHCMlpYVcAA_VxN.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--tgNdW7xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1471646681082990593/DBu9tgLk_normal.jpg" alt="Addy Osmani profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Addy Osmani
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/addyosmani"&gt;@addyosmani&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Introducing "Learning Patterns": &lt;a href="https://t.co/qNsCE9tsIF"&gt;patterns.dev&lt;/a&gt; - a free 435+ page book on JavaScript + React design &amp;amp; performance patterns from &lt;a href="https://twitter.com/lydiahallie"&gt;@lydiahallie&lt;/a&gt; and I. On the web, ePub &amp;amp; PDF. 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      07:36 AM - 20 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1472833175923478531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1472833175923478531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1472833175923478531" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/philip_roberts"&gt;Philip Roberts&lt;/a&gt; talk at JSConf EU "What the heck is the event loop anyway?" is a great explanation of the event loop.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8aGhZQkoFbQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/jaffathecake"&gt;Jake Archibald&lt;/a&gt;: In The Loop - JSConf.Asia&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cCOL7MC4Pl0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/"&gt;Tasks, microtasks, queues and schedules&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/lydiahallie/series/3341"&gt;Lydia Hallie's JavaScript Visualized series on DEV&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#typescript"&gt;
  &lt;/a&gt;
  TypeScript
&lt;/h2&gt;

&lt;p&gt;TypeScript is getting more and more popular every year. Even if you're not a fan of it, it's good to be at least aware of it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Anything by &lt;a href="https://mariusschulz.com"&gt;Marius Schulz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://egghead.io/courses/practical-advanced-typescript"&gt;Practical Advanced TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/orta/series/15226"&gt;The TypeScript teams 2021 type | treat series on DEV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/play"&gt;TypeScript Playground&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://typescriptcourses.com/typescript-fundamentals"&gt;Learn TypeScript from the Ground Up with James Henry&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h2&gt;

&lt;p&gt;Let's skip the centering jokes in CSS. We're in the 2020's now and this is something fairly easy to do nowadays. Dig in and level up on your CSS.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://piccalil.li/blog/a-modern-css-reset/"&gt;Andy Bell's Modern CSS Reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joshwcomeau.com/css/custom-css-reset/"&gt;Josh W. Comeau's CSS Reset&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.joshwcomeau.com/css/designing-shadows/"&gt;Designing Beautiful Shadows in CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-for-js.dev/"&gt;CSS for JavaScript Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gridbyexample.com"&gt;Grid by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cssgrid.io"&gt;cssgrid.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://moderncss.dev"&gt;Modern CSS Solutions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://smolcss.dev"&gt;SmolCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://every-layout.dev"&gt;Every Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/2021/05/complete-guide-css-container-queries"&gt;A Primer On CSS Container Queries&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://developer.mozilla.org/en-US/"&gt;MDN&lt;/a&gt; as always&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.htmhell.dev"&gt;HTMLHell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#accessibility"&gt;
  &lt;/a&gt;
  Accessibility
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webaim.org/resources/contrastchecker"&gt;WebAIM's contrast checker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://buttonbuddy.dev"&gt;ButtonBuddy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://inclusive-components.design"&gt;Inclusive Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/s_aitchison/5-things-i-m-thinking-about-when-i-check-a-pull-request-for-accessibility-3gmo"&gt;5 things I'm thinking about when I check a Pull Request for accessibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.forem.com/frontend/accessibility"&gt;Forem Developer documentation on Accessibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#animations"&gt;
  &lt;/a&gt;
  Animations
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://codepen.io/jh3y"&gt;Anything by Jhey Thompkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cassie.codes"&gt;Anything by Cassie Evans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;My co-worker &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt; is a whiz when it comes to animations as well. Check out her &lt;a href="https://codepen.io/cgorton/"&gt;codepen profile&lt;/a&gt; and &lt;a href="https://www.linkedin.com/learning/instructors/christina-gorton"&gt;LinkedIn courses&lt;/a&gt;. I've paired with her a bunch of times to learn about animations, so I can 100% guarantee that she knows what she's talking about.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#jamstack"&gt;
  &lt;/a&gt;
  Jamstack
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://explorers.netlify.com"&gt;Jamstack Explorers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jamstack.org"&gt;jamstack.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vercel.com/docs/concepts/next.js/incremental-static-regeneration"&gt;Incremental Static Regeneration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.netlify.com/blog/2021/04/14/distributed-persistent-rendering-a-new-jamstack-approach-for-faster-builds"&gt;Distributed Persistent Rendering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#browser-extensions"&gt;
  &lt;/a&gt;
  Browser Extensions
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://wave.webaim.org/extension"&gt;WAVE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.deque.com/axe/browser-extensions"&gt;axe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://accessibilityinsights.io/docs/en/web/overview/"&gt;Accessibility Insights for Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you're working with React: React DevTools (&lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"&gt;Chromium based browsers&lt;/a&gt; | &lt;a href="https://addons.mozilla.org/en-CA/firefox/addon/react-devtools"&gt;Firefox&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;If you're working with Preact: &lt;a href="https://preactjs.github.io/preact-devtools/"&gt;Preact DevTools&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chrome.google.com/webstore/detail/visbug/cdockenadnadldjbbgcallicgledbeoc?hl=en"&gt;VisBug&lt;/a&gt; (Chromium based browsers only)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;I'm a fan of Cypress and we use it at Forem (the software that powers dev.to). We've been building out our documentation over time, and I think it's a really great resource if you dive into end to end testing. Check out &lt;a href="https://developers.forem.com/tests/e2e-tests#writing-cypress-tests"&gt;Writing Cypress Tests&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Testing library's suite of tools. Whether it's component tests in React, Svelte, plain old HTML/CSS/JS or end to end testing, &lt;a href="https://testing-library.com/"&gt;Testing Library&lt;/a&gt; has you covered.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#cloud-idesfull-blown-development-environments"&gt;
  &lt;/a&gt;
  Cloud IDEs/full blown development environments
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gitpod.io"&gt;Gitpod&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vscode.dev"&gt;vscode.dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/codespaces"&gt;CodeSpaces&lt;/a&gt; (if you have access)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackblitz.com"&gt;Stackblitz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codesandbox.io"&gt;CodeSandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vscodetips.com"&gt;vscodetips.com&lt;/a&gt; ‚Äì a community discussing all things VS Code including cloud IDEs. Full disclosure that this is a shameless plug. It's a new community I started this year.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#tooling"&gt;
  &lt;/a&gt;
  Tooling
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Storybook ‚Äì &lt;a href="https://learnstorybook.com"&gt;learnstorybook.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;If you have Node.js installed and need to configure a JavaScript based project's gitignore file, from the root of the project run &lt;code&gt;npx gitgnore node&lt;/code&gt; (It works for other languages as well or if you omit the language, it will give you a list of all the supported gitignores)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://parceljs.org"&gt;Parcel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vitejs.dev"&gt;Vite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://turborepo.org"&gt;Turborepo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/swyx" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ojA0BfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HuQ70Dya--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/47766/26fbd2bf-c352-447c-9b4f-f66652dc4899.jpg" alt="swyx"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/swyx/why-turborepo-will-be-the-first-big-trend-of-2022-4gfj" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Why TurboRepo Will Be The First Big Trend of 2022&lt;/h2&gt;
      &lt;h3&gt;swyx „Éª Dec 27 „Éª 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#devtools&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#summaries&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#books"&gt;
  &lt;/a&gt;
  Books
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://jh3y.gumroad.com/l/move-things-with-css"&gt;Move Things With CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://typescript-book.com"&gt;TypeScript in 50 Lessons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://book.inclusive-components.design/"&gt;Inclusive Components: The Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#twitch-streams"&gt;
  &lt;/a&gt;
  Twitch Streams
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/trostcodes"&gt;TrostCodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/5t3phdev"&gt;Stephanie Eckles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/jh3yy"&gt;Jhey Tompkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/lunchdev"&gt;Michael Chan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/SomeAnticsDev"&gt;Ben Myers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.learnwithjason.dev"&gt;Learn with Jason&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm sure I've missed some stuff, but this is the initial brain dump. As mentioned at the beginning, I will update this over the coming year.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Blur Background Using CSS</title>
      <author>Hrushikesh41</author>
      <pubDate>Tue, 28 Dec 2021 04:07:24 +0000</pubDate>
      <link>https://dev.to/hrushikesh41/blur-background-using-css-3i3b</link>
      <guid>https://dev.to/hrushikesh41/blur-background-using-css-3i3b</guid>
      <description>&lt;p&gt;&lt;em&gt;This Post is Inspired By &lt;a href="https://www.youtube.com/channel/UCvM5YYWwfLwpcQgbRr68JLQ"&gt;Adrian Twarog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Blur Background in any website looks amazing and attractive to users. But ever wondered how this blur is made ? Well the answer is "Easy".&lt;/p&gt;

&lt;p&gt;Let's See how to make it.&lt;/p&gt;

&lt;p&gt;First we add an image in the background and then give our body as &lt;b&gt;display-flex&lt;/b&gt; . To set the blur effect in the center of image we give &lt;b&gt; justify-content and align-item &lt;/b&gt; as &lt;b&gt;center&lt;/b&gt; . &lt;/p&gt;

&lt;p&gt;Now the div on which we give blur effective is in the center of our page . to give the blur effect we use &lt;b&gt; backdrop-filter &lt;/b&gt; and give it as &lt;b&gt;blur&lt;/b&gt; . So that's it . Our blur is ready .&lt;/p&gt;

&lt;p&gt;Let's see our blur effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8rKMwtfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qj1i6zb5gj5o6ur737c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8rKMwtfN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qj1i6zb5gj5o6ur737c.png" alt="Image description" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now to enhance the content inside the blur I've added more styling. &lt;/p&gt;

&lt;p&gt;You can have a look on my code and practice it .&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hw0aC2ll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqctce0kg7vbro8cx6u4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hw0aC2ll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zqctce0kg7vbro8cx6u4.png" alt="Image description" width="880" height="699"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that's it in this post . You can see how easy it is to make and blur background . &lt;/p&gt;

&lt;p&gt;So meet you next post .&lt;br&gt;
Till then Happy Coding üë©‚Äçüíªüë©‚Äçüíªüë©‚Äçüíª&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>css</category>
    </item>
  </channel>
</rss>
