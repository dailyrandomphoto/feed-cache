<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>System Design- Tinder | Cost to develop | How to earn revenue</title>
      <author>mukulalpha</author>
      <pubDate>Fri, 10 Sep 2021 14:08:51 +0000</pubDate>
      <link>https://dev.to/mukulalpha/system-design-tinder-cost-to-develop-how-to-earn-revenue-4mno</link>
      <guid>https://dev.to/mukulalpha/system-design-tinder-cost-to-develop-how-to-earn-revenue-4mno</guid>
      <description>&lt;p&gt;In this article, we’ll look at the design / system architecture of dating apps like Tinder / Bumble / Happen/ OkCupid / Hinge. How much does it cost to develop a dating app like Tinder . To get started, let’s understand the app and the features that we will talk about in this article.&lt;/p&gt;

&lt;p&gt;This article mainly focuses on the architecture of Tinder.&lt;/p&gt;

&lt;p&gt;Tinder’s technology may look simple but when a user left or Right swipe in the app, and a match is found. But Behind the scenes, however, a giant infrastructure consisting of thousands of services and terabytes of data supports each and every swipe and match on the platform.&lt;/p&gt;

&lt;p&gt;What is Tinder?&lt;br&gt;
As the modern generation of young people embrace the dating lifestyle, the online dating segment continues to grow. It requires a special technological spark to cultivate the feeling of using such dating apps and achieve long-term use. With the transformation of dating apps, Tinder is a good example of how dating apps can be transformed into a highly profitable business. The Tinder dating app is different from all other types of dating apps because it has a high matching conversion rate. Because of its user-friendly features, it is a hot topic among the younger generation. You can select your communication partner by swiping. When this sliding is mutual, communication opens a two-way channel. Hence, developing a dating app like Tinder is the same thing as developing a relationship, and it takes time and investment to make it unique.&lt;/p&gt;

&lt;p&gt;The uniqueness of the tinder applies to the geographical proximity as the key aspect and makes it for individuals smoother to produce with other individuals of their preferences. You can simply view the possible matches and left(NO) or right (yes), initiates the process. The app analyzes user data with geographic locations, mutual friends or similar interests. The users must call their age and gender to the individual, with which they use a tinder to inform the other users with the same interests in their environment.&lt;/p&gt;

&lt;p&gt;In Short Tinder is a social dating mobile app designed by UX / UI designers that allows individuals to search and find the right person to connect with the right person through assistance. Support for chat options is consolidated within the app. Sign In to Tinder app requires Facebook login so location and interests are used to find the right person. Users can make their profile look exciting by adding extra details and descriptions to their profile.&lt;/p&gt;

&lt;p&gt;SCALE at which TINDER operates:&lt;br&gt;
57+ million members&lt;br&gt;
12+ million active users&lt;br&gt;
55+ Billion matches&lt;br&gt;
100+ Million downloads&lt;br&gt;
1.8 billion swipes every day (left swipe, right swipe, super like)&lt;br&gt;
40+ Language support&lt;/p&gt;

&lt;p&gt;Design needs to be scalable to support 57+ million userbases. Tinder supports more than 40+ languages, which means that users are spread all over the world. Hence, this cannot be a simple application hosted on a single continent, but needs to be well distributed to provide the best performance to all users worldwide.&lt;/p&gt;

&lt;p&gt;Tinder is entirely hosted in the AWS Cloud. There are no web applications other than IOS and Android. Tinder uses AWS amplify to develop and test mobile applications, MongoDB for DB and Redis for caching and in-memory databases.&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;p&gt;Login using OAuth (Facebook)- The method of logging in via Facebook or phone number is very simple. The dating app algorithm extracts basic user information from Facebook, skipping the same old methods of filling out forms and creating personal profiles.&lt;/p&gt;

&lt;p&gt;Swipes (Left, Right)- Swipe may be a distinctive sense resolution. This feature is designed to improve the method of finding dates. Swiping to the right means you like it, and swiping to the left means you don’t like it. The swipe option interface makes online dating clearer and more exciting.&lt;/p&gt;

&lt;p&gt;Matching- The users would be obligated to acknowledge if they need some match for the appliance. This shall support them to approach different users whom they like. Also, pairs facilitate in monitoring that the two users have joined to each other with their agreement. Also, the feature includes un-matching that the user isn’t any longer fascinated by communicating. This supports system in avoiding negative spamming, stalking, etc.&lt;/p&gt;

&lt;p&gt;chat- In order to talk to each other, candidates need to establish a means of communication with one another. Basics would be to possess a 1 to 1 chat messenger where they will send text messages, audio call or video call through the application.&lt;/p&gt;

&lt;p&gt;push notification- The users are notified on a real-time basis just in case the person is found nearby their set criteria.&lt;/p&gt;

&lt;p&gt;super likes- The user can swipe up or send a heart or a rose(different application provide different methods of super like) to other profile to prioritize them in the selection queue.&lt;/p&gt;

&lt;p&gt;Recommendation Engine&lt;/p&gt;

&lt;p&gt;An engine which provides several hundreds/thousands of profile when a person logs into the Tinder .&lt;/p&gt;

&lt;p&gt;let’s talk about the features of the recommendation algorithm that tinder is using.&lt;/p&gt;

&lt;p&gt;Tag Collecting: When a person performs OAuth using FB, Tinder collects a lot of important information like location, age, distance, gender preferences, places they’ve visited, likes, dislikes, etc. It also extracts a lot of information from photos and what we write in our profile to better match.&lt;/p&gt;

&lt;p&gt;Cluster User Base: when a person enters / logs in to Tinder, they get a random point from Tinder and based on that point they fall into some basket, let’s say we have a basket from 1 to 10, this grouping helps to select these people. people in basket 1 prefer more / match people from buckets 1, 2 and 3. This is mainly due to the high probability of matching based on your likes and people who have similar tastes.&lt;/p&gt;

&lt;p&gt;Active Use: Tinder’s main goal is to connect people, establish meaningful relationships, so if one of the parties is inactive, it doesn’t add up to Tinder’s main goal. Therefore, it is important to know how actively the person is using the app.&lt;/p&gt;

&lt;p&gt;Your pickiness/Bad actors: If one is doing too much of right swipe, it’s bad, you may not be shown recommendation of other people. Also if one is not doing left swipe at all, still one is not gonna shown in the recommendation of others, as they are not contributing towards the objective of this dating application.&lt;/p&gt;

&lt;p&gt;Do you reply? : How willingly a person is replying after a match. If the user don’t engage in longer conversation or messages are not exchanged than those profiles are penalized and not shown in recommendation of other people.&lt;/p&gt;

&lt;p&gt;Progressive taxation: If one is getting too much of matches/attention, to make it fair for others, Tinder normalizes this by not showing that profile to many other users. At the same time, if someone is not getting much attention, tinder starts bringing that profile to other users.&lt;/p&gt;

&lt;p&gt;Recommendation Engine properties:&lt;br&gt;
This recommendation engine brings up the profile of other people based on the above-mentioned points.&lt;/p&gt;

&lt;p&gt;Low latency: When a person logs in to the application, we need to load profiles/potential matches profiles real quickly. Therefore, our Recommendation Engine needs to have low latency(able to load profile faster).&lt;/p&gt;

&lt;p&gt;Not real-time: It’s okay if it’s not real-time ie if someone newly joins tinder it’s okay if it takes some time to show this person’s profile on other accounts.&lt;/p&gt;

&lt;p&gt;Easy to shard/distributed: Since we have tons of profiles from across the globe, this recommendation engine should be able to shard the data as we can’t keep it in one system.&lt;/p&gt;

&lt;p&gt;Full-text search: we need to search through the whole profile of an individual considering different parameters ( location, age, distance, gender preferences)to provide better recommendations.&lt;/p&gt;

&lt;p&gt;HTTP interface: or web socket to get the data and send it to the application.&lt;/p&gt;

&lt;p&gt;Structure data: XML/JSON&lt;/p&gt;

&lt;p&gt;What Tinder uses for storing and searching through data is “Elastic search” which is basically a search system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0sPfxR8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5itwy1nl9qlrumnjhpmi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0sPfxR8h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5itwy1nl9qlrumnjhpmi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Initially tinder was started with one cluster and couple of shards but after gaining popularity they did distributed system.&lt;br&gt;
Elasticsearch is able to achieve fast search responses because, instead of searching the text directly, it searches an index instead. Additionally, it supports full-text search which is completely based on documents instead of tables or schemas.&lt;/p&gt;

&lt;p&gt;Data are clustered for a given location. The whole point of dating apps is to meet people in real. If I am a user from location X, India, I will obviously like to get a match with someone who is from location X + (10 -50km) depends of users preference. So, how to achieve this?&lt;/p&gt;

&lt;p&gt;How to shard data to make elastic search queries faster?&lt;/p&gt;

&lt;p&gt;Shard the data by geographical location.!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lidcgeji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hbprt74i281mxbsmg7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lidcgeji--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4hbprt74i281mxbsmg7k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We here are dividing the whole world map into small boxes. We can place each server in these boxes to serve any requests originating from these boxes (ie particular lat-log within that box) will get served by servers in that location ( Ideally these servers can be at any physical location, but for each of these boxes/cells, there is one designated server). Now there are certain boxes where the population is high, there one server won’t be able to serve all the requests.&lt;/p&gt;

&lt;p&gt;So how can we divide the world into boxes and distribute the load across our servers?&lt;/p&gt;

&lt;p&gt;The size of the boxes in different areas is determined by Unique user count, active user count and query count from these regions. These points decides the size of the box/cell.&lt;/p&gt;

&lt;p&gt;We have to find a balance score on the basis of the above factors to get the optimal size of the box/cell (for which we use Google s2 library to save these cells) and see the latency/performance for that area.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PjilDa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxguxm0xs3t7kh0hybw0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PjilDa0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dxguxm0xs3t7kh0hybw0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whenever a person wants to open tinder, his phone makes a query to a system .This system is basically a mapper system which based on the lat-log of the user gives information to the application/user that all of your data is stored on which server. This server is the server where users information lies as well as this can be the server where user’s potential matches lies. As mentioned before servers can be in any physical location, but all the data belongs to that particular cell will reside on that one server.&lt;/p&gt;

&lt;p&gt;Now consider this above map, let’s concentrate on cells 1,2,3,4 and 5. Information belongs to there cells will be store on ser1,ser2,ser3,ser4 and ser5.&lt;/p&gt;

&lt;p&gt;So if a Tinder user is residing at cell 3 and has set range as 50 km i.e user want to know all potential matches within 50 km range from user’s location. The radius of 50 km includes all these cells from cell 1 to cell 5. Mapper will know to query data from all the cells which rely in 50 km range and gather recommendation&lt;/p&gt;

&lt;p&gt;That’s how recommendation works on Geosharding.&lt;/p&gt;

&lt;p&gt;1) Recommendation Engine:&lt;/p&gt;

&lt;p&gt;As soon as the new user sign-in to the tinder app using FB OAuth, his profile details go to the ES feeder service using HTTP/ WebSocket. A copy will be store in DB also (by user creation service which adds it to the persistence) and another copy to the elastic search as we need a fast search for the recommendation. Kafka consumes these messages as need to index these data asynchronously.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xM1nCNcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwqhgvmffsualla8gip4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xM1nCNcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gwqhgvmffsualla8gip4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ES workers pick up the message and send it to the location to the cell mapper which uses the s2 library and has lat-long information. It returns the shard to which this information was written. The ES Worker then notifies the ES, and uses the ES API to write the information to that particular shard.&lt;/p&gt;

&lt;p&gt;User information is now saved in Elastic search and he is now ready to do left/right swipe. Then it calls the recommendation engine and which in turn call to the location to cell mapper again with lat log and it returns multiple shards to which it makes parallel calls to Shards and gets couples of documents/profile and send them via HTTP / web sockets .Now all the profiles are being rendered to the user and he’s ready for left/right swipe.&lt;/p&gt;

&lt;p&gt;2) MATCHMAKING:&lt;br&gt;
Let’s consider that there are two profiles X and Y&lt;/p&gt;

&lt;p&gt;There can be three situations possible:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;X and Y right-swipe each other at the same time.&lt;/li&gt;
&lt;li&gt;X does right swipe to Y and Y doesn’t.&lt;/li&gt;
&lt;li&gt;Y does right swipe X and X doesn’t until now.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are millions of matches that occur every day. We can have one matching service one cell or We can group couple of cells together with one matchmaking service. so there will be couple of matchmaking service up and running (there will be lots of queries for recommendation queries so to balance out queries per location) and each matchmaking service belongs to couple of cells instead of just one cell as was in case of geosharding. Match also works in the same manner. Match won’t happen between countries, It will happen in the cell where a profile is recommended to a user.&lt;/p&gt;

&lt;p&gt;For eg if we recommend 100 profiles to user, chances are there will be on an average 20/30 swipes, so we don’t need one matchmaking service per cell.&lt;/p&gt;

&lt;p&gt;Whenever a user do the right swipe, a message is send to the matchmaking service preferably by web socket, where the location manager determines to which shard or matchmaking service this message will go, and redirects message to the gateway, which connects to Kafka. The message is now in the queue. Depending on the number of shards we have got as a result form location manager service, there will be one or many matchmaking services to which this information will be broadcasted to. Information captured here is who is right swiping whom, location, and other metadata. There can be parallel workers which keep reading message coming from the Kafka queue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qwBWJS75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzjfubmqxq75jf17cgxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qwBWJS75--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzjfubmqxq75jf17cgxx.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If X happens to right swipe Y , then an entry like “X_Y” enters into Redis and leaves it as it is. Now when Y right swipe X , then again the same process happens, match worker picks the message and checks in Redis weather “X has ever right-swiped Y’ i.e we will definitely find key “X_Y” and check for the metadata, which means a match has happened and message will enter in the matched queue which gets picked by match notification and through web socket sends it to both X and Y saying “It’s a match”.&lt;/p&gt;

&lt;p&gt;If for some reason, X has never right swiped Y then what will happen? Then just a record “Y_X” will enter into Redis and that’s it. when X right swipe back Y then before adding the key it will check for the key.&lt;/p&gt;

&lt;p&gt;3) Passport Feature:&lt;br&gt;
When a user moves from one Region/location to another (could be travelling or moving to different places). This could be happening with in the city, state or country. When user open the app from new location a request is send to the server and with the help of the location mapper Data of the user from previous location cell’s shard if transferred to new Location cell’s shard.&lt;/p&gt;

&lt;p&gt;User login + profile for tinder&lt;br&gt;
We already know the ES stores user info, that is already geosharded .why don’t we just have one more API expose from ES to provide specific user profile info. The only optimization we can do is to have one more layer of cache in form of ES so that we can have better performance. We can store user-related info in a database as well. We can have RDBMS as we won’t have too many of records also it needs to be geosharded. so if geosharding is taken care of, we can have our details in RDBMS. We can also link order table info with the user table. We can also opt for NoSQL as it’s auto sharding, it automatically scales itself. We can go with MongoDB as well as it provides ACID property and sharding by geo.&lt;/p&gt;

&lt;p&gt;How to enable user login? A user can log in using FB OAuth by registering our application in FB API. We can get lots of information like places user has ever visited, likes, dislikes, close friends ,etc. As Tinder wants to build relationship app, we need to have legitimate profile and decide should we really need to show this profile to other or not. We don’t need to implement sessions in here. Since we are trying to write an app in native android or apple SDK, we don’t need to have sessions all we need to maintain is authentication token.&lt;/p&gt;

&lt;p&gt;MONITORING:&lt;br&gt;
Without monitoring, we don’t know what’s happening with our system and also to check system performance and SLA compliance. One such tool is Prometheus which provides features like altering, write queries, and also stores time series data.&lt;/p&gt;

&lt;p&gt;It can be used to monitor the application ,collect logs and monitor system’s performance. All the user events get forwarded to Kafka which then gets read by Prometheus where we write aggregators to identify latency in any geoshard(for eg: Suddenly our app will get trending by one tweet and lots of users start login in, traffic increase in that geo shard — ASG). All these information gets captured in dashboard.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c18JNinB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zakstdvh4kuqjx631rp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c18JNinB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zakstdvh4kuqjx631rp1.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Kafka is like an event sink where we can push any kind of data which internally has lots of topics and we can read it at Prometheus. The same system can leverage to consume other logs which generated by other application and these files get read by filebeat or logstash and get forwards to Kafka and can use the same system to track system performance.&lt;/p&gt;

&lt;p&gt;Filebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to Elasticsearch or Logstash for indexing.&lt;/p&gt;

&lt;p&gt;Content moderation:&lt;br&gt;
Constantly keeping eye on content. For eg : one can use celeb pictures or write bad status what if everyone is doing this and tinder is not suppressing this, then engagement goes down. Therefore, moderating content is important.&lt;br&gt;
How to achieve this?&lt;/p&gt;

&lt;p&gt;Every action performed by an user is an event, like user updates the picture, updates the status or does a left/right swipe, these event needs to get pushed in event sink and get stored in persistence. There we need to use some technology like map-reduce or Kafka streams or spark to get the useful info from event run Machine Learning algorithm on recent changes to check if the profile pic is user’s profile pic or is copied/using celeb pic, No swipe, only right swipe. We need to detect all these event, we also need to keep an eye on the rate at which the user is doing the right swipe, whether he’s really reading it, or blindly doing the right swipe.&lt;/p&gt;

&lt;p&gt;How to make an app like Tinder?&lt;br&gt;
When researching how to make a dating app like Tinder, you need to understand its exciting features. In addition to the simple registration and geolocation functions, there are also some exciting features, such as rewind options, super likes, unlimited rights swipes, and change location according to subscription plans. There are some other additional features, such as in-app purchases, social media integration, prevention of abuse and uncensored content, anonymous users, and matching suggestions using advanced matching formulas.&lt;/p&gt;

&lt;p&gt;How much money do dating apps make?&lt;br&gt;
If you are thinking — “how to make money on a dating app?”, then you have to look at the options below:&lt;/p&gt;

&lt;p&gt;In-app purchases: In-app purchase is a regular way of earning profits employed by different types of apps by offering additional features. The same trend has been employed by tinder to offer additional features like icons, emoji, etc. This trend has been successful across mobile apps of different niches. Features can only be unlocked when users pay the fixed amount and subscribe to the plan.&lt;/p&gt;

&lt;p&gt;Subscriptions: This is an option to give a scheduled trial period for users and charge a fixed subscription fee after the completion of the trial period for using the services. This is a highly used method for earning through the apps.&lt;/p&gt;

&lt;p&gt;Tinder Plus: It is helpful for users who want to subscribe to the freemium model that offers extra options. Tinder app allows the users to start free for certain periods and then charges for using its extra features like a change of location, unlimited swipes, etc. The subscription plans are divided into two parts namely Tinder Plus and Tinder basic.&lt;/p&gt;

&lt;p&gt;Tinder plus consists of all the exciting features that will make the users excited once they know the usefulness of the app. If you are looking to build a similar dating app like tinder, then it is wiser to follow the same trend and make all the exciting features chargeable after a scheduled trial period. Tinder has also differentiated the costs depending on the age of the user.&lt;/p&gt;

&lt;p&gt;Tinder gold: This plan is exclusively for new members of the app and varies according to the age group of the users.&lt;/p&gt;

&lt;p&gt;Sponsored content: Many business enthusiasts have partnered with Tinder to present their sponsored content to the users.&lt;/p&gt;

&lt;p&gt;Profile Lift: Tinder asks for a fixed amount from the users to boost the profiles to the top that will enhance the profile views along with some additional features.&lt;/p&gt;

&lt;p&gt;Ads: Ads are given to third party agencies for marketing on the apps. This will be useful for other business owners to show their products or services while giving you good profits.&lt;/p&gt;

&lt;p&gt;How much does it cost to make a dating app?&lt;br&gt;
The cost of developing a dating app significantly depends upon important factors like app size, app platform (Native or Cross-platform), design elements. level of functionality enclosed in it. Incorporating the fundamental above features may decrease your investment value. however, incorporating further functionalities could need additional funds and development costs&lt;/p&gt;

&lt;p&gt;In this article we’ve discussed the design architecture of Tinder with Recommendation Engine , Geosharding , Matchmaking Engine User profile + login and content moderation. Factors to keep in mind while developing a dating app and ways to earn revenue…&lt;/p&gt;

&lt;p&gt;Stay connected for more content like this&lt;/p&gt;

</description>
      <category>programming</category>
      <category>architecture</category>
      <category>webdev</category>
      <category>android</category>
    </item>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 10th September 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 10 Sep 2021 13:52:07 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-10th-september-2021-3jm3</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-10th-september-2021-3jm3</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-ultra"&gt;
  &lt;/a&gt;
  1. Ultra
&lt;/h3&gt;

&lt;p&gt;Deno + React: No build, no bundle, all streaming&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/exhibitionist-digital"&gt;
        exhibitionist-digital
      &lt;/a&gt; / &lt;a href="https://github.com/exhibitionist-digital/ultra"&gt;
        ultra
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🦕 Deno + React: No build, no bundle, all streaming
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;br&gt;
  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/ac900236c1cc4ca5ed749e8bf519206ddb3dd1949a4158d0e5158af474bea011/68747470733a2f2f647765622e6c696e6b2f697066732f6261666b7265696168366c79716c746a7a6d716167676e3369616e673673697037746e626f74767879716567367a6772656d3677716e696567666d"&gt;&lt;img src="https://camo.githubusercontent.com/ac900236c1cc4ca5ed749e8bf519206ddb3dd1949a4158d0e5158af474bea011/68747470733a2f2f647765622e6c696e6b2f697066732f6261666b7265696168366c79716c746a7a6d716167676e3369616e673673697037746e626f74767879716567367a6772656d3677716e696567666d" height="250"&gt;&lt;/a&gt;
  &lt;h1&gt;
Ultra&lt;/h1&gt;
  &lt;strong&gt;Deno + React: No build, no bundle, all streaming&lt;/strong&gt;
  &lt;br&gt;&lt;br&gt;
&lt;p&gt;&lt;a href="https://github.com/exhibitionist-digital/ultra/actions"&gt;&lt;img src="https://camo.githubusercontent.com/bdc5c3e54910621fa2d44dd58187842b446a238a8892248f24d607a37db917b1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f776f726b666c6f772f7374617475732f65786869626974696f6e6973742d6469676974616c2f756c7472612f666d742532302b2532306c696e743f7374796c653d666f722d7468652d626164676526636f6c6f723d353341334433266c6f676f3d676974687562266c6162656c3d" alt="GitHub Workflow Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Ultra&lt;/strong&gt; is a web framework that leans hard into your browser's native
features. Embrace the future of &lt;strong&gt;ES Modules&lt;/strong&gt;, &lt;strong&gt;Import Maps&lt;/strong&gt;, and &lt;strong&gt;Web
Streams&lt;/strong&gt;. All while supporting some of the non-standards that many normal
people love for some reason (&lt;strong&gt;JSX&lt;/strong&gt; and &lt;strong&gt;TypeScript&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;It's driven by the following hot-takes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;ESM&lt;/strong&gt; is non-negotiable in {currentYear}&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;SSR&lt;/strong&gt; is non-negotiable in {currentYear}&lt;/li&gt;
&lt;li&gt;Bundling is an &lt;strong&gt;anti-pattern&lt;/strong&gt; in {currentYear}&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data can be requested anywhere, and is accessible on the server, always&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Lazy routing with dynamic imports&lt;/strong&gt; trumps FS routing&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Less magic&lt;/strong&gt; in tooling and frameworks is a good thing&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Simplify&lt;/strong&gt; your workflow and tech stack at all costs - life is too short&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Streams&lt;/strong&gt; are neat&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The following is built around the &lt;em&gt;alpha&lt;/em&gt; version of
&lt;a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html" rel="nofollow"&gt;React 18&lt;/a&gt;
Mileage may vary.&lt;/p&gt;
&lt;p&gt;Here are some neat demos:&lt;/p&gt;
&lt;h3&gt;
👩‍🚀👨‍🚀 React&lt;/h3&gt;…&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/exhibitionist-digital/ultra"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-gitleaks"&gt;
  &lt;/a&gt;
  2. Gitleaks
&lt;/h3&gt;

&lt;p&gt;Gitleaks is a SAST tool for detecting hardcoded secrets like passwords, api keys, and tokens in git repos. Gitleaks is an easy-to-use, all-in-one solution for finding secrets, past or present, in your code.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/zricethezav"&gt;
        zricethezav
      &lt;/a&gt; / &lt;a href="https://github.com/zricethezav/gitleaks"&gt;
        gitleaks
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Scan git repos (or files) for secrets using regex and entropy 🔑
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;○
│╲
│ ○
○ ░
░    gitleaks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
      &lt;a href="https://github.com/zricethezav/gitleaks/actions/workflows/test.yml"&gt;
          &lt;img alt="Github Test" src="https://res.cloudinary.com/practicaldev/image/fetch/s--l2aywiVG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/zricethezav/gitleaks/actions/workflows/test.yml/badge.svg"&gt;
      &lt;/a&gt;
      &lt;a href="https://hub.docker.com/r/zricethezav/gitleaks" rel="nofollow"&gt;
          &lt;img src="https://camo.githubusercontent.com/7353032c2428668bec4a75a38aa0e3fcd6cf200a7236863a0962d771ea5f9dcb/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f7a726963657468657a61762f6769746c65616b732e737667"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/follow?screen_name=zricethezav" rel="nofollow"&gt;
          &lt;img src="https://camo.githubusercontent.com/f8dc356cec48a695a4aa8b319d9d629fff1b1c70fb117892e1e9db4fa76eb2c4/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f7a726963657468657a61763f6c6162656c3d466f6c6c6f772532307a726963657468657a6176267374796c653d736f6369616c26636f6c6f723d626c7565" alt="Follow @zricethezav"&gt;
      &lt;/a&gt;
  &lt;/p&gt;
&lt;p&gt;Gitleaks is a SAST tool for detecting hardcoded secrets like passwords, api keys, and tokens in git repos. Gitleaks is an &lt;strong&gt;easy-to-use, all-in-one solution&lt;/strong&gt; for finding secrets, past or present, in your code.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://www.youtube.com/watch?v=VUq2eII20S4" rel="nofollow"&gt;Introduction Video&lt;/a&gt;
&lt;/h3&gt;
&lt;h3&gt;
Features:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Scan for &lt;a href="https://github.com/zricethezav/gitleaks#Scanning"&gt;commited&lt;/a&gt; secrets&lt;/li&gt;
&lt;li&gt;Scan for &lt;a href="https://github.com/zricethezav/gitleaks#scan-unstaged-changes"&gt;unstaged&lt;/a&gt; secrets to shift security left&lt;/li&gt;
&lt;li&gt;Scan &lt;a href="https://github.com/zricethezav/gitleaks#scan-local-directory"&gt;directories and files&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;a href="https://github.com/marketplace/actions/gitleaks"&gt;Gitleaks Action&lt;/a&gt; in your CI/CD pipeline&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zricethezav/gitleaks#configuration"&gt;Custom rules&lt;/a&gt; via toml configuration&lt;/li&gt;
&lt;li&gt;Increased performance using &lt;a href="https://github.com/go-git/go-git"&gt;go-git&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;json, sarif, and csv reporting&lt;/li&gt;
&lt;li&gt;Private repo scans using key or password based authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Installation&lt;/h3&gt;
&lt;p&gt;Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the &lt;a href="https://github.com/zricethezav/gitleaks/releases"&gt;releases page&lt;/a&gt;. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo.&lt;/p&gt;
&lt;h5&gt;
MacOS&lt;/h5&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;brew install gitleaks&lt;/pre&gt;

&lt;/div&gt;
&lt;h5&gt;
Docker&lt;/h5&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To just pull the image&lt;/span&gt;
docker pull zricethezav/gitleaks:latest
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; To run&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/zricethezav/gitleaks"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-replace-jquery"&gt;
  &lt;/a&gt;
  3. Replace jQuery
&lt;/h3&gt;

&lt;p&gt;Automatically finds jQuery methods from existing projects and generates vanilla js alternatives.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sachinchoolur"&gt;
        sachinchoolur
      &lt;/a&gt; / &lt;a href="https://github.com/sachinchoolur/replace-jquery"&gt;
        replace-jquery
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Automatically finds jQuery methods from existing projects and generates vanilla js alternatives.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="MD"&gt;
&lt;h4&gt;
Test coverage&lt;/h4&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Statements&lt;/th&gt;
&lt;th&gt;Functions&lt;/th&gt;
&lt;th&gt;Lines&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c8b6ad8e3c05f81ec56631bdf7a730b823375e8778558754e615959f3796568d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73746174656d656e74732d39392e36342532352d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/c8b6ad8e3c05f81ec56631bdf7a730b823375e8778558754e615959f3796568d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f73746174656d656e74732d39392e36342532352d627269676874677265656e2e737667" alt="Statements"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6dc380dac518f3ab0d2407a0752792e56f934d5ac8341443144c31f3ce6ce3df/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f66756e6374696f6e732d3130302532352d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/6dc380dac518f3ab0d2407a0752792e56f934d5ac8341443144c31f3ce6ce3df/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f66756e6374696f6e732d3130302532352d627269676874677265656e2e737667" alt="Functions"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c1cd4792bea5b3b42aed87adbe6a6ed4e8c1be63ea1b239c039fc5457da13680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c696e65732d3130302532352d627269676874677265656e2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/c1cd4792bea5b3b42aed87adbe6a6ed4e8c1be63ea1b239c039fc5457da13680/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c696e65732d3130302532352d627269676874677265656e2e737667" alt="Lines"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h1&gt;
Automatically replace jQuery&lt;/h1&gt;
&lt;p&gt;Automatically find jQuery methods from existing projects and generate vanilla js alternatives.&lt;/p&gt;

  
    

    &lt;span class="m-1"&gt;demo.mp4&lt;/span&gt;
  
  

  


&lt;h2&gt;
Why&lt;/h2&gt;
&lt;p&gt;I've been working on removing jQuery dependency from multiple projects including &lt;a href="https://github.com/sachinchoolur/lightGallery"&gt;lightGallery&lt;/a&gt; lately. Most of the projects use only 15% to 20% or less than 30% of the jquery methods
And in most of the cases, I didn't want to support all the edge cases or legacy browsers. The hardest part was finding the jQuery methods in the existing project and writing the alternative vanilla js methods without making much changes in the codebase. So I wrote this library which automatically finds jquery methods in any particular JavaScript file and generates readable, chainable vanilla js alternatives. This can also be useful if you want to generate your own utility methods similar to jQuery.&lt;/p&gt;
&lt;h2&gt;
Installation and Usage&lt;/h2&gt;
&lt;p&gt;You can install replace-jQuery using npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm install -g replace-jquery&lt;/pre&gt;

&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Find all…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sachinchoolur/replace-jquery"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-lottie"&gt;
  &lt;/a&gt;
  4. Lottie
&lt;/h3&gt;

&lt;p&gt;Render After Effects animations natively on Web, Android and iOS, and React Native.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/airbnb"&gt;
        airbnb
      &lt;/a&gt; / &lt;a href="https://github.com/airbnb/lottie-web"&gt;
        lottie-web
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Render After Effects animations natively on Web, Android and iOS, and React Native. http://airbnb.io/lottie/
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Lottie for Web, &lt;a href="https://github.com/airbnb/lottie-android"&gt;Android&lt;/a&gt;, &lt;a href="https://github.com/airbnb/lottie-ios"&gt;iOS&lt;/a&gt;, &lt;a href="https://github.com/airbnb/lottie-react-native"&gt;React Native&lt;/a&gt;, and &lt;a href="https://aka.ms/lottie" rel="nofollow"&gt;Windows&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;Lottie is a mobile library for Web,  and iOS that parses &lt;a href="http://www.adobe.com/products/aftereffects.html" rel="nofollow"&gt;Adobe After Effects&lt;/a&gt; animations exported as json with &lt;a href="https://github.com/airbnb/lottie-web"&gt;Bodymovin&lt;/a&gt; and renders them natively on mobile!&lt;/p&gt;
&lt;p&gt;For the first time, designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating it by hand. They say a picture is worth 1,000 words so here are 13,000:&lt;/p&gt;
&lt;h1&gt;
View documentation, FAQ, help, examples, and more at &lt;a href="http://airbnb.io/lottie/" rel="nofollow"&gt;airbnb.io/lottie&lt;/a&gt;
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/airbnb/lottie-webgifs/Example1.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wEX1NtkC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/airbnb/lottie-webgifs/Example1.gif" alt="Example1"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/airbnb/lottie-webgifs/Example2.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h2LvTS1S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/airbnb/lottie-webgifs/Example2.gif" alt="Example2"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/airbnb/lottie-webgifs/Example3.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rNb_2xlp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/airbnb/lottie-webgifs/Example3.gif" alt="Example3"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/airbnb/lottie-webgifs/Community%202_3.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C1iNFeaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/airbnb/lottie-webgifs/Community%25202_3.gif" alt="Community"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/airbnb/lottie-webgifs/Example4.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g24cXe2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/airbnb/lottie-webgifs/Example4.gif" alt="Example4"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Plugin installation&lt;/h1&gt;
&lt;h3&gt;
Option 1 (Recommended):&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Download it from from aescripts + aeplugins:&lt;/strong&gt;
&lt;a href="http://aescripts.com/bodymovin/" rel="nofollow"&gt;http://aescripts.com/bodymovin/&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Option 2:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Or get it from the adobe store&lt;/strong&gt;
&lt;a href="https://creative.adobe.com/addons/products/12557" rel="nofollow"&gt;https://creative.adobe.com/addons/products/12557&lt;/a&gt;
CC 2014 and up.&lt;/p&gt;
&lt;h2&gt;
Other installation options:&lt;/h2&gt;
&lt;h3&gt;
Option 3:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;download the ZIP from the repo.&lt;/li&gt;
&lt;li&gt;Extract content and get the .zxp file from '/build/extension'&lt;/li&gt;
&lt;li&gt;Use the &lt;a href="http://aescripts.com/learn/zxp-installer/" rel="nofollow"&gt;ZXP installer&lt;/a&gt; from aescripts.com.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
Option 4:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Close After Effects&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extract the zipped file on &lt;code&gt;build/extension/bodymovin.zxp&lt;/code&gt; to the adobe CEP folder:&lt;br&gt;
WINDOWS:&lt;br&gt;
&lt;code&gt;C:\Program Files&lt;/code&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/airbnb/lottie-web"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#5-lumen"&gt;
  &lt;/a&gt;
  5. Lumen
&lt;/h3&gt;

&lt;p&gt;A constantly evolving and thoughtful architecture for creating new static blogs.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/alxshelepenok"&gt;
        alxshelepenok
      &lt;/a&gt; / &lt;a href="https://github.com/alxshelepenok/gatsby-starter-lumen"&gt;
        gatsby-starter-lumen
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A constantly evolving and thoughtful architecture for creating static blogs.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
    &lt;a rel="noopener noreferrer" href="https://github.com/alxshelepenok/gatsby-starter-lumen/blob/gatsby-v2/.github/logo.png"&gt;&lt;img alt="Lumen" title="Lumen" src="https://res.cloudinary.com/practicaldev/image/fetch/s--7-xa2wX3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/alxshelepenok/gatsby-starter-lumen/raw/gatsby-v2/.github/logo.png" width="140"&gt;&lt;/a&gt; &lt;br&gt;
    Lumen
&lt;/h1&gt;
&lt;h4&gt;
  A constantly evolving and thoughtful architecture for creating new static blogs
&lt;/h4&gt;
&lt;p&gt;
    &lt;a href="https://circleci.com/gh/alxshelepenok/gatsby-starter-lumen" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/112af4cb5effc40edbb491122b5e4db52dc87ffee5fac4aaf6771851a412272a/68747470733a2f2f636972636c6563692e636f6d2f67682f616c787368656c6570656e6f6b2f6761747362792d737461727465722d6c756d656e2e7376673f7374796c653d737667"&gt;&lt;/a&gt; &lt;a href="https://codecov.io/gh/alxshelepenok/gatsby-starter-lumen" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/34f28a673b9ff5ef28d8560bd11f755cc8678ced94116bc1bf072bf7c55733e0/68747470733a2f2f636f6465636f762e696f2f67682f616c787368656c6570656e6f6b2f6761747362792d737461727465722d6c756d656e2f6272616e63682f6d61737465722f67726170682f62616467652e737667"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/gh/alxshelepenok/gatsby-starter-lumen/dashboard?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=alxshelepenok/gatsby-starter-lumen&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/43e49e5f24bfa7ad8e0eb16176f79f2b29389027e89ef3f4f181042930eeddc7/68747470733a2f2f6170702e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3264323132333565333665333462373538616161323766656364336338303438"&gt;&lt;/a&gt; &lt;a href="https://codeclimate.com/github/alxshelepenok/gatsby-starter-lumen" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6257044183d4a55c64742bf81d7883d6d586f060fe079d395d431e1afeefcbb3/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f6d61696e7461696e6162696c6974792f616c787368656c6570656e6f6b2f6761747362792d737461727465722d6c756d656e2e737667"&gt;&lt;/a&gt; &lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Falxshelepenok%2Fgatsby-starter-lumen?ref=badge_shield" alt="FOSSA Status" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/b6420506bb099a8d14d95375dd798856478f7498325a73cac0371235831b5499/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f6769742532426769746875622e636f6d253246616c787368656c6570656e6f6b2532466761747362792d737461727465722d6c756d656e2e7376673f747970653d736869656c64"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Table of contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#web-performance-tests"&gt;Web Performance Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#quick-start"&gt;Quick Start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#deploy-with-netlify"&gt;Deploy with Netlify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#folder-structure"&gt;Folder Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#sponsors"&gt;Sponsors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#contributors"&gt;Contributors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://github.com/alxshelepenok/gatsby-starter-lumen#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://lostgrid.org" rel="nofollow"&gt;Lost Grid&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://bitsofco.de/the-new-system-font-stack" rel="nofollow"&gt;Modern font stack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Beautiful typography inspired by &lt;a href="https://github.com/matejlatin/Gutenberg"&gt;matejlatin/Gutenberg&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Syntax highlighting in code blocks using &lt;a href="http://prismjs.com" rel="nofollow"&gt;PrismJS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/@mrmrs_/mobile-first-css-48bc4cc3f60f" rel="nofollow"&gt;Mobile-First&lt;/a&gt; approach in development.&lt;/li&gt;
&lt;li&gt;Archive organized by tags and categories.&lt;/li&gt;
&lt;li&gt;Pagination support.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.netlifycms.org" rel="nofollow"&gt;Netlify CMS&lt;/a&gt; support.&lt;/li&gt;
&lt;li&gt;Google Analytics.&lt;/li&gt;
&lt;li&gt;Disqus Comments.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://flow.org/" rel="nofollow"&gt;Flow&lt;/a&gt; static type checking.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Web Performance Tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Lighthouse Report - &lt;a href="https://www.webpagetest.org/result/190510_FE_3f2b13d0beed320f477467d433f56f43/" rel="nofollow"&gt;WebPageTest&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Visual Comparison - &lt;a href="https://www.webpagetest.org/video/compare.php?tests=190510_KZ_1228c343ccf04148619a5d0b89a41f71,190510_RE_b3bfad442f32c690a9f420fe46025b8d,190510_RS_3b5f0bff2d95161351dc6934cadbf1cf,190510_SC_5c458c451941f81b12911ccf4171a817,190510_63_52d5edd8743773815fbacb2e9c66d228,190510_AS_741b29f5af5a6e54980d82826d7bb5bb" rel="nofollow"&gt;WebPageTest&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Quick Start&lt;/h2&gt;

&lt;h4&gt;
Create a Gatsby site&lt;/h4&gt;
&lt;p&gt;Use the Gatsby CLI to create a new site, specifying the Lumen starter.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; Create a new Gatsby site using the Lumen starter&lt;/span&gt;
gatsby new blog https://github.com/alxshelepenok/gatsby-starter-lumen&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
Start Developing&lt;/h4&gt;
&lt;p&gt;Navigate into your new site’s directory and start it up.&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; blog
gatsby develop&lt;/pre&gt;

&lt;/div&gt;
&lt;h4&gt;
Open the source code and start editing!&lt;/h4&gt;
&lt;p&gt;Your site is now running at &lt;code&gt;http://localhost:8000&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Note…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/alxshelepenok/gatsby-starter-lumen"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-tonic"&gt;
  &lt;/a&gt;
  6. Tonic
&lt;/h3&gt;

&lt;p&gt;A Low Profile Component Framework. Stable, Minimal, Auditable, and Build-Tool-Free.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/optoolco"&gt;
        optoolco
      &lt;/a&gt; / &lt;a href="https://github.com/optoolco/tonic"&gt;
        tonic
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A Low Profile Component Framework. Stable, Minimal, Auditable, and Build-Tool-Free.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/heapwolf/tonic/master/readme-tonic.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ONYZMRod--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/heapwolf/tonic/master/readme-tonic.png" alt="tonic"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://tonicframework.dev" rel="nofollow"&gt;https://tonicframework.dev&lt;/a&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/optoolco/tonic"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-reakit"&gt;
  &lt;/a&gt;
  7. Reakit
&lt;/h3&gt;

&lt;p&gt;Toolkit for building accessible rich web apps with React&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/reakit"&gt;
        reakit
      &lt;/a&gt; / &lt;a href="https://github.com/reakit/reakit"&gt;
        reakit
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Toolkit for building accessible rich web apps with React
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://github.com/reakit/reakit/tree/master/logo"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0nuM9DPV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/3068563/55114952-118f6b00-50c2-11e9-8879-d047e5686284.png" alt="Reakit symbol" width="80"&gt;
  &lt;/a&gt;
&lt;/p&gt;
&lt;h1&gt;
Reakit&lt;/h1&gt;
&lt;p&gt;
  Toolkit for building &lt;a href="https://reakit.io/docs/accessibility" rel="nofollow"&gt;accessible&lt;/a&gt; rich web apps with &lt;a href="https://reactjs.org" rel="nofollow"&gt;React&lt;/a&gt;
  &lt;br&gt;
  &lt;a href="https://reakit.io" rel="nofollow"&gt;&lt;strong&gt;Explore website »&lt;/strong&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;
  &lt;a href="https://npmjs.org/package/reakit" rel="nofollow"&gt;&lt;img alt="NPM version" src="https://camo.githubusercontent.com/c38f6ededd3cb79bad9525da39e7afb02510990a1bc22e0ab9175d91cc9c08c2/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f7265616b69742e737667"&gt;&lt;/a&gt;
  &lt;a href="https://npmjs.org/package/reakit" rel="nofollow"&gt;&lt;img alt="NPM downloads" src="https://camo.githubusercontent.com/aecf61ff747c3473703be3fd504cc5b6ea5ec0edb0974beeb562f913867d682f/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f7265616b69742e737667"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/reakit/reakit/actions"&gt;&lt;img alt="Build Status" src="https://res.cloudinary.com/practicaldev/image/fetch/s---EBIuQTr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/reakit/reakit/workflows/ci/badge.svg%3Fevent%3Dpush%26branch%3Dmaster"&gt;&lt;/a&gt;
  &lt;a href="https://codecov.io/gh/reakit/reakit" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5e23fc2c3ba992cb89b60cc815ee3342544c26642e322908177ec50dfb655010/68747470733a2f2f636f6465636f762e696f2f67682f7265616b69742f7265616b69742f6272616e63682f6d61737465722f67726170682f62616467652e737667"&gt;&lt;/a&gt;&lt;br&gt;
  &lt;a href="https://opencollective.com/reakit" rel="nofollow"&gt;&lt;img alt="Sponsors" src="https://camo.githubusercontent.com/4eff10180f1e60a90c0b1e5d53bff40c7a08fae2834037e0d4dba091308da599/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f62616467652e7376673f6c6162656c3d73706f6e736f7273"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit" rel="nofollow"&gt;&lt;img alt="Backers" src="https://camo.githubusercontent.com/265a9a06f9af7449ac6eaf127d70a5e70bdfd283fc32e3bca2fee475ac8d8d25/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f62616467652e7376673f6c6162656c3d6261636b657273"&gt;&lt;/a&gt;
  &lt;a href="https://twitter.com/reakitjs" rel="nofollow"&gt;
    &lt;img alt="Follow Reakit on Twitter" src="https://camo.githubusercontent.com/eef3a40a3144da3a1aeb598041a1f2f7c2e221427c9fc3c958ab9f6581642ad4/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f7265616b69746a732e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Sponsors&lt;/h2&gt;
&lt;p&gt;By donating $100 or more you &lt;a href="https://opencollective.com/reakit" rel="nofollow"&gt;become a sponsor&lt;/a&gt; and help in the development of this project. Thank you to all our sponsors! 🙏&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/0/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8cc1bb3da0739752f4df596c5328e0102b69478936853da93382ba5ab6c98fe6/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f302f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/1/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a27bd0e304499ca8526ac49ed28fcbbfefa01642780e78fb4bd308d0e54140f7/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f312f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/2/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/72be2f55fd06cadaf888f4bb9eaadc43333140e3d0c6199a571d33f4b7419f85/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f322f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/3/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/cd6628814b9700bcddf0aff2d6e26040c1cf3d348c3e5d8f8731e790e01800fa/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f332f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/4/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/72ad5b26219e0b30c5d22cbd4d8f8606dc68adceec35faa97e592463371174e0/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f342f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/5/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e6866229974499a7aff6ebeee780118a465656f0efd86f2c6cb845d9c9307464/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f352f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/6/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a63ee2da1523c4c72dac09dbde96a253e8fc368e1161042537df24637017caf3/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f362f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/7/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/50a62a39b23a09496275e5fef32aa553c05ed9f1b010aef0743ba21db5164b14/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f372f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/8/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2e6304bca9677ef3843a71b1f7aa0598b47ef51021f6758c496e3d63cc3e3a78/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f382f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/sponsor/9/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/79bb49f96bcff811de08128733d693d5e339555ff029e9a8f20fc89cfa998f1e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f73706f6e736f722f392f6176617461722e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Backers&lt;/h2&gt;
&lt;p&gt;By donating $5 or more you &lt;a href="https://opencollective.com/reakit" rel="nofollow"&gt;become a backer&lt;/a&gt; and help in the development of this project. Thank you to all our backers! 🙏&lt;/p&gt;
&lt;p&gt;
  &lt;a href="https://opencollective.com/reakit/backer/0/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d021de3e46e7362481fbce0406ee4ae7c2d43fdd656a313684a4d7330dde13c/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f302f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/1/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/4e1150bd2c41ab1275a14313933c7774be605e6e25947140fb4efce6a1f4d373/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f312f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/2/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/af77df5f1e80adc935974ae35e080dbda2a2bf6e1fe4db962032e8421084e6f4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f322f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/3/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fc67eee66a9811d24ce281f0e8290a5c3d29ea6c74b209a57f064c33802ac3d3/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f332f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/4/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c8842dbf3177686000e389e07476573f091b8497319f892fc2292f9eabd091f5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f342f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/5/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/996c0c78a9b3702040fce07af41ac008684d053d68c3d87c4e82ed87894a73e5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f352f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/6/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/83bc29beaeec799909325ba0a4ee9c618a38a1092183512a81b4b8a8a2359a4b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f362f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/7/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/431d118d6f69203cb68fa2776983ac47acd98a1774cb99f117f16173f168df26/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f372f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/8/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fb364d3bf35dfcfc98789790b70b0be7b5a25779e5ec8fa0e41066315dbb53c8/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f382f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/9/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f2732f233c2482e799425569ccf1404732d87b3d6f92165b2660370b4b308f8e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f392f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/10/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/88a1a54ad8218d2e5beeee8dafac4dc1cc627b92df96494cdffbadadd03919dc/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31302f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/11/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/1c74ec0c36aa1d56ed32194a1c9cd0c3e7de49f9144ac1cfaaadb31c1ffd57fb/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31312f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/12/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5972297ffd698bb3bafa43c2315c09ed6010d8ed5ea0e7a294bb9ed75a766c0b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31322f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/13/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78763b8c1d4b0032209864da7dcc416abb4c3ab51e2e0d818d9dc24efea53200/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31332f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/14/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/156b1798a87aff1e4b3c4b374b0cf87aaa525009125eb5da07886742600a91c4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31342f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/15/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/183a142042993ec1d0fc0ec7664a4d9c10c65b9d626cf249a993a3e8b4650194/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31352f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/16/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/78a84d496f53bb1168ca18990102cfd0e6f2a91984be9940f9ee903166dd32dc/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31362f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/17/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6001dc09c46b74f7662bd0e39728e291f13dd76f1b442f08c24b9493b647993b/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31372f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/18/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c38653853d9ad195140de5d1a50b209c1a98c3dba34a93317413f5355c8cfea5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31382f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/19/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a753c7cd514fe209b4198ff5712a1895697afce57ff582dc17206af32b1112af/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f31392f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/20/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/94d44397fbf62890af5ea0f39b1b56f991fe3caf8c54a8d9703d69428f3fa2b6/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32302f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/21/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f283b08d827172b0206d2ee95aa14c87e1f00c82e134f736ff450d6a04817da4/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32312f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/22/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2878e767b6a90adb327ee950de09761c60572d790bc5c405527fa47dd6cf9c42/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32322f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/23/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/748b8b89b5c57e54cd61fe5ab3d4e3ffc9943ffe27d33084693fc04126e22104/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32332f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/24/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/beab694083a57429e5f6675c027d1781aa42990b7ab4c57d2f35a3c735ba93f3/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32342f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/25/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fd6b719af2840d31188da54e45afacb54b8c773c466d85afb54c5c6857a3f553/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32352f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/26/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/acb75ccf726248d89352d812f7770a1cafc4728c2c331d603e4a06f1db1c1a58/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32362f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/27/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/6287718e7ef8a0c57500b3222f0f9b9fb092deea479994d00dceedfcdfa8cc80/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32372f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/28/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7fc44bea9df301087dc9aa09423f1473e3e847ad9d984c8c0ea1c99f8ba2f3a0/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32382f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/29/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/84745db0db9f529c594e3bf23c3ba44cd17e7cfc67785eb906e773d822ee488e/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f32392f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/30/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/55c05d3b8eff869e0629ee3c144b5c7f6c827ce74727267fdf71e0932bd848ca/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33302f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/31/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/971fdb573c2c11d10bac739468b745e57b49925786de7d6f2bdb4ec3cc483815/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33312f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/32/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2adabac7378b3044b09e1210e48e4b471a9fa8bdd7f6e4a376152fb6b865974f/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33322f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/33/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/34686fdabad19ebf7d4d482cf14ab39b904228940dae90b23fdcaa44d9a0e208/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33332f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/34/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f984ca67f94787221ab9ad1dfe255343a3059fce8a430c4f8cf9bebc925174a5/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33342f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/35/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ad3f8c7392ab6b016b6347e625e250bc2e39166f96205838c677c87839d529dd/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33352f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/36/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/34fefbc695da7047b17d67af02fd685544aa13880c212b2244dc2ac1364c6043/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33362f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/37/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/968d911e0e6435987b6c63827d2b974a709757dc3aadc1c1dbd165a8119b4cbc/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33372f6176617461722e737667"&gt;&lt;/a&gt;
  &lt;a href="https://opencollective.com/reakit/backer/38/website" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/93812c03f0e4f7578fd3b06beaa7499106690c4fc149918a7f168a8033fd93d9/68747470733a2f2f6f70656e636f6c6c6563746976652e636f6d2f7265616b69742f6261636b65722f33382f6176617461722e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;p&gt;npm:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;npm i reakit&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Yarn:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative js-code-highlight"&gt;
&lt;pre&gt;yarn add reakit&lt;/pre&gt;

&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/nosebit"&gt;@nosebit&lt;/a&gt; for the package name on npm.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;React&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"react"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-v"&gt;ReactDOM&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"react-dom"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;useDialogState&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;Dialog&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-v"&gt;DialogDisclosure&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;"reakit"&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;function&lt;/span&gt; &lt;span class="pl-v"&gt;App&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;dialog&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;useDialogState&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-k"&gt;return&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;
    &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;div&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;DialogDisclosure&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;...&lt;span class="pl-s1"&gt;dialog&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;Open dialog&lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;DialogDisclosure&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;Dialog&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;...&lt;span class="pl-s1"&gt;dialog&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-c1"&gt;aria-label&lt;/span&gt;&lt;span class="pl-c1"&gt;=&lt;/span&gt;&lt;span class="pl-s"&gt;"Welcome"&lt;/span&gt;&lt;span class="pl-c1"&gt;&amp;gt;&lt;/span&gt;
        Welcome to Reakit!
      &lt;span class="pl-c1"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-c1"&gt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;Dialog&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/reakit/reakit"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#8-worktop"&gt;
  &lt;/a&gt;
  8. Worktop
&lt;/h3&gt;

&lt;p&gt;The next generation web framework for Cloudflare Workers&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/lukeed"&gt;
        lukeed
      &lt;/a&gt; / &lt;a href="https://github.com/lukeed/worktop"&gt;
        worktop
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The next generation web framework for Cloudflare Workers
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/lukeed/worktoplogo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4nIXdo4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/lukeed/worktoplogo.png" alt="worktop" width="620"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;a href="https://npmjs.org/package/worktop" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/5f874ae9496093c0428040b4bfecb2ce8fd5cec3c13196d6e1c80e8c71bba041/68747470733a2f2f62616467656e2e6e6f772e73682f6e706d2f762f776f726b746f70" alt="version"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/lukeed/worktop/actions?query=workflow%3ACI"&gt;
    &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---P2w_ZaV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/lukeed/worktop/workflows/CI/badge.svg%3Fevent%3Dpush" alt="CI"&gt;
  &lt;/a&gt;
  &lt;a href="https://npmjs.org/package/worktop" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/2e87a40ac8c2b072b344d8bfa73cbd6aba59720eed6dc71475ea911c3671a72d/68747470733a2f2f62616467656e2e6e6f772e73682f6e706d2f646d2f776f726b746f70" alt="downloads"&gt;
  &lt;/a&gt;
  &lt;a href="https://packagephobia.now.sh/result?p=worktop" rel="nofollow"&gt;
    &lt;img src="https://camo.githubusercontent.com/08cf8cec456ff02d37238c42c1d55ee1e6d0fc9d517e6a77847139ec17f0dfea/68747470733a2f2f7061636b61676570686f6269612e6e6f772e73682f62616467653f703d776f726b746f70" alt="install size"&gt;
  &lt;/a&gt;
&lt;/div&gt;
&lt;div&gt;The next generation web framework for Cloudflare Workers&lt;/div&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Super &lt;a href="https://npm.anvaka.com/#/view/2d/worktop" rel="nofollow"&gt;lightweight&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;First-class TypeScript support&lt;/li&gt;
&lt;li&gt;Custom Middleware Support&lt;/li&gt;
&lt;li&gt;Well-organized submodules for à la carte functionality&lt;sup&gt;*&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;Includes Router with support for pattern definitions&lt;/li&gt;
&lt;li&gt;Familiar Request-Response handler API&lt;/li&gt;
&lt;li&gt;Supports &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; handlers&lt;/li&gt;
&lt;li&gt;Fully treeshakable&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;sup&gt;*&lt;/sup&gt;&lt;em&gt;More to come!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
Install&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ npm install --save worktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/lukeed/worktop/examples"&gt;&lt;code&gt;/examples&lt;/code&gt;&lt;/a&gt; for a list of working demos!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight highlight-source-ts position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-smi"&gt;Router&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'worktop'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-smi"&gt;Cache&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'worktop/cache'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;uid&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-s1"&gt;toUID&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'worktop/utils'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;read&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;write&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'worktop/kv'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-k"&gt;type&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-smi"&gt;KV&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'worktop/kv'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-k"&gt;declare&lt;/span&gt; &lt;span class="pl-k"&gt;var&lt;/span&gt; &lt;span class="pl-smi"&gt;DATA&lt;/span&gt;: &lt;span class="pl-smi"&gt;KV&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-smi"&gt;Namespace&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;

&lt;span class="pl-k"&gt;interface&lt;/span&gt; &lt;span class="pl-smi"&gt;Message&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-c1"&gt;id&lt;/span&gt;: &lt;span class="pl-smi"&gt;string&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-c1"&gt;text&lt;/span&gt;: &lt;span class="pl-smi"&gt;string&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
  &lt;span class="pl-c"&gt;// ...&lt;/span&gt;
&lt;span class="pl-kos"&gt;}&lt;/span&gt;

&lt;span class="pl-c"&gt;// Initialize&lt;/span&gt;
&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-smi"&gt;API&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-k"&gt;new&lt;/span&gt; &lt;span class="pl-smi"&gt;Router&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;


&lt;span class="pl-smi"&gt;API&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;add&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'GET'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s"&gt;'/messages/:id'&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-k"&gt;async&lt;/span&gt; &lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;req&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;res&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt; &lt;span class="pl-c1"&gt;=&amp;gt;&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/lukeed/worktop"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#9-generative-art-node"&gt;
  &lt;/a&gt;
  9. Generative Art Node
&lt;/h3&gt;

&lt;p&gt;Create generative art by using the canvas api and node js&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/HashLips"&gt;
        HashLips
      &lt;/a&gt; / &lt;a href="https://github.com/HashLips/generative-art-node"&gt;
        generative-art-node
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create generative art by using the canvas api and node js
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
generative-art-node&lt;/h1&gt;
&lt;p&gt;Create generative art by using the canvas api and node js&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/HashLips/generative-art-node/blob/main/src/preview.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aqqLAT-D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/HashLips/generative-art-node/raw/main/src/preview.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/HashLips/generative-art-node
yarn add all
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;Create your different layers as folders in the 'layers' directory, and add all the layer assets in these directories. Optionally, append '_r' and '_sr' to the layer file names to make those layer files rare or super rare respectively.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; If you had an ball layer you would create a ball directory, and then a file might be called:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;red_eye_ball_sr.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red_eye_ball_r.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;red_eye_ball.png&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Rarity is customizable in &lt;code&gt;src/config.js&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you have all your layers, go into &lt;code&gt;src/config.js&lt;/code&gt; and update the &lt;code&gt;layersOrder&lt;/code&gt; array to be your layer folders name in order of the back layer to the front layer.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; If you were creating a portrait design, you might have a background, then a head, a mouth, eyes, eyewear, and then headwear, so your &lt;code&gt;layersOrder&lt;/code&gt; would look something like this:&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;
&lt;pre&gt;&lt;code&gt;const&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/HashLips/generative-art-node"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#10-solana-javascript-api"&gt;
  &lt;/a&gt;
  10. Solana JavaScript API
&lt;/h3&gt;

&lt;p&gt;The Solana Javascript API built on the Solana JSON RPC API&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/solana-labs"&gt;
        solana-labs
      &lt;/a&gt; / &lt;a href="https://github.com/solana-labs/solana-web3.js"&gt;
        solana-web3.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Solana JavaScript SDK
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/solana-labs/solana-web3.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/df9f1c47d3109400d73ddf00b594731fe1f03d286cdba0067f8edfc96980c33a/68747470733a2f2f6170692e7472617669732d63692e6f72672f736f6c616e612d6c6162732f736f6c616e612d776562332e6a732e7376673f6272616e63683d6d6173746572" alt="Build status"&gt;&lt;/a&gt;
&lt;a href="https://codecov.io/gh/solana-labs/solana-web3.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c18dd5344c274ae48bf8a7f2cf056c303bb1e9dd0f78406110912bed2d61e10f/68747470733a2f2f636f6465636f762e696f2f67682f736f6c616e612d6c6162732f736f6c616e612d776562332e6a732f6272616e63682f6d61737465722f67726170682f62616467652e737667" alt="codecov"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a href="https://www.npmjs.com/package/@solana/web3.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/53526291501a31c41e0758f2f22638e3d0529e2f90c506c68ae144df5d439aed/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f40736f6c616e612f776562332e6a732e7376673f7374796c653d666c6174" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@solana/web3.js" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5d0281328de47a5ee388e707845b8403e9aff942f58f55e3098a9f6676d7201d/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f40736f6c616e612f776562332e6a732e7376673f7374796c653d666c6174" alt="npm-downloads"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;a href="https://github.com/semantic-release/semantic-release"&gt;&lt;img src="https://camo.githubusercontent.com/df1fd6655472a008d21057736be3b95a2bced4e9ea6db7c393e7c960a4d9e450/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f2532302532302546302539462539332541362546302539462539412538302d73656d616e7469632d2d72656c656173652d6531303037392e737667" alt="semantic-release"&gt;&lt;/a&gt;
&lt;a href="https://github.com/prettier/prettier"&gt;&lt;img src="https://camo.githubusercontent.com/c0486311910977832125780d8ef9ac681614939bd1b9328678007156a4648896/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64655f7374796c652d70726574746965722d6666363962342e7376673f7374796c653d666c61742d737175617265" alt="code-style-prettier"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Solana JavaScript API&lt;/h1&gt;
&lt;p&gt;This is the Solana Javascript API built on the Solana &lt;a href="https://docs.solana.com/apps/jsonrpc-api" rel="nofollow"&gt;JSON RPC API&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://solana-labs.github.io/solana-web3.js/" rel="nofollow"&gt;Latest API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;h3&gt;
Yarn&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ yarn add @solana/web3.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
npm&lt;/h3&gt;
&lt;div class="snippet-clipboard-content position-relative"&gt;&lt;pre&gt;&lt;code&gt;$ npm install --save @solana/web3.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;
Browser bundle&lt;/h3&gt;
&lt;div class="highlight highlight-text-html-basic position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&amp;lt;!-- Development (un-minified) --&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://unpkg.com/@solana/web3.js@latest/lib/index.iife.js&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="pl-c"&gt;&amp;lt;!-- Production (un-minified) --&amp;gt;&lt;/span&gt;
&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt; &lt;span class="pl-c1"&gt;src&lt;/span&gt;="&lt;span class="pl-s"&gt;https://unpkg.com/@solana/web3.js@latest/lib/index.iife.min.js&lt;/span&gt;"&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="pl-ent"&gt;script&lt;/span&gt;&lt;span class="pl-kos"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Development Environment Setup&lt;/h2&gt;
&lt;p&gt;Install the latest Solana release from &lt;a href="https://docs.solana.com/cli/install-solana-cli-tools" rel="nofollow"&gt;https://docs.solana.com/cli/install-solana-cli-tools&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Run test validator&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;solana-test-validator&lt;/code&gt; from the latest Solana release&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
BPF program development&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;cargo build-bpf&lt;/code&gt; from the latest Solana release&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;h3&gt;
Javascript&lt;/h3&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;const&lt;/span&gt; &lt;span class="pl-s1"&gt;solanaWeb3&lt;/span&gt; &lt;span class="pl-c1"&gt;=&lt;/span&gt; &lt;span class="pl-en"&gt;require&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'@solana/web3.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;solanaWeb3&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
ES6&lt;/h3&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-c1"&gt;*&lt;/span&gt; &lt;span class="pl-k"&gt;as&lt;/span&gt; &lt;span class="pl-s1"&gt;solanaWeb3&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'@solana/web3.js'&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;
&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;solanaWeb3&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Browser bundle&lt;/h3&gt;
&lt;div class="highlight highlight-source-js position-relative js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;// `solanaWeb3` is provided in the global namespace by the `solanaWeb3.min.js` script bundle.&lt;/span&gt;
&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s1"&gt;solanaWeb3&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;;&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Examples&lt;/h2&gt;
&lt;p&gt;Example scripts for…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/solana-labs/solana-web3.js"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 seconds of code&lt;/a&gt; +1,553 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TheAlgorithms/Javascript"&gt;The Algorithms - JavaScript&lt;/a&gt; +1,237 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +1,149 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +796 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;ML for beginners&lt;/a&gt; +616 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/lahmatiy/react-render-tracker"&gt;React render tracker&lt;/a&gt; +55%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/handsontable/hyperformula"&gt;HyperFormula&lt;/a&gt; +16%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/louislam/uptime-kuma"&gt;Uptime Kuma&lt;/a&gt; +13%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/ixartz/Next-js-Boilerplate"&gt;NextJS Boilerplate&lt;/a&gt; +11%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/TheAlgorithms/Javascript"&gt;The Algorithms - JavaScript&lt;/a&gt; +10%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +9,716 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +4,491 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/danistefanovic/build-your-own-x"&gt;Build your own X&lt;/a&gt; +2,999 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tauri-apps/tauri"&gt;Tauri&lt;/a&gt; +2,800 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/Web-Dev-For-Beginners"&gt;Web dev for beginners&lt;/a&gt; +2,755 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/Saul-Mirone/milkdown"&gt;Milkdown&lt;/a&gt; +59%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/growthbook/growthbook"&gt;Growth Book&lt;/a&gt; +54%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/07akioni/xicons"&gt;xicons&lt;/a&gt; +48%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/alan2207/bulletproof-react"&gt;Bulletproof React&lt;/a&gt; +48%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/imbhargav5/rooks"&gt;Rooks&lt;/a&gt; +47%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Rust Function Pointers Across FFI Boundary</title>
      <author>Ben Lovy</author>
      <pubDate>Fri, 10 Sep 2021 13:39:40 +0000</pubDate>
      <link>https://dev.to/deciduously/rust-function-pointers-across-ffi-boundary-egg</link>
      <guid>https://dev.to/deciduously/rust-function-pointers-across-ffi-boundary-egg</guid>
      <description>&lt;p&gt;Hi DEV - it's been ages!  I'm stumped on a problem, and remembered my old adage: "ask DEV stuff, they know things".  So, here's hoping someone can unstick me!&lt;/p&gt;

&lt;p&gt;I'm trying to store a function defined in C in a Rust struct, and call it from the Rust side. The rest of my FFI seems to be hooked up okay, but I'm getting a segfault when I make the actual function call. Debugging sessions have not proved useful.&lt;/p&gt;

&lt;p&gt;I'll try to keep the context streamlined, but let me know if you need more to see what's going on. The full code is on the FFI branch of &lt;a href="https://github.com/deciduously/skedge/tree/ffi"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;First, here's the C externs, the function I'm pointing to, and the passage across the FFI boundary:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt; &lt;span class="n"&gt;scheduler_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="n"&gt;job_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="nf"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;unit_to_unit_t&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scheduler_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unit_to_unit_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;job_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint32_t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="n"&gt;job_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Define a job&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;job&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//printf("Hello!  It is now %s\n", now());&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;every&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Super exciting stuff. The commented out line calls a &lt;code&gt;now()&lt;/code&gt;function that returns a &lt;code&gt;char *&lt;/code&gt;, but I wanted to get anything working first. The &lt;code&gt;every()&lt;/code&gt; function returns &lt;code&gt;job_t *&lt;/code&gt;, and &lt;code&gt;seconds()&lt;/code&gt; takes a &lt;code&gt;job_t *&lt;/code&gt; and returns a &lt;code&gt;job_t *&lt;/code&gt;, which is finally passed into &lt;code&gt;run()&lt;/code&gt;. I have a typedef named &lt;code&gt;unit_to_unit_t&lt;/code&gt; for the job function pointer - it's a function taking no arguments and returning nothing. The scheduler is also an FFI entity.&lt;/p&gt;

&lt;p&gt;This is the definition of &lt;code&gt;run()&lt;/code&gt; on the Rust side:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[no_mangle]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;"C"&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Job&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Scheduler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="nf"&gt;.is_null&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="nn"&gt;Box&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from_raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="nf"&gt;.is_null&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="nf"&gt;.is_null&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;*&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="nf"&gt;.run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;.unwrap_or_else&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nd"&gt;eprintln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm passing the C function as the last argument here, and trying to cast it to &lt;code&gt;work&lt;/code&gt;. This step doesn't complain, seems to go okay.&lt;/p&gt;

&lt;p&gt;On the Rust side, when that &lt;code&gt;job.run()&lt;/code&gt; method gets called, the following trait/struct is used to store the function pointer and call it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/// Execute this callable&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c"&gt;/// Get the name of this callable&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/// A named callable function taking no parameters and returning nothing.&lt;/span&gt;
&lt;span class="nd"&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;UnitToUnit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;UnitToUnit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Self&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="nf"&gt;.into&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;impl&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;UnitToUnit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;// gets HERE just fine...&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.work&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
        &lt;span class="nb"&gt;None&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This all works fine with Rust function pointers. I determined that with the C version, we do get inside the &lt;code&gt;call()&lt;/code&gt; implementation - the segfault happens when I use &lt;code&gt;(self.work)();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I'm not sure if it's relevant, but the actual call is triggered here in C:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight c"&gt;&lt;code&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;run_pending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheduler_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    

&lt;span class="c1"&gt;// Run some jobs&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;run_pending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scheduler&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which corresponds to this Rust interface fn:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[no_mangle]&lt;/span&gt;
&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;unsafe&lt;/span&gt; &lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;"C"&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_pending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;Scheduler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;scheduler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="nf"&gt;.is_null&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="n"&gt;scheduler&lt;/span&gt;
        &lt;span class="nf"&gt;.run_pending&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.unwrap_or_else&lt;/span&gt;&lt;span class="p"&gt;(|&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nd"&gt;eprintln!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Error: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's &lt;code&gt;scheduler::run_pending()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="c"&gt;/// Run all jobs that are scheduled to run.  Does NOT run missed jobs!&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;run_pending&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c"&gt;//let mut jobs_to_run: Vec&amp;lt;&amp;amp;Job&amp;gt; = self.jobs.iter().filter(|el| el.should_run()).collect();&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.jobs&lt;/span&gt;&lt;span class="nf"&gt;.sort&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;to_remove&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Vec&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.jobs&lt;/span&gt;&lt;span class="nf"&gt;.iter_mut&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.enumerate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="nf"&gt;.should_run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;keep_going&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="nf"&gt;.execute&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;keep_going&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Cancelling job {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;job&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="n"&gt;to_remove&lt;/span&gt;&lt;span class="nf"&gt;.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c"&gt;// Remove any cancelled jobs&lt;/span&gt;
        &lt;span class="n"&gt;to_remove&lt;/span&gt;&lt;span class="nf"&gt;.sort_unstable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;to_remove&lt;/span&gt;&lt;span class="nf"&gt;.reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;to_remove&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.jobs&lt;/span&gt;&lt;span class="nf"&gt;.remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(())&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And finally, &lt;code&gt;job::execute()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;    &lt;span class="c"&gt;/// Run this job and immediately reschedule it, returning true.  If job should cancel, return false.&lt;/span&gt;
    &lt;span class="c"&gt;///&lt;/span&gt;
    &lt;span class="c"&gt;/// If the job's deadline has arrived already, the job does not run and returns false.&lt;/span&gt;
    &lt;span class="c"&gt;///&lt;/span&gt;
    &lt;span class="c"&gt;/// If this execution causes the deadline to reach, it will run once and then return false.&lt;/span&gt;
    &lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.is_overdue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Deadline already reached, cancelling job {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Running job {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.job&lt;/span&gt;&lt;span class="nf"&gt;.is_none&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No work scheduled, moving on..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.job&lt;/span&gt;&lt;span class="nf"&gt;.as_ref&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.call&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c"&gt;// CALLED RIGHT HERE&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="py"&gt;.last_run&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;Some&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.now&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.schedule_next_run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.is_overdue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="nf"&gt;.now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;debug!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Execution went over deadline, cancelling job {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I added a comment where the actual &lt;code&gt;call()&lt;/code&gt; happens.&lt;/p&gt;

&lt;p&gt;This whole FFI shindig is just an experiment, I don't actually have a real need for this to work - but now that I got this far, I kinda want to know what I'm getting wrong! Thanks in advance.&lt;/p&gt;

</description>
      <category>help</category>
      <category>rust</category>
      <category>c</category>
      <category>ffi</category>
    </item>
    <item>
      <title>What is a desktop wallet? Introducing the best desktop wallet digital currency wallet</title>
      <author>giovani</author>
      <pubDate>Fri, 10 Sep 2021 13:28:07 +0000</pubDate>
      <link>https://dev.to/giovanidev/what-is-a-desktop-wallet-introducing-the-best-desktop-wallet-digital-currency-wallet-463f</link>
      <guid>https://dev.to/giovanidev/what-is-a-desktop-wallet-introducing-the-best-desktop-wallet-digital-currency-wallet-463f</guid>
      <description>&lt;p&gt;One of the main concerns of users of digital currencies is the secure storage of their cryptographic assets. Digital Currency Wallet has been developed for this purpose and within a few years, different types of it were introduced to the cryptocurrency market, each of which has its own features and capabilities. One of these wallets is the desktop wallet, which has gained a lot of popularity among digital currency users due to its numerous capabilities and easy and fast access. In the following, we will review the features of this wallet and introduce some popular desktop wallets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-digital-currency-wallet"&gt;
  &lt;/a&gt;
  What is a digital currency wallet?
&lt;/h2&gt;

&lt;p&gt;Digital Currency Wallet or Wallet A digital currency is a software or hardware program for storing digital currency assets. A list of all user transactions is also stored on these platforms. Each wallet has an identification code called a public key. Cryptocurrency users can receive and send passwords to others through the public keys of their wallets. Digital wallets also have a private key, which is a password for users to wallets (such as a bank card password) and is very important to maintain. Some digital currency wallets also allow users to exchange passwords within the system without the need for exchanges. It should be noted that performing all digital currency transactions within these platforms requires payment of a fee. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyg_iqvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6agavke34e2y5pfiujn3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyg_iqvU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6agavke34e2y5pfiujn3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#types-of-digital-currency-wallets"&gt;
  &lt;/a&gt;
  Types of Digital Currency Wallets
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-hot-wallets"&gt;
  &lt;/a&gt;
  1. Hot wallets:
&lt;/h3&gt;

&lt;p&gt;These wallets store users' assets and information online. Some of these wallets also allow for offline storage. Online Wallet (Desktop) Desktop Wallet Mobile Wallet&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-cold-wallets"&gt;
  &lt;/a&gt;
  2. Cold Wallets:
&lt;/h3&gt;

&lt;p&gt;Cold wallets carry users' assets and information offline without an internet connection. Hardware Wallet Paper Wallet &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-digital-currency-desktop-wallet"&gt;
  &lt;/a&gt;
  What is a digital currency desktop wallet?
&lt;/h2&gt;

&lt;p&gt;The desktop wallet is installed on users' personal computers and works with the help of the Internet. This wallet is in the category of hot wallets or online cryptocurrencies and stores users' assets and information online. Many desktop wallets now also support mobile operating systems. These platforms are highly secure but can be hacked just like any other internet system because they are low-end or online. Also, if a hacker accesses your computer or mobile phone, he can also access your wallet. But you should note that the developers of these wallets have developed several security algorithms to protect users' information and assets, and access to these systems will not be easy and fast. Desktop wallet is a fast and easy way to store digital assets that provides many features for users and has been able to find many fans among activists in this field. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eDnOAgQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhd1p2ig7er9yow8ry6n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eDnOAgQd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mhd1p2ig7er9yow8ry6n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-benefits-of-a-desktop-wallet"&gt;
  &lt;/a&gt;
  What are the benefits of a desktop wallet?
&lt;/h3&gt;

&lt;p&gt;Quick and easy access Quick and better review of transaction records High speed when making transfers Advanced security system (data encryption) Numerous and advanced features and services Reduce transaction costs despite the ability to exchange within the system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-disadvantages-of-a-desktop-wallet"&gt;
  &lt;/a&gt;
  What are the disadvantages of a desktop wallet?
&lt;/h3&gt;

&lt;p&gt;If the user's computer is hacked, it is also possible to access the desktop wallet. Like all Internet systems, it can be hacked. Online storage of private keys causes security problems. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-10-popular-desktop-wallets"&gt;
  &lt;/a&gt;
  Top 10 Popular Desktop Wallets.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-jax-wallet"&gt;
  &lt;/a&gt;
  1. Jax Wallet
&lt;/h3&gt;

&lt;p&gt;The Jaxx Desktop Wallet was launched in 2014 by a Canadian blockchain company called Decentral, and after a major update in 2018, it was renamed Jaxx Liberty. changed. It is a multi-currency wallet and supports a large number of Altcoins and has a very simple and user-friendly interface that even newcomers to the crypto market can easily use.&lt;br&gt;
 Waltax runs on all Windows, Linux and Macintosh systems, as well as Android and iOS mobile systems. Another feature of this wallet is the existence of an internal exchange called Shapeshift, which allows users to exchange passwords without transferring assets to another platform. Jacks Wallet has now released a beta version that is in trial and error. This version has major user changes compared to the previous version. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZFiS0YW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0yd4egfpwa96xs1u1m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6ZFiS0YW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eo0yd4egfpwa96xs1u1m.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths: Runs on Windows, Linux and Macintosh runs on Android and iOS systems Internal exchange design and simple user interface Support for about 100 different coins and tokens Support for Seed feature and Backup support PIN capability for protection Most of the assets Support for Segwit technology Ability to set the desired amount of privacy &lt;br&gt;
Weaknesses: Lack of support for two-stage hacking history in 2017 (Walt was one of the hacked Jacks users) Very low speed when using Walt on Mobile &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2copy-wallet"&gt;
  &lt;/a&gt;
  2.Copy Wallet
&lt;/h3&gt;

&lt;p&gt;Copay Wallet is an open source platform launched in 2015 by BitPay (the first Bitcoin payment company). In 2016, the wallet recorded a record 200,000 transactions per month. Wallet Copy supports Bitcoin, LightCoin, BitcoinCash, Ripple and Atrium. This platform can be run on Windows, Linux and Macintosh operating systems, it can also be run on mobile phones. Both the mobile and PC versions of Copay have a simple and user-friendly interface.&lt;br&gt;
The copy wallet has the ability to connect to the TestNet system so that users can test their strategy and ideas without losing their assets. This platform is Light Node and uses SPV system which means simple payment verification. These systems do not use the original cryptocurrency blocker to authenticate transactions, and the copy uses a bitcoin network for this process.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k9GcEH7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3toiouk5dl0knj4ahmw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k9GcEH7A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o3toiouk5dl0knj4ahmw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths:&lt;br&gt;
Multi-user&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Support for multi-signature capability&lt;br&gt;
Being user friendly&lt;br&gt;
TestNet support&lt;br&gt;
Encrypted private key storage&lt;br&gt;
Support for Bitcoin Payment Protocol (BIP)&lt;br&gt;
Seed feature support and backup capability&lt;br&gt;
Ability to set the fee to the desired amount&lt;br&gt;
Being free&lt;br&gt;
weak points:&lt;br&gt;
Lack of support for various cryptocurrencies&lt;br&gt;
Lack of support for 2-step authentication&lt;br&gt;
Lack of support for Segwit technology&lt;br&gt;
Some believe that LightNode platforms have low security.&lt;br&gt;
low speed&lt;br&gt;
Poor support service&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-electrome-wallet"&gt;
  &lt;/a&gt;
  3. Electrome wallet
&lt;/h3&gt;

&lt;p&gt;The Electrom desktop wallet has been around since 2011 and is one of the oldest cryptocurrencies. The antiquity of this platform shows that it has passed the proud security tests and has been able to gain a good reputation and position in the cryptocurrency market. Electrom Wallet is the official bitcoin wallet, which is said to have cloned versions of LightCash and Dash.&lt;/p&gt;

&lt;p&gt;Electrum is an open source system where all its protocols are visible to users. This wallet does not store users' information and private keys on any server, which ensures the high security of Electrom.&lt;/p&gt;

&lt;p&gt;Electrum is a lightweight wallet and you do not need to download the entire blockchain to use it. Although this wallet has a simple appearance and is easy to set up, it does not have a very simple user interface; But it can be made easier to use with customization options. The ability to synchronize Electrom with hardware wallets is another special feature of this wallet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIfbdqvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv5zjt9l6ufavdo8ea5o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIfbdqvz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dv5zjt9l6ufavdo8ea5o.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Seed feature support and backup capability&lt;br&gt;
Support for PIN capability to further protect assets&lt;br&gt;
Support for Segwit technology&lt;br&gt;
Two-step verification capability&lt;br&gt;
Very high security&lt;br&gt;
Low commissions with the possibility of determining the desired amount&lt;br&gt;
Privacy&lt;br&gt;
Easy to download and install&lt;br&gt;
High speed&lt;br&gt;
Personalization options&lt;br&gt;
Being free&lt;br&gt;
weak points:&lt;br&gt;
Lack of support for multiple ciphers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-coinomi-wallet"&gt;
  &lt;/a&gt;
  4. coinomi wallet
&lt;/h3&gt;

&lt;p&gt;coinomi Wallet was originally a mobile digital currency wallet, and then its developers decided to launch a desktop version. Coinomi Desktop is currently one of the most popular cryptocurrencies running on Windows, Linux and Macintosh operating systems. More than 400 different coins and tokens are supported on this platform and its user interface is very simple and attractive. In coinomi, private keys are stored offline.&lt;/p&gt;

&lt;p&gt;coinomi Desktop Wallet allows transactions for users within the system (within the wallet). Note, however, that due to access restrictions for Iranian IPs, using this feature from within the country is not possible and requires an IP change.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-rM4FJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpxdfdksehivemel64ni.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-rM4FJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpxdfdksehivemel64ni.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Supports hundreds of ciphers&lt;br&gt;
Very simple user interface&lt;br&gt;
Two-step verification capability&lt;br&gt;
Offline storage of private keys&lt;br&gt;
Ability for internal exchanges&lt;br&gt;
Being free&lt;br&gt;
Strong support&lt;br&gt;
weak points:&lt;br&gt;
Reports of security vulnerabilities&lt;br&gt;
Specify 24 words to retrieve&lt;br&gt;
Not open text&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-exodus-wallet"&gt;
  &lt;/a&gt;
  5. Exodus wallet
&lt;/h3&gt;

&lt;p&gt;This wallet was launched for desktop in 2016 and does not work on other systems such as mobile phones. Exodus supports about 50 different coins and tokens and has all the listed coins in its list. The user interface of this platform is very simple, smooth and user-friendly. Users' private keys are stored in their personal system when using this wallet, which can ensure the security of their assets to some extent.&lt;/p&gt;

&lt;p&gt;Exodus desktop wallet also provides Ramzarz internal exchanges for its users. Note that Iran's IP is on the blacklist of this platform and to use Exodus wallet from inside the country, IP‌ needs to be changed.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jUw0w2yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel4025aivxoa1527w2p.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUw0w2yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xel4025aivxoa1527w2p.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Seed feature support and backup capability&lt;br&gt;
Very simple user interface&lt;br&gt;
Ability for internal exchanges&lt;br&gt;
Save private key on user system&lt;br&gt;
weak points:&lt;br&gt;
Relatively high fees&lt;br&gt;
Reports of security vulnerabilities&lt;br&gt;
Incompatibility with mobile&lt;br&gt;
Not open text&lt;br&gt;
Lack of support for 2-step authentication&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-armory-wallet"&gt;
  &lt;/a&gt;
  6. Armory wallet
&lt;/h3&gt;

&lt;p&gt;One of the most well-known desktop wallets is Armory Digital Currency. This wallet has a very high level of security and only allows users to store bitcoins. Armory runs on all PC operating systems but cannot run on mobile phones. This wallet has a professional environment and its advanced options and settings are not suitable for beginners and newcomers to the crypto world. Using this system requires a complete download of the blockchain (it is full ninety), so the armor is a heavy wallet.&lt;/p&gt;

&lt;p&gt;Armory desktop wallet allows cold or offline storage of user information such as private keys for maximum security. Support for Segway and multi-signature technologies, as well as the ability to sync this wallet with Treasure and Nano Ledger hardware wallets are other Armori features.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I1wOUPwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvigvd7g81074wuq36t7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I1wOUPwf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nvigvd7g81074wuq36t7.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Support for Segwit technology&lt;br&gt;
Two-step verification capability&lt;br&gt;
Very high security&lt;br&gt;
Being free&lt;br&gt;
Open source&lt;br&gt;
Offline storage of private keys&lt;br&gt;
weak points:&lt;br&gt;
Lack of support for multiple ciphers&lt;br&gt;
Incompatibility with mobile&lt;br&gt;
Hard and advanced settings&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-blind-bitcoin-wallet"&gt;
  &lt;/a&gt;
  7. Blind bitcoin wallet
&lt;/h3&gt;

&lt;p&gt;Bitcoin Core was launched by the core Bitcoin development team and is a full node wallet that requires full download of the Bitcoin blockchain (it is full node). This system uses the main bitcoin blockchain to stay updated and confirm payments, and this has made it very secure. This feature makes Bitcoin Core a very heavy wallet, and loading and installing it requires an advanced system with high storage volume. Bitcoin Core desktop wallet only supports bitcoin and its user interface and settings are complicated and complicated and novice users can not use it easily.&lt;/p&gt;

&lt;p&gt;Support for the Mempool feature, which shows users unverified and unsuccessful transactions; It is one of the unique features of this wallet. Bitcoin Blind has the ability to sync with most cool digital currency wallets.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qKQ_n70U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xciqhp72a5fercaxzv3n.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKQ_n70U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xciqhp72a5fercaxzv3n.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Support for Segwit technology&lt;br&gt;
Ability to modify commissions&lt;br&gt;
Mempool feature&lt;br&gt;
Very high security&lt;br&gt;
Being free&lt;br&gt;
Open source&lt;br&gt;
Privacy&lt;br&gt;
Supports most hardware wallets&lt;br&gt;
weak points:&lt;br&gt;
Intermediate user interface&lt;br&gt;
Hard and time consuming setup&lt;br&gt;
Requires a lot of storage space&lt;br&gt;
Hard and advanced settings&lt;br&gt;
Limited facilities&lt;br&gt;
Lack of support for multiple ciphers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-atomic-wallet"&gt;
  &lt;/a&gt;
  8. Atomic wallet
&lt;/h3&gt;

&lt;p&gt;Another popular desktop wallet is the Atomic wallet, which was launched in 2017 by one of the founders of the famous company Changelly. This wallet can be run on all computer operating systems, and its smooth and simple user interface has enabled novice and professional users to connect with it very quickly. The Atomic Wallet is secure as long as users follow all security tips, and the security system itself provides almost mediocrity. The level of fees is also low and acceptable in this wallet. Private keys are also stored on users' personal systems when using this wallet.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H1sbplH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j7ohelcrbd8icmjsg7c.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H1sbplH4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0j7ohelcrbd8icmjsg7c.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Atomic supports more than 500 coins and digital currency tokens. Users of this wallet can use the Atomic Swap system to exchange their cryptocurrencies without the need for exchanges in the same wallet. It is also possible to buy a limited number of digital currencies in this wallet. Using Atomic is free, but some of its features require a fee.&lt;/p&gt;

&lt;p&gt;Atomic Desktop Wallet&lt;br&gt;
Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Backup capability&lt;br&gt;
Supports hundreds of ciphers&lt;br&gt;
Ability to download the transaction with the transaction code&lt;br&gt;
Simple and smooth user interface&lt;br&gt;
Internal exchange capability (Atomic Swap)&lt;br&gt;
Save private key on user system&lt;br&gt;
weak points:&lt;br&gt;
Reports of functional weaknesses&lt;br&gt;
Medium security&lt;br&gt;
Not all facilities are free&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-guarda-wallet"&gt;
  &lt;/a&gt;
  9. Guarda wallet
&lt;/h3&gt;

&lt;p&gt;This desktop wallet was launched by Guardian OÜ in 2017 and in a short time it was able to reach users in the field.Crypto's gaining popularity. Walt Guard currently supports about 50 coins and more than 10,000 tokens. This wallet can be run on all computer operating systems, as well as on Android and iOS mobile phone systems. Guarda users can trade cryptocurrencies in the same wallet and do not need to transfer their assets to other platforms.&lt;/p&gt;

&lt;p&gt;Guarda Wallet stores users' private keys on their personal system, thereby enhancing the security of their assets. The platform does not blacklist any country and provides access to all digital currency users around the world.&lt;/p&gt;

&lt;p&gt;Strengths:&lt;br&gt;
Runs on Windows, Linux and Macintosh systems&lt;br&gt;
Runs on Android and IOS systems&lt;br&gt;
Ability for internal exchanges&lt;br&gt;
Ability to receive and send passwords to other provinces or exchanges&lt;br&gt;
Save private key on user system&lt;br&gt;
weak points:&lt;br&gt;
Relatively difficult to set up&lt;br&gt;
Lack of support for Segwit technology&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ledger Live Wallet
We are all familiar with the Ledger Nano S cold wallet. This wallet has a low-end version or desktop wallet that offers high security and performance to users, but using this wallet requires the purchase of the company's physical wallet. Ledger Live supports more than 1,500 cryptocurrencies and offers a variety of customization options. Attractive and simple user interface and very high security of this platform has made it one of the most popular desktop wallets in Ramzarz.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This wallet is constantly updating the system security algorithms and adding new and user-friendly features, and users have to update their wallet in a short period of time. Ledger Live provides users with 24 recovery words for added security, which some consider excessive and inappropriate for recovery.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GlstrmPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31osgdk96k91wj4xpepx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GlstrmPG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31osgdk96k91wj4xpepx.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Strengths:&lt;br&gt;
Simple and attractive user interface&lt;br&gt;
Very high security&lt;br&gt;
Ability to view analysis charts&lt;br&gt;
Customization options&lt;br&gt;
weak points:&lt;br&gt;
Specify 24 words to retrieve&lt;br&gt;
Cannot be used without Ledger Nano S wallet&lt;br&gt;
expensive&lt;br&gt;
Concluding remarks&lt;br&gt;
Using a desktop wallet is not the safest way to store passwords. We mentioned earlier that these wallets are not completely reliable because of the installation on PCs and the possibility of hacking these systems, as well as their popularity or online. Therefore, when using them, we must follow the security tips accurately and completely.&lt;/p&gt;

&lt;p&gt;Try to save your private key offline.&lt;br&gt;
Check the security of your internet connection.&lt;br&gt;
Get reputable and up-to-date antivirus software for your system.&lt;br&gt;
Enable two-factor authentication (if your wallet supports it).&lt;br&gt;
Use a strong password.&lt;br&gt;
Be sure to back up your desktop wallet.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
    </item>
    <item>
      <title>Voice Automating Spotify w/ React and Codesphere</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 10 Sep 2021 13:27:47 +0000</pubDate>
      <link>https://dev.to/codesphere/voice-automating-spotify-w-react-and-codesphere-9da</link>
      <guid>https://dev.to/codesphere/voice-automating-spotify-w-react-and-codesphere-9da</guid>
      <description>&lt;p&gt;Earlier this week, we spoke about the relationship between coding productivity and listening to music. If you're a developer, you know how many different tabs and applications you might have open at once. That's why today we're going to create a simple web app to voice control Spotify.&lt;/p&gt;

&lt;p&gt;You can check out the demo, deployed on Codesphere, here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://18922-3000.codesphere.com/"&gt;https://18922-3000.codesphere.com/&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#project-overview"&gt;
  &lt;/a&gt;
  Project Overview
&lt;/h3&gt;

&lt;p&gt;To do this we're going to use React, the Spotify Web API, the react-speech-recognition library, and Codesphere.&lt;/p&gt;

&lt;p&gt;The flow will look like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xro9v17m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxnwoqru79lixd99k38.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xro9v17m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ilxnwoqru79lixd99k38.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This GIF obviously doesn't include sound, but upon saying "pause music", your Spotify will pause, and upon saying "play music", the song will start playing again.&lt;/p&gt;

&lt;p&gt;Spotify's Web API includes tons of different features, so you can automate your app to do pretty much anything you can do in the actual Spotify app.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-spotify-web%C2%A0api"&gt;
  &lt;/a&gt;
  Setting up Spotify Web API
&lt;/h3&gt;

&lt;p&gt;To get started with the Spotify Web API, go to this page and sign in with your Spotify account: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://developer.spotify.com/dashboard/"&gt;https://developer.spotify.com/dashboard/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will then see a menu to create a new app in your Spotify developer dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymlgrgez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p58xgijq6k1ncs23f25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ymlgrgez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2p58xgijq6k1ncs23f25.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once you create your app, press the edit settings button and add localhost:3000 to your redirect URI. This is the link that Spotify will send the user to after they successfully sign in. If you are deploying this app in the cloud, make sure to change your redirect URI to the domain of your app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MBRGG9hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3scu79dcvmxgyxn372ia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MBRGG9hj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3scu79dcvmxgyxn372ia.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, note the clientID in your dashboard, we are going to need this for later.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#creating-our-spotify%C2%A0player"&gt;
  &lt;/a&gt;
  Creating our Spotify Player
&lt;/h3&gt;

&lt;p&gt;We are going to handle authentication by storing an authentication token that we pull from the API. The user can begin the authentication process by pressing a sign-in button and being redirected to a Spotify login.&lt;/p&gt;

&lt;p&gt;Once there is a valid token, we then are going to pull the currently playing song and display the title, artist, and album cover. Finally, we are going to add buttons that can play and pause the current song.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And we are going to style these components like so:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;With this code, we can play and pause our Spotify from the web. That's cool I guess, but not really helpful. Now here comes the fun part.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-voice-recognition"&gt;
  &lt;/a&gt;
  Setting up Voice Recognition
&lt;/h3&gt;

&lt;p&gt;We are first going to install the react-speech-recognition library with:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm i react-speech-recognition&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We then are going to amend our code as follows:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And there you have it! We can now voice control our Spotify!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;Playing and Pausing songs is only the tip of the iceberg of the Spotify Web API. If you want, you can use the API to create a functioning Spotify clone.&lt;/p&gt;

&lt;p&gt;In addition, if you link up more voice commands, you can create a fully automated Spotify app. While this is nice for those of us who are lazy, this also has the potential to make life much easier for music listeners with visual impairments.&lt;/p&gt;

&lt;p&gt;So code away!&lt;/p&gt;

&lt;p&gt;Brought to you by your good friends at &lt;a href="https://link.codesphere.com/DH"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Async/await ainda pode te surpreender... MUITO!</title>
      <author>Charles Assunção</author>
      <pubDate>Fri, 10 Sep 2021 13:21:56 +0000</pubDate>
      <link>https://dev.to/assuncaocharles/async-await-ainda-pode-te-surpreender-muito-4nj7</link>
      <guid>https://dev.to/assuncaocharles/async-await-ainda-pode-te-surpreender-muito-4nj7</guid>
      <description>&lt;p&gt;Eu amo tecnologia ❤, e o fato de que não importa o quanto você saiba ainda vai existir algo para te supreender. Algum tempo atras, um amigo meu (&lt;a href="https://twitter.com/toscanorl"&gt;@Rafael_Toscano&lt;/a&gt;) me mostrou algo e minha reação automática foi mais ou menos assim:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KQZk5uQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://charlesassuncao.tech/919cd1a4952b40064bb1905abc1be859/tumblr_ma0do9creh1qi2sux.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KQZk5uQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://charlesassuncao.tech/919cd1a4952b40064bb1905abc1be859/tumblr_ma0do9creh1qi2sux.gif" alt="Cat Surprised " title="Cat Surprised "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ele compartilhou comigo um artigo do blog da V8 sobre &lt;a href="https://v8.dev/blog/fast-async"&gt;"Faster async functions and promises."&lt;/a&gt; e entre várias coisas interessantes, uma particular capturou minha atenção de uma forma que na hora eu pensei "Isso não pode ser real, vou ter que testar."&lt;/p&gt;

&lt;p&gt;Era sobre o comportamento do &lt;code&gt;async/await&lt;/code&gt; e como podem ser usados com qualquer função que seja considerada "thenable". O que isso significa? Qualquer objeto que tenha um método &lt;code&gt;then()&lt;/code&gt; pode ser usado com &lt;code&gt;async/await&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No artigo ele da o seguinte exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Sleep&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;startTime&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
               &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;actualTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actualTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9OzLYKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/96f9dd53fa7e40bf581a295fac92da98/ffc89/disgusted-mother-of-god.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9OzLYKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://charlesassuncao.tech/static/96f9dd53fa7e40bf581a295fac92da98/ffc89/disgusted-mother-of-god.png" alt="Mother Of God" title="Mother Of God"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yeaaah, por favor me diz que não fui só eu que ficou tão surpreso. &lt;/p&gt;

&lt;p&gt;Acho que ajuda a gente a entender um pouco mais sobre como &lt;code&gt;async/await&lt;/code&gt; funciona e as possibilidades das coisas que podemos fazer fazer. Mas como diria tio Ben, isso tudo vem com grandes responsabilidades também, não vai sair colocando objetos com &lt;code&gt;then&lt;/code&gt; no projeto só para parecer fodão 💣&lt;/p&gt;

&lt;p&gt;Você provavelmente nunca vai precisar de usar &lt;code&gt;async/await&lt;/code&gt; dessa forma direta e se você encontrar um caso de uso para isso por favor compartilha com a gente. Um caso que eu considerei foi para implementar algo chamado "retry strategy", segue o exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ServerMock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;SomeName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;retry&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Trying....&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ServerMock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Resolve&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;limit&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Limit Reached&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Me diz o que você achou sobre essa nova descoberta nos comentários...&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>computerscience</category>
      <category>webdev</category>
    </item>
    <item>
      <title>20 Free CSS Product Card Example - Frontendtrick</title>
      <author>frontendtrick</author>
      <pubDate>Fri, 10 Sep 2021 12:41:15 +0000</pubDate>
      <link>https://dev.to/frontendtrick/20-free-css-product-card-example-frontendtrick-498j</link>
      <guid>https://dev.to/frontendtrick/20-free-css-product-card-example-frontendtrick-498j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TvVJNIjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11nsgnabpirm3gymykzn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TvVJNIjQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/11nsgnabpirm3gymykzn.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
1 React Crypto UI&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
2 CSS Animation Material Design&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
3 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
4 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
5 Day 002 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
6 Material design Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
7 HTML CSS Product Card UI design&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
8 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
9 Daily UI 15 Product card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
10 Product Card wip&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
11 Flipping Product Card 30Days30Sites&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
12 Product card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
13 Product Card TO Code&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
14 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
15 Simple Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
16 Responsive Product Card View With Change Color Image Functionality&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
17 Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
18 Product card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
19 Strawberry Week UI&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;br&gt;
20 Material Product Card&lt;br&gt;
&lt;a href="https://www.frontendtrick.com/2021/09/20-free-css-product-card-example.html#11FlippingProductCard30Days30Sites"&gt;Demo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Code and System Design Review Checklist</title>
      <author>Azom Shahriar</author>
      <pubDate>Fri, 10 Sep 2021 12:32:28 +0000</pubDate>
      <link>https://dev.to/azomshahriar/code-and-system-design-review-checklist-56c6</link>
      <guid>https://dev.to/azomshahriar/code-and-system-design-review-checklist-56c6</guid>
      <description>&lt;p&gt;When writing code, we need to review our own code and other's code as well as software system design and architecture. In this article, we try to share few important notes regarding code and system review.&lt;br&gt;
This checklist is mostly for java backend development. But can also be applied to other technology stacks.&lt;br&gt;
The checklists/notes will help developers ensure better code and system architecture.&lt;/p&gt;

&lt;p&gt;Category/Area of Review:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;General&lt;/li&gt;
&lt;li&gt;Clean Code &amp;amp; Code style &lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Performance &lt;/li&gt;
&lt;li&gt;Logging and Tracing&lt;/li&gt;
&lt;li&gt;Concurrency &lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Maintainability &amp;amp; Testability&lt;/li&gt;
&lt;li&gt;Domain(Business)&lt;/li&gt;
&lt;li&gt;Architecture&lt;/li&gt;
&lt;li&gt;Scalability &lt;/li&gt;
&lt;li&gt;Reliability &amp;amp; Resiliency&lt;/li&gt;
&lt;li&gt;Design pattern&lt;/li&gt;
&lt;li&gt;PCI DSS(FinTech)&lt;/li&gt;
&lt;li&gt;REST API design&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;General:&lt;br&gt;
Use checked exceptions for recoverable conditions and runtime exceptions for programming errors&lt;br&gt;
Try to use global exception handling and handle common Business and technical error response&lt;br&gt;
Never ignore exceptions. Don't overlook the catch block.&lt;br&gt;
Return empty arrays or collections, not nulls.&lt;br&gt;
Minimize the scope of local variables for earlier GC.&lt;br&gt;
Always override hashcode when overriding equal.&lt;br&gt;
Always override toString&lt;br&gt;
Use marker interface to define the type&lt;br&gt;
Use an executor thread pool for tasks and thread instead of unlimited thread creation.&lt;br&gt;
Use the BigDecimal valueof method for the string to bigdecimal/double conversion, otherwise, you will face a precision issue.&lt;br&gt;
Try to avoid string literals at business logic check. Use enum or constant for maintainable code.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
if(status = "SUCCESS")&lt;br&gt;
Good:&lt;br&gt;
if(status = EventStatus.SUCCESS)&lt;br&gt;
Throw Exceptions rather than Return codes in case of business and technical error.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
private String checkInput(Request request){&lt;br&gt;
   if(something wrong)&lt;br&gt;
      return "FAILED";&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
private String checkInput(Request request){&lt;br&gt;
    if(something wrong)&lt;br&gt;
      throw new BusinessErrorException(int code, String message)&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;Clean Code:&lt;br&gt;
Use Intention-Revealing Names for variable&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
void validate(String input)&lt;br&gt;
Good: &lt;br&gt;
void validateCardNumber(String cardNumber)&lt;br&gt;
Pick one word per concept.&lt;br&gt;
Use Solution/Problem Domain Names&lt;br&gt;
Classes should be small!&lt;br&gt;
Functions should be small!&lt;br&gt;
Do one thing in a function.&lt;br&gt;
Don't Repeat Yourself (Avoid code Duplication).&lt;br&gt;
Explain yourself in code(write why in code not what)&lt;br&gt;
Make sure the code formatting is applied(Can use tools)&lt;br&gt;
Each method should do a single task. Don't mix business logic and network calls with the same method. Try to make the method unit testable.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
public sendSms(){&lt;br&gt;
  // code for validation&lt;br&gt;
  if(mobile is valid mobile)&lt;br&gt;
  // code for sms generation&lt;br&gt;
  String smsBody = "Some Text"+variable+"text".&lt;br&gt;
  // network call to telco server&lt;br&gt;
  restTemplate.exchante(url,mobile,smsBody);&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
public processSms(){&lt;br&gt;
  validateMobile();&lt;br&gt;
  String smsBody = generateSmsBody(inputs);&lt;br&gt;
  sendSms(inputs)&lt;br&gt;
}&lt;br&gt;
private void validateMobile(String mobileNo){}&lt;br&gt;
private String generateSmsBody(Inputs….){}&lt;br&gt;
private sendSms(){}&lt;/p&gt;

&lt;p&gt;Security:&lt;br&gt;
Check access control or authorization besides authentication.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
Only verify the JWT token&lt;br&gt;
Good:&lt;br&gt;
Verify token and check use have authority to access that resource.&lt;br&gt;
All change event applications should be auditable(who performed this operation from which device and IP)&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
account(name,status,createdDate)&lt;br&gt;
Good:&lt;br&gt;
account(name,status,createDate,createdBy,lastModifiedDate,lastModifiedBy)&lt;br&gt;
Use password as an array of characters instead of String so that no one can get it from heap dump.&lt;br&gt;
Make class final if not being used for inheritance.&lt;br&gt;
Input into a system should be checked for valid data size and range and check mandatory input fields(boundary conditions)&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
TxnRequest{&lt;br&gt;
  String fromAc;&lt;br&gt;
  String toAc;&lt;br&gt;
  BigDecimal amount;&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
TxnRequest{ &lt;br&gt;
   @NotBlank(message="From AC Can't be blank.")&lt;br&gt;
   String fromAc;&lt;br&gt;
   @NotBlank(message="To AC can't be blank.")&lt;br&gt;
   String toAc;&lt;br&gt;
   &lt;a class="mentioned-user" href="https://dev.to/notnull"&gt;@notnull&lt;/a&gt;
(message="Amount can't be null.")&lt;br&gt;
   @Positive(message="Amount should be positive")&lt;br&gt;
   BigDecimal amount;&lt;br&gt;
}&lt;br&gt;
Avoid sensitive data logging(like pin, password, card info)&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
log.info("User:{}, Password{}",request.getUserName(),request.getPassword());&lt;br&gt;
Good:&lt;br&gt;
log.info("UserName:{}, Password:****",request.getUserName())&lt;br&gt;
Purge sensitive information from exceptions (exposing file path, internal system configuration)&lt;br&gt;
Be careful about SQL injection when DB queries.&lt;br&gt;
Check the API response fields. Is there any extra data or sensitive data are shared with the public?&lt;/p&gt;

&lt;p&gt;Bad: &lt;br&gt;
Ac Balance response:&lt;br&gt;
{"account":"10421020025347",&lt;br&gt;
"balance":550.00, &lt;br&gt;
"modifiedBy":"bank-checker-001",&lt;br&gt;
"userId":456,&lt;br&gt;
"customerInfo":{….}}&lt;br&gt;
Good: &lt;br&gt;
{"account":"10421020025347","balance":550.00}&lt;br&gt;
Define wrappers around native methods (not declare a native method public).&lt;br&gt;
Make public static fields final (to avoid caller changing the value)&lt;br&gt;
Try inter-service communication in a secured way(Implement SSL when service to service call)&lt;br&gt;
Separate public and private/internal API paths so that DevOps team can implement infra-level security and filter.&lt;/p&gt;

&lt;p&gt;Bad: &lt;br&gt;
api/v1/all public/admin/internal path,&lt;br&gt;
Good: &lt;br&gt;
api/v1/public path&lt;br&gt;
api-admin/v1/admin related path&lt;br&gt;
api-internal/v1/interapi&lt;br&gt;
In the case of microservice try to use a central auth server&lt;br&gt;
Check about authentication and authorization network call overhead in the case of a distributed system.&lt;br&gt;
Never use default credentials at production. Especially for system/infrastructure-related services. (DB, Cache, Auth, API GW, HTTP server, 3rd party library)&lt;br&gt;
Encrypt or one-way hash for OTP and other credentials.&lt;br&gt;
Ensure REST API security.&lt;/p&gt;

&lt;p&gt;Performance:&lt;br&gt;
Try to keep synchronized section small operation(CPU/network/memory)&lt;br&gt;
Avoid string literal concatenation back end component. Try to use a string builder.&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
String fullMessage = "";&lt;br&gt;
for(Result result : resultList){&lt;br&gt;
fullMessage = fullMessage+result.getMessagr();&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
StringBuilder fullMessage = new StringBuilder();&lt;br&gt;
for(Result result : resultList){&lt;br&gt;
fullMessage.append(result.getMessage()));&lt;br&gt;
}&lt;br&gt;
Avoid creating unnecessary objects.&lt;br&gt;
In case of network call use a connection pool, thread pool, socket pool.&lt;br&gt;
Profile DB query and check high search/read query happen on an indexed field.&lt;br&gt;
Release resources (Streams, Connections, etc) in all cases.&lt;br&gt;
Careful about ORM N+1 query and use Entitygraph to avoid N+1 query&lt;br&gt;
Always think about cache.&lt;br&gt;
In a distributed system(SOA or Microservice) always develop stateless service.&lt;br&gt;
Try to develop as many Asynchronous processes using JMS.&lt;br&gt;
Think about IO latency and CPU usage. If the system is an IO incentive try to use the NIO library.&lt;br&gt;
Check if any unused library goes into the production build.&lt;br&gt;
In the case of an in-memory store avoid full object serialization and use custom serialization to save memory. Think about JSON vs Messagepack vs protobuf.&lt;br&gt;
Try to avoid select * if not needed at DB query.&lt;br&gt;
Try always index-only scan, select the field which is indexed. The most important and readable field should be indexed. We can also use composite indexed-key.&lt;/p&gt;

&lt;p&gt;Logging &amp;amp; Tracing:&lt;br&gt;
Maintain proper log level&lt;br&gt;
Use placeholder (LOG.error("Could not… details: {}", something, exception)) and never String concatenation (LOG.error("Could not… details: " + something, exception))&lt;br&gt;
Don't trace excessive logs.&lt;br&gt;
In the case of Distributed Systems (SOA, Microservice) try to use Distributed tracing (Spring cloud sleuth, ELK, Zipkin)&lt;br&gt;
Don't log Sensitive Information&lt;br&gt;
Log User Context&lt;br&gt;
In the case of centralized logs use common trace id and service name.&lt;/p&gt;

&lt;p&gt;Concurrency:&lt;br&gt;
Avoid excessive synchronization for thread safety. Try to avoid sharing resources in case of a multithreaded environment.&lt;br&gt;
Avoid member variables when in the case of a singleton object or bean.&lt;br&gt;
Always synchronize share resources and also try to avoid share resource&lt;br&gt;
Use concurrent hashmap instead of Synchronize HashMap&lt;br&gt;
Use HashMap or HashSet instead if TreeMap/Set when ordering is not important. As time complexity O(1) vs O(logn)&lt;br&gt;
Always think about concurrency in the case of back-end service.&lt;br&gt;
When multiple users/threads update the same data, try to implement a lock(optimistic or pessimistic). For example account balance, ticket reservation, product stock.&lt;/p&gt;

&lt;p&gt;Error Handling:&lt;br&gt;
Reply consistent error response to the client.&lt;br&gt;
Handle proper error code(401,404,400 and 500)&lt;br&gt;
Use custom error code for the business logic errors.&lt;/p&gt;

&lt;p&gt;Typical Error Categories&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Business logic error&lt;/li&gt;
&lt;li&gt;Technical Error&lt;/li&gt;
&lt;li&gt;Upstream Service Error&lt;/li&gt;
&lt;li&gt;Common Error/Runtime Error
Architecture:
Follow twelve-factor app(&lt;a href="https://12factor.net"&gt;https://12factor.net&lt;/a&gt;)
Aware about distributed system fallacy (&lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&lt;/a&gt;)
For the data layer we can follow lambda architecture.
Try to implement event-based infrastructure for scalability.
Follow 12 architecture principle&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.N+1 Design. Never less than two of anything and remember the rule of three&lt;br&gt;
2.Design for Rollback. Ensure you can roll back any release of functionality&lt;br&gt;
3.Design to be disabled. Be able to turn off anything you released&lt;br&gt;
4.Design to be monitored. Think about monitoring during design. Not after.&lt;br&gt;
5.Design for multiple Live sites. Don't box yourself into one site solution&lt;br&gt;
6.Use mature technology. Use thing you know work well&lt;br&gt;
7.Asynchronous design. Communicate synchronously only when absolutely necessary&lt;br&gt;
8.Stateless Design. Use state only when the business return justifies it .&lt;br&gt;
9.Scale Out NOT Up. Never rely on a bigger or faster system.&lt;br&gt;
10.Design for at least two axes. Think one step ahead of your scale beads.&lt;br&gt;
11.Bue when Non Core. If you aren't the best at building it and it doesn't offer competitive differentiation, buy it.&lt;br&gt;
12.Commodity Hardware. Cheaper is better most of the time.&lt;br&gt;
Design Pattern:&lt;br&gt;
SOLID&lt;br&gt;
DRY&lt;br&gt;
KISS&lt;br&gt;
Creational Pattern(Singleton,Factory,Builder,Adapter)&lt;br&gt;
Behavioral Pattern(Strategy, Chain Responsibility, Observer).&lt;/p&gt;

&lt;p&gt;Scalability:&lt;br&gt;
Make the system elastic or easily scalable.&lt;br&gt;
Make the service stateless for horizontal scaling.&lt;br&gt;
DB Sharding&lt;br&gt;
DB Partition&lt;br&gt;
DB replication&lt;br&gt;
Use read replica for an independent read operation.&lt;br&gt;
Cache high read and low write operation.&lt;br&gt;
Monitor DB read and write query ratio.&lt;br&gt;
Reduce network call overhead (use socket pool or gRPC).&lt;br&gt;
Check DB network call round trip and always try to reduce it.&lt;br&gt;
Address the c10K problem for network communication.&lt;/p&gt;

&lt;p&gt;Reliability &amp;amp; Resiliency:&lt;br&gt;
Handle Timeout in case of all network call.&lt;br&gt;
Implement Circuit Breaker Pattern.&lt;br&gt;
Implement Bulkhead pattern&lt;br&gt;
Implement idempotent operation&lt;br&gt;
Use a fail-first mechanism when the system is really broken.&lt;/p&gt;

&lt;p&gt;Maintainability &amp;amp; Testability:&lt;br&gt;
How much test coverage does your system have?&lt;br&gt;
Unit, Integration, and System Testing coverage.&lt;br&gt;
Proper CI/CD pipeline.&lt;br&gt;
Do as much automation.&lt;br&gt;
Implement proper production deployment test strategy( canary, AB testing)&lt;/p&gt;

&lt;p&gt;Monitoring/Observability:&lt;br&gt;
Monitor your system's health and resources.&lt;br&gt;
Database Memory and disk size&lt;br&gt;
Application and DB server CPU, memory and Load average, and IO&lt;br&gt;
Application latency and throughput.&lt;br&gt;
Application resource(JVM memory, thread, thread pool, connection pool, queue, JMS memory)&lt;br&gt;
Isolate Logging, Tracing, and metric analysis.&lt;br&gt;
Monitor your business performance.&lt;/p&gt;

&lt;p&gt;Business Domain:&lt;br&gt;
Business Logic implemented properly at the codebase&lt;br&gt;
Service properly isolated against the domain and bounded context.&lt;br&gt;
Try to follow the domain-driven design.&lt;/p&gt;

&lt;p&gt;PCI DSS:(For FinTech):&lt;br&gt;
12 requirements:&lt;br&gt;
1.Install and maintain a firewall configuration to protect cardholder data&lt;br&gt;
2.Do not use vendor-supplied defaults for system passwords and other security parameters&lt;br&gt;
3.Protect stored cardholder data&lt;br&gt;
4.Encrypt transmission of cardholder data across open, public networks&lt;br&gt;
5.Use and regularly update anti-virus software or programs&lt;br&gt;
6.Develop and maintain secure systems and applications&lt;br&gt;
7.Restrict access to cardholder data by business need to know&lt;br&gt;
8.Assign a unique ID to each person with computer access&lt;br&gt;
9.Restrict physical access to cardholder data&lt;br&gt;
10.Track and monitor all access to network resources and cardholder data&lt;br&gt;
11.Regularly test security systems and processes&lt;br&gt;
12.Maintain a policy that addresses information security for all personnel&lt;br&gt;
REST API Design:&lt;br&gt;
Use kebab-case for URLs&lt;/p&gt;

&lt;p&gt;Bad: /systemOrders or /system_orders&lt;br&gt;
Good: /system-orders&lt;br&gt;
Use camelCase for Parameters&lt;/p&gt;

&lt;p&gt;Bad: /system-orders/{order_id} or /system-orders/{OrderId}&lt;br&gt;
Good: /system-orders/{orderId}&lt;br&gt;
Plural Name to Point to a Collection&lt;/p&gt;

&lt;p&gt;Bad: GET /user or GET /User&lt;br&gt;
Good: GET /users&lt;br&gt;
Keep Verbs out of Your Resource URL&lt;/p&gt;

&lt;p&gt;Bad: POST /updateuser/{userId} or GET /getusers&lt;br&gt;
Good: PUT /user/{userId}&lt;br&gt;
Use Verbs for Non-Resource URL or specific operation&lt;/p&gt;

&lt;p&gt;POST /alerts/245743/resend&lt;br&gt;
Use camelCase for JSON property&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
{&lt;br&gt;
user_name: "Mr Rahim"&lt;br&gt;
user_id: "1"&lt;br&gt;
}&lt;br&gt;
Good:&lt;br&gt;
{&lt;br&gt;
userName: "Mr. Karim"&lt;br&gt;
userId: "1"&lt;br&gt;
}&lt;br&gt;
Don't use table_name for the resource name&lt;/p&gt;

&lt;p&gt;Bad: product_order&lt;br&gt;
Good: product-orders&lt;br&gt;
This is because exposing the underlying architecture is not your purpose.&lt;br&gt;
Use API version&lt;/p&gt;

&lt;p&gt;Good: &lt;a href="http://api.domain.com/v1/shops/3/products"&gt;http://api.domain.com/v1/shops/3/products&lt;/a&gt;&lt;br&gt;
Accept limit and offset Parameters&lt;/p&gt;

&lt;p&gt;GET /shops?offset=5&amp;amp;limit=5&lt;br&gt;
Don't Pass Authentication Tokens in URL&lt;/p&gt;

&lt;p&gt;Bad:&lt;br&gt;
GET /shops/123?token=some_kind_of_authenticaiton_token&lt;br&gt;
Good:&lt;br&gt;
Instead, pass them with the header:&lt;br&gt;
Authorization: Bearer xxxxxx, Extra yyyyy&lt;br&gt;
Use the Relation in the URL For Nested Resources&lt;/p&gt;

&lt;p&gt;GET /shops/2/products : Get the list of all products from shop 2.&lt;br&gt;
GET /shops/2/products/31: Get the details of product 31, which belongs to shop 2.&lt;br&gt;
CORS&lt;/p&gt;

&lt;p&gt;Do support CORS (Cross-Origin Resource Sharing) headers for all public-facing APIs.&lt;br&gt;
Consider supporting a CORS allowed origin of "*", and enforcing authorization through valid OAuth tokens.&lt;br&gt;
Avoid combining user credentials with origin validation.&lt;br&gt;
Security&lt;br&gt;
Enforce HTTPS (TLS-encrypted) across all endpoints, resources, and services.&lt;br&gt;
Enforce and require HTTPS for all callback URLs, push notification endpoints, and webhooks.&lt;br&gt;
Reviewer &amp;amp; reviewee's behavior and attitude when reviewing other's code:&lt;br&gt;
Be kind&lt;br&gt;
Accept that many programming decisions are opinions. Discuss trade offs, which you prefer, and reach a resolution quickly.&lt;br&gt;
Ask questions; don't make demands. ("What do you think about naming this :user_id?")&lt;br&gt;
Ask for clarification. ("I didn't understand. Can you clarify?")&lt;br&gt;
Avoid selective ownership of code. ("mine", "not mine", "yours")&lt;br&gt;
Avoid using terms that could be seen as referring to personal traits. ("dumb", "stupid"). Assume everyone is intelligent and well-meaning.&lt;br&gt;
Be explicit. Remember people don't always understand your intentions online.&lt;br&gt;
Be humble. ("I'm not sure - let's look it up.")&lt;br&gt;
Don't use hyperbole. ("always", "never", "endlessly", "nothing")&lt;br&gt;
Be careful about the use of sarcasm. Everything we do is public; what seems like good-natured ribbing to you and a long-time colleague might come off as mean and unwelcoming to a person new to the project.&lt;br&gt;
Consider one-on-one chats or video calls if there are too many "I didn't understand" or "Alternative solution:" comments. Post a follow-up comment summarizing one-on-one discussion.&lt;br&gt;
If you ask a question to a specific person, always start the comment by mentioning them; this ensures they see it if their notification level is set to "mentioned" and other people understand they don't have to respond.&lt;/p&gt;

&lt;p&gt;Resources:&lt;br&gt;
&lt;a href="https://owasp.org/www-pdf-archive/OWASP_Code_Review_Guide_v2.pdfhttps://dzone.com/articles/java-code-review-checklisthttps://www.codementor.io/blog/code-review-checklist-76q7ovkaqjhttps://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdfhttps://dimikcomputing.com/course/clean-code-online-course/https://stackoverflow.com/questions/7186204/bigdecimal-to-use-new-or-valueofhttps://www.geeksforgeeks.org/use-char-array-string-storing-passwords-java/https://betterprogramming.pub/10-essential-tips-for-writing-secure-rest-api-e297990d48c5https://cloud.google.com/architecture/application-deployment-and-testing-strategieshttps://docs.gitlab.com/ee/development/code_review.html"&gt;https://owasp.org/www-pdf-archive/OWASP_Code_Review_Guide_v2.pdfhttps://dzone.com/articles/java-code-review-checklisthttps://www.codementor.io/blog/code-review-checklist-76q7ovkaqjhttps://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdfhttps://dimikcomputing.com/course/clean-code-online-course/https://stackoverflow.com/questions/7186204/bigdecimal-to-use-new-or-valueofhttps://www.geeksforgeeks.org/use-char-array-string-storing-passwords-java/https://betterprogramming.pub/10-essential-tips-for-writing-secure-rest-api-e297990d48c5https://cloud.google.com/architecture/application-deployment-and-testing-strategieshttps://docs.gitlab.com/ee/development/code_review.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>systemdesign</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Styling with CSS Modules</title>
      <author>Nico Bachner</author>
      <pubDate>Fri, 10 Sep 2021 12:17:37 +0000</pubDate>
      <link>https://dev.to/nico_bachner/styling-with-css-modules-jb5</link>
      <guid>https://dev.to/nico_bachner/styling-with-css-modules-jb5</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt; are one of the most common ways of styling React applications. Because they consist of plain CSS, they are easily understandable.&lt;/p&gt;

&lt;p&gt;CSS Modules achieves what is called &lt;strong&gt;&lt;em&gt;weak scoping&lt;/em&gt;&lt;/strong&gt;. This means that, although styles are scoped to their respective components, they can still be overridden by external styles. Depending on how you use this property, this is what makes CSS Modules so incredibly effective.&lt;/p&gt;

&lt;p&gt;Normally, styling components with CSS modules looks something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Component.module.css */&lt;/span&gt;
&lt;span class="nc"&gt;.component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;property-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Component.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VFC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's all well and good. But what if you want to be able to adjust the styles from &lt;strong&gt;outside&lt;/strong&gt; the component? That starts to get tricky.&lt;/p&gt;

&lt;p&gt;Fortunately, CSS Module imports are regular JavaScript objects. That means we can manipulate them as we usually would. One possible manipulation that is especially useful for us is &lt;strong&gt;&lt;em&gt;string indexing&lt;/em&gt;&lt;/strong&gt;. It allows us to choose which style to apply based on a string input.&lt;/p&gt;

&lt;p&gt;If we apply &lt;em&gt;string indexing&lt;/em&gt; to the previous example, we get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Component.module.css */&lt;/span&gt;
&lt;span class="nc"&gt;.variant-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-1-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;property-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-2-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.variant-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-1-2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;property-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-2-2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.variant-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-1-3'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;property-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-2-3'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Component.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;variant&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`variant-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VFC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We now have the ability to change the styling of the component through one of its props.&lt;/p&gt;

&lt;p&gt;But why stop there? What about styling through &lt;strong&gt;multiple&lt;/strong&gt; props?&lt;/p&gt;

&lt;p&gt;It is possible, and can be achieved through &lt;strong&gt;&lt;em&gt;string concatenation&lt;/em&gt;&lt;/strong&gt; — the joining of two strings together into one large string. Applied to our example, it looks like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Component.module.css */&lt;/span&gt;
&lt;span class="nc"&gt;.property1-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-1-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.property2-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-2-1'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.property1-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-1-2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.property2-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-2-2'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.property1-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-1-3'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.property2-3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;property-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'value-2-3'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Component.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component.module.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ComponentProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;property1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="na"&gt;property2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FC&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ComponentProps&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; 
    &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;property1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="nx"&gt;property2&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;
            &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`property1-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;`property1-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;property2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// index.tsx&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Component&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;VFC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="na"&gt;property1&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"2"&lt;/span&gt; &lt;span class="na"&gt;property2&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"3"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Some Content&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One thing to look out for is the whitespace as the argument of &lt;code&gt;.join()&lt;/code&gt;. Without it, the class names would just be concatenated into one long name that the browser cannot recognise. Adding the space separates the class names into recognisable tokens.&lt;/p&gt;

&lt;p&gt;Notice how have full control over how fine-grain the control should be? The previous example only had one control point (the &lt;code&gt;variant&lt;/code&gt;), but it could just as well have a prop for each individual style property. This flexibility is especially useful when architecting a design system.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>css</category>
    </item>
    <item>
      <title>How to Debug PHP Using Xdebug On Vscode</title>
      <author>Prosper Yong</author>
      <pubDate>Fri, 10 Sep 2021 12:13:15 +0000</pubDate>
      <link>https://dev.to/yongdev/how-to-debug-php-using-xdebug-on-vscode-3n4</link>
      <guid>https://dev.to/yongdev/how-to-debug-php-using-xdebug-on-vscode-3n4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;It's important to keep a few things in mind while developing web apps. &lt;br&gt;
When it comes to building large and powerful applications, a competent developer will always follow best practices. Testing, debugging, performance, and security of websites or apps are some of these techniques. &lt;br&gt;
Using VSCode and the PHP xDebug module, you'll enable full-featured functional debugging throughout your whole application.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;The following criteria must be met in order to follow along with this guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A PHP development environment that runs at least PHP 7.0.&lt;/li&gt;
&lt;li&gt;An appropriate version of &lt;a href="https://code.visualstudio.com/#alt-downloads"&gt;Visual Studio Code&lt;/a&gt; for your operating system &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#step-1-how-to-download-and-install-the-xdebug-tool"&gt;
  &lt;/a&gt;
  Step 1 — How to Download and Install the XDebug Tool
&lt;/h2&gt;

&lt;p&gt;Real-time debugging is made possible using Xdebug, a PHP extension. On the other hand, it can be useful for troubleshooting server-side problems. Since it shouldn't be active on most requests, Xdebug isn't enabled in the same manner as the other extensions are.You would install it following the steps below:&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#windows"&gt;
  &lt;/a&gt;
  Windows
&lt;/h4&gt;

&lt;p&gt;Xdebug provides a wizard tool for Windows users to obtain a &lt;code&gt;.dll&lt;/code&gt; file. In order to do this, first create a PHP file in a folder, and then add the following code line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; 
&lt;span class="nb"&gt;phpinfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use your browser to launch the &lt;code&gt;index.php&lt;/code&gt; file . This will provide the information displayed in the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N_bf6q52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5skbxjv9egtv64hqrxq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N_bf6q52--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l5skbxjv9egtv64hqrxq.png" alt="php info"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Select and copy all information on the page.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You'll next need to go to the XDebug &lt;a href="https://xdebug.org/wizard.php"&gt;Wizard tool&lt;/a&gt; and paste the information into a Text Box input field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look for 'Analyze my phpinfo() output' and click it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3TbDVwtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz7s3xcvzz3prm7h3n4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3TbDVwtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tz7s3xcvzz3prm7h3n4g.png" alt="Xdebug wizard"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There is a module that may be downloaded under Instructions, number 1. As you can see in the image below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gZ0m43wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0l9e78lmomvui8ae8mb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gZ0m43wS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e0l9e78lmomvui8ae8mb.png" alt="Instruction"&gt;&lt;/a&gt;&lt;br&gt;
Please note that the path to the directory in this example may be different from yours, so please pay attention to the directions in the image above.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#mac"&gt;
  &lt;/a&gt;
  MAC
&lt;/h4&gt;

&lt;p&gt;You can install PHP7 Xdebug using pecl extension:&lt;br&gt;
&lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pecl install xdebug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#linux"&gt;
  &lt;/a&gt;
  Linux
&lt;/h4&gt;

&lt;p&gt;On Linux distribution like fedora 32, you can use Sudo to install Xdebug in PHP:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo yum install php-xdebug
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;you can refer to the &lt;a href="https://xdebug.org/docs/install"&gt;xdebug&lt;/a&gt; docs if you use other linux distribution.&lt;br&gt;
It's time to enable Xdebug by adding the following code to file &lt;code&gt;xdebug.ini&lt;/code&gt; under &lt;code&gt;etc/php/7.0/mods-available/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ini"&gt;&lt;code&gt;&lt;span class="py"&gt;xdebug.profiler_enable_trigger&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="py"&gt;xdebug.profiler_enable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;span class="py"&gt;xdebug.remote_enable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="py"&gt;xdebug.profiler_output_dir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/tmp"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now restart your server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-enabling-the-xdebug-extension-in-php"&gt;
  &lt;/a&gt;
  Step 2 — Enabling the XDebug extension in PHP
&lt;/h2&gt;

&lt;p&gt;Microsoft's Visual Studio Code (VS Code) is a free open source text editor. VS Code is available for Windows, Linux, and Mac. There are significant features in the editor that make VS Code one of the most popular programming environments in recent years, despite its size.&lt;br&gt;
Firt&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Launch VS Code&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Install the Felix Becker PHP Debug extension. The PHP Debug extension may be found in VSCode's Extensions tab by searching for it.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AqCfVxsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbnqixt6qa7wtmvylj4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AqCfVxsu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbnqixt6qa7wtmvylj4k.png" alt="PHP DEBUG"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on the &lt;code&gt;Run&lt;/code&gt; tab and click on add configuration.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xq_ebMYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6tl0ctfvzlg1kudpycn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xq_ebMYS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p6tl0ctfvzlg1kudpycn.png" alt="Run Tab"&gt;&lt;/a&gt;&lt;br&gt;
Now, you'll need to pick the PHP environment. A new &lt;code&gt;launch.json&lt;/code&gt; file will be added to the root directory by VSCode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A29X0v9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr61mgfmvd2za9et74o2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A29X0v9P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr61mgfmvd2za9et74o2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Finally, add the &lt;code&gt;runtimeExecutable&lt;/code&gt; property to the list after port replacing &lt;code&gt;path_to_php_executable&lt;/code&gt; with the path to your php executable:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"runtimeExecutable"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"path_to_php_executable"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rPLjeTeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbcoekvtknptin3sh0j8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rPLjeTeQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbcoekvtknptin3sh0j8.png" alt="Launch.json"&gt;&lt;/a&gt;&lt;br&gt;
Please save the file &lt;code&gt;launch.json&lt;/code&gt;. Start debugging by opening the debug mode tab and clicking the green debug button.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IELqG8eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m3moxvtqpnv9gaol0vv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IELqG8eI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4m3moxvtqpnv9gaol0vv.png" alt="debug"&gt;&lt;/a&gt;&lt;br&gt;
You will now see several options in the window, via which you can pick what logs Xdebugger will show like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Notices&lt;/li&gt;
&lt;li&gt;Warnings&lt;/li&gt;
&lt;li&gt;Errors&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Everything&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Access the Debug Console, which displays error information and debug execution buttons at the top.&lt;/p&gt;

&lt;p&gt;You have the option to make your selections. What I'm going to tell you now is something I've previously addressed in the early stage breakpoints. A breakpoint on a line of code is now available. It's important to note that Xdebug will display the PHP debug script name and line number in the bottom left area.&lt;/p&gt;

&lt;p&gt;In order to debug the application correctly you may launch it in the browser and then go through the code line-by line to spot the issues and fix them. A few shortcut keys for functions and lines of codes should also be remembered:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;F5&lt;/code&gt;:  Continue Debugging&lt;/p&gt;

&lt;p&gt;&lt;code&gt;F10&lt;/code&gt;: Step Over&lt;/p&gt;

&lt;p&gt;&lt;code&gt;F11&lt;/code&gt;: Step into&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Shift + F11&lt;/code&gt;: Step out&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ci04aJC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqf89plvc6dtplkvt4pp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ci04aJC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eqf89plvc6dtplkvt4pp.png" alt="debug"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Software development is never complete without debugging.&lt;br&gt;
 You can't tell what's wrong with the code without it.&lt;br&gt;
 A PHP debugger that identifies problems and warning signals fast is a fantastic idea if you're working on an application with thousands of lines of code and you want to be sure you've set up your debugging environment before you start writing code.&lt;/p&gt;

&lt;p&gt;In this article, you learnt how to enable PHP debugging with Xdebug and setup it in VSCode. IDEs like as Eclipse, PHPstorm, and others can also be used to incorporate it.&lt;/p&gt;

</description>
      <category>php</category>
      <category>vscode</category>
      <category>xdebug</category>
      <category>devops</category>
    </item>
    <item>
      <title>I've created my portfolio.</title>
      <author>Andrew Parris</author>
      <pubDate>Fri, 10 Sep 2021 12:12:20 +0000</pubDate>
      <link>https://dev.to/adparris/i-ve-created-my-portfolio-1h0e</link>
      <guid>https://dev.to/adparris/i-ve-created-my-portfolio-1h0e</guid>
      <description>&lt;p&gt;I spent the last two weeks putting this together. Just looking other coders perspectives on it. It tells a short story about my coding journey. The site was created with Gatsby. Let me know what you think!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://adparris.github.io/"&gt;https://adparris.github.io/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gatsby</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Rust VPP API Bindings | LFX Mentorship Project </title>
      <author>felixfaisal</author>
      <pubDate>Fri, 10 Sep 2021 12:09:37 +0000</pubDate>
      <link>https://dev.to/felixfaisal/rust-vpp-api-bindings-lfx-mentorship-project-2g8p</link>
      <guid>https://dev.to/felixfaisal/rust-vpp-api-bindings-lfx-mentorship-project-2g8p</guid>
      <description>&lt;p&gt;Hey Everyone, This article is about Rust VPP API Bindings project which was a part of LFX Mentorship. I had this amazing opportunity to work under the guidance of &lt;a href="https://twitter.com/ayourtch"&gt;Andrew Yourtchenko&lt;/a&gt; on this project. So let's get started  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-vpp-thinking"&gt;
  &lt;/a&gt;
  What is VPP 🤔
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;FD.IO&lt;/strong&gt; is an Open Source Dataplane developed by Cisco that runs in user space. At the heart of FD.IO is VPP which stands for Vector Packet Processor. So emphasis on &lt;strong&gt;Vector&lt;/strong&gt; as opposed to Scalar Packet Processor wherein a single packet is processed at a time, VPP processes a vector of packets at a time which results in high performance. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;It's like moving a load of marbles with a wheelbarrow instead of spoon&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many exciting applications of VPP in Cloud Native and Networking space, I will be leaving links here for you to explore 🚀 &lt;br&gt;
&lt;a href="https://docs.projectcalico.org/getting-started/kubernetes/vpp/getting-started"&gt;Project Calico/VPP&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/swlh/kernel-bypass-networking-with-fd-io-and-vpp-fc3a53a669f9"&gt;VPP Case Study&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#architecture-monocleface"&gt;
  &lt;/a&gt;
  Architecture 🧐
&lt;/h2&gt;

&lt;p&gt;Here's the architecture of our project&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9cHn3xsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg2px9agt7z37runma4s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9cHn3xsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gg2px9agt7z37runma4s.png" alt="alt text"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapitransport"&gt;
  &lt;/a&gt;
  VPP-API-Transport
&lt;/h3&gt;

&lt;p&gt;This crate is responsible for establishing a connection to a running VPP process either via a socket or a shared memory interface. It also holds various functions for sending data via the connection.  &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapiencoding"&gt;
  &lt;/a&gt;
  VPP-API-Encoding
&lt;/h3&gt;

&lt;p&gt;Encoding library holds various encapsulated data structures that are responsible for interacting with VPP. The library majorly ensures the deserializing and serializng of data structures are compatible with VPP. We are using serde+bincode for all serializing and deserializing to binary. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapidriver"&gt;
  &lt;/a&gt;
  VPP-API-Driver
&lt;/h3&gt;

&lt;p&gt;Driver library consists of functions that makes use of ingredients of Transport and Encoding which allows sending messages and receiving them easier. There are 3 types of messages that can be sent to VPP. (Referenced from Developer Documentation of VPP) &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Request/Reply&lt;/strong&gt; The client sends a request message and the server replies with a single reply message. The convention is that the reply message is named as method_name + &lt;strong&gt;Reply&lt;/strong&gt;. Eg: &lt;code&gt;SwInterfaceAddDelAddressReply&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dump/Detail&lt;/strong&gt; The client sends a “bulk” request message to the server, and the server replies with a set of detail messages. These messages may be of different type. A dump/detail call must be enclosed in a control ping block (Otherwise the client will not know the end of the bulk transmission). The method name must end with method + &lt;strong&gt;Dump&lt;/strong&gt;, the reply message should be named method + &lt;strong&gt;Details&lt;/strong&gt;. The exception here is for the methods that return multiple message types (e.g. &lt;code&gt;SwInterfaceDump&lt;/code&gt;). The Dump/Detail methods are typically used for acquiring bulk information, like the complete FIB table or details of all the existing Interfaces.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Events&lt;/strong&gt; The client can register for getting asynchronous notifications from the server. This is useful for getting interface state changes, and so on. This a type of message that is not yet supported. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is a function that is responsible of sending Request/Reply message&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;pub&lt;/span&gt; &lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="n"&gt;send_recv_msg&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Serialize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Deserialize&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;'a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Serialize&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;DeserializeOwned&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;dyn&lt;/span&gt; &lt;span class="n"&gt;VppApiTransport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;reply_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;TR&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;vl_msg_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.get_msg_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;reply_vl_msg_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.get_msg_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reply_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_encoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="nf"&gt;.serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;vl_msg_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_encoder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enc&lt;/span&gt;&lt;span class="nf"&gt;.serialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="nf"&gt;.extend_from_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MSG[{} = 0x{:x}]: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vl_msg_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;loop&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.read_one_msg_id_and_msg&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c"&gt;// dbg!(&amp;amp;res);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nf"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;msg_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id: {} data: {:x?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;msg_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;reply_vl_msg_id&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;get_encoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="nf"&gt;.allow_trailing_bytes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="py"&gt;.deserialize&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;TR&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nd"&gt;panic!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Result is an error: {:?}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#vppapigen"&gt;
  &lt;/a&gt;
  VPP-API-Gen
&lt;/h3&gt;

&lt;p&gt;This is the most important part of Rust VPP, As it ingests Binary APIs and generates Rust bindings as a separate package which is nothing but the &lt;strong&gt;VPP-API&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tGbSx-pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5idj3qiavu7jbad711b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tGbSx-pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z5idj3qiavu7jbad711b.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VPP provides a binary API scheme to allow a wide variety of client codes to program data-plane tables. As of this writing, there are hundreds of binary APIs. Messages are defined in &lt;code&gt;*.api&lt;/code&gt; files. However we are using Messages defined in &lt;code&gt;*.api.json*&lt;/code&gt; which are self contained api files written in JSON format. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#vppapimacros"&gt;
  &lt;/a&gt;
  VPP-API-Macros
&lt;/h3&gt;

&lt;p&gt;Macro library consists of procedural macros that make the generated rust bindings more ergonomic and provide  sophisticated abstractions. The &lt;strong&gt;VPPMessage&lt;/strong&gt; macro is a builder macro that allows you to initialize VPP messages in a less tiring fashion and also implements a derive for message name and crc. Another macro &lt;strong&gt;VPPUnionIdent&lt;/strong&gt; creates accessor methods for the Union which makes it easier for the users to initialize it without having to fill the entire union. &lt;/p&gt;

&lt;p&gt;Here is an example of using builder&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;create_host_interface&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;CliInbandReply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;send_recv_msg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;CliInband&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_message_name_and_crc&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;CliInband&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.client_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="nf"&gt;.get_client_index&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nf"&gt;.context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;.cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"create host-interface name vpp1out"&lt;/span&gt;&lt;span class="nf"&gt;.try_into&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nf"&gt;.build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="nf"&gt;.unwrap&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nn"&gt;CliInbandReply&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;get_message_name_and_crc&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#future-and-testing"&gt;
  &lt;/a&gt;
  Future and Testing
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The integration tests currently only ensure if the messages are sent to VPP and received back without checking if it's the reply we are expecting, It has been added into the CI of the repository using GitHub Actions.&lt;/li&gt;
&lt;li&gt;As mentioned earlier we do not support events messages as of now but hoping to develop it in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#pull-requests-nerdface"&gt;
  &lt;/a&gt;
  Pull Requests 🤓
&lt;/h2&gt;

&lt;p&gt;Here are all my pull requests: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/1"&gt;Linux Foundation Mentorship - Rust VPP Bindings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/5"&gt;EnumFlags Generation &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/6"&gt;Union Accessor Methods and Example File Manipulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/7"&gt;Documentation Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-gen/pull/9"&gt;Updated with EnumFlag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-encoding/pull/1"&gt;Adding IP address to the interface &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ayourtch/vpp-api-encoding/pull/2"&gt;EnumFlags and FixedSizeArray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#things-i-learnt-sunglasses"&gt;
  &lt;/a&gt;
  Things I learnt 😎
&lt;/h2&gt;

&lt;p&gt;This project is the best project I've worked on so far, I got to explore and implement many Rust features &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Rust Macros&lt;/strong&gt;: I learnt and implemented procedural macros using Rust and created VPP-api-macros which proved to be very useful in making the code abstracted. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Serde&lt;/strong&gt;: I explored Serde which is a crate for serializing and deserializing, I was able to implement custom serialization and deserialization for EnumFlags and Unions. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;VPP&lt;/strong&gt;: It took me a while to get started and learn about VPP but by the end of the first half, I was able to grasp what VPP is and what it does. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Golang&lt;/strong&gt;: I learnt Go to explore GoVPP bindings and understand their philosophy in generating bindings and possibly using some of it in Rust VPP. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Traits&lt;/strong&gt;: Before the mentorship I was still struggling with properly understanding traits but during the course of the project I became much more confident about my understanding of traits &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Functional Programming in Rust&lt;/strong&gt;: Parts of the project has been written using concepts of Functional Programming, I sort of had to learn a bit of functional programming as I had mostly programmed using OOP. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#thank-you-partyingface"&gt;
  &lt;/a&gt;
  Thank you 🥳
&lt;/h2&gt;

&lt;p&gt;Shoutout to the Rust Foundation Discord Server for always helping me out with my queries be it how silly they were.  &lt;a href="https://www.youtube.com/channel/UC_iD0xppBwwsrM9DegC5cQQ"&gt;Jon Gjengset&lt;/a&gt; for creating extensive videos on difficult parts of Rust, Linux Foundation for this amazing program that allowed me to work with Rust and lastly my mentor Andrew for guiding me at every step of the project. &lt;/p&gt;

</description>
      <category>rust</category>
      <category>coding</category>
      <category>opensource</category>
      <category>network</category>
    </item>
  </channel>
</rss>
