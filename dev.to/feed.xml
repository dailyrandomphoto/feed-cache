<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>PUSHARD Progressively deploy commits between AWS Amplify environments</title>
      <author>Alessandro Annini</author>
      <pubDate>Fri, 03 Dec 2021 17:07:22 +0000</pubDate>
      <link>https://dev.to/ale_annini/pushard-progressively-deploy-commits-between-aws-amplify-environments-4mjj</link>
      <guid>https://dev.to/ale_annini/pushard-progressively-deploy-commits-between-aws-amplify-environments-4mjj</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;When creating a new project with AWS Amplify life is good: you have a lot of different AWS services handy and ready to be used in a integrated way. If you ever used Amplify you know what we are talking about.&lt;br&gt;
Everything is fine until you begin to use &lt;a href="https://docs.amplify.aws/cli/teams/overview/"&gt;Amplify environments&lt;/a&gt;. This is because Amplify creates a copy of every service you are using for every environment you are creating. When it comes to Appsync there is no exception.&lt;/p&gt;

&lt;p&gt;If you need different environment like &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; (maybe you even have &lt;code&gt;demo&lt;/code&gt;!) you will find yourself with three times your cognito pools (if you have authentication), three times your lambdas and three times your graphql tables. Often times when you are developing, you will have to make changes to your &lt;code&gt;schema.graphql&lt;/code&gt; but you don't want to reflect those changes in other environments right away because maybe the UI is still not updated or simply because your work isn't completly done yet and you don't want to deploy a broken version.&lt;br&gt;
The problem you can incur into is a known Amplify problem, in fact AWS even has a section on their docs about it: &lt;a href="https://docs.amplify.aws/cli-legacy/graphql-transformer/key/#deploying-multiple-secondary-indices-gsi"&gt;Deploying multiple secondary indices (GSI)&lt;/a&gt;, and their github repository has a lot of issues about this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Attempting to mutate more than 1 global secondary index at the same time on the &amp;lt;table_name&amp;gt; table in the stack.
An error occurred during the push operation: Attempting to mutate more than 1 global secondary index at the same time on the &amp;lt;table_name&amp;gt; table in the  stack.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If you try to modify 2 or more connections on the same table, when you try to push your changes to Cloud Formation with the command &lt;code&gt;amplify push&lt;/code&gt;, you will get this error. When you're working on the development branch is not a big deal because you only have to make multiple "amplify push" in order to gradually change the connections state.&lt;/p&gt;

&lt;p&gt;The REAL problem comes after you have made a number of amplify push on your development environment and you want to replicate the final schema.graphql to the test or production environment. Suppose you made 10 amplify push on your development environment but your production environment has never been updated after push number 3: now if you try to move your current schema.graphql (let's call it version 10) over your schema.graphql version 3 on production, you will have a big problem. Amplify won't be able to make multiple updates on the secondary indexes of your production tables just like it wasn't before, when you was trying to make only two updates together on the same table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You would have to replicate the exact sequence of successful updates you made on you development environment to you production one.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here comes into play PUSHARD!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EB12C46d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/nautes-tech/pushard/main/images/flow.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EB12C46d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/nautes-tech/pushard/main/images/flow.png" alt="git-action flwo" title="git-action flow" width="490" height="817"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First of all &lt;strong&gt;you have to&lt;/strong&gt; make a commit on git after &lt;strong&gt;every&lt;/strong&gt; &lt;code&gt;amplify push&lt;/code&gt; on your environment.&lt;br&gt;
This Git Action will then take care to grab your commit hisory from development branch, detect the exact slice of commits you need to fully replicate the development verison of schema.graphql to your target environment. In order to deploy every update it will try to merge the current development commit into target branch, launch &lt;code&gt;amplify push&lt;/code&gt; command and finally &lt;code&gt;git commit&lt;/code&gt; the result after every successful operation on the target branch.&lt;br&gt;
If something shoud go south during the process, it will push to git everything is committed at the time, the next time it will try to pick up the process where it left off.&lt;/p&gt;

&lt;p&gt;Now, this flow is correct from a AWS standpoint because DynamoDB will be able to update step by step its tables. But at the same time, when asking many consecutive Cloud Formation updates, especially if you created or updated a lambda in your stack too, will take longer than the time of the simple &lt;code&gt;amplify push&lt;/code&gt; command, so, at the next iteragion of updates loop, you could have another error:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Resource is not in the state stackUpdateComplete
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This means that Cloud Formation has not yet completely update your lambda resources and, because of this, it won't be able to make further updates.&lt;br&gt;
Because of this you &lt;strong&gt;have to&lt;/strong&gt; make a commit after every time you create or modify a lambda function. This way our Git Action will be able to successfully push the change to amplify and during the next loop iteration it will wait for Cloud Formation to be in the &lt;code&gt;UPDATE_COMPLETE&lt;/code&gt; state before trying to update the stack again.&lt;/p&gt;

&lt;p&gt;When the git action is starting it can send you a Telegram message writing how many commits it will take from development to the target branch; it will message you after every successful &lt;code&gt;amplify push&lt;/code&gt; operation and if something goes wrong.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/nautes-tech/pushard/blob/main/LICENSE"&gt;LICENSE&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/nautes-tech/pushard/blob/main/README.md"&gt;README&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nautes-tech"&gt;
        nautes-tech
      &lt;/a&gt; / &lt;a href="https://github.com/nautes-tech/pushard"&gt;
        pushard
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Progressively deploy commits between AWS Amplify environments
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
PUSHARD Progressively deploy commits between AWS Amplify environments&lt;/h1&gt;
&lt;br&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;When creating a new project with AWS Amplify life is good: you have a lot of different AWS services handy and ready to be used in a integrated way. If you ever used Amplify you know what we are talking about
Everything is fine until you begin to use &lt;a href="https://docs.amplify.aws/cli/teams/overview/" rel="nofollow"&gt;Amplify environments&lt;/a&gt;. This is because Amplify creates a copy of every service you are using for every environment you are creating. When it comes to Appsync there is no exception.&lt;/p&gt;
&lt;p&gt;If you need different environment like &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; (maybe you even have &lt;code&gt;demo&lt;/code&gt;!) you will find yourself with three times your cognito pools (if you have authentication), three times your lambdas and three times your graphql tables. Often times when you are developing, you will have to make changes to your &lt;code&gt;schema.graphql&lt;/code&gt; but you don't want to…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nautes-tech/pushard"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments, Maintainer Must-Haves.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;pushard&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;inputs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;deployHash&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Target&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;deploy&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;hash'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;skipHashes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Deploys&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;to&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;skip'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;
      &lt;span class="na"&gt;dstBranch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;Destination&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;branch'&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;run_pushard&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run PUSHARD&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-18.04&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup Node.js environment&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2.1.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create working dir&lt;/span&gt;
        &lt;span class="na"&gt;shell&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bash&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;mkdir tempdir&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install AWS CLI version &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"&lt;/span&gt;
          &lt;span class="s"&gt;sudo unzip awscliv2.zip&lt;/span&gt;
          &lt;span class="s"&gt;sudo ./aws/install&lt;/span&gt;
          &lt;span class="s"&gt;sudo rm -rf awscliv2.zip&lt;/span&gt;
          &lt;span class="s"&gt;sudo rm -rf aws&lt;/span&gt;
          &lt;span class="s"&gt;aws --version&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install @aws-amplify/cli node package&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install -g @aws-amplify/cli@7.3.2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;PUSHARD&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;echo "Target deploy hash: ${{ github.event.inputs.deployHash }}"&lt;/span&gt;
          &lt;span class="s"&gt;echo "Deploys to skip: ${{ github.event.inputs.skipHashes }}"&lt;/span&gt;
          &lt;span class="s"&gt;echo "Destination branch: ${{ github.event.inputs.dstBranch }}"&lt;/span&gt;
          &lt;span class="s"&gt;cd builder&lt;/span&gt;
          &lt;span class="s"&gt;npm install&lt;/span&gt;
          &lt;span class="s"&gt;npm start&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;DEPLOY_HASH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.deployHash }}&lt;/span&gt;
          &lt;span class="na"&gt;SKIP_HASHES&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.skipHashes }}&lt;/span&gt;
          &lt;span class="na"&gt;DST_BRANCH&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ github.event.inputs.dstBranch }}&lt;/span&gt;
          &lt;span class="na"&gt;AMPLIFY_PROJECT_REPO&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AMPLIFY_PROJECT_REPO }}&lt;/span&gt;
          &lt;span class="na"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.ACCESS_KEY_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.SECRET_ACCESS_KEY }}&lt;/span&gt;
          &lt;span class="na"&gt;AWS_PROFILE&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.AWS_PROFILE }}&lt;/span&gt;
          &lt;span class="na"&gt;GH_USERNAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GH_USERNAME }}&lt;/span&gt;
          &lt;span class="na"&gt;GH_USER_PAT&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GH_USER_PAT }}&lt;/span&gt;
          &lt;span class="na"&gt;TELEGRAM_BOT_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.TELEGRAM_BOT_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;TELEGRAM_CHAT_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.TELEGRAM_CHAT_ID }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://github.com/nautes-tech/pushard/blob/main/action.yml"&gt;action.yml&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;Made by &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__767320"&gt;
  
    .ltag__user__id__767320 .follow-action-button {
      background-color: #000000 !important;
      color: #ffffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/simoneagostinelli" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jUxUtWZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Fjm9Z056--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/767320/62e2eda5-1b42-492a-8121-b67852bcd260.jpg" alt="simoneagostinelli image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/simoneagostinelli"&gt;Simone Agostinelli&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/simoneagostinelli"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;div class="ltag__user ltag__user__id__104337"&gt;
  
    .ltag__user__id__104337 .follow-action-button {
      background-color: #a705f7 !important;
      color: #edfdfa !important;
      border-color: #a705f7 !important;
    }
  
    &lt;a href="/ale_annini" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZwbYTTEi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--L5SWM70W--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/104337/8e900359-1888-4968-8973-95472187f1f8.jpg" alt="ale_annini image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/ale_annini"&gt;Alessandro Annini&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/ale_annini"&gt;Side projects will save the world. Or at least the day.&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.nautes.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fjFAXViV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4AdCvil.png" alt="Nautes Spa" width="400" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>aws</category>
      <category>github</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Get Glassmorphism Effect in Flutter</title>
      <author>rrtutors</author>
      <pubDate>Fri, 03 Dec 2021 17:02:14 +0000</pubDate>
      <link>https://dev.to/rrtutors/how-to-get-glassmorphism-effect-in-flutter-3i64</link>
      <guid>https://dev.to/rrtutors/how-to-get-glassmorphism-effect-in-flutter-3i64</guid>
      <description>&lt;p&gt;What is Glassmorphism?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rrtutors.com/tutorials/How-to-Get-Glassmorphism-Effect-in-Flutter"&gt;Flutter Glassmorphism&lt;/a&gt; is a term used to describe UI design that emphasizes light or dark objects, placed on top of colorful backgrounds. A background blur is placed on the objects which allows the background to shine through – giving it the impression of frosted glass&lt;/p&gt;

&lt;p&gt;You can wrap your widget with Back Drop Filter and add an image filter but, this process is a bit complicated so, we will see an easy way all you have to do is add a line like this to your package's pubspec.yaml.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nl"&gt;dependencies:&lt;/span&gt;
  &lt;span class="nl"&gt;glassmorphism:&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once installed you will get access to a widget called GlassmorphicContainer, it has various properties&lt;/p&gt;

&lt;p&gt;width: used to control the width of the container.&lt;/p&gt;

&lt;p&gt;height: used to control the height of the container.&lt;/p&gt;

&lt;p&gt;borderRadius: used to change the border radius.&lt;/p&gt;

&lt;p&gt;linearGradient: used to provide background gradient with different colors.&lt;br&gt;
    child: which will hold all our widget that will have this effect.&lt;/p&gt;

&lt;p&gt;we can add gradient like this for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;LinearGradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;colors:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;

                        &lt;span class="nc"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withOpacity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;

                        &lt;span class="nc"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;white&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withOpacity&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.05&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

                      &lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="nl"&gt;begin:&lt;/span&gt; &lt;span class="nc"&gt;Alignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;topLeft&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;end:&lt;/span&gt; &lt;span class="nc"&gt;Alignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;bottomRight&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this will have the most common white forsted glass effect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6uOT0zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Screenshot_1638193776.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6uOT0zv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Screenshot_1638193776.png" alt="Flutter Glassmorphism" width="880" height="1760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--anolqKds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Screenshot_1638193788.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--anolqKds--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://rrtutors.com/uploads/langpostimg/Screenshot_1638193788.png" alt="Flutter Glassmorphism" width="880" height="1760"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Complete code for &lt;a href="https://rrtutors.com/tutorials/How-to-Get-Glassmorphism-Effect-in-Flutter"&gt;Flutter Login Page - FrostedGlass Background Flutter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find &lt;a href="https://rrtutors.com/tutorials/Flutter-Login-Page-with-wave-animation"&gt;Flutter Login Page&lt;/a&gt; example &lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Quick Start WebRTC with Infobip</title>
      <author>Michael Bogan</author>
      <pubDate>Fri, 03 Dec 2021 16:58:53 +0000</pubDate>
      <link>https://dev.to/mbogan/quick-start-webrtc-with-infobip-2c1g</link>
      <guid>https://dev.to/mbogan/quick-start-webrtc-with-infobip-2c1g</guid>
      <description>&lt;p&gt;&lt;a href="https://webrtc.org/"&gt;Web Real-Time Communication (WebRTC)&lt;/a&gt; has fast become the de facto framework used for building applications to facilitate audio and video communication over the web. WebRTC connects users through their browsers or on their mobile devices. In this post, we’ll get you up to speed on why WebRTC is so widely adopted for development today. Along the way, we’ll use Infobip’s set of SDKs to get quickly get started.&lt;/p&gt;

&lt;p&gt;Let’s begin by diving a bit deeper into the details and history of WebRTC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-webrtc"&gt;
  &lt;/a&gt;
  What is WebRTC?
&lt;/h3&gt;

&lt;p&gt;At a high level, WebRTC is a peer-to-peer (P2P) data transmission technology. While it has versatile uses, it’s most commonly used for latency-sensitive applications, and that makes it perfect for P2P video and audio streaming. Many major tech companies—including Zoom, Slack, and Discord—use WebRTC in their implementation to provide secure and seamless streaming experiences to their users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-long-has-webrtc-been-around"&gt;
  &lt;/a&gt;
  How long has WebRTC been around?
&lt;/h3&gt;

&lt;p&gt;By most accounts, the industry saw WebRTC used to make a cross-browser video call for the first time in February 2013. That means WebRTC has been around for nearly 10 years! For those who pivot on the paperwork, WebRTC reached an official “&lt;a href="https://www.w3.org/TR/2017/CR-webrtc-20171102/"&gt;Candidate Recommendation&lt;/a&gt;” status with W3C in 2017 and “&lt;a href="https://www.w3.org/2021/01/pressrelease-webrtc-rec.html.en"&gt;Recommendation&lt;/a&gt;” status in January 2021. By that gauge, WebRTC’s status as an officially backed technology is fairly new. With that backing of governing technical bodies and industry use, however, WebRTC’s adoption is on the rise. That’s especially true of companies seeking to build audio and video applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-choose-webrtc-over-another-option"&gt;
  &lt;/a&gt;
  Why choose WebRTC over another option?
&lt;/h2&gt;

&lt;p&gt;Why might a company choose to build on top of WebRTC as opposed to another option like RTMP? There are several reasons, and we’ll highlight the most important ones here:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-central-server"&gt;
  &lt;/a&gt;
  No central server
&lt;/h3&gt;

&lt;p&gt;Because WebRTC is P2P, the clients manage the connection. In other words, there is no client-server architecture with a central infrastructure brokering connections while handling media and static assets. The end-user devices do all of the connection management. Though this puts more resource load on clients, the P2P approach is more secure and resilient.&lt;/p&gt;

&lt;p&gt;One nuance worth mentioning is that WebRTC requires a way to connect clients with one another; this process is called “signaling.” So, while there’s no central server in the sense of connection management, you do need a signaling server to help clients be aware of each other’s presence and negotiate their connection. Still, the resources needed for this signaling server are significantly less than that of maintaining an entire client-server architecture.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#w3cietf-standard"&gt;
  &lt;/a&gt;
  W3C/IETF standard
&lt;/h3&gt;

&lt;p&gt;Historically, perhaps developers have not put a lot of stock in a technology’s endorsement from W3C or IETF. Still, WebRTC’s backing by these bodies means that a great deal of thought, design, and discussion went into this technology. WebRTC has been in the making for over a decade, and its official recommendation is bolstered by a gang of big tech companies that actively use it. You’re in good company with WebRTC.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#high-quality-and-high-speed"&gt;
  &lt;/a&gt;
  High quality and  high speed
&lt;/h3&gt;

&lt;p&gt;WebRTC, unlike TCP-based streaming alternatives (for example, MPEG-DASH or RTMP), uses UDP-packet broadcast. Using UDP alleviates the need for packet-level re-encrypt and retransmission. For video and audio streaming applications, the minor packet misses that come with UDP have a negligible adverse effect on the end-user experience. The end result, though, makes WebRTC &lt;em&gt;fast&lt;/em&gt;. It’s one of the only protocols that can consistently achieve sub-second latency, and it does this out-of-the-box!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#native-functionality"&gt;
  &lt;/a&gt;
  Native functionality
&lt;/h3&gt;

&lt;p&gt;As an officially endorsed technology supported in HTML5, WebRTC is dead simple to get started. You don’t need a plugin. All you need is a WebRTC-compatible browser, and you immediately have access to device detection, media capture, data transfer, and more. When you build on WebRTC, everything in your application is native; your users won’t be required to download or install anything else.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-infobip-help"&gt;
  &lt;/a&gt;
  How can Infobip help?
&lt;/h2&gt;

&lt;p&gt;For working with WebRTC, Infobip offers SDKs for &lt;a href="https://github.com/infobip/infobip-rtc-android"&gt;Android&lt;/a&gt;, &lt;a href="https://github.com/infobip/infobip-rtc-ios"&gt;iOS&lt;/a&gt;, &lt;a href="https://github.com/infobip/infobip-rtc-react-native"&gt;React Native&lt;/a&gt;, and &lt;a href="https://github.com/infobip/infobip-rtc-js"&gt;JavaScript&lt;/a&gt;. That covers pretty much all of WebRTC’s applications. Infobip makes it very easy to get started.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-set-up"&gt;
  &lt;/a&gt;
  Getting set up
&lt;/h3&gt;

&lt;p&gt;Let’s say you’re kicking off a new JavaScript-based project. Getting started with WebRTC and Infobip is as simple as installing the JavaScript SDK with npm or including the distribution file in your project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install infobip-rtc --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main.js 
let InfobipRTC = require('infobip-rtc');

# or as an ES6 Import
import {InfobipRTC} from "infobip-rtc";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Infobip also offers a distribution file that you can include:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script src="//rtc.cdn.infobip.com/latest/infobip.rtc.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#putting-it-to-use"&gt;
  &lt;/a&gt;
  Putting it to use
&lt;/h3&gt;

&lt;p&gt;Infobip takes a hands-off approach to user management. Your users are &lt;em&gt;your&lt;/em&gt; users. To enable Infobip’s services for your users, you just need to create a token for them. Here’s a sample of what the request for the token looks like, along with a response:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# main.js
var settings = {
    "url": "https://{baseUrl}/webrtc/1/token",
    "method": "POST",
    "timeout": 0,
    "headers": {
        "Authorization": "{authorization}",
        "Content-Type": "application/json",
        "Accept": "application/json"
    },
    "data": JSON.stringify({"identity":"Alice","applicationId":"2277594c-76ea-4b8e-a299-e2b6db41b9dc","displayName":"Alice in Wonderland","capabilities":{"recording":"ALWAYS"},"timeToLive":43200}),
};

$.ajax(settings).done(function (response) {
    console.log(response);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Response
{
  "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZGVudGl0eSI6IkFsaWNlIiwibmFtZSI6IkFsaWNlIGluIFdvbmRlcmxhbmQiLCJleHAiOjE1NzkyOTA2MzgsImNhcHMiOlsyXX0.QyCMqjH8DsftChibW2Rw4EByH-eEviUp3-kHVKuJpKg",
  "expirationTime": "2020-01-17T19:50:38.488589Z"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you’ve created and stored the token, you’re ready to get started!&lt;/p&gt;

&lt;p&gt;Although application use cases will vary greatly, each SDK’s Github repository has fantastic resources for getting started. The official documentation with all the goodies that go along with Infobip’s offering of WebRTC can be found &lt;a href="https://www.infobip.com/docs/voice-and-video/webrtc"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up-webrtc"&gt;
  &lt;/a&gt;
  Wrapping up WebRTC
&lt;/h2&gt;

&lt;p&gt;We’ve covered a lot of ground on WebRTC, so let’s take some time to recap. WebRTC is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A stable, industry-supported framework primarily used for P2P audio and video communication between browser and mobile devices.&lt;/li&gt;
&lt;li&gt;Widely adopted by many tech companies and for varied use cases.&lt;/li&gt;
&lt;li&gt;Preferred over TCP-based alternatives, as its UDP-based approach provides incredible speed while preserving quality.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And check out &lt;a href="https://www.infobip.com/signup"&gt;Infobip's platoform&lt;/a&gt;  a free and quick way to get started with WebRTC.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>architecture</category>
    </item>
    <item>
      <title>How to write a good Technical Article</title>
      <author>Bonnie!</author>
      <pubDate>Fri, 03 Dec 2021 16:57:11 +0000</pubDate>
      <link>https://dev.to/the_greatbonnie/how-to-write-a-good-technical-article-22fo</link>
      <guid>https://dev.to/the_greatbonnie/how-to-write-a-good-technical-article-22fo</guid>
      <description>&lt;p&gt;As a developer, I have made $500 in the last month writing Technical Articles.&lt;/p&gt;

&lt;p&gt;Below are some of the things I have learned about writing a good technical article.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-technical-article"&gt;
  &lt;/a&gt;
  What is a technical article?
&lt;/h2&gt;

&lt;p&gt;A technical article is an article that is used to inform, instruct, or direct a specific audience on how to do something.&lt;/p&gt;

&lt;p&gt;To write a good technical article, there are some things you need to get right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-come-up-with-a-good-structure-or-layout"&gt;
  &lt;/a&gt;
  1. Come up with a good structure or layout.
&lt;/h2&gt;

&lt;p&gt;The format of an excellent technical article includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Title&lt;/li&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A title should be a headline that demands attention and should have keyword combinations that reflect what the article is about.&lt;/p&gt;

&lt;p&gt;The introduction should describe the problem and the solutions that the article will cover. Ensure that the introduction lets the reader know what the article is all about.&lt;/p&gt;

&lt;p&gt;In the body part of the article, describe the problem and the solution in detail. Try to tell a story. The story should keep the reader engaged at every step. Make a list of your main points. Then progress from one point to another logically to lead to a conclusion.&lt;/p&gt;

&lt;p&gt;The conclusion should essentially include a summary of all the main points mentioned in the body.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-do-a-lot-of-research"&gt;
  &lt;/a&gt;
  2. Do a lot of research.
&lt;/h2&gt;

&lt;p&gt;Writing a good technical article is challenging because it can take a lot of your time and often requires doing a lot of research.&lt;/p&gt;

&lt;p&gt;Doing research when writing a technical article will help you understand the problem you are trying to solve and the solutions you can come up with.&lt;/p&gt;

&lt;p&gt;The research will also help you understand your audience and the message you are trying to deliver to them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-know-your-audience"&gt;
  &lt;/a&gt;
  3. Know your audience
&lt;/h2&gt;

&lt;p&gt;Knowing your audience when writing a technical article is very important because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It helps you to make decisions about what information you should include.&lt;/li&gt;
&lt;li&gt;It directs you on how you should arrange that information.&lt;/li&gt;
&lt;li&gt;It helps to know what supporting details will be necessary for the reader to understand what you are presenting.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Keeping your audience in mind will help you organize your ideas and how best to support your argument.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-use-examples"&gt;
  &lt;/a&gt;
  4. Use examples
&lt;/h2&gt;

&lt;p&gt;Use examples to help your audience better understand and relate to key points of the technical article you are writing.&lt;/p&gt;

&lt;p&gt;Examples can be in the form of screenshots or code snippets.&lt;/p&gt;

&lt;p&gt;As a technical writer, examples can serve as evidence to support your general claims or arguments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-read-other-technical-articles"&gt;
  &lt;/a&gt;
  5. Read other technical articles.
&lt;/h2&gt;

&lt;p&gt;Reading other technical articles will help you get inspiration and give you ideas on writing better articles.&lt;/p&gt;

&lt;p&gt;You can get inspiration by reading some of the technical articles I have written and published so far.&lt;/p&gt;

&lt;p&gt;This article shows you how to export Stripe payments data from Stripe to Postgres for deeper queries and data analysis for visualization.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arctype.com/blog/stripe-payments-sql-postgres/"&gt;https://arctype.com/blog/stripe-payments-sql-postgres/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This article directs you on how to use Stored procedures to allow access to some parts of a table in a database while denying direct select, insert, update and delete operations against the table.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://arctype.com/blog/stored-procedures-in-sql/"&gt;https://arctype.com/blog/stored-procedures-in-sql/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>writing</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Make a Weather App using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Fri, 03 Dec 2021 16:55:11 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/how-to-make-a-weather-app-using-javascript-4lke</link>
      <guid>https://dev.to/shantanu_jana/how-to-make-a-weather-app-using-javascript-4lke</guid>
      <description>&lt;p&gt;In this article you will learn how to create weather app using JavaScript. This JavaScript Weather app will help you to know about the weather of any location. If you input the name of any city in the input box here, in the box below you can find out all its information like temperature, wind speed and sky conditions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;Watch its live demo&lt;/a&gt; to learn how it works. I took the help of API Link to create this project. With this link all the information will be collected from other places with the help of "fetch" method. First we created its basic structure using HTML and CSS. Then I implemented it using JavaScript. &lt;/p&gt;

&lt;p&gt;You need to have a basic idea about HTML CSS JavaScript to create this weather application. Here I have shared step-by-step tutorial and a video.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yQgZb51r9CU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;There are two boxes here. In the first box there is a place to input the name of the city and submit button. The result can be seen in the second box. &lt;/p&gt;

&lt;p&gt;The first box contains an input box for input and a submit button. If you input the name of the city in that box and click on the submit button, you will see all the information in the box below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html-code-of-simple-weather-app"&gt;
  &lt;/a&gt;
  HTML code of Simple weather app
&lt;/h2&gt;

&lt;p&gt;Below are the HTML codes needed to create this design. Here I have broken the code step-by-step. If you want the code with one, you can &lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;download source code&lt;/a&gt;.&lt;br&gt;
&lt;strong&gt;Basic structure&lt;/strong&gt;&lt;br&gt;
I have created a basic structure using the following codes. Basic structure is an area with two boxes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container-fluid"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;First box&lt;/strong&gt;&lt;br&gt;
Now I have added the HTML code needed to create the first box. Two input functions have been used here. The first input is to input the name of the city and the second is to make a button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"inputs"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Enter any city..."&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cityinput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"Submit"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"add"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Second box or Display&lt;/strong&gt;&lt;br&gt;
Now arrangements have been made to make the second box i.e. display. Where weather related information can be found. The h2 tag is used here and the three paragraph tags are used. &lt;/p&gt;

&lt;p&gt;The name of your input city can be found in h2. The other three paragraphs include sky conditions, temperature and wind speed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;section&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"display"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"cityoutput"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"temp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"wind"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#css-code-of-javascript-weather-app"&gt;
  &lt;/a&gt;
  CSS code of JavaScript weather app
&lt;/h2&gt;

&lt;p&gt;Above I have added the necessary HTML code to create the &lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;Simple Weather application&lt;/a&gt;. Now it needs to be designed using CSS code. I designed the basics using the following CSS codes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#448aff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container-fluid&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;410px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the first box has been designed. I have used white as the background color of the box and &lt;code&gt;padding: 2rem 0 2rem 0&lt;/code&gt; has been used to create some space around it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inputs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2b_goXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0bnelij9to5xzh1763i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z2b_goXS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0bnelij9to5xzh1763i.jpg" alt="building a weather app using javascript" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The place to input the name of the city is designed by the following code. Here box &lt;code&gt;height: 3.5rem&lt;/code&gt;, &lt;code&gt;width: 20rem&lt;/code&gt; and color transparent are used.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inputs&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"text"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#212121&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#c2c2c2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kz8qcDE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b5bos6rzvi5z31tj4zh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kz8qcDE1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7b5bos6rzvi5z31tj4zh.jpg" alt="weather app using javascript" width="880" height="382"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have designed the submit button using the following CSS codes. I used button &lt;code&gt;height: 3.2rem&lt;/code&gt;, &lt;code&gt;width: 6.5rem&lt;/code&gt; and background color blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.inputs&lt;/span&gt; &lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"submit"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0a67ca&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bold&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xBlDTxJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4c5pf8v3do747xw4orx.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xBlDTxJv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x4c5pf8v3do747xw4orx.jpg" alt="weather app using html css and javascript" width="880" height="389"&gt;&lt;/a&gt;&lt;br&gt;
Now I have added the CSS code required for making the second box i.e. display. This display uses &lt;code&gt;width: 400px&lt;/code&gt; and &lt;code&gt;height: 45vh&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.display&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#16a864&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;9rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;45vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WgKyGdlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zdipyi1e9xbh49qhhw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WgKyGdlL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b2zdipyi1e9xbh49qhhw.jpg" alt="weather forecast app using javascript" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the following codes have helped to design all the text information in this box. Although this information is no longer available for viewing. &lt;/p&gt;

&lt;p&gt;This can be seen after using JavaScript. But now I have managed to design it with the necessary CSS code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0548b5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#04214c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;23px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;26px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#9beefb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#90006e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZSQHTEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfmls4forkn98gdxpf7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9ZSQHTEG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cjfmls4forkn98gdxpf7.jpg" alt="weather app using html css and javascript github" width="880" height="389"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-code-of-the-basic-weather-app"&gt;
  &lt;/a&gt;
  JavaScript code of the basic weather app
&lt;/h2&gt;

&lt;p&gt;I have designed this basic &lt;strong&gt;weather app using HTML and CSS&lt;/strong&gt; code above. Now is the time to implement it with JavaScript.&lt;/p&gt;

&lt;p&gt;Below I have given all the JavaScript and all the information below each code. I hope the following explanations will help you understand. If there is any problem, you can take the help of video tutorial below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Now we need to determine the constant of one of the id functions. Because no html function can be used directly in JavaScript.&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;inputval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#cityinput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#add&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;city&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#cityoutput&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;descrip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#temp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#wind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nx"&gt;apik&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3045dd712ffe6e702e3245525ac7fa38&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;//kelvin to celcious. 1 Kelvin is equal to -272.15 Celsius.&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;convertion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;273&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toFixed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//Now we have to collect all the information with the help of fetch method&lt;/span&gt;

    &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

&lt;span class="c1"&gt;//This is the api link from where all the information will be collected&lt;/span&gt;

        &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://api.openweathermap.org/data/2.5/weather?q=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;inputval&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;&amp;amp;appid=&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;apik&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

         &lt;span class="c1"&gt;//.then(data =&amp;gt; console.log(data))&lt;/span&gt;

        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="c1"&gt;//Now you need to collect the necessary information with the API link. Now I will collect that information and store it in different constants.&lt;/span&gt;

            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;nameval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;descrip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;weather&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tempature&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;temp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;wndspd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wind&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;speed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;//Now with the help of innerHTML you have to make arrangements to display all the information in the webpage.&lt;/span&gt;
            &lt;span class="nx"&gt;city&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;`Weather of &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;nameval&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;span&amp;gt;`&lt;/span&gt;
            &lt;span class="nx"&gt;temp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Temperature: &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt; &lt;span class="nx"&gt;convertion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tempature&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt; C&amp;lt;/span&amp;gt;`&lt;/span&gt;
            &lt;span class="nx"&gt;description&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Sky Conditions: &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;descrip&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;span&amp;gt;`&lt;/span&gt;
            &lt;span class="nx"&gt;wind&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`Wind Speed: &amp;lt;span&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;wndspd&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; km/h&amp;lt;span&amp;gt;`&lt;/span&gt;

        &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//Now the condition must be added that what if you do not input anything in the input box.&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;You entered Wrong city name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;//If you click on the submit button without inputting anything in the input box or typing the wrong city name then the above text can be seen.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BrDF0z7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f90v7prwp075mekoi7cs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BrDF0z7---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f90v7prwp075mekoi7cs.jpg" alt="build a weather app using javascript" width="880" height="495"&gt;&lt;/a&gt;&lt;br&gt;
Hopefully the tutorial and video above helped you to know how I created this JavaScript Weather application. If you have anything to say, be sure to let me know in the comments.&lt;/p&gt;

&lt;p&gt;If you have learned something from this tutorial, please like the article. You can &lt;a href="https://www.foolishdeveloper.com/2021/12/simple-weather-app-using-javascript.html"&gt;download the source code&lt;/a&gt; needed to create the Simple Weather app.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this. 😊&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Mistakes to Avoid As a Backend Developer</title>
      <author>Joseph Mania</author>
      <pubDate>Fri, 03 Dec 2021 16:46:18 +0000</pubDate>
      <link>https://dev.to/techmaniacc/mistakes-to-avoid-as-a-backend-developer-122j</link>
      <guid>https://dev.to/techmaniacc/mistakes-to-avoid-as-a-backend-developer-122j</guid>
      <description>&lt;p&gt;Currently, I can call myself a backend developer after a whole 3 years of coding. In short, a backend engineer is an individual who deals with the server-side, database, and configurations. This developer must have good knowledge of data structure and algorithms to implement the data in the right way. Minor knowledge to keep security safe.&lt;/p&gt;

&lt;p&gt;As you get more experience in the world of development, you notice it’s not all about the technical skills you have. It’s about using these skills to create a product that is efficient and reliable to non-technical users. This means you must observe the best practices when it comes to writing your code and using the right language or frameworks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time, memory, and security&lt;/strong&gt; are the key features. If you are a backend developer, there are things you need to do to ensure your software responds as fast as possible. Furthermore, the code has to be clean and simple to allow the program to occupy the minimum space. This is where you need to learn about the mistakes that backend developers make. Be keen and stay updated on best practices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learning-frameworks-before-the-language"&gt;
  &lt;/a&gt;
  Learning frameworks before the language.
&lt;/h2&gt;

&lt;p&gt;For sure, I had a friend who jumped directly into Django without learning any python. It’s the worst way of learning. Take an example, a child will never exist without a father. So when you want to reward them, you have to prioritize a father before narrowing it down to a kid. Kindly, learning PHP will give you the base foundation before jumping into laravel.&lt;/p&gt;

&lt;p&gt;Yes, you could succeed with frameworks, but they have their disadvantages too. We have people who have developed their site with raw HTML, CSS, JavaScript, and PHP, and their sites are good. Don’t prioritize frameworks over the core language. This can also apply to front-end engineers. Use the right path, learn the language, then swam into frameworks to save development time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-code-review"&gt;
  &lt;/a&gt;
  Avoiding Code Review
&lt;/h2&gt;

&lt;p&gt;Of course, no one likes reading his/her code. However, this does not mean you deny your fellow members from reading your code. Let them correct your mistakes, no one is perfect. If you are writing shoddy work, we have to tell you the truth. Peer-to-peer review is very important, but if you are working on a single project, invite some of your friends to review the code. Ask senior developers to help you in one way or another. You will learn a lot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-a-project-without-knowing-the-tools"&gt;
  &lt;/a&gt;
  Starting a project without knowing the tools
&lt;/h2&gt;

&lt;p&gt;Here, developers argue among themselves which tool is the best. Let’s say you are working for a SaaS startup. You don’t follow the software engineering procedure, jump directly into the code. On the way, if you are working with a team, you might end up disagreeing. This is because each one of you has his/her favorite tools which they prefer. It is the task of a senior backend developer to choose the tools that are favorable to your team.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#less-knowledge-of-databases"&gt;
  &lt;/a&gt;
  Less knowledge of databases
&lt;/h2&gt;

&lt;p&gt;Don’t call yourself a backend engineer without having an intermediate knowledge of databases. In a different project, you will meet different types of databases. Take time and learn how popular DB like Postgres, MYSQL, MariaDB, and SQLite works. Read through the theory before learning the commands. In your lifetime, you will live to fetch and post data in and out of the database.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-considering-the-security"&gt;
  &lt;/a&gt;
  Not considering the security
&lt;/h2&gt;

&lt;p&gt;It’s okay you are not a cybersecurity major, but you’re a developer and the manager expects everything to work right. Let’s say you launch your site today and someone breaks into it tomorrow. They will blame you. Remember, authentication is the backend process. This goes back to choosing your technology keenly. Recently, many people blame PHP for having loopholes, the reason why many wordpress sites are being hacked.&lt;br&gt;
I didn’t mean PHP is bad(in fact am learning it now😂😂), the community is developing a wall. Always have some knowledge on the best way to safeguard your site. Protect the database and admin panel from any malicious entry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overengineering-the-software"&gt;
  &lt;/a&gt;
  Over-engineering the software
&lt;/h2&gt;

&lt;p&gt;Yes, you are an engineer, but adding too many unwanted functionalities doesn’t make you a pro. However good you are, we don’t need your complex code. This is where senior engineers win the cake. Don’t promise too more than expected while implementing a product. Just write a simple code and document the process. If you find the problem to be too simple, just go straightforward solution. Don’t try to be perfect here, software development is sometimes a hard task.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#avoiding-to-read-documentation-of-languageframework"&gt;
  &lt;/a&gt;
  Avoiding to read documentation of language/framework
&lt;/h2&gt;

&lt;p&gt;Hey developers🙄😉, you have to read the documentation while using the technology or tools. YouTube and bloggers have the right knowledge. But if you want to understand the reason and why something works in that way, consult the documentation. Stay updated with the respective document to see the new and outdated features.&lt;/p&gt;

&lt;p&gt;Maybe my learning methodology 🤴 could help you. I always use tutorials or i read blogs as I learn certain frameworks. Then after two months, I will go step by step on the documentation to understand what it entails. You will notice a lot of new things that you haven’t used. Always consider the documentation over other sources.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to resize your Instagram post design to LinkedIn post size in Figma</title>
      <author>raoufbelakhdar</author>
      <pubDate>Fri, 03 Dec 2021 16:39:31 +0000</pubDate>
      <link>https://dev.to/raoufbelakhdar/how-to-resize-your-instagram-post-design-to-linkedin-post-size-in-figma-2mp5</link>
      <guid>https://dev.to/raoufbelakhdar/how-to-resize-your-instagram-post-design-to-linkedin-post-size-in-figma-2mp5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m__pLxoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2Ak4rghVGgMkpgx4xf.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m__pLxoI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/1024/0%2Ak4rghVGgMkpgx4xf.jpg" alt="" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Today, we’ll look at how to quickly resize our Instagram post design to LinkedIn post size using a Figma plugin called Thumblisher.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-you-will-need"&gt;
  &lt;/a&gt;
  What You Will Need
&lt;/h3&gt;

&lt;p&gt;You’ll need the following resources to follow along with this Figma tutorial:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install Thumblisher Figma Plugin&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before getting started, make sure to install Thumblisher Figma Plugin to your Figma editor to resize your social media graphics easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/community/plugin/1037826586645134259/Thumblisher"&gt;Figma - Thumblisher | The easiest way to resize and scale your frames for different social media platforms. Plugin Dem...&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download Exercise File&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To access the social media templates we’ll use in this tutorial, duplicate the Social Media Exercice File:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.figma.com/community/file/1045659071341514535/Social-Media-Exercice-File"&gt;https://www.figma.com/community/file/1045659071341514535/Social-Media-Exercice-File&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Find more resources on &lt;a href="https://www.captain-design.com/"&gt;https://www.captain-design.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#watch-video-tutorial"&gt;
  &lt;/a&gt;
  Watch Video Tutorial
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/c9iaNukdUto"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#before-you-go"&gt;
  &lt;/a&gt;
  Before you go
&lt;/h3&gt;

&lt;p&gt;Feel free to visit our website &lt;a href="https://www.captain-design.com/"&gt;&lt;strong&gt;captain-design.com&lt;/strong&gt;&lt;/a&gt; where we are sharing generously, ready for commercial use &lt;a href="https://www.captain-design.com/"&gt;&lt;strong&gt;Figma and HTML templates&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You’ll find three things to help you kickstart your next project’s design :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.captain-design.com/templates/"&gt;&lt;strong&gt;200+ free Figma templates&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.captain-design.com/templates/tag/html"&gt;&lt;strong&gt;Free Html + Bootstrap 5 templates&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;.&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.captain-design.com/uikit/"&gt;&lt;strong&gt;Amazing Figma Plugins and UI kits&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Originally published at&lt;/em&gt; &lt;a href="https://www.captain-design.com/blog/how-to-resize-your-instagram-post-design-to-linkedin-post-size-in-figma/"&gt;&lt;em&gt;https://www.captain-design.com&lt;/em&gt;&lt;/a&gt; &lt;em&gt;on December 3, 2021.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>socialmedia</category>
      <category>figmaplugin</category>
      <category>linkedin</category>
      <category>figma</category>
    </item>
    <item>
      <title>Why Every Developer Should Start Blogging</title>
      <author>Sagar Barapatre</author>
      <pubDate>Fri, 03 Dec 2021 16:17:48 +0000</pubDate>
      <link>https://dev.to/sagarbarapatre/why-every-developer-should-start-blogging-26j0</link>
      <guid>https://dev.to/sagarbarapatre/why-every-developer-should-start-blogging-26j0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-i-decided-to-start-blogging"&gt;
  &lt;/a&gt;
  Why I decided to start blogging
&lt;/h2&gt;

&lt;p&gt;For this special post, I just want to reflect on why I started blogging and why every developer should start blogging. Every writer/ blogger has their own reasons to start writing but here's mine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h3&gt;

&lt;p&gt;At some point in time, I reached that developer's plateau where I'm uncertain on which new technology/skill I wanted to acquire and what direction I'm heading. So I tried to get started with React but without a structured syllabus and deadlines, it was difficult to stay focused and committed to learning it every day. I felt like I needed an outlet for &lt;strong&gt;accountability&lt;/strong&gt; as well as a platform to &lt;strong&gt;reinforce my learning&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In terms of non-programming reasons, I like reading books and I especially like to &lt;strong&gt;pen down my thoughts and reflections&lt;/strong&gt; on the insights I have gained from reading. My OneNote got so full of my "reading notes"...&lt;/p&gt;

&lt;p&gt;It was then I decided to blog. I have always written journals in my childhood, so I thought a blog is basically like an online journal. My reason was that simple.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Then why not just record your learning in your physical book journal?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I chose blogging because unlike a book journal, I wanted something more &lt;strong&gt;accessible&lt;/strong&gt; that I can read from anywhere and &lt;strong&gt;would never disappear&lt;/strong&gt;. I have written over 10 books of journals in my childhood and unfortunately lost all of them from moving a lot. I don't want the same outcome for my learning journal.&lt;/p&gt;

&lt;p&gt;Plus, learning from others and gaining valuable feedback is the best way to learn something quickly. So having a blog achieves the following for me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accountability&lt;/strong&gt;: It's like keeping a physical journal. Having a blog makes me want to constantly write on it. So it makes me learn without losing focus.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Monitor/Reinforce Learning&lt;/strong&gt; : Writing down what I've learnt is how I like to check my learning progress and reinforce core concepts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;: Always there and never disappear.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Feedback from others&lt;/strong&gt;: Learning from the community, sharing knowledge and gain insights.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#first-steps-i-did"&gt;
  &lt;/a&gt;
  First Steps I did
&lt;/h2&gt;

&lt;p&gt;To commit to logging what I've learned every day, I took the #100DaysofCode challenge and told people around me that I am doing the challenge. I find that it is easier to stay on track after you've publicly announced your plan of action to your peers, family or friends.&lt;/p&gt;

&lt;p&gt;So, my blogging journey began.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ap1OF0k4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r61qrjbnv8dtmqfv6pjr.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ap1OF0k4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r61qrjbnv8dtmqfv6pjr.jpeg" alt="Imagwllknckldc" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-you-should-blog-learning-outcomes-gains"&gt;
  &lt;/a&gt;
  Why you should blog (Learning Outcomes + Gains)
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-communication"&gt;
  &lt;/a&gt;
  1. Communication
&lt;/h3&gt;

&lt;p&gt;By communication, I mean the ability to &lt;strong&gt;articulate information in a clear, well-organised and concise manner&lt;/strong&gt; (orally and written).&lt;/p&gt;

&lt;p&gt;Initially, my blog on Medium was intended for 1 audience: myself. It was easy to write in a way that only I would understand (because I am me haha). But once I started seeing more people reading my articles, I found myself having to express my thoughts more clearly, organise my writing for better flow and explain ideas more simply.&lt;/p&gt;

&lt;p&gt;If you think you are a terrible writer right now, all the more reason to start blogging. That means you will learn a lot from writing. Don't be afraid of showing your work to others because the community is full of wonderful people who are willing to proofread your articles and help you. In time, you will notice improvements in your written communication skills.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hfJQkZ-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dj5rvd54fcjzshzell0.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hfJQkZ-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dj5rvd54fcjzshzell0.jpeg" alt="Imagkmlkwkmkxmsw" width="852" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"All good writing begins with terrible first efforts. You need to start somewhere." - Anne Lammot&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#2-time-management"&gt;
  &lt;/a&gt;
  2. Time Management
&lt;/h3&gt;

&lt;p&gt;Time management is about &lt;strong&gt;effectively optimizing time to accomplish productive tasks&lt;/strong&gt;. When I started blogging, I realized that I have to allocate some time during the day to do it, which means I spend less time on procrastinating and other distractions.&lt;/p&gt;

&lt;p&gt;To balance my work and my blogging, I had to &lt;strong&gt;learn how to manage my time&lt;/strong&gt; quickly. I found what works for me and what doesn't. For example, I tried to be a morning person and blog early in the morning before work - but I ended up snoozing my alarm every time... Now I learned that blogging midday to evenings works for me best. I can stay focused during those times better.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NBpaZTb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1594249248243/_kuCenfmt.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NBpaZTb9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1594249248243/_kuCenfmt.gif%3Fauto%3Dformat%2Ccompress%26gif-q%3D60%26format%3Dwebm" alt="kndcksdc" width="480" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each person has his/her own time management strategies. For me, it is &lt;strong&gt;planning my day&lt;/strong&gt; ahead and prioritising which tasks to accomplish first. Focusing on what I want to achieve at the end of the day is how I often organise my short-term priorities.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Focus is not saying yes to all important things, rather it is saying no to less important things." - Steve Jobs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#3-get-rid-of-perfectionism"&gt;
  &lt;/a&gt;
  3. Get Rid of Perfectionism
&lt;/h3&gt;

&lt;p&gt;I was quite a perfectionist before I started blogging. I held myself to very high standards which in turn, made me fear to start writing because I'll be unable to publish an article. It was an arduous journey for me to finally accept that nothing is perfect and that I would rather practice my writing on 10 different articles rather than working towards 1 "perfect" article for who knows how long.&lt;/p&gt;

&lt;p&gt;Blogging helps me to shift away from my perfectionist tendencies and put more focus into continuous self-improvement by writing more and practising my skills as I go. &lt;strong&gt;Progress over perfection&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLk8Hesl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1594249748562/_x-tMYUtz.jpeg%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLk8Hesl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1594249748562/_x-tMYUtz.jpeg%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="nnnknskcs" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Perfectionism doesn't make you feel perfect; it makes you feel inadequate." - Maria Shriver&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#4-learning-from-others"&gt;
  &lt;/a&gt;
  4. Learning from Others
&lt;/h3&gt;

&lt;p&gt;The most valuable lesson from blogging is learning from others. I like to receive &lt;strong&gt;constructive feedback&lt;/strong&gt; from my readers because it must have some important insight/detail that I didn't notice before. It also &lt;strong&gt;validates my understanding&lt;/strong&gt; on a certain topic. Making a mental note of the feedback helps me grow as a developer and writer. Of course, if the feedback is very subjective (i.e. personal preferences in style, etc.), I allow myself to ignore it since I have my own writing style that I am comfortable with.&lt;/p&gt;

&lt;p&gt;Another way I learn from others by blogging is &lt;strong&gt;reading other's blogs&lt;/strong&gt; in the community. Everyone has their own experiences and knowledge to share. By reading blogs with a newer or deeper knowledge on certain topics than my own, I get to learn, reflect and get inspired from their insights!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6SblE9U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1594250331664/a2R5UKXH2.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6SblE9U0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1594250331664/a2R5UKXH2.png%3Fauto%3Dcompress%2Cformat%26format%3Dwebp" alt="scnsncklsnc" width="683" height="476"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"It takes a wise man to learn from his mistakes but an even wiser man to learn from others." - Chinese Proverb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#5-personal-brand"&gt;
  &lt;/a&gt;
  5. Personal Brand
&lt;/h3&gt;

&lt;p&gt;Each article you publish will reflect you as an extension of your skills, knowledge, interests, thoughts and values. Hence, by writing, you are essentially creating and building your personal brand.&lt;/p&gt;

&lt;p&gt;As a developer, having a personal brand can help you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build reputation and credibility&lt;/li&gt;
&lt;li&gt;Share your knowledge and projects for feedback&lt;/li&gt;
&lt;li&gt;Increase visibility in the job market&lt;/li&gt;
&lt;li&gt;Make new connections with people in the same industry&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;"We are CEOs of our own companies: Me Inc. To be in business today, our most important job is to be head marketer for the brand called You." - Tom Peters, Writer&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-start"&gt;
  &lt;/a&gt;
  How to Start
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#find-your-reason"&gt;
  &lt;/a&gt;
  Find your reason
&lt;/h3&gt;

&lt;p&gt;Whether it is recording your journey of learning/building something or sharing your passion on a certain subject, find a strong intrinsic reason to start or else your resolve will not last long.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#be-your-own-audience"&gt;
  &lt;/a&gt;
  Be Your Own Audience
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Ask yourself&lt;/strong&gt;: Would you want to read this?&lt;/p&gt;

&lt;p&gt;If yes, then you have your first audience! Your job is to write for yourself, and eventually, as your writing gets better, you'll gain more readers. Most likely, people with similar interests or in the same field as you would be your readers too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consistency"&gt;
  &lt;/a&gt;
  CONSISTENCY
&lt;/h3&gt;

&lt;p&gt;This one is critical. You want to &lt;strong&gt;keep your blog as up-to-date&lt;/strong&gt; as possible. You don't have to blog every day but once a week or so maintains a healthy habit to write.&lt;/p&gt;

&lt;p&gt;It is always harder to start than to continue something. Once you stopped writing for a long time, it will be even more difficult to get back to writing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-fun"&gt;
  &lt;/a&gt;
  Have Fun!
&lt;/h3&gt;

&lt;p&gt;Don't feel pressured to come up with the most unique topics or the most engaging piece every time you want to write about a topic. Just enjoy the process of writing itself! Have fun and stay true to writing what you like. Remember, you are your own audience. If you like it, there will be people who appreciate your work too!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"You don't have to be great to start, but you have to start to be great." - Zig Zaglar&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;I appreciate you for taking the time to read this far. Please like and share this article to encourage more aspiring writers to start! And feel free to check out my &lt;a href="https://dev.to/sagarbarapatre"&gt;Other Blogs&lt;/a&gt; to help you get started on your journey!&lt;/p&gt;

&lt;p&gt;Alternatively, you can connect with me on &lt;a href="https://twitter.com/sagar_sb_"&gt;Twitter&lt;/a&gt; and share your articles with me there! I hope you'll join me! Cheers!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>100daysofcode</category>
      <category>writing</category>
    </item>
    <item>
      <title>Intro to dApp's: Create your dApp frontend w/React</title>
      <author>Eda</author>
      <pubDate>Fri, 03 Dec 2021 16:17:37 +0000</pubDate>
      <link>https://dev.to/edatweets_/intro-to-dapps-create-your-dapp-frontend-wreact-38fi</link>
      <guid>https://dev.to/edatweets_/intro-to-dapps-create-your-dapp-frontend-wreact-38fi</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro-to-dapps-create-your-dapp-frontend-wreact"&gt;
  &lt;/a&gt;
  Intro to dApp's: Create your dApp frontend w/React
&lt;/h2&gt;

&lt;p&gt;I get many dm's from dev's asking me how to get started with web3, hear such questions on twitter spaces and see the conversations on discord. It looks like so many developers are interested in the space. &lt;/p&gt;

&lt;p&gt;If you are one of them, you're at the right place! In this post, I'll first try to explain the basics of web3 applications to provide an outline and then guide you through creating your dApp frontend with React.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Please note: In this article, we will be referring to dApp's on the Ethereum blockchain.&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#intro-to-decentralized-apps-dapps"&gt;
  &lt;/a&gt;
  Intro to Decentralized App's (dApp's)
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-dapp"&gt;
  &lt;/a&gt;
  What is a dApp?
&lt;/h2&gt;

&lt;p&gt;A dApp is just like any software application- any website or phone app. The difference is that the &lt;strong&gt;backend code runs on a decentralized network&lt;/strong&gt; such as a peer to peer network or a blockchain.&lt;/p&gt;

&lt;p&gt;So an application on Ethereum is a &lt;a href="https://ethereum.org/en/developers/docs/dapps/"&gt;dApp&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits"&gt;
  &lt;/a&gt;
  What are the benefits?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Since the backend code(smart contracts) of a dApp is on a decentralized network, the dApp is free from control and can not be modified/removed by a centralized source. Developers and creators can trust the underlying infrastructure without worrying about being terminated or censored.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Once a smart contract is deployed to the Ethereum network, no one can change it. Therefore, users can trust how it will work since even the person deploying the contract can't change it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;All the smart contracts on Ethereum are public and accessible; it's an open-source ecosystem. This open-source nature allows for composability, so this means that you can re-use parts of the codes from others. You can look at all the smart contracts from  &lt;a href="https://etherscan.io/"&gt;Etherscan&lt;/a&gt;; here is an  &lt;a href="https://etherscan.io/address/0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d#code"&gt;example smart contract&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;A dApp only implies that the backend code(smart contract) is on a decentralized network&lt;/strong&gt;. It's important to note that not all of the components of the application have to be decentralized. For example, the application developers decide where the frontend is hosted and where app data is stored. &lt;/p&gt;

&lt;p&gt;The decentralized world advocates for making the entire technology stack decentralized and is building it right now!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-dapps-used-for"&gt;
  &lt;/a&gt;
  What are dApp's used for?
&lt;/h2&gt;

&lt;p&gt;Today the most popular categories for dApp's are gaming, financial services and digital goods. &lt;/p&gt;

&lt;p&gt;Here are some popular dApp's on the Ethereum blockchain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://app.uniswap.org/#/swap"&gt;Uniswap&lt;/a&gt;-swap tokens and provide tokens for liquidity and rewards (Financial services)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://axieinfinity.com/"&gt;Axie&lt;/a&gt;-play and earn with your avatars called "Axie" (Gaming)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://decentraland.org/"&gt;Decenterland&lt;/a&gt;-collect and trade in the virtual world (Virtual world)&lt;/li&gt;
&lt;li&gt; &lt;a href="https://opensea.io/"&gt;Open Sea&lt;/a&gt; : buy, sell, trade digital assets (Digital Goods)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are probably more categories that we have not even discovered yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-can-i-use-a-dapp"&gt;
  &lt;/a&gt;
  How can I use a dApp?
&lt;/h2&gt;

&lt;p&gt;With most dApp's your cryptocurrency wallet is your first sign in. (Yay! No more username and passwords or connecting with other social media accounts.)&lt;/p&gt;

&lt;p&gt;You basically need a &lt;strong&gt;cryptocurrency wallet&lt;/strong&gt; and &lt;strong&gt;ETH&lt;/strong&gt;-which is the native currency for the Ethereum blockchain. The wallet enables you to connect to the network and create a transaction, and you need the ETH to pay for the transaction.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-a-dapp"&gt;
  &lt;/a&gt;
  Creating a dApp
&lt;/h2&gt;

&lt;p&gt;A dApp consists of a &lt;strong&gt;backend (smart contract) and a frontend user interface&lt;/strong&gt; in the most basic form. The frontend is the client-side, and the backend is the server-side of the application.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;backend&lt;/strong&gt; of the dApp is the smart contract. Smart contracts are self-executing computer programs stored inside the blockchain, on Ethereum they are all open and accessible. You can look at them from Etherscan; here is an example of a smart contract. Another important note on smart contracts is that no one can change it once a smart contract is changed. Solidity is one of the most popular smart contract languages for Ethereum.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;frontend&lt;/strong&gt; of the dApp can be written in any language that can talk to the backend. The frontend can then be hosted on a centralized service or a decentralized service.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In short, dApps are applications with a backend on a decentralized platform and a frontend that connects to it. To use a dApp, you need a cryptocurrency wallet and some cryptocurrency. &lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#create-a-dapp-frontend-wreact-amp-ethersjs"&gt;
  &lt;/a&gt;
  Create a dApp frontend w/React &amp;amp; ethers.js
&lt;/h1&gt;

&lt;p&gt;In this project we will be creating a react project and connecting to our crypto wallet which is our interface to the blockchain. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-tools"&gt;
  &lt;/a&gt;
  Project Tools
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt; &lt;a href="https://metamask.io/"&gt;Metamask Wallet&lt;/a&gt;: crypto wallet &lt;/li&gt;
&lt;li&gt; React: JavaScript library for building user interfaces &lt;/li&gt;
&lt;li&gt; &lt;a href="https://docs.ethers.io/v5/"&gt;ethers.js&lt;/a&gt;: Open source JavaScript Client library which contains the tools to talk to the Ethereum blockchain. (Another very popular option is &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3.js&lt;/a&gt;. You can find a comparison of the two &lt;a href="https://blog.infura.io/ethereum-javascript-libraries-web3-js-vs-ethers-js-part-i/"&gt;here&lt;/a&gt;.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Please note:&lt;/strong&gt; This project is only for the frontend of the application. When we want to add the backend piece we will need an Ethereum development environment. &lt;a href="https://hardhat.org/"&gt;Hardhat&lt;/a&gt; and  &lt;a href="https://www.trufflesuite.com/"&gt;Truffle&lt;/a&gt; are popular Ethereum development environments. Additionally, to deploy the application to the network we would need to use a  blockchain developer platform such as  &lt;a href="https://www.alchemy.com/"&gt;Alchemy&lt;/a&gt; or &lt;a href="https://infura.io/"&gt;Infura&lt;/a&gt; .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href="https://metamask.io/"&gt;metamask&lt;/a&gt; and create an account. Add the extension to your browser.&lt;/li&gt;
&lt;li&gt;Get &lt;a href="https://nodejs.org/en/"&gt;node.js&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#create-dapp-frontend"&gt;
  &lt;/a&gt;
  Create D-app frontend
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a project folder and setup a react app&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app edas-dapp
cd edas-dapp
npm start
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the ethers.js libary &lt;br&gt;
with npm:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install ethers
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;with yarn:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add ethers
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The following code creates a button that the user can click which will prompt the user to connect to Metamask wallet. I have added the comments to explain what's going on. Add the following code to App.js.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
import { useEffect, useState } from 'react';

const App = () =&amp;gt; {

  //state variable to store user's public wallet 
  const [currentAccount, setCurrentAccount] = useState("");

  // check wallet connection when the page loads
  const checkIfWalletIsConnected = async () =&amp;gt; {

    // access to window.ethereum
    const {ethereum} = window;

    //check if user has metamask 
    if(!ethereum) {
       alert("Make sure you have metamask");
       return;
     }

    //get the wallet account
    const accounts = await ethereum.request({method: 'eth_accounts'});

    //get the first account
    if(accounts.length !== 0){
      const account = accounts[0];
      console.log("Found account:", account);

      //set the account as a state 
      setCurrentAccount(account);
    }
    else{
      console.log("No account");
    }
  }

  // connect to wallet 
  const connectWallet = async () =&amp;gt; {
    try {
      // get the wallet 
      const {ethereum} = window;

      // there is no wallet extension 
      if(!ethereum) {
        alert("Opps, looks like there is no wallet!");
        return;
      }

      const currentNetwork = ethereum.networkVersion;
      console.log("Current network", currentNetwork);

      // request access to account 
      const accounts = await ethereum.request({ method: "eth_requestAccounts"});

      //set the account in the state 
      setCurrentAccount(accounts[0]); 

    }
    catch( error){
      console.log(error);
    }
  }

  //run function checkIfWalletIsConnected when the page loads
  useEffect(()=&amp;gt; {
    checkIfWalletIsConnected();
  }, []);

  //connect to wallet
  const walletNotConnected = () =&amp;gt; (
    &amp;lt;button onClick={connectWallet} className="connect-to-wallet-button"&amp;gt;
      Connect to Wallet
    &amp;lt;/button&amp;gt;
  );

  //wallet connected
  const walletConnected = () =&amp;gt; (
    &amp;lt;div&amp;gt;
      &amp;lt;p&amp;gt;Connected to the wallet&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );

  return (
    &amp;lt;div className="App"&amp;gt;
      &amp;lt;div style={{display: 'flex', justifyContent:'center', height: '50px'}}&amp;gt;
          {currentAccount === "" ? walletNotConnected()  : walletConnected()}
          &amp;lt;br /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default App;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;&lt;em&gt;Now the following code will connect to the latest active network. So if the user was on the Ethereum Mainnet it will connect to Ethereum, if the user was on the Rinkeby Test Network it will connect to that. However, in many cases we need to the user to connect to a certain network.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can check to see which network the user is connected to and prompt the user with a message to change the network they are on. Modify &lt;em&gt;connectWallet&lt;/em&gt; in App.js as below.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const connectWallet = async () =&amp;gt; {
 try {
   const {ethereum} = window;

   if(!ethereum) {
     alert("Opps, looks like there is no wallet!");
     return;
   }

   const currentNetwork = ethereum.networkVersion;
   console.log("Current network", currentNetwork);

   //check which network the wallet is connected on 
   if(currentNetwork != 4){
     // prompt user with a message to switch to network 4 which is the rinkeby network on metamask
     alert("Opps, only works on Rinkeby! Please change your //network :)");
     return;
   };

   const accounts = await ethereum.request({ method: "eth_requestAccounts"});
   setCurrentAccount(accounts[0]); 

 }
 catch( error){
   console.log(error);
 }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A better way to do this is to directly prompt the user with the request to switch the network. Instead of asking the user to change the network they are connected on. Change the if statement with the following lines.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    // request to switch the network 
    const tx = await ethereum.request({method: 'wallet_switchEthereumChain', params:[{chainId: 
'0x4'}]}).catch()
     if (tx) {
       console.log(tx)
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;By default Chain 4 is already defined in Metamask. You can also prompt the user to add a new network which is not already defined. Here is how you can add the Avalanche network. Add the following piece of code just before requesting access to the account.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// define avax network values 
const avax_mainnet = [{
  chainId: '0xA86A',
  chainName: 'Avalanche Mainnet C-Chain',
  nativeCurrency: {
    name: 'Avalanche',
    symbol: 'AVAX',
    decimals: 18
  },
  rpcUrls: ['https://api.avax.network/ext/bc/C/rpc'],
  blockExplorerUrls: ['https://snowtrace.io/']
  }]  
  // request to add the new network 
  const tx = await ethereum.request({method: 'wallet_addEthereumChain', params:avax_mainnet}).catch()
  if (tx) {
      console.log(tx)
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;🎉 There you go; that's how you can use a crypto wallet in your app! The next step would be to connect to the smart contract and do some cool stuff such as mint you nft, swap tokens etc.&lt;/p&gt;




&lt;p&gt;Overall, it's good to know some js and html to put together a well-tailored frontend for your application.&lt;/p&gt;

&lt;p&gt;If you have any questions, do drop them below or reach out to me on  &lt;a href="https://twitter.com/edatweets_"&gt;Twitter&lt;/a&gt;! &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>web3</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>360° Product View</title>
      <author>Jayanth Acharya</author>
      <pubDate>Fri, 03 Dec 2021 16:15:33 +0000</pubDate>
      <link>https://dev.to/jayanthra/360deg-product-view-3jbn</link>
      <guid>https://dev.to/jayanthra/360deg-product-view-3jbn</guid>
      <description>&lt;p&gt;I am always impressed by the websites that showcase products in unique ways on scroll of the page. Transitions, fades, warps, zooms so on. One very particular animation I want to try is the 360 degree rotation of the product on scroll.&lt;/p&gt;

&lt;p&gt;Like this from &lt;a href="https://www.nuro.ai/"&gt;Nuro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C2h4LjcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdzdbpbwxegs2wlmdhkd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C2h4LjcH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vdzdbpbwxegs2wlmdhkd.gif" alt="nuro car rotate" width="880" height="614"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It gives complete 360 view of the product.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-nuro-implementation"&gt;
  &lt;/a&gt;
  The Nuro implementation
&lt;/h2&gt;

&lt;p&gt;After a bit of digging around the side I see the website downloads each and every image required to create the full view of the vehicle. That's a lot of images, 127 images to be precise.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SrgTHPIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/847luflsme2rjh25cyae.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SrgTHPIm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/847luflsme2rjh25cyae.gif" alt="Images" width="880" height="686"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And these images are loaded onto a canvas to create an animation. Long story short, I want an easier solution.&lt;/p&gt;

&lt;p&gt;Then it flashed, &lt;strong&gt;Sprite sheet&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sprite-sheet"&gt;
  &lt;/a&gt;
  Sprite sheet
&lt;/h2&gt;

&lt;p&gt;Using a sprite sheet, I can load a single image file with all the individual frames required to complete the 360 view of the product&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.codeandweb.com/what-is-a-sprite-sheet#:~:text=A%20sprite%20sheet%20is%20an,loading%20time%20of%20the%20game."&gt;More on spritesheets&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hoping someone had already thought of the sprite sheet method, My next task was to find a relevant sprite sheet of a car.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cssscript.com/demo/product-viewer-animate-sprite/car.jpg"&gt;Found one&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's begin the animation&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concept"&gt;
  &lt;/a&gt;
  Concept
&lt;/h2&gt;

&lt;p&gt;The idea is simple, one used since the dawn of cinema. Create a view window that only sees a certain section of the whole image, and move new frame into the view on each scroll, hence creating an 360 view effect  &lt;/p&gt;

&lt;p&gt;Think of red box as the only part visible at the time and we move image on each scroll step&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9sbmtXo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb6kpsejst80viizas8c.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sbmtXo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pb6kpsejst80viizas8c.gif" alt="move" width="813" height="441"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;First thing to know is what is the height and width of the individual image.&lt;br&gt;
The image used here each frame is &lt;br&gt;
height : 600px&lt;br&gt;
width : 350px&lt;/p&gt;

&lt;p&gt;Let us create a div and set the background as the image along with height and width. also let us set the height of body so we have something to scroll&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;#car&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;350px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt; &lt;span class="sx"&gt;url(https://www.cssscript.com/demo/product-viewer-animate-sprite/car.jpg)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That should complete the CSS.&lt;/p&gt;

&lt;p&gt;Lets move on to the javascript part&lt;/p&gt;

&lt;p&gt;First let's query select the html elements that will be used,the div that holds the car image and a counter that we will use for debugging (not necessary for the implementation)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#car&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// only used for debugging&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;countIndicator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next the height and width of the single image, we will also need number of individual images(sprites) in the the entire image, in this case it is 61. this is so that we can loop back to first image when we reach the end.&lt;/p&gt;

&lt;p&gt;Things would have been easier if all images were in the same line, but we have 13 images each line, so let us keep that in &lt;code&gt;imagePerLine&lt;/code&gt; which will help us know to jump to next line of images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;61&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageHeight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;350&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imagePerLine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All initialization done, let's create the scroll event listener&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window.addEventListener("scroll", function (e) {})&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that we have a scroll event listener, we can get all the scroll related properties, what we want is the &lt;code&gt;scrollTop&lt;/code&gt; property&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const { scrollTop } = e.target.scrollingElement;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next task : count from 0-61 then back to 0. &lt;br&gt;
Performing a mod &lt;code&gt;%&lt;/code&gt; operation on the scrollTop value we can ensure a value stays within our image count&lt;br&gt;
i.e&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;imageCount&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Test the update of &lt;code&gt;stepCount&lt;/code&gt; by assigning it to the &lt;code&gt;countIndicator&lt;/code&gt; on scroll.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2iDN8frl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmur7z10bwjmwu8xyt4i.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2iDN8frl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmur7z10bwjmwu8xyt4i.gif" alt="abrupt" width="294" height="235"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps increment way too many times per scroll we need reduce steps per scroll.&lt;/p&gt;

&lt;p&gt;Dividing the &lt;code&gt;scrollTop&lt;/code&gt; by some number say 10 will give 'smoother' transition values, also a &lt;code&gt;Math.Floor&lt;/code&gt; to avoid float values.&lt;br&gt;
We finally have the &lt;code&gt;stepCount&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;imageCount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Giving us smoother transition of &lt;code&gt;stepCount&lt;/code&gt; per scroll &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEihFnW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hknxidygazitl9c677j4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEihFnW7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hknxidygazitl9c677j4.gif" alt="smoother" width="285" height="189"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that &lt;code&gt;stepCount&lt;/code&gt; is calculated we need the row and column index to the select the image from sprite sheet, this is where the image per line &lt;code&gt;imagePerLine&lt;/code&gt; comes into play.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;columnIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;imagePerLine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stepCount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;imagePerLine&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the row and column indexes, we can calculate our x and y position in pixels by multiplying with &lt;code&gt;imageWidth&lt;/code&gt; and &lt;code&gt;imageHeight&lt;/code&gt; respectively, this value can be used to set div css &lt;code&gt;backgroundPosition&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Read more about &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-position"&gt;backgroundPosition&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;columnIndex&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;imageWidth&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;rowIndex&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;imageHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;car&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;backgroundPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voila!! we now have a 360 degree view of the car on scroll&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gks6aRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrh7lah5pmexf38vq7ni.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Gks6aRq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wrh7lah5pmexf38vq7ni.gif" alt="rotate" width="617" height="359"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the demo and complete code &lt;a href="https://codepen.io/jayanthracharya/pen/OJxyPpa"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you have any questions, reach out to me on &lt;a href="https://twitter.com/JayanthRAcharya"&gt;Twitter&lt;/a&gt; or check my &lt;a href="https://github.com/jayanthra"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Image classification in web applications with ML.NET</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Fri, 03 Dec 2021 16:13:03 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/image-classification-in-web-applications-with-mlnet-ipl</link>
      <guid>https://dev.to/esdanielgomez/image-classification-in-web-applications-with-mlnet-ipl</guid>
      <description>&lt;p&gt;Hey, there! It's a pleasure to greet you. In this tutorial article we will learn step by step to generate a personalized Machine Learning model from ML.NET for the classification of images, particularly to classify images of people with and without masks, and then learn to consume that model from a web application on ASP.NET with the MVVM pattern (Model, View, ViewModel). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-mlnet-and-how-does-it-work"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is ML.NET and how does it work?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;ML.NET is an open-source Machine Learning platform that allows us to transform input data into an ML model, in this case images, and then be able to integrate it into any type of application on the .NET ecosystem, whether web, mobile, desktop, or any other type of application.&lt;br&gt;&lt;br&gt;
In our case study we will focus on the categorization of images. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-classification"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Image Classification&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For our example, the intention is to be able to classify images of people into two groups: people with masks and people without masks. &lt;/p&gt;

&lt;p&gt;To achieve this goal, we will carry out three activities in this article: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. Meet the necessary requirements and prepare our solution in Visual Studio. &lt;/li&gt;
&lt;li&gt;2. Create our Machine Learning model with ML.NET. &lt;/li&gt;
&lt;li&gt;3. Consume the model generated from ASP.NET. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this mentioned, let's get started! &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-1-prerequisites-and-solution-preparation-in-visual-studio"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 1: Prerequisites and Solution Preparation in Visual Studio&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In order to generate our Machine Learning model, we will use the Model Builder interpreter of ML.NET. For this, we need to have the following workload in Visual Studio (.NET Cross-Platform Development):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SD9FKdFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heve2cylbynrxe50bh5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SD9FKdFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/heve2cylbynrxe50bh5l.png" alt="" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this workload, we can now create our solution. In this case, the intention is to consume the ML model that we are going to generate from a web application, for this purpose we will use the DotVVM framework that allows us to work with HTML pages and C# classes on ASP.NET, and with the MVVM pattern (Model, View, ViewModel).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kallCrKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f3lkgg8xbxqf3lfazr9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kallCrKD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f3lkgg8xbxqf3lfazr9.png" alt="" width="493" height="402"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-building-the-machine-learning-model"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 2: Building the Machine Learning Model&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It's time to create the model with ML.NET. As in any other process in the field of Machine Learning to generate a model, the steps to build the sentiment analysis model are as follows: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set the ML scenario.&lt;/li&gt;
&lt;li&gt;Prepare the environment for data training. &lt;/li&gt;
&lt;li&gt;Load the dataset. &lt;/li&gt;
&lt;li&gt;Train the model.&lt;/li&gt;
&lt;li&gt;Evaluate the model. &lt;/li&gt;
&lt;li&gt;Consume the model. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To begin with, in the main project of our solution we will add an element of type Machine Learning:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zlptRZW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ttwyyjpw4pheb2xzxe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zlptRZW1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ttwyyjpw4pheb2xzxe.png" alt="" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With this option, the ML.NET Model Builder interpreter will be initialized and we can start customizing the model. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Scenario:&lt;/strong&gt;&lt;br&gt;
The first step is to select the scenario with which we want to work, in this case it will be &lt;code&gt;Image classification&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--614KqMtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6ltb6xlxccfcsbvjkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--614KqMtz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/js6ltb6xlxccfcsbvjkd.png" alt="" width="880" height="532"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Environment:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, we must select the computing resources for the training of our model. In this scenario we have three options available, either use the CPU of our computer, a graphics card to take advantage of the GPU (since we will work with images), or perform training in the cloud with Azure Machine Learning. In this example we will use the local CPU:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bt9kq5o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hokkvsm5spkipcl6sgru.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bt9kq5o4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hokkvsm5spkipcl6sgru.png" alt="" width="880" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data source:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This is one of the most important parts, since with the data we can customize our model. For this purpose, we must specify the directory where the files of the images that we want to classify are located. In this sense, it is important that there is a folder for each category that we are going to classify, in this case we can find the subfolder &lt;em&gt;"With mask"&lt;/em&gt;, and another called &lt;em&gt;"Without mask"&lt;/em&gt;. By selecting the directory from the model builder ML.NET we can visualize something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CaY4QYET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1ag8yipfg43082prcy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CaY4QYET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8c1ag8yipfg43082prcy.png" alt="" width="880" height="605"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Training:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With everything we have already established so far, we can already perform the training process, and finally generate the desired model. In this section we can only start with the training, and wait for it to end. The time will depend on the number of images in the dataset, the characteristics of our CPU (previously selected method), and the size of the corresponding files.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ysscm3iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5rm6l2uxrlevdkjp7yp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ysscm3iU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5rm6l2uxrlevdkjp7yp.png" alt="" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Evaluation:&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Up to this point we already have the model established, anyway, from the Model Builder of ML.NET we can evaluate the model with a particular example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Evu-leVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rww0zza4nikqe2ngrcv0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Evu-leVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rww0zza4nikqe2ngrcv0.png" alt="" width="880" height="727"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Consume:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, the interpreter will give us options to consume the created model, either by creating other projects (by console or with a web api), or indicating the calls we must make from our own application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X0bF_msH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmcm2ca3q09eih5q35q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X0bF_msH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rvmcm2ca3q09eih5q35q.png" alt="" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this case, we can already consume the model from our web application with DotVVM on ASP.NET with the new generated package: &lt;code&gt;MLModel.mbconfig&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#part-2-consume-the-generated-model-from-aspnet"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Part 2: Consume the generated model from ASP.NET&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;To consume the model we must refer to the MLModel class, which was generated by ML.NET in the group &lt;code&gt;MLModel.mbconfig&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKpmiEge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw8hs12ippkno8m1z581.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKpmiEge--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pw8hs12ippkno8m1z581.png" alt="" width="880" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this sense, it is necessary to establish an instance of ModelInput with the reference of the image that we want to classify, and then call the &lt;code&gt;Predict&lt;/code&gt; method, and obtain an object of type ModelOutput with the corresponding classification (&lt;em&gt;With mask&lt;/em&gt;, &lt;em&gt;Without mask&lt;/em&gt;), and its probability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ViewModel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For this purpose, and to be able to establish a web page with DotVVM, in a ViewModel, in this case the &lt;code&gt;DefaultViewModel.cs&lt;/code&gt;, we will define four attributes or global variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IUploadedFileStorage&lt;/span&gt; &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;UploadedFilesCollection&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These variables will allow us to refer to the image file in a storage, and represent the results of the prediction in the attributes &lt;code&gt;Result&lt;/code&gt; and &lt;code&gt;Score&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we can set a method in this class, in such a way that it represents the action of a button to make the prediction:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;uploadPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;GetUploadPath&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;targetPath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uploadPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;FileId&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;".bin"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SaveAsAsync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;FileId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;sampleData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ModelInput&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ImageSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;targetPath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;//Load model and predict output&lt;/span&gt;
    &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MLModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sampleData&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Prediction&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"With mask"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Score&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Round&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;decimal&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//storage.DeleteFileAsync(Files.Files[0].FileId);&lt;/span&gt;
    &lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have three important parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Store the image file in a local storage, so that we can have the path of this file for the model.&lt;/li&gt;
&lt;li&gt;Initialize an &lt;code&gt;MLModel.ModelInput&lt;/code&gt; with the image path. &lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;MLModel.Predict&lt;/code&gt; with the &lt;code&gt;ModelInput&lt;/code&gt; as a parameter, thus obtaining the 'ModelOutput' with the results.&lt;/li&gt;
&lt;li&gt;Prepare the &lt;code&gt;Result&lt;/code&gt; to visualize the result of the classification later, and its accuracy in the prediction. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;View&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although, we can now construct the view by referencing the attributes and method created in the ViewModel. This view will be encoded in the file &lt;code&gt;Default.dothtml&lt;/code&gt; as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;tbody&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;tr&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;dot:FileUpload&lt;/span&gt; &lt;span class="na"&gt;UploadedFiles=&lt;/span&gt;&lt;span class="s"&gt;"{value: Files}"&lt;/span&gt;
                                &lt;span class="na"&gt;AllowMultipleFiles=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
                                &lt;span class="na"&gt;SuccessMessageText=&lt;/span&gt;&lt;span class="s"&gt;"Predicting..."&lt;/span&gt;
                                &lt;span class="na"&gt;NumberOfFilesIndicatorText=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;
                                &lt;span class="na"&gt;UploadButtonText=&lt;/span&gt;&lt;span class="s"&gt;"Search Image"&lt;/span&gt;
                                &lt;span class="na"&gt;AllowedFileTypes=&lt;/span&gt;&lt;span class="s"&gt;"jpg,png"&lt;/span&gt;
                                &lt;span class="na"&gt;UploadCompleted=&lt;/span&gt;&lt;span class="s"&gt;"{command: Predict()}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;td&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"border: hidden"&lt;/span&gt; &lt;span class="na"&gt;align=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&lt;/span&gt;{{value: Result}}&lt;span class="nt"&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; {{value: Score}}
            &lt;span class="nt"&gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/tbody&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here the most important thing is the &lt;code&gt;FileUpload&lt;/code&gt; control so that the user can upload the file of an image from his computer, to then make the call to the &lt;code&gt;Predict()&lt;/code&gt; method with a &lt;code&gt;Button&lt;/code&gt;, and set the display of the results by showing the values of the variables &lt;code&gt;Result&lt;/code&gt;, and &lt;code&gt;Score&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples running&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With this View, and your ViewModel, our website is ready. Here we can see two examples at runtime:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7KJzAI9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gj882ysngobv5nzgfuh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7KJzAI9f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gj882ysngobv5nzgfuh.png" alt="" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sC3cWxWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wqs9us45a7bm8nyp8uj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sC3cWxWz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1wqs9us45a7bm8nyp8uj.png" alt="" width="880" height="463"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The source code for the sample can be found in the following repository: &lt;a href="https://github.com/esdanielgomez/MLNET_ImageClassification"&gt;github.com/esdanielgomez/MLNET_ImageClassification&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Thank you!&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Thank you very much for reading, I hope this demo can be useful to you. If you have any questions or ideas that you need to discuss, it will be a pleasure to be able to collaborate and together exchange knowledge with each other.&lt;/p&gt;

&lt;p&gt;See you on &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt;! Or if you like you can also write to me by email: &lt;a href="mailto:daniel@esdanielgomez.com"&gt;daniel@esdanielgomez.com&lt;/a&gt;. :)&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>machinelearning</category>
      <category>dotnet</category>
      <category>csharp</category>
    </item>
    <item>
      <title>How to Create Custom 404 error page</title>
      <author>Muhammad Rauf</author>
      <pubDate>Fri, 03 Dec 2021 16:01:35 +0000</pubDate>
      <link>https://dev.to/softcodeon/how-to-create-custom-404-error-page-2ghb</link>
      <guid>https://dev.to/softcodeon/how-to-create-custom-404-error-page-2ghb</guid>
      <description>&lt;p&gt;Hello, Do you need to add a custom 404 error page on your website/blog? 404 error happens when a user opens a non-existing page on your website such as an incorrect link, a page that has been deleted, or when the user mistyped a URL.&lt;/p&gt;

&lt;p&gt;In this tutorial, you will learn how to add a custom 404 error page on your website/blog. Next, We will describe how to change the title of 404 error pages and prevent them from being indexed by Google.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-add-custom-404-error-page"&gt;
  &lt;/a&gt;
  How to add custom 404 error page
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yDnviSUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sff9e0iq1ajxm5xzoa7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yDnviSUf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7sff9e0iq1ajxm5xzoa7.jpg" alt="Image description" width="600" height="300"&gt;&lt;/a&gt;&lt;br&gt;
Here’re steps to adding a custom 404 error page on your WordPress website/blog –&lt;/p&gt;

&lt;p&gt;1.First, login to your WordPress Dashboard.&lt;br&gt;
2.Go to Appearance &amp;gt; Theme Editor.&lt;br&gt;
3.Under theme Editor find 404.php option, and click on it.&lt;br&gt;
4.Now copy and paste the following code in the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;get_header&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://i.ibb.co/W6tgcKQ/softcodeon.gif"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Page Not Found&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error-text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Whoops, We can't seem to find the resource you're looking for.&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Please check that the Web site address is spelled correctly.Or,&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Go to Homepage&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#f0f0f0&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;img&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
  &lt;span class="nc"&gt;.button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
 &lt;span class="nc"&gt;.text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
 &lt;span class="nc"&gt;.error-text&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Cursive&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nc"&gt;.error&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Roboto'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#6200ee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;get_sidebar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nf"&gt;get_footer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, tap the “Update File” button.&lt;/p&gt;

&lt;p&gt;Note: Please Keep in mind if you have the same classes as I have added in the above code please change them with the unique classes you want. You can also customize the style by adding background color, changing image or Gif, Modify Font Family, and text for the error page. &lt;br&gt;
To prevent Google and other search engines from indexing 404 error pages of your blog  Follow this guide to know &lt;a href="https://dev.to/softcodeon/how-to-hide-a-wordpress-page-from-google-l79"&gt;How to Hide a Page from Google Search&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to read in detail from our official website &lt;a href="https://softcodeon.com/tutorials/create-custom-404-error-page.htm"&gt;Create 404 Error page&lt;/a&gt;. I'll recommend to add other best page links to your 404 error page.&lt;/p&gt;

&lt;p&gt;To see &lt;a href="https://codepen.io/softcodeon/pen/QWqjwLY"&gt;DEMO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you find this guide helpful to customize the 404 error page of your website blog. Please discuss below if you have any question about this simple 404 error page.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
