<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Analyze Live Salesforce Data in Infragistics Reveal </title>
      <author>Jerod Johnson</author>
      <pubDate>Fri, 12 Nov 2021 16:44:35 +0000</pubDate>
      <link>https://dev.to/jerodimusprime/analyze-live-salesforce-data-in-infragistics-reveal-44j5</link>
      <guid>https://dev.to/jerodimusprime/analyze-live-salesforce-data-in-infragistics-reveal-44j5</guid>
      <description>&lt;p&gt;Infragistics Reveal is a data visualization solution that simplifies the way you add embedded analytics and visualizations to your apps. Reveal supports connecting to OData APIs, but many enterprise APIs are not built using the OData standard. By combining Reveal with &lt;a href="https://www.cdata.com/products/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData solutions&lt;/a&gt;, you can instantly build dynamic dashboards from live enterprise data sources like Salesforce. &lt;/p&gt;

&lt;p&gt;With access to live data, you can build real-time, responsive dashboards that retrieve new data points with every refresh. &lt;a href="https://www.cdata.com/connect/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData Connect Cloud&lt;/a&gt; and &lt;a href="https://www.cdata.com/apiserver/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;API Server&lt;/a&gt; let you generate standard data APIs like OData for all your data, offering out-of-the-box connectivity to tools like Reveal. &lt;/p&gt;

&lt;p&gt;In this article, we walk through how to connect to Salesforce to Infragistics Reveal to create a simple dashboard, leveraging CData Connect Cloud and CData API server to facilitate the connection. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-cdata"&gt;
  &lt;/a&gt;
  Why CData?
&lt;/h3&gt;

&lt;p&gt;Both CData Connect Cloud and CData API Server provide a single point of contact for all your enterprise data through standard data interfaces like SQL and OData. Instead of migrating data from dozens of sources to a static data store or writing your own integrations, simply point your tools to Connect Cloud or API Server and get instant, live access to all your data. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-connect-cloud"&gt;
  &lt;/a&gt;
  Why Connect Cloud?
&lt;/h3&gt;

&lt;p&gt;As a cloud-based integration platform, Connect Cloud is ideal for working with cloud apps that have embedded Reveal visualizations. With no servers to configure or data proxies to set up, you can simply use the Web-based UI to create a virtual database for Salesforce, generate an OData API, and connect from Reveal to start building dashboards based on live Salesforce data.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-cdata-api-server"&gt;
  &lt;/a&gt;
  Why CData API Server?
&lt;/h3&gt;

&lt;p&gt;CData API Server can be installed on-prem or in a self-hosted environment enabling you to connect to data from on-prem or self-hosted apps built on Reveal dashboards. Create an OData endpoint for Salesforce using the straightforward point-and-click interface and connect from Reveal to create dynamic Salesforce visualizations.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started-salesforce-connection-properties"&gt;
  &lt;/a&gt;
  Getting Started: Salesforce Connection Properties
&lt;/h1&gt;

&lt;p&gt;To work with live Salesforce data in Reveal, you need to authenticate with Salesforce. There are several authentication methods available for connecting to Salesforce: Login, OAuth, and SSO. The Login method requires you to have the username, password, and security token of the user. &lt;/p&gt;

&lt;p&gt;If you do not have access to the username and password or do not wish to require them, you can use OAuth authentication. &lt;/p&gt;

&lt;p&gt;Use SSO (single sign-on) by setting the SSOProperties, SSOLoginUrl, and TokenUrl connection properties, which allow you to authenticate to an identity provider. See the "Getting Started" chapter in the help documentation for more information. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-cdata-connect-cloud"&gt;
  &lt;/a&gt;
  Using CData Connect Cloud
&lt;/h1&gt;

&lt;p&gt;To connect to your Salesforce data in Connect Cloud and enable OData access, navigate to the web interface for your Connect Cloud instance (&lt;a href="https://www.cdatacloud.net/myinstance"&gt;https://www.cdatacloud.net/myinstance&lt;/a&gt;). Follow the steps below to configure Connect Cloud. (Jump to building a dashboard.) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-connect-cloud-user"&gt;
  &lt;/a&gt;
  Add a Connect Cloud User
&lt;/h2&gt;

&lt;p&gt;Create a User to connect to Salesforce from Reveal through Connect Cloud. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click Users -&amp;gt;  Add &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure a User &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_6tM2y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7su5jmqywrs6ctcv66i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_6tM2y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7su5jmqywrs6ctcv66i.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Save Changes and make a note of the Authtoken for the new user &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o081ONlu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwci48u9zpqr1gp5ggrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o081ONlu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwci48u9zpqr1gp5ggrq.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-salesforce-from-connect-cloud"&gt;
  &lt;/a&gt;
  Connect to Salesforce from Connect Cloud
&lt;/h3&gt;

&lt;p&gt;CData Connect Cloud uses a straightforward, point-and-click interface to connect to data sources and generate APIs. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Connect Cloud and click Databases &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnHrNifH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2afqyxm1ojpcigdk744x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnHrNifH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2afqyxm1ojpcigdk744x.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select "Salesforce" from Available Data Sources &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the necessary authentication properties to connect to Salesforce (see above) &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpLKaF_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt8qtqef4y688v8biri4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpLKaF_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt8qtqef4y688v8biri4.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click  Test Database &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click Privileges -&amp;gt;  Add and add the new user (or an existing user) with the appropriate permissions (SELECT is the only required permission for Reveal) &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#add-salesforce-odata-endpoints-in-connect-cloud"&gt;
  &lt;/a&gt;
  Add Salesforce OData Endpoints in Connect Cloud
&lt;/h3&gt;

&lt;p&gt;After connecting to Salesforce, create OData Endpoint for the desired table(s). &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click OData -&amp;gt; Tables -&amp;gt; Add Tables &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2ji8Gtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2d4adhz247rymmeeshc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2ji8Gtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2d4adhz247rymmeeshc.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the Salesforce database &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHzAcRRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inqq08jp2w6kkwwxfqa6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHzAcRRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inqq08jp2w6kkwwxfqa6.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the table(s) you wish to work with and click Next &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPTmH8pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcfka4xsys5qvhn0ocx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPTmH8pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcfka4xsys5qvhn0ocx.png" alt="Image description" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;(Optional) Edit the resource to select specific fields and more &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the settings &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#optional-configure-crossorigin-resource-sharing-cors"&gt;
  &lt;/a&gt;
  (Optional) Configure Cross-Origin Resource Sharing (CORS)
&lt;/h3&gt;

&lt;p&gt;When accessing and connecting to multiple different domains from an application such as Ajax, there is a possibility of violating the limitations of cross-site scripting. In that case, configure the CORS settings in OData -&amp;gt; Settings. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable cross-origin resource sharing (CORS): ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow all domains without '*': ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Methods: GET, PUT, POST, OPTIONS &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Headers: Authorization &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the changes to the settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxiW5m14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yne8m299vyvfp8m5hrd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxiW5m14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yne8m299vyvfp8m5hrd3.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-api-server"&gt;
  &lt;/a&gt;
  Using API Server
&lt;/h1&gt;

&lt;p&gt;To connect to your Salesforce data in API Server and enable OData access, navigate to the web interface for your API Server instance (&lt;a href="https://localhost:8153"&gt;https://localhost:8153&lt;/a&gt;). Follow the steps below to configure the API Server. (Jump to building a dashboard.) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-salesforce-from-api-server"&gt;
  &lt;/a&gt;
  Connect to Salesforce from API Server
&lt;/h3&gt;

&lt;p&gt;CData API Server uses a straightforward, point-and-click interface to connect to data sources and generate APIs. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open API Server and click Settings -&amp;gt; Connection -&amp;gt;  Add Connection &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XjtcBlBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i126nt9bi7frn444usmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XjtcBlBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i126nt9bi7frn444usmp.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select "Salesforce" &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pd0dIPiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7qhjqhtrm8gvmw7wyqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pd0dIPiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7qhjqhtrm8gvmw7wyqx.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter the necessary authentication properties to connect to Salesforce (see above) &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXtG6IqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xolrvexiikffd2e8ha5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXtG6IqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xolrvexiikffd2e8ha5w.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-salesforce-resource-definitions-in-api-server"&gt;
  &lt;/a&gt;
  Add Salesforce Resource Definitions in API Server
&lt;/h3&gt;

&lt;p&gt;After connecting to Salesforce, create Resources, which represent API endpoints for Salesforce data. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Settings -&amp;gt; Resources -&amp;gt; Add Resource &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCHIJwCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u7xt3j5jn37ffsvcql9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCHIJwCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u7xt3j5jn37ffsvcql9.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the Salesforce connection &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq-6dcC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li0037b65traiapd8z9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq-6dcC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li0037b65traiapd8z9u.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the table you wish to retrieve and click Next &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARtYUHBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ue1hzcsn501fu2izd0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARtYUHBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ue1hzcsn501fu2izd0m.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;(Optional) Edit the resource to select specific fields and more &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the settings &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#add-an-api-server-user"&gt;
  &lt;/a&gt;
  Add an API Server User
&lt;/h3&gt;

&lt;p&gt;Create a User to connect to Salesforce from Reveal through API Server. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click Settings -&amp;gt; Users &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click  Add &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure a User with access to the Salesforce Connection and Resource(s) &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdDP5Vdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1bv804752olacfec092.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdDP5Vdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1bv804752olacfec092.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nl5X-NZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl5jz4tjo8a0wj6jf7y4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nl5X-NZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl5jz4tjo8a0wj6jf7y4.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-configure-crossorigin-resource-sharing-cors"&gt;
  &lt;/a&gt;
  (Optional) Configure Cross-Origin Resource Sharing (CORS)
&lt;/h3&gt;

&lt;p&gt;When accessing and connecting to multiple different domains from an application such as Ajax, there is a possibility of violating the limitations of cross-site scripting. In that case, configure the CORS settings in Settings -&amp;gt; Server. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable cross-origin resource sharing (CORS): ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow all domains without '*': ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Methods: GET, PUT, POST, OPTIONS &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Headers: Authorization &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the changes to the settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BcSZxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/239ajiquudh7fmnylkvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BcSZxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/239ajiquudh7fmnylkvs.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-dashboard-in-reveal"&gt;
  &lt;/a&gt;
  Create a Dashboard in Reveal
&lt;/h1&gt;

&lt;p&gt;With the API Server configured, we can visualize Salesforce data in Reveal. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log into Reveal and click Dashboards -&amp;gt;  New &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dOpa9FWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhq0ev54wlgm5wssjws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOpa9FWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhq0ev54wlgm5wssjws.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click  Data Source -&amp;gt; OData Feed &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JNfCSaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz5gozzg9vd9e76xpxz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JNfCSaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz5gozzg9vd9e76xpxz9.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Specify the API Server or Connect Cloud API endpoint URL, for example, &lt;a href="https://serverurl/api.rsc"&gt;https://serverurl/api.rsc&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSe7ADcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v89jczk19wxejsyaw912.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSe7ADcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v89jczk19wxejsyaw912.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select Generic Credentials and specify the API Server username and authentication token &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtmmTnXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp4e6bw7m5n84hfjfhpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtmmTnXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp4e6bw7m5n84hfjfhpv.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the entity you wish to visualize &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kgw_FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyvqt20mws71fkwh70in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kgw_FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyvqt20mws71fkwh70in.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select fields and choose a chart type &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUXp8UNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzy8ri0eb3zvwckp33ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUXp8UNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzy8ri0eb3zvwckp33ry.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More Information
&lt;/h1&gt;

&lt;p&gt;Companies everywhere are looking to leverage their data to make effective decisions and grow their businesses. &lt;/p&gt;

&lt;p&gt;By providing industry-standard connectivity, both &lt;a href="https://www.cdata.com/connect/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData Connect Cloud&lt;/a&gt; and &lt;a href="https://www.cdata.com/apiserver/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData API Server&lt;/a&gt; democratize Salesforce access. Now everyone in the organization, from IT professionals &amp;amp; app developers to citizen analysts &amp;amp; data scientists can work with and find value from the entire Salesforce platform. &lt;/p&gt;

</description>
      <category>automation</category>
      <category>integration</category>
      <category>database</category>
      <category>connectivity</category>
    </item>
    <item>
      <title>Full Stack Developer Road-map 2021 || FREE RESOURCES 🔥🔥( Front-end)  Part I</title>
      <author>Femil Savaliya</author>
      <pubDate>Fri, 12 Nov 2021 16:44:34 +0000</pubDate>
      <link>https://dev.to/femil/full-stack-developer-road-map-2021-free-resources-front-end-part-i-2ceh</link>
      <guid>https://dev.to/femil/full-stack-developer-road-map-2021-free-resources-front-end-part-i-2ceh</guid>
      <description>&lt;p&gt;First thing first, &lt;br&gt;
Do you have questions? Here's an answer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-fullstack-developer"&gt;
  &lt;/a&gt;
  What is a full-stack developer??
&lt;/h3&gt;

&lt;p&gt;A Full-Stack Developer is someone who works with the Back End — or server-side — of the application as well as the Front End or client-side.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-become-a-fullstack-developer"&gt;
  &lt;/a&gt;
  Why Become a Full-Stack Developer??
&lt;/h3&gt;

&lt;p&gt;A Full-Stack Developer, or someone who can work on both the back-end and front-end of an application, is a rare and valuable person to have on a team. It's why they can earn upwards of $120,000 a year and why companies fight to snag one for their team.&lt;/p&gt;

&lt;p&gt;In this blog, I will cover the front-end part. Let's jump into it.&lt;/p&gt;

&lt;p&gt;As easy as eating a burger!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8qoedD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.linkpicture.com/q/hamburger-full-stack.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8qoedD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.linkpicture.com/q/hamburger-full-stack.jpg" alt="full-stack burgur" width="735" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can digest this burger, then you are good to go 🤣🤣,&lt;/p&gt;

&lt;p&gt;Now serious, let's look at this front-end web dev languages and technologies 🙌,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1html"&gt;
  &lt;/a&gt;
  1.HTML
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HyperText Markup Language (HTML)&lt;/strong&gt; is the set of markup symbols or codes inserted into a file intended for display on the Internet. The markup tells web browsers how to display a web page's words and images&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML describes the structure of a Web page&lt;/li&gt;
&lt;li&gt;HTML consists of a series of elements&lt;/li&gt;
&lt;li&gt;HTML elements tell the browser how to display the content&lt;/li&gt;
&lt;li&gt;HTML elements label pieces of content such as "this is a 
heading", "this is a paragraph", "this is a link", etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
      &lt;li&gt;
        &lt;a href="https://www.w3schools.com/html/"&gt;W3Schools&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.codecademy.com/learn/learn-html"&gt;Learn HTML&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.udemy.com/topic/html/free/"&gt;Free UDEMY Course for HTML/CSS from scratch&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.freecodecamp.org/news/html-css-11-hour-course/"&gt;HTML and CSS From scratch - FreeCodeCamp&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://youtu.be/pQN-pnXPaVg"&gt;HTML in 2hr - FreeCodeCamp&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2css"&gt;
  &lt;/a&gt;
  2.CSS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Cascading Style Sheets (CSS)&lt;/strong&gt; is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML).&lt;/p&gt;

&lt;ul&gt;
      &lt;li&gt;CSS describes how HTML elements are to be displayed on screen, 
          paper, or in other media&lt;/li&gt;
&lt;li&gt;HTML consists of a series of elements&lt;/li&gt;
&lt;li&gt;External stylesheets are stored in CSS files&lt;/li&gt;
&lt;li&gt;CSS saves a lot of work. It can control the layout of multiple 
  web pages all at once
&lt;/li&gt;
    &lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
      &lt;li&gt;
        &lt;a href="https://www.w3schools.com/w3css/defaulT.asp"&gt;W3Schools CSS&lt;/a&gt;
      &lt;/li&gt;
      
      &lt;li&gt;
        &lt;a href="https://www.freecodecamp.org/news/tag/css/"&gt;FreeCodeCamp - CSS Course&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://youtu.be/3_9znKVNe5g"&gt;Intro CSS - This series will teach you CSS in one hour&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://openbase.com/search?q=css"&gt;ulma - Tutorials provided by OpenBase&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#3javascript"&gt;
  &lt;/a&gt;
  3.JAVASCRIPT
&lt;/h2&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;dynamic computer programming language&lt;/strong&gt;. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side scripts to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.&lt;/p&gt;

&lt;ul&gt;
      &lt;li&gt;JavaScript can update and change both HTML and CSS.&lt;/li&gt;
&lt;li&gt;JavaScript can calculate, manipulate and validate data.&lt;/li&gt;
&lt;li&gt;JavaScript is the Programming Language for the Web.&lt;/li&gt;

    &lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
      &lt;li&gt;
        &lt;a href="https://www.w3schools.com/whatis/whatis_js.asp"&gt;W3Schools JS&lt;/a&gt;
      &lt;/li&gt;
      
      &lt;li&gt;
        &lt;a href="https://www.freecodecamp.org/news/learn-javascript-full-course/"&gt;FreeCodeCamp - JS Course&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://youtu.be/W6NZfCO5SIk%0A%20%20%20%20%20%20%20%20%20%20target="&gt;JavaScript Tutorial for Beginners: Learn JavaScript in 1 Hour&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.javascript.com"&gt;Javascript&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#frameworks"&gt;
  &lt;/a&gt;
  ||Frameworks||
&lt;/h2&gt;

&lt;p&gt;The front-end of a website or application is the stuff visible to the user on the website. ... In addition, it includes building user-friendly interfaces and efficiently presenting the data from the back end to a user. Thus, &lt;strong&gt;a Front-end Framework is a platform/tool to build the front end of your website&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are many debet on which frameworks are better, and why, but as per global user this are top five,&lt;/p&gt;

&lt;ul&gt;
      &lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://vuejs.org/"&gt;VueJs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://jquery.com/"&gt;JQuery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://emberjs.com/"&gt;EmberJs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

&lt;p&gt;Best way to learn and understand each concept in deep, I recommend you to refer to the documentation of a particular framework.&lt;/p&gt;

&lt;p&gt;Although there are more technologies for all HTML, CSS, and JAVASCRIPT that will help you to enhance your productivity and make it easy to write code if you ask me first to understand and learn the core language, then go for the framework and their technologies.&lt;/p&gt;

&lt;p&gt;Congratulations!!! You’re now a front-end developer. 😎&lt;/p&gt;

&lt;p&gt;All the best  &lt;code&gt;&amp;lt;p style="life:flex;"&amp;gt;Happy Code&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Part II will be uploaded soon. Thanks for reading. 💖💖&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>TruStacks</title>
      <author>TruStacks</author>
      <pubDate>Fri, 12 Nov 2021 16:19:46 +0000</pubDate>
      <link>https://dev.to/trustacks1/trustacks-1if5</link>
      <guid>https://dev.to/trustacks1/trustacks-1if5</guid>
      <description>&lt;p&gt;Speed is power. TruStacks gives you the power and ability to quickly standardize your developer workflows and will provide you a consistent foundation that can be easily followed and replicated.&lt;/p&gt;

</description>
      <category>devops</category>
      <category>automation</category>
      <category>softwaredevelopmet</category>
      <category>pipelines</category>
    </item>
    <item>
      <title>Improve Developer Productivity with Ephemeral Environments</title>
      <author>Sam Allen</author>
      <pubDate>Fri, 12 Nov 2021 16:16:55 +0000</pubDate>
      <link>https://dev.to/allensam88/improve-developer-productivity-with-ephemeral-environments-2m2l</link>
      <guid>https://dev.to/allensam88/improve-developer-productivity-with-ephemeral-environments-2m2l</guid>
      <description>&lt;h3&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h3&gt;

&lt;p&gt;There seems to be an insatiable demand for software; indeed there is an app for everything these days. In many ways, modern software development is more akin to a continuous manufacturing process, where products are frequently produced and shipped. Software companies are constantly iterating on new product features. User expectations demand constant improvements ranging from bug fixes to expanded product offerings.&lt;/p&gt;

&lt;p&gt;The Developer process for HOW software is shipped is vital for maintaining a competitive edge. For example, having access to rapid-prototyping test environments is a critical process that can greatly enhance the overall Developer Experience. At ReleaseHub, our mission is to enable companies to get their best ideas to the world quickly by helping them produce consistent, reliable, and plentiful Environments on demand.&lt;/p&gt;

&lt;p&gt;Additionally, having an overall improvement strategy for streamlining the Developer Experience is crucial for eliminating any internal friction that may arise. There are many different approaches for conducting process improvement, ranging from formal methodologies to informal ad hoc projects. All approaches are valid and can add value depending on your company culture. In recent years, the Lean Manufacturing philosophy has become a popular approach for analyzing and improving internal work processes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#brief-lean-manufacturing-history"&gt;
  &lt;/a&gt;
  Brief Lean Manufacturing History
&lt;/h3&gt;

&lt;p&gt;Prior to pivoting my career toward software development, I lived another life as an industrial engineer facilitating Lean Manufacturing projects and workshops where the goal was to leverage employee ingenuity to identify and creatively eliminate any waste in a process.&lt;/p&gt;

&lt;p&gt;The Lean Manufacturing philosophy has a rich history that can be traced back to Walter Shewart’s statistical quality control methods at Bell Laboratories in the early 20th century. W. Edward Deming learned and enhanced these techniques from Shewart. After WWII, Deming was called upon to help rebuild Japanese industry and he championed this thought-process of continuous improvement through statistical analysis. Companies like Toyota embraced this approach and continued to enhance it where it gradually morphed into the Lean philosophy that many of us are familiar with today.&lt;/p&gt;

&lt;p&gt;Lean Manufacturing can now be found in other non-manufacturing sectors such as healthcare, banking, government, software development, etc. Essentially, all work consists of a “process” that can be continually improved upon, regardless of the product or work environment. Continuous improvement enables the employee to be more successful by standardizing or automating routines, eliminating blockers, and harvesting worker ideas for improving their own work. Many software companies do this naturally and they may or may not call it “kaizen”, which is the Japanese word for continuous improvement. There are agile scrum retrospectives where teams debrief on how their last Sprint went to see whether they can improve the overall developer experience. However a team approaches it, continuous improvement cannot be avoided.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-releasehub-can-help"&gt;
  &lt;/a&gt;
  How ReleaseHub Can Help
&lt;/h3&gt;

&lt;p&gt;At many tech organizations, there is still the common bottleneck problem of generating test environments. Software companies typically employ a DevOps team to produce such environments which can be costly to maintain and frequently break down. Any shared resource can be a pain point for both large and small companies that are trying to rapidly ship new features. Developer teams must wait around for testing environments to become available or argue over priorities and who can utilize the environment.&lt;/p&gt;

&lt;p&gt;Our entire mission at ReleaseHub is to enable companies to get their best ideas to the world quickly by helping them produce consistent, reliable, and plentiful Environments on demand. This is a huge kaizen improvement opportunity that can greatly improve the overall Developer Experience by eliminating frustrating downtime and improving quality, throughput, and morale. If you wish to get your organization set up with automated Environments, let us know how we can help you accomplish your mission faster and easier.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@lennykuhne?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Lenny Kuhne&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/manufacturing?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#45)
</title>
      <author>martin krause</author>
      <pubDate>Fri, 12 Nov 2021 16:10:33 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-45-2h5d</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-45-2h5d</guid>
      <description>&lt;h2&gt;
  &lt;a href="#towards-an-animation-smoothness-metric"&gt;
  &lt;/a&gt;
  Towards an animation smoothness metric
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn about measuring animations, how to think about animation frames, and overall page smoothness.&lt;br&gt;
&lt;a href="https://web.dev/smoothness/"&gt;https://web.dev/smoothness/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#developer-tools-secrets-that-shouldnt-be-secrets"&gt;
  &lt;/a&gt;
  Developer Tools secrets that shouldn’t be secrets
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Christian Heilmann: This is a talk that I’ve given at CityJS this September. I am a principal product manager for developer tools in Microsoft Edge and these are things I encountered during working on the tools, documenting them and going through user feedback.&lt;br&gt;
&lt;a href="https://christianheilmann.com/2021/11/01/developer-tools-secrets-that-shouldnt-be-secrets/?ref=sidebar&amp;amp;fbclid=IwAR3nUhkdzWDm6gdbtf0nWDdgImcyxpj22WRqSK2J4X5RmYI_vHv_stgZSDM"&gt;https://christianheilmann.com/2021/11/01/developer-tools-secrets-that-shouldnt-be-secrets/?ref=sidebar&amp;amp;fbclid=IwAR3nUhkdzWDm6gdbtf0nWDdgImcyxpj22WRqSK2J4X5RmYI_vHv_stgZSDM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#a-guide-to-load-testing-nodejs-apis"&gt;
  &lt;/a&gt;
  A Guide to Load Testing Node.js APIs
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Artillery is an open-source command-line tool purpose-built for load testing and smoke testing web applications. It is written in JavaScript and it supports testing HTTP, Socket.io, and WebSockets APIs.&lt;br&gt;
&lt;a href="https://blog.appsignal.com/2021/11/10/a-guide-to-load-testing-nodejs-apis-with-artillery.html"&gt;https://blog.appsignal.com/2021/11/10/a-guide-to-load-testing-nodejs-apis-with-artillery.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#announcing-typescript-45-rc"&gt;
  &lt;/a&gt;
  Announcing TypeScript 4.5 RC
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Today we’re excited to announce our Release Candidate (RC) of TypeScript 4.5! Between now and the stable release of TypeScript 4.5, we expect no further changes apart from critical bug fixes.&lt;br&gt;
&lt;a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-rc/"&gt;https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-rc/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#angular-v13-is-now-available"&gt;
  &lt;/a&gt;
  Angular v13 is now Available
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;We’re back with the brand new release of Angular v13 to share with all of you! This latest release brings all sorts of updates and features to help your teams build great apps.&lt;br&gt;
&lt;a href="https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296"&gt;https://blog.angular.io/angular-v13-is-now-available-cce66f7bc296&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#plus-one-video-what-the-heck-is-the-event-loop-anyway-philip-roberts-jsconf-eu"&gt;
  &lt;/a&gt;
  PLUS one video: What the heck is the event loop anyway? | Philip Roberts | JSConf EU
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;A good explanations of how JavaScript actually works with some handy visualisations, and fun hacks for an intuitive understanding of what happens when JavaScript runs.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ"&gt;https://www.youtube.com/watch?v=8aGhZQkoFbQ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 12 Nov 2021 16:08:40 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-641</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-641</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Playing with an adorable pet... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on your wins! Excuse me while I slide into the weekend. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/cAhGmJPBqsXAlDTYHi/giphy.gif" alt="Panda Cub going down a slide" width="340" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Update on Windows 11 in React Js 💻🌈 (Unofficial)</title>
      <author>Blue edge</author>
      <pubDate>Fri, 12 Nov 2021 15:49:36 +0000</pubDate>
      <link>https://dev.to/blueedgetechno/update-on-windows-11-in-react-js-unofficial-2m87</link>
      <guid>https://dev.to/blueedgetechno/update-on-windows-11-in-react-js-unofficial-2m87</guid>
      <description>&lt;p&gt;Hello devs,&lt;/p&gt;

&lt;p&gt;So this is a follow up of my &lt;a href="https://dev.to/blueedgetechno/windows-11-in-react-js-hd3"&gt;previous post&lt;/a&gt; about the remaking of windows 11 in ReactJs.&lt;/p&gt;

&lt;p&gt;Visit: &lt;a href="http://win11.blueedge.me"&gt;win11.blueedge.me&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/blueedgetechno/win11React"&gt;blueedgetechno/win11React&lt;/a&gt;&lt;br&gt;
Discord: &lt;a href="https://discord.gg/qmEZwUhb4b"&gt;discord.gg/qmEZwUhb4b&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After a few months of regular updates and huge support from the community, we have been able to add dozens of features and lots of enhancements.&lt;/p&gt;

&lt;p&gt;This version presents you:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Dark mode and ton of CSS optimizations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A fully featured and community-backed store system to download external applications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New apps like Spotify, Discord, Camera, Store (updated), and a lot more.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Native features like Context menu, Action center, Lockscreen, Boot Screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lot more responsive for mobile and tablets.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And a lot more on my bucket list ...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview"&gt;
  &lt;/a&gt;
  Preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Gf_wv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj0nd5np1l4wypdqarfn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h9Gf_wv0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lj0nd5np1l4wypdqarfn.png" alt="winvslight" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mO9GybdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lidaz7e00jf96o03xcrr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mO9GybdJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lidaz7e00jf96o03xcrr.png" alt="store&amp;amp;spotify" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tyFx8H1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/con4vecc2hzpaxssy3hn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tyFx8H1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/con4vecc2hzpaxssy3hn.png" alt="contextmenu" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GEEZei8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5b9ghwwgoxr6ujpys9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GEEZei8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v5b9ghwwgoxr6ujpys9u.png" alt="widget" width="880" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, There were a lot of hiccups during the development of this project. We even faced a backlash from Microsoft for trademark violation but we managed our way through.&lt;/p&gt;

&lt;p&gt;Special thanks to &lt;a class="mentioned-user" href="https://dev.to/andrewstech"&gt;@andrewstech&lt;/a&gt;
 for being so helpful during the entire process.&lt;/p&gt;

&lt;p&gt;Visit: &lt;a href="http://win11.blueedge.me"&gt;win11.blueedge.me&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/blueedgetechno/win11React"&gt;blueedgetechno/win11React&lt;/a&gt;&lt;br&gt;
Discord: &lt;a href="https://discord.gg/qmEZwUhb4b"&gt;discord.gg/qmEZwUhb4b&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>css</category>
      <category>javascript</category>
      <category>design</category>
    </item>
    <item>
      <title>How to make a TailwindCSS SaaS Landing Page in record time</title>
      <author>Haris#</author>
      <pubDate>Fri, 12 Nov 2021 15:38:11 +0000</pubDate>
      <link>https://dev.to/harishash/how-to-make-a-tailwindcss-saas-landing-page-in-record-time-152b</link>
      <guid>https://dev.to/harishash/how-to-make-a-tailwindcss-saas-landing-page-in-record-time-152b</guid>
      <description>&lt;p&gt;Hi everyone,&lt;br&gt;
My name is Haris and today I’ll be showing you how to make a SaaS Landing Page with TailwindCSS within 5 minutes, and the best part is that it’ll be totally free! So, let’s jump right in!&lt;/p&gt;

&lt;p&gt;To make this Landing Page, we’ll be using the blox extension for VS Code. You can grab it for free &lt;a href="https://bit.ly/30mBC4U"&gt;here&lt;/a&gt; on VS Code Marketplace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WTory9Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ewcnfm70vt4oo8gormd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WTory9Xm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ewcnfm70vt4oo8gormd.png" alt="blox VS code Marketplace" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's start things off with a hero section. I'll be using &lt;code&gt;Center Aligned with Image&lt;/code&gt; for this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rgKvdweL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa6bunkbuvgvi7z4xhtj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rgKvdweL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sa6bunkbuvgvi7z4xhtj.png" alt="Hero Section" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next up we’ll add a Feature section. Here you can highlight the main features of your product. For that purpose &lt;code&gt;Feature 7&lt;/code&gt; will work just fine.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KIv3uZfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0x4kf4kyjuesaf08b5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KIv3uZfV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0x4kf4kyjuesaf08b5x.png" alt="Feature Section" width="880" height="537"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the feature section, we can add a Pricing section to showcase the offerings of the product. We’ll go with &lt;code&gt;3 Cards with Yellow Hover&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--teqPu1aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c835amv64wjaf7brufuy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--teqPu1aw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c835amv64wjaf7brufuy.png" alt="Pricing Section" width="512" height="313"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll close things off with a CTA and I think &lt;code&gt;Right Aligned Avatars with Gradient&lt;/code&gt; will look perfect for this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g2PBJoxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkwfp8smrv0awm9zhu25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g2PBJoxQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qkwfp8smrv0awm9zhu25.png" alt="CTA Section" width="512" height="313"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And just like that, we’re done with the first draft of the SaaS Landing Page. Here’s how the end product looks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Aapitohd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghls655z95zhezz62ov4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Aapitohd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghls655z95zhezz62ov4.gif" alt="Final Preview GIF" width="600" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since blox offers support for other frameworks like React, Angular and Vue, the same page can be developed for those projects as well. So with just a couple of clicks, we can set up the structure for our TailwindCSS landing page and make modifications according to the project from that point onwards. Hope this helps you save your precious developer hours.&lt;/p&gt;

&lt;p&gt;You can access the page that I made here at: &lt;a href="https://github.com/vs-blox/examples"&gt;https://github.com/vs-blox/examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Developing!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>tailwindcss</category>
    </item>
    <item>
      <title>Editing API Driver API Profiles </title>
      <author>Jerod Johnson</author>
      <pubDate>Fri, 12 Nov 2021 15:28:44 +0000</pubDate>
      <link>https://dev.to/jerodimusprime/editing-api-driver-api-profiles-m63</link>
      <guid>https://dev.to/jerodimusprime/editing-api-driver-api-profiles-m63</guid>
      <description>&lt;p&gt;RESTful APIs offer a straightforward way for businesses to work with external data and offer access to their own data. With more than 24,000 public APIs providing access to limitless data and the typical enterprise leveraging more than 200 applications, teams and developers need more efficient ways to query API data. With the CData API Driver, it is easier than ever to integrate with APIs at scale for data analytics and application development. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-the-api-driver"&gt;
  &lt;/a&gt;
  Why use the API Driver?
&lt;/h2&gt;

&lt;p&gt;Use simple SQL to access and work with data anywhere there’s an API. Like all &lt;a href="https://www.cdata.com/drivers/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=editing-api-driver-api-profiles"&gt;CData Drivers&lt;/a&gt;, the CData API Driver makes it easier to work with your data. With the API Driver and the available API Profiles, you can instantly and codelessly query dozens of APIs (including any APIs built using the &lt;a href="https://www.cdata.com/apiserver/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=editing-api-driver-api-profiles"&gt;CData API Server&lt;/a&gt;) from BI, data integration, and custom applications.  &lt;/p&gt;

&lt;p&gt;Thanks to its extensible design, organizations and developers can modify API Profiles from API Server to customize integrations and even create their own API Profiles. Easily expand the connectivity offered by API Driver to any RESTful API. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#editing-an-api-profile"&gt;
  &lt;/a&gt;
  Editing an API Profile
&lt;/h1&gt;

&lt;p&gt;By default, existing API Profiles grant read access to APIs. We can edit the API Profiles to gain write access to APIs (where supported). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unzip-the-existing-profile"&gt;
  &lt;/a&gt;
  Unzip the Existing Profile
&lt;/h2&gt;

&lt;p&gt;API Profiles (.apip files) are compressed folders that contain a collection of schema files representing the endpoints available for the API. When you decompress (unzip) the file, you can edit the schema files individually to extend the functionality. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CkDkVzQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqum8t6f0dh5zojgao37.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CkDkVzQ3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqum8t6f0dh5zojgao37.png" alt="Image description" width="854" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#open-the-schema-file"&gt;
  &lt;/a&gt;
  Open the Schema File
&lt;/h2&gt;

&lt;p&gt;Once the Profile is decompressed, open the schema file for the API endpoint you wish to modify (in your preferred text editor). Each schema file has several parts that define how SQL access is enabled for an API endpoint. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;api:info: This keyword maps API fields to table columns through scripted column definitions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;attr: This element represents a column definition (details are below). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;api:set attr="...": This keyword (attribute) sets various parameters for the API integration, including paging functionality and information on how to parse the API response (via the RepeatElement attribute). &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;api:script method="...": This keyword defines how read and write functionality is implemented for the API endpoint, including which internal operation is called and how specific functionality like filtering is managed. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below are the full contents of a the schema file for retrieving Zoom Meetings. &lt;/p&gt;

&lt;p&gt;Meetings.rsd &lt;/p&gt;































&lt;p&gt;&lt;a href="/api:info"&gt;/api:info&lt;/a&gt; &lt;/p&gt;

























&lt;p&gt;&lt;a&gt;api:push/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:call"&gt;/api:call&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;





&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;





&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;





&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#update-column-definitions"&gt;
  &lt;/a&gt;
  Update Column Definitions
&lt;/h2&gt;

&lt;p&gt;If we are going to implement write functionality, we need to modify the schema to allow write permissions to the appropriate columns. Before we update a column definition for the Profile, let's examine a single column definition and discuss the different attributes. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#id-column-definition"&gt;
  &lt;/a&gt;
  Id Column Definition
&lt;/h2&gt;



&lt;h2&gt;
  &lt;a href="#column-definition-attributes"&gt;
  &lt;/a&gt;
  Column Definition Attributes
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;name: The name of the column in the SQL interface for the API endpoint &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;xs:type: The data type associated with the column (e.g.: string, datetime, int, etc.) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;readonly: Whether the column allows writes (by default, this is always true) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;key: Whether a column is intended to be a unique identifier for the elements in a table/view &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;other:xPath: The path (exact or relative to theRepeatElement) in the API response to the column value &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can see from the schema file that most of the columns (which correspond to various API fields) are flagged as read-only. The first edit we need to make is to change those columns so the API Driver can write to them (based on the API specification) by removing the read-only flags: &lt;/p&gt;

&lt;p&gt;... &lt;/p&gt;





















&lt;p&gt;... &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-insert-functionality"&gt;
  &lt;/a&gt;
  Add INSERT Functionality
&lt;/h2&gt;

&lt;p&gt;In this section, we walk through modifying the Schema file to support INSERT statements like the following: &lt;/p&gt;

&lt;p&gt;INSERT INTO Meetings &lt;/p&gt;

&lt;p&gt;(Topic,Type,StartTime,Duration,TimeZone,UserId) &lt;/p&gt;

&lt;p&gt;VALUES &lt;/p&gt;

&lt;p&gt;('Test Meeting',2,'2019-12-31T00:00:00',60,'EST','&lt;a href="mailto:user@domain.com"&gt;user@domain.com&lt;/a&gt;') &lt;/p&gt;

&lt;p&gt;NOTE: Topic, Type, StartTime, Duration, and TimeZone are all columns in our schema. The UserId attr is a pseudocolumn, which behaves like a table column but is not actually stored in the table. In this case, the UserId is used to POST the new meeting to a specific user account. &lt;/p&gt;

&lt;p&gt;In the schema file, the SELECT functionality is implemented in the  element: &lt;/p&gt;







&lt;p&gt;&lt;a&gt;api:push/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:call"&gt;/api:call&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To implement INSERT functionality, we need to modify the  element, setting the method attribute value to "POST", setting the input values in a data attribute and calling the appropriate operation (apisadoExecuteJSONGet in this case). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-the-method-attribute"&gt;
  &lt;/a&gt;
  Setting the method Attribute
&lt;/h3&gt;





&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-the-data-attribute"&gt;
  &lt;/a&gt;
  Setting the data Attribute
&lt;/h3&gt;

&lt;p&gt;The Zoom Meetings API endpoint allows you to create a new meeting by submitting a JSON object with various fields for the new meeting. Values from an INSERT statement are mapped to corresponding fields in an _input object and are used to create the data attribute, which will be POSTed to the Zoom API. &lt;/p&gt;



&lt;p&gt;{ &lt;/p&gt;

&lt;p&gt;"topic": "[_input.Topic]", &lt;/p&gt;

&lt;p&gt;"type": [_input.Type], &lt;/p&gt;

&lt;p&gt;"start_time": "[_input.StartTime]", &lt;/p&gt;

&lt;p&gt;"duration": "[_input.Duration]", &lt;/p&gt;

&lt;p&gt;"timezone": "[_input.TimeZone]" &lt;/p&gt;

&lt;p&gt;} &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:set"&gt;/api:set&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-the-apisadoexecutejsonget-operation"&gt;
  &lt;/a&gt;
  Calling the apisadoExecuteJSONGet Operation
&lt;/h3&gt;

&lt;p&gt;Once the data attribute is set, call the apisadoExecuteJSONGet operation using an api:call keyword and push the operation to the API Driver with an api:push keyword. &lt;/p&gt;



&lt;p&gt;... &lt;/p&gt;



&lt;p&gt;&lt;a&gt;api:push&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:push"&gt;/api:push&lt;/a&gt;&lt;a href="/api:call"&gt;/api:call&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="/api:script"&gt;/api:script&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-the-edited-profile"&gt;
  &lt;/a&gt;
  Using the Edited Profile
&lt;/h2&gt;

&lt;p&gt;With the edits made to the schema file, you are ready to start INSERTing Meetings to a Zoom account. Save the schema file, recompress (zip) the schema files, and change the extension of the compressed file to .apip. Use an application that supports standard connectivity to connect to the API Profile using the API Driver, then submit your INSERT statement. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#insert-statement"&gt;
  &lt;/a&gt;
  INSERT Statement
&lt;/h1&gt;

&lt;p&gt;INSERT INTO Meetings &lt;/p&gt;

&lt;p&gt;(Topic,Type,StartTime,Duration,TimeZone,UserId) &lt;/p&gt;

&lt;p&gt;VALUES &lt;/p&gt;

&lt;p&gt;('Test Meeting (Edited Profile)',2,'2019-12-31T00:00:00',60,'EST','&lt;a href="mailto:user@domain.com"&gt;user@domain.com&lt;/a&gt;') &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#meeting-in-zoom"&gt;
  &lt;/a&gt;
  Meeting in Zoom
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oKdAq0iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpmk4l5de7ss46ftb1wa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oKdAq0iS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hpmk4l5de7ss46ftb1wa.png" alt="Image description" width="725" height="762"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More Information
&lt;/h1&gt;

&lt;p&gt;The CData API Drivers simplify data connectivity for a wide range of popular data tools. Connect BI, Reporting, &amp;amp; ETL tools to live data from any application, database, or Web API. Built on the same robust SQL engine that powers other CData Drivers, the &lt;a href="https://www.cdata.com/apidriver/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=editing-api-driver-api-profiles"&gt;CData API Driver&lt;/a&gt; enables simple codeless query access to APIs through a single client interface. &lt;/p&gt;

</description>
      <category>automation</category>
      <category>connectivity</category>
      <category>database</category>
      <category>integration</category>
    </item>
    <item>
      <title>A React Material UI Library to Build Any Form With Only JSON Config</title>
      <author>Jeremy</author>
      <pubDate>Fri, 12 Nov 2021 15:26:13 +0000</pubDate>
      <link>https://dev.to/jeremyling/a-react-material-ui-library-to-build-any-form-with-only-json-config-5ck5</link>
      <guid>https://dev.to/jeremyling/a-react-material-ui-library-to-build-any-form-with-only-json-config-5ck5</guid>
      <description>&lt;p&gt;Suppose we want to create a form to collect shipping address. Here's how we can replicate the form below with just JSON config and the open-source library I built &lt;a href="https://github.com/jzcling/react-material-ui-form-builder"&gt;&lt;code&gt;@jeremyling/react-material-ui-form-builder&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/shipping-address-yjslw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-json-config"&gt;
  &lt;/a&gt;
  The JSON Config
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Shipping Address&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;display-text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;titleProps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;marginTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontWeight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bold&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;userSelect&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;none&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;fontVariant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;small-caps&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;marginBottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;First Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Last Name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Address Line 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;address1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Address 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Address Line 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;address2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Address 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;City&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;city&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;City&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;State&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;State&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Postcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Postcode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Country&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;country&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Country&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Required&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;validationType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Same as Billing&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;optionConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;label&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sameAsBilling&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;checkbox-group&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#standard-code-for-all-forms"&gt;
  &lt;/a&gt;
  Standard Code For All Forms
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FormBuilder&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@jeremyling/react-material-ui-form-builder&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@mui/material&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isEmpty&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isEmpty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ShippingAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setForm&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;refs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;({});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;copy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entries&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updates&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;setForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ok&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FormBuilder&lt;/span&gt;
        &lt;span class="na"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;fields&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;form&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;updateForm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;updateForm&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;refs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;refs&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;
        &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;
        &lt;span class="na"&gt;variant&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"contained"&lt;/span&gt;
        &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"primary"&lt;/span&gt;
        &lt;span class="na"&gt;sx&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;mt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleNext&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Next
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#explanation"&gt;
  &lt;/a&gt;
  Explanation
&lt;/h3&gt;

&lt;p&gt;Here, we only use a few components from the library, &lt;code&gt;display-text&lt;/code&gt;, &lt;code&gt;text-field&lt;/code&gt; and &lt;code&gt;checkbox-group&lt;/code&gt;. There are many more you can use. You can view the &lt;a href="https://github.com/jzcling/react-material-ui-form-builder#field-props"&gt;documentation here&lt;/a&gt;. Just note, in general, all input components would have these core field props.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;State&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Display text above the input&lt;/span&gt;
  &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;State&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Input label&lt;/span&gt;
  &lt;span class="nx"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;state&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Attribute of the form to set/control&lt;/span&gt;
  &lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Type of component&lt;/span&gt;
  &lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Breakpoints and corresponding width (1 - 12)&lt;/span&gt;
    &lt;span class="nl"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;validations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Any validations accepted by yup&lt;/span&gt;
    &lt;span class="nl"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/[a-z]/i&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can only contain letters&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#concluding-remarks"&gt;
  &lt;/a&gt;
  Concluding Remarks
&lt;/h3&gt;

&lt;p&gt;I actually created the form above with 3 clicks and a few renames on &lt;a href="https://build.formblob.com/builder"&gt;FormBlob&lt;/a&gt;. Try it out and make building forms a breeze. If you're a developer, &lt;a href="https://build.formblob.com/p/05f25c5d-0f7b-446b-931c-afd2d876499b"&gt;contact us&lt;/a&gt; and I'll turn on a feature for you to export the forms you build into your own project. Alternatively, you can even build and deploy a hosted form entirely on FormBlob and embed the form in your own domain. If you use this method, you don’t have to use React in your app and it still works out of the box!&lt;/p&gt;

&lt;p&gt;If data privacy is a concern, you can define webhooks to call on each submission to pass the form data to your own backend. If you choose, FormBlob does not store any data on our servers beyond the form structure.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>React: Add Inline Styles in React</title>
      <author>Randy Rivera</author>
      <pubDate>Fri, 12 Nov 2021 15:20:29 +0000</pubDate>
      <link>https://dev.to/rthefounding/react-add-inline-styles-in-react-57l</link>
      <guid>https://dev.to/rthefounding/react-add-inline-styles-in-react-57l</guid>
      <description>&lt;ul&gt;
&lt;li&gt;I the last post we set the size of the font with fontSize instead of font-size. Hyphenated words like font-size are invalid syntax for JavaScript object properties, so React uses camel case. &lt;/li&gt;
&lt;li&gt;All property value length units (like &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;fontSize&lt;/code&gt;) are assumed to be in px unless otherwise specified. If you want to use em, for example, you wrap the value and the units in quotes, like {fontSize: "4em"}.&lt;/li&gt;
&lt;li&gt;Here's an example:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;styles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;fontSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;3px solid black&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Colorful&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;styles&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Style Me!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;We declared the styles constant as a global variable at the top of the file. Initialized &lt;code&gt;styles&lt;/code&gt; constant and assigned an &lt;code&gt;object&lt;/code&gt; with three style properties and their values to it. I gave the &lt;code&gt;div&lt;/code&gt; a color of &lt;code&gt;blue&lt;/code&gt;, a font-size of &lt;code&gt;50&lt;/code&gt;, and a border of &lt;code&gt;3px solid black&lt;/code&gt;. Then we set the &lt;code&gt;style&lt;/code&gt; attribute equal to the &lt;code&gt;styles&lt;/code&gt; constant.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Understanding Transitional JavaScript Apps</title>
      <author>Ryan Carniato</author>
      <pubDate>Fri, 12 Nov 2021 15:19:34 +0000</pubDate>
      <link>https://dev.to/this-is-learning/understanding-transitional-javascript-apps-27i2</link>
      <guid>https://dev.to/this-is-learning/understanding-transitional-javascript-apps-27i2</guid>
      <description>&lt;p&gt;Transitional JavaScript Apps? What? Well honestly I'm not sure I know completely myself. It is an umbrella term for the progress that has been happening in JavaScript frameworks the past few years to represent that things are changing. Single Pages as a technology have existed now for over 10 years and Single Page apps today are not the same as they were decade ago, or even 6 years ago. We've embraced server-side rendering and taking responsibility for the side effects of what abusing the technology looks like.&lt;/p&gt;

&lt;p&gt;As usual this isn't a new idea, but sometimes it just takes someone to put a name on it, and who better than &lt;a class="mentioned-user" href="https://dev.to/richharris"&gt;@richharris&lt;/a&gt;
 in his recent talk at JamStack conf:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/860d8usGC0o"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now as some of you know this has been an area of focus for me the last couple years both with &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt; and even to some degree with &lt;a href="https://solidjs.com/"&gt;Solid&lt;/a&gt;. In fact it's kind of been on everyone's mind:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1YgPzW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336281436685541376/fRSl8uJP_normal.jpg" alt="Dan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dan_abramov"&gt;@dan_abramov&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      This hits the nail on the head. And is 100% matching our long term thinking. Client-side-only is not sustainable. We need to move more stuff to the server, but without sacrificing seamless composition of interactive pieces. &lt;a href="https://t.co/O4LX8JacRo"&gt;twitter.com/tmcw/status/12…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:39 PM - 10 May 2020
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Tom MacWright
          &lt;/span&gt;
          @tmcw
        &lt;/div&gt;
        okay i mulled over this idea in my head for a month and then just sat down and wrote this in one pass without switching tabs so here it is, raw and extra spicy:

"Second guessing the modern web" https://t.co/NWt1oYF54M
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1259614150386425858" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1259614150386425858" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1259614150386425858" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;I've written countless articles about the technologies around these topics but maybe it's time to step back and really appreciate what this means for the average web developer.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#death-of-single-page-apps"&gt;
  &lt;/a&gt;
  Death of Single Page Apps?
&lt;/h2&gt;

&lt;p&gt;Well not exactly. Every time you touch this topic some Rails developer jumps out of the back of the crowd to tell us DHH had this all figured out in 2005. And honestly, that developer would probably wish we spent our time building time machines rather than move the web forward. But that's not why we are here.&lt;/p&gt;

&lt;p&gt;No. Server rendering has been part of the equation for frontend JavaScript frameworks for years now. What has changed? Why are these suddenly transitional? Well very little from a technology perspective. It boils down to the fact that in many ways Single Page Apps have set poor expectations for the frontend ecosystem. We built them originally to mimic the behavior of mobile applications, but in reality not all experiences need to be that way. But like any tooling with great Developer Experience people naturally want to use it everywhere.&lt;/p&gt;

&lt;p&gt;The problem is this directs people to pull in tons of JavaScript and often to replace functionality that might already be present natively in the browser. And it isn't just people not selecting lean enough libraries. It's architectural. The new hot library like Svelte or Solid doesn't change the equation on its own. Yes I'm author of Solid and I'm saying this without reservation. They are huge improvements and have been able to learn from the lessons of the past but their pedigree is inherent.&lt;/p&gt;

&lt;p&gt;Server Side rendering in itself never did anything to reduce the JavaScript bloat. If anything it only adds to it as the code to hydrate tends to be larger than the code to render. We've found ways to statically generate pages, but the second we need JavaScript bam there is the whole bundle. Now for small sites and small framework like Svelte, Solid, or Preact I mean seriously who cares, but we aren't talking silver bullets. &lt;/p&gt;

&lt;p&gt;We are more conscious now than in the past about accessibility and the importance of progressive enhancement, allowing for pages to work fine without any JavaScript present. But these are implementation considerations and not architectural. These are characteristics of being a good citizen of the web and our tools should support this.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#lost-in-translation"&gt;
  &lt;/a&gt;
  Lost in Translation
&lt;/h2&gt;

&lt;p&gt;I've publically been a bit critical of the term Transitional Apps, mostly because while SPA frameworks are finding ways they can play nicer, there has been research and development going into actually solving the problem of sending too much JavaScript. And I don't mean resurrecting Rails. I mean full JavaScript frameworks designed for this use case. No need to juggle multiple apps or not be able to leverage the latest tooling.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F1YgPzW6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336281436685541376/fRSl8uJP_normal.jpg" alt="Dan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dan_abramov"&gt;@dan_abramov&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      A “disappearing framework” is certainly cool and worth striving for. But it doesn’t help much when the framework is 5% of your code. Say “disappearing app” and I’m listening.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      22:57 PM - 10 May 2020
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1259618524751958016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1259618524751958016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1259618524751958016" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Dan is right on the money again. Right now on this front there are only a couple games in town. &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;React Server Components&lt;/a&gt; might be a consideration once you are in the larger side of things. But React and related infrastructure is too large for what I'm driving at. Let's talk frameworks that can start from nearly 0kb of JavaScript and disappear your app:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/BuilderIO/qwik"&gt;Qwik&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://astro.build/"&gt;Astro&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://iles-docs.netlify.app/"&gt;iles&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Elderjs/elderjs"&gt;Elder&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These have one thing in common. They only send the JavaScript you need to the browser. They do so in different ways but if you want to live the promise of disappearing app here it is. And the reason? Because regardless of the authoring experience they don't view the application as a single top down system.&lt;/p&gt;

&lt;p&gt;These solutions also have something else in common. They tend to be used as what is being referred to as Multi Page Apps(MPAs). Yes your next-gen static site generator(Next, Nuxt, Gatsby, SvelteKit, VuePress, VitePress, SolidStart) can generate multiple pages but it is not this. Your SPA framework still treats each page as part of the whole and still can't isolate the pieces. Before you say but what about ____? If the framework isn't in the list above and it was created before 2022, 99% chance it is not doing this.&lt;/p&gt;

&lt;p&gt;Aren't MPAs bad? Surprisingly not really so much these days. There are a lot of technologies and the browsers themselves that make these experiences quite nice. Sure there are certain things you can only do when you can preserve the browser state through navigation but for many things they are kind of great. See &lt;a class="mentioned-user" href="https://dev.to/swyx"&gt;@swyx&lt;/a&gt;
' &lt;a href="https://dev.to/swyx/svelte-for-sites-react-for-apps-2o8h"&gt;Svelte for Sites, React for Apps&lt;/a&gt;. This article is actually more a case for Elder than Svelte and it applies to all frameworks above.&lt;/p&gt;

&lt;p&gt;The problem is this conversation is still being had between SPA enthusiasts and, our stranded in time, classic MPA proponents missing the fact that the world has moved on from this argument. MPAs are not old fashioned anymore. If anything JavaScript MPAs are as cutting edge as it gets. But they aren't your grandfather's MPAs.&lt;/p&gt;

&lt;p&gt;And here's the thing. This is a distinction so technical in nature that authors of these MPA JavaScript frameworks are struggling to tell the story in a way their value can be understood by an ecosystem flooded with SPAs. The last thing they want to be associated with is SPAs. I've received criticism for misinterpreting Rich Harris' intent and for being divisive rather than inclusive. But is something inclusive when some of the many of defining parties don't want to be included?&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-eASH3w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1389683812968194049/MhsEUijj_normal.jpg" alt="Misko Hevery profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Misko Hevery
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/mhevery"&gt;@mhevery&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Thanks! Glad to see that you understand the difference. ♥️ &lt;a href="https://t.co/GAwQ750kpy"&gt;twitter.com/RyanCarniato/s…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:42 PM - 11 Nov 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Ryan Carniato
          &lt;/span&gt;
          @RyanCarniato
        &lt;/div&gt;
        Unpopular opinion: There is currently only one #transitionalapps framework I'm aware of in existence today, @QwikDev. And any attempts of trying to paint SvelteKit or Next (or Solid) as somehow different than any SPA is basically hollow marketing.
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458882912779046912" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458882912779046912" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458882912779046912" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--98OzHyGu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1182612538606919680/2CADdAoD_normal.jpg" alt="Matthew Phillips profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Matthew Phillips
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @matthewcp
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Transitional apps is 💯 an attempt to rebrand SPA given the poor reputation it has been building the last few years. Don't let anyone fool you, these are the same old SPAs you've grown to hate. &lt;a href="https://t.co/V7igh1gS8d"&gt;twitter.com/RyanCarniato/s…&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:47 PM - 11 Nov 2021
    &lt;/div&gt;

      &lt;div class="ltag__twitter-tweet__quote"&gt;
        &lt;div class="ltag__twitter-tweet__quote__header"&gt;
          &lt;span class="ltag__twitter-tweet__quote__header__name"&gt;
            Ryan Carniato
          &lt;/span&gt;
          @RyanCarniato
        &lt;/div&gt;
        Unpopular opinion: There is currently only one #transitionalapps framework I'm aware of in existence today, @QwikDev. And any attempts of trying to paint SvelteKit or Next (or Solid) as somehow different than any SPA is basically hollow marketing.
      &lt;/div&gt;

    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1458899129292234756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1458899129292234756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1458899129292234756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;
&lt;br&gt;
&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--9WBjzfTd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1351914638770782210/6H5MxSr4_normal.jpg" alt="Dylan Piercey profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dylan Piercey
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dylan_piercey"&gt;@dylan_piercey&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Before anyone brings up &lt;a href="https://twitter.com/hashtag/transitionalapps"&gt;#transitionalapps&lt;/a&gt; or Svelte Kit, yes they are innovating here two. It's nice that you have have static pages w/o JS along side dynamic pages. Although as &lt;a href="https://twitter.com/Rich_Harris"&gt;@Rich_Harris&lt;/a&gt; mentioned in his recent talk MPA/SPA is a spectrum and that approach seems a bit binary.
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:16 PM - 15 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1449031353220009992" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1449031353220009992" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1449031353220009992" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;Now there is no ill intent here. We're all fighting different battles. Rich is rallying the troops to fend off the would-be time travelers. I'm just standing up for the little guy. Maybe this is a technical distinction that doesn't mean anything. But it does to some of us.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#long-live-spas-transitional-apps"&gt;
  &lt;/a&gt;
  Long Live &lt;del&gt;SPAs&lt;/del&gt; Transitional Apps
&lt;/h2&gt;

&lt;p&gt;Didn't I just say SPAs are dead, and MPAs are the future. Not quite. Dan Abramov had it right when he said the future is hybrid. Hell, Rich had it right when he suggested in an ideal future there is no need for MPAs.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--wXIoAAJO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/557940120184041473/bFyXy8Pu_normal.jpeg" alt="Rich Harris profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Rich Harris
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @rich_harris
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      &lt;a href="https://twitter.com/JakeDohm"&gt;@JakeDohm&lt;/a&gt; &lt;a href="https://twitter.com/brianleroux"&gt;@brianleroux&lt;/a&gt; &lt;a href="https://twitter.com/jaffathecake"&gt;@jaffathecake&lt;/a&gt; &lt;a href="https://twitter.com/barelyreaper"&gt;@barelyreaper&lt;/a&gt; &lt;a href="https://twitter.com/BenLesh"&gt;@BenLesh&lt;/a&gt; &lt;a href="https://twitter.com/AdamRackis"&gt;@AdamRackis&lt;/a&gt; Exactly - and in the default case a great SPA should also _be_ an MPA (insofar as it's SSR'd etc) so the real question isn't even 'what can MPA do that SPA can't?', it's 'does adding SPA capabilities have intrinsic downsides?'
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      14:37 PM - 02 Sep 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1433438931555688448" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1433438931555688448" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1433438931555688448" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It's just that future is not something that is here yet. There are currently unreconciled downsides alongside the numerous benefits. Which is why I dislike the term Transitional Apps now because it jumps the gun a bit. When we have truly Transitional Apps it'd be cool to market them as such. But I didn't coin the term so that isn't my call.&lt;/p&gt;

&lt;p&gt;I want to take moment to talk about &lt;a href="https://github.com/BuilderIO/qwik"&gt;Qwik&lt;/a&gt; again (and this is also relevant to the next version of &lt;a href="https://markojs.com/"&gt;Marko&lt;/a&gt;). These frameworks support automatic independent hydration without manual islands, and hydrating children before for their parent. They can deliver experiences with all the benefits of Multi-Page apps and scale to Single page experiences seamlessly. &lt;/p&gt;

&lt;p&gt;That is a &lt;em&gt;Transitional App&lt;/em&gt; in my view. An application that literally can transition from a minimal page to an interactive client navigated experience on demand. This is a unique challenge with a whole slew of new tradeoffs. You don't get to pick up an existing framework and just do this. Maybe this deserves a new term. Then next year we can debate the merits of &lt;em&gt;Transitional Apps&lt;/em&gt; vs &lt;em&gt;Transformative Apps&lt;/em&gt;. Is that the better outcome?&lt;/p&gt;

&lt;p&gt;Now there is nothing wrong with any of this inherently so far as that any of these can't be the right solution. You have many options. This really should start from your requirements of what you are building rather than building what your favorite tool enables you to do. When did JavaScript frameworks become the Highlander?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lTLv-BV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp7hxc9dx5x9jpwjpmh0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lTLv-BV6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kp7hxc9dx5x9jpwjpmh0.png" alt="There can be only one" width="570" height="355"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I might generally be pessimistic about framework agnostic endeavors but I'm all for celebrating our differences. Each framework is different and that's a good thing.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>frameworks</category>
      <category>architecture</category>
    </item>
  </channel>
</rss>
