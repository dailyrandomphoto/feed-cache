<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>UseState is asynchronous: Learn how to use useState and useEffect properly</title>
      <author>Fidal Mathew</author>
      <pubDate>Tue, 25 Jan 2022 04:16:01 +0000</pubDate>
      <link>https://dev.to/fidalmathew/usestate-is-asynchronous-learn-how-to-use-usestate-and-useeffect-properly-1m1m</link>
      <guid>https://dev.to/fidalmathew/usestate-is-asynchronous-learn-how-to-use-usestate-and-useeffect-properly-1m1m</guid>
      <description>&lt;p&gt;Hello readers, today I’m gonna talk about one of the issues I faced when I was making projects using React js.&lt;/p&gt;

&lt;p&gt;UseState is asynchronous, let me show you what I mean via a small example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVal&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addVal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;setVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;effect &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;


    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;addVal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;ADD&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are having a state variable named &lt;strong&gt;val&lt;/strong&gt; initialized with 0.&lt;/p&gt;

&lt;p&gt;We also have a button, which on click, calls a function addVal()&lt;/p&gt;

&lt;p&gt;addVal() has the following functions -&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Set the state of val by incrementing it. &lt;br&gt;
It is done by &lt;code&gt;setVal(val+1)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Console.log(val);&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also have a useEffect that is triggered when state of val changes.&lt;/p&gt;

&lt;p&gt;Let’s look at the console after clicking the button once.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NxNSyELz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzfycreq49et39oy52px.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NxNSyELz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lzfycreq49et39oy52px.png" alt="console.log" width="654" height="353"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. First&lt;/strong&gt; - The first console is of useEffect when the page first loads.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Second&lt;/strong&gt; - The second console is due to the addVal function. &lt;br&gt;
After, we update the state of val. &lt;/p&gt;

&lt;p&gt;But, the value which gets printed remains the same i.e &lt;strong&gt;0&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;So, what happening? The value of &lt;em&gt;val&lt;/em&gt; isn’t updated immediately, useState is asynchronous. It takes time to update so it allows rest of the program to continue and updates the value later. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Third&lt;/strong&gt; - The third console log is due to the useEffect, which displays the value of &lt;em&gt;val&lt;/em&gt; after the state is updated i.e &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;I hope you understood the concept and remember to manage your state changes using useEffect. I have made a lot of mistakes, not knowing the concept completely. I hope you don’t make them too.&lt;/p&gt;

&lt;p&gt;Keep learning and thanks for reading :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feel free to connect with me on -&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/fidalmathew10"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/FidalMathew"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/fidal-mathew-82aba7200/"&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>In-depth of tnpm rapid mode - how we managed to be 10 second faster than pnpm</title>
      <author>TZ | 天猪</author>
      <pubDate>Tue, 25 Jan 2022 03:37:16 +0000</pubDate>
      <link>https://dev.to/atian25/in-depth-of-tnpm-rapid-mode-how-could-we-fast-10s-than-pnpm-3bpp</link>
      <guid>https://dev.to/atian25/in-depth-of-tnpm-rapid-mode-how-could-we-fast-10s-than-pnpm-3bpp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;As a front-end veteran, I have to point out that the increasing complexity of front-end projects nowadays makes the dependency installation slower and slower.&lt;/p&gt;

&lt;p&gt;At Alibaba and Ant Group, Engineering Productivity is an important metric for engineers, and the speed of installation of front-end dependencies is a big negative impact factor. &lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;We are the team responsible for front-end infrastructure in Ant Group.&lt;/strong&gt; We mainly focus on building the Node.js community within the company and maintaining many open-source projects like &lt;a href="https://github.com/eggjs"&gt;eggjs&lt;/a&gt; and &lt;a href="https://github.com/cnpm"&gt;cnpm&lt;/a&gt;.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;We started an initiative in 2021, one of its goals was to optimize the installation speed of dependencies. We managed to speed up the dependency installation by 3 times.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In this article, we'd like to share with you the ideas and results of 'tnpm rapid mode'.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8B4ieAWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txp5r13jdas28ebdfnmy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8B4ieAWY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txp5r13jdas28ebdfnmy.png" alt="tnpm rapid" width="880" height="424"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thank &lt;a href="https://github.com/sodatea"&gt;@sodatea&lt;/a&gt;,  &lt;a href="https://github.com/HerringtonDarkholme/"&gt;@nonamesheep&lt;/a&gt;, @Sikang Bian(RichSFO), &lt;a href="https://github.com/geekdada"&gt;@geekdada&lt;/a&gt; so much for the translation of &lt;a href="https://www.yuque.com/egg/nodejs/tnpm-rapid-en"&gt;this article&lt;/a&gt;, the &lt;a href="https://zhuanlan.zhihu.com/p/455809528"&gt;original article&lt;/a&gt; was written by &lt;a href="https://github.com/atian25/blog/issues/1"&gt;@atian25&lt;/a&gt; and published on Zhihu.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;TL;DR&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-is-npm-soooo-slow"&gt;
  &lt;/a&gt;
  Why is npm soooo slow?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a94lWuc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mofif0st4p300fqi55f3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a94lWuc0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mofif0st4p300fqi55f3.png" alt="npm-so-slow" width="286" height="222"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the modern front-end ecosystem, the number of total modules has been exploding and the dependency graphs are becoming increasingly complex.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are a galaxy of modules in the ecosystem. With &lt;a href="http://www.modulecounts.com/"&gt;over 1.8 million npm packages in total&lt;/a&gt;, npm has several times as many modules as in other languages by the end of 2021. &lt;/li&gt;
&lt;li&gt;Module relationships are becoming exceedingly complex. Duplicate dependencies and lots of small files are wasting disk space and slowing down disk writes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The front-end module system prefers small and well-crafted modules. While this brought unprecedented prosperity to the community, it also resulted in complex dependencies which directly led to slower installation. There are trade-offs to be made. &lt;/p&gt;

&lt;p&gt;Whether the ecological status quo is correct or not is way beyond the scope of our discussion today, so let's focus on how to improve installation speed for the time being.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hSCC6HTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwvwkicvc8iubzsbv0hl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hSCC6HTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwvwkicvc8iubzsbv0hl.jpg" alt="how-npm-install-works" width="880" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dependencies installation process for an application is briefly illustrated as above, with the &lt;strong&gt;key operations&lt;/strong&gt; including:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Query the package information of the child dependencies and then get the download address. &lt;/li&gt;
&lt;li&gt;Download the tgz package locally, unzip it, then install it.&lt;/li&gt;
&lt;li&gt;Create the 'node_modules' directory and write the downloaded files under it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependencies-installation"&gt;
  &lt;/a&gt;
  Dependencies Installation
&lt;/h3&gt;

&lt;p&gt;Let's take &lt;code&gt;vuepress@1.9.2&lt;/code&gt; as an example. It has about &lt;strong&gt;1000 distinct dependencies&lt;/strong&gt;, taking up 170MB disk spaces with 18542 files.&lt;/p&gt;

&lt;p&gt;But if we install the dependencies in a nested way following npm@2's implementation, we'll end up installing as many as 3626 dependency packages. There are more than &lt;strong&gt;2000 redundant dependencies&lt;/strong&gt;. And the actual disk footprint is 523MB with 60257 files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File I/O operations are very costly, especially for reading/writing large numbers of small files.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;npm@3 first came up with an optimization idea to solve the problem of duplicated dependencies + unnecessarily deep hierarchies: the &lt;a href="https://npm.github.io/how-npm-works-docs/npm3/how-npm3-works.html"&gt;flattening dependency&lt;/a&gt; capability, where all child dependencies are slapped flat under &lt;em&gt;node_modules&lt;/em&gt; in the root directory.&lt;/p&gt;

&lt;p&gt;However, this optimization ended up introducing new problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rushjs.io/pages/advanced/phantom_deps"&gt;Phantom dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://rushjs.io/pages/advanced/npm_doppelgangers"&gt;NPM doppelgangers&lt;/a&gt;. It might still result in several copies of the same package (e.g. there are still 183 duplicate packages in the abovementioned example)&lt;/li&gt;
&lt;li&gt;Non-deterministic dependency structure (though this is solvable via dependencies graph)&lt;/li&gt;
&lt;li&gt;The performance penalty from a complex flattening algorithm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given so many side effects of the 'flattening dependencies', &lt;a href="https://pnpm.io/"&gt;pnpm&lt;/a&gt; proposed an alternative solution, by means of &lt;strong&gt;symbolic + hard links&lt;/strong&gt;.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IWWejqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k65f7i6zz2t3i93zdbol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IWWejqec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k65f7i6zz2t3i93zdbol.png" alt="pnpm" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This approach works great because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It reduces package duplications while staying compatible with the resolution algorithm of Node.js. The method does not introduce side effects like phantom dependencies, doppelgangers, etc. &lt;/li&gt;
&lt;li&gt;The hard linking approach with global caching reduces file duplication and saves disk footprint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resulting data speaks for itself: 1109 modules, 18747 files, 5435 directories, 3150 symlinks, 175M disk footprint.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Similarly inspired by pnpm, we've refactored and implemented &lt;code&gt;cnpm/npminstall&lt;/code&gt;in cnpm to utilize symlinks. But it didn't make use of hard links, neither did it hoist transitive dependencies.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, it is worth noting that there are some potential issues of this approach:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We've observed symbolic linking could cause &lt;strong&gt;indexing problems&lt;/strong&gt; with dead loops in some IDEs (like WebStorm and VSCode) several years ago. This issue, which might not be fully resolved, should've been mitigated with IDE optimizations nowadays.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Compatibility&lt;/strong&gt;. Relative paths need to be adapted for plug-in loading logic like EggJS and Webpack as they &lt;strong&gt;may not follow the Node.js standard resolving strategy&lt;/strong&gt;, which looks modules up in the directory structure till the root of the disk.&lt;/li&gt;
&lt;li&gt;The dependencies of different applications are hard-linked to the same file, so modifying the file while debugging may inadvertently affect other projects. &lt;/li&gt;
&lt;li&gt;Hard links cannot be used across the file system. And the implementation of symlinks varies among different operating systems. Moreover, there is still some performance loss due to disk IO on non-SSD hard disks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, yarn also proposed other optimizations such as Plug'n'Play. Since it is too radical to be compatible with the existing Node.js ecosystem, we will not discuss those optimizations further here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#metadata-requests"&gt;
  &lt;/a&gt;
  Metadata Requests
&lt;/h3&gt;

&lt;p&gt;Let's take a look at the dependencies installation process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each dependency needs one metadata query and one tgz download, resulting in a total of 2 HTTP requests;&lt;/li&gt;
&lt;li&gt;If there are different versions of the same package, the metadata is queried only once, and then the tgz for each version is downloaded separately.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the number of dependencies is typically very large, the total number of HTTP requests is subsequently magnified, resulting in a significant increase in time consumption. In the above example, npm@2 will make more than 2500 HTTP requests.&lt;/p&gt;

&lt;p&gt;A common optimization strategy is to &lt;strong&gt;calculate the dependencies graph in advance&lt;/strong&gt;, so that package managers can download 'tgz's directly without querying the package metadata. As a result, much of the network requests can be avoided.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;NPM is the first to come up with the idea of &lt;em&gt;shrinkwrap&lt;/em&gt;. It was soon superseded by the idea of &lt;em&gt;lockfile&lt;/em&gt; from yarn. There're similar concepts in pnpm but different formats.&lt;br&gt;
Although lockfile was meant to &lt;em&gt;lock the dependency versions&lt;/em&gt;, people discovered that the lockfile could also be used as a &lt;em&gt;dependencies graph&lt;/em&gt; to speed up installations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, there are unsolved problems like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The first installation will not speed up unless the lockfile was pre-stored in source code management. &lt;/li&gt;
&lt;li&gt;Locking version would lead to some governance problems in large-scale projects in practice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-brief-summary"&gt;
  &lt;/a&gt;
  A Brief Summary
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEY_kzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akdlfq5iuc96v2c8qmtn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fPEY_kzw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/akdlfq5iuc96v2c8qmtn.jpg" alt="installation-process-summary" width="880" height="304"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To summarize, to speed up the installation process, we need to think about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;how to get the dependencies graph faster? (Parsing Strategy)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;how to make tgz downloads faster? (Network I/O)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;how to make to disk faster? How to deal with the duplicated dependencies? (File I/O)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The community was able to reach some common ground where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Utilizations of the &lt;em&gt;dependencies graph&lt;/em&gt; lead to more efficient concurrent downloads because the requests are better scheduled.&lt;/li&gt;
&lt;li&gt;Simplified &lt;em&gt;node_modules&lt;/em&gt; directory leads to less time in File I/O operations because of fewer duplicate dependencies.&lt;/li&gt;
&lt;li&gt;Global caching can reduce the number of download requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Still existing problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lockfile will increase maintenance costs. Neither locking nor unlocking version is a silver bullet. &lt;/li&gt;
&lt;li&gt;Flat dependencies and symbolic links (symlinks in short) have their own compatibility issues. &lt;/li&gt;
&lt;li&gt;There is no consensus on the best implementation of global caching. The "uncompressed copy" approach would generate a lot of file IO, and the hard linking approach would cause potential conflict issues. So there are trade-offs to be made. &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-are-tnpm-and-cnpm"&gt;
  &lt;/a&gt;
  What are tnpm and cnpm?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UfDkcx89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yut57x9lpoizracfhir0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UfDkcx89--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yut57x9lpoizracfhir0.jpg" alt="tnpm-cnpm" width="880" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown in the above diagram, briefly speaking:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/cnpm"&gt;cnpm&lt;/a&gt; is our open-source implementation of npm, which supports mirror synchronization with the official npm registry and private package capabilities. &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://npmmirror.com/"&gt;npmmirror&lt;/a&gt; is a community-deployed project based on cnpm, which provides mirroring services for Chinese front-end developers. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;tnpm&lt;/code&gt; is our enterprise service for Alibaba and Ant Group, which is also based on cnpm, with additional enterprise-level customization.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#optimization-results"&gt;
  &lt;/a&gt;
  Optimization Results
&lt;/h2&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-scenario"&gt;
  &lt;/a&gt;
  Test Scenario
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;If you can't measure it, you can't improve it.  - Peter Drucker&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3g4c-mZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmoxq347byh1pl5vom44.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3g4c-mZO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmoxq347byh1pl5vom44.png" alt="Test Scenario" width="880" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: We are probably the first company in the industry to re-install Mac mini m1 with Linux OS to form a front-end build cluster. This reinstallation itself doubled our overall build speed on top of all the other optimizations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-results"&gt;
  &lt;/a&gt;
  Test Results
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x9ZC54s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9bbryanhb6i54z6jnst.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x9ZC54s8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9bbryanhb6i54z6jnst.png" alt="Test Results" width="880" height="369"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will not interpret the result for now. You'll get more in-depth feeling and understanding after we systematically discuss the optimization ideas for tnpm rapid mode.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-supporting-data"&gt;
  &lt;/a&gt;
  The Supporting Data
&lt;/h3&gt;

&lt;p&gt;Recall the data we gave earlier at the beginning of our analysis about the reasons behind the overall slowdown. The complete datasets are shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UaueePKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcb3izi3lwc7pcnqtxxy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UaueePKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcb3izi3lwc7pcnqtxxy.png" alt="The Supporting Data" width="880" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We collect the relevant data, without lock or cache, by  &lt;a href="https://strace.io/"&gt;strace&lt;/a&gt; and &lt;a href="https://www.charlesproxy.com/"&gt;charles&lt;/a&gt;. We also counted the corresponding file counts and sizes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here is the brief interpretation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Number of files: the number of 'flat dependencies' and 'symbolic and hard links' are basically the same. They both reduce the disk footprint significantly. &lt;/li&gt;
&lt;li&gt;Disk IO: an important indicator, the number of file writes is directly related to the installation speed.&lt;/li&gt;
&lt;li&gt;Network speed: reflects whether the installation process can run as full bandwidth as possible, the greater the better.&lt;/li&gt;
&lt;li&gt;Number of requests: includes the number of tgz downloads and the number of query package information. The number can be approximated as the number of overall modules.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the data, we can see that tnpm is more optimized for both Disk IO and Network IO.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-were-the-optimizations-achieved"&gt;
  &lt;/a&gt;
  How were the optimizations achieved?
&lt;/h2&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#network-io"&gt;
  &lt;/a&gt;
  Network I/O
&lt;/h3&gt;

&lt;p&gt;We only have one goal in optimizing the network I/O: how do we &lt;strong&gt;maximize the network utilization&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YKkQcSo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vef13iz30ekalgynuov1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YKkQcSo4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vef13iz30ekalgynuov1.jpg" alt="Network I/O" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first optimization comes from '&lt;em&gt;dependencies graph'&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The common practice is using dependencies graph to avoid requesting every package's metadata on the client-side, thus significantly reducing the number of HTTP requests;&lt;/li&gt;
&lt;li&gt;What's special in our approach is that: we generate the dependencies graph on the server-side, with a multi-level caching strategy;&lt;/li&gt;
&lt;li&gt;It's based on &lt;code&gt;@npmcli/arborist&lt;/code&gt;, so it's npm-compatible.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Our experience and philosophy in our enterprise-scale projects are that we do not advocate locking versions locally but only reuse the dependencies graph from the previous phase in the iteration workflows, such as from development environments to test environments (or emergency iterations). (Locking version vs not locking version is a common topic for debates. There is no common consensus. Finding the respective balance based on the enterprise team's situation is generally recommended. We will not discuss it here.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The second optimization is HTTP request warm-ups&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tgz download process will first visit the registry, and then be redirected 302 to the OSS(&lt;a href="https://www.alibabacloud.com/product/object-storage-service?spm=a3c0i.23458820.2359477120.2.26a77d3fqk39SG"&gt;Alibaba Cloud Object Storage Service&lt;/a&gt;) download address. &lt;/li&gt;
&lt;li&gt;We can improve concurrency by warming up in advance and thus reduce the overall HTTP time consumption.&lt;/li&gt;
&lt;li&gt;It is worth mentioning that we encountered an issue of intermittent DNS &lt;a href="https://unix.stackexchange.com/questions/290987/resolving-hostname-takes-5-seconds"&gt;5 second delay&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;There's no such 302 redirection in the official npm registry. We separated the download traffic from the registry by redirecting them to CDN-cached OSS addresses, which improved the stability of the registry service.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The third optimization is to combine the files:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We found during testing that we could not utilize full bandwidth. Through analysis, we found that: with a huge number of dependency packages, frequent writing small files often leads to file IO bottlenecks. &lt;/li&gt;
&lt;li&gt;Simply extracting tgz files to tar files made it easy to properly merge files when writing to disk, given that tar is an archive file format.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeated testing showed that combining 1000 tgz files into 40 tarball files is ideal.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The fourth optimization is to use Rust to reimplement the download and decompressing process:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forty concurrent threads were used to download, decompress and merge the original packages into 40 tarball files, all in a streaming manner.(The value comes from repeated testing)&lt;/li&gt;
&lt;li&gt;Rust was used to implement this feature as an experiment. It showed some potential in decompressing files but not enough to let us believe it’s a silver bullet for solving every performance issue. We used neon to bridge the gap between Rust and Node.js,  and planned to rewrite it to napi modules by &lt;a href="https://github.com/napi-rs/napi-rs"&gt;napi-rs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#fuse-technology"&gt;
  &lt;/a&gt;
  FUSE Technology
&lt;/h3&gt;

&lt;p&gt;We believe the original &lt;em&gt;nested directory&lt;/em&gt; approach is better than the &lt;em&gt;flattening&lt;/em&gt; node_modules one. But we don't want the compatibility issues caused by symlinks. How can we hit two birds with one stone?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First, let's introduce a "black technology": FUSE (FileSystem in Userspace).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sounds abstract? Let's think of an analogy that front-end developers are familiar with: using ServiceWorker to refine and customize HTTP Cache-Control Logic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Similarly. We can think of FUSE as the file system counterpart of ServiceWorker,  from the perspective of front-end developers. We can take over a directory’s file system operation logic via FUSE.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rL0PkmvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7e0j1nfj44yf9ki1e4k.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rL0PkmvC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7e0j1nfj44yf9ki1e4k.jpg" alt="FUSE" width="880" height="426"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As shown above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We implemented the &lt;code&gt;npmfs&lt;/code&gt; as a FUSE daemon on top of &lt;a href="https://github.com/dragonflyoss/image-service"&gt;nydus&lt;/a&gt;, it would mount one directory for one project.&lt;/li&gt;
&lt;li&gt;When the OS needs to read the files in that directory, our daemon process would take care of that.&lt;/li&gt;
&lt;li&gt;The daemon process would look up the dependencies graph to retrieve the corresponding file contents from the global cache.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this way, we were able to achieve that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All system calls for files and directories would treat this directory as a real directory.&lt;/li&gt;
&lt;li&gt;Files are independent of each other. Modifications made in one file would not result in changes in other projects (unlike the hard-links approach).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nydus doesn't support macOS at the moment, so we implemented an adapter of nydus to macfuse. We'll open source it when it's ready.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Trivia: &lt;strong&gt;Nydus&lt;/strong&gt; is a Zerg structure in StarCraft, which is used to move units quickly around the map. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#overlayfs"&gt;
  &lt;/a&gt;
  OverlayFS
&lt;/h3&gt;

&lt;p&gt;We may need to temporarily modify the code inside node_modules during our day-to-day development for debugging. Editing files within a module can inadvertently lead to changes in another module because of how symbolic and hard linking solutions work.&lt;/p&gt;

&lt;p&gt;FUSE supports custom write operations, but the implementation is more verbose. &lt;strong&gt;So we directly use a union mount filesystem &lt;a href="https://en.wikipedia.org/wiki/OverlayFS"&gt;OverlayFS&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OverlayFS can aggregate multiple different mount points into a single directory. &lt;/li&gt;
&lt;li&gt;A common scenario is to overlay a read-write layer on top of a read-only layer to enable the read-write layer.&lt;/li&gt;
&lt;li&gt;This is how Docker images are implemented, where the layers in the image can be reused in different containers without affecting each other.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hQyRPDhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68198m126q64y6jr04ya.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hQyRPDhZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/68198m126q64y6jr04ya.jpg" alt="OverlayFS" width="880" height="529"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we further implement:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the FUSE directory as the Lower Dir of OverlayFS, we construct a read-write filesystem and mount it as the &lt;em&gt;node_modules&lt;/em&gt; directory of the application. &lt;/li&gt;
&lt;li&gt;Using its COW (copy-on-write) feature, we can reuse the underlying files to save space and support independent file modifications, isolate different applications to avoid interference, and reuse one copy of the global cache independently.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#file-io"&gt;
  &lt;/a&gt;
  File I/O
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Next, let's talk about the global cache.&lt;/strong&gt; There are two main options in the industry:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;npm&lt;/code&gt;: Unpack tgz into tar as a global cache, and unpack it into node_modules when installing dependencies again. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pnpm&lt;/code&gt;: Unpack tgz into files, and cache them globally as hash, so that different versions of the same package can share the same file, and hard link it directly when installing again.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What they both have in common is that at some point, the tgz files would be decompressed to standalone files and written to the disk. As we mentioned above, huge amount of small files generated by decompression can cause a huge amount of I/O operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One day, it occurs to us that, maybe we can just skip decompressing&lt;/strong&gt;? 🤔 🤔 🤔&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAOXKUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjzbh8km9qkg0ks6n4ey.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EYAOXKUy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bjzbh8km9qkg0ks6n4ey.jpg" alt="File I/O" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we went one step further:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;em&gt;node_modules&lt;/em&gt; are directly mapped to tar archives via FUSE + dependencies graph, eliminating the need for File I/O operations happened in decompression.&lt;/li&gt;
&lt;li&gt;At the same time, the highly controllable nature of FUSE allows us to easily support both nested directories and flat structures, switching between them on demand. &lt;/li&gt;
&lt;li&gt;Even better: How can we further improve the performance of cloud storage access in the future so that we don't even have to download tgz?&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Some other attempts: we tried to use stargz + lz4 instead of tar + gzip, but the benefits were not significant: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stargz has more indexing capabilities than tar. But in fact a separate dependencies graph would serve a similar purpose, and there is no need to package them together.&lt;/li&gt;
&lt;li&gt;lz4 has a huge performance gain over gzip, but we have found that the ROI is not high in our current practice.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#extra-costs"&gt;
  &lt;/a&gt;
  Extra Costs
&lt;/h3&gt;

&lt;p&gt;No solution can be perfect, and there are some extra costs to our solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The first one is the cost of FUSE&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to be aware of the cross-system compatibility issues. Although there are support libraries for every operating system, it takes time to test their compatibility. &lt;/li&gt;
&lt;li&gt;We need to support privileged containers for scenarios used within the enterprise. &lt;/li&gt;
&lt;li&gt;Community scenarios like CI/CD rely on whether GitHub Actions and Travis support FUSE.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The second one is the maintenance burden of the registry server&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The capability to generate dependencies graph analysis can only be turned on in the private enterprise registry due to server-side resource constraints. &lt;/li&gt;
&lt;li&gt;Public mirror services will fall back to the CLI side to generate a dependencies graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;PS: Community's solution, including ours, cannot solve the problem of multiple "require cache" for the same dependency. Maybe it can be solved by ESM Loader but it is beyond our discussion today.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#key-ideas"&gt;
  &lt;/a&gt;
  Key Ideas
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LhWXbDAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0v63n2ev7fmcgh9qgwd.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LhWXbDAw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m0v63n2ev7fmcgh9qgwd.jpg" alt="TNPM Summary" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In conclusion, the core advantages of our solution are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Network I/O

&lt;ul&gt;
&lt;li&gt;Skipping the metadata requests by using server-generated dependencies graph. This saves &lt;code&gt;Number of packages * Metadata request duration&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The performance gain from using Rust language, and increased concurrency due to download process optimization.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;File I/O

&lt;ul&gt;
&lt;li&gt;Reducing disk writes by storing the combined tar files. This saves &lt;code&gt;(Number of packages - 40) * Disk operation duration&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Reducing disk writes by not unpacking files but using FUSE mounting instead in the projects. This saves &lt;code&gt;(Number of files + Number of directories + Number of symlinks and hard links) * Disk operation duration&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Compatibility

&lt;ul&gt;
&lt;li&gt;Standard Node.js directory structure. No symlinks, no issues caused by flattening &lt;em&gt;node_modules.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One primary reason was that tnpm is not only a local command-line interface, but also a remote registry service that allows deeper optimization compare to other package managers.&lt;br&gt;
​&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The difference between &lt;a href="https://en.wikipedia.org/wiki/Black_magic"&gt;black magic&lt;/a&gt; and&lt;a href="https://fullmetalpanic.fandom.com/wiki/Black_Technology"&gt; black technology&lt;/a&gt; is that the former is a pile of "&lt;a href="https://knowyourmeme.com/memes/this-is-fine"&gt;this-is-fine&lt;/a&gt;" dirty hacks to achieve the goal, while the latter is a cross-disciplinary juggernaut to solve challenges once and for all.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#data-interpretation"&gt;
  &lt;/a&gt;
  Data Interpretation
&lt;/h3&gt;

&lt;p&gt;From the above analysis, one might already fully understand the optimization idea of tnpm rapid mode. Now let's go back and interpret the data of the previous test results.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: 'tnpm rapid mode' is still under small-scale testing, and improvement is expected in future iterations. So the test data is for reference only.&lt;br&gt;
Also, yarn in the table is slower than &lt;a href="mailto:npm@8"&gt;npm@8&lt;/a&gt;. We don't know why for now, but we've tested it many times with pnpm benchmark, and the same results kept showing up.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X8mdijbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/260pmav56c2gu9ygc3ty.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X8mdijbB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/260pmav56c2gu9ygc3ty.png" alt="Test Data" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here are the brief interpretations:&lt;/p&gt;

&lt;p&gt;(1) The time taken to generate the dependencies graph.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The difference between test 1 and test 5 is the time taken by the corresponding package manager. &lt;/li&gt;
&lt;li&gt;pnpm analyzes the graph by client-side HTTP request, which is about 4 seconds or so (querying package information and downloading are parallel). &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tnpm analyzes the graph by server-side calculation, which currently takes 5 seconds. (when hitting remote cache, this should cost less than 1 second).&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The speed is the same now, but since tnpm has less network latency than pnpm, we still need to optimize this in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the enterprise scenario, the dependency modules are relatively convergent, so most of the time,  the first test of tnpm should take 5 seconds in case of hitting the cache(the dependencies graph generation of tnpm has a caching mechanism).&lt;/p&gt;

&lt;p&gt;(2) File I/O overhead&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test 5 is closer to CI/CD scenarios which have dependencies graph + no global cache. &lt;/li&gt;
&lt;li&gt;The primary time consumption observed was from tgz download time + File IO time. As the tgz download time was alike, the time gap was mainly from file IO. &lt;/li&gt;
&lt;li&gt;What we concluded from the data is that &lt;strong&gt;tnpm is 4 seconds faster than pnpm. FUSE helped save the decompress + file write time, as well as the TAR merge time.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(3) Local development&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both dependencies graph and global cache are made available for local development.&lt;/li&gt;
&lt;li&gt;This corresponds to Test 2 (dependency is not new, second development), Test 3 (second development, reinstallation of dependencies) and Test 4 (first development of new application). &lt;/li&gt;
&lt;li&gt;In principle, time used = dependencies graph update + writing to node_modules file + few package downloads and updates. &lt;/li&gt;
&lt;li&gt;Since tnpm is still under development, we couldn't test it this time, but from the above formula analysis, tnpm has IO advantage over pnpm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;​&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To summarize: the speed advantage of tnpm over pnpm is 5 seconds for dependencies graph + 4 seconds for FUSE free decompression.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#future-planning"&gt;
  &lt;/a&gt;
  Future planning
&lt;/h2&gt;

&lt;p&gt;Front-end package management has been developing for nearly a decade. Npm was once the trailblazer who kept innovating and advancing this area. However, the advancement was somewhat stagnated after npm won against all the other alternatives like bower. Soon after, Yarn became the challenger and rejuvenated the overall competition, pushing further innovation on npm. Pnpm raised from the new challenge and led the innovation again.&lt;/p&gt;

&lt;p&gt;We believe that for front-end dependency optimization and governance, there is still a long way to go. We hope to continue strengthening cooperation with our domestic and international colleagues to keep pushing the advancement of package managers together.&lt;/p&gt;

&lt;p&gt;Therefore, our subsequent plan is to give our experience gathered from enterprise-level private deployment and governance back to the community as much as we can.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Currently &lt;a href="https://github.com/cnpm/cnpmcore"&gt;cnpm/npmcore&lt;/a&gt; is under refactoring to better support private deployments. (We sincerely welcome contributions from the open source community to further expedite this effort.)&lt;/li&gt;
&lt;li&gt;After the tnpm rapid model is refined, we will open-source the corresponding capabilities, as well as the npmfs suite. Unfortunately, there's currently no way for the community to experience it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the meantime, it would be highly beneficial for the community if we could work together to standardize the front-end package management:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need a standard like ECMAScript to regulate the behavior of each package manager.&lt;/li&gt;
&lt;li&gt;We need a conformance test suite like "Test262".&lt;/li&gt;
&lt;li&gt;We should accelerate the transition from CommonJS to ES modules.&lt;/li&gt;
&lt;li&gt;We should find a way to fully resolve the chaotic situation resulting from the deltas among different dependency scenarios of frontend and Node.js.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;

&lt;p&gt;I'm TZ(&lt;a href="https://github.com/atian25"&gt;atian25&lt;/a&gt;), currently work for Ant Group. I am in charge of building and optimizing our front-end infrastructure.  I love open-source and am the main maintainer of &lt;a href="https://github.com/eggjs"&gt;eggjs&lt;/a&gt;, &lt;a href="https://github.com/cnpm"&gt;cnpm&lt;/a&gt;.&lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;Node.js is an indispensable infrastructure in the field of front-end. Maybe the future changes of front-end would make all existing engineering problems irrelevant. Nonetheless, no matter what will happen, I just hope that I can seriously record what I see and think in this field. I'd like to exchange ideas with colleagues who are experiencing the evolution of the current "front-end industrialization" and are equally troubled by it. &lt;br&gt;
​&lt;/p&gt;

&lt;p&gt;In the enterprise application scenario, optimization of front-end build execution speed is a system engineering challenge. Dependency resolution and installation is only one of the many challenges we are facing. The opportunities are abundant. We are continuously looking for talented engineers to join us, and keep pushing the innovation forward. We look forward to hearing from you. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>npm</category>
    </item>
    <item>
      <title>15 CSS tricks that will boost your designing confidence as a frontend Developer 🦾</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 02:02:02 +0000</pubDate>
      <link>https://dev.to/yaku/15-css-that-will-boost-your-designing-confidence-as-frontend-developer-1j55</link>
      <guid>https://dev.to/yaku/15-css-that-will-boost-your-designing-confidence-as-frontend-developer-1j55</guid>
      <description>&lt;p&gt;&lt;strong&gt;1. Use CSS Grid for Better Layouts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS Grid Layout is a new way to create layouts on the web. It provides a more efficient way to layout your content than using floats or positioning.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Media Queries to Target Different Devices**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Media queries allow you to target different devices with different CSS properties. This is a great way to make your site look great on all devices.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Use CSS Animations for Eye-Catching Effects&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CSS Animations allow you to create eye-catching effects that can really make your site stand out.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Pseudo-Classes to Add More Style to Your Links**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pseudo-classes allow you to add more style to your links, making them more visually appealing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Use the :before and :after Pseudo-Elements to Add Content to Your Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;:before and :after pseudo-elements allow you to add content to your pages, which can be used to create interesting effects.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the transform Property to Transform Your Elements**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The transform property allows you to transform your elements, which can create some cool effects.&lt;br&gt;
**&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use the transition Property to Create Smooth Animations**&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The transition property allows you to create smooth animations between CSS properties.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Use the opacity Property to Create Transparent Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The opacity property allows you to create transparent elements, which can be used to create interesting effects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9. Use the box-shadow Property to Add Shadows to Your Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The box-shadow property allows you to add shadows to your elements, which can give them a more polished look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10. Use the border-radius Property to Add Curved Borders to Your Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The border-radius property allows you to add curved borders to your elements, which can give them a more polished look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11. Use the font-family Property to Choose the Fonts for Your Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The font-family property allows you to choose the fonts for your pages, which can help to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12. Use the font-size Property to Control the Size of Your Fonts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The font-size property allows you to control the size of your fonts, which can help to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13. Use the color Property to Control the Color of Your Text&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The color property allows you to control the color of your text, which can be used to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14. Use the background-color Property to Control the Background Color of Your Pages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The background-color property allows you to control the background color of your pages, which can be used to create a more unified look.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15. Use the margin and padding Properties to Control the Space Around Your Elements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The margin and padding properties allow you to control the space around your elements, which can help to create a more polished look.&lt;/p&gt;

&lt;p&gt;Thanks for reading through I hope this article helps you in anyway. &lt;/p&gt;

&lt;p&gt;Please comment any other trick that I may have missed out.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;

&lt;p&gt;Kindly follow me on &lt;a href="//GitHub.com/yakumwamba"&gt;git&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to Secure a Job in 2022</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 01:40:00 +0000</pubDate>
      <link>https://dev.to/yaku/how-to-secure-a-job-in-2022-502d</link>
      <guid>https://dev.to/yaku/how-to-secure-a-job-in-2022-502d</guid>
      <description>&lt;p&gt;In an economy where the average job tenure is 4.6 years, it’s important to be proactive about your career. Whether you’re just starting out or you’re looking for a change, learning how to get a job as a frontend engineer is a valuable skill.&lt;/p&gt;

&lt;p&gt;Frontend engineering is a rapidly growing field. By 2023, there will be a shortage of 230,000 frontend engineers in the United States alone.&lt;/p&gt;

&lt;p&gt;So, how can you make sure you’re one of the lucky few who lands a job in this in-demand field? Here are a few tips:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Stay up to date with the latest trends and technologies&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Frontend engineering is a constantly evolving field, so it’s important to stay up to date with the latest trends and technologies. If you want to get a job as a frontend engineer, you need to be able to not only design and build webpages, but also be familiar with the latest tools and frameworks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Get involved in the community.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the best ways to stay up to date with the latest frontend engineering trends is to get involved in the community. There are a number of online and offline communities where you can learn from and connect with other frontend engineers. Attending meetups and conferences is a great way to meet other professionals and learn about the latest industry trends.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Build a portfolio of your work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In order to get a job as a frontend engineer, you need to be able to show potential employers your work. A portfolio is the best way to do this. Make sure to include a variety of projects, from simple websites to more complex applications. If you don’t have any projects to include, you can also create a personal website or blog and showcase your work there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Get certified&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are a number of frontend engineering certification programs available, such as the Certified Front-End Engineer certification from the American Graphics Institute. Getting certified can demonstrate your knowledge and skills to potential employers and can help you stand out from the competition.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Stay up to date on job postings&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;One of the best ways to find out about job openings is to stay up to date on job postings. There are a number of job boards and websites that list job openings for frontend engineers. Signing up for job alerts is a great way to make sure you don’t miss any opportunities.&lt;/p&gt;

&lt;p&gt;Landing a job as a frontend engineer can be challenging, but it’s definitely not impossible. By following these tips, you’ll be on your way to landing your dream job in no time.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;br&gt;
If you need any help building a portfolio contact me on &lt;a href="mailto:brianlemba2@gmail.com"&gt;brianlemba2@gmail.com&lt;/a&gt;&lt;br&gt;
GitHub.com/yakumwamba&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>web3</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
    <item>
      <title>Mock isolated service in a React Application</title>
      <author>Miguel</author>
      <pubDate>Tue, 25 Jan 2022 01:37:18 +0000</pubDate>
      <link>https://dev.to/devneto/mock-isolated-service-in-a-react-application-4on3</link>
      <guid>https://dev.to/devneto/mock-isolated-service-in-a-react-application-4on3</guid>
      <description>&lt;p&gt;The term division to conquer was used throughout history in political and political ideals, consisting of the fragmentation of powers, thus, it is a strategy that aims to break or accompany between social structures and take them independently.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Divide and Conquer. - Júlio César"&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hi guys, how are you today? &lt;/p&gt;

&lt;p&gt;I am writing this post to demonstrate how it is possible to isolate services in a react application and test them independently.&lt;/p&gt;

&lt;p&gt;Step one: &lt;strong&gt;Understanding the structure&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EBIr7Dxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rkdvvmsizhhd9pkq78e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EBIr7Dxz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0rkdvvmsizhhd9pkq78e.png" alt="structure" width="880" height="348"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Adapters&lt;/strong&gt; work as a bridge to the outside world, this is done through external functions or developed interfaces.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Services&lt;/strong&gt; are a similar construct used by the repository pattern often used by the backend to build a superficial and literal layer between code and database.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Entities&lt;/strong&gt; are interfaces and literal representations of the members of our application.&lt;/p&gt;

&lt;p&gt;Step two: &lt;strong&gt;Building an adapter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import axios from "axios";

const api = axios.create({
  baseURL: process.env.API_BASE,
});

export default api;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;center&gt;/adapters/api.ts&lt;/center&gt;
&lt;/blockquote&gt;

&lt;p&gt;The code above is very simple, we are just creating a new instance of axios and exporting it to the rest of the application.&lt;/p&gt;

&lt;p&gt;Third step: &lt;strong&gt;Assembling the entity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The entity is just a type with its respective attributes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type TUser = {
  name: string;
  email: string;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;center&gt;/entities/user.ts&lt;/center&gt;
&lt;/blockquote&gt;

&lt;p&gt;Last step: &lt;strong&gt;Finally the services&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const registerUser = (user: TUser) =&amp;gt; {
  return api.post("api/user", user);
}

export const getUser = (id: number) =&amp;gt; {
  return api.get(`api/user/${id}`, user);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;

&lt;center&gt;/services/user.ts&lt;/center&gt;

&lt;p&gt;Ui&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our ui is composed of two inputs and a button with their respective data-testid&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;Input data-testid="inputName" /&amp;gt;
&amp;lt;Input data-testid="inputEmail" /&amp;gt;
&amp;lt;Button data-testid="submit" type="submit"&amp;gt;Save&amp;lt;/Button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Writing the tests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First let's mock the service&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as user from "/services/user.ts";

jest.spyOn(user, "registerUser").mockImplementation(() =&amp;gt;
   Promise.resolve({
      message: "created"
   })
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic is in the code above, we are exporting the entire service file and telling spyOn to look at it as a function object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;it("Must submit a new user", async () =&amp;gt; {
  const { getAllByTestId } = render(&amp;lt;User /&amp;gt;);

  const name = getAllByTestId("inputName")[0] as   HTMLInputElement;
  const email = getAllByTestId("inputEmail")[0] as HTMLInputElement;
  const submit = getAllByTestId("submit");

  fireEvent.change(email, { target: { value: "email@email.com" } });
  fireEvent.change(name, { target: { value: "Miguel" } });
  fireEvent.submit(submit);
  await waitFor(() =&amp;gt; 
        expect(user.registerUser).toHaveBeenCalledTimes(1));
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case we expect our form to call our registration function at least once.&lt;/p&gt;

&lt;p&gt;And we reached the end of the tests, the big point is in the import of the service that will be a mock. Take a good look at how the spy function works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HgdyHgaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/068j7du3ioxra0e5os4v.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HgdyHgaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/068j7du3ioxra0e5os4v.gif" alt="Naruto" width="500" height="282"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;center&gt;Time is very important, thanks for sharing a little bit of yours with me 😊.&lt;/center&gt;

&lt;p&gt;&lt;a href="https://github.com/devneto"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4pQJI-Km--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/GitHub-100000%3Fstyle%3Dfor-the-badge%26logo%3Dgithub%26logoColor%3Dwhite" alt="image" width="92" height="28"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Smart Contracts and NFTs: The Future of Digital Transactions?</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 01:26:54 +0000</pubDate>
      <link>https://dev.to/yaku/smart-contracts-and-nfts-the-future-of-digital-transactions-4a52</link>
      <guid>https://dev.to/yaku/smart-contracts-and-nfts-the-future-of-digital-transactions-4a52</guid>
      <description>&lt;p&gt;What are NFTs and Smart Contracts?&lt;/p&gt;

&lt;p&gt;Non-fungible tokens (NFTs) are tokens that are unique and cannot be interchangeable. They are different from other tokens because they can represent unique assets or digital collectibles. Smart contracts are computer protocols that facilitate, verify, or enforce the negotiation or performance of a contract.&lt;/p&gt;

&lt;p&gt;NFTs and Smart Contracts on the Blockchain&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts are two of the most important features of the blockchain. They are what make the blockchain a powerful tool for creating and managing digital assets. NFTs are stored on the blockchain in a decentralized manner, which means that they are not controlled by any single entity. This makes them more secure and trustworthy than traditional digital assets. Smart contracts are executed by the blockchain, which means that they are automatically enforced and cannot be altered or manipulated. This makes them more reliable than traditional contracts.&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts are two of the most important features of the blockchain.&lt;/p&gt;

&lt;p&gt;How NFTs and Smart Contracts are Used&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts can be used to create and manage digital assets and contracts. They can also be used to create decentralized applications (dapps). Dapps are applications that are built on the blockchain and use its features to provide a more secure and trustworthy experience for users. NFTs and smart contracts are also used to create tokens. Tokens are digital assets that can be used to represent anything of value. They can be used to represent money, assets, or anything else that has value.&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts are two of the most important features of the blockchain.&lt;/p&gt;

&lt;p&gt;Benefits of NFTs and Smart Contracts&lt;/p&gt;

&lt;p&gt;NFTs and smart contracts offer a number of benefits that can be used to improve the digital world. Some of the benefits of NFTs and smart contracts include:&lt;/p&gt;

&lt;p&gt;Security: NFTs and smart contracts are secure and can be used to create and manage digital assets and contracts.&lt;/p&gt;

&lt;p&gt;Trust: NFTs and smart contracts are reliable and can be used to create and manage digital contracts and assets.&lt;/p&gt;

&lt;p&gt;Decentralization: NFTs and smart contracts are decentralized and can be used to create and manage digital assets and contracts without the need for a third party.&lt;/p&gt;

&lt;p&gt;Flexibility: NFTs and smart contracts are flexible and can be used to create and manage a wide variety of digital assets and contracts.&lt;/p&gt;

&lt;p&gt;We are still in the early days of these technologies however we can see that they influence much of how our future transactions will look like.&lt;/p&gt;

&lt;p&gt;Thanks for reading this article really appreciate it as I'm on journey of learning more about NFTs and smart contracts Id like to share what I am learning.&lt;/p&gt;

&lt;p&gt;Feel free to hit me up for a chat or anything 😉&lt;/p&gt;

&lt;p&gt;Also kindly follow me on GitHub at GitHub.com/yakumwamba&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Svelte: A Comprehensive Guide to Developing Your App With Svelte - Part 2 🦜</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 01:13:39 +0000</pubDate>
      <link>https://dev.to/yaku/svelte-a-comprehensive-guide-to-developing-your-app-with-svelte-part-2-170j</link>
      <guid>https://dev.to/yaku/svelte-a-comprehensive-guide-to-developing-your-app-with-svelte-part-2-170j</guid>
      <description>&lt;p&gt;Hi welcome to part 2 of the comprehensive guide to Svelte.&lt;/p&gt;

&lt;p&gt;In this article, we will be learning how to fetch API data using Svelte. We will be using the GitHub API to fetch data about repositories.&lt;/p&gt;

&lt;p&gt;First, we need to install the Svelte npm package.&lt;/p&gt;

&lt;p&gt;$ npm install svelte&lt;/p&gt;

&lt;p&gt;Next, we need to create a file called app.svelte.&lt;/p&gt;

&lt;p&gt;`&lt;/p&gt;



GitHub Repository Data





&lt;p&gt;const url = "&lt;a href="https://api.github.com/repositories"&gt;https://api.github.com/repositories&lt;/a&gt;";&lt;/p&gt;

&lt;p&gt;const request = new XMLHttpRequest();&lt;/p&gt;

&lt;p&gt;request.open("GET", url, true);&lt;/p&gt;

&lt;p&gt;request.onload = function() {&lt;br&gt;
if (request.status === 200) {&lt;br&gt;
const resp = request.response;&lt;/p&gt;

&lt;p&gt;const data = resp.body.data;&lt;/p&gt;

&lt;p&gt;console.log(data);&lt;/p&gt;

&lt;p&gt;}&lt;br&gt;
};&lt;br&gt;
request.onerror = function() {&lt;br&gt;
console.error("request failed: " + request.status);&lt;br&gt;
};&lt;/p&gt;

&lt;p&gt;request.send();&lt;/p&gt;





&lt;p&gt;`&lt;br&gt;
In the code, we first define the URL for the GitHub API. We then create a new XMLHttpRequest object. We open the GET request and set the URL. We also set the true parameter, which ensures that the request is made asynchronously.&lt;/p&gt;

&lt;p&gt;We then define two functions, onload and onerror . onload will be executed when the request is loaded, while onerror will be executed if there is an error. We then send the request.&lt;/p&gt;

&lt;p&gt;If the request is successful, we will get the response body. We will then extract the data from the body and log it to the console. &lt;/p&gt;

&lt;p&gt;You can try running the code in your browser. You should see the data for all the repositories on GitHub.&lt;/p&gt;

&lt;p&gt;Thanks for reading ☺️&lt;br&gt;
Please follow me on git here GitHub.com/yakumwamba&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Svelte: A Comprehensive Guide to Developing Your App With Svelte - Part 1 🦜</title>
      <author>Yaku</author>
      <pubDate>Tue, 25 Jan 2022 01:02:38 +0000</pubDate>
      <link>https://dev.to/yaku/svelte-a-comprehensive-guide-to-developing-your-app-with-svelte-part-1-3iob</link>
      <guid>https://dev.to/yaku/svelte-a-comprehensive-guide-to-developing-your-app-with-svelte-part-1-3iob</guid>
      <description>&lt;p&gt;Hi, this is Yaku and I just want to talk about Svelte.&lt;/p&gt;

&lt;p&gt;Svelte is a new JavaScript framework that is designed to be lightweight and efficient. It has a small footprint, and is easy to learn. Svelte is also very fast, and can be used to create powerful web applications. &lt;/p&gt;

&lt;p&gt;Svelte is still in development, but it is already attracting a lot of attention. The framework has been designed from the ground up to be efficient and lightweight, and it offers a lot of advantages over other frameworks such as Angular and React. &lt;/p&gt;

&lt;p&gt;One of the biggest advantages of Svelte is its small footprint. The framework is only about 2.5 KB in size, making it one of the smallest frameworks available. This makes it ideal for use in mobile applications and other small devices. &lt;/p&gt;

&lt;p&gt;Svelte is also very fast. It has been designed to take advantage of modern hardware, and it can handle large amounts of data quickly and efficiently. This makes Svelte a good choice for creating powerful web applications. &lt;/p&gt;

&lt;p&gt;Svelte is still in development, but it looks like it is going to be a popular framework. It offers a lot of advantages over other frameworks, and it is small and efficient. If you are looking for a new JavaScript framework, Svelte is definitely worth considering. &lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;Kindly follow me for more topics on Svelte &lt;a href="https://GitHub.com/yakumwamba"&gt;https://GitHub.com/yakumwamba&lt;/a&gt;&lt;br&gt;
Twitter.com/brianlemba&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Changelog #0010 — 🪄 Prettify JSON, refined cursors, custom macOS window, and more</title>
      <author>Cláudia Delgado</author>
      <pubDate>Mon, 24 Jan 2022 23:53:47 +0000</pubDate>
      <link>https://dev.to/pie/changelog-0010-prettify-json-refined-cursors-custom-macos-window-and-more-25m2</link>
      <guid>https://dev.to/pie/changelog-0010-prettify-json-refined-cursors-custom-macos-window-and-more-25m2</guid>
      <description>&lt;p&gt;We’re excited to announce a number of improvements in HTTPie for Web &amp;amp; Desktop, and &lt;a href="https://httpie.io/blog/httpie-3.0.0"&gt;HTTPie for Terminal 3.0&lt;/a&gt;. Check out what's new 👇&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-web-amp-desktop"&gt;
  &lt;/a&gt;
  HTTPie for Web &amp;amp; Desktop
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#refined-cursor-system"&gt;
  &lt;/a&gt;
  ✋ Refined cursor system
&lt;/h3&gt;

&lt;p&gt;You may have already noticed that we obsess over user experience in places where humans meet APIs. And we like to simplify things, a lot.&lt;br&gt;
This time, we focused on simplifying feedback mechanisms in HTTPie for Web &amp;amp; Desktop and completely revamped its cursor system.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gW44Ijay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/cursor-changes-LLCF25EB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gW44Ijay--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/cursor-changes-LLCF25EB.png" alt="Cursor changes" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pointer cursors were invented to indicate links on the Web. It is tempting to adopt them for all active elements in apps that use web technologies, like we initially did. However, after a thorough research, we decided to say goodbye to pointer cursors.&lt;br&gt;
We continue to use them for elements that are actual web links. But just like modern native apps, you’ll now see subtle hover effects and regular cursors for all other active UI elements instead. This makes the UI feel quieter and the experience more pleasant. Very HTTPie.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-title-bar-on-macos"&gt;
  &lt;/a&gt;
  🍎 Custom title bar on macOS
&lt;/h3&gt;

&lt;p&gt;Speaking of design: we—and our beta users—didn’t like the default title bar in the desktop app. It wasted space and didn’t fit our custom design – the entire window should blend in with the app’s personality. And now, starting with macOS, it does:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ofotz6ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/macos-titlebar-G6ZGRYD5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ofotz6ec--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/macos-titlebar-G6ZGRYD5.png" alt="MacOS title bar" width="880" height="591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you’re on Windows or Linux, fear not. Your app window will get a facelift in a future release as well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prettify-json"&gt;
  &lt;/a&gt;
  🪄 Prettify JSON
&lt;/h3&gt;

&lt;p&gt;To ensure the body of your request is humanly readable and navigable, you can now use the prettify feature. It will automatically format your code so that your brain’s free to do other things:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--baZcbhvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/prettify-DAGAA3N5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--baZcbhvA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/prettify-DAGAA3N5.png" alt="Prettify" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just look for the wand icon at the bottom of the code editor 🪄&lt;br&gt;
This feature is available for JSON now, and we’ll be adding support for other formats in future releases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-collection-icons"&gt;
  &lt;/a&gt;
  💟 More collection icons
&lt;/h3&gt;

&lt;p&gt;Collection icons have become a second nature to our users. We thought it was time to add 8 more of them. Check them out!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9S8ycFaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/new-icons-6W7ADTKA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9S8ycFaB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://httpie.io/Blog/changelog-0010/new-icons-6W7ADTKA.png" alt="New icons" width="880" height="624"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#improvements"&gt;
  &lt;/a&gt;
  ✨ Improvements
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;There are many other small UI improvements to make the experience more coherent. How many can you spot?&lt;/li&gt;
&lt;li&gt;You can now edit the name and icon of a collection inline from its tab. Simply click on these elements.&lt;/li&gt;
&lt;li&gt;If you click on the collection icon in a request tab, it will now take you to its collection tab.&lt;/li&gt;
&lt;li&gt;Keyboard-mainly user? You don’t need to leave your keys anymore when navigating dialogs. Enter-to-submit now works for all off them.&lt;/li&gt;
&lt;li&gt;Have you named a request but, now you’d like to have the dynamic URL-based name back instead? Just clear it in the edit dialog.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#fixes"&gt;
  &lt;/a&gt;
  🪲 Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The context menu in tabs doesn’t work in a moody way anymore.&lt;/li&gt;
&lt;li&gt;Hopefully, you never noticed but extremely long collection names caused minor layout issues. Those issues were fixed and there’s now a limit for collection and request names. Hopefully, you won’t reach that limit either.&lt;/li&gt;
&lt;li&gt;Expand/collapse icons would disappear from the response if you edited the body of the request. Now they don’t.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#httpie-for-terminal"&gt;
  &lt;/a&gt;
  HTTPie for Terminal
&lt;/h2&gt;

&lt;p&gt;In every other changelog so far, we posted the ongoing improvements to the &lt;a href="https://github.com/httpie/httpie"&gt;development version&lt;/a&gt; of &lt;a href="https://httpie.io/cli"&gt;HTTPie for Terminal&lt;/a&gt;.&lt;br&gt;
Today, we are thrilled to announce that those developments were wrapped up into the final 3.0 release! It includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;🌲 Nested JSON&lt;/li&gt;
&lt;li&gt;🔌 Plugin Manager&lt;/li&gt;
&lt;li&gt;⏱️ Response Metrics&lt;/li&gt;
&lt;li&gt;🚀 Speed-ups&lt;/li&gt;
&lt;li&gt;🎨 Improved UI/UX&lt;/li&gt;
&lt;li&gt;🙌 And much more!
We have a long separate post covering this best-ever release, check it out!
👉 What’s new in &lt;a href="https://httpie.io/blog/httpie-3.0.0"&gt;HTTPie for Terminal 3.0 →&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#happy-testing-and-see-you-next-week"&gt;
  &lt;/a&gt;
  Happy testing, and see you next week!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;💁🏻‍♀️ If you’re not on the private beta yet, you can &lt;a href="https://httpie.io/beta"&gt;join the waitlist here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;👉 You can also follow &lt;a href="https://twitter.com/httpie"&gt;@httpie&lt;/a&gt; and join our &lt;a href="https://httpie.io/discord"&gt;Discord community&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;👩‍💻 We’re looking for new colleagues in &lt;a href="https://httpie.io/jobs"&gt;engineering and design roles&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Originally published on &lt;a href="https://httpie.io/blog/changelog-0010"&gt;HTTPie blog&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why an Autistic Developer is Your Next Great Hire w/ Matt Nigh of UW Medicine</title>
      <author>Conor Bronsdon</author>
      <pubDate>Mon, 24 Jan 2022 23:44:25 +0000</pubDate>
      <link>https://dev.to/linearb/why-an-autistic-developer-is-your-next-great-hire-w-matt-nigh-of-uw-medicine-51ea</link>
      <guid>https://dev.to/linearb/why-an-autistic-developer-is-your-next-great-hire-w-matt-nigh-of-uw-medicine-51ea</guid>
      <description>&lt;p&gt;Like most fast-growing companies, LinearB spends WAY too much time trying to hire developers.&lt;/p&gt;

&lt;p&gt;So when we came across a &lt;a href="https://medium.com/leading-literally/now-is-the-time-to-hire-autistic-talent-932d4f291644"&gt;brilliant article about hiring autistic talent&lt;/a&gt;, we knew we had to have its author Matt Nigh on the podcast. Matt is one of the most prominent thought leaders on neurodiversity in the workplace.&lt;/p&gt;

&lt;p&gt;Matt himself was diagnosed with autism late in life following a very unique job interview at Google. He’s since spent countless hours researching, writing and talking about how companies can not only bring neurodiverse talent into the fold, but why engineering teams thrive when they do.&lt;/p&gt;

&lt;p&gt;In this episode of Dev Interrupted we talk with Matt about best practices in recruiting, hiring and working with neurodiverse coders, how his interview at Google interview led to an autism diagnosis, the ways Matt’s data team at the University of Washington is helping combat COVID and what private companies can learn from the ROI metrics of universities and public institutions.&lt;/p&gt;

&lt;p&gt;Dan and Matt also took some time to geek out about GitLab.&lt;/p&gt;

&lt;p&gt;We hope this conversation was as enlightening for you as it was for us and we hope it helps you find your next great hire.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://open.spotify.com/embed/episode/4ZYGEMqBFzdfDi31Tdxqqa" width="100%" height="232px"&gt;
&lt;/iframe&gt;
 &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;How Matt’s &lt;a href="https://www.autismspeaks.org/what-autism"&gt;autism diagnosis&lt;/a&gt; changed his career&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://hbr.org/2017/05/neurodiversity-as-a-competitive-advantage"&gt;Hiring&lt;/a&gt; neurodiverse talent&lt;/li&gt;
&lt;li&gt;Inclusive interview best practices for &lt;a href="https://devinterrupted.com/adhd-in-the-workplace-3-ways-you-can-help/"&gt;neurodiverse&lt;/a&gt; candidates&lt;/li&gt;
&lt;li&gt;ROI metrics: public sector vs private sector&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.uwmedicine.org/coronavirus"&gt;UW’s&lt;/a&gt; data team and its efforts to combat COVID&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#youre-invited-to-interact-on-april-7th-its-online-amp-its-free"&gt;
  &lt;/a&gt;
  &lt;a href="https://devinterrupted.com/event/interact/"&gt;You're Invited to INTERACT on April 7th - It's online &amp;amp; it's free!&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Back by popular demand, Dev Interrupted has announced it will be hosting the next iteration of its engineering leadership conference, INTERACT 2.0.  The community-driven, digital conference makes its return April 7th, 2022. Designed by engineering leaders, for engineering leaders INTERACT 2.0 will feature dozens of speakers, 100s of engineers and engineering leaders, and is totally free.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bj6LXV7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xhtonct1vkpjhrtzfl3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bj6LXV7C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xhtonct1vkpjhrtzfl3.png" alt="Join INTERACT at https://devinterrupted.com/event/interact/" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>inclusion</category>
      <category>podcast</category>
      <category>techtalks</category>
      <category>career</category>
    </item>
    <item>
      <title>What Is Ethereum? The Basics</title>
      <author>grin2b</author>
      <pubDate>Mon, 24 Jan 2022 23:36:42 +0000</pubDate>
      <link>https://dev.to/grin2b/what-is-ethereum-the-basics-3jcd</link>
      <guid>https://dev.to/grin2b/what-is-ethereum-the-basics-3jcd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-basics"&gt;
  &lt;/a&gt;
  &lt;strong&gt;The Basics&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Ethereum is a network of computers which collectively form the Ethereum Virtual Machine (EVM), which updates the state of the Ethereum blockchain. A blockchain is a publicly available and distributed database, which acts as the memory of the EVM. One role of this memory is acting as a ledger, saying who owns how much Ether, the cryptocurrency supported by the Ethereum network. The computers participating in this network are called “nodes” or “miners”, and the computational power they contribute is what keeps the EVM running. For their work, they are rewarded with Ether, hence the term “miners”. The EVM can also run programs called “smart contracts”, which are programs stored on the blockchain and run on the EVM.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockchain"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Blockchain&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A blockchain is a publicly available and distributed database, which is stored and kept up to date by all of the computers which form the EVM. These computers are also known as “miners”. The “blocks” in the blockchain refer to blocks of transactions/state updates, and the “chain” refers to how the current state of the blockchain is the end result of a chain of those blocks. The EVM adds blocks of transactions to the blockchain by attacking a cryptographic algorithm with brute force, using the computers participating in the network. When the transactions are processed, the current state of the blockchain is updated to reflect the changes in those transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cryptocurrency"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Cryptocurrency&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;A cryptocurrency is a digital asset, whose ownership is kept track of in a blockchain. This is called a distributed ledger, and it designates how much cryptocurrency (in this case, Ether) belongs to each address. Because the blockchain is distributed and publicly available, everyone can see how much cryptocurrency belongs to each address. Owners of that cryptocurrency can send their coins to other addresses, in order to make purchases, send coins to friends, or send coins to exchanges to sell those coins for fiat (USD, EUR, etc.). Owners are able to control the coins they hold by using the private key for their address, a number of 32 random bytes, to generate a transaction on the Ethereum network. For those familiar with cryptographic algorithms, the address can be thought of as a public key, and the private key can be thought of as a private key. (If you lose your private key, the coins in your address are locked away forever!) When transactions are placed on the Ethereum network to be processed, they are confirmed and finalized by miners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mining"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Mining&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Mining is how blocks of transactions are added to the blockchain. The computing power lent by nodes on the Ethereum network are used to ensure that transactions placed on the Ethereum network are valid, and once they are validated, they are placed on the blockchain. This validation occurs by having miners run a brute force attack against the combination of the existing blockchain and the data from the new block, to see whether they can guess an 8 byte value which can be verified as coming from the private key. This value is called a “nonce”, which is short for “number once”, and it has this name because even though the same private key(s) are used to generate that nonce, the nonce will be wildly different if the transactions on the block are even slightly different. The public key is used in the algorithm that verifies whether the nonce generated by a miner is a valid match, and once the puzzle of finding that nonce has been solved, the miner announces to the network that it has validated a block to be added to the blockchain. Other miners can validate this claim extremely quickly, and when a majority of miners come to a consensus, that block is added to the blockchain. The use of the public key in validating transactions is what protects the network from a bad actor placing fraudulent transactions on the blockchain: A bad actor cannot add a fraudulent block of transactions to the blockchain, because they can’t generate a valid nonce for a given public key (i.e. address) without the corresponding secret key.&lt;a href="https://ethereum.org/en/developers/docs/consensus-mechanisms/pow/"&gt;[1]&lt;/a&gt; The miner which found the solution is rewarded with some Ether to incentivize participation in the network. This Ether is called a “tip”, and is a portion of the “gas”, i.e., a fee paid by the originator of the transaction to compensate the miners for executing that transaction.&lt;a href="https://ethereum.org/en/developers/docs/gas/#what-is-gas"&gt;[2]&lt;/a&gt; This type of process is called a “consensus mechanism”, since it is a way by which participants in the network come to a consensus as to which transactions are valid. The particular consensus mechanism described here is called “Proof-of-work”, since the miner is providing a valid nonce, i.e., a proof of the work it has performed. There is another consensus mechanism on the Ethereum network called “proof-of-stake”, which is not discussed here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#smart-contracts-aka-dapps"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Smart Contracts, aka DApps&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So far, everything that has been described about Ethereum mining is more-or-less the same as Bitcoin, alongside many other cryptocurrencies. What sets Ethereum apart (alongside other networks such as Solana or Polkadot) is its ability to execute smart contracts, aka “decentralized applications” or “DApps”. To quote the Ethereum docs, “A ‘smart contract’ is simply a program that runs on the Ethereum blockchain. It's a collection of code (its functions) and data (its state) that resides at a specific address on the Ethereum blockchain.”&lt;a href="https://ethereum.org/en/developers/docs/smart-contracts/#what-is-a-smart-contract"&gt;[3]&lt;/a&gt; Smart contracts are written in languages like Solidity and Vyper, and any given smart contract can execute any other smart contract and so forth.&lt;a href="https://ethereum.org/en/developers/docs/smart-contracts/#composability"&gt;[4]&lt;/a&gt; Data used by smart contracts can either be stored on the blockchain, which lets it persist after a given execution of a smart contract; or it can be stored in memory, which is much cheaper, although the data disappear once the execution is completed.&lt;a href="https://ethereum.org/en/developers/docs/smart-contracts/anatomy/#data"&gt;[5]&lt;/a&gt; Example uses of smart contracts include decentralized finance (“DeFi”), non-fungible tokens (“NFTs”), and literal contracts for legal agreements, such as real estate, marriage, or corporate ownership, since the rules of the contract can be written in code, and signing the contract requires the secure keys of all parties involved.&lt;a href="https://www.gemini.com/cryptopedia/smart-contract-examples-smart-contract-use-cases#section-smart-contracts-and-blockchain-in-the-legal-industry"&gt;[6]&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaway"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Takeaway&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Ethereum is a network running a virtual computer, called the Ethereum Virtual Machine. To store data in memory, the EVM uses a blockchain, which is a distributed and publicly available database. The native cryptocurrency of Ethereum is called Ether. To add data to the blockchain, this computer uses mining, which is a cryptographic brute force attack to ensure that only valid transactions are added to the blockchain. Ethereum also supports smart contracts, which are computer programs uploaded onto the blockchain, which can be executed in a similar fashion to how transactions are added to the network. These smart contracts can store data on the blockchain, and they can call one another, resulting in potentially complex programs. Smart contracts have many current uses in finance, identifying ownership, and legal agreements.&lt;/p&gt;

</description>
      <category>ethereum</category>
      <category>blockchain</category>
    </item>
    <item>
      <title>Want to learn something new? Consistency is the key</title>
      <author>Peter Swartwout</author>
      <pubDate>Mon, 24 Jan 2022 23:20:56 +0000</pubDate>
      <link>https://dev.to/focusedlabs/want-to-learn-something-new-consistency-is-the-key-30ap</link>
      <guid>https://dev.to/focusedlabs/want-to-learn-something-new-consistency-is-the-key-30ap</guid>
      <description>&lt;p&gt;If you've ever taken a fitness class, you've heard the instructor talk about &lt;strong&gt;&lt;em&gt;consistency&lt;/em&gt;&lt;/strong&gt;. It's not about how fast you pedal or how much weight you lift. It's about showing up, doing your best and not giving up. Regularly.&lt;/p&gt;

&lt;p&gt;It's the same for your brain. If you are learning a new framework, a new programming language, or working on a side project to expand your skills, you are &lt;strong&gt;&lt;em&gt;much&lt;/em&gt;&lt;/strong&gt; better off doing a small amount every day, or several times a week, as opposed to bingeing. When I hear a friend say something like "I'm dedicating this coming weekend to learning React" I cringe because I fear they will go back to their day job and forget everything from the weekend by the next weekend. &lt;/p&gt;

&lt;p&gt;But don't take my word for it. The science backs this up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frequency"&gt;
  &lt;/a&gt;
  Frequency
&lt;/h2&gt;

&lt;p&gt;In a 2011 study at University of California Irvine’s Center for the Neurobiology of Learning and Memory, researchers proved that when neurons interact frequently the bonds between them grow stronger and more information is retained for later use:&lt;/p&gt;

&lt;p&gt;"When learning new things, memory and recall are strengthened by &lt;strong&gt;&lt;em&gt;frequency&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;recency&lt;/em&gt;&lt;/strong&gt;. The more we practice and rehearse something new and the more recently we have practiced, the easier it is for our brain to transmit these experiences efficiently and store them for ready access later. This process is called fluency." &lt;a href="https://trainingindustry.com/articles/content-development/how-the-brain-learns"&gt;1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short, think about something frequently and it will stick. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recency"&gt;
  &lt;/a&gt;
  Recency
&lt;/h2&gt;

&lt;p&gt;The concept is simple. Our brains retain the information we have received most recently, but only for a short time. This makes sense given the huge about of incoming information the brain has to process. Why retain the license number of the car in front of you for more than 10 seconds?&lt;/p&gt;

&lt;p&gt;But if you want to deliberately retain new information, the trick is &lt;strong&gt;&lt;em&gt;cumulative review&lt;/em&gt;&lt;/strong&gt;. Every time you start a reading session, or coding session, spend the first 5 or so minutes reviewing what you did in the last session. Once a week, review something from much earlier that you might now be fuzzy on. So simple but it will return huge dividends. This technique has long been known to educators but can be challenging to implement when self-guided.&lt;/p&gt;

&lt;p&gt;When I was first learning backgammon (a game that is wonderfully complex when you get past the basics) I proved that this technique works and I still use it today. I start every study session with a short review of what I did in the previous session. Once a week I review concepts I haven't looked at for awhile. This has helped my game tremendously.&lt;/p&gt;

&lt;p&gt;The same technique works for all learnings - technical and in life. Follow these two simple rules consistently:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Study frequently, every day if you can manage it&lt;/li&gt;
&lt;li&gt;Review regularly&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Good luck with whatever you are seeking to learn!&lt;/p&gt;

</description>
      <category>programming</category>
      <category>career</category>
      <category>productivity</category>
      <category>learning</category>
    </item>
  </channel>
</rss>
