<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best 6 Free Icons Pack For Web Dev And Designer</title>
      <author>Innocent Coder</author>
      <pubDate>Thu, 01 Jul 2021 16:03:37 +0000</pubDate>
      <link>https://dev.to/innocentcoder/best-6-free-icons-pack-for-web-dev-and-designer-3064</link>
      <guid>https://dev.to/innocentcoder/best-6-free-icons-pack-for-web-dev-and-designer-3064</guid>
      <description>&lt;p&gt;This post repost from:- &lt;a href="https://the-dev-community.blogspot.com/best-6-free-icons-pack-for-web-dev-and"&gt;https://the-dev-community.blogspot.com/best-6-free-icons-pack-for-web-dev-and&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ricon-v1-demo-240-essential-interface-icons"&gt;
  &lt;/a&gt;
  Ricon v.1 Demo — 240 Essential Interface Icons
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HomsSz7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2te0mrvt3ikavnx6ilt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HomsSz7Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2te0mrvt3ikavnx6ilt.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
A growing pack of 240 fully vector icons. Icons are based on a 24px grid system and balanced among each other using common proportions, curvatures, and white spaces. The set is designed to save your time and enhance your design - no matter if it's a &lt;br&gt;
website, mobile app, slide deck, or print design.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://remadesign.gumroad.com/l/ricon"&gt;https://remadesign.gumroad.com/l/ricon&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#blobs-icons"&gt;
  &lt;/a&gt;
  Blobs Icons
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XQVmCHz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka4enujihh68c067630k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XQVmCHz1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ka4enujihh68c067630k.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Enjoy a custom set of icons made to be highly customized. Change colors and sizes without having to worry about scalability issues. Add a unique look and feeling to your design and express more with less text.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://www.baianat.com/freebies/blobs"&gt;https://www.baianat.com/freebies/blobs&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#gamer-life-free-icon-pack"&gt;
  &lt;/a&gt;
  Gamer Life Free Icon Pack
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KoZ-yn4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jhg914zoxgmahlsax4k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KoZ-yn4K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jhg914zoxgmahlsax4k.png" alt="image"&gt;&lt;/a&gt; &lt;br&gt;
Check out this free icon pack made by Aakash Raj Dahal. A nice collection of free icons related to video gaming that you can use for web and mobile application interfaces. Icons are available in SVG, PNG, AI, and Figma file formats. All the 250 icons come in two weights: regular and light. Again, thanks to Aakash Raj Dahal for creating and sharing these free icons.&lt;/p&gt;

&lt;p&gt;link  :- &lt;a href="https://themeui.net/gamer-life-free-icon-pack/"&gt;https://themeui.net/gamer-life-free-icon-pack/&lt;/a&gt; &lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#comercily-ecommerce-free-icon-set"&gt;
  &lt;/a&gt;
  Comercily – eCommerce Free Icon Set
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGJ4KhAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub2zwc9hiuy5rqx9o3bh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGJ4KhAT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub2zwc9hiuy5rqx9o3bh.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Here is a nice little freebie from Dipa Inhouse. Comercily is a free icon set for eCommerce and any transactional websites. The kit includes 40 well-crafted scalable vector icons. Icons are available in Figma, Sketch, SVG, EPS, and PNG file formats. Again thanks to Dipa Inhouse for sharing this freebie!&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://themeui.net/comercily-ecommerce-free-icon-set/"&gt;https://themeui.net/comercily-ecommerce-free-icon-set/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#free-christmas-icons-set"&gt;
  &lt;/a&gt;
  Free Christmas Icons Set
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f8ZKRX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bt7h7hjom3vhb6fe16m7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f8ZKRX82--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bt7h7hjom3vhb6fe16m7.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
On the occasion of Christmas, Iconscout has designed for us special Christmas icons that come in three different styles line, flat, and colored outline. The icons come in PNG and SVG formats. You can use them anywhere you want. They are free of cost and can be used in both personal and commercial use.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://themeui.net/free-christmas-icons-set/"&gt;https://themeui.net/free-christmas-icons-set/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#line-icon-pack"&gt;
  &lt;/a&gt;
  Line Icon Pack
&lt;/h1&gt;

&lt;p&gt;A set of free icons that started as a side project. Now it has 320+ icons and still growing. A nice design resource you can use for your next project. The freebie is compatible with today’s popular design tools. Huge thanks to Petr Bilek for providing us with this awesome free icons.&lt;/p&gt;

&lt;p&gt;link :- &lt;a href="https://themeui.net/line-icon-pack/"&gt;https://themeui.net/line-icon-pack/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:-&lt;/strong&gt; visit my youtube channel for frontend tutorials&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;subscribe to my youtube channel :-&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg"&gt;https://www.youtube.com/channel/UCR64vQptythbJ1SmI-ub0Rg&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resent post :-&lt;/strong&gt; &lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/innocentcoder" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RGJ5NE5F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ICZsIDfS--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/620705/764eb964-ecd2-4875-90c2-142dfc2f639c.jpg" alt="innocentcoder"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/innocentcoder/top-5-best-resources-to-learn-javascript-e3p" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Top 5 Best Resources To Learn Javascript&lt;/h2&gt;
      &lt;h3&gt;Innocent Coder ・ Jun 27 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#career&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>webdev</category>
      <category>discuss</category>
      <category>css</category>
      <category>career</category>
    </item>
    <item>
      <title>Lessons Learned from Programming at Google w/ Hyrum Wright &amp; Titus Winters (Part 1)</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 01 Jul 2021 15:48:44 +0000</pubDate>
      <link>https://dev.to/linearb/lessons-learned-from-programming-at-google-w-hyrum-wright-titus-winters-part-1-5d5c</link>
      <guid>https://dev.to/linearb/lessons-learned-from-programming-at-google-w-hyrum-wright-titus-winters-part-1-5d5c</guid>
      <description>&lt;p&gt;Google is a titan of technology with one of the largest codebases in the world - and there are many lessons to be learned from how Google has scaled.&lt;/p&gt;

&lt;p&gt;In the first episode of a two-part series, Senior Google Staff Engineers Hyrum Wright and Titus Winters join the &lt;a href="https://open.spotify.com/episode/2r5ZD46J8mueaopwBlYJs6?si=OQENpmnzRNu2HerRnpt-yw&amp;amp;dl_branch=1"&gt;Dev Interrupted podcast&lt;/a&gt; to discuss lessons learned from programming at Google and to talk about their new book.&lt;/p&gt;

&lt;p&gt;Both guests bring a deep understanding of software engineering to the show: Hyrum is semi-famous as the "Hyrum" of Hyrum's Law; while Titus is responsible for managing 250 million lines of code and over 12,000 developers. &lt;/p&gt;

&lt;p&gt;Their book, &lt;a href="https://abseil.io/resources/swe-book"&gt;&lt;em&gt;Software Engineering at Google: Lessons Learned from Programming Over Time&lt;/em&gt;&lt;/a&gt;, is available for free online. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2r5ZD46J8mueaopwBlYJs6"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What is &lt;a href="https://www.hyrumslaw.com/"&gt;Hyrum's Law&lt;/a&gt; and how did it come to exist?&lt;/li&gt;
&lt;li&gt;The role of time in relation to software engineering&lt;/li&gt;
&lt;li&gt;The "real" goal of software engineering&lt;/li&gt;
&lt;li&gt;How Google thinks about scale&lt;/li&gt;
&lt;li&gt;Why every line of code is a lability&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/tpkmwM6c3g"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>code</category>
      <category>scaling</category>
      <category>softwareengineering</category>
    </item>
    <item>
      <title>GitHub for storage</title>
      <author>Siddharth</author>
      <pubDate>Thu, 01 Jul 2021 15:39:46 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/github-for-storage-2gjm</link>
      <guid>https://dev.to/siddharthshyniben/github-for-storage-2gjm</guid>
      <description>&lt;p&gt;I've been seeing GitHub repositories used for many things other than code – awesome lists, music, travel logs. But the next thing is data storage. &lt;a href="https://github.com/utterance/utterances"&gt;Utterances, for example,&lt;/a&gt; is a commenting system that creates a new GitHub issue for every blog post written and syncs its comments and blog post comments.&lt;/p&gt;

&lt;p&gt;I could see myself making a whole blog based on GitHub, and hosted on GitHub pages – All blog posts are in a folder. A GitHub action converts all the blog posts in the folder to a static site. Wanna write a guest post? Open a PR. Comments could be based on GitHub issues. Spellcheck in checks. Code review. Line comments. And much, much more.&lt;/p&gt;

&lt;p&gt;And this is not only for GitHub. For example, an app that uses a blogging platform's API could store its config as a draft post. And so on. And I can't wait to see what people make of this.&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>Getting To Know Flutter: Google Maps Integration</title>
      <author>TheOtherDev/s</author>
      <pubDate>Thu, 01 Jul 2021 15:35:59 +0000</pubDate>
      <link>https://dev.to/theotherdevs/getting-to-know-flutter-google-maps-integration-304a</link>
      <guid>https://dev.to/theotherdevs/getting-to-know-flutter-google-maps-integration-304a</guid>
      <description>&lt;p&gt;In this tutorial you will learn how to add an interactive map provided by Google Maps in your Flutter app. We will use the official Google Maps package &lt;a href="https://pub.dev/packages/google_maps_flutter"&gt;https://pub.dev/packages/google_maps_flutter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will skip the "Getting started" part that you can find in the home page of the package to go directly o the juicy part. &lt;br&gt;
In brief you have to create an API Key from the Google Cloud Platform and set the key n your native Android and iOS projects.&lt;/p&gt;

&lt;p&gt;We will start from a simple app, which is the one that you can find in the Readme of the package, a simple map centered in the Google Plex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyApp&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatelessWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;MaterialApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;'Flutter Google Maps Demo'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="nl"&gt;home:&lt;/span&gt; &lt;span class="n"&gt;GoogleMapsFlutter&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GoogleMapsFlutter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;StatefulWidget&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;_GoogleMapsFlutterState&lt;/span&gt; &lt;span class="n"&gt;createState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_GoogleMapsFlutterState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;_GoogleMapsFlutterState&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GoogleMapsFlutter&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Completer&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;_controller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Completer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;CameraPosition&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CameraPosition&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;target:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;37.42796133580664&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;122.085749655962&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;zoom:&lt;/span&gt; &lt;span class="mf"&gt;14.4746&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BuildContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Scaffold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;body:&lt;/span&gt; &lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;initialCameraPosition:&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onMapCreated:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#add-a-marker"&gt;
  &lt;/a&gt;
  Add a marker
&lt;/h1&gt;

&lt;p&gt;Let's add a marker in the center of the google plex, to do this the &lt;code&gt;GoogleMap&lt;/code&gt; Widget has a &lt;code&gt;markers&lt;/code&gt;parameter that takes a Set of Markers objects. So the body of our Scaffold becomes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;mapType:&lt;/span&gt; &lt;span class="n"&gt;MapType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;initialCameraPosition:&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onMapCreated:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="nl"&gt;markers:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google_plex'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;],&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When creating the Marker you can specify the content of the &lt;code&gt;InfoWindow&lt;/code&gt; that will appear if the marker is tapped. With the onTap parameter you can also set a function that will be called if the marker is tapped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google_plex'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;infoWindow:&lt;/span&gt; &lt;span class="n"&gt;InfoWindow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;"You've tapped the Google Plex"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;snippet:&lt;/span&gt; &lt;span class="s"&gt;'Enjoy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Marker tapped'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#use-a-custom-image-for-the-marker"&gt;
  &lt;/a&gt;
  Use a custom image for the marker
&lt;/h1&gt;

&lt;p&gt;To use a custom image for your markers you will have to create a &lt;code&gt;BitmapDescriptor&lt;/code&gt;, don't worry you can create one of it from an image from the assets but this is an asynchronous function so we will have to load our image, and our markers, in the &lt;code&gt;initState&lt;/code&gt; function. Le's define 2 variables in our state, one for the bitmap descriptor and one for our markers and populate them in initState.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;_markerBitmap&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;?&lt;/span&gt; &lt;span class="n"&gt;_markers&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

  &lt;span class="nd"&gt;@override&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_loadMarkers&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;initState&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;_loadMarkers&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromAssetImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;ImageConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;'assets/location_marker.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_markers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;([&lt;/span&gt;
      &lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'google_plex'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;infoWindow:&lt;/span&gt; &lt;span class="n"&gt;InfoWindow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
          &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;"You've tapped the Google Plex"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
          &lt;span class="nl"&gt;snippet:&lt;/span&gt; &lt;span class="s"&gt;'Enjoy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Marker tapped'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
      &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;]);&lt;/span&gt;

    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to use the markers that we've just created in our &lt;code&gt;GoogleMap Widget&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;GoogleMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;mapType:&lt;/span&gt; &lt;span class="n"&gt;MapType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;initialCameraPosition:&lt;/span&gt; &lt;span class="n"&gt;_kGooglePlex&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;onMapCreated:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;complete&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;controller&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="o"&gt;},&lt;/span&gt;
        &lt;span class="nl"&gt;markers:&lt;/span&gt; &lt;span class="n"&gt;_markers&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
      &lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ILlTYEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9i0436fv5iewkg87xo8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ILlTYEt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y9i0436fv5iewkg87xo8.png" alt="Google maps screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ensure-that-all-markers-are-visible"&gt;
  &lt;/a&gt;
  Ensure that all markers are visible
&lt;/h1&gt;

&lt;p&gt;If you have a lot of markers and you don't know their positions, for example if the markers come from an API call, you will like to have all of them visible in the map. To do this we need to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calculate the maps bounds to fit all the marker&lt;/li&gt;
&lt;li&gt;Create a Camera request update&lt;/li&gt;
&lt;li&gt;Perform the camera request update on the &lt;code&gt;GoogleMapController&lt;/code&gt; object to move the camera&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So our function to load the markers become:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;_loadMarkers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromAssetImage&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;ImageConfiguration&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="s"&gt;'assets/location_marker.png'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// The positions of our markers&lt;/span&gt;
    &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.968046&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;94.420307&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.33328&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;89.132008&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.755787&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.359998&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.844843&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.54911&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.92057&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;93.44786&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.240309&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;91.493619&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.968041&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;94.419696&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;44.333304&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;89.132027&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.755783&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.360066&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;33.844847&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;116.549069&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;];&lt;/span&gt;

    &lt;span class="c1"&gt;// Create the markers from the positions&lt;/span&gt;
    &lt;span class="n"&gt;_markers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="n"&gt;positions&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Marker&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
              &lt;span class="nl"&gt;icon:&lt;/span&gt; &lt;span class="n"&gt;_markerBitmap&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="n"&gt;BitmapDescriptor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;defaultMarker&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="nl"&gt;markerId:&lt;/span&gt; &lt;span class="n"&gt;MarkerId&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;${e.latitude}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;${e.longitude}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;position:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;infoWindow:&lt;/span&gt; &lt;span class="n"&gt;InfoWindow&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;title:&lt;/span&gt; &lt;span class="s"&gt;"You've tapped &lt;/span&gt;&lt;span class="si"&gt;${e.latitude}&lt;/span&gt;&lt;span class="s"&gt;-&lt;/span&gt;&lt;span class="si"&gt;${e.longitude}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;snippet:&lt;/span&gt; &lt;span class="s"&gt;'Enjoy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
              &lt;span class="o"&gt;),&lt;/span&gt;
              &lt;span class="nl"&gt;onTap:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Marker tapped'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
              &lt;span class="o"&gt;},&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
          &lt;span class="o"&gt;)&lt;/span&gt;
          &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Calculate the bounds to fit all the markers&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;bounds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_boundsFromLatLngList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;positions&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Create the camera update with the bounds calculated&lt;/span&gt;
    &lt;span class="n"&gt;CameraUpdate&lt;/span&gt; &lt;span class="n"&gt;u2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CameraUpdate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;newLatLngBounds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bounds&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Animate the camera to update&lt;/span&gt;
    &lt;span class="n"&gt;GoogleMapController&lt;/span&gt; &lt;span class="n"&gt;googleMapController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;_controller&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;future&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;googleMapController&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;animateCamera&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;setState&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;{});&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;LatLngBounds&lt;/span&gt; &lt;span class="n"&gt;_boundsFromLatLngList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LatLng&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;infinity&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;latLng&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;LatLngBounds&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
      &lt;span class="nl"&gt;northeast:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
      &lt;span class="nl"&gt;southwest:&lt;/span&gt; &lt;span class="n"&gt;LatLng&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#moving-forward"&gt;
  &lt;/a&gt;
  Moving forward
&lt;/h1&gt;

&lt;p&gt;If you want to find a complete example &lt;a href="https://github.com/lorenzOliveto/flutter-google-maps-demo"&gt;check out this repository&lt;/a&gt;.&lt;br&gt;
You can use this as a base to implement an awesome map in your application.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Make a Twitter Bot Using Python</title>
      <author>Evan J</author>
      <pubDate>Thu, 01 Jul 2021 14:46:28 +0000</pubDate>
      <link>https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k</link>
      <guid>https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k</guid>
      <description>&lt;p&gt;Hello!&lt;br&gt;
This tutorial will demonstrate how to create a simple Twitter bot using the Tweepy library in Python.&lt;br&gt;
This tutorial will be separated into four parts:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-a-twitter-developer-account"&gt;Setting up a Twitter Developer Account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-the-application-using-python"&gt;Creating the Application using Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-the-application"&gt;Running the Application&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/tweepy/"&gt;Tweepy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.twitter.com/"&gt;Twitter Developer Account&lt;/a&gt; (Will explain in the next section)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#setting-up-a-twitter-developer-account"&gt;
  &lt;/a&gt;
  Setting up a Twitter Developer Account
&lt;/h3&gt;

&lt;p&gt;To create a Twitter bot you must apply for a Twitter Developer Account detailed in &lt;a href="https://developer.twitter.com/en/apply-for-access"&gt;this&lt;/a&gt; link.&lt;br&gt;
You must describe the use-cases that you intend to satisfy using their API. This application process can take anywhere from an hour to a day, so be patient!&lt;br&gt;
Once accepted you will get an email detailing how to access the developer portal. Login to the developer portal and follow the steps to create a Twitter app.&lt;br&gt;
Make sure your app has &lt;code&gt;Read + Write + Read and post direct messages&lt;/code&gt; permissions by going to this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fOETXjYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zkntkga090qncu9gtbz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOETXjYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7zkntkga090qncu9gtbz.PNG" alt="Permissions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once it is created and the permissions are set, hit the Key 🗝 icon next to your app, and you should see this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wW66PPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue98bzcbqk0z3tnkpoyd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wW66PPe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ue98bzcbqk0z3tnkpoyd.PNG" alt="Developer Keys"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate and take note of the &lt;code&gt;API key/secret&lt;/code&gt; and the &lt;code&gt;access token/secret&lt;/code&gt;. I recommend putting them in a text document, as you cannot access them again once they are generated.&lt;br&gt;
Next we will go over creating the application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-the-application-using-python"&gt;
  &lt;/a&gt;
  Creating the Application using Python
&lt;/h3&gt;

&lt;p&gt;We will be creating a Twitter bot that simply tweets &lt;code&gt;Hello world!&lt;/code&gt;&lt;br&gt;
The file structure by the end of this tutorial will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;├───twitterbot
  └───.env             &lt;span class="c"&gt;# File that contains our keys&lt;/span&gt;
  └───main.py          &lt;span class="c"&gt;# Our main application&lt;/span&gt;
  └───requirements.txt &lt;span class="c"&gt;# The packages we will be using&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;To start out, create an empty directory using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo mkdir &lt;/span&gt;twitterbot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And &lt;code&gt;cd&lt;/code&gt; into the directory using:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;twitterbot
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Create two files called &lt;code&gt;main.py&lt;/code&gt; and &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;br&gt;
In requirements.txt, insert the line:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;tweepy==3.10.0
python-dotenv==0.17.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then, to install the required packages, run:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;tweepy&lt;/code&gt; is the library that utilizes the Twitter API, and &lt;code&gt;python-dotenv&lt;/code&gt; is the library that allows environment variables to be utilized in your program.&lt;br&gt;
Second, we will go over where to put the keys/tokens.&lt;br&gt;
Create a file called &lt;code&gt;.env&lt;/code&gt; and paste the following with the keys you generated in the earlier steps:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;consumer_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX        &lt;span class="c"&gt;# Found in the API/Secret section&lt;/span&gt;
&lt;span class="nv"&gt;consumer_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX     &lt;span class="c"&gt;# Found in the API/Secret section&lt;/span&gt;
&lt;span class="nv"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX        &lt;span class="c"&gt;# Found in the Access Token/Secret section&lt;/span&gt;
&lt;span class="nv"&gt;access_token_secret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;XXX &lt;span class="c"&gt;# Found in the Access Token/Secret section&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It is a good practice to utilize environment variables when dealing with sensitive credentials like this. &lt;strong&gt;Never&lt;/strong&gt; put your credentials directly in your code.&lt;br&gt;
Next we will go over how to utilize the credentials in our code. In our &lt;code&gt;main.py&lt;/code&gt; file, add the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tweepy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dotenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;load_dotenv&lt;/span&gt;

&lt;span class="c1"&gt;# Loads the .env file for the credentials
&lt;/span&gt;&lt;span class="n"&gt;load_dotenv&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Credentials set in the .env file
&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'consumer_key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;consumer_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'consumer_secret'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'access_token'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access_token_secret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'access_token_secret'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;We will now implement the &lt;code&gt;tweepy&lt;/code&gt; library to use these credentials and authenticate with Twitter:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;auth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OAuthHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;consumer_key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;consumer_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_access_token&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;access_token_secret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create API object
&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tweepy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;API&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Checks if the credentials entered are correct
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify_credentials&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Authentication: FAILED'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Authentication: OK'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Next, we will implement a function that handles the tweet itself as well as a &lt;code&gt;main&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# If authenticate returns true, execute the following
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;authenticate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="c1"&gt;# Calls the API to tweet the following
&lt;/span&gt;        &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Tweet has been sent!'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# If authenticate returns false, print the following
&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Tweet has not been sent.'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#running-the-application"&gt;
  &lt;/a&gt;
  Running the Application
&lt;/h3&gt;

&lt;p&gt;Now that all of our code has been implemented, you can run the program using &lt;code&gt;python main.py&lt;/code&gt; and you should see the following:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Authentication: OK
Tweet has been sent!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;And you should see that your tweet has been sent:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6xNQFwvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb5quk1cfcucj7g3e1su.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6xNQFwvb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nb5quk1cfcucj7g3e1su.png" alt="tweet"&gt;&lt;/a&gt;&lt;br&gt;
Congratulations! You have successfully created a Twitter bot using Python!&lt;br&gt;
If you need to view the files we created for any reason, check it out on GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ejach"&gt;
        ejach
      &lt;/a&gt; / &lt;a href="https://github.com/ejach/twitterbot"&gt;
        twitterbot
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This is an example Twitter bot that uses the tweepy library. It was written for an article that can be read on dev.to.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
twitterbot&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/5a9af6a2a27b0f9d715af46178094ea9cbac197c057030c802bdbd35f4421bde/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d626c61636b3f7374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f" alt="dev.to"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an example Twitter bot that uses the tweepy library.
It was written for an article that can be read on &lt;a href="https://dev.to/ejach/how-to-make-a-twitter-bot-using-python-2l1k" rel="nofollow"&gt;dev.to&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ejach/twitterbot"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>twitter</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How should you prepare for your first interview as a developer? </title>
      <author>Ankur Tyagi</author>
      <pubDate>Thu, 01 Jul 2021 14:26:26 +0000</pubDate>
      <link>https://dev.to/tyaga001/how-should-you-prepare-for-your-first-interview-as-a-developer-3g79</link>
      <guid>https://dev.to/tyaga001/how-should-you-prepare-for-your-first-interview-as-a-developer-3g79</guid>
      <description>&lt;p&gt;Over the last few years, I’ve mentored over 300+ students and working professionals on how to prepare for interviews to land their dream job. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-my-top-tips-on-how-to-prepare-for-your-first-interview"&gt;
  &lt;/a&gt;
  Here are my top tips on how to prepare for your first interview.
&lt;/h2&gt;

&lt;p&gt;Before your interview, you have to immensely prepare. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before you say a word in your interview, the recruiter will instantly notice if you have done your homework and practiced. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do all of the work upfront so that when you go into the interview, you’ve already won.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do you need to do before your interview?&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-do-your-research"&gt;
  &lt;/a&gt;
  1 - Do your research.
&lt;/h2&gt;

&lt;p&gt;15 - 30 minutes skimming the website is NOT research.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“One of the biggest complaints of hiring managers is that many job interview candidates know very little about the company they’re interviewing for”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-remember-that-no-one-cares-about-you"&gt;
  &lt;/a&gt;
  2- Remember that no one cares about you.
&lt;/h2&gt;

&lt;p&gt;The recruiters have a job to do. &lt;/p&gt;

&lt;p&gt;They need to hire good talent that will positively help the company.&lt;/p&gt;

&lt;p&gt;They will look for below in you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are YOU going to be a good team player?&lt;/li&gt;
&lt;li&gt;Are YOU going to exceed at your position?&lt;/li&gt;
&lt;li&gt;Are YOU going to be the right fit for the company?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This mentality isn’t evil, it’s just life.&lt;/p&gt;

&lt;p&gt;But now you know the rules, let’s learn how to play the game.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-make-the-interview-a-conversation"&gt;
  &lt;/a&gt;
  3- Make the interview a conversation.
&lt;/h2&gt;

&lt;p&gt;"The biggest lesson I’ve learned" in my career. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;People do business with people they love, trust, and respect.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If they have the vibe that you are not trustworthy or that you’re not easy to work with,&lt;/p&gt;

&lt;p&gt;THEY WILL NOT HIRE YOU.&lt;/p&gt;

&lt;p&gt;End of story.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-time-for-the-show-now-interview-conversation"&gt;
  &lt;/a&gt;
  4- Time for the show now (Interview conversation)
&lt;/h2&gt;

&lt;p&gt;Real winners PLAN things out before they start.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To start acing interviews, write down 5 focus points in your life that you want to highlight about yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It could be your past work experience, volunteer work.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-learn-about-the-interviewer"&gt;
  &lt;/a&gt;
  5- Learn about the interviewer
&lt;/h2&gt;

&lt;p&gt;Read your email carefully which HR shared with you, you’ll be told the names of the people who’ll be on the interview panel.&lt;/p&gt;

&lt;p&gt;Google them and find their Twitter/LinkedIn account and search if they’ve published any pages or articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-remember-to-breath"&gt;
  &lt;/a&gt;
  6- Remember to breath
&lt;/h2&gt;

&lt;p&gt;When I first started interviewing, I would get super nervous. &lt;/p&gt;

&lt;p&gt;I was so afraid of failing and it reflected in my interviews. &lt;/p&gt;

&lt;p&gt;I would speak really quickly and often rush to answer the question.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here’s a secret I wish someone told me when I first started out&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You don’t always have to answer right away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Slow down, take a breath &amp;amp; really spend time being thoughtful about your answer to the question. &lt;br&gt;
And even if you don’t know the answer, remember that it’s okay to say No.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-i-dont-know"&gt;
  &lt;/a&gt;
  7- I don’t know
&lt;/h2&gt;

&lt;p&gt;Be prepared to say it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don’t know the answer, don’t pretend as you do.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;People will often read right through it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-know-your-own-resume"&gt;
  &lt;/a&gt;
  8- Know your own resume?
&lt;/h2&gt;

&lt;p&gt;Again, so obvious. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Yet folks come into an interview not having looked at their resume in a while. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I've had people have to think a bit when I ask them about something right there on the resume they sent me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Please give yourself some time to look at it before you arrive at the interview. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should also review it carefully when preparing stories to help you answer interview questions.&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;"Don't miss out" Follow your mentor  on Twitter 👉 &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;TheAnkurTyagi&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you would like to discuss about your career growth issues in detail with me 1-1, you can hire me on HireTheAuthor.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.hiretheauthor.com/theankurtyagi"&gt;Book 1-1 Call or Chat Subscription &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You can buy me a beer if you feel generous. Happy coding!!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/ankurtyagi"&gt;BUY Me a Beer.&lt;/a&gt; &lt;/p&gt;

</description>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>career</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hand Wave Animation Using HTML &amp; CSS</title>
      <author>Nikhil Bobade </author>
      <pubDate>Thu, 01 Jul 2021 14:13:51 +0000</pubDate>
      <link>https://dev.to/nikhil27b/hand-wave-animation-using-html-css-3klh</link>
      <guid>https://dev.to/nikhil27b/hand-wave-animation-using-html-css-3klh</guid>
      <description>&lt;p&gt;Hello Guys,&lt;/p&gt;

&lt;p&gt;Today I created an Amazing Hand Wave Animation. In this animation, I am using only HTML CSS to create animation.&lt;/p&gt;

&lt;p&gt;In this html I am using &lt;code&gt;a&lt;/code&gt; tag &amp;amp; &lt;code&gt;span&lt;/code&gt; tag and in the simple css to wave the hand emoji I'm use &lt;code&gt;transform: rotate&lt;/code&gt; so please checkout this post. I hope you find this useful like and save this post also comments about your thoughts and new ideas for a topic. For more content follow me on Instagram &lt;a href="https://www.instagram.com/developer_nikhil27/"&gt;@developer_nikhil27&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/NikhilBobade/embed/qBmdayV?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;div class="instagram-position"&gt;
  &lt;iframe id="instagram-liquid-tag" src="https://www.instagram.com/p/CQTooauBwo2/embed/captioned"&gt;
  &lt;/iframe&gt;
  
&lt;/div&gt;


</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Five JS Libraries to Help you Build a Standout Personal Website</title>
      <author>Saji Wang</author>
      <pubDate>Thu, 01 Jul 2021 14:05:30 +0000</pubDate>
      <link>https://dev.to/codesphere/five-js-libraries-to-help-you-build-a-standout-personal-website-44ef</link>
      <guid>https://dev.to/codesphere/five-js-libraries-to-help-you-build-a-standout-personal-website-44ef</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;For web developers, personal websites can be a great way to stand out among the crowd. More than just serving as a way to host your resume and portfolio, the website itself can convey a lot about your creativity, ability to code, and design skills.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#here-are-five-libraries-that-can-help-your-personal-website-stand-out"&gt;
  &lt;/a&gt;
  Here are five libraries that can help your personal website stand out:
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#1-bootstrap"&gt;
  &lt;/a&gt;
  1. Bootstrap
&lt;/h3&gt;

&lt;p&gt;For web developers, a poorly designed personal website can do more harm than good. That's why it's helpful to use a design framework like Bootstrap to help make your website both responsive and aesthetically pleasing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://getbootstrap.com/"&gt;https://getbootstrap.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you haven't worked with Bootstrap before, it is essentially a library full of CSS and Javascript-based templates, components, and design tools. It can save you a lot of time, especially when it comes to making your website responsive.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-emailjs"&gt;
  &lt;/a&gt;
  2. EmailJS
&lt;/h3&gt;

&lt;p&gt;If you're looking to create a great contact form without too much backend work, look no further than EmailJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.emailjs.com/"&gt;https://www.emailjs.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;EmailJS is a super-intuitive tool for sending emails securely with vanilla Javascript. In addition, if all you are looking to do is set up a contact form, their free tier will be more than sufficient for your needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-threejs"&gt;
  &lt;/a&gt;
  3. ThreeJS
&lt;/h3&gt;

&lt;p&gt;If you're a front-end developer and are up for the challenge, ThreeJS allows you to build and render beautiful 3D graphics with Javascript. When done well, this can make your personal website really stand out to hiring managers. Check out these personal websites that leveraged ThreeJS to make themselves more memorable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://richardmattka.com/"&gt;https://richardmattka.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bruno-simon.com/"&gt;https://bruno-simon.com/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tkmh.me/"&gt;https://tkmh.me/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-seo-improvement-libraries"&gt;
  &lt;/a&gt;
  4. SEO Improvement libraries
&lt;/h3&gt;

&lt;p&gt;Ideally, you want your website to be a top result in google search rankings. A common problem that people face is that the web framework that they are using (such as create-react-app) doesn't prerender the site's content and therefore has trouble being crawled by Google's Web Crawlers. While Google's bots have gotten better over the years, this can still harm your SEO.&lt;/p&gt;

&lt;p&gt;While the James Smiths of the dev world might need to throw in the towel, there are plenty of great tools that can improve your website's SEO to ensure you're on the front page. Libraries like NextJS for React and NuxtJS for Vue use Server-Side Rendering(SSR) to increase performance for web crawlers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-sanityio%E2%80%8A%E2%80%8Aheadless%C2%A0cms"&gt;
  &lt;/a&gt;
  5. SanityIO - Headless CMS
&lt;/h3&gt;

&lt;p&gt;If you have content that is frequently being edited or replicated, it may be helpful to have a CMS so you do not have to constantly dive into HTML and CSS to format content. SanityIO is a personal favorite, but there are countless headless CMS's on the market.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sanity.io/"&gt;https://www.sanity.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With a CMS, updating resumes, portfolios, and blogs can be seamless.&lt;/p&gt;




&lt;p&gt;What did we leave off the list? If you're proud of your personal website, drop the URL down below.&lt;br&gt;
Happy coding from your friends at &lt;a href="https://link.codesphere.com/AS"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How to create a chat similar to Discord with TalkJS</title>
      <author>Andrew</author>
      <pubDate>Thu, 01 Jul 2021 13:54:56 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-create-a-chat-like-discord-with-talkjs-4660</link>
      <guid>https://dev.to/talkjs/how-to-create-a-chat-like-discord-with-talkjs-4660</guid>
      <description>&lt;p&gt;In this article, we’ll look at how we can use the &lt;a href="https://talkjs.com/"&gt;TalkJS chat API&lt;/a&gt; and &lt;a href="https://talkjs.com/resources/announcing-themesv2/"&gt;TalkJS Themes&lt;/a&gt; to mimic the appearance and functionality of Discord. Themes allow you to change the look and feel of user interfaces to match your site or app's particular style. Let’s set up our project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-our-project"&gt;
  &lt;/a&gt;
  Setting up our project
&lt;/h2&gt;

&lt;p&gt;There are a few steps we need to complete before we can start playing using themes. We need to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a simple conversation&lt;/li&gt;
&lt;li&gt;Create a role&lt;/li&gt;
&lt;li&gt;Create a theme for that role and activating that theme.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-simple-conversation"&gt;
  &lt;/a&gt;
  Creating a simple conversation
&lt;/h3&gt;

&lt;p&gt;First of all, we’ll set up a simple conversation. Follow this &lt;a href="https://talkjs.com/dashboard/tG5nSzBD/docs/Getting_Started/index.html"&gt;Getting Started guide&lt;/a&gt;. However, You will also need to change the role of &lt;strong&gt;both&lt;/strong&gt; users from “default” to “discord”. Your end result will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const me = new Talk.User({
    id: "123456",
    name: "Alice",
    email: "alice@example.com",
    photoUrl: "https://demo.talkjs.com/img/alice.jpg",
    welcomeMessage: "Hey there! How are you? :-)",
    role: "discord"
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Add some more users so we can have a realistic conversation. You will want to update the photoUrl of each user to an actual image address. You can find the free images &lt;a href="https://www.pexels.com/search/faces/?size=small"&gt;here&lt;/a&gt; to act as the profile pictures of your users. &lt;/p&gt;

&lt;p&gt;Another feature we should add is a group chat. Follow this &lt;a href="https://talkjs.com/docs/Features/Group_Chats/index.html"&gt;documentation&lt;/a&gt; to set up your group chat.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-our-role"&gt;
  &lt;/a&gt;
  Creating our role
&lt;/h3&gt;

&lt;p&gt;Now we need to create this role in our &lt;a href="https://talkjs.com/dashboard"&gt;dashboard&lt;/a&gt;. In the header of the dashboard click &lt;strong&gt;Roles&lt;/strong&gt; and add a role called “discord”: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kfbHkbZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0u4sw5ab4h8wwpn1hi6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfbHkbZS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0u4sw5ab4h8wwpn1hi6.PNG" alt="Create Role Button screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#activating-a-theme"&gt;
  &lt;/a&gt;
  Activating a theme
&lt;/h3&gt;

&lt;p&gt;Which theme is used when displaying the TalkJS UI depends on the current user's &lt;a href="https://talkjs.com/docs/Reference/Concepts/Roles.html"&gt;role&lt;/a&gt;. When a user has no role set, the TalkJS default theme will be used.&lt;/p&gt;

&lt;p&gt;To configure a theme for a role, &lt;a href="https://talkjs.com/dashboard"&gt;go to the dashboard&lt;/a&gt;, and click &lt;strong&gt;Roles&lt;/strong&gt;. Then, create or select a role, and scroll down to the "UI Theme" section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oQQJ6Tm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0b37cacz71hepqp7hut.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oQQJ6Tm6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p0b37cacz71hepqp7hut.PNG" alt="UI Theme section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, navigate to the &lt;a href="https://talkjs.com/dashboard/tG5nSzBD/themes"&gt;Theme Editor&lt;/a&gt; and click the &lt;strong&gt;Create new theme&lt;/strong&gt; button:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTwyGgKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0onn203fbn385iujs7ul.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTwyGgKE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0onn203fbn385iujs7ul.PNG" alt="Create new theme button screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create a theme named “discord”. To make this theme active, &lt;a href="https://talkjs.com/dashboard"&gt;go to the dashboard&lt;/a&gt;, and click &lt;strong&gt;Roles&lt;/strong&gt;. Then, create or select a role, and scroll down to the "UI Theme" section, and select your new theme.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GB_b6_p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxsm322mlm6ux0vwn9om.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GB_b6_p9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxsm322mlm6ux0vwn9om.PNG" alt="Selecting your theme image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Run your program to ensure it works. After all of this work you should have a chat resembling  the screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8nKUftKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq0ur6bennqqtp9ucv5t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8nKUftKC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dq0ur6bennqqtp9ucv5t.png" alt="Inbox conversation image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are now ready to start customizing our theme!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#make-a-chat-like-discord-using-talkjs-themes"&gt;
  &lt;/a&gt;
  Make a chat like Discord using TalkJS themes
&lt;/h2&gt;

&lt;p&gt;For those unfamiliar with Discord, it is a popular chatting application like Skype or Telegram. A chat in Discord looks like the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXZw6USi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jqs2soaargolewqpxgr.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXZw6USi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9jqs2soaargolewqpxgr.jpg" alt="Screenshot of Discord"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using themes to make our existing TalkJS chat look like this. Let’s get started!&lt;/p&gt;

&lt;p&gt;First, go to the &lt;a href="https://talkjs.com/dashboard/tG5nSzBD/themes"&gt;Theme Editor&lt;/a&gt; and make sure you have our new “discord” theme selected.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YRc0YGRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebej3xngsc8gqz4e6mnr.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YRc0YGRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ebej3xngsc8gqz4e6mnr.PNG" alt="Image showing discord theme selected"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-fonts"&gt;
  &lt;/a&gt;
  Changing the fonts
&lt;/h3&gt;

&lt;p&gt;We will make our first set of changes in the layout section. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--no_qPPKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyeswfsx8ctyacyil04m.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--no_qPPKn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iyeswfsx8ctyacyil04m.PNG" alt="Screenshot of layout section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on Global under Layout Settings and make the following changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the value of &lt;strong&gt;webFontUrl&lt;/strong&gt; from &lt;a href="https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i&amp;amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese"&gt;https://fonts.googleapis.com/css?family=Open+Sans:400,400i,700,700i&amp;amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese&lt;/a&gt; to &lt;a href="https://fonts.googleapis.com/css?family=Uni+Sans:400,400i,700,700i&amp;amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese"&gt;https://fonts.googleapis.com/css?family=Uni+Sans:400,400i,700,700i&amp;amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;Change the value of &lt;strong&gt;fontFamily&lt;/strong&gt; from &lt;em&gt;"Open Sans", "Helvetica", sans-serif&lt;/em&gt; to &lt;em&gt;"Uni Sans", "Helvetica", sans-serif.&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Change the &lt;strong&gt;color&lt;/strong&gt; from &lt;em&gt;#111&lt;/em&gt; (black) to &lt;em&gt;#fcfcfc&lt;/em&gt; (a grey-ish white).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ve updated the font to the exact font used by discord. You should now have the following values for the Global section:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--27Qpf9SA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21p0g910b249jd6d6xoi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--27Qpf9SA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/21p0g910b249jd6d6xoi.PNG" alt="Image of global settings section"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s see what our app looks like now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pg3RTvX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7ddb96e2cngblu9rucq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pg3RTvX0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7ddb96e2cngblu9rucq.PNG" alt="Image showing chat inbox after settings change"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve made it look worse! Don’t worry we’ll fix this with the next set of changes. Discord is known for its dark theme, and use of purple and grey colors. Let’s update our theme to feature these darker colors. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-panel-colors"&gt;
  &lt;/a&gt;
  Changing Panel colors
&lt;/h3&gt;

&lt;p&gt;In the Panels section of Layout Settings, update the value of &lt;strong&gt;backgroundColor&lt;/strong&gt; to &lt;em&gt;#3d4454&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HzQA5iJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ed2ujwm7857xujtnxwi0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HzQA5iJK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ed2ujwm7857xujtnxwi0.PNG" alt="Image showing panels settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Discord, the panel header is the same color as the panel itself, separated by a black border.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5DxYpr-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgo769xghcivn48753bp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DxYpr-G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgo769xghcivn48753bp.PNG" alt="Example image of discord panel"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will replicate this. In the Panel headers section of Layout Settings, make the following changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the value of &lt;strong&gt;backgroundColor&lt;/strong&gt; from &lt;em&gt;#e7ecee&lt;/em&gt; to &lt;em&gt;#3d4454&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Change the value of &lt;strong&gt;borderBottomColor&lt;/strong&gt; from &lt;em&gt;transparent&lt;/em&gt; to &lt;em&gt;black&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll make similar changes to the Panel footer. In the Panel footers section of Layout Settings, change the value of &lt;strong&gt;backgroundColor&lt;/strong&gt; from &lt;em&gt;#e7ecee&lt;/em&gt; to &lt;em&gt;#3d4454&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7vadRtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijun22366si11dwvotgi.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7vadRtW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ijun22366si11dwvotgi.PNG" alt="Image showing panel header and footer settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s see the effect of these changes by launching our application again:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jodWJT0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h40gwv3r9x287tdxhb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jodWJT0N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9h40gwv3r9x287tdxhb8.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, that looks much better! However, there are still some things we need to address. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The chat header is still the wrong color. We’ve changed the Panel header but not the chat header, we need to change the chat header component.&lt;/li&gt;
&lt;li&gt;The message bubbles are not needed at all, Discord does not have these.&lt;/li&gt;
&lt;li&gt;The input box (showing the prompt &lt;em&gt;Say something&lt;/em&gt;) should be a light grey, not white.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s start making these improvements!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-chatheader-component-in-talkjs"&gt;
  &lt;/a&gt;
  Changing the ChatHeader component in TalkJS
&lt;/h3&gt;

&lt;p&gt;Under the Top-level Components section, click on ChatHeader. This will open the CSS for this component. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OuKG9HQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu8l9oc6285tr79gdj5c.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OuKG9HQC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu8l9oc6285tr79gdj5c.PNG" alt="Image showing top level components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Change the value of &lt;code&gt;background-color&lt;/code&gt; to &lt;em&gt;#3d4454&lt;/em&gt;. The final code should look like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.header {
  display: flex;
  align-items: center;
  height: 4.5rem;
  background-color: #3d4454;
  flex-shrink: 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Refresh the page to see our new and improved chat header:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZ7-3e0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipa328q5ty6gimh4yte7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZ7-3e0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ipa328q5ty6gimh4yte7.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, that looks much better! Next up, removing the message “bubbles” that appear. The CSS distinguishes between messages sent by the other user, and messages sent by “me”. We will have to make changes in both places to successfully format our chat to be like discord. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-the-chat-bubbles-in-talkjs"&gt;
  &lt;/a&gt;
  Removing the chat bubbles in TalkJS
&lt;/h3&gt;

&lt;p&gt;The properties of the messages are handled by the UserMessage component. Under the Top-level Components section, click on UserMessage. This will open the CSS for this component. Navigate to the .message class and make the following changes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Delete &lt;code&gt;border-style: solid;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Delete &lt;code&gt;border-color: #E7ECEE;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Delete &lt;code&gt;background-color: #E7ECEE;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;  Change color from &lt;code&gt;color: #111;&lt;/code&gt; to &lt;code&gt;color: #fff;&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After making these changes your final code should look like the following snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.message {
    white-space: normal;
    overflow: hidden;
    border-radius: 1.5rem;
    border-width: 1px;
    word-wrap: break-word;
    position: relative;
    display: inline-block;
    max-width: calc(100% - 6rem - 0.25rem - 0.25rem);
    color: #fff;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s see the effect this has on our chat:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tI-_wsoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0srz98m22h48ulswqiyr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tI-_wsoq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0srz98m22h48ulswqiyr.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fantastic! This is what we wanted. However, you can see the bubble still appears for the messages that we send. The message also appears on the other side of the chat. Discord displays all messages on the left side of the chat, so we need to change this. Let’s make these changes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To make all messages appear on the left side of the chat, open the UserMessage component and find the class &lt;code&gt;.message-row.by-me&lt;/code&gt;. Remove the line &lt;code&gt;flex-direction: row-reverse;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In the UserMessage component, find the class &lt;code&gt;.by-me .message&lt;/code&gt;. Delete &lt;code&gt;border-color&lt;/code&gt; and &lt;code&gt;background-color&lt;/code&gt;. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Open our application again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qkf3tOrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwt0zscb31dyn1tslcz1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qkf3tOrM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nwt0zscb31dyn1tslcz1.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s more like it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#changing-the-text-input-box-in-talkjs"&gt;
  &lt;/a&gt;
  Changing the text input box in TalkJS
&lt;/h3&gt;

&lt;p&gt;The next change concerns the input box (showing the prompt &lt;em&gt;Say something&lt;/em&gt;) should be grey, not white. To change this, select layout in the left pane and click on the Message field dropdown. Change the &lt;strong&gt;backgroundColor&lt;/strong&gt; and &lt;strong&gt;borderColor&lt;/strong&gt; to &lt;em&gt;#81858f&lt;/em&gt;. Change the &lt;strong&gt;color&lt;/strong&gt; to &lt;em&gt;#fcfcfc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8lnCciNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j47dkrqc4wlpvxiq1gp5.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8lnCciNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j47dkrqc4wlpvxiq1gp5.PNG" alt="Image showing Message settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s launch the application again, and see our new input box:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ReduYh9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuprk3z3lagylpim7lbn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReduYh9j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cuprk3z3lagylpim7lbn.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great, this is what we wanted! The only change that remains is the selected conversation being that bright blue. On Discord, grey is used to show the selected conversation. Let’s make this change now.&lt;/p&gt;

&lt;p&gt;We can change the color of selected conversations by clicking on layouts in the left pane and choosing the Highlights dropdown. Change the &lt;strong&gt;backgroundColor&lt;/strong&gt; from &lt;em&gt;#1E60E1&lt;/em&gt; to &lt;em&gt;#81858f&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ryS7sAgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04yg1moy7eb7swtlihfy.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ryS7sAgL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04yg1moy7eb7swtlihfy.PNG" alt="Image showing Highlights dropdown settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s view the effect of these changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2JPwPb5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhxk717alychma9qrwj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JPwPb5i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhxk717alychma9qrwj.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So far our chat inbox has been small, taking up only a portion of the screen. What if we wanted to make it bigger, and have it act as a full-screen application?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#making-the-talkjs-chat-inbox-bigger"&gt;
  &lt;/a&gt;
  Making the TalkJS chat inbox bigger
&lt;/h3&gt;

&lt;p&gt;The first thing that influences the size of the chat inbox is the div you instantiated to act as the container for the inbox. For example, when following the guide we used the following div:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- container element in which TalkJS will display a chat UI --&amp;gt;
    &amp;lt;div id="talkjs-container" style="width: 90%; margin: 30px; height: 500px"&amp;gt;
        &amp;lt;i&amp;gt;Loading chat...&amp;lt;/i&amp;gt;
    &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we’ve set the width and height here. Change this code to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div id="talkjs-container" style="width: 100%; height: 100%"&amp;gt;
        &amp;lt;i&amp;gt;Loading chat...&amp;lt;/i&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our height and width will no longer be restricted. &lt;/p&gt;

&lt;p&gt;Go back to our Theme Editor. Click on ‘layout’ in the left pane. We are concerned with two dropdowns under the Layout Settings:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Inbox feed panel - This is the panel on the left side that shows our conversations.&lt;/li&gt;
&lt;li&gt;  Inbox chat panel - This is the panel on the right side where we read and write to our conversations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Customize these heights as you see fit. For this example, I changed the &lt;strong&gt;maxWidth&lt;/strong&gt; of the Inbox chat panel from 420px to 1680px. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lvva9OPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7yp5br5iu1qp1kk3lyg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lvva9OPp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r7yp5br5iu1qp1kk3lyg.png" alt="Image showing inbox chat panel settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Relaunch the application to view the effect of this change:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eB9MxVCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub405b6h3qffsqcz7v52.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eB9MxVCd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ub405b6h3qffsqcz7v52.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fantastic, it’s even closer to Discord! You can continue to remove margins and make panels even wider if you want the application to take up more of the screen.&lt;/p&gt;

&lt;p&gt;Another feature of Discord is how it always displays the usernames in the conversation. The default for TalkJS is to only show the user names of other people in group chats. Let’s update this user name setting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-always-show-user-names-in-a-talkjs-chat"&gt;
  &lt;/a&gt;
  How to always show user names in a TalkJS chat
&lt;/h3&gt;

&lt;p&gt;To have the usernames constantly showing in a TalkJS chat, click on the UserMessage component under the Top-level Components heading in the left pane. &lt;/p&gt;

&lt;p&gt;Find the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div t:if="{{ sender.isMe == false and conversation.others.length &amp;gt; 1 }}"
                 class="message-author"
                 style="color: {{ sender.id | random_color }}"&amp;gt;
                {{ sender.name }}
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see the conditions being checked, the default being to only show the usernames of other people in group chats. Change this by updating the code to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div t:if="{{ conversation.others.length &amp;gt; 0 }}"
                 class="message-author"
                 style="color: {{ sender.id | random_color }}"&amp;gt;
                {{ sender.name }}
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The new condition will show a username as long as there is a single user in a conversation. It doesn’t matter if it is a group chat or not.&lt;/p&gt;

&lt;p&gt;Let’s see the effect of this code change on our application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QHqOyRCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r4lwouqhgovl9bhszwz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QHqOyRCA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4r4lwouqhgovl9bhszwz.png" alt="Image showing chat inbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our usernames are always on display, in both 1-on-1 conversations and group chats. This is exactly what we wanted!&lt;/p&gt;

&lt;p&gt;There we have it, our final result! We will make no further changes in this post. We have gotten very close to the appearance and functionality of Discord by making some very simple changes to our existing theme. You can see the flexibility of themes and how they can be quickly configured to fit your needs. &lt;/p&gt;

</description>
      <category>chat</category>
      <category>api</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Git Merge vs Rebase</title>
      <author>Cihat Gündüz</author>
      <pubDate>Thu, 01 Jul 2021 13:22:23 +0000</pubDate>
      <link>https://dev.to/jeehut/git-merge-vs-rebase-5afh</link>
      <guid>https://dev.to/jeehut/git-merge-vs-rebase-5afh</guid>
      <description>&lt;p&gt;&lt;strong&gt;An FAQ that explains and answers when to use which and why.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There's a common discussion among developers about how teams should use &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; to make sure everyone is always up-to-date with the latest changes in the &lt;code&gt;main&lt;/code&gt; branch. The typical situation this question arises is when someone worked on a new branch and then once the work is done and ready to be merged, the main branch had changes in the meantime in a way that the work branch is outdated and now has &lt;strong&gt;merge conflicts&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, they need to be resolved before the work branch can be merged. But the question is: &lt;em&gt;How&lt;/em&gt; should this situation be resolved? Should we &lt;em&gt;&lt;strong&gt;merge&lt;/strong&gt;&lt;/em&gt; the &lt;code&gt;main&lt;/code&gt; branch into the work branch? Or should we &lt;em&gt;&lt;strong&gt;rebase&lt;/strong&gt;&lt;/em&gt; the work branch onto the latest &lt;code&gt;main&lt;/code&gt; branch?&lt;/p&gt;

&lt;p&gt;In my opinion, there's only one correct answer to this question. From my experience, the main reason why so many discussions arise around this topic is that there's a lot of misunderstandings out there about how &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt; differ from each other in this context and a general lack of understanding, what a &lt;code&gt;rebase&lt;/code&gt; even is.&lt;/p&gt;

&lt;p&gt;So I created an FAQ for my team which tries to clarify things. Let me share:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-raw-merge-endraw-"&gt;
  &lt;/a&gt;
  What is a &lt;code&gt;merge&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;A commit, that combines all changes of a different branch into the current.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-raw-rebase-endraw-"&gt;
  &lt;/a&gt;
  What is a &lt;code&gt;rebase&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;Re-comitting all commits of the current branch onto a different base commit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-the-main-differences-between-raw-merge-endraw-and-raw-rebase-endraw-"&gt;
  &lt;/a&gt;
  What are the main differences between &lt;code&gt;merge&lt;/code&gt; and &lt;code&gt;rebase&lt;/code&gt;?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;merge&lt;/code&gt; executes only &lt;strong&gt;one&lt;/strong&gt; new commit. &lt;code&gt;rebase&lt;/code&gt; typically executes &lt;strong&gt;multiple&lt;/strong&gt; (number of commits in current branch).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;merge&lt;/code&gt; produces a &lt;strong&gt;new&lt;/strong&gt; generated commit (the so called merge-commit). &lt;code&gt;rebase&lt;/code&gt; only moves &lt;strong&gt;existing&lt;/strong&gt; commits.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#in-which-situations-should-we-use-a-raw-merge-endraw-"&gt;
  &lt;/a&gt;
  In which situations should we use a &lt;code&gt;merge&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;merge&lt;/code&gt; whenever you want to add changes of a branched out branch &lt;strong&gt;back&lt;/strong&gt; into the base branch.&lt;/p&gt;

&lt;p&gt;Typically, you do this by clicking the "Merge" button on Pull/Merge Requests, e.g. on GitHub.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#in-which-situations-should-we-use-a-raw-rebase-endraw-"&gt;
  &lt;/a&gt;
  In which situations should we use a &lt;code&gt;rebase&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;Use &lt;code&gt;rebase&lt;/code&gt; whenever you want to add &lt;strong&gt;changes of a base branch&lt;/strong&gt; back to a branched out branch.&lt;/p&gt;

&lt;p&gt;Typically, you do this in &lt;code&gt;work&lt;/code&gt; branches whenever there's a change in the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-not-use-raw-merge-endraw-to-merge-changes-from-the-base-branch-into-a-work-branch"&gt;
  &lt;/a&gt;
  Why not use &lt;code&gt;merge&lt;/code&gt; to merge changes from the base branch into a work branch?
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The git history will include many &lt;strong&gt;unnecessary merge commits&lt;/strong&gt;. If multiple merges were needed in a work branch, then the work branch might even hold more merge commits than actual commits!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This creates a loop which &lt;strong&gt;destroys the mental model that Git was designed by&lt;/strong&gt; which causes troubles in any visualization of the Git history.&lt;/p&gt;

&lt;p&gt;Imagine there's a river (e.g. the "Nile"). Water is flowing in one direction (direction of time in Git history). Now and then, imagine there's a branch to that river and suppose most of those branches merge back into the river. That's what the flow of a river might look like naturally. It makes sense.&lt;/p&gt;

&lt;p&gt;But then imagine there's a small branch of that river. Then, for some reason, &lt;strong&gt;the river merges into the branch&lt;/strong&gt; and the branch continues from there. The river has now technically disappeared, it's now in the branch. But then, somehow magically, that branch is merged back into the river. Which river you ask? I don't know. The river should actually be in the branch now, but somehow it still continues to exist and I can merge the branch back into the river. So, the river is in the river. Kind of doesn't make sense.&lt;/p&gt;

&lt;p&gt;This is exactly what happens when you &lt;code&gt;merge&lt;/code&gt; the base branch into a &lt;code&gt;work&lt;/code&gt; branch and then when the &lt;code&gt;work&lt;/code&gt; branch is done, you merge that back into the base branch again. The mental model is broken. And because of that, you end up with a branch visualization that's not very helpful.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#example-git-history-when-using-raw-merge-endraw-"&gt;
  &lt;/a&gt;
  Example Git History when using &lt;code&gt;merge&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.stack.imgur.com/Oqqmm.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ilJ2xCcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/Oqqmm.png" alt="Example Git History when using  raw `merge` endraw "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note the many commits starting with &lt;code&gt;Merge branch 'main' into ...&lt;/code&gt; (marked with yellow boxes). They don't even exist if you rebase (there, you will only have pull request merge commits). Also note the many visual branch merge loops (&lt;code&gt;main&lt;/code&gt; into &lt;code&gt;work&lt;/code&gt; into &lt;code&gt;main&lt;/code&gt;).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-git-history-when-using-raw-rebase-endraw-"&gt;
  &lt;/a&gt;
  Example Git History when using &lt;code&gt;rebase&lt;/code&gt;:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://i.stack.imgur.com/0ZVla.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bv2tXqbc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.stack.imgur.com/0ZVla.png" alt="Example Git History when using  raw `rebase` endraw "&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Much cleaner Git history with much less merge commits and no cluttered visual branch merge loops whatsoever.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-there-any-downsides-pitfalls-with-raw-rebase-endraw-"&gt;
  &lt;/a&gt;
  Are there any downsides / pitfalls with &lt;code&gt;rebase&lt;/code&gt;?
&lt;/h3&gt;

&lt;p&gt;Yes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Because a &lt;code&gt;rebase&lt;/code&gt; moves commits (technically re-executes them), the commit date of all moved commits will be the time of the rebase and the &lt;strong&gt;git history loses the initial commit time&lt;/strong&gt;. So, if the exact date of a commit is needed for some reason, then &lt;code&gt;merge&lt;/code&gt; is the better option. But typically, a clean git history is much more useful than exact commit dates.&lt;/li&gt;
&lt;li&gt;If the rebased branch has multiple commits that change the same line and that line was also changed in the base branch, you might need to solve merge conflicts for that same line multiple times, which you never need to do when merging. So, on average, there's more merge conflicts to solve.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#tips-to-reduce-merge-conflicts-when-using-raw-rebase-endraw-"&gt;
  &lt;/a&gt;
  Tips to reduce merge conflicts when using &lt;code&gt;rebase&lt;/code&gt;:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Rebase often&lt;/strong&gt;. I typically recommend doing it at least once a day.&lt;/li&gt;
&lt;li&gt;Try to &lt;strong&gt;squash changes&lt;/strong&gt; on the same line into one commit as much as possible.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this FAQ helps some teams out there. Like ❤️ it if you liked it! 😉&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was written &lt;strong&gt;by &lt;a href="https://twitter.com/Jeehut"&gt;Cihat Gündüz&lt;/a&gt;&lt;/strong&gt;,&lt;br&gt;
Head of Mobile at &lt;strong&gt;&lt;a href="https://www.papershift.com/"&gt;Papershift&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>git</category>
      <category>merge</category>
      <category>rebase</category>
      <category>beginners</category>
    </item>
    <item>
      <title>WebRTC ➕ Build Yet another Chatting app💭 but P2P/E2EE🤯.!!</title>
      <author>Kushagra Mehta</author>
      <pubDate>Thu, 01 Jul 2021 13:21:50 +0000</pubDate>
      <link>https://dev.to/kushagra_mehta/webrtc-build-yet-another-chatting-app-but-p2p-e2ee-1l7j</link>
      <guid>https://dev.to/kushagra_mehta/webrtc-build-yet-another-chatting-app-but-p2p-e2ee-1l7j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-does-this-title-mean"&gt;
  &lt;/a&gt;
  What does this title mean
&lt;/h1&gt;

&lt;p&gt;If by reading the title of this article you're thinking that we're going to build just a chatting app then you're thinking wrong, no we're not😅. Hey-Hey.!!! We all have built some kind of chat app in our free time then why to built one more again. So before you leave, let me explain why We're not going to create just a chatting app and why it is different from what you have built in the past as it does not use any REST API, not even a well-known WebSocket. we're going to build something much better faster, which is End-To-End encrypted, don't need any server And its code is short to write(Size matters, and sometimes it should be small).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#some-thought-behind-why-im-writing-this-article"&gt;
  &lt;/a&gt;
  Some thought behind Why I'm writing this article
&lt;/h2&gt;

&lt;p&gt;So when I start searching about how to create any Real-time communication between two peers I didn't get many results. Everything was just hard to understand and not much help for a beginner. While searching one word was coming, again and again, it was WebRTC. So I want to understand what it is and how it works.&lt;/p&gt;

&lt;p&gt;The first thing I found out about it is that it is really hard to find good content over WebRTC and second misconception. I'm just focusing on the second one in this article. Most of us when start learning WebRTC think it is just related to Video/Audio streaming and it is only restricted to client-client connection because it is only present in the browser. But WebRTC is much more than Video/Audio it is something much greater and much dynamic. It is built over some great legendary protocols.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#webrtc-101"&gt;
  &lt;/a&gt;
  WebRTC 101
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Just for a quick note I'm not going in depth how WebRTC work. If you're interested you can read &lt;a href="https://webrtcforthecurious.com/"&gt;WebRTC For The Curious&lt;/a&gt; book.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;WebRTC, short for Web Real-Time Communication, is both an API and a Protocol. The WebRTC API allows developers to use the WebRTC protocol. With WebRTC, you can add real-time communication capabilities to your application. The WebRTC API has been specified only for JavaScript defined by &lt;a href="https://www.w3.org/TR/webrtc/"&gt;W3C&lt;/a&gt; and Protocol defined By &lt;a href="https://datatracker.ietf.org/wg/rtcweb/documents/"&gt;IETF&lt;/a&gt;. It is just a bundle of different protocols. It is not just limited to Video/Audio it is much greater than that, you can also send text, binary or generic data. To increase your curiosity &lt;a href="https://webrtc.ventures/2021/02/webrtc-cloud-gaming-unboxing-stadia/"&gt;Cloud gaming is going to be build around WebRTC&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-feature-provided-by-webrtc"&gt;
  &lt;/a&gt;
  Some feature provided by WebRTC
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;By default Feature E2EE.&lt;/li&gt;
&lt;li&gt;Connect two users with no public IP (NAT traversal, ICE).&lt;/li&gt;
&lt;li&gt;Stay connected on Move(Auto-negotiation by ICE Restart).&lt;/li&gt;
&lt;li&gt;Connect without knowing IP(mDNS).&lt;/li&gt;
&lt;li&gt;No more headline blocking(By SCTP).&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;You can understand WebRTC Lingo by clicking &lt;a href="https://bits.ashleyblewer.com/blog/2021/06/03/webrtc-common-lingo/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#lets-understand-how-webrtc-do-all-these-magics"&gt;
  &lt;/a&gt;
  Let's understand how WebRTC do all these magics.
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt; &lt;strong&gt;Signaling Offer/Answer&lt;/strong&gt; :- So let's understand this by an eg. I don't know you &amp;amp; you don't know me. We have no idea about each other than how we're going to communicate with and what they are going to communicate about. So by &lt;em&gt;Signaling&lt;/em&gt; we explain to each other, Hey man this is my address(NAT mapping) and this is the language(codec) I support, We can talk about Media(MediaStream) or some generic data(DataChannel), the man just chill and talk whatever you want I'm here for you. This is all done by sharing &lt;strong&gt;SDP&lt;/strong&gt; with each other.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Connecting&lt;/strong&gt;:- Now we know enough about each other. But the problem arises that we only know each other at a higher level in a networking term at the &lt;em&gt;application layer&lt;/em&gt;, we should know each other's limitations and find a better way to communicate at the &lt;em&gt;network layer&lt;/em&gt; that's why we share ICE candidates.&lt;a href="https://temasys.io/ice-and-webrtc-what-is-this-sorcery-we-explain/"&gt;Why we need ICE more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;ICE candidate in layman's terms would be like hey this is my phone number, this is my email, my house address these all can be an ICE candidate. In simple terms, ICE candidate is just "These are some paths by which you can access me" it can be HostName(local Ip Addr), Server reflexive(NAT mapping), Relay(Proxy server/TURN server), etc.&lt;/p&gt;

&lt;p&gt;Because of ICE candidates, we can be stay connected on the move:- New ICE candidate as you move(Wifi/LTE). Switch to between better connection when present(Auto-negotiation by ICE Restart)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Securing&lt;/strong&gt;:-DTLS(TLS over UDP)+SRTP, Encryption over RTP. That mean now you have End to End Encryption(E2EE). No more man-in-middle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Communication&lt;/strong&gt;:- Now lets communicate, MediaCommunication or DataChannel whatever you want.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#lets-build-chat-app-using-webrtc"&gt;
  &lt;/a&gt;
  Let's build Chat app using WebRTC
&lt;/h2&gt;

&lt;p&gt;In the chat app there will be two peer Local and Remote. We're going to use WebRTC API in browser.&lt;br&gt;
&lt;a href="https://i.giphy.com/media/YMwcy2pjfZc7bqON1x/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/YMwcy2pjfZc7bqON1x/giphy.gif" alt="Build"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#step-1-initial-js-setup"&gt;
  &lt;/a&gt;
  Step 1:- Initial JS setup
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uIM-tV4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3gl1uy35dd2eu6s4a2t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uIM-tV4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c3gl1uy35dd2eu6s4a2t.png" alt="HTML"&gt;&lt;/a&gt;&lt;br&gt;
As we have this HTML now connect it with JavaScript and add some event to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;localmessageInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;localMessageArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;localmsg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;localmessageInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keyup&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;addChildMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localMessageArea&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;right&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;localChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Get reference to Input element and message are.&lt;/li&gt;
&lt;li&gt;Add an event on input element whenever &lt;code&gt;ENTER&lt;/code&gt; is pressed.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Add message to text area, with &lt;code&gt;right&lt;/code&gt; align.&lt;/li&gt;
&lt;li&gt;Call some &lt;code&gt;localChannel.send&lt;/code&gt; function and pass our input value.&lt;/li&gt;
&lt;li&gt;clear the input value.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Everything is same for remote peer part of code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2:-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// config = {&lt;/span&gt;
&lt;span class="c1"&gt;//   iceServers: [&lt;/span&gt;
&lt;span class="c1"&gt;//     {&lt;/span&gt;
&lt;span class="c1"&gt;//       urls: ["stun:stun1.l.google.com:19302", "stun:stun2.l.google.com:19302"],&lt;/span&gt;
&lt;span class="c1"&gt;//     },&lt;/span&gt;
&lt;span class="c1"&gt;//   ],&lt;/span&gt;
&lt;span class="c1"&gt;//   iceCandidatePoolSize: 10,&lt;/span&gt;
&lt;span class="c1"&gt;// };&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;localPeer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;remotePeer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;RTCPeerConnection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We create &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection"&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; object which provides methods to connect to a remote peer, maintain and monitor the connection. In our setting config is &lt;code&gt;null&lt;/code&gt; as our project is running in local enironment if you are connecting two peer over internet then you can use the commented config.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-establishing-a-connection-signaling"&gt;
  &lt;/a&gt;
  Step 3 Establishing a connection: signaling:-
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Step define here are not proper way of signalling so please refer &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Perfect_negotiation"&gt;The WebRTC perfect negotiation pattern&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;localPeer&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createOffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;localOffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;localPeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localOffer&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;remotePeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localPeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localDescription&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;remotePeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createAnswer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;remoteSDP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;remotePeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remoteSDP&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;localPeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRemoteDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remotePeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localDescription&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;So anyone can start the offering here localPeer start it by calling .&lt;code&gt;createOffer()&lt;/code&gt; this will return SDP of localPeer.&lt;/li&gt;
&lt;li&gt;We store &lt;code&gt;localOffer&lt;/code&gt; in the &lt;code&gt;localPeer&lt;/code&gt; by calling &lt;code&gt;setRemoteDescription&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now we can send the &lt;strong&gt;LocalDescription&lt;/strong&gt; by any method like webSocket, or REST API. but As our both the peer are present locally we'll directly set &lt;code&gt;setRemoteDescription&lt;/code&gt; for the &lt;code&gt;remotePeer&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now &lt;em&gt;localPeer&lt;/em&gt; has its own &lt;em&gt;Description&lt;/em&gt; and &lt;em&gt;remotePeer&lt;/em&gt; has &lt;em&gt;Description&lt;/em&gt; of &lt;em&gt;localPeer&lt;/em&gt;, Now &lt;em&gt;remotePeer&lt;/em&gt; will create its own &lt;em&gt;Description&lt;/em&gt; by calling &lt;code&gt;createAnswer()&lt;/code&gt; which will create the &lt;em&gt;Description&lt;/em&gt; but also initiate the connection process.&lt;/li&gt;
&lt;li&gt;Same as &lt;code&gt;localOffer&lt;/code&gt; we can also share &lt;code&gt;remoteSDP&lt;/code&gt; by any proccess. Here we're just passing it to &lt;code&gt;localPeer&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now both the peer have &lt;em&gt;Description&lt;/em&gt; or knowledge about each other. Now they can start connection.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you didn't understand the proccess above then you can refer flow diagram from &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/Signaling_and_video_calling"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#step-4-connecting"&gt;
  &lt;/a&gt;
  Step 4. Connecting:-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;localPeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onicecandidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;candidate&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;remotePeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addIceCandidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;remotePeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onicecandidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;candidate&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;localPeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addIceCandidate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;candidate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate"&gt;&lt;code&gt;onicecandidate&lt;/code&gt;&lt;/a&gt; Is an event-handler which specifies a function to be called whenever the local ICE agent needs to deliver a message to the other peer through the signaling server. What it does share the Info of ICE candidate it found and share to other peer, other peer just add the candidate. By this WebRTC API will try every ICE candidate and establish the throght the optimal ICE Candidate. After this step complete our connection is established. 🎉🎊.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-5-datachannel"&gt;
  &lt;/a&gt;
  Step 5. DataChannel:-
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;localChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localPeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createDataChannel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chat&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;remoteChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;localChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Got message at local side&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;addChildMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localMessageArea&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;remotePeer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ondatachannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;remoteChannel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;remoteChannel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Got msg at remote side&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;addChildMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;remoteMessageArea&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;After Connection is establish, By calling &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel"&gt;&lt;code&gt;createDataChannel&lt;/code&gt;&lt;/a&gt; on localPeer creates a new channel linked with the remote peer, over which any kind of data may be transmitted.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onmessage&lt;/code&gt; is an event handler which specifies a function which is called when the a meessage is sent over the DataChannel by other peer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;ondatachannel&lt;/code&gt; is an event handler which specifies a function which is called when an &lt;code&gt;RTCDataChannel&lt;/code&gt; is added to the connection by the remote peer calling &lt;code&gt;RTCPeerConnection.createDataChannel&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#success"&gt;
  &lt;/a&gt;
  Success 🤝🏻
&lt;/h3&gt;

&lt;p&gt;We have build the simplest chatting app you can think of. You can find the whole code &lt;a href="https://github.com/KushagraMehta/Yet-Another-ChatApp"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gB8mkcwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivivp400txvn1b3hm9ti.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gB8mkcwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivivp400txvn1b3hm9ti.gif" alt="Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#awesome-idea-implemented-over-webrtc"&gt;
  &lt;/a&gt;
  Awesome Idea implemented Over WebRTC
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.formant.io/en_US/98620-working-in-formant/teleoperate-your-robot"&gt;Control robot over internet on browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rtctunnel/rtctunnel"&gt;LiveShare type application from VScode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://piepacker.com/"&gt;Cloud game, player can be all aroung the world. It'll recreate the experince like you're sitting on the crouch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://strivecast.com/"&gt;Better CDN, download one file in local area network and sharer data P2P&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mzyy94/ns-remote"&gt;Stream your Nintendo switch into Oculus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/wiretrustee/wiretrustee"&gt;Secure P2P Wireguard VPN tunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nurdism/neko"&gt;Share browser with friends, watch movie, Shop or do whatever together&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Ragnar-H/TelloGo"&gt;Control drone over browser&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/maxmcd/webtty"&gt;Terminal over Internet without any port-forwording, setting up a proxy-server or it can be behind firewall&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#multiple-language-implementation"&gt;
  &lt;/a&gt;
  Multiple Language implementation
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/aiortc/aiortc"&gt;aiortc(python)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://gstreamer.freedesktop.org/documentation/webrtc/index.html?gi-language=c"&gt;GStreamer's webrtcbin(C)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shinyoshiaki/werift-webrtc"&gt;werift(TypeScript)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/pion/"&gt;Pion(Golang)❤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/shiguredo"&gt;Shiguredo(Erlang)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Ipipel(Java)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rawrtc/rawrtc"&gt;rawrtc(C++)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/webrtc-rs/webrtc"&gt;webrtc-rs(Rust)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-c"&gt;AWS webRTC(C/Embedded)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Many More&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to find sustainable jobs and projects as a web developer in Germany</title>
      <author>Ingo Steinke</author>
      <pubDate>Thu, 01 Jul 2021 12:56:51 +0000</pubDate>
      <link>https://dev.to/ingosteinke/how-to-find-sustainable-jobs-and-projects-as-a-web-developer-389b</link>
      <guid>https://dev.to/ingosteinke/how-to-find-sustainable-jobs-and-projects-as-a-web-developer-389b</guid>
      <description>&lt;p&gt;One of the main reasons I wanted to work self-employed again was independence and freedom of choice. Working where and when, but most importantly how and for whom seemed appealing enough to quit my 9-to-5.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#high-standards-and-compromise"&gt;
  &lt;/a&gt;
  High Standards and Compromise 🍏🍐🧺
&lt;/h2&gt;

&lt;p&gt;Many employers seem to see themselves as modern and "green", eco-friendly companies. Proud about first steps towards sustainability, like the weekly fruit basket from a local organic farm, but maybe also driven by unscrupulous greenwashing marketing, you won't expect a lot of self-criticism.&lt;/p&gt;

&lt;p&gt;In consequence, as a web developer who favors ethical and ecological jobs, I keep getting a lot of work offers that simply do not match my standards. I am willing to make a compromise, but at least some aspects should match.&lt;/p&gt;

&lt;p&gt;This is especially true for mainstream business sites like LinkedIn that seem to attract a lot of recruiters who target the masses and don't care about collateral damage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#job-search-alternatives"&gt;
  &lt;/a&gt;
  Job Search Alternatives 🔍🐕
&lt;/h2&gt;

&lt;p&gt;Alternative: use special job sites like &lt;a href="https://impactify.de/"&gt;Impactify&lt;/a&gt; or &lt;a href="https://www.greenjobs.de/"&gt;Greenjobs&lt;/a&gt; (German).&lt;/p&gt;

&lt;p&gt;You can also use job platforms that specialize in IT, like &lt;a href="http://app.honeypot.io/ref/aZzaqWYBd7DPoMwxVz4gAiGx"&gt;Honeypot&lt;/a&gt;, &lt;a href="http://4scotty.com/beam/Yx9FCiGgWA3C64jBp"&gt;4Scotty&lt;/a&gt;, or freelancing sites like &lt;a href="https://www.freelancermap.de/freelancer-verzeichnis/profile/it/170185-profil-ingo-steinke-frontend-web-developer-aus-duesseldorf.html"&gt;Freelancermap&lt;/a&gt; or &lt;a href="https://www.freelance.de/Freiberufler/145774-Frontend-Web-Developer"&gt;freelance.de&lt;/a&gt;. Once you tune your preferences, you might get some useful offers.&lt;/p&gt;

&lt;p&gt;All of them seem to focus on the German market, so you only compete with other developers who have to pay the same taxes and high German living costs, and you can check other profiles for daily and hourly rates to see if your own rates are within the normal limits.&lt;/p&gt;

&lt;p&gt;I also get occasional useful contacts via &lt;a href="https://stackoverflow.com/users/5069530/ingo-steinke"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have been using all of the above, and I should add the disclaimer, that the links to &lt;a href="http://4scotty.com/beam/Yx9FCiGgWA3C64jBp"&gt;4Scotty&lt;/a&gt; and &lt;a href="http://app.honeypot.io/ref/aZzaqWYBd7DPoMwxVz4gAiGx"&gt;Honeypot&lt;/a&gt; are affiliate links, so they might hopefully give me some financial compensation if someone registers for their service.&lt;/p&gt;

&lt;p&gt;In my personal experience, all of those are still much better for a green web developer than Xing or LinkedIn.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#networking"&gt;
  &lt;/a&gt;
  Networking 🎪
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.reflecta.network"&gt;Reflecta&lt;/a&gt; is an online community for "change makers" where you can connect to ethical startups and other like-minded individuals focused on sustainable development (SDG).&lt;/p&gt;

&lt;p&gt;Attending local and virtual meetups like the &lt;a href="http://sos.railslove.com"&gt;Sustainable Offsite Meetup&lt;/a&gt; is another opportunity to extend your network. Going to co-working spaces, maker spaces, and repair cafés might be another one.&lt;/p&gt;

&lt;p&gt;If you are looking for an idea for a new software project, why not contribute to an existing open-source project? Building software for a good cause can help your learn and build your development skills as well as show off your work and get to know people all at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sprechen-sie-deutsch"&gt;
  &lt;/a&gt;
  Sprechen Sie Deutsch 🇩🇪
&lt;/h2&gt;

&lt;p&gt;As a native speaker, I tend not to notice the language barrier. But even at jobs and companies where you don't need to speak any German, you might stumble upon code comments, chat messages or legal forms in German.&lt;/p&gt;

&lt;p&gt;So if you're an expat having plans to stay in Germany at least for some years, learn the language! It is hard, as I have been told, but it can also be funny and poetic, and it helps to boost your chances both professionally and personally if you speak the local language at least a little bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#unintentionally-amusing"&gt;
  &lt;/a&gt;
  Unintentionally amusing? 🧔📸
&lt;/h2&gt;

&lt;p&gt;As most of those companies focus on their actual business, they have to rely on stock photography for marketing, which contradicts any effort to be modern and inclusive by using pictures full of stereotypes, like this one showing a bearded young man using a computer at the office:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-back-bearded-hipster"&gt;
  &lt;/a&gt;
  Welcome back, bearded hipster!
&lt;/h3&gt;

&lt;p&gt;"Willkommen zurück!" (Welcome back!)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O6F4k6V---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dvtegpx5dyxie5iodvt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O6F4k6V---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4dvtegpx5dyxie5iodvt.png" alt="Stereotype stock photograph mentioned above"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Parts of this article have already been published in my personal weblog at &lt;a href="https://www.open-mind-culture.org"&gt;open-mind-culture.org&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>jobs</category>
      <category>stereotypes</category>
      <category>greenwashing</category>
      <category>sustainability</category>
    </item>
  </channel>
</rss>
