<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Blockchain Native-Game Engines</title>
      <author>Arefin</author>
      <pubDate>Fri, 21 Jan 2022 19:10:13 +0000</pubDate>
      <link>https://dev.to/arefin12345/blockchain-native-game-engines-3n7i</link>
      <guid>https://dev.to/arefin12345/blockchain-native-game-engines-3n7i</guid>
      <description>&lt;p&gt;Traditional game engines are amazing tools which are used by game developers, artists, designers, storytellers and programmers to create beautiful, fun interactive worlds where you can spend hours entertaining yourselves. Most of us have spent so much of our childhood immersed into this worlds and created memories and experiences which will last for a lifetime. But things are about to change. As with everything else that crypto touches, it's going to revolutionize the way we build and play games and completely disrupt this industry. Let me show you how.&lt;br&gt;
In the early days of video game development, games were created by programming the hardware. We had arcade machines which were constructed to run one and only one game at a time. Then personal computing and general computing hardware seperated software and hardware. Many softwares can now run on same hardware. Game studios started building softwares games that would run on specific hardwares. Then as game studios started being commercially successful and had plans to make a lot of games, it became obvious that building a game engine was a necessity. Game engine allows for developers to quickly prototype and collaborate with artists and designers to create levels and worlds which can be easily modified before deploying a final build for anyone to play. Many game studios eventually created really sophisticated game engines, which gave their games a distinct look and feel. Fans also anticipated games from a particular game engine, because they knew what will be coming out of this engines will be nothing short of extraordinary. So this game engines made this studios lots of money, gave them a moat over competitors which incentivized them to be closed-sourced. After that it was pretty much given, that if you are building your own gaming studio, you must first build the game engine. Studios would put millions and years building out this game engines, before they even started working on any game. Soon after, this companies started licensing out their built-out game engines to other smaller gaming studios, so they don't have to worry about building it out themselves, and just focus on building games.&lt;br&gt;
Then in 2005, Unity was launched. Unity was released as an open-source game engine meant to democratize access and disrupt the license raj of previous incumbents. It was also the first game engine I used to learn making video games along with so many others like me. This new indie and student developer focussed engines, made game development much much easier for better or worse. It also made indie game development a pathway for many aspiring game developers who wanted to pave their own way instead of just joining another AAA game studio. For the past decade, there are so many game engines, graphics creation tools, animation tools, marketplaces of game assets, etc. All of this umbrella of options for game developers has made the gaming industry the biggest industry out there in entertainment.&lt;br&gt;
So now we had closed-sourced game engines, to open/licensed game engines to open source game engines. But now we have a unique opportunity to create the 4th paradigm in the gaming industry. A crypto-native game engine.&lt;br&gt;
What will be different about a crypto-native game engine?&lt;br&gt;
Crypto-native game engines are the critical infrastructure that will build different metaverses. Every major tech company and gaming studio like Facebook, Epic, Microsoft have announced they are venturing into metaverse. A metaverse is a difficult term to define, but eventually it will encompass everything, from play to work to leisure to travel. And every aspect of it will be hand-built by builders from all over the world. But ofcourse you cannot expect the traditional companies venturing into this space to get or build what the cypherpunks have been dreaming of. It's a gold rush and everyone wants a piece of the metaverse, but if we want to build this correctly it has to be built from the ground up. This is where game engines which abide by and facilitate the tenets of crypto will win over everything else. And it is inevitable that crypto-native game engines will win, because they are just superior for every rational actor getting into this space. It's not a zero-sum game. That is why DeFi (Decentralized Finance) is winning over traditional finance, Bitcoin is winning over nation states. It'e because this game engines will be open-source, they will be owned by game developers across the world, forked and expanded upon by them. This game engines will have the crypto economic layer as their base, and builders across different domains will collaborate and pay each other using this base layer, which will be Ethereum or some other blockchain. It will allow for interoperability amongst different fields and domains, tools for efficient collaboration and coordination, permissionless, ownership-first mentality, persistence using a decentralized ledger with very strong sybil resistance built-in and the most critical feature about them will be modular composability. Due to all of this features, even big players in the space have to follow this principles, otherwise it's hard for them to participate in the crypto market and make any profits. Anyone trying to create walled gardens will lose out. This is not to say that walled gardens won't have any place in the metaverse, there will be lots of them, but they will be community first with an easy exit option to anyone playing in this gardens, which is really difficult thing to do in today's tech and gaming ecosystem.&lt;br&gt;
There are 3 important entities in this blockchain-based system that makes the system whole: Builder, Player and Speculator. Builders are programmers, designers and artists who will build game worlds and components, Players will play the games built by them and Speculators are the investors and gamblers who will stake their wealth on builders based on players who are the ultimate judge/signals of which builders are successful and good. In the old way, the builders worked for investors/speculators, building them worlds which were designed in a way to exploit players out of their dollars. In the new way, the role of speculators although important will be to just observe and not try to control the narrative to gain advantage.&lt;br&gt;
Here's a tiny example of a game that explains the stark differences between the old and new system clearly. I am a game developer who wants to build a game where a knight fights a dragon with a sword. There are 3 main components in this scene, the knight, dragon and sword. The game devs and artist will create the assets, program the behaviour and the designer and author of game will integrate them in the game world and make the game playable and fun. In the old way, I will hire artists to create the assets which will be my game's IP. The code of the game will be closed and for allowing modding for external devs will require additional effort. I will have to follow the rules set by the centralized marketplaces like Steam. I will not be able to use code/assets since there's no standardized way of accessing other assets to make the game development process faster and simpler. So basically creating a game today breaks all the important principles that crypto follows. But if I choose to follow the cyperpunk principles, it will not only make my building process more efficient, it will set my game up for future expansion, give players and artists proper ownership into my IP but also give everyone involved a way to participate in my journey of game development from the beginning if they desire so. But to set all of this up currently would take lots of engineering effort. To make this process easier for every new builder, there's an opportunity and need to create a game engine which facilitates all the process and bakes in the principles in everything we build. This kind of game engine is the new paradigm, the most critical infrastructure for the future of a good metaverse and an important public good which should be made available for all.&lt;br&gt;
Composability - Crypto game engines allow devs to create blockchain-based smart contracts which represent independant parts of a game composed together just like lego pieces. This pieces will be of various forms and will be interoperable to fit with other pieces to form a whole game. Currently the way games are developed, they are siloed worlds that are confined within themselves. Players have to go in the world, play and learn skills, but there isn't a way to transfer the elements/skills inside the game to another game. This gives open world games like GTA strong moats, as gamers need to dedicate their entire time, undivided attention and money inside a single game. There's no doubt the absolutely massive world build by Rockstar is really entertaining. But imagine if this world was built using independant components by different builders all over the world instead of the few hundred that work at the studio. Composable smart contracts allow all of this game components needed in a game to be extracted out and remain an independent entity on the blockchain. This components can then be utilized by a particular game contract.&lt;br&gt;
One important thing to consider when creating this separable, independant components is how interoperable they are with each other. By default I think every component should have some dimensions about it that can communicate with the others because they are on blockchain. But in order for every feature of the component to be operated, they should abide by some standards set by the community so game devs have easier time integrating them and don't confuse the players owning or interacting with this components. In-game components should feel consistent with each other no matter which game they belong to.&lt;br&gt;
In our game example, the "knight" will use the player contract which has a global state owned by the player itself. This means, that the player can use it's global state which is independant of the game and also the game itself will modify the player state. The player can use his personal wallet in which he owns certain components which are useful in the game. In our example, the game accepts swords as weapon to fight the dragon, so the player can either use a sword he already owns (maybe won from another game) or he can use the sword provided by the game itself. What makes this interesting for the builders is that, if the builder wants he can skip the step of building sword assets, and only allow players who already own swords to fight this dragon. This brings so many possibilities for the game, and also makes the process of game development really modular and composable. Another aspect to this is an artist who is really well-known for making amazing sword assets can now make his work available to lots of different game developers and his work could be valued according to how much those assets are in demand in the world. This makes the valuation of in game assets completely detached from the game itself, and the games narrative, character and gameplay only enhance the asset. Actually all the aspects of a game can be detached and modularized in a similar way in theory, but the implementation might make things a little complicated especially when it comes to storytelling, as it is usually very tightly coupled with a game. But it might be possible to fork game play mechanics create by certain devs, and tell different stories in different worlds using those. This opens up a really different way of coordination and collaboration in game development and designers will have to shed their old ways of thinking how to go about designing a game.&lt;br&gt;
Persistence - Blockchain records every transaction made by users of a smart contract. That means that if a player plays a game using a smart contract, all the interactions player does on the chain is recorded and so a player state is maintained for that particular game. This state can then be used by the player and other game developers in really interesting ways. For example, our game contract in the example above mints a loot item, when the player finally defeats the dragon. The author of this particular game contract has made this particular loot item as an NFT, an independant component which the player now owns, and can do what he wants with it. He can keep this treasure as a display in his collections box. He can sell it on the open markets for real money. Or he can just use this NFT in another game contract in the metaverse. The player now goes to a warriors battleground, which is a PVP arena, and he can choose to use the sword he just won defeating the dragon to fight his friends in a battle arena. This is just one scenario of so many things which will be made possible because of the state of the object which has a whole another life outside of it's game level it was generated. This layer of persistence will also be used on the player itself. The skills he learned in this game, can be used by other games, to give him special access to their games. We can create a reputation layer for the player, which can be monetized by the player in various ways. There's even a persistance layer in the gaming world itself, and a talented game developer can use this to make the experience of living in their gaming world a really memorable and unique experience, where players past action affect their community, their own state and also state of NPCs residing in the game. Imagine using AI for NPCs to have dynamically changing reactions to player actions based on how they behave in the game or other games. Or changing a whole city in an open world game based on actions performed and decisions made by a faction of players.&lt;br&gt;
Saving all the previous state on a blockchain also means, a player can come back and replay a particular state of a particular game again and again without ever needing to store it somewhere seperately, or the game server not maintained by the original game company. Anyone can fork this game and run it on their own and carry over all the previous state. They can keep the game exactly the same or make their own modifications either cosmetic or in game. All of this is only possible if there's a single chain storing all the state data.&lt;br&gt;
Permisionless - One of the main tenets of crypto is that it is permissionless. You don't need permission to sell something you build from the central marketplaces and platforms. The same thing will apply to game engine components too. Any smart contract developer can create a new game, by forking the original game contract, transferring over all the capabilities of the original game. Any frontend developer can create new UI and 3d asset to mod the game to their liking, selling this mods to players and other devs. Even the assets used in a game can simply be picked up by game devs from artists who will mint it as NFTs (attaching rules and royalty fee for usage). This makes working on games a really individualistic and asynchronous process if one likes to work that way. But a squad with diverse backgrounds can collaborate to fork a game, and make improvements of their own to it too. In the above example, I as a dev will opensource my design for the dragon fight. Then another dev can extend my work, by adding a different dragon with different capabilities but reusing the players actions that I have already programmed in. An environment artist can create a different level for the game to be played. And a curator can pick and choose between all this different composable components to create a very specific experience. And all of this will be done permisionlessly while all the revenue collected during this process will be distributed by a distribution contract set by the individual component creators. Gone will be the days when Nintendo sues a fan for remaking an old level, or Bethesda only allowing certain mods for their games to be monetizable. This kind of selfish tactics to benefit the parent company will be seen as undesirable and foolish.&lt;br&gt;
Ownership - game developers can create certain assets which the player can own. Some of this assets are something they sell, which maybe vital to what they are building in order to raise funds. Once you own an asset, you can sell it on open markets. Use it in other games made by the same or other developers. The engine allows game contracts to make exclusive contracts with the player owned assets, which means that when the player uses the game assets in a game it will permanently change some aspects of the owned assets. You may even lose the asset you own. Some changes will be permanent, some only when you play the game. Some will be purely cosmetic, others will enhance/deflate the abilities of the asset you own.&lt;br&gt;
Eg. Let's say you win a rare sword in a battle game by defeating another player in combat. Now that sword is permanently yours to own. Now you can go and play a game which allows you to upgrade that sword. It's a fantasy magical game, so your sword now has magical abilities. Then you go and play a game with dragons. But this game has known risk that the sword maybe permanently damaged, losing all the magical abilities you gain playing the other game. Is that risk worth the rewards this game is offering? Game developers will be making all sorts of risk/rewards balance for different assets, in order to attract players, and the game engine will be there all along to make this process easier.&lt;br&gt;
Tokenomics - crypto allows for a open and transparent financial system which acts as the base layer of the metaverse. Tokenomics or token economics lets you create a playground for experimenting with your own economics which can still interoperate with the global economic marketplace. A thriving metaverse needs well compensated builders who are paid fairly for the value they bring to the ecosystem. As we saw above in a composable system, every individual can build permisionless and plug in to the verse. Everyone is the owner in this economy and there are minimum rent seekers. A trustless base economic layer with a smart contract game engine where every artist and builder can assign royalty fees for the assets they build, used by game devs and compensated by players/investors means everyone can build without worrying about business. Builders can seperate art from business and just build. Players can participate to make sure the right builders are compensated fairly by signalling their happiness and also earn from this. Players can themselves earn from playing the game in certain play2earn game models. While the speculators and investors can stake their tokens to keep the ecosystem growing and healthy. The artist who is good at developing swords in the above example can be commissioned by a game dev for his particular game or he can make his asset available for anyone to use, which are then bought by either a player or a game world, because they think the utility or signalling of owning this sword is beneficial for them for particular games or in general in the external world. I have seen certain critics say that if you insert money making in a game, it removes enjoyment from actually playing the game and it becomes a grind. People don't play game to earn, but just to relax and have fun. I get this criticism, but I think there will always be games built where you can just use your NFTs to play fun games without worrying about the earning potential or grinding to earn more money. But the critics are failing to understand that this system is giving economic freedom to the builders themselves, allowing players to own and earn from the games they enjoy playing and providing some real benefits in exchange for their time and experience. This may not be for everyone, but I predict that most artists and game devs will eventually find that this model works much better for them than what they have been doing in the old way, and so the best games will be built in this new system. This is the way.&lt;br&gt;
Basic Game Engine in Development&lt;br&gt;
We have started work on a game engine that will be build with all the features I talked above in mind. This will be a bottoms-up approach, with the game engine being built specifically for a game we are developing called Spaceborn. Spaceborn is a Loot Project inspired game, where players get to own unique and randomly-generated sci-fi gears NFT by defeating Aliens in combat. Players can only earn this NFTs by playing the game. The players can equip some of the gears which they have won previously or bought from the secondary market in order to get better odds in battle. The twist is that if you loose in combat, the player may lose the equipped NFTs. The plan is to open source all the contracts created for this game so that other game developers can fork them, use the sci-fi gears won by players in this game in their own games and also let the games use the player and it's global state in other games.&lt;br&gt;
Every important component of the game which might benefit from having crypto-native features described above will be a ERC-721 NFT component type and the Game Manager will be the central contract that interacts with all the components registered with it. Every component has it's own attributes, which can be either global (changed by the owner) or game-specific, changes when owner of the component interacts with the game.&lt;br&gt;
Following are the important components for the first game:&lt;br&gt;
Player Contract: Player has a configurable global state. A player accepts to attach itself to a game contract, and agrees to getting the global state modified as it interacts with the game. Currently the only global state a game can change is the experience points. This experience points will give the player reputation in the metaverse. A player can also modify certain global attributes which are then made use by the game. One attribute is attaching a NFT PFP the player owns as it's profile picture. Now based on which NFT the player attaches, the game can give special boost to them inside the game.&lt;br&gt;
Game Contract: Game contract is the main game manager that maintains state for the game world and all the players interacting with the game. This game manager has several mappings which are upgradable by both players playing the game and the game owners (game masters). In the Spaceborn game, this game contract accepts players gated by specific PFP NFTs they own.&lt;br&gt;
Gears NFT: Gears NFT are minted by the game contract and are transferred to the wallet of the player upon completion of some objective in the game (Defeating alien enemy). This NFT are dropped by the alien contract upon defeat. This NFTs can also be equipped by the player during combat, which reduces the probability of alien winning in the battle, depending on the attributes of the gear and the attributes of aliens. The attributes and the calculation is also something that can be upgraded by the game contract owner once it's deployed.&lt;br&gt;
Alien Contract: Aliens are enemies generated by the game contract which have a base probability of winning in a battle. This probability is increased or decreased depending on the player it's facing and the gears the player has equipped.&lt;br&gt;
The contracts and web3 framework uses scaffold-eth which is a great tool for quick prototyping web3 concepts. The future roadmap for the game engine is as follows:&lt;br&gt;
Create a UI for anyone to generate game contracts or fork someone else's deployed game.&lt;br&gt;
Easy deployment of games to different L2 networks or sidechains like Arbitrum and Matic.&lt;br&gt;
Create a standard for in game items so that interoperability between different games is like a breeze.&lt;br&gt;
Create a token which will compensate builders, incentivize game developers to allow the players to play their games.&lt;br&gt;
Create a DAO for making this game engine a public good and properly decentralized.&lt;br&gt;
Create a 2D combat game which will reuse the NFTs already minted from the text-based version.&lt;br&gt;
Integration with existing game engines such as unity and unreal.&lt;br&gt;
Library for artists and developers to publish their assets, different ways for them to get compensated for the work and a marketplace for players and games.&lt;/p&gt;

&lt;p&gt;There's a lot more that will be needed, but this are what I think the core features for an alpha game engine. If any of this interests you please do get in touch with us on telegram. We are a group of devs from Moonshot Collective (GitcoinDAO) and OPGames. All of us are really excited for the future of crypto &amp;amp; web 3 and passionate about video games. What lies ahead of us is monumental and mind-blowing and we want to be at the cutting edge of it and leading the way. So be there with us as we go all in on this new adventure together.&lt;br&gt;
Here's the Spaceborn website: spaceborn.gg&lt;br&gt;
Join this telegram group for updates and connecting with us:&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Vue.js - Get up and Running</title>
      <author>Dileep Reddy</author>
      <pubDate>Fri, 21 Jan 2022 18:54:16 +0000</pubDate>
      <link>https://dev.to/dileepreddyaella/vuejs-get-up-and-running-146d</link>
      <guid>https://dev.to/dileepreddyaella/vuejs-get-up-and-running-146d</guid>
      <description>&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@afgprogrammer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Mohammad Rahmani&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/vue.js?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-is-this-for"&gt;
  &lt;/a&gt;
  Who is this for?
&lt;/h3&gt;

&lt;p&gt;For developers who are already familiar with frameworks like React, Angular, etc. and want to learn minimum amount of Vue.js features to get their engines running.&lt;/p&gt;

&lt;p&gt;I want to give a quick intro of what we need to know if we intend work on a project built with Vue.js. We are gonna start with the important one...&lt;strong&gt;the component structure&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#component-structure"&gt;
  &lt;/a&gt;
  Component Structure
&lt;/h2&gt;

&lt;p&gt;The component structure in Vue is pretty straight forward. &lt;br&gt;
We can divide it into 3 sections.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The HTML or (template)&lt;/li&gt;
&lt;li&gt;The JavaScript or (script)&lt;/li&gt;
&lt;li&gt;The CSS or (style)
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;!-- html goes here --&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
// import other components or libraries using js import
export default {
  data () {
    return {
// define state here
    }
  },
  methods: {
// define functions here
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style&amp;gt;
/* define styles here */
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#component-state"&gt;
  &lt;/a&gt;
  Component State
&lt;/h2&gt;

&lt;p&gt;In the above code block inside script tags, there is a comment saying &lt;em&gt;define state here&lt;/em&gt;. It's just that simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;script&amp;gt;
export default {
  data () {
    return {
      name: 'Jane',
      age: 32,
      books: ['the dip', 'Norwegian wood'],
      person: {name: 'Jan', gender: 'female'}
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To &lt;strong&gt;&lt;em&gt;access the state variables inside the script tags&lt;/em&gt;&lt;/strong&gt; you need to use it as &lt;strong&gt;&lt;em&gt;&lt;code&gt;this.name&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt;. Here the &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; keyword refers to the instance which holds the data.&lt;/p&gt;

&lt;p&gt;But to &lt;strong&gt;&lt;em&gt;access it inside template tags&lt;/em&gt;&lt;/strong&gt;. You can use the &lt;em&gt;mustache syntax&lt;/em&gt;. It goes like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
   &amp;lt;p&amp;gt;{{name}}&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;{{age + 10}}&amp;lt;/p&amp;gt;
   &amp;lt;p&amp;gt;{{person.gender}} {{books[0]}}&amp;lt;/p&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can perform all JS actions inside the braces including function calls. But it isn't preferred unless necessary.&lt;/p&gt;

&lt;p&gt;If you want to change value of state variable. You can do this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.name = 'New name'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;inside any function.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#template-syntax-using-raw-v-endraw-directives"&gt;
  &lt;/a&gt;
  Template syntax using &lt;code&gt;v-&lt;/code&gt; directives
&lt;/h2&gt;

&lt;p&gt;Vue uses something called directives which allow us to link JS in script tags with our HTML. So that you can perform JS operations inside the template.&lt;br&gt;
Let's talk about the directives that i found useful and used regularly.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#1-raw-vif-velseif-velse-endraw-"&gt;
  &lt;/a&gt;
  1. &lt;code&gt;v-if, v-else-if, v-else&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;As the name suggests these provide a way to conditionally render required HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;p v-if="showIf"&amp;gt;Will be rendered if showIf is true&amp;lt;/p&amp;gt;
  &amp;lt;p v-else-if="showElsIf"&amp;gt;Will be rendered if showElsIf is true&amp;lt;/p&amp;gt;
  &amp;lt;p v-else&amp;gt;Will be rendered if above two are false&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-raw-vshow-endraw-"&gt;
  &lt;/a&gt;
  2. &lt;code&gt;v-show&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;This is similar to the &lt;code&gt;v-if&lt;/code&gt;. The difference is &lt;code&gt;v-if&lt;/code&gt; doesn't render to the DOM if the applied condition fails. Whereas &lt;code&gt;v-show&lt;/code&gt; renders the element to the DOM initially and then hides the element using css display properties if the condition fails.&lt;/p&gt;

&lt;p&gt;As we are talking about DOM. I would like to mention that Vue also uses Virtual DOM. You can read more about it in this &lt;a href="https://blog.logrocket.com/how-the-virtual-dom-works-in-vue-js/"&gt;blog&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;p v-show="age === 20"&amp;gt;Show Me&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-raw-vbind-endraw-"&gt;
  &lt;/a&gt;
  3. &lt;code&gt;v-bind&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;I find this to be the most used directive. As the name suggests this is used to bind something, and here that something refers to binding HTML attributes with JS attributes.&lt;br&gt;
Let's see how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;button v-bind:disabled="isDisabled"&amp;gt;Button&amp;lt;/button&amp;gt;
  &amp;lt;div v-bind:class="selected &amp;amp;&amp;amp; 'text-blue-500'"&amp;gt;
    Blue text
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will disable the button if &lt;code&gt;isDisabled = true&lt;/code&gt;&lt;br&gt;
The Blue text will be blue if &lt;code&gt;selected = true&lt;/code&gt;. The class name used is a tailwind class. &lt;/p&gt;

&lt;p&gt;Instead of typing the whole &lt;code&gt;v-bind:disabled&lt;/code&gt; we can write it as &lt;code&gt;:disabled&lt;/code&gt;. Both are equal. This is called the &lt;strong&gt;&lt;em&gt;v-bind shorthand&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;v-bind is also used to pass props to a child component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;child :property="newProperty"&amp;gt;&amp;lt;/child&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;newProperty&lt;/code&gt; is a variable defined in &lt;code&gt;parent component&lt;/code&gt; that is being passed down to &lt;code&gt;child component&lt;/code&gt; as &lt;code&gt;property&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-raw-von-endraw-"&gt;
  &lt;/a&gt;
  4. &lt;code&gt;v-on&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;v-on&lt;/code&gt; directive is used to add event listeners like onClick, onHover, onFocus, etc. to an element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;button v-on:click="buttonClicked()"&amp;gt;Click me!&amp;lt;/button&amp;gt;
  &amp;lt;button @click="buttonClicked()"&amp;gt;Click me!&amp;lt;/button&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here buttonClicked() is a function that gets called when we click the button.&lt;br&gt;
The first and second lines both work the same way. &lt;code&gt;v-on:click&lt;/code&gt; is same as &lt;code&gt;@click&lt;/code&gt;&lt;br&gt;
The second one(&lt;code&gt;@click&lt;/code&gt;) is called v-on shorthand similar to the v-bind shorthand.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#5-raw-vfor-endraw-"&gt;
  &lt;/a&gt;
  5. &lt;code&gt;v-for&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;Used to loop through an array and render elements dynamically.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div v-for="item in list"&amp;gt;
  &amp;lt;p :key="item"&amp;gt;{{item}}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;

list = ['item1', 'item2', 'item3']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't forget to add the &lt;code&gt;:key&lt;/code&gt; to differentiate the elements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-raw-vhtml-endraw-"&gt;
  &lt;/a&gt;
  6.&lt;code&gt;v-html&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;To render real HTML in the template. Say we have a state variable called newHtml.&lt;br&gt;
&lt;code&gt;newHtml = "&amp;lt;span&amp;gt;Hello Vue!&amp;lt;/span&amp;gt;"&lt;/code&gt; &lt;br&gt;
This can be used in the template as,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div v-html="newHtml"&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;{{newHtml}}&amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

The rendered HTML in browser will be

Hello Vue!
&amp;lt;span&amp;gt;Hello Vue!&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-raw-vmodel-endraw-"&gt;
  &lt;/a&gt;
  7. &lt;code&gt;v-model&lt;/code&gt; -
&lt;/h3&gt;

&lt;p&gt;v-model is used to add two way data binding. This is useful to update the value passed to the input or textarea elements as we type. Let's see an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
  &amp;lt;input v-model="message"&amp;gt;
  &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
&amp;lt;div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The magic of v-model is that it automatically updates the value of message as you enter text in the input box.&lt;/p&gt;

&lt;p&gt;This &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwiVv-afvcP1AhW1RWwGHSMzDz4QFnoECCcQAQ&amp;amp;url=https%3A%2F%2Flearnvue.co%2F2021%2F01%2Feverything-you-need-to-know-about-vue-v-model%2F&amp;amp;usg=AOvVaw2ReHth6eRshDj3rzXus7zg"&gt;blog&lt;/a&gt; will give you a better understanding of how v-model works.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#defining-functions"&gt;
  &lt;/a&gt;
  Defining functions
&lt;/h2&gt;

&lt;p&gt;We should define functions in the methods function inside script tag. There are also other ways but they don't fall in the current scope of our discussion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export default {
  methods:{
    greet(){
      console.log('Greeting')
    },
    onClick(){
      console.log('Button Clicked')
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#receive-props"&gt;
  &lt;/a&gt;
  Receive props
&lt;/h2&gt;

&lt;p&gt;We previously saw how to pass props through v-binding. Now let's see how to receive them in the child. &lt;br&gt;
When props are passed down to the child component we have two ways of receiving them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;PARENT: 
&amp;lt;div&amp;gt;
 &amp;lt;child :name="'Jan'" :age="24"&amp;gt;&amp;lt;/child&amp;gt;
&amp;lt;div&amp;gt;

CHILD:
1st way -&amp;gt;
export default {
  props: ['name', 'age']
  methods:{
  }
}
2nd way -&amp;gt;
export default {
  props: {
    name: String,
    age: Number
  }
  methods:{
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the second way we define the types of props that we are going to receive. This will help us a lot to identify any errors that might be caused due to unexpected prop value.&lt;/p&gt;

&lt;p&gt;This has been a long post I Know!!!. &lt;/p&gt;

&lt;p&gt;Lets end with the final thing "styling".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-styles"&gt;
  &lt;/a&gt;
  Adding Styles
&lt;/h2&gt;

&lt;p&gt;Styles are defined inside the style tags. It works same as normal CSS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class="summary"&amp;gt;name&amp;lt;/div&amp;gt;
  &amp;lt;p id="id-name"&amp;gt;TEXT&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;style scoped&amp;gt;
  .summary {
    font-size: 14px;
  }
  #id-name {
    color: blue
  }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we need to add &lt;code&gt;scoped&lt;/code&gt; so that the styles we added will be applied only to the current component. If we remove it, the styles will be applied globally to all components.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The things we covered will help you in understanding the flow of a project built with Vue. This is by no means full coverage of all the features.&lt;br&gt;
There are many important topics that we should know to be a better Vue developer.&lt;br&gt;
Topics like - &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#computed-properties"&gt;
  &lt;/a&gt;
  Computed properties
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#getters-and-setters"&gt;
  &lt;/a&gt;
  Getters and Setters
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#watchers"&gt;
  &lt;/a&gt;
  Watchers
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#mixins"&gt;
  &lt;/a&gt;
  Mixins
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#vuex"&gt;
  &lt;/a&gt;
  Vuex
&lt;/h4&gt;

&lt;h4&gt;
  &lt;a href="#life-cycle-methods"&gt;
  &lt;/a&gt;
  Life cycle methods
&lt;/h4&gt;

&lt;p&gt;The &lt;a href="https://v3.vuejs.org/guide/introduction.html"&gt;official documentation&lt;/a&gt; will help you the most in understanding all the concepts.&lt;/p&gt;

&lt;p&gt;Please leave comments to add any suggestion or if you find any mistake. Thanks!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources-to-learn"&gt;
  &lt;/a&gt;
  Resources to Learn
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd"&gt;https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vueschool.io/articles/category/vuejs-tutorials/"&gt;https://vueschool.io/articles/category/vuejs-tutorials/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd"&gt;https://scrimba.com/learn/learnvue/welcome-to-vuejs-cK8RnSd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this far. This is my first post on Dev.to.&lt;br&gt;
All the best in your learning journey.&lt;/p&gt;

&lt;p&gt;You can reach out to me on &lt;a href="https://www.linkedin.com/in/sai-dileep-reddy-aella/"&gt;linkedin&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>vue</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tutorial - JWT + NodeJs + MongoDB + Vue (Back-End - Parte II)</title>
      <author>Glaucia Lemos</author>
      <pubDate>Fri, 21 Jan 2022 18:36:55 +0000</pubDate>
      <link>https://dev.to/glaucia86/tutorial-jwt-nodejs-mongodb-vue-back-end-parte-ii-1m4</link>
      <guid>https://dev.to/glaucia86/tutorial-jwt-nodejs-mongodb-vue-back-end-parte-ii-1m4</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xOBQdfsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23athau5qk5zigthj2av.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xOBQdfsJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/23athau5qk5zigthj2av.png" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fala Coders! Tudo certo? Enfim concluímos o primeiro projeto da série do meu &lt;strong&gt;&lt;a href="https://t.co/31N8vJHVoW?amp=1"&gt;Canal do Youtube&lt;/a&gt;&lt;/strong&gt; chamado: &lt;em&gt;Coding Stuff!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;O objetivo dessa série é ensinar inúmeros tutoriais e projetos direto ao ponto no meu &lt;strong&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;Canal do Youtube&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Nesse primeiro projeto da série do &lt;strong&gt;Coding Stuff!&lt;/strong&gt; desenvolvemos uma aplicação de autenticação usando o JWT com Node.js. Assim sendo, desenvolvemos uma aplicação E2E (desde o Back-End ao Front) de login e senha, a qual usamos o JWT e persistindo no MongoDb.&lt;br&gt;
Após isso, fizemos o lado do client usando o Vue.Js.&lt;/p&gt;

&lt;p&gt;Terminamos o projeto. Porém, estaremos hospedando a aplicação no &lt;strong&gt;&lt;a href="https://azure.microsoft.com/?WT.mc_id=javascript-12243-gllemos"&gt;Azure&lt;/a&gt;&lt;/strong&gt; tanto no lado do server e client-side!&lt;/p&gt;

&lt;p&gt;Abaixo segue o repositório com todo o projeto pronto!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/glaucia86"&gt;
        glaucia86
      &lt;/a&gt; / &lt;a href="https://github.com/glaucia86/jwt-node-vue"&gt;
        jwt-node-vue
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Repositório responsável pelo primeiro projeto da série de vídeos: Coding Stuff.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Série de Vídeos - Coding Stuff: Projeto #01 - Desenvolvendo Aplicação JWT com Node + MongoDB + Vue &amp;amp; Azure&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://postimg.cc/WdCFPTmw" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/beb8d585cc86dd3c5bdc904df69c078087af042d8695c8e980de6b8ffa51aaae/68747470733a2f2f692e706f7374696d672e63632f434b4c6a6b4b7a582f432d7069612d64652d5475746f7269616c2d4e6f64652d6a732d457870726573732d636f6d2d446f636b65722d312e706e67" alt="C-pia-de-Tutorial-Node-js-Express-com-Docker-1.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Repositório responsável pelo primeiro projeto da série de vídeos: &lt;strong&gt;Coding Stuff&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;O objetivo da série é ensinar inúmeros tutoriais e projetos direto ao ponto no meu &lt;strong&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos" rel="nofollow"&gt;Canal do Youtube&lt;/a&gt;&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Nesse primeiro projeto da série do &lt;strong&gt;Coding Stuff!&lt;/strong&gt; vamos aprender um pouco sobre como podemos criar aplicações de autenticação usando o JWT com Node.js. Assim sendo, estaremos desenvolvendo uma aplicação E2E (desde o Back-End ao Front) de login e senha, a qual faremos uso do JWT e persistindo no MongoDb
Após isso, faremos o lado do client usando o Vue.Js.&lt;/p&gt;
&lt;p&gt;Ao término do projeto local, estaremos hospedando a aplicação no &lt;strong&gt;&lt;a href="https://azure.microsoft.com/?WT.mc_id=javascript-12243-gllemos" rel="nofollow"&gt;Azure&lt;/a&gt;&lt;/strong&gt; tanto no lado do server e client-side!&lt;/p&gt;
&lt;h2&gt;
☕ Apoie e Ajude esse Projeto!&lt;/h2&gt;
&lt;p&gt;Se você curte ou curtiu os vídeos feitos desse curso e deseja apoiar com um…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/glaucia86/jwt-node-vue"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#desenvolvimento-completo-frontend-v%C3%ADdeo-tutoriais"&gt;
  &lt;/a&gt;
  Desenvolvimento completo Front-End (Vídeo Tutoriais)
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-09-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 09 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PH-kSpoEpYI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-10-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 10 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oLXCKIvOPK4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-11-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 11 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5VSzUFIAh1U"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-12-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 12 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/LtSeR3jy28Y"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-13-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 13 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8gG1OwMIDts"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-14-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 14 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/UcKm1ADpWlQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-15-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 15 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/cQxoBu2rexE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-16-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 16 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/hQaDG-oZQ_g"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-17-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 17 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/XykcWilTg68"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#v%C3%ADdeo-18-estrutura%C3%A7%C3%A3o-do-projeto"&gt;
  &lt;/a&gt;
  Vídeo 18 - Estruturação do Projeto
&lt;/h4&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TmGnuRhX_hI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-links-amp-recursos-importantes"&gt;
  &lt;/a&gt;
  ❗️ Links &amp;amp; Recursos Importantes
&lt;/h2&gt;

&lt;p&gt;Como dito durante as live codings, sempre estaremos citando links e recursos importantes que direcionarão para: documentações, cursos gratuitos, livros e conteúdos relacionados a Node.js &amp;amp; PostgreSQL. Abaixo, segue uma lista desses recursos, que são considerados leituras, cursos ou livros recomendados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/2JN0874"&gt;Curso Grátis de Criando Aplicações JavaScript com Node.js&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/2LlgLHa"&gt;Curso Grátis Azure Functions com Node&lt;/a&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/3nd3nT0"&gt;Curso Grátis CosmosDB com Node&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/3odzNxL"&gt;Curso de Deploy Automático com SWA + GitHub Actions&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://docs.microsoft.com/javascript/azure/?WT.mc_id=javascript-12243-gllemos&amp;amp;view=azure-node-latest"&gt;Azure para devs JavaScript &amp;amp; Node.js&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/354hrYH"&gt;Documentação do Node.js usando o Vs Code&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://code.visualstudio.com/docs/nodejs/nodejs-debugging?WT.mc_id=javascript-12243-gllemos"&gt;Depurando Aplicações Node com Vs Code&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="http://bit.ly/2MtXYtT"&gt;Documentação do Vs Code com Vue&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://jwt.io/"&gt;Documentação Oficial do JWT&lt;/a&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;✅ &lt;strong&gt;&lt;a href="https://expressjs.com/pt-br/"&gt;Documentação Oficial do ExpressJs&lt;/a&gt;&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#palavras-finais"&gt;
  &lt;/a&gt;
  Palavras Finais
&lt;/h2&gt;

&lt;p&gt;Espero que essa série &lt;em&gt;Coding Stuff de JWT com Node &amp;amp; VueJs&lt;/em&gt; seja de ajuda para todas as pessoas da Comunidade Técnica Brasileira. Estou procurando dar o meu melhor e o gerando/criando o melhor conteúdo de qualidade para todos(as) vocês!&lt;/p&gt;

&lt;p&gt;Ah! Já ia esquecer de falar aqui! Não deixem de se inscrever no meu Canal do Youtube! Estou criando inúmeras séries incríveis para esse ano de 2022! &lt;/p&gt;

&lt;p&gt;Só como spoiler, teremos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;😃 &lt;strong&gt;Microsoft Learn Live Sessions&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;Curso Gratuito de TypeScript&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;Tutoriais semanais de Node.js, TypeScript &amp;amp; JavaScript&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;😃 &lt;strong&gt;E muitos Live Codings&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Se são conteúdos que você curte, então não deixa de se inscrever e ative o sininho para ficar sabendo quando teremos vídeo novo! Essa semana já teremos uma série nova incrível lá no Canal do Youtube.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/youtube-canal-glaucialemos"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJTWdv_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.postimg.cc/pr3TL4Pd/Screen-Shot-12-31-20-at-01-06-AM.png" alt="Screen-Shot-12-31-20-at-01-06-AM.png" width="880" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;E para ficarem por dentro de várias outras novidades, não deixem de me seguir lá no twitter!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/glaucia_lemos86"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TRF6AJa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://code4coders.files.wordpress.com/2019/05/image-12.png" alt="Twitter" width="880" height="213"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>node</category>
    </item>
    <item>
      <title>MongoDB $weeklyUpdate (January 21, 2022): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Fri, 21 Jan 2022 18:05:22 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-january-21-2022-latest-mongodb-tutorials-events-podcasts-streams-35ih</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-january-21-2022-latest-mongodb-tutorials-events-podcasts-streams-35ih</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  👋 Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate! &lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#introducing-dark-mode-for-mongodb-compass"&gt;
  &lt;/a&gt;
  Introducing Dark Mode for MongoDB Compass!
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xn_KFyf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FJkfO4-XsAkOvXJ.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WjvJzf9d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1452637606559326217/GFz_P-5e_normal.png" alt="MongoDB profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        MongoDB
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @mongodb
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Dark mode... ACTIVATED! 🌙&lt;br&gt;&lt;br&gt;Configure MongoDB Compass to use our new dark theme. &lt;br&gt;&lt;br&gt;Try it out today → &lt;a href="https://t.co/rtcH6V0fmE"&gt;bit.ly/3Kyq0OC&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      19:50 PM - 20 Jan 2022
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1484251905631084553" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1484251905631084553" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1484251905631084553" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;&lt;a href="https://docs.mongodb.com/compass/current/dark-mode/"&gt;Try it today&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  🎓 Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-the-atlas-data-api-with-google-apps-script"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/quickstart/atlas_data_api_google_sheets_apps_script/"&gt;Using the Atlas Data Api with Google Apps Script&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/john-page/"&gt;John Page&lt;/a&gt; &lt;br&gt;
This article teaches you how to call the Atlas Data API from a Google Sheets spreadsheet using Google Apps Script.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#bringing-your-data-to-your-wrist-with-the-mongodb-data-api-and-fitbit"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/atlas_data_api_and_fitbit/"&gt;Bringing Your Data to Your Wrist with the MongoDB Data API and Fitbit&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/john-page/"&gt;John Page&lt;/a&gt; &lt;br&gt;
In this article, we will see how to call the Data API from a smartwatch application to retrieve a document that contains data to display.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#auto-pausing-inactive-clusters"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/auto-pausing-inactive-clusters/"&gt;Auto Pausing Inactive Clusters&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/brian-leonard/"&gt;Brian Leonard&lt;/a&gt; &lt;br&gt;
One of Atlas’ many great features is that it provides you the ability to pause clusters that are not currently needed, which primarily includes non-prod environment. &lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  📺 MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Streams&lt;/em&gt;&lt;br&gt;
MongoDB Realm, No Code and the Data API&lt;br&gt;
&lt;iframe src="https://player.twitch.tv/?video=1269913993&amp;amp;parent=dev.to&amp;amp;autoplay=false" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Learning with Luce - Automate the Automation on MongoDB Atlas with Postman&lt;br&gt;
&lt;iframe src="https://player.twitch.tv/?video=1262332564&amp;amp;parent=dev.to&amp;amp;autoplay=false" height="399" width="710"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;🍿 &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  🎙 Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe src="https://open.spotify.com/embed/episode/5Q8tbQcTcxxM1fWGU3GkBq" width="100%" height="232px"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 96 - &lt;a href="https://open.spotify.com/episode/5mRaLAaVoG4kgxRge9d968?si=aalAbiVgRzO9cIo7fOzVhw"&gt;Christmas Lights and Webcams with the MongoDB Data API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 95 - &lt;a href="https://open.spotify.com/episode/4liGrDKAKoa6A5yycob8Xt?si=ez5tyGRKSsGB4JrDTG5OGQ"&gt;Life at MongoDB: Exploring Cloud Support with Mark Kirpichnikov and Jon Fanti&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 94 - &lt;a href="https://open.spotify.com/episode/3JjNwmufWxFrRjyOYD9RdK?si=l9hcQ0TjThql9mBaHWF7mA"&gt;DevOps, IaC, Terraform and MongoDB with John Fahl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; 😊)&lt;/p&gt;




&lt;p&gt;💡 These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; first! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>serverless</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to Connect Your Local Project’s Codebase to a GitHub Repository Fast!</title>
      <author>Brian H. Hough</author>
      <pubDate>Fri, 21 Jan 2022 17:47:09 +0000</pubDate>
      <link>https://dev.to/brianhhough/how-to-connect-your-local-projects-codebase-to-a-github-repository-fast-2l7h</link>
      <guid>https://dev.to/brianhhough/how-to-connect-your-local-projects-codebase-to-a-github-repository-fast-2l7h</guid>
      <description>&lt;p&gt;GitHub is one of the most powerful tools for developers, whether you are working on your project solo or working amongst members of a team. Git and GitHub adds a version control layer to your code so anyone can see the change history, the edits, and also see various branches of the codebase. &lt;/p&gt;

&lt;p&gt;In this episode of the &lt;a href="https://www.youtube.com/watch?v=uanVkqI2YHw"&gt;Tech Stack Playbook&lt;/a&gt;, we are going to review the process of uploading a local codebase repository from a computer to GitHub from the command line.&lt;/p&gt;

&lt;p&gt;This episode is packed with content, so here's a glance at what you'll learn about below, and a series of sections further down in this blog post highlighting the important topics we discussed:&lt;/p&gt;

&lt;p&gt;Time stamps:&lt;br&gt;
&lt;a id="NUMBER_1" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=0s"&gt;00:00&lt;/a&gt; GitHub 101 &lt;br&gt;
&lt;a id="NUMBER_2" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=135s"&gt;02:15&lt;/a&gt; Set up your code project locally&lt;br&gt;
&lt;a id="NUMBER_3" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=200s"&gt;03:20&lt;/a&gt; Create an empty repository in GitHub&lt;br&gt;
&lt;a id="NUMBER_4" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=287s"&gt;04:47&lt;/a&gt; Initialize your GitHub connection locally&lt;br&gt;
&lt;a id="NUMBER_5" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=628s"&gt;10:28&lt;/a&gt; Review the pushed changes in GitHub&lt;br&gt;
&lt;a id="NUMBER_6" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=653s"&gt;10:53&lt;/a&gt; Set up GitHub Desktop to manage our repository&lt;br&gt;
&lt;a id="NUMBER_7" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=693s"&gt;11:33&lt;/a&gt; Push new changes via GitHub Desktop to GitHub&lt;br&gt;
&lt;a id="NUMBER_8" href="https://www.youtube.com/watch?v=uanVkqI2YHw&amp;amp;t=777s"&gt;12:57&lt;/a&gt; Wrap-up and reflection on what we set up with GitHub&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uanVkqI2YHw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-101"&gt;
  &lt;/a&gt;
  👨‍💻 GitHub 101
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com"&gt;&lt;br&gt;
GitHub&lt;/a&gt; is one of the most powerful tools for developers, whether you are working on your project solo or working amongst members of a team. Git and GitHub adds a version control layer to your code so anyone can see the change history, the edits, and also see various branches of the codebase. &lt;/p&gt;

&lt;p&gt;I like to think of GitHub as the code-version of Google Docs. You can switch back to a previous version of your document, make edits and push those in real time, and also collaborate with others on the same version of the document. &lt;/p&gt;

&lt;p&gt;Another major benefit to GitHub is branching, allowing you to have different states of your codebase for different reasons. A common practice for codebases involves 3 core branches: dev, stage, and prod. The dev branches is what you will use to build from and test, debug, and add in new features. The stage branch is for new additions that are ready for review ahead of going to prod - the reason being, you need to thoroughly test the addition to make sure it is ready for users and so you don’t mess with the client-facing build. The prod, or production, version of your codebase is what is running live for your clients or customers or users. This (hopefully) is free of bugs and errors because of the previous two steps to push code to this stage. &lt;/p&gt;

&lt;p&gt;However, if you are working on your project solo, you might only need 2 core branches: main, a version for you to build/test your app, and prod, a version in production that is always live.&lt;/p&gt;

&lt;p&gt;In today’s tutorial, we are going to review the process of uploading a local codebase repository from a computer to GitHub from the command line. In each of these below steps, I denote which ones are things you do (local) - on your computer, or (web) - on the GitHub website.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-1-set-up-your-code-project-folder-local"&gt;
  &lt;/a&gt;
  👨‍💻 Step 1: Set up your code project folder (local)
&lt;/h2&gt;

&lt;p&gt;For this example, I have created a ReactJS Soundcloud Clone application with the create-react-app framework and implemented the AWS Amplify framework with Cognito identity and access management, DynamoDB NoSQL database storage, S3 object oriented storage for media items, and AppSync to help us manage a GraphQL API. The app allows users to create an account that then allows them to upload songs to the cloud through the app and then play those media files through the built-in player. Stay tuned for a full-tutorial on this build coming soon ☺️&lt;/p&gt;

&lt;p&gt;If you do have a local codebase on your computer that you want to push to GitHub, feel free to jump right into Step 2 below.&lt;/p&gt;

&lt;p&gt;If you do not have a local codebase on your computer to push to GitHub, you can spin up a practice repo with either a React.js or NEXT.js template below to get started: &lt;/p&gt;

&lt;p&gt;For React, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app techstackplaybookpracticerepo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Next, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app --example with-tailwindcss techstackplaybookpracticerepo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you have a folder for your app created with one of these frameworks, move onto Step 2 below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-create-an-empty-repository-in-github-web"&gt;
  &lt;/a&gt;
  👨‍💻 Step 2: Create an empty repository in GitHub (web)
&lt;/h2&gt;

&lt;p&gt;When you go to &lt;a href="https://github.com"&gt;https://github.com&lt;/a&gt;, at the top right, when you click on your profile avatar, there is a drop-down of menu items. &lt;/p&gt;

&lt;p&gt;Click on the drop-down item that says “Your Repositories” which will bring you to a page that lists out all of the repositories in your GitHub account. There will be a green button that says “New” - make sure to click that to pull up the create repository flow.&lt;/p&gt;

&lt;p&gt;There will be a number of options to select, but here’s a quick guide:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Repository template: (keep default option)&lt;/li&gt;
&lt;li&gt;Repository name: TechStackPlaybookPracticeRepo&lt;/li&gt;
&lt;li&gt;Description: (optional)&lt;/li&gt;
&lt;li&gt;Public/Private: Public&lt;/li&gt;
&lt;li&gt;Initialize this repository with: (keep these options unchecked)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you are ready, click “Create repository” to finalize the setup of an empty repository in GitHub.&lt;/p&gt;

&lt;p&gt;When the empty repository page loads, the link will look something like this: &lt;a href="https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo"&gt;https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will notice on this page, there is a URL that will be to the right of the HTTPS button. It will look like this: &lt;code&gt;https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo.git&lt;/code&gt;. You will want to copy this URL down as we will need it in Step 3 later on.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-initialize-your-github-connection-local"&gt;
  &lt;/a&gt;
  👨‍💻 Step 3: Initialize your GitHub connection (local)
&lt;/h2&gt;

&lt;p&gt;From the root of your project folder (the outermost folder that wraps everything, for me this is called &lt;code&gt;soundcloud&lt;/code&gt; which contains my /amplify folder, /public folder, /src folder, etc.), make sure that your terminal window is set at this level.&lt;/p&gt;

&lt;p&gt;You will initialize an empty git repository with a branch called main with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git init -b main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a hidden folder called &lt;code&gt;.git&lt;/code&gt; which will actually save and store all of our version control changes. It’s almost like a cookie that connects our local repository to the GitHub version.&lt;/p&gt;

&lt;p&gt;Next, we add our locally created files to this .git file with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We then want to commit these files we’ve added onto main to our specific repository that we are initializing for GitHub with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m “First Commit to GitHub”
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will probably add a lot of files listed out. Make sure that .gitignore is included in this list of added files and includes &lt;code&gt;node_modules&lt;/code&gt; so that you don’t upload a gazillion &lt;code&gt;node_modules&lt;/code&gt; files to GitHub ☺️&lt;/p&gt;

&lt;p&gt;In the github.com page with the URL that we copied down in Step 2, we will now use this to send our github files to this URL endpoint:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;make sure to change &lt;code&gt;YourGitHubHandle&lt;/code&gt; to your actual account:&lt;/li&gt;
&lt;li&gt;make sure to change &lt;code&gt;TechStackPlaybookPracticeRepo&lt;/code&gt; to the name of your actual repo you created on GitHub
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What this is effectively doing is telling git that, from the remote local version of our repository, we are going to add all of those files to the origin of this empty GitHub repository link online on the web.&lt;/p&gt;

&lt;p&gt;We will now set the new remote with this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will then see that there are 2 lines printed in the terminal, one that ends with (fetch) and one that ends with (push). We are calling this GitHub repository and pushing our code locally from the remote to GitHub in the cloud. &lt;/p&gt;

&lt;p&gt;Now that we’ve initialized the connection, we will push our code locally to the origin main which we’ve set as the destination in GitHub:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push -u origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will enumerate all the objects we want to push, it will then get compressed into threads to push them and will push to this GitHub link which is the one we want for this repository and the branch is set as one called &lt;code&gt;main&lt;/code&gt; and sets it to track it from origin.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-review-the-pushed-changes-in-github-web"&gt;
  &lt;/a&gt;
  👨‍💻 Step 4: Review the pushed changes in GitHub (web)
&lt;/h2&gt;

&lt;p&gt;On our GitHub repository page (&lt;a href="https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo"&gt;https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo&lt;/a&gt;), what was once empty, upon refreshing the page, should now show our codebase that we had locally on our computer now on this web page.&lt;/p&gt;

&lt;p&gt;What we have done is create a synced pair between our local repository (remote) and our GitHub repository (origin). However, this is just for our most recent changes on our local repository. What if we want to create ongoing pushes to our GitHub repository and do regular pushes as a backup to GitHub? We will review this with a tool called GitHub Desktop in the next step below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-set-up-github-desktop-to-manage-our-repository-local"&gt;
  &lt;/a&gt;
  👨‍💻 Step 5: Set up GitHub Desktop to manage our repository (local)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://desktop.github.com"&gt;&lt;br&gt;
GitHub Desktop&lt;/a&gt;, a Microsoft-created GitHub manager, is a GUI (graphical user interface) client/platform that creates an easy and efficient way to manage our GitHub repository right from our computer without needing to worry about typing the right command line scripts and sequences in the terminal.&lt;/p&gt;

&lt;p&gt;While it is very important to understand what is happening behind the scenes at the terminal level, for us to move fast, we need tools and ways to expedite and automate our work flow processes. When you are typing in the terminal, spelling errors and human error can cause us to make mistakes, errors, or lose precious time. GitHub Desktop helps developers move faster with their repositories and has been an amazing tool in my workflow.&lt;/p&gt;

&lt;p&gt;As a side note, there are other GUIs for Git and SCM (source control management) tooling, such as Kraken which is optimized for Azure DevOps, as well as GitLab.&lt;/p&gt;

&lt;p&gt;We will need to create a new repository in our GitHub Desktop client because while the repository is synced with github.com, our GitHub Desktop client wouldn’t have been updated to track this repository yet until we allow it.&lt;/p&gt;

&lt;p&gt;In the “Add” drop-down on the button to the right of the text field in the GitHub Desktop client, you will select the drop-down option: &lt;code&gt;Add Local Repository&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When we have the option to “Choose” a folder, we will want to select the outermost folder container for our project. For you, this might look like: &lt;code&gt;/user/Documents/GitHub/TechStackPlaybookPracticeRepo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once the outermost folder is selected, we will click &lt;code&gt;Add Repository&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will now connect to our hidden &lt;code&gt;.git&lt;/code&gt; file and anytime we make changes and save them in our code editor, GitHub Desktop will show those changes reflected in the GUI.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-6-push-new-changes-via-github-desktop-to-github-local"&gt;
  &lt;/a&gt;
  👨‍💻 Step 6: Push new changes via GitHub Desktop to GitHub (local)
&lt;/h2&gt;

&lt;p&gt;In GitHub Desktop, we should see 1 or more file changes reflected in the list of “changed files” on the left half of the app. In this video, I updated the README.md file, so that is why it has a check-mark next to &lt;code&gt;README.md&lt;/code&gt; and the app says &lt;code&gt;1 changed file&lt;/code&gt; at the top.&lt;/p&gt;

&lt;p&gt;In the bottom right, we will give our commit a name, which can be anything you wish. I said: &lt;code&gt;Updated Readme for YouTube!&lt;/code&gt;. You can also write a description if you want, but it is optional.&lt;/p&gt;

&lt;p&gt;At the top, you will see I have the current branch set to &lt;code&gt;main&lt;/code&gt;, as I only have 1 branch created for this video.&lt;/p&gt;

&lt;p&gt;When everything looks good, you will click the blue bottom at the bottom left that says “Commit to main`&lt;/p&gt;

&lt;p&gt;The bottom right button should now say &lt;code&gt;Push origin&lt;/code&gt;, and once you select this, it will send those updated changes committed to our local remote branch to the main GitHub branch on the web.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-7-review-the-pushed-changes-in-github-web"&gt;
  &lt;/a&gt;
  👨‍💻 Step 7: Review the pushed changes in GitHub (web)
&lt;/h2&gt;

&lt;p&gt;On our GitHub repository page (&lt;a href="https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo"&gt;https://github.com/YourGitHubHandle/TechStackPlaybookPracticeRepo&lt;/a&gt;), upon refreshing the page, you should see your changes reflected in the online version of the codebase, matching your changes locally as well. &lt;/p&gt;

&lt;p&gt;In this example, the README.md file reflects the change and in the file/folder list, you will see that all the folders/files have the commit message &lt;code&gt;First Commit to GitHub from Local&lt;/code&gt; except for one, which is that README.md file. It has a message that reads the same message we put into GitHub desktop: &lt;code&gt;Update Readme for YouTube!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;Check out the full recording below:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/uanVkqI2YHw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let me know if you found this post helpful! And if you haven't yet, make sure to check out these free resources below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Follow my Instagram for more: &lt;a href="https://instagram.com/brianhhough"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;I'm also on Tik Tok too: &lt;a href="https://www.tiktok.com/@brianhhough"&gt;@BrianHHough&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Watch my latest &lt;a href="https://youtube.com/brianhhough"&gt;YouTube video for more&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Listen to my Podcast on &lt;a href="https://podcasts.apple.com/us/podcast/tech-stack-playbook/id1553712082"&gt;Apple Podcasts&lt;/a&gt; and &lt;a href="https://open.spotify.com/show/01bHbabSyBmPfbc3ORMZa9?si=av_16aPbQEqL_bVu3RnO0g"&gt;Spotify&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join my FREE &lt;a href="https://facebook.com/groups/techstackplaybook"&gt;Tech Stack Playbook Facebook Group&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Join entrepreneurs and developers in the &lt;a href="https://bit.ly/HelpMeDevDiscordLink"&gt;HelpMeDev Discord Server&lt;/a&gt;&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's digitize the world together! 🚀&lt;/p&gt;

&lt;p&gt;-- Brian&lt;/p&gt;

</description>
      <category>git</category>
      <category>github</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>What was your win this week?</title>
      <author>Gracie Gregory (she/her)</author>
      <pubDate>Fri, 21 Jan 2022 17:20:48 +0000</pubDate>
      <link>https://dev.to/devteam/what-was-your-win-this-week-1h0b</link>
      <guid>https://dev.to/devteam/what-was-your-win-this-week-1h0b</guid>
      <description>&lt;p&gt;Hey there! &lt;/p&gt;

&lt;p&gt;Looking back on this past week, what was something you were proud of accomplishing?&lt;/p&gt;

&lt;p&gt;All wins count — big or small 🎉&lt;/p&gt;

&lt;p&gt;Examples of 'wins' include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Starting a new project&lt;/li&gt;
&lt;li&gt;Fixing a tricky bug&lt;/li&gt;
&lt;li&gt;Trying out a new recipe ... or whatever else might spark joy ❤️ &lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Congrats on all you've accomplished this past week!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/vv8R20yaYZIKk/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/vv8R20yaYZIKk/giphy.gif" alt="Pokémon happy dance" width="500" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
    <item>
      <title>Develop a Twitter clone with ReactJS</title>
      <author>Linh Truong Cong Hong</author>
      <pubDate>Fri, 21 Jan 2022 17:17:25 +0000</pubDate>
      <link>https://dev.to/linhtch90/develop-a-twitter-clone-with-reactjs-50dh</link>
      <guid>https://dev.to/linhtch90/develop-a-twitter-clone-with-reactjs-50dh</guid>
      <description>&lt;p&gt;I have developed a small social network web app for educational purpose and want to share this with the community. This app is built with ReactJS for frontend, Java Spring Boot for backend and MongoDB as the database.&lt;/p&gt;

&lt;p&gt;The app tries to mimic a few functions of Twitter, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create post with text and image&lt;/li&gt;
&lt;li&gt;The number of characters in each post is limited to 200 characters&lt;/li&gt;
&lt;li&gt;Like, comment and re-post a post&lt;/li&gt;
&lt;li&gt;View the number of likes, comments and shares of a post&lt;/li&gt;
&lt;li&gt;Comments are toggle&lt;/li&gt;
&lt;li&gt;The number of character in each comment is limited to 100 characters&lt;/li&gt;
&lt;li&gt;Follow, un-follow someone&lt;/li&gt;
&lt;li&gt;See who are following us and follow them back&lt;/li&gt;
&lt;li&gt;Check who we are following&lt;/li&gt;
&lt;li&gt;View all posts of an individual&lt;/li&gt;
&lt;li&gt;View our own posts&lt;/li&gt;
&lt;li&gt;List all user accounts in the entire social network (due to the number of users are still small, I did not develop search user function)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Due to limited storage space, client app compresses the uploaded image to the maximum of 250px (width or height) User avatar is created by hashing user id and convert that hash code into a hexagonal image&lt;/li&gt;
&lt;li&gt;Authentication and authorization use JWT&lt;/li&gt;
&lt;li&gt;Responsive frontend for desktop and mobile devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Technical stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Frontend: ReactJS, Redux Toolkit, React Router, React Bootstrap&lt;/li&gt;
&lt;li&gt;Backend: Java Spring Boot&lt;/li&gt;
&lt;li&gt;Database: MongoDB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please give me a ⭐ Github star ⭐ for my effort if you think this project is useful for you!&lt;/p&gt;

&lt;p&gt;Live Demo and Source Code:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/linhtch90/psn-social-network-public-source"&gt;https://github.com/linhtch90/psn-social-network-public-source&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>node</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Here's a secret to get a promotion at work even with WFH</title>
      <author>Tharun Shiv</author>
      <pubDate>Fri, 21 Jan 2022 17:04:47 +0000</pubDate>
      <link>https://dev.to/developertharun/heres-a-secret-to-get-a-promotion-at-work-even-with-wfh-1pac</link>
      <guid>https://dev.to/developertharun/heres-a-secret-to-get-a-promotion-at-work-even-with-wfh-1pac</guid>
      <description>&lt;p&gt;Let us look at 8 ways in which you can become a better engineer at work. Engineering not just involves various technologies to deal with and keep them running, but also several non-technical characteristics. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-working-as-an-engineer-is-all-about-the-right-mindset"&gt;
  &lt;/a&gt;
  1. Working as an Engineer is all about the right Mindset
&lt;/h2&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a. No blame game

b. Thirst to solve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;As an engineer we deal with multiple components and are a bridge between the users and the application. Even though the application is well written, a bigger responsibility falls upon Engineers to keep the applications and the services it uses up and running. In this process, there might be a few situations where one of the Engineers does a mistake that causes a disruption or even an outage. When this happens, the first thing to happen shouldn't be to blame anyone for the outage, but the following has to be performed. &lt;/p&gt;

&lt;p&gt;i. Fix the issue&lt;/p&gt;

&lt;p&gt;ii. Write an RCA ( Root Cause Analysis ) that mentions why the issue occurred in the first place, the names can be anonymous.&lt;/p&gt;

&lt;p&gt;iii. Mention the first aid and the fix for the issue&lt;/p&gt;

&lt;p&gt;iv. Discuss how the issue can be prevented the next time &lt;/p&gt;

&lt;p&gt;v. Set an ETA for the fix&lt;/p&gt;

&lt;p&gt;Another aspect is to have the right mindset to solve problems. As an Engineer you have the responsibility to optimize the infrastructure, fix issues, build automation tools, monitoring tools, and more, which requires a lot of problem-solving skills. Unless you have the thirst to solve the problems, you will only feel more stressed out, or even worse, would cause issues.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#2-communication"&gt;
  &lt;/a&gt;
  2. Communication
&lt;/h2&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a. Overcommunication is not a problem

b. Be kind and show empathy
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Are you performing a production activity or even a stage change that could affect other teams? Have you made progress in the project that you are working on? Make sure to keep the necessary stakeholders in sync always. Write emails, send slack messages well in advance before the production activity, just before and after the activity. It might sound like over-communication, but trust me, as the company scales, you need to keep everyone relevant to the component that you are working on in sync. This way, if they have to take any actions from their side, they will do it, or if they face any issues post-activity they'll know who the right person to get in touch with is.&lt;/p&gt;

&lt;p&gt;One other important characteristic to have as a human being is to be kind and show empathy. This will apply to all levels of engineering on either side of the conversation, period. Whether someone asks a silly question, or does a mistake, or behaves rudely with you, you should never mirror that behavior.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#3-stay-synced-with-the-team"&gt;
  &lt;/a&gt;
  3. Stay synced with the team
&lt;/h2&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;a. Do not miss team meetings

b. Prevent duplication of work

c. Do not compete, but contribute
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;In this work from home ( WFH ) period, the only time where you have an opportunity to speak to your teammates is during a team meet. The reason why this is special is, you get an opportunity to stay synced with your team on what they all are working on, whether they are blocked on any tasks, how you can contribute to their tasks and also you will be using this opportunity to convey on what you are working on and get help if necessary. This also prevents duplication of work.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-shadow-teammates-on-tasks-and-issues"&gt;
  &lt;/a&gt;
  4. Shadow teammates on tasks and issues
&lt;/h2&gt;

&lt;p&gt;The best way to learn is by doing it hands-on and the best way to begin would be by watching how it is done. I also believe that the best way to retain the learned information is by performing it repeatedly. This also includes watching your teammates perform the activities. It ensures that the activity is done without any mistakes when there are several eyes to watch it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-no-spoonfeeding-do-homework"&gt;
  &lt;/a&gt;
  5. No Spoon-feeding, do homework
&lt;/h2&gt;

&lt;p&gt;Do not expect all details to be taught by your teammates and seniors. Read the documentation, watch tutorials, read engineering blogs, practice on your own, and suggest improvisations. Even a well-built system will have much more efficient solutions, that you can propose. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#6-be-attentive-and-cautious-on-production"&gt;
  &lt;/a&gt;
  6. Be attentive and cautious on production
&lt;/h2&gt;

&lt;p&gt;I've heard people pretending to work while watching web series. They might be proud of their multitasking skills, but as far as I know, there is no such thing as multitasking at work while watching a web series and I highly recommend one to not do that. If you are interested in watching a series, I would suggest you use that motivation to focus on the work, finish the tasks quickly and reward yourself with a couple of episodes later in the evening.&lt;/p&gt;

&lt;p&gt;Attention is the core necessity of life, and the same holds true to an Engineer. Be attentive to the commands you run, the alerts you get, the trend the charts show, and the logs of the services and applications. Prepare for activities well in advance and let the actual activities be a no-brainer copy-paste so that you can pay attention to other indications during the activity.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-think-before-you-hit-enter"&gt;
  &lt;/a&gt;
  7. Think before you hit enter
&lt;/h2&gt;

&lt;p&gt;Do not underestimate sudo privilege. A lot of us have a habit to enter into the sudo mode as soon as we login into a machine, which is unnecessary. Even if the command you are running looks like a harmless command, make sure to get the process and commands reviewed by your teammates, seniors, or the subject experts, this will save you from outages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#8-keep-version-control-systems-in-sync"&gt;
  &lt;/a&gt;
  8. Keep version control systems in sync
&lt;/h2&gt;

&lt;p&gt;Whether it is NGINX config or any service config, make sure to keep the version control system that is isolated from the system in sync. No one hopes for the machine to become unresponsive, but when the machine becomes unusable all of a sudden, you have another opportunity to bring up alternate machines with the same configs as the previous ones. Keeping the version control system in sync also helps in automation.&lt;/p&gt;

&lt;p&gt;This article was initially written for an SRE, but the more I read it, the more I felt that this is not just for an SRE but for any Engineer.&lt;/p&gt;

&lt;p&gt;Check out my YouTube Channel here: &lt;a href="https://www.youtube.com/c/developerTharun"&gt;Developer Tharun - YouTube&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thank you for reading the article.&lt;/p&gt;

&lt;p&gt;Written by,&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__user ltag__user__id__378811"&gt;
  
    .ltag__user__id__378811 .follow-action-button {
      background-color: #1e90ff !important;
      color: #fdf9f3 !important;
      border-color: #1e90ff !important;
    }
  
    &lt;a href="/developertharun" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdxCiXS_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--CuAC2zZW--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/378811/dfe9c221-cff5-4e4d-9fcb-61fb3ca2bdd0.png" alt="developertharun image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/developertharun"&gt;Tharun Shiv&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/developertharun"&gt;Site Reliability Engineer | Blogger | Podcasts | Youtube @ developertharun&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#thank-you-for-reading-this-is-tharun-shiv-aka-developer-tharun"&gt;
  &lt;/a&gt;
  Thank you for reading, This is Tharun Shiv a.k.a Developer Tharun
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4DVZ_PES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtxq6bdms36fmn62450h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4DVZ_PES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtxq6bdms36fmn62450h.png" alt="Tharun Shiv" width="500" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>productivity</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Some Online Coding Games to Build Your Programming Skills</title>
      <author>Anne Quinkenstein</author>
      <pubDate>Fri, 21 Jan 2022 17:02:56 +0000</pubDate>
      <link>https://dev.to/annequinkenstein/games-to-learn-coding-3o9k</link>
      <guid>https://dev.to/annequinkenstein/games-to-learn-coding-3o9k</guid>
      <description>&lt;h3&gt;
  &lt;a href="#programming"&gt;
  &lt;/a&gt;
  Programming
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.mit.edu/mprat/Public/web/Terminus/Web/main.html"&gt;CLI/ Shell/ Terminal Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://vim-adventures.com/"&gt;learn VIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adventofcode.com"&gt;small programming puzzles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codingame.com"&gt;improve programming skills&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.pythonchallenge.com/"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://checkio.org/"&gt;python &amp;amp; typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://play.elevatorsaga.com/"&gt;javascript - move an elevator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neoan.us/game/"&gt;javascript - spacestation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexnisnevich.github.io/untrusted/"&gt;javascript again :)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://screeps.com/"&gt;javascript - also available on Steam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.flexboxdefense.com/"&gt;CSS Flexbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flexboxfroggy.com/"&gt;CSS Flexbox II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-challenges.com/"&gt;CSS challenges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cssgridgarden.com"&gt;CSS Gridlayout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://flukeout.github.io"&gt;CSS Selectors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rupl.github.io/unfold"&gt;CSS 3D Transformers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flexboxzombies.com/p/flexbox-zombies"&gt;CSS Flexboxzombies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cssbattle.dev/"&gt;HTML/ CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codecombat.com/"&gt;WebDev, APP Development, Game Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://robocode.sourceforge.io/"&gt;java &amp;amp; .NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ryanb/ruby-warrior"&gt;Ruby&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.steampowered.com/app/792100/7_Billion_Humans/"&gt;7 Billion Humans Programming-Game on Steam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://halite.io/"&gt;Halite - write bots in all languages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://terminal.c1games.com/"&gt;Terminal - same as Halite, write code to compete&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Steam Games of Zachtronics: &lt;a href="https://store.steampowered.com/app/716490/EXAPUNKS/"&gt;EXAPUNKS for assembly&lt;/a&gt;, &lt;a href="https://store.steampowered.com/app/504210/SHENZHEN_IO/"&gt;SHENZHEN I/O for electronic curcits&lt;/a&gt; or &lt;a href="https://store.steampowered.com/app/370360/TIS100/"&gt;rewrite corrupted code segments in TIS-100 &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://projecteuler.net/"&gt;Solving Problems in Projekt Euler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codewars.com/"&gt;solve puzzles in codewars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://store.steampowered.com/app/736260/Baba_Is_You/"&gt;Solving Puzzles in Baba is you on Steam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/quest"&gt;Learn to code with TwilioQuest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://minecraft.fandom.com/wiki/Tutorials/Setting_up_a_server"&gt;learning Java with setting up a minecraft Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cantunsee.space/"&gt;learning Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://serviceworkies.com/"&gt;learn about Service Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#for-kids"&gt;
  &lt;/a&gt;
  for Kids
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.codemonkey.com/"&gt;Codemonkey&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.codemoji.com"&gt;HTML, CSS, Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#security"&gt;
  &lt;/a&gt;
  Security
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.hackthissite.org/"&gt;CTF and others&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>Why "the best" css frameworks are sweeping dust under the rug? 🧹</title>
      <author>Leonardo Rafael Wehrmeister</author>
      <pubDate>Fri, 21 Jan 2022 16:59:48 +0000</pubDate>
      <link>https://dev.to/leonardorafael/why-the-best-css-frameworks-are-sweeping-dust-under-the-rug-2o0h</link>
      <guid>https://dev.to/leonardorafael/why-the-best-css-frameworks-are-sweeping-dust-under-the-rug-2o0h</guid>
      <description>&lt;p&gt;Hello devs 👋, &lt;/p&gt;

&lt;p&gt;I'm here to expose some questions without answers in this post. I do not want to promote any framework here. It's only a post to think about it. I'll show some of the HTML output that I classified as "sweeping dust under the rug". All frameworks have to implement the same design system, to be comparable here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The questions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Why the most starred, used and sponsored css frameworks do that?&lt;/li&gt;
&lt;li&gt;Why do we need to be guided by a work like that?&lt;/li&gt;
&lt;li&gt;Why do we have a lot of contributors that support things like that?&lt;/li&gt;
&lt;li&gt;Why don't they accept criticism?&lt;/li&gt;
&lt;li&gt;Why do they justify the bad code with answers like "do not recreate the wheel", "it's the most used", "it's the react/vue/* choice", "has a big community"?&lt;/li&gt;
&lt;li&gt;Are we limited by the popular css frameworks?&lt;/li&gt;
&lt;li&gt;Are we in a marketing game?&lt;/li&gt;
&lt;li&gt;Are we guided by "influencers dev" or "real devs"?&lt;/li&gt;
&lt;li&gt;Are they losting the love of code?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The HTML output that I classified as "sweeping dust under the rug", that needs to render a default outline input and a default button&lt;/strong&gt;&lt;/p&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a8ZRYkA4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1c80kz7lm6dt38nlsbth.png" alt="Image description" width="445" height="80"&gt;&lt;br&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xsoF0viY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jsr125dq0nkixkmnwza8.png" alt="Image description" width="128" height="128"&gt;&lt;br&gt;
&lt;strong&gt;Vuetify (~1040kb)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://vuetifyjs.com/"&gt;https://vuetifyjs.com/&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// an outlined input
&amp;lt;div class="v-input theme--light v-text-field v-text-field--is-booted v-text-field--enclosed v-text-field--outlined v-text-field--placeholder"&amp;gt;
  &amp;lt;div class="v-input__control"&amp;gt;
    &amp;lt;div class="v-input__slot"&amp;gt;
      &amp;lt;fieldset aria-hidden="true"&amp;gt;
        &amp;lt;legend style="width: 0px;"&amp;gt;
          &amp;lt;span class="notranslate"&amp;gt;&amp;amp;ZeroWidthSpace;&amp;lt;/span&amp;gt;
        &amp;lt;/legend&amp;gt;
      &amp;lt;/fieldset&amp;gt;
      &amp;lt;div class="v-text-field__slot"&amp;gt;
        &amp;lt;label for="input-535" class="v-label theme--light" style="left: 0px; right: auto; position: absolute;"&amp;gt;Outlined&amp;lt;/label&amp;gt;
        &amp;lt;input id="input-535" type="text"&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="v-text-field__details"&amp;gt;
      &amp;lt;div class="v-messages theme--light"&amp;gt;
        &amp;lt;div class="v-messages__wrapper"&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;


// a button
&amp;lt;button type="button" class="v-btn v-btn--is-elevated v-btn--has-bg theme--light elevation-2 v-size--default" file="v-btn/usage"&amp;gt;
  &amp;lt;span class="v-btn__content"&amp;gt;
    &amp;lt;span&amp;gt;Click Me&amp;lt;/span&amp;gt;
  &amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FHQH9VIA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lqdv5syzs8f5utabwdt.png" alt="Image description" width="158" height="128"&gt;&lt;br&gt;
&lt;strong&gt;Material UI (~329kb)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://v4.mui.com/"&gt;https://v4.mui.com/&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// an outlined input
&amp;lt;div class="MuiFormControl-root MuiTextField-root"&amp;gt;
  &amp;lt;label class="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined" data-shrink="false" for="outlined-basic" id="outlined-basic-label"&amp;gt;Outlined&amp;lt;/label&amp;gt;
  &amp;lt;div class="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"&amp;gt;
    &amp;lt;input type="text" aria-invalid="false" id="outlined-basic" class="MuiInputBase-input MuiOutlinedInput-input" value=""&amp;gt;
    &amp;lt;fieldset aria-hidden="true" class="jss64 MuiOutlinedInput-notchedOutline"&amp;gt;
      &amp;lt;legend class="jss66"&amp;gt;
        &amp;lt;span&amp;gt;Outlined&amp;lt;/span&amp;gt;
      &amp;lt;/legend&amp;gt;
    &amp;lt;/fieldset&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

// a button
&amp;lt;button class="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedPrimary" tabindex="0" type="button"&amp;gt;
  &amp;lt;span class="MuiButton-label"&amp;gt;Primary&amp;lt;/span&amp;gt;
  &amp;lt;span class="MuiTouchRipple-root"&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cntSRPeS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06o4zzu8652b26qkhccq.png" alt="Image description" width="128" height="128"&gt;&lt;br&gt;
&lt;strong&gt;Material Design Components (~921kb)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://material.io/components"&gt;https://material.io/components&lt;/a&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// an outlined input
&amp;lt;div class="inline-text-field-container"&amp;gt;
  &amp;lt;div class="mdc-text-field mdc-text-field--outlined"&amp;gt;
    &amp;lt;input class="mdc-text-field__input" autocorrect="off" autocomplete="off" spellcheck="false" id="demo-mdc-text-field" maxlength="524288"&amp;gt;
    &amp;lt;div class="mdc-notched-outline mdc-notched-outline--upgraded"&amp;gt;
      &amp;lt;div class="mdc-notched-outline__leading"&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;div class="mdc-notched-outline__notch"&amp;gt;
        &amp;lt;label for="demo-mdc-text-field" class="mdc-floating-label" style=""&amp;gt;
          &amp;lt;!----&amp;gt;Label
          &amp;lt;!----&amp;gt;
        &amp;lt;/label&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class="mdc-notched-outline__trailing"&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

// a outlined input
&amp;lt;button class="mdc-button mdc-button--raised inline-demo-button mdc-ripple-upgraded"&amp;gt;
  &amp;lt;span class="mdc-button__label"&amp;gt;
    &amp;lt;!----&amp;gt;Button
    &amp;lt;!----&amp;gt;
  &amp;lt;/span&amp;gt;
  &amp;lt;div class="mdc-button__ripple"&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwhevu_O--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/supxq5079rdbujebuqy5.png" alt="Image description" width="261" height="128"&gt;&lt;br&gt;
&lt;strong&gt;Beercss (~62kb)&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://www.beercss.com"&gt;https://www.beercss.com&lt;/a&gt;&lt;br&gt;
(newest and not popular) &lt;br&gt;
&lt;/center&gt;
&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// an outlined input
&amp;lt;div class="field label border"&amp;gt;
  &amp;lt;input type="text"&amp;gt;
  &amp;lt;label&amp;gt;Label&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;

// a button
&amp;lt;button&amp;gt;Button&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;That's it guys, just think about it!&lt;br&gt;
Bye 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>react</category>
      <category>vue</category>
    </item>
    <item>
      <title>[GDB-Quick] Prints  – No Need to do "std::cout" and compile again </title>
      <author>mahesh_attarde</author>
      <pubDate>Fri, 21 Jan 2022 16:59:09 +0000</pubDate>
      <link>https://dev.to/maheshattarde/gdb-quicks-print-info-no-need-to-do-stdcout-and-compile-again-52lc</link>
      <guid>https://dev.to/maheshattarde/gdb-quicks-print-info-no-need-to-do-stdcout-and-compile-again-52lc</guid>
      <description>&lt;p&gt;For debugging, most obvious way to start is adding print. &lt;br&gt;
When we have gdb, we dont need that (implied software built is in debug mode). &lt;br&gt;
Lets see alternate ways to do that in gdb.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#printing-variable-at-some-line"&gt;
  &lt;/a&gt;
  Printing Variable at some line.
&lt;/h3&gt;

&lt;p&gt;We have breakpoints at hand. when breakpoint hits we can print variable values required or message needed (like which if-else branch taken (-&lt;em&gt;q), ¯_(ツ)&lt;/em&gt;/¯ ).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(gdb) break source.cpp:50  &amp;lt;enter&amp;gt;
(gdb) command &amp;lt;enter&amp;gt;
Type commands for breakpoint(s) 1, one per line.
End with a line saying just "end".
&amp;gt;print "hello World!" 
&amp;gt;end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When breakpoint hits on source file source.cpp at line 50 It prints "hello World!". No need to edit code or recompile it!&lt;/p&gt;

&lt;p&gt;On breakpoint, we specify series of commands that need to process. it can be made simple as printing single variable to printing complete data-structure.&lt;/p&gt;

&lt;p&gt;Same can be done with dprintf breakpoint and print, however first one provides more flexible and easy to use formatting. I hate dprintf!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#print-but-more-efficient"&gt;
  &lt;/a&gt;
  Print but more efficient
&lt;/h3&gt;

&lt;p&gt;Our first command of use is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(gdb) print a
(gdb) p a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is fine, even if we have array. &lt;br&gt;
At times we are interested in buffer contents irrespective of its data structure, treating it like memory area.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(gdb) print &amp;amp;a@10 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above command accepts address and 10 further locations from it. try  a@10 and see how cool that feature becomes!&lt;/p&gt;

&lt;p&gt;same with different formatting, printing 20('n'umber) 'f'ormat 'w'ords  with address a&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;(gdb) x/20fw &amp;amp;a
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also want to check same variable at different breakpoints&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;display &amp;lt;var_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is easiest way than doing p  everytime.&lt;/p&gt;

&lt;p&gt;HTH, Happy Hacking!&lt;/p&gt;

</description>
      <category>c</category>
      <category>cpp</category>
      <category>gdb</category>
    </item>
    <item>
      <title>CodeSignal - Best coding challenge website</title>
      <author>BigCityC</author>
      <pubDate>Fri, 21 Jan 2022 16:50:21 +0000</pubDate>
      <link>https://dev.to/bigcityc/codesignal-best-coding-challenge-website-2f2h</link>
      <guid>https://dev.to/bigcityc/codesignal-best-coding-challenge-website-2f2h</guid>
      <description>&lt;p&gt;Throughout my journey learning front end web development I have been through a lot of different coding challenge websites.&lt;/p&gt;

&lt;p&gt;A few months ago, I was introduced to CodeSignal, and have been using it ever since.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-impressions"&gt;
  &lt;/a&gt;
  First Impressions
&lt;/h2&gt;

&lt;p&gt;I recently took an hour coding test on CodeSignal. After enjoying the experience, I signed up. I found the UI to be really fun and engaging. I’ve tried using other code challenge websites in the past, and always found them unnecessarily confusing, and lacking character. Meanwhile, I found CodeSignal to be full of color, with an easy layout to understand.&lt;/p&gt;

&lt;p&gt;The basic version has two options.. Arcade or Interview Practice.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JA5JXLn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/447sh4kjl5cz23qywnhe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JA5JXLn2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/447sh4kjl5cz23qywnhe.png" alt="Options" width="420" height="488"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-practice"&gt;
  &lt;/a&gt;
  Interview Practice
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;I find this feature to be really useful, and I appreciate the organization of the topics at hand. For example, the first topic is Data Structures, and it covers Arrays, Linked Lists, Hash Tables, Trees, Heaps, Stacks and Queues.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Plus!&lt;/strong&gt; The challenges tell you which companies have asked them in the past.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b-eMfPje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tqvhihs7pov90kkl92u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b-eMfPje--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tqvhihs7pov90kkl92u.png" alt="asked by Amazon, Microsoft and Apple" width="597" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-arcade"&gt;
  &lt;/a&gt;
  The Arcade
&lt;/h2&gt;

&lt;p&gt;What a fun name for a place to drill no-context coding challenges day in and day out. The UI is an exciting place to be as well, making you feel like you are digging your well of knowledge deeper and deeper by taking advantage of the “endless scroll” that so many other websites take advantage of… but this time for good instead of evil!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BhL3yUwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4gtjoyuz77emmjjvknj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BhL3yUwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4gtjoyuz77emmjjvknj.png" alt="asked by Amazon, Microsoft and Apple" width="880" height="1139"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-approach"&gt;
  &lt;/a&gt;
  My Approach
&lt;/h2&gt;

&lt;p&gt;I use CodeSignal to practice for technical interviews.&lt;br&gt;
I do one challenge per day, that consists of two 15 minute sessions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the first 15 minutes&lt;/em&gt;, I attempt to solve the challenge by myself, with no help from the internet. I make sure to document my thought process using comments.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the second 15 minutes&lt;/em&gt;, I compare my answer and thought process to other correct answers. This is a feature I like about CodeSignal, once you solve the question, you unlock all of the other correct answers. It isn’t this easy on other code challenge websites. In some cases you have to spend coins to unlock the solutions.&lt;/p&gt;

&lt;p&gt;Once the initial 15 minutes is up, if I haven’t solved the challenge… I google the answer. Although, instead of simply copy/pasting the answer and moving on, I compare the thought process of the answer I found to mine.&lt;/p&gt;

&lt;p&gt;Overall, I think CodeSignal is the most useful code challenge website. I find it’s user experience to be really ergonomic and I plan on continuing to use it on a daily basis to improve my coding.&lt;/p&gt;

</description>
      <category>codesignal</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
