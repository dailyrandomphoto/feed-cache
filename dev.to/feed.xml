<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Create a Loader!</title>
      <author>Ustariz Enzo</author>
      <pubDate>Fri, 03 Dec 2021 07:03:08 +0000</pubDate>
      <link>https://dev.to/ziratsu/how-to-create-a-loader-2f7h</link>
      <guid>https://dev.to/ziratsu/how-to-create-a-loader-2f7h</guid>
      <description>&lt;p&gt;Hey &lt;strong&gt;fellow creators&lt;/strong&gt;,&lt;/p&gt;

&lt;p&gt;You want to add a &lt;em&gt;loader&lt;/em&gt; to your app, but don't know where to start? Look no further!&lt;/p&gt;

&lt;p&gt;If you prefer to watch the video &lt;strong&gt;version&lt;/strong&gt;, it's right here :&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fnv9lifum1w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here's the &lt;a href="https://codepen.io/Enzo-Ustariz/pen/LYygJEK"&gt;source code&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-the-html-structure"&gt;
  &lt;/a&gt;
  1. The HTML structure.
&lt;/h2&gt;

&lt;p&gt;Create a &lt;em&gt;loader-container&lt;/em&gt; with three dots inside it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"loader-container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot d1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot d2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"dot d3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-style-the-loader"&gt;
  &lt;/a&gt;
  2. Style the loader.
&lt;/h2&gt;

&lt;p&gt;Style the loader with a &lt;em&gt;position: absolute&lt;/em&gt; and make it take the full width and height of the viewport. Then, make sure the three dots are centered in the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.loader-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;1s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-animate-the-loader"&gt;
  &lt;/a&gt;
  3. Animate the loader.
&lt;/h2&gt;

&lt;p&gt;Now, style the dots so that they can be easily seen (make it 25px wide and 25px high) and color them black. Finally, add an animation that you'll create right after this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.dot&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="n"&gt;infinite&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;alternate&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The key to the animation is to add a delay to the second and third dots' animation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.d2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.05s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.d3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;animation-delay&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, create the animation with a keyframe:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You've created a simple but effective &lt;em&gt;loader in CSS&lt;/em&gt;, well done!&lt;/p&gt;

&lt;p&gt;Come and take a look at my &lt;strong&gt;Youtube channel&lt;/strong&gt;: &lt;a href="https://www.youtube.com/c/Learntocreate/videos"&gt;https://www.youtube.com/c/Learntocreate/videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;See you soon!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Enzo. &lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is exactly working as a software engineer?</title>
      <author>Manu Martinez</author>
      <pubDate>Fri, 03 Dec 2021 06:26:51 +0000</pubDate>
      <link>https://dev.to/whitehatdevv/what-is-exactly-working-as-a-software-engineer-12n7</link>
      <guid>https://dev.to/whitehatdevv/what-is-exactly-working-as-a-software-engineer-12n7</guid>
      <description>&lt;p&gt;Yeah, it's can be summarised as a &lt;strong&gt;stressful&lt;/strong&gt; life 😅, something that everyone wouldn't able to &lt;em&gt;overcome&lt;/em&gt;, I know a lot people who have &lt;strong&gt;run away&lt;/strong&gt; 😖. I'm going to be &lt;em&gt;honest&lt;/em&gt;, if you want to become a &lt;strong&gt;software engineer&lt;/strong&gt; you must be focus on your aim, forgetting anything else. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Only, if you want to be a greatest developer. If not please continue with your distractions like I wouldn't have anything.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I'm sure you know what is exactly an &lt;em&gt;error&lt;/em&gt;, this that gives you serious headaches as the days passed, it which doesn't allow you to &lt;strong&gt;sleep&lt;/strong&gt;, these too large &lt;strong&gt;log errors&lt;/strong&gt; that never end, mainly an IDE completely filled with red alerts saying that &lt;strong&gt;your shit code doesn't/will never compile&lt;/strong&gt;. Sincerely, I love 😍 this situation, I learn a lot from this error trying to figure out what is happening there, trying to understand why my shit code is not working, getting my lead petty &lt;strong&gt;pissed off&lt;/strong&gt; 😁. &lt;strong&gt;YES&lt;/strong&gt;, &lt;em&gt;DEAR FRIEND&lt;/em&gt;, it means what software engineer life looks like. &lt;/p&gt;

&lt;p&gt;You must understand that it will be part of you life as a &lt;strong&gt;software engineer&lt;/strong&gt;, you will have tons of serious headaches and there isn't any pill that remove this feeling, 😇 you should keep relaxed and focusing in your work without distractions while your boss is asking about the errors and you don't know what you should him 😙, &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I'm working on the error (this is a really shit lie) 💩&lt;/li&gt;
&lt;li&gt;I don't know why my code doesn't work (it's also a lie) 👻&lt;/li&gt;
&lt;li&gt;I'm up to the balls, I hate this &lt;strong&gt;fuck error&lt;/strong&gt; and I don't know how can I fix it and continue with my normal error 🎃, &lt;strong&gt;yeah&lt;/strong&gt;, it's exactly what is &lt;em&gt;happening&lt;/em&gt;, but I know you don't have enough &lt;strong&gt;balls&lt;/strong&gt; to tell him the &lt;strong&gt;TRUTH&lt;/strong&gt;, you think you will get disqualify, but &lt;strong&gt;NO&lt;/strong&gt;, you have a serious &lt;strong&gt;problem&lt;/strong&gt;, you are &lt;strong&gt;wrong&lt;/strong&gt; 🤖, you need help, you need some advices from &lt;strong&gt;someone&lt;/strong&gt; who knows more about you, please be &lt;strong&gt;honest&lt;/strong&gt; 🙀, you don't know &lt;strong&gt;everything&lt;/strong&gt;, you are only one more &lt;strong&gt;developer&lt;/strong&gt;, who knows only _what is needed _, but it's real &lt;strong&gt;you have a serious problem&lt;/strong&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🤧, You need to learn how to work in &lt;strong&gt;team&lt;/strong&gt;, but I'm sure you are thinking: "&lt;em&gt;I know how to work in team&lt;/em&gt;", but &lt;strong&gt;NO&lt;/strong&gt;, you are really &lt;strong&gt;wrong&lt;/strong&gt;, working in team means is exactly asking to your teammates &lt;em&gt;whatever you need/you don't know&lt;/em&gt;. Working in team is &lt;strong&gt;synonymous&lt;/strong&gt; that problems are for all of us, if you have a serious &lt;strong&gt;problem&lt;/strong&gt; your team too. Remember 😵‍💫, you are getting paid to bring a solution to a customer, you must deliver a &lt;strong&gt;product&lt;/strong&gt;, your code doesn't care, you are not getting paid to write code, &lt;/p&gt;

&lt;p&gt;YOU ARE GETTING PAID TO CREATE CUSTOMER SOLUTIONS 🤒&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;haters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="nx"&gt;lengthPost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;haters&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yeah, this is the &lt;em&gt;fuck&lt;/em&gt; *&lt;em&gt;real fact *&lt;/em&gt; 😮‍💨. One day, a developer with really more more more more more more ...... (ten mores later 🤝) said me that I need to focus on customer solutions not in coding 💀, first I really got confused for a while but I understood what it exactly means 🤑. &lt;/p&gt;

&lt;p&gt;Really, I'm here to teach you how to be a great developer, STOP &lt;em&gt;learning how to code&lt;/em&gt; 🤕, first focus on &lt;em&gt;understand&lt;/em&gt; what you are doing, 😨 focus on learn estimations, to learn how many time takes you making a real project, try to be honest, you are not &lt;em&gt;Albert Einstein&lt;/em&gt; 😶‍🌫️, you are a normal person who need to think about what will be implemented and who need some time to fix some code mistakes and resolve some conflicts (if you works with GIT). You must figure out what is live as a software engineer. &lt;/p&gt;

&lt;p&gt;Please, &lt;strong&gt;STOP&lt;/strong&gt; 🛑 thinking in money and focus on be the best version of you then I promise you that you will earn a lot of money working as a developer 😁.&lt;/p&gt;

&lt;p&gt;I hope you have just come to the earth (if you are not here before 🤝), I really want to make clear with you, telling you what are the advantages and disadvantage of working in this profession. In the following post I will start sharing with you personal experiences that allow you to understand more about a real software engineer life, &lt;em&gt;if you like this post please share with your friends&lt;/em&gt;, I know that &lt;strong&gt;truth&lt;/strong&gt; is really resilient 🙀, but &lt;strong&gt;why should I lie you&lt;/strong&gt;?&lt;/p&gt;

</description>
      <category>programming</category>
      <category>software</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>12 Tools Web Developers can Learn in 2022</title>
      <author>javinpaul</author>
      <pubDate>Fri, 03 Dec 2021 05:51:09 +0000</pubDate>
      <link>https://dev.to/javinpaul/12-tools-web-developers-can-learn-in-2022-3ia9</link>
      <guid>https://dev.to/javinpaul/12-tools-web-developers-can-learn-in-2022-3ia9</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, It's a popular saying that a craftsman is as good as his tools and the same goes for Web Developers, both frontend and backend developers. &lt;/p&gt;

&lt;p&gt;If you don't know your tools, you will struggle in your day-to-day job. At the same time, knowing your tool well can increase your productivity and help you become a star developer in your team. &lt;/p&gt;

&lt;p&gt;That's why I always in search of new tools which can make my developer life easy. Earlier, I have shared the &lt;a href="https://javarevisited.blogspot.com/2019/02/10-tools-advanced-java-developers-should-know.html"&gt;best tools for Java developers&lt;/a&gt; and In this article, I am going to share some of the most essential tools for Web developers, both frontend and backend developers. &lt;/p&gt;

&lt;p&gt;These are the tools and libraries which I use in my day-to-day life for web development, primarily backend and server side development, and there is a good chance that you may already be familiar with most of them, which is great.&lt;/p&gt;

&lt;p&gt;The point here is to learn more about those tools so that you can use them effectively and take your Web development skills to the next level. &lt;/p&gt;

&lt;p&gt;There is also a lot of articles on the internet about web development tools and technology, but most of them are filled with non-practical information like &lt;a href="https://javarevisited.blogspot.com/2019/01/10-web-development-frameworks-fullstack-developer-should-learn.html"&gt;JavaScript framework&lt;/a&gt; and &lt;a href="https://www.java67.com/2019/01/top-10-javascript-frameworks-and-libraries-for-web-developers.html"&gt;libraries&lt;/a&gt;, which are not needed in day-to-day life.&lt;/p&gt;

&lt;p&gt;In Today's world, we are really lucky to have these powerful tools which can save a lot of time while developing, testing, debugging, deploying, and even scaling your application. &lt;/p&gt;

&lt;p&gt;I have been doing web development when "View Source" on IE and JavaScript alert() was our only source for browser-based debugging. Today, you have powerful tools like Chrome Developer Tool and Firebug for such things.&lt;/p&gt;

&lt;p&gt;If you are looking to become a better Web Developer in 2022 and ready to level up your skill learning these tools will go a long way in improving both your skill and productivity. I have also shared the best resources and online courses to learn these tools and you can use them for further learning.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fthe-complete-web-development-bootcamp%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ax2NIZe1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-UJV5bk60F78/YLmuiE71sMI/AAAAAAAAoCM/-9_AQOsiYR0-SKWPrvoX6YWIhYUvNUGpgCLcBGAsYHQ/w423-h238/image.png" alt="best web development tools for beginners " width="423" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-essential-tools-for-frontend-and-backend-developers-can-learn-in-2022"&gt;
  &lt;/a&gt;
  12 Essential Tools for Frontend and Backend Developers can Learn in 2022
&lt;/h2&gt;

&lt;p&gt;I have initially planned to share just 10 tools but the list has grown and I have added two more tools to the list. To be honest, there are a lot more tools and alternatives of each tool available but learning all of them is not possible, it's not practical at all, hence learning just one tool from each category like &lt;a href="https://javarevisited.blogspot.com/2018/09/top-5-courses-to-learn-intellij-idea-java-and-android-development.html#axzz6A8Vy1sea"&gt;IDE&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/01/10-unit-testing-and-integration-tools-for-java-programmers.html"&gt;Testing tool&lt;/a&gt;, debugging tool, and &lt;a href="https://javarevisited.blogspot.com/2020/11/why-devops-engineer-learn-docker-kubernetes.html#axzz6dXsEfLvJ"&gt;containers&lt;/a&gt; are enough.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Anyway, if you come across any other handy tool which can really boost Web developer's productivity, feel free to share with us and I'll add that to this list.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Without wasting any more of your time, here is my list of some of the most essential tools for frontend and backend developers to learn in 2022:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-vs-code"&gt;
  &lt;/a&gt;
  1. VS Code
&lt;/h3&gt;

&lt;p&gt;This is the single most important tool for a Web developer in 2022. I have been doing web development for quite a long and have used many IDEs and Editors like Atom, Sublime, &lt;a href="https://medium.com/javarevisited/10-best-eclipse-plugins-for-java-and-spring-boot-development-e814305831cb"&gt;Eclipse&lt;/a&gt;, and &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-intellij-idea-for-beginners-and-experienced-java-programmers-2e9aa9bb0c05"&gt;IntelliJIDEA&lt;/a&gt; but VS Code is something else. &lt;/p&gt;

&lt;p&gt;It's both lightweight and powerful. Initially, it comes with a basic feature but you can customize it for your need by downloading extensions.&lt;/p&gt;

&lt;p&gt;There are so many VS extensions available ranging from debugging, connecting to git, deploying into the cloud, like &lt;a href="https://medium.com/javarevisited/5-best-azure-fundamentals-courses-to-pass-az-900-certification-exam-in-2020-9e602aea035d"&gt;Azure&lt;/a&gt; and &lt;a href="https://medium.com/javarevisited/top-10-cloud-certification-to-aim-in-2022-aws-azure-and-google-cloud-platform-bd054fff0538"&gt;AWS&lt;/a&gt;, and much more. &lt;/p&gt;

&lt;p&gt;There is a good chance that you already familiar with VS Code but if you don't I strongly suggest you learn VS Code in 2022. And if you need a tutorial or a course, I would suggest you check this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fvisual-studio-code-tutorial%2F"&gt;Visual Studio Code Tutorial - Getting Started With VS Code&lt;/a&gt;&lt;/strong&gt; course on Udemy for more details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fvisual-studio-code-tutorial%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rW0eS2vH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-XoTFQYx5Ifs/YLmu0fJJAeI/AAAAAAAAoCY/pgdbMfxUGz8qA45mTmIrVoEvXj69Bi1QQCLcBGAsYHQ/w384-h198/logo.png" alt="best courses to learn VS code for web developers" width="384" height="198"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-chrome-developer-tools"&gt;
  &lt;/a&gt;
  2. Chrome Developer Tools
&lt;/h3&gt;

&lt;p&gt;This is another essential tool for Web Developers. It let you see what's going on in the browser. By using Chrome developer tools you can examine different HTML elements, can play with &lt;a href="https://javarevisited.blogspot.com/2020/09/top-5-css-cascading-style-sheet-courses-for-beginners.html"&gt;CSS&lt;/a&gt;, and also check JavaScript.&lt;/p&gt;

&lt;p&gt;It also lets you see a lot more details about downloaded scripts, network connections, and so on. It's a great tool for browser-based debugging, particularly for frontend developers and you should learn it in 2022.&lt;/p&gt;

&lt;p&gt;If you need a tutorial or course, check out this &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fmaster-google-chrome-developer-tools%2F"&gt;&lt;strong&gt;DevTools Course on Udemy&lt;/strong&gt;&lt;/a&gt; to learn more. &lt;/p&gt;

&lt;p&gt;If you need an alternative, Firebox has firebug which is also a good tool for debugging web pages in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2020/10/best-frontend-skills-web-developer.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lYlmcLho--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-KRerpQ_8jvM/YLmwfg2DoFI/AAAAAAAAoDs/ofNqVGpibMc5YNKZdKLFUERCU7sGGbcoQCLcBGAsYHQ/1904450_51db_3-750x405.jpg" alt="best course to learn Chrome Developer tool" width="512" height="276"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-postman"&gt;
  &lt;/a&gt;
  3. Postman
&lt;/h3&gt;

&lt;p&gt;Modern Web development is all about APIs and Postman is a great tool to interact with those APIs. During development, if you want to get familiar with a third-party library, you can use &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-postman-tutorials-and-courses-for-web-developers.html"&gt;Postman&lt;/a&gt; to interact with it like you can send GET and POST requests, set request headers, examine response headers, and other HTTP metadata.&lt;/p&gt;

&lt;p&gt;Postman is also very useful for REST API testing and that's why it's an essential tool for both frontend and backend developers. &lt;/p&gt;

&lt;p&gt;I strongly suggest you learn Postman in 2022 and if you need a resource, I would suggest checking this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpostman-the-complete-guide%2F"&gt;Postman: The Complete Guide - REST API Testing on Udemy&lt;/a&gt;&lt;/strong&gt; by Valentine Despa.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fpostman-the-complete-guide%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L3EHSp0P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-eoIFbhxbiz4/YLmvoRrGhAI/AAAAAAAAoC0/ov4OJZ5h2_4KaeLP8fBN5GWbLCPOAAwLgCLcBGAsYHQ/image.png" alt="best course to learn Postman for beginners " width="512" height="295"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-docker"&gt;
  &lt;/a&gt;
  4. Docker
&lt;/h3&gt;

&lt;p&gt;Containers are essential for modern web developers. Containers not only make development easier but also makes deployment smoother. Instead of deploying your application and its dependencies separately, you deploy a container, which is both easier to manage and scale. And, any discussion of containers is incomplete without talking about &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html"&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is one of the most popular container platforms for developers and a must-know tool for Web Developers. &lt;/p&gt;

&lt;p&gt;Whether you are a frontend developer or a backend geek, I strongly suggest you learn Docker in 2022 and if you need resources this &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;Docker &amp;amp; Kubernetes: The Practical Guide&lt;/a&gt;&lt;/strong&gt; by Maximilian Schwarzmuller of AcadMind on Udemy is the best course to start with.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vSIGPWB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-EDvEbXHka9M/YLmv6DLtCkI/AAAAAAAAoDA/proaOG-F5PgMJH8MK6Q8x5c_GiAo5bFYgCLcBGAsYHQ/w452-h226/iStock-1144628524.jpg" alt="best course to learn Docker" width="452" height="226"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-gitbash"&gt;
  &lt;/a&gt;
  5. GitBash
&lt;/h3&gt;

&lt;p&gt;There are a lot of git clients available online, both GUI and command line but if you work in Windows and love to work in the command line then there is no better than Gitbash.&lt;/p&gt;

&lt;p&gt;Though &lt;a href="https://javarevisited.blogspot.com/2021/05/favorite-courses-to-learn-visual-studio-code-f.html"&gt;VS Code&lt;/a&gt; and other IDEs already provide Github integration, sometimes you prefer to work in the command line, particularly if you are committing a large block of code or merging changes from different branches.&lt;/p&gt;

&lt;p&gt;In Linux, it's easy to execute all those git commands but in Windows, it's a bit challenging and that's where Gitbash helps. &lt;/p&gt;

&lt;p&gt;If you want to learn more about Git and Github in general then you can also check out the new &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fgit-and-github-bootcamp%2F"&gt;Git &amp;amp; Github Bootcamp course&lt;/a&gt;&lt;/strong&gt; by none other than Colt Steele, one of my favorite instructors on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2019/04/top-5-courses-to-learn-git-and-github.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kK4tOMBY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-FuYuhDmx9bc/YLmwKTLgy4I/AAAAAAAAoDY/29GqBT53_AM8Of0ttn2HWegTa5v0i2lwACLcBGAsYHQ/w404-h215/intro.jpg" alt="best course to learn Git and Github" width="404" height="215"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-npm-node-package-manager"&gt;
  &lt;/a&gt;
  6. NPM (Node Package Manager)
&lt;/h3&gt;

&lt;p&gt;NPM stands for Node Package manager, It's the most important tool for web developers. While working on a web development project, you need to use and import a lot of other JavaScript frameworks and libraries like &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-react-js-and-redux-courses-to-learn-online.html#axzz5r06B3egD"&gt;React.js&lt;/a&gt; for UI, or &lt;a href="https://javarevisited.blogspot.com/2019/08/top-5-online-courses-to-learn-vue.js-best.html#axzz6gKWXwaTQ"&gt;Vue.js&lt;/a&gt; for frontend, Jest library for unit testing, and many more. NPM can do all that for you.&lt;/p&gt;

&lt;p&gt;It puts modules in place so that nodes can find them, and manages dependency conflicts intelligently. Most commonly, it is used to publish, discover, install, and develop node programs. Run npm help to get a list of available commands.&lt;/p&gt;

&lt;p&gt;If you want to learn more about NPM, you can also check out the &lt;strong&gt;&lt;a href="https://javarevisited.blogspot.com/2021/06/Understanding%20NPM%20-%20Node.js%20Package%20Manager"&gt;Understanding NPM - Node.js Package Manager course&lt;/a&gt;&lt;/strong&gt; by Bogdan Stashchuk on Udemy. It's a nice course to learn about NPM or Node package manager in detail.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/01/top-5-nodejs-and-express-js-online-courses-for-web-developers.html#axzz5VllnxgVT"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFZDzgQl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-gMNOw2mLrdM/YLmwnB6ZkNI/AAAAAAAAoD0/tWz2FdFJPykXVairAt5527b0Eqxx_hP0wCLcBGAsYHQ/86d0f5769d.jpg" alt="best courses to learn NPM" width="512" height="284"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#7-webpack"&gt;
  &lt;/a&gt;
  7. Webpack
&lt;/h3&gt;

&lt;p&gt;Webpack is a build tool that puts all of your assets, including Javascript, images, fonts, and &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-html-5-and-css-3-courses-for-web-developers.html"&gt;CSS&lt;/a&gt;, in a dependency graph. Webpack lets you use require() in your source code to point to local files, like images, and decide how they're processed in your final Javascript bundle, like replacing the path with a URL pointing to a CDN.&lt;/p&gt;

&lt;p&gt;If you're building a complex frontend application with many non-code static assets such as CSS, images, fonts, etc, then yes, Webpack will give you great benefits. &lt;/p&gt;

&lt;p&gt;If you want to learn more then I suggest you check out **&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fwebpack-from-beginner-to-advanced%2F"&gt;Webpack 5: The Complete Guide For Beginners&lt;/a&gt; **on 'Udemy. It's a great course to learn about WebPack, Bable, NPM, and Node.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/01/10-things-web-developers-should-learn.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fY8LvIs0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-hxbUfnGpxRA/YLmwtsb-ucI/AAAAAAAAoD8/nY6fjpKzuPkYH7DPfK9pGaEi0dT4DOQFgCLcBGAsYHQ/image.png" alt="best course to learn WebPack" width="225" height="225"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#8-jasmine"&gt;
  &lt;/a&gt;
  8. Jasmine
&lt;/h3&gt;

&lt;p&gt;Jasmine is a user-behavior mimicker that allows you to perform test cases similar to user behavior on your website. Jasmine is useful for a testing frontend for visibility, click clarity as well as the responsiveness of the UI in different resolutions.&lt;/p&gt;

&lt;p&gt;Jasmine allows to automate user behavior with customs delays and wait time to simulate actual user behavior. &lt;/p&gt;

&lt;p&gt;If you want to learn more Check out this brilliant &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Funit-testing-your-javascript-with-jasmine%2F"&gt;Unit testing your JavaScript with Jasmine &lt;/a&gt;&lt;/strong&gt;online course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2021/02/udemy-course-review-web-development-bootcamp-.html#axzz6rQaZvLlb"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--52U72xpt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-8QiFWOPgUKg/YLmw0wcQHaI/AAAAAAAAoEM/XL7dyLVmI-wlusR4YP2vxDHCeVaC18DQQCLcBGAsYHQ/1200px-Logo_jasmine.svg.png" alt="best courses to learn Jasmine" width="512" height="510"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#9-jenkins"&gt;
  &lt;/a&gt;
  9. Jenkins
&lt;/h3&gt;

&lt;p&gt;Today, there is hardly any company or organization which doesn't use DevOps and CI/CD for their software development life cycle (SDLC) process, and Jenkins is the King of CI/CD tools.&lt;/p&gt;

&lt;p&gt;As a Web developer, it's essential for you to get familiar with &lt;a href="https://medium.com/javarevisited/7-best-courses-to-learn-jenkins-and-ci-cd-for-devops-engineers-and-software-developers-df2de8fe38f3"&gt;Jenkins&lt;/a&gt; and understand how the Jenkins pipeline works and how to set up one for your project.&lt;/p&gt;

&lt;p&gt;If you want to learn more about Jenkins and DevOps I suggest you take a look at this **&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjenkins-from-zero-to-hero%2F"&gt;Jenkins, From Zero To Hero: Become a DevOps Jenkins Master&lt;/a&gt; **course on Udemy. &lt;/p&gt;

&lt;p&gt;This is a great course for both web developers and DevOps Engineers who want to learn about Jenkins in depth.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2018/09/top-5-jenkins-courses-for-java-and-DevOps-Programmers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W4ztFeHI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-_U9YPPm6dwA/YLmw7dr2c9I/AAAAAAAAoEU/lVrvC6HvWowZ6-PnI1IcNeTFfy3iC7ABQCLcBGAsYHQ/w416-h208/image.png" alt="best courses to learn Jenkins" width="318" height="159"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#10-cloud-aws-azure-or-gcp"&gt;
  &lt;/a&gt;
  10. Cloud (AWS, Azure, or GCP)
&lt;/h3&gt;

&lt;p&gt;Many of you already familiar with Cloud and Cloud computing platforms like &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-amazon-web-services-aws-courses-for-beginners-and-experienced-programmers.html"&gt;AWS&lt;/a&gt; (Amazon Web Service), &lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-AZ-900-exam-Azure-Fundamentals-certification-practice-tests-and-mock-exams-to.html#axzz6iNNhKZui"&gt;Microsoft's Azure&lt;/a&gt;, and GCP (&lt;a href="https://javarevisited.blogspot.com/2019/07/top-5-google-cloud-platform-gcp-courses-certifications-online.html"&gt;Google Cloud Platform&lt;/a&gt;), if you are not, make sure you learn one of them.&lt;/p&gt;

&lt;p&gt;Ideally, you should learn the one which your company is adopting. For example, if you are company is investing in Microsoft Azure, you should learn that to excel in your team and company by pioneering in migrating your project into the cloud.&lt;/p&gt;

&lt;p&gt;Similarly, if your company is migrating into GCP or Google Cloud platform then you should spend some time learning GCP. It's a great cloud platform, particularly for Machine learning, Artificial Intelligence, and Big Data companies. If your work has anything to do with &lt;a href="https://javarevisited.blogspot.com/2019/10/top-5-courses-to-learn-pandas-for-data-analysis-python.html"&gt;Python Pandas&lt;/a&gt;, &lt;a href="https://javarevisited.blogspot.com/2018/08/top-5-tensorflow-and-machine-learning-courses-online-programmers.html"&gt;TensorFlow&lt;/a&gt;, &lt;a href="https://medium.com/javarevisited/top-5-advanced-deep-learning-and-neural-network-courses-to-learn-in-2020-a273f5eddca5"&gt;neural network&lt;/a&gt;, etc, learn GCP.&lt;/p&gt;

&lt;p&gt;If you are a freelancer or your company is not pushing for any cloud, learn AWS, it's the best general-purpose cloud platform and I believe, every web developer should learn it. &lt;/p&gt;

&lt;p&gt;If you need a resource, I suggest you check out the **Introduction to Cloud Computing on Amazon AWS for Beginners](&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-cloud-computing-on-amazon-aws-for-beginners%2F"&gt;https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fintroduction-to-cloud-computing-on-amazon-aws-for-beginners%2F&lt;/a&gt;) **course by Neal Davis on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/02/top-5-courses-to-crack-aws-certified-cloud-practitioner-exam-certification-clf-c01.html#axzz6ILbx3NC7"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QqjZ7JVp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-Rtkkb6nOnic/YLmw_5X9LKI/AAAAAAAAoEc/lWyKtPiBp0IXc4snJYaU-taGdOXoLFzpACLcBGAsYHQ/image.png" alt="best courses to learn cloud computing for beginners" width="290" height="174"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#11-kubernetes"&gt;
  &lt;/a&gt;
  11. Kubernetes
&lt;/h3&gt;

&lt;p&gt;When we talk about containers and Docker, Kubernetes also comes into the picture because it can help you in managing containers. It's easy to deploy one or two containers initially but when your application grows and more instances are required, it becomes difficult to manually deploy 100s of containers.&lt;/p&gt;

&lt;p&gt;It also becomes a headache to create new containers and take off unused ones, that's when Kubernetes comes to rescue you. It's a container management tool that can create, scale and manage containers for you. &lt;/p&gt;

&lt;p&gt;Along with Docker, I suggest you learn Kubernetes and if you need a resource, I would recommend Stephen Grider's &lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-and-kubernetes-the-complete-guide%2F"&gt;&lt;strong&gt;Docker and Kubernetes Complete guide&lt;/strong&gt;&lt;/a&gt; course on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://javarevisited.blogspot.com/2020/06/top-5-courses-to-learn-kubernetes-for-devops-and-certification.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tAA8u5ml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-45qNDCSr8Yo/YLmwCpzbUhI/AAAAAAAAoDM/oFkkwNxNR-gCwItjeiBg6QxD6O0_G0mCwCLcBGAsYHQ/107-1072041_kubernetes-logo-png-transparent-png.jpg" alt="best kubernetes courses for beginners" width="500" height="280"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#12-sass"&gt;
  &lt;/a&gt;
  12. Sass
&lt;/h3&gt;

&lt;p&gt;We already have 10 tools right? Yes, we are done, but if you want to learn just one more tool, I would suggest making it SASS. Many of you don't know what are SAAS and some of you might be thinking that is it the same as "SaaS" (Software as a Service) like Microsoft 365?&lt;/p&gt;

&lt;p&gt;Well No, Sass is a CSS preprocessor, which adds special features such as variables, nested rules, and mixins (sometimes referred to as syntactic sugar) into regular &lt;a href="https://medium.com/javarevisited/10-best-css-online-courses-for-beginners-and-experienced-developers-54aa2e8c0253"&gt;CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We all know that writing CSS is messy. More so when reviewing the code which other people have written. I find SASS is the answer to that. It helps you to write clean code which is readable.&lt;/p&gt;

&lt;p&gt;I strongly encourage Web Designers and frontend developers to take a look at SAAS in 2022 and If you need a resource to learn Saas, I recommend &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fadvanced-css-and-sass%2F"&gt;Advanced CSS and Sass: Flexbox, Grid, Animations, and More!&lt;/a&gt;&lt;/strong&gt; course by Jonas Schmedtmann on Udemy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2020/06/top-5-courses-to-learn-advanced-css.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJEYoJbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/-9Nnd16ZOb6A/YLmxDWKKAfI/AAAAAAAAoEg/UmI3CcpcHaQHu8nUJUlKVWcKMDl_etvdQCLcBGAsYHQ/image.png" alt="best courses to learn Sass CSS pre processor" width="259" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all about some of the &lt;strong&gt;12 best tools every web developer can learn in 2022&lt;/strong&gt; to improve their productivity and enjoy their web development journey. These tools not only make you more productive by offering connectivity and ease of doing but also help you to make the better web developer you always wanted to be.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always remember, a craftsman is as good as their tools so always strive for learning better, more advanced tools so that you can deliver more in less time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Other &lt;strong&gt;Programming and Development Articles&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/11-essential-skills-software-developers-should-learn-in-2020-1bio"&gt;11 Essential Skills for Every Software Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2017/12/10-programming-languages-to-learn-in.html"&gt;10 Programming languages to Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://www.java67.com/2018/02/10-books-java-developers-should-read-in.html"&gt;10 Books Java Developers Should Read in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2020/09/top-10-cloud-certification-you-can-aim.html"&gt;10 AWS and Cloud Certifications to Aim in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/05/10-tips-to-become-better-java-developer.html"&gt;10 Tips to become a better Java Developer&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/10-free-courses-to-learn-java-in-2019-22d1f33a3915"&gt;My favorite free courses to learn Java in depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/06/top-6-spring-framework-online-courses-Java-programmers.html"&gt;Top 5 courses to learn Spring Framework in Depth&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/04/10-tools-java-developers-should-learn.html"&gt;10 Tools Every Java Developer Learn in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.java67.com/2018/06/5-best-courses-to-learn-spring-boot-in.html"&gt;Top 5 Courses to learn Spring Boot in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2019/10/the-java-developer-roadmap.html"&gt;The 2022 Java Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/10-frameworks-java-and-web-developers-should-learn.html"&gt;10 Frameworks for Java and Web Developer in 2022&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="http://javarevisited.blogspot.sg/2018/01/top-20-libraries-and-apis-for-java-programmers.html"&gt;20 Libraries Java developer should know&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-free-courses-to-learn-maven-jenkins-and-docker-for-java-developers-51fa7a1e66f6"&gt;10 Free courses to learn Maven, Jenkins, and Docker&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you find these &lt;em&gt;best web development tools&lt;/em&gt; useful, please share them with your friends and colleagues. If you have any questions or feedback, please drop a note.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you want to become a frontend and backend developer in 2022, then you can also check out &lt;a href="https://javarevisited.blogspot.com/2019/02/the-2019-web-developer-roadmap.html"&gt;&lt;strong&gt;The Web Developer RoadMap&lt;/strong&gt;&lt;/a&gt;, which also contains all the tech and resources you need to become a professional web developer.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>development</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Software Testing &amp; Quality Assurance: A Must Know Difference</title>
      <author>Kanika Vatsyayan</author>
      <pubDate>Fri, 03 Dec 2021 05:38:46 +0000</pubDate>
      <link>https://dev.to/kanikavatsyayan/software-testing-quality-assurance-a-must-know-difference-5b38</link>
      <guid>https://dev.to/kanikavatsyayan/software-testing-quality-assurance-a-must-know-difference-5b38</guid>
      <description>&lt;p&gt;Often thought to be the same, software testing and quality assurance are two very different terms in reality. In general language, software testing is more of an aspect of Quality Assurance services that involves a wide range of features, methods, and objectives.   &lt;/p&gt;

&lt;p&gt;However, the entire dilemma surrounding the two terms comes from the misconceptions formulated around testing and QA. On top of that, the lack of clear job descriptions and improper requirements make it difficult for testers and QA engineers to understand the difference in their roles.   &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In this blog, we will try to help you entail the proper meaning and difference between Quality Assurance and software testing. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Especially, when there is a difference of opinion between Quality Assurance Engineers who claim their activities are insufficient to ensure the quality of software and Testers who have to perform tasks that are more than mere testing (involving tasks like preventing defects by working in a development environment).   &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#learning-the-basics"&gt;
  &lt;/a&gt;
  Learning The Basics
&lt;/h4&gt;

&lt;p&gt;When it comes to the business goals surrounding digital transformation, no organization could taste success with only developers working on the product. Usually, such an approach calls for defects and errors in the end deliveries due to missing or unchecked requirements. And therefore, it became necessary for organizations to have a dedicated approach towards software testing and quality assurance.   &lt;/p&gt;

&lt;p&gt;Nevertheless, most initiatives made to drive quality into the software development lifecycle end up at manual and automated testing. Such practices often lead to error-free product development but do not allow meeting the highest quality benchmarks. Besides, testers being uninformed of the proper QA practices end up with unpleasing client feedback with the quality of end services.   &lt;/p&gt;

&lt;p&gt;To help simplify things a little, it is vital to start by learning the basic difference between Software Testing &amp;amp; Quality Assurance.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#software-testing-the-definition"&gt;
  &lt;/a&gt;
  Software Testing: The Definition
&lt;/h3&gt;

&lt;p&gt;Software testing is meant to work at testing the website, applications, or software for any defects in the code or possible concerns related to functionality, usability, compatibility, and performance within the system. &lt;/p&gt;

&lt;p&gt;In general language, software testing ensures that the product under test should meet the acceptance criteria before the release.   &lt;/p&gt;

&lt;p&gt;Besides, software testing helps to identify existing defects within the system through different test practices that are either performed manually or through &lt;a href="https://www.bugraptors.com/blog/automate-software-testing-with-ai"&gt;automated software testing through AI&lt;/a&gt;. It ensures that any problems within the system should not reach the end-user with the release and usually needs checking on all static and dynamic elements of the development lifecycle.   &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quality-assurance-the-definition"&gt;
  &lt;/a&gt;
  Quality Assurance: The Definition
&lt;/h3&gt;

&lt;p&gt;Quality Assurance is all about preventing mistakes, resisting errors, and creating defect-free technology. Oriented to maintain the product integrity, Quality Assurance drives all the confidence to the testers on meeting the predefined requirements and sustaining the workflow with early error detection in the development lifecycle.   &lt;/p&gt;

&lt;p&gt;As long as it is concerned with the success of IT solutions, Quality Assurance is meant to overcome management issues related to development techniques and project analysis checklists. In simple words, Quality assurance helps to achieve long-term business goals with the right testing approach and evaluation process that compliments the development requirements.   &lt;/p&gt;

&lt;p&gt;With direct effect and impact on the development process, Quality Assurance helps with pre-designing, rich development, and quicker product releases. Thus, QA principles are more of responsibilities that are shared amongst developers, testers, and business executives when need to attain the highest benchmarks of excellence.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#software-testing-amp-qa-the-differences"&gt;
  &lt;/a&gt;
  Software Testing &amp;amp; QA: The Differences
&lt;/h2&gt;

&lt;p&gt;Both these practices are necessary and therefore complement each other. But most organizations prefer to &lt;a href="https://www.bugraptors.com/blog/advantages-to-outsource-qa-software-testing"&gt;outsource the QA and Software testing&lt;/a&gt; part, rather than creating an in-house team that works along with the IT department.   &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In simplest terms, software testing is meant to locate and fix existing issues within a product while QA is all about preventing any issues or defects in the first place.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;QA is meant to ensure that design meets the defined expectations while testing aims at detecting points of failure. This is why testing aims at product orientation and required corrective actions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the contrary, Quality Assurance works at leveling up the quality of the project as well as development practices to yield quality in business operations throughout.   &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;QA helps the organization to control the test process and ensure the software should perform well under all defined conditions. On the contrary, testing is restricted to developing case studies, implementing test suites, and evaluating the results.   &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Quality assurance is more about optimizing the process for quality and not just establishing quality for a single product.  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#aligning-qa-with-software-testing-learning-the-challenges"&gt;
  &lt;/a&gt;
  Aligning QA With Software Testing: Learning The Challenges
&lt;/h2&gt;

&lt;p&gt;At times, business organizations are concerned with the risks of extending the team to work on QA and Software testing simultaneously since the process could turn out to be expensive. &lt;/p&gt;

&lt;p&gt;Also, the fear of making investment to hire QA testers and other experts for products that are not so competitive even makes the organization fall short on such initiatives.   &lt;/p&gt;

&lt;p&gt;On top of that, it is difficult to find someone who is familiar with all stages of product development for a product that has reached its highest stage of delivery as it needs extensive efforts to competently assess the effectiveness of such projects.  &lt;/p&gt;

&lt;p&gt;It is often assumed that testers working on a project from the beginning could work on the quality assurance duties due to their familiarity with all the aspects of the product and the overall business logic.  &lt;/p&gt;

&lt;p&gt;Such practices often cause a situation of conflict between testing and QA goals as most of the time testers are limited to pinpointing and fixing issues, while not tracing the errors with the manufacturing process.     &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-crux"&gt;
  &lt;/a&gt;
  The Crux
&lt;/h3&gt;

&lt;p&gt;All in all, Quality Assurance is a sophisticated approach to management that helps attain quality objectives through highly-defined policies, tools, techniques, and standards. Testing on the other hand can be called the part of a well-integrated quality assurance strategy that is proactive. &lt;/p&gt;

&lt;p&gt;No matter how cautious efforts are made to test software, mistakes are infallible. But at times, these mistakes could turn to be expensive, and finding errors at the earliest stages is always beneficial for the business goodwill. &lt;/p&gt;

&lt;p&gt;And therefore, the effectiveness of the QA measures can only be tracked through manual testing signaling the interdependency between the two approaches.   &lt;/p&gt;

&lt;p&gt;As the end goal of releasing software to market is achieving long-term success, it is vital to assume that any work done is likely to contain defects that must be corrected at their earliest. The only way to leverage such performance and develop business resilience is by combining Software testing &amp;amp; QA for best outcomes. &lt;/p&gt;

&lt;p&gt;As the end goal of releasing software to market is achieving long-term success, it is vital to assume that any work done is likely to contain defects that must be corrected at their earliest. The only way to leverage such performance and &lt;a href="https://www.bugraptors.com/blog/developing-business-resilience-with-software-testing"&gt;developing business resilience goals&lt;/a&gt; is by combining Quality Assurance and Software testing for best outcomes. &lt;/p&gt;

</description>
      <category>testing</category>
      <category>startup</category>
      <category>productivity</category>
      <category>ux</category>
    </item>
    <item>
      <title>Remix Blog Tutorial - Remix, React, Prisma, MongoDB, Vercel</title>
      <author>Chris Benjamin</author>
      <pubDate>Fri, 03 Dec 2021 05:13:04 +0000</pubDate>
      <link>https://dev.to/chrisbenjamin/remix-blog-tutorial-remix-react-prisma-mongodb-vercel-1hhb</link>
      <guid>https://dev.to/chrisbenjamin/remix-blog-tutorial-remix-react-prisma-mongodb-vercel-1hhb</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-this-remix-tutorial-is"&gt;
  &lt;/a&gt;
  What this Remix Tutorial Is?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This remix tutorial is a simple app that show cases some of the functionality of Remix and some of the cool features I've recently blogged or tweeted about Remix. &lt;/li&gt;
&lt;li&gt;It will be built using the default create-remix method&lt;/li&gt;
&lt;li&gt;It will be hosted on Vercel &lt;/li&gt;
&lt;li&gt;It will use JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This tutorial takes the remix blog tutorial available on the Remix docs and expands on it to include editing, and MongoDB Storage and some styling. I re-wrote it entirely from my learning experience. I tried to explain most of the pieces used, the Remix docs are wonderful and explain things with examples very well. &lt;/p&gt;

&lt;p&gt;You can see a functional version of the app we are making here &lt;a href="https://remix-blog-ten.vercel.app"&gt;https://remix-blog-ten.vercel.app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Full Source Code is available on &lt;a href="https://github.com/cbenjamin2009/remix-blog"&gt;Github here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-this-remix-tutorial-is-not"&gt;
  &lt;/a&gt;
  What this Remix Tutorial is Not?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This is not a full scope tutorial to teach you everything about Remix. &lt;/li&gt;
&lt;li&gt;This is not a full scope tutorial on MongoDB&lt;/li&gt;
&lt;li&gt;This tutorial will not be using TypeScript &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started! 🚀
&lt;/h2&gt;

&lt;p&gt;Yay!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-first-remixrun-app"&gt;
  &lt;/a&gt;
  Your First Remix.Run App!
&lt;/h3&gt;

&lt;p&gt;Let's create a simple Remix.Run app to get you started on your journey to learning Remix!&lt;/p&gt;

&lt;p&gt;I'm going to be using VSCode for this tutorial, you can use your editor of choice. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-install-remix"&gt;
  &lt;/a&gt;
  Let's install Remix
&lt;/h3&gt;

&lt;p&gt;Open the terminal and run the following command&lt;br&gt;
&lt;code&gt;npx create-remix@latest&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;If this is your first time using remix. It will prompt you that you need to install the following packages: &lt;br&gt;
&lt;code&gt;create-remix@latest&lt;/code&gt;. Enter 'y' and press Enter &lt;/p&gt;

&lt;p&gt;You should get a message - Welcome to remix! Let's get you setup with a new project. Here, we are going to enter the name for our project. I'm going to call mine &lt;code&gt;remix-blog&lt;/code&gt;. Feel free to name yours however you like. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIicdOWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxkk5366nip7gp9f5axp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIicdOWh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cxkk5366nip7gp9f5axp.png" alt="Remix Welcome" width="519" height="146"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remix will now ask you where you want to deploy. For this tutorial, we are going to use Vercel. &lt;br&gt;
&lt;em&gt;If you wish to use something else, you may have a slightly different experience, the Readme.MD file will include helpful information if you change your hosting provider.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Note: A vercel account will be needed when we deploy. It's free and easy to do, visit &lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; to register.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Using your Arrow keys, press down until Vercel is highlighted and press enter. &lt;/p&gt;

&lt;p&gt;Remix will now ask you which JS Language, plain JavaScript or TypeScript. For this tutorial, we are going to choose JavaScript. &lt;/p&gt;

&lt;p&gt;Remix will now ask if you want to run &lt;code&gt;npm install&lt;/code&gt; we are going to say yes, so put in &lt;code&gt;y&lt;/code&gt; and then press enter to get up and running quickly.&lt;/p&gt;

&lt;p&gt;Your screen should look like this &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uFsfLc57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4w3dm5kbx1brppjfckn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uFsfLc57--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4w3dm5kbx1brppjfckn.png" alt="Remix First Steps" width="782" height="109"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If everything worked, you should be presented with this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dqL_9dlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e52zjkv5zd3pqgp8o2zt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dqL_9dlR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e52zjkv5zd3pqgp8o2zt.png" alt="Remix Success" width="232" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go into the directory that Remix Created. I'm going to type &lt;code&gt;cd remix-blog&lt;/code&gt; if you called your project something else, be sure to replace remix-blog with your project name. &lt;/p&gt;

&lt;p&gt;The README.md has some &lt;strong&gt;very important&lt;/strong&gt; information in there about how to get up and running with the hosting setup chosen. Read this carefully and fully, it's worth it. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-get-vercel-hosting-setup-which-is-required-for-running-app-in-development"&gt;
  &lt;/a&gt;
  Let's get Vercel hosting setup which is required for running app in development
&lt;/h3&gt;

&lt;p&gt;First you'll need the &lt;a href="https://vercel.com/docs/cli"&gt;Vercel CLI&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;Run this command to install Vercel CLI &lt;code&gt;npm i -g vercel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once this is complete we need to link it to a vercel project. &lt;br&gt;
Run the command &lt;code&gt;vercel link&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When asked to setup the project, input Y and press enter&lt;/li&gt;
&lt;li&gt;When asked which scope, this should be your vercel username&lt;/li&gt;
&lt;li&gt;When asked to link to existing project &lt;strong&gt;say no&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;When asked for projects name, use default or give it a new name for what you will see in Vercel dashboard&lt;/li&gt;
&lt;li&gt;Which directory is your code location, use default ./&lt;/li&gt;
&lt;li&gt;Auto-Detected Project Settings (Remix). It will ask if you want to override the settings, we are going to say No, input &lt;code&gt;n&lt;/code&gt; and press enter. 
You should get an output like this&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yAoppenV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txy3uwcblf6h30w56fwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yAoppenV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/txy3uwcblf6h30w56fwo.png" alt="Vercel Output" width="624" height="191"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#lets-run-the-default-remix-app"&gt;
  &lt;/a&gt;
  Let's run the default Remix App
&lt;/h4&gt;

&lt;p&gt;We are going to do a test run to make sure you can get Remix up and running in a dev server environment with live reload before we continue. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now lets open your demo site to make sure it works! Open a browser and navigate to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt; or click the link below. &lt;br&gt;
Browse to &lt;a href="http://localhost:3000"&gt;http://localhost:3000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should be presented with the Welcome to Remix! page which was created by the &lt;code&gt;npx create-remix@latest&lt;/code&gt; app. If so, fanstastic!!! If not, check your terminal for errors and go back if necessary. &lt;/p&gt;

&lt;p&gt;Great job so far, let's keep it up!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6cZFy9LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo03q117d06i2anornqn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6cZFy9LM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zo03q117d06i2anornqn.png" alt="Working Demo Site" width="624" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Take some time to look around at this demo site before moving on. There is a lot of valuable information here along with links to their fantastic documentation. When you are ready, scroll down to continue with our first app, but I don't mind if you get lost reading the docs for a while, just make sure you finish this tutorial 😊&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#lets-build-our-remix-project"&gt;
  &lt;/a&gt;
  Let's build our Remix project!
&lt;/h2&gt;

&lt;p&gt;We are going to break this down into 2 sections&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Setting up the app functionality&lt;/li&gt;
&lt;li&gt;Setting up the database storage functionality &lt;/li&gt;
&lt;li&gt;We will finish off by Deploying to Vercel to share with the world! &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#project-cleanup"&gt;
  &lt;/a&gt;
  Project Cleanup
&lt;/h3&gt;

&lt;p&gt;We are going to leave all existing files intact so you have reference code to look at. We will simply expand on this default application. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#understanding-folder-setup"&gt;
  &lt;/a&gt;
  Understanding folder setup
&lt;/h2&gt;

&lt;p&gt;The &lt;em&gt;App&lt;/em&gt; folder is the most important folder. This is the basis of your entire site. In this folder, we will place our Routes, Styles, and Utils folders. We will also have three important files, the &lt;em&gt;entry.client&lt;/em&gt;, &lt;em&gt;entry.server&lt;/em&gt; and &lt;em&gt;root&lt;/em&gt;. More information on these is available on the Remix Docs site, there's a link in your project to get there in a jiffy. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h3&gt;

&lt;p&gt;These steps will setup our initial project. Since we are going to add to the existing data, we are going to make this quick and easy. &lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#project-dependencies"&gt;
  &lt;/a&gt;
  Project Dependencies
&lt;/h4&gt;

&lt;p&gt;We will be installing the following depdencies throughout this project. If you are familiar with this process, you can knock out all of these installs up front, or you can follow along and install them at each step in the blog. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;npm install @prisma/client (DB Client)&lt;/li&gt;
&lt;li&gt;npm install marked  (Markdown to HTML converter)&lt;/li&gt;
&lt;li&gt;npm install tiny-invariant  (Invariant handling for TS)&lt;/li&gt;
&lt;li&gt;npm install prisma --save-dev  (Dev Dependency for Prisma)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#setup-rootjsx"&gt;
  &lt;/a&gt;
  Setup root.jsx
&lt;/h4&gt;

&lt;p&gt;We need to update the Root.jsx to have nav links to our pages we are going to create. &lt;/p&gt;

&lt;p&gt;We are going to add 2 routes&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Blogs- This will retrieve our blog articles from the database and display them for reading. &lt;/li&gt;
&lt;li&gt;Admin - This will show our blog articles, allow us to edit them, and allow us to add new blog articles. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's open &lt;code&gt;root.jsx&lt;/code&gt; and make some adjustments. &lt;/p&gt;

&lt;p&gt;Locate the &lt;code&gt;function Layout({ children })&lt;/code&gt; within root.jsx and update the return statement to the following code, adding 2 Link tags right below the Home link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="c1"&gt;// Home Link...&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/blogs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="c1"&gt;// Remix Docs... &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mongodb-setup"&gt;
  &lt;/a&gt;
  MongoDB Setup
&lt;/h2&gt;

&lt;p&gt;For this blog, we will be using Prisma with experimental features for connecting to a MongoDB database to store our blog articles. This is quick, simple, and free to start so it will be great for our small project. &lt;br&gt;
Let's install the dev dependency. Run &lt;code&gt;npm install prisma --save-dev&lt;/code&gt;&lt;br&gt;
Let's invoke the Prisma command line interface (CLI), run &lt;code&gt;npx prisma&lt;/code&gt; If you get an error, then Prisma did not install correctly, check the terminal output. &lt;br&gt;
Let's now initialize our Prisma project, let's run &lt;code&gt;npx prisma init&lt;/code&gt; which will create our Prisma folder and &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#get-mongodb-url"&gt;
  &lt;/a&gt;
  Get MongoDB URL:
&lt;/h3&gt;

&lt;p&gt;We are going to use the Free Shared DB, it's free, no credit card required to start, and you get leverage the power of cloud database.  This section assumes you have never used MongoDB before, if you are already familiar with Mongo or have a Cluster setup, you can skip ahead to the next section 😎&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to &lt;a href="https://account.mongodb.com/account/register?tck=docs_atlas"&gt;https://account.mongodb.com/account/register?tck=docs_atlas&lt;/a&gt; and create an account&lt;/li&gt;
&lt;li&gt;Choose the Free Shared account&lt;/li&gt;
&lt;li&gt;Choose any cluster, I'm choosing AWS and Oregon (us-west-2) for my deployment, and create the cluster. &lt;/li&gt;
&lt;li&gt;In the Security QuickStart, create a Username and Password authentication. Save this information as we will need it soon. I'm going to create remix_user with a secure password. Be sure to click Create User. &lt;/li&gt;
&lt;li&gt;For IP Access List, we are going to put in 0.0.0.0 as the IP to ensure that our database get's up and running quickly for testing. You will want to restrict this for production apps. &lt;/li&gt;
&lt;li&gt;You should now be redirected to your Database Deployments showing Cluster0. 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLCtz6yz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4y2ezwincnh9bqtzm9nh.png" alt="Mongo Database Deployments Setup" width="880" height="294"&gt;
&lt;/li&gt;
&lt;li&gt;Click Connect button under Cluster 0&lt;/li&gt;
&lt;li&gt;Click Connect your application&lt;/li&gt;
&lt;li&gt;Copy the connection string provided. &lt;/li&gt;
&lt;li&gt;In your Remix app, look for the &lt;code&gt;.env&lt;/code&gt; file in the root folder. This is a local environment file that we will store your mongo URL secret in since it contains username and password to your database. Open this up and you will see that Prisma already put some information in there. &lt;/li&gt;
&lt;li&gt;Let's update the DATABASE_URL to be our new MongoDB server address. 
&lt;code&gt;DATABASE_URL="mongodb+srv://remix_user:supersecretpassword@cluster0.cvvbu.mongodb.net/MyFirstDatabase"&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#mongo-db-schema-setup"&gt;
  &lt;/a&gt;
  Mongo DB Schema Setup
&lt;/h3&gt;

&lt;p&gt;In your MongoDB Dashboard we need to setup our database structure. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Under Database Deployment click Browse Collections&lt;/li&gt;
&lt;li&gt;Your database should be empty and Mongo want's to help us add sample data, we don't want to do that, we want to create our own so let's choose Add My Own Data&lt;/li&gt;
&lt;li&gt;For Database Name put in &lt;code&gt;Remix_Blog&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;For Collection Name put in &lt;code&gt;posts&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click Create
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAIWF9u1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qlr4x9qomnwzlutx8e8h.png" alt="Create Database Screen" width="391" height="334"&gt;
&lt;/li&gt;
&lt;li&gt;Great work so far! Now we just need to setup one sample blog that Remix can use to pull down our existing blogs and Prisma can understand our layout. &lt;/li&gt;
&lt;li&gt;Click Insert Document&lt;/li&gt;
&lt;li&gt;We are going to add 3 fields, all of them will be of type String. &lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;slug&lt;/code&gt; with a value of &lt;code&gt;my-first-post&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;markdown&lt;/code&gt; with a value of &lt;code&gt;#This is my first post&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;title&lt;/code&gt; with a value of &lt;code&gt;My First Post&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Click Insert&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#finalize-prisma-setup"&gt;
  &lt;/a&gt;
  Finalize Prisma Setup
&lt;/h3&gt;

&lt;p&gt;Now we need to get our Prisma Schema file ready for MongoDB&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We need to update our .env file to reflect our new database. &lt;/li&gt;
&lt;li&gt;Let's update the DATABASE_URL to be our new MongoDB server address, only the end of the file should change to end with &lt;code&gt;mongodb.net/Remix_Blog&lt;/code&gt;; 
&lt;code&gt;DATABASE_URL="mongodb+srv://remix_user:supersecretpassword@cluster0.cvvbu.mongodb.net/Remix_Blog"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;In your Remix project, open the prisma folder, then open the schema.prisma file&lt;/li&gt;
&lt;li&gt;In here we are going to update the datasource DB to the following:
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;generator&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;prisma-client-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;previewFeatures&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongoDb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;datasource&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;provider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mongodb&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt;      &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DATABASE_URL&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Now that we have our generator, our data source. We are ready to run introspection. This will have Prisma inspect our MongoDB schema by sampling data in the given database and inferring the schema of that database. &lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npx prisma db pull&lt;/code&gt;  (If this fails, you should check the .env file was setup correct and the username/password are correct and that the database URL was updated to end with your database name)
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bsll2vN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7igjc8ri8ntilfnevgg5.png" alt="Prisma DB Pull Command" width="607" height="182"&gt;
&lt;/li&gt;
&lt;li&gt;Now if you look at the schema.prisma file, you will see that Prisma automatically generated our model posts{} object. &lt;em&gt;When using MongoDB with Prisma, Prisma will pull down your model, with other providers you may use Prisma to push up your model.&lt;/em&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;model&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;id&lt;/span&gt;       &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;id&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;default&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dbgenerated&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ObjectId&lt;/span&gt;
  &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;slug&lt;/span&gt;     &lt;span class="nb"&gt;String&lt;/span&gt;
  &lt;span class="nx"&gt;title&lt;/span&gt;    &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Run &lt;code&gt;npx prisma generate&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should get the following output&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XfAtqPS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48ip7fv5mqvgik11o9uh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfAtqPS5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/48ip7fv5mqvgik11o9uh.png" alt="npx prisma generate command" width="639" height="148"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hooray! We are ready to begin using Prisma in our application! 🎉&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#blog-route-setup"&gt;
  &lt;/a&gt;
  Blog Route Setup
&lt;/h2&gt;

&lt;p&gt;Here we will begin laying out the files for our blog. First we need a Blogs route so Remix knows what to load when users navigate to /blogs.  Under the &lt;em&gt;app&lt;/em&gt; folder, create a folder named &lt;em&gt;blogs&lt;/em&gt; (./app/blogs/) &lt;/p&gt;

&lt;p&gt;In this folder create a file index.jsx&lt;/p&gt;

&lt;p&gt;We will also need a CSS stylesheet so let's throw that in while we are creating files. Under ./app/styles create a file called blogs.css (./app/styles/blogs.css). &lt;/p&gt;

&lt;p&gt;Now open up the index.jsx file we just created in blogs. &lt;/p&gt;

&lt;p&gt;Let's create a very basic return statement to make sure our route is working.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Blogs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Blogs&lt;/span&gt; &lt;span class="nx"&gt;Route&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now on your server, if it's not running make sure you run &lt;code&gt;npx run dev&lt;/code&gt; then click the Blogs link at the top. We should now be presented with Blogs Route at the top which means our routing is working. If you get a 404 error, go back and make sure your file is named correctly. In some instances you may need to stop and restart the server. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fTDl35kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uotb5kibzqwle9szkk6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fTDl35kp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9uotb5kibzqwle9szkk6.png" alt="example blogs route" width="880" height="163"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's set up the rest of our Blog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#get-posts"&gt;
  &lt;/a&gt;
  Get Posts
&lt;/h3&gt;

&lt;p&gt;Before we can load data in our route, we first need to get our data. &lt;br&gt;
We will do this in another file called a module. In the root of your app folder, create a file called &lt;code&gt;post.js&lt;/code&gt;, (./app/post.js)&lt;/p&gt;

&lt;p&gt;Open up this post.js file and let's add import Prisma so we can use it in our app, and let's create our getPosts() function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@prisma/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="c1"&gt;// let's create a reference to prisma&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PrismaClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// async function since we will be loading external data&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;// await prisma connection&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// let's grab all posts using findMany()&lt;/span&gt;
&lt;span class="c1"&gt;// the posts in prisma.posts is the collection we created in Mongo.db&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;allPosts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findMany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// let's cleanup our connection&lt;/span&gt;
    &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// let's see what we are returning&lt;/span&gt;
       &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;allPosts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;allPosts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to tie in this function to our Blogs route. Go back to the index.jsx in you blogs route (./app/route/blog/index.jsx)&lt;br&gt;
We just want to test that we are pulling our first blog from MongoDB. Let's add the following code above the &lt;code&gt;export default function Blogs()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~/post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now Remix should automatically rebuild and you should see in your VSCode terminal, the output we are logging&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;id&lt;/span&gt;: &lt;span class="s1"&gt;'61a914e90b627f455a212145'&lt;/span&gt;,
    markdown: &lt;span class="s1"&gt;'#This is my first post'&lt;/span&gt;,
    slug: &lt;span class="s1"&gt;'my-first-post'&lt;/span&gt;,
    title: &lt;span class="s1"&gt;'My First Post'&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the terminal output:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iiTQsHsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4vgrwa97yihg4huq1ba.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iiTQsHsv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w4vgrwa97yihg4huq1ba.png" alt="VSCode terminal Output" width="336" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome, so our Remix app is using it's loader function to talk to MongoDB through Prisma. We are ready to load our blog article into our app. &lt;br&gt;
Lets go into the blogs index.jsx file (./app/blogs/index.jsx)&lt;br&gt;
We need to import 2 more pieces from React, the Link tool and the useLoaderData hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sweet, those are ready to use. Now let's update our Posts() function to use our loader data and render it on the screen. We are going to map through the data and render the posts by Title and using Remix Link so the user can click on our blog post to read it. We will add 2 classes now for styling in a later step. We will use the slug as the Key on the &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; tag since this should be unique. &lt;/p&gt;

&lt;p&gt;Update the Posts() function as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// our Posts function which will return the rendered component on the page .&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Posts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;My&lt;/span&gt; &lt;span class="nx"&gt;Remix&lt;/span&gt; &lt;span class="nx"&gt;Blog&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;read&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="p"&gt;))}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect, we should see our blog article being rendered as a unordered list. If you click on it right now, you will get a 404, that's because we haven't told Remix what to do yet. Let's set that up now. &lt;/p&gt;

&lt;p&gt;First we need a way to pull the information for a single post from our MongoDB database. Lets go to the root &lt;code&gt;post.js&lt;/code&gt; folder and create a function to do that. We will also be using a library called &lt;a href="https://www.npmjs.com/package/marked"&gt;Marked &lt;/a&gt; to convert our current markdown content into HTML to render the blog article directly as HTML on our component. &lt;/p&gt;

&lt;p&gt;Let's install the dependency. Run &lt;code&gt;npm install marked&lt;/code&gt; in your VSCode terminal. &lt;br&gt;
In your &lt;code&gt;post.js&lt;/code&gt; file let's import this at the top&lt;br&gt;
&lt;code&gt;import { marked } from "marked";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will also be using a library called &lt;a href="https://www.npmjs.com/package/tiny-invariant"&gt;Tiny-Invariant&lt;/a&gt; which will help us check if we are loading a slug as expected from params. &lt;br&gt;
Let's install this dependency. Run &lt;code&gt;npm install tiny-invariant&lt;/code&gt; in your VSCode terminal &lt;/p&gt;

&lt;p&gt;Ok now we are ready to update &lt;code&gt;post.js&lt;/code&gt; module with the getPost() function. &lt;br&gt;
Add the following code to your &lt;code&gt;post.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// this function is used to load a single post from a passed through slug&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//setup our prisma connection&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// we will find the first database entry that matches the passed slug&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foundSlug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;blogs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//let's extract the title &lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foundSlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// using marked, we are going to convert the markdown into HTML so the blog post can render as entered in Markdown. &lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;marked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foundSlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// we need to cleanup our database connection&lt;/span&gt;
    &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// let's send back the slug, the title, and our markdown converted to html &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect, now we can query a single post by passing in the slug, see how simple this can be?&lt;/p&gt;

&lt;p&gt;We are going to use Remix nested routes to dynamically load our blog posts using a single route. This is accomplished by using a dynamic segment in the URL. To do this, let's create a file in our blogs route folder called &lt;code&gt;$slug.jsx&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This file is going to need to import our a getPost() function from our post module we just created, it will have a loader to extract the dynamic segment from the parameter and then use that to go get our post. Then we will need a default function which will render our child component to the screen. &lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;./app/routes/blogs/$slug.jsx&lt;/code&gt; with this code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;invariant&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tiny-invariant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;invariant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expected params.slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostSlug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;postDisplay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="na"&gt;__html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you are ready to go test this out. Go to your browser where your Remix app is running, and now try to click on the title of your blog post. Your page should now load based on the dynamic segment being passed, and you should see your content returned as HTML. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_SXco7y---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thcui6dmg64x2pfm26wx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_SXco7y---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/thcui6dmg64x2pfm26wx.png" alt="Blog Post Rendered" width="481" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will style this page after we setup the admin page. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;p&gt;Awesome progress! So far, we have setup a database, we put our first blog entry directly to the database, and we are now pulling that into our app and the user can read our blogs that are entered as markdown and displayed as HTML. Give yourself a pat on the back! &lt;/p&gt;

&lt;p&gt;Let's take this a step further now. We don't want to input our blog posts directly into MongoDB. We want to be able to create them right from our app. For this we are going to create an admin panel which will let us create new posts, and edit existing posts. Head on over to the next section to set this up.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blog-admin-panel"&gt;
  &lt;/a&gt;
  Blog Admin Panel
&lt;/h2&gt;

&lt;p&gt;Our blog needs a way to create new blog posts and edit existing blog posts directly from our Remix app. We are going to setup a new route for this to separate it out. &lt;br&gt;
&lt;em&gt;As an expansion to this tutorial, you can setup Authentication on your app and then only render the Admin route if the logged in user should have access&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#route-setup"&gt;
  &lt;/a&gt;
  Route Setup
&lt;/h3&gt;

&lt;p&gt;In your project, we are going to create a new route and an admin page. &lt;br&gt;
In your Routes folder, create a new file called &lt;code&gt;admin.jsx&lt;/code&gt;. &lt;br&gt;
Also in the Routes folder, create a new folder called &lt;code&gt;admin&lt;/code&gt;&lt;br&gt;
In this new admin folder, create an &lt;code&gt;index.jsx&lt;/code&gt; file.  &lt;/p&gt;

&lt;p&gt;Let's work on these separately. &lt;/p&gt;

&lt;p&gt;Our admin page is going to be pretty similar to our blog page, but with some extra features. So let's copy some of that code. Update your &lt;code&gt;admin.jsx&lt;/code&gt; as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Outlet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;adminStyles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/styles/admin.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//create a stylesheet ref for the admin.css file &lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;adminStyles&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;adminTitle&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Admin&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
             &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Click&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;edit&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;blog&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                    &lt;span class="p"&gt;))}&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Outlet renders the /admin/index.jsx */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now if you check your app, you should be able to click the Admin link at the top nav and see your admin page and your blog posts. If you click on that link, you are going to get an error because we haven't told Remix what to do yet. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0mLa-kmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbo5b8nxke6oeaw8qp64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mLa-kmL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbo5b8nxke6oeaw8qp64.png" alt="Admin Page" width="493" height="287"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sweet! Keep up the great work, not a lot of work left! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-blog-post"&gt;
  &lt;/a&gt;
  Create a blog post
&lt;/h3&gt;

&lt;p&gt;Let's setup the ability to add new blog posts. &lt;br&gt;
In your routes/admin folder, open your &lt;code&gt;index.jsx&lt;/code&gt;&lt;br&gt;
This will be a really simple component to return a button that will redirect our user to the new page we will create. &lt;/p&gt;

&lt;p&gt;Update &lt;code&gt;index.jsx&lt;/code&gt; (./app/routes/admin/index.jsx) as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;AdminIndex&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;adminNewPostLink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;new&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;adminNewPostButton&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Create&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;New&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;Link&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;      &lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To get this button to display inside our Admin component we need to use the Outlet. With Remix, the index.jsx file in the nested routing will automatically render inside of our outlet. &lt;/p&gt;

&lt;p&gt;Open &lt;code&gt;admin.jsx&lt;/code&gt; and lets update our import to include Outlet &lt;br&gt;
&lt;code&gt;import { Outlet, Link, useLoaderData } from 'remix';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Perfect, now let's place that in our &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag we setup earlier in this same file. &lt;/p&gt;

&lt;p&gt;Update the main tag to include the Outlet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="cm"&gt;/* Outlet renders the /admin/index.jsx */&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Outlet&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/main&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should have a button on your admin page to create a new post. Let's go make that button work now!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ig2Mz-ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q037pcruixwkk25bfi7z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ig2Mz-ur--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q037pcruixwkk25bfi7z.png" alt="Admin page with create button" width="293" height="175"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In your admin route, create the file &lt;code&gt;new.jsx&lt;/code&gt;. This will be used to create a new blog post. This file is going to use a Remix &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; instead of a standard HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and post to the current route. We will use a Remix action to get our formData in the request sent by that post, perform some client side validation, and then call a createPost() function from our &lt;code&gt;post.js&lt;/code&gt; module that will add our new blog post to the database on MongoDB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useActionData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useTransition&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;NewPost&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// pull in errors from our action using the useActionData() hook&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useActionData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// transition will allow us to create a better user experience by updating the text of the submit button while creating the blog post&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTransition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// we are going to create the slug for the user&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;

    &lt;span class="c1"&gt;// as the Title input is updated we will generate the slug automatically. &lt;/span&gt;
    &lt;span class="c1"&gt;// My First Post slug would equal 'my-first-post'. We will convert to lower case and we will strip spaces and replace with hyphens &lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; 
        &lt;span class="c1"&gt;// using regex and replace, let's convert spaces to dashes&lt;/span&gt;
       &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\s&lt;/span&gt;&lt;span class="sr"&gt;/g&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="c1"&gt;// lets set the value of the slug text box to be our new slug in lowercase &lt;/span&gt;
       &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slugInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/em&amp;gt;} &amp;lt;input onChange={handleChange} type="text" name="title"/&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;Slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Slug&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/em&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slugInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&amp;gt;{" "} {errors&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;.markdown &amp;amp;&amp;amp; &amp;lt;em&amp;gt;Markdown is required&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;textarea&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submission&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Creating...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Create Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! Let's check our app and make sure we are seeing the form we will work on the createPost() function next. &lt;br&gt;
It should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVls3Be---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4uja3c7xikzj7talfcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVls3Be---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q4uja3c7xikzj7talfcg.png" alt="Form on remix blog app" width="380" height="591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sweet, our app is coming right along, let's setup the &lt;code&gt;post.js&lt;/code&gt; module to allow us to create entries in our MongoDB database.&lt;/p&gt;

&lt;p&gt;Open your &lt;code&gt;post.js&lt;/code&gt; and add the following createPost() function&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;    &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;createPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="c1"&gt;//Prisma connection &lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;// prisma create&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="na"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="c1"&gt;// cleanup prisma connection &lt;/span&gt;
        &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="c1"&gt;// let's send back the slug we created&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#creating-posts"&gt;
  &lt;/a&gt;
  Creating Posts
&lt;/h3&gt;

&lt;p&gt;Alright it's the moment we have been waiting for. Let's create our first blog post from our app!&lt;br&gt;
Check our your app and create a new blog post. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bamKGMcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqrc89bqqpwjfrkjbuw8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bamKGMcS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jqrc89bqqpwjfrkjbuw8.png" alt="Create new blog" width="426" height="591"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whoa! Check that out, the button switched to 'Creating...' for a few seconds and then your admin component was reloaded to and your new blog post is showing up now, incredible!!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YisB1dVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ulm6fqhfpfl2134swge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YisB1dVC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ulm6fqhfpfl2134swge.png" alt="Blog created successfully" width="347" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go take a look at your Blogs route. You will see the new blog is already on that page too!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzGb5Ote--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvwop14c8nm0gjyp8k1c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzGb5Ote--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vvwop14c8nm0gjyp8k1c.png" alt="New Blog on Blogs page" width="337" height="176"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go Crazy and add a few more blog articles so we have some sample data to work with, you want at least 5 test blogs. If you go over to your Blogs page, you can click on the links and see your markdown converted to HTML for your blog articles. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5ILrEsXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czvg9fta5wutgxti8qmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5ILrEsXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czvg9fta5wutgxti8qmp.png" alt="Markdown rendered as HTML" width="302" height="207"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#editing-blog-articles"&gt;
  &lt;/a&gt;
  Editing Blog Articles
&lt;/h3&gt;

&lt;p&gt;Now some day we may need to edit our blog posts. Let's add that functionality. We are going to use another dynamic segment to get the post slug for editing. &lt;/p&gt;

&lt;p&gt;Create a new file in your admin route folder titled &lt;code&gt;$edit.jsx&lt;/code&gt;. &lt;br&gt;
This page is going to be pretty similar to our &lt;code&gt;new.jsx&lt;/code&gt; page with a few slight changes. We need to get the post from the route of the blog post we clicked, then we need to populate the form with that data, perform the same validation, and update that data if needed. &lt;/p&gt;

&lt;p&gt;Update your &lt;code&gt;$edit.jsx&lt;/code&gt; file (./app/routes/admin/$edit.jsx)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;invariant&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tiny-invariant&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getPostEdit&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useActionData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useTransition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;remix&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;updatePost&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;invariant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expected params.edit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getPostEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;edit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;calling updatePost with id, title, slug, markdown: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;updatePost&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/admin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;PostSlug&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useActionData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;transition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTransition&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLoaderData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="nx"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hiddenBlogID&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/input&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/em&amp;gt;} &amp;lt;input type="text" name="title" defaultValue={post.title}/&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Post&lt;/span&gt; &lt;span class="na"&gt;Slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Slug&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/em&amp;gt;}&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slugInput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;slug&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&amp;gt;{" "} {errors&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;.markdown &amp;amp;&amp;amp; &amp;lt;em&amp;gt;Markdown is required&amp;lt;/&lt;/span&gt;&lt;span class="nx"&gt;em&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;textarea&lt;/span&gt; &lt;span class="nx"&gt;defaultValue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;markdown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
                      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submission&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Updating...&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Update Post&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;                  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome. Now if you notice, this calls for getPostEdit and updatePost which don't exist in our Post module. Let's go add those. &lt;br&gt;
Open &lt;code&gt;post.js&lt;/code&gt; and the following 2 functions&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//when we edit the post we want to return different data including the ID field&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPostEdit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//setup our prisma connection&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$connect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// we will find the first database entry that matches the passed slug&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foundSlug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foundSlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="c1"&gt;//let's extract the title &lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foundSlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;// since we are editing and not rendering we want to pull the original markdown value stored in the db&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;foundSlug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;
    &lt;span class="c1"&gt;// we need to cleanup our database connection&lt;/span&gt;
    &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// let's send back the slug, the title, and our markdown &lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// When updating we need to reference the ID being updated&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updatePost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;//Prisma connection &lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;// prisma create&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatePost id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="na"&gt;markdown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;markdown&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;// cleanup prisma connection &lt;/span&gt;
    &lt;span class="nx"&gt;prisma&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$disconnect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// let's send back the slug we created&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;getPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's go test it out. On your Remix app, go to your Admin page and click on a post. The fields should populate with the blog data and you can edit it and then update your blog posts. &lt;br&gt;
You may notice a field showing some strange letters and numbers, this is the post ID from the database, we will hide this in CSS. If we hide it in HTML then it's not sent with our post request. &lt;/p&gt;

&lt;p&gt;Splendid! We now have a functional blog where we can read blog posts, we can create new blog posts, and we can edit existing blog posts. The only thing left to do is add some styling. &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#styling-your-remix-app"&gt;
  &lt;/a&gt;
  Styling your Remix App
&lt;/h2&gt;

&lt;p&gt;We haven't done any of our own styling yet, just using the default &lt;code&gt;create-remix&lt;/code&gt; styling. Let's expand on those by adding route specific styles that will only be added if the route matches. &lt;/p&gt;

&lt;p&gt;In your App folder, create 2 CSS files &lt;code&gt;admin.css&lt;/code&gt; and &lt;code&gt;posts.css&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#styling-admin-pages"&gt;
  &lt;/a&gt;
  Styling Admin Pages
&lt;/h3&gt;

&lt;p&gt;We are going to work with the &lt;code&gt;admin.css&lt;/code&gt; file first. &lt;br&gt;
I am going to define the following styles&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.admin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.admin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.admin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="m"&gt;#555&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hiddenBlogID&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="nc"&gt;.adminNewPostButton&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;royalblue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="nc"&gt;.adminTitle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;x-large&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.remix-app__header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;141&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;mix-app__header&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;crimson&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perfect, our Admin style sheet is ready to go. We are going to add it to our &lt;code&gt;admin.jsx&lt;/code&gt; file using the remix export links method so that the CSS styles are only added when our admin page is rendered and removed when our admin page is not being rendered. We are going to import the stylesheet and then export it as a links.&lt;/p&gt;

&lt;p&gt;Add the following to the top of your &lt;code&gt;admin.jsx&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;adminStyles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/styles/admin.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//create a stylesheet ref for the admin.css file &lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;adminStyles&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go have a look at your Admin page, it should now look like this: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9oePCspw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrsylllei5dapi5k0e83.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9oePCspw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrsylllei5dapi5k0e83.png" alt="Styled Admin Page" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We added a red banner in the top nav to show case we are in an admin route. We also Styled the Admin header and used a bit of flex. Additionally, we hid that blog id input. If you navigate to any other page, the styles are removed. Take a look at the dev tools and the CSS file disappears. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-posts-page"&gt;
  &lt;/a&gt;
  Styling Posts Page
&lt;/h3&gt;

&lt;p&gt;Let's add some CSS to our &lt;code&gt;posts.css&lt;/code&gt; file. I have designed some heading styles, and background just to put some styles on the page. &lt;/p&gt;

&lt;p&gt;Edit &lt;code&gt;post.css&lt;/code&gt; with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.postTitle&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rebeccapurple&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.postTitle&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;underline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.postList&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.postDisplay&lt;/span&gt;  &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;72px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;-webkit-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;71&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;204&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-background-clip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;-webkit-text-fill-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.postDisplay&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.postDisplay&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;capitalize&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;whitesmoke&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;row-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.postDisplay&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;x-large&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;decimal-leading-zero&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome we have some styling being applied. Let's go import the styles to our blogs route files. At the top of the blogs &lt;code&gt;index.jsx&lt;/code&gt; and the &lt;code&gt;$slug.jsx&lt;/code&gt; file. Add the following same two lines.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;postStyles&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;~/styles/posts.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;stylesheet&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;postStyles&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
`&lt;br&gt;
Here is my Second Blog Post page with some styling applied &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2xxKLih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rlxn2yb1gbs5ucepdlt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2xxKLih--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2rlxn2yb1gbs5ucepdlt.png" alt="Blog Post Styled" width="843" height="664"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recap"&gt;
  &lt;/a&gt;
  Recap
&lt;/h3&gt;

&lt;p&gt;Awesome, we now have a blog application, with our data being stored in MongoDB. We can add new articles, we can update existing articles, we can add styles and see how Remix applies it's logic to our application. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-folder-structure"&gt;
  &lt;/a&gt;
  Final Folder Structure
&lt;/h3&gt;

&lt;p&gt;Here is the Folder Structure at the end. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr1iQgxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejruiydwtojl9bdmbw7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nr1iQgxc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ejruiydwtojl9bdmbw7s.png" alt="Final Folder Structure" width="233" height="858"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#takeaways"&gt;
  &lt;/a&gt;
  Takeaways
&lt;/h2&gt;

&lt;p&gt;Remix is an app for creating amazing user experiences, sometimes with React. &lt;br&gt;
Remix is not just a react framework, though you can quickly get it up and running with React. &lt;br&gt;
There is much more to Remix, this is just a quick app to showcase some features. &lt;br&gt;
The back end of your application is added to the module, if you want to change that from MongoDB to SQL for example, you can simply update the post.js file and entirely change the back end to another provider. As I was writing this tutorial, I was initially using local storage, then local SQLLite through Prisma, and then switched to MongoDB because I wanted to showcase how to work with a cloud provider to separate our data storage from our app. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-to-vercel"&gt;
  &lt;/a&gt;
  Deploying to Vercel
&lt;/h2&gt;

&lt;p&gt;Let's get our application published to our Vercel site. &lt;/p&gt;

&lt;p&gt;Close your running dev server. &lt;/p&gt;

&lt;p&gt;Let's run a build &lt;code&gt;npm run build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Let's deploy run &lt;code&gt;vercel deploy&lt;/code&gt; 🚀🚀🚀&lt;/p&gt;

&lt;p&gt;My site was published to &lt;a href="https://remix-blog-ten.vercel.app"&gt;https://remix-blog-ten.vercel.app&lt;/a&gt;&lt;br&gt;
Go take a look and play with it. &lt;/p&gt;

&lt;p&gt;Full Source Code is available on &lt;a href="https://github.com/cbenjamin2009/remix-blog"&gt;Github here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I do hope that you learned something with this tutorial. This is my first tutorial of this magnitude, and on Remix. I'm a web developer but a junior React dev and still learning so I'm open to feedback if I've made mistakes or can improve this tutorial. &lt;/p&gt;

</description>
      <category>react</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Making Your Video More Accessible</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Fri, 03 Dec 2021 04:33:40 +0000</pubDate>
      <link>https://dev.to/unicodeveloper/making-your-video-more-accessible-1he5</link>
      <guid>https://dev.to/unicodeveloper/making-your-video-more-accessible-1he5</guid>
      <description>&lt;p&gt;The only way to build the web for everyone is to make web apps, including the related media (audio, images, videos), as accessible as possible for your entire audience. &lt;/p&gt;

&lt;p&gt;Visual media is instrumental in conveying information. Images pass on information in picture format. Videos take that to the next level. Concise videos, in particular, attract attention and effectively tell stories.&lt;/p&gt;

&lt;p&gt;However, video is only partially relevant to visually impaired users. Ditto deaf and hard-of-hearing people, who can absorb only half the content, not to mention those who speak a language different from that of the content.&lt;/p&gt;

&lt;p&gt;A solution to make images accessible is to add &lt;code&gt;&amp;lt;alt&amp;gt;&lt;/code&gt; text, but what about the &lt;a href="https://cloudinary.com/blog/audio_in_video_is_crucial_here_s_how_to_produce_high_quality_audio"&gt;audio in videos&lt;/a&gt;? You add subtitles and transcripts, which would also be welcome by those who are, say, watching the video next to a sleeping partner or who don’t want to wake up a child.&lt;/p&gt;

&lt;p&gt;With Cloudinary, you can enable people with hearing or visual challenges to engage with video and audio. This tutorial shows you how. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#acquiring-the-prerequisites"&gt;
  &lt;/a&gt;
  Acquiring the Prerequisites
&lt;/h2&gt;

&lt;p&gt;To follow the steps in this tutorial, you need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A grasp of the basics of JavaScript.&lt;/li&gt;
&lt;li&gt;Adeptness with Node.js and Cloudinary. &lt;/li&gt;
&lt;li&gt;An ability &lt;a href="https://cloudinary.com/documentation/how_to_integrate_cloudinary"&gt;to integrate Cloudinary into Node.js apps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A Cloudinary account. &lt;a href="https://cloudinary.com/users/register/free"&gt;Sign up&lt;/a&gt; for a free account if you don’t have one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;As a start, upload a video, such as &lt;a href="https://www.youtube.com/watch?v=fLeJJPxua3E"&gt;this one&lt;/a&gt; from YouTube. Follow these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download the video to your computer.&lt;/li&gt;
&lt;li&gt;Create a project with a basic front end and back end to support media upload to the back end, e.g., to a Node.js server with Multer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: To avoid storing copies of uploaded videos, upload them to Cloudinary with the [Cloudinary upload widget(&lt;a href="https://cloudinary.com/documentation/upload_widget"&gt;https://cloudinary.com/documentation/upload_widget&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Your back end contains this Cloudinary configuration and API route:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const multer = require('multer')
const express = require('express')
const cors = require('cors')
const cloudinary = require('cloudinary').v2

require('dotenv').config()
const upload = multer({ dest: 'uploads/' })

cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.API_KEY,
  api_secret: process.env.API_SECRET,
})

const app = express()

app.use(cors())

app.use(express.json())
app.post('/video/upload', upload.single('video'), uploadVideo)

function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video1',
      resource_type: 'video'
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the dependencies and save the correct environment variables in a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Replace the variables &lt;code&gt;CLOUD_NAME&lt;/code&gt;, &lt;code&gt;API_KEY&lt;/code&gt;, and &lt;code&gt;API_SECRET&lt;/code&gt; with the values from your account’s dashboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;On the front end, send the video to Cloudinary with a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file"&gt;&lt;code&gt;file&lt;/code&gt; input&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#improving-video-accessibility"&gt;
  &lt;/a&gt;
  Improving Video Accessibility
&lt;/h2&gt;

&lt;p&gt;Cloudinary supports metadata for resources, including tags and subtitles for video. You can fetch videos from Cloudinary with integrated subtitles, which must originate from existing transcripts. That’s similar to the scenario whereby, while watching a video in a media player, you must show the player where to get the subtitles.&lt;/p&gt;

&lt;p&gt;Manually generating tags and subtitles can be tedious. A much more efficient alternative is to generate through Cloudinary in these two steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create transcripts in various languages to cater to those who are hearing challenged or foreign to the video’s language.&lt;/li&gt;
&lt;li&gt;Generate and display tags that relate to the video for the visually impaired, including those who determine the video’s relevance with screen readers.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#leveraging-the-google-ai-video-transcription-addon"&gt;
  &lt;/a&gt;
  Leveraging the Google AI Video Transcription Add-On
&lt;/h2&gt;

&lt;p&gt;In conjunction with Google’s Speech-to-Text API, Cloudinary’s &lt;a href="https://cloudinary.com/addons#google_speech"&gt;Google AI Video Transcription add-on&lt;/a&gt; automatically generates transcripts for videos. As a result, when uploading or updating a video with Cloudinary’s API, you can create transcripts in the same folder as the video.&lt;/p&gt;

&lt;p&gt;Here are the steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://cloudinary.com/addons#google_speech"&gt;Activate the add-on for your account&lt;/a&gt;. A free plan is available.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CFsdKyX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/v1638486733/Google_AI_Video_Transcription_add-on.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CFsdKyX6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/v1638486733/Google_AI_Video_Transcription_add-on.png" alt="Google_AI_Video_Transcription_add-on" width="880" height="486"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Add to the Cloudinary &lt;code&gt;upload&lt;/code&gt; method the option &lt;code&gt;raw_convert&lt;/code&gt; in the &lt;a href="https://cloudinary.com/documentation/image_upload_api_reference"&gt;Upload API reference&lt;/a&gt;. &lt;code&gt;raw_convert&lt;/code&gt; asynchronously generates a file based on the uploaded file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With that file, Google creates a transcript with the &lt;code&gt;google_speech&lt;/code&gt; value for the uploaded video. Here’s how:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video2',
      resource_type: 'video',
      raw_convert: 'google_speech'
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;videos&lt;/code&gt;/&lt;code&gt;video2&lt;/code&gt; value for &lt;code&gt;public_id&lt;/code&gt; identifies the video with subtitles. Assign any value as you desire and jot it down for use later.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go back to the front end and upload the same video. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cloudinary then generates another file in your account’s Media Library:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1MX0hGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto%2Cdpr_2.0/ML_video_audio.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1MX0hGO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/cloudinary-marketing/image/upload/f_auto%2Cq_auto%2Cdpr_2.0/ML_video_audio.png" alt="Media Library" width="512" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;video2.transcript&lt;/code&gt; file reads as follows in a code editor:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fOiVKzp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_2_zx2erw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fOiVKzp1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_2_zx2erw.png" alt="Video 2 transcript" width="512" height="331"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above JSON structure shows that the line “If you only have 24 hours in a day, your success is dependent upon how you use the 24” is displayed between 0.1 and 7.3 seconds in the video.&lt;/p&gt;

&lt;p&gt;You can also generate the following:&lt;/p&gt;

&lt;p&gt;Other standard subtitle formats like SubRip (SRT) and VITec (VTT), which are supported by other media players. &lt;br&gt;
Other transcriptions in different languages, which would make the video’s audio accessible for more viewers. French, for example, has this &lt;code&gt;raw_convert&lt;/code&gt; value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
  raw_convert: 'google_speech:fr:BE'
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That code generates a &lt;code&gt;.transcript&lt;/code&gt; file with a French translation. &lt;code&gt;fr:BE&lt;/code&gt; denotes the language and region, Belgium French in this case. Google supports numerous languages and dialects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-subtitles-to-videos"&gt;
  &lt;/a&gt;
  Adding Subtitles to Videos
&lt;/h2&gt;

&lt;p&gt;Next, add subtitles to videos on request with video transformations. To do so , add a route on the back end for the uploaded video, which the generated &lt;code&gt;.transcript&lt;/code&gt; file transforms:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/video', getVideo)

function getVideo(req, res) {
  try {
    cloudinary.api.resource('videos/video2', {}, (err, result) =&amp;gt; {
      const video = cloudinary.video('videos/video2', {
        resource_type: 'video',
        type: 'upload',
        transformation: [
          {
            overlay: {
              resource_type: 'subtitles',
              public_id: 'videos/video2.transcript',
            },
          },
          { flags: 'layer_apply' },
        ],
      })
      res.json({
        ...result,
        videoElem: video.replace(/poster=/, 'controls poster='),
      })
    })
  } catch (err) {
    console.log({ err })
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A few explanations:&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;transformation&lt;/code&gt; property, you’ve added an overlay of the &lt;code&gt;subtitles&lt;/code&gt; resource type and specified the path to that transcript file.&lt;/p&gt;

&lt;p&gt;The return value of the &lt;code&gt;cloudinary.video()&lt;/code&gt; method is in this format:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;video poster='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.jpg'&amp;gt;
  &amp;lt;source src='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.webm' type='video/webm'&amp;gt;
  &amp;lt;source src='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.mp4' type='video/mp4'&amp;gt;
  &amp;lt;source src='http://res.cloudinary.com/dillionmegida/video/upload/l_subtitles:videos:motivational-video.transcript/fl_layer_apply/v1/videos/motivational-video.ogv' type='video/ogg'&amp;gt;
&amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You’ve replaced&lt;code&gt;poster=&lt;/code&gt; with the string &lt;code&gt;controls poster=&lt;/code&gt; and added the &lt;code&gt;controls&lt;/code&gt; attribute to the &lt;code&gt;video&lt;/code&gt; element, as shown here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CMIwUOvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_3_bzpold.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CMIwUOvs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_3_bzpold.png" alt="Video element" width="512" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Get Video button at the top makes a &lt;code&gt;get&lt;/code&gt; request to the back end, grabs the &lt;code&gt;video&lt;/code&gt; element, and renders it on the user interface. &lt;/p&gt;

&lt;p&gt;Your video is now more accessible, complete with subtitles. If you’ve specified a different language for the transcript, the subtitles are in that language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#capitalizing-on-googles-automatic-videotagging-capability"&gt;
  &lt;/a&gt;
  Capitalizing on Google’s Automatic Video-Tagging Capability
&lt;/h2&gt;

&lt;p&gt;Besides categorizing or grouping your resources, Cloudinary also tags displays for viewers a video’s category or related tags before the viewers start watching the video. That information greatly helps people with poor vision.&lt;/p&gt;

&lt;p&gt;To manually add tags to a video:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click the video’s Manage button and then click the Metadata tab:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RrcNauPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_4_whustq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RrcNauPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_4_whustq.png" alt="Metadata" width="512" height="277"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Input the tags:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WlinjVz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505316/unnamed_5_dx48tw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WlinjVz4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505316/unnamed_5_dx48tw.png" alt="Tags" width="268" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Such a manual process is mundane and time sapping. Automate it with Google’s automatic video-tagging capability instead. Follow the steps below.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Activate the Google Video Tagging add-on. A free plan is available.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9_1Fn2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_6_dki7zq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9_1Fn2K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_6_dki7zq.png" alt="Cloudinary video tagging plan" width="512" height="318"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Update the &lt;code&gt;uploadVideo&lt;/code&gt; function in the back end:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video3',
      resource_type: 'video',
      raw_convert: 'google_speech',
      categorization: 'google_video_tagging',
      auto_tagging: 0.7,
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;categorization&lt;/code&gt; property sets up add-ons that automatically generate the video’s tags.&lt;/p&gt;

&lt;p&gt;The confidence level specified by you for the &lt;code&gt;auto_tagging&lt;/code&gt; property denotes the degree of assurance with which a label relates to a resource.  &lt;code&gt;auto_tagging&lt;/code&gt; accepts only tags with a higher confidence level than the one specified. Confidence level 1 yields specific keywords, but only a few. In the code above, the 0.7 level serves as a compromise between relevant tags and sufficient tags.&lt;/p&gt;

&lt;p&gt;Since the add-on generates tags asynchronously, they might take a while to appear.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m4YSOG7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_7_vjruhf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m4YSOG7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_7_vjruhf.png" alt="Video 3" width="270" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refresh the screen after a while and you’ll see these results:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2pYFH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_8_phkqwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qd2pYFH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505317/unnamed_8_phkqwt.png" alt="Results" width="375" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depending on the video’s context, the generated tags might or might not be meaningful for a particular viewer. Nonetheless, the tags always describe the images in the video, such as “cars” and “environments.”&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#displaying-a-videos-related-tags"&gt;
  &lt;/a&gt;
  Displaying a Video’s Related Tags
&lt;/h2&gt;

&lt;p&gt;Now obtain the video from Cloudinary by updating the &lt;code&gt;getVideo&lt;/code&gt; function in the back end to read as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;...
    cloudinary.api.resource('videos/video3', {}, (err, result) =&amp;gt; {
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your browser’s Networks tab (or in Postman or any API client) looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OfG2NPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_14_olymka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OfG2NPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_14_olymka.png" alt="Postman" width="512" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can display video tags any way you desire, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V4Gw0Ntl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_12_thtooq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V4Gw0Ntl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_12_thtooq.png" alt="Display video tags" width="512" height="490"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tags might not be completely accurate so feel free to manually edit them in the dashboard or add other tags. For this video, you could add the tag “motivational quotes,” for example.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-translations-with-the-google-translation-addon"&gt;
  &lt;/a&gt;
  Adding Translations With the Google Translation Add-On
&lt;/h2&gt;

&lt;p&gt;The tags you just generated are only accessible by English-speaking viewers only. With the Google Translation add-on, which you can use during image upload or in conjunction with a video for automatic tagging, you can add translations. &lt;/p&gt;

&lt;p&gt;Follow these steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Activate the add-on and select the free plan:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBSTkuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_9_yk8hxj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QbBSTkuH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_9_yk8hxj.png" alt="Google translation" width="512" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Update the &lt;code&gt;uploadVideo&lt;/code&gt; function to use the Google Translation add-on with the Google auto-tagging feature for video:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function uploadVideo(req, res) {
  cloudinary.uploader.upload(
    req.file.path,
    {
      public_id: 'videos/video4',
      resource_type: 'video',
      raw_convert: 'google_speech',
      categorization: 'google_video_tagging:en:fr',
      auto_tagging: 0.7,
    },
    () =&amp;gt; {
      res.json({ message: 'Successfully uploaded video' })
    }
  )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The suffix &lt;code&gt;:en:fr&lt;/code&gt; in the &lt;code&gt;categorization&lt;/code&gt; property tells the add-on to generate tags, save them in English and French, and display them in the Cloudinary dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9M0tpD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_10_bvckea.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9M0tpD8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_10_bvckea.png" alt="Display them in Cloudinary dashboard" width="360" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A look at the resource details through the API yields the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--diJjrrkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_11_pyjw26.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--diJjrrkp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/unicodeveloper/image/upload/v1638505318/unnamed_11_pyjw26.png" alt="API yields" width="512" height="219"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The add-on’s data populates the &lt;code&gt;info&lt;/code&gt; property with properties in this flow:&lt;/p&gt;

&lt;p&gt;categorization → google_video_tagging → data&lt;/p&gt;

&lt;p&gt;Here, the array of generated tags contains a &lt;code&gt;tag&lt;/code&gt; object with the &lt;code&gt;en&lt;/code&gt; (for the English translation) and &lt;code&gt;fr&lt;/code&gt; (for the French translation) properties.&lt;/p&gt;

&lt;p&gt;Ultimately, by leveraging this add-on, you can display tags that match the viewer’s location or language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summing-up"&gt;
  &lt;/a&gt;
  Summing Up
&lt;/h2&gt;

&lt;p&gt;It’s crucial that web apps that contain media are accessible to all, especially your target audience.&lt;/p&gt;

&lt;p&gt;You’ve now learned how to use Cloudinary’s add-ons to improve video accessibility by adding subtitles and automatically generating and displaying the related tags—all in multiple languages as you desire.&lt;/p&gt;

&lt;p&gt;Afterwards, your video can reach a broader audience, including those who are hearing or vision handicapped, those who speak other languages, and even those who enjoy watching video with audio on mute.&lt;/p&gt;

&lt;p&gt;Cloudinary offers many other robust and effective add-ons. Do check them out.&lt;/p&gt;

</description>
      <category>video</category>
      <category>javascript</category>
      <category>programming</category>
      <category>accessible</category>
    </item>
    <item>
      <title>Advent of Code #2 (in JavaScript &amp; Haskell)</title>
      <author>Caleb Weeks</author>
      <pubDate>Fri, 03 Dec 2021 03:25:52 +0000</pubDate>
      <link>https://dev.to/sethcalebweeks/advent-of-code-2-in-javascript-haskell-2nea</link>
      <guid>https://dev.to/sethcalebweeks/advent-of-code-2-in-javascript-haskell-2nea</guid>
      <description>&lt;p&gt;Today's &lt;a href="https://adventofcode.com/2021/day/2"&gt;Advent of Code&lt;/a&gt; puzzle continues the theme of calculating a single value from a list of input, except this time, the input is text. Again, I solved the problem initially in Excel (where the hardest part was figuring out how to split a string by a delimiter...). Here is my attempt in Haskell and JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-one"&gt;
  &lt;/a&gt;
  Part One
&lt;/h2&gt;

&lt;p&gt;Given a list of course instructions as seen below, we need to find the final destination of a submarine by adding up the horizontal and depth values and multiplying the two sums. A forward instruction adds horizontal position while up and down decrease and increase the depth, respectively.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;course&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"forward 5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"down 5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"forward 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"up 3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"down 8"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"forward 2"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first thing to do is parse out the numbers. I decided to use pattern matching to do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'f'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'o'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'r'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'w'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'a'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'r'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'d'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'d'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'o'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'w'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'n'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;'u'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="sc"&gt;'p'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;negate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="kr"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a tuple of horizontal and depth positions, so we just need to add them all up. Here is a helper function to add two tuples together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;sumTuples&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Num&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sumTuples&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After folding over the original course instructions with our tuple summing helper function following the instruction parser, we just multiply the final two values in the tuple together. A cool trick to do this is to uncurry the multiplication operator, which will simply pass both values of the tuple to the operator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uncurry&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sumTuples&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This approach can be copied almost identically in JavaScript. A switch/case block is used instead of pattern matching for the &lt;code&gt;parseInstruction&lt;/code&gt; function, and the final multiplication of the two values is chained in another reduce.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;parseInstruction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;valueStr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valueStr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;forward&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;down&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sumTuples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sumTuples&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parseInstruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;acc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-two"&gt;
  &lt;/a&gt;
  Part Two
&lt;/h2&gt;

&lt;p&gt;The second part of the puzzle revises the meaning of the instructions such that up and down actually refer to the aim of the submarine, and the depth is actually calculated by multiplying the forward value by the current aim value. This requires keeping track of an additional accumulator value during the fold. The instruction parsing function stays the same, but we'll replace the &lt;code&gt;sumTuples&lt;/code&gt; function with an &lt;code&gt;accumulator&lt;/code&gt; function that takes care of the folding procedure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt; 
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parseInstruction&lt;/span&gt; &lt;span class="n"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Horizontal and aim are accumulated as normal, but the depth is calculated as the current aim multiplied by the horizontal value from the instruction. We'll also need to manually pick out the depth and horizontal values from the triple to get the final product:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight haskell"&gt;&lt;code&gt;&lt;span class="n"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;\&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;foldl&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;course&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same changes can be made in JavaScript, but we'll also have to swap out the chained reduce hack for an intermediary variable assignment since we can't have inline lambdas. We could define a function and compose it with the reduce, but it wouldn't save much.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nx"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;parseInstruction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instruction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;h&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;aim&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;horizontal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;aim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;course&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;accumulator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;answer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;horizontal&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This problem had a lot of similarities to yesterday's problem, so fortunately, I didn't take quite as long coming up with these solutions. How would you implement a solution to these problems in Haskell or JavaScript? I'm particularly interested in better alternatives to the pattern matching hack for parsing the instructions in Haskell.&lt;/p&gt;

</description>
      <category>functional</category>
      <category>programming</category>
      <category>javascript</category>
      <category>haskell</category>
    </item>
    <item>
      <title>Open Source news api for developers</title>
      <author>Praveen Kumar</author>
      <pubDate>Fri, 03 Dec 2021 03:23:00 +0000</pubDate>
      <link>https://dev.to/abipravi/open-source-news-api-for-developers-4pdp</link>
      <guid>https://dev.to/abipravi/open-source-news-api-for-developers-4pdp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#news-api-is-created-using-python-raw-django-rest-framework-endraw-"&gt;
  &lt;/a&gt;
  News Api is created using python &lt;code&gt;django rest framework&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PcD2akSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igt8dqtn62ksjuf3nahu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PcD2akSl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/igt8dqtn62ksjuf3nahu.gif" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using this the developer can get the realtime news which is scraped from different websites and sources such as &lt;code&gt;google news&lt;/code&gt; and &lt;code&gt;India today&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Api Link: &lt;a href="https://newsapi-abipravi.herokuapp.com/"&gt;VISIT_API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;github repository link: &lt;a href="https://github.com/pravee42/newsapi"&gt;View Source code&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#documentation"&gt;
  &lt;/a&gt;
  &lt;em&gt;Documentation&lt;/em&gt;:
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;url/news&lt;/code&gt; -&amp;gt; &lt;strong&gt;To get the top news and head lines news&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;url/tech&lt;/code&gt; -&amp;gt; &lt;strong&gt;To get the Technology news&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;url/search/&amp;lt;search_keyword&amp;gt;&lt;/code&gt; -&amp;gt; &lt;strong&gt;Search News&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;like wise there are more to get the news &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-feature-is-there-is-no-need-to-register-on-owr-website-you-can-use-the-api-privately"&gt;
  &lt;/a&gt;
  Main feature is there is no need to register on owr website you can use the API privately
&lt;/h4&gt;

&lt;p&gt;For Documentation Visit: &lt;a href="https://dev.tonewsapi/docs"&gt;Docs&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;If you like you post&lt;/strong&gt; Connect us on&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/pravee42"&gt;&lt;br&gt;
Github&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.instagram.com/praveenkumar_abipravi/"&gt;&lt;br&gt;
  Instagram&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/ABIPRAVI1"&gt;&lt;br&gt;
  Twiter&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/praveen-kumar-9b09441b7/"&gt;&lt;br&gt;
 Linked In&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://abipravi.medium.com/"&gt;&lt;br&gt;
 Medium&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>python</category>
      <category>programming</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Open files FAST from zsh | or bash if thats your thing</title>
      <author>Waylon Walker</author>
      <pubDate>Fri, 03 Dec 2021 03:12:20 +0000</pubDate>
      <link>https://dev.to/waylonwalker/fuzzy-file-editor-from-zsh-3kl7</link>
      <guid>https://dev.to/waylonwalker/fuzzy-file-editor-from-zsh-3kl7</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PQw_is7rQSw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I am often in a set of tmux splits flying back and forth, accidentally close my editor, so when I come back to that split and hit my keybinds to edit files I enter them into zsh rather than into nvim like I intended.  Today I am going to&lt;br&gt;
sand off that rough edge and get as similar  behavior to nvim as I can with a couple of aliases.&lt;/p&gt;

&lt;p&gt;Make sure you check out the YouTube video to see all of my improvements.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#whats-an-alias"&gt;
  &lt;/a&gt;
  what's an alias
&lt;/h2&gt;

&lt;p&gt;If you have never heard of an alias before it's essentially a shortcut to a given command.  You can pass additional flags to the underlying command and they will get passed in.  Most of the time they are just shorter versions of commands that you run often or even like in this case a common muscle memory typo that occurs for you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#my-new-aliass-for-fuzzy-editing-files-from-zsh"&gt;
  &lt;/a&gt;
  My new alias's for fuzzy editing files from zsh
&lt;/h2&gt;

&lt;p&gt;Here are the new aliases that I came up with to smooth out my workflow.  These give me a similar feel to how these keys work in neovim but from zsh.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# fuzzy select file to edit&lt;/span&gt;
&lt;span class="nb"&gt;alias &lt;/span&gt;&lt;span class="nv"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'nvim `fzf --preview="bat --color always {}"`'&lt;/span&gt;

&lt;span class="c"&gt;# give me the same syntax as edit while in neovim&lt;/span&gt;
&lt;span class="nb"&gt;alias&lt;/span&gt; :e&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'nvim '&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow the &lt;a href="https://youtube.com/waylonwalker"&gt;YouTube channel&lt;/a&gt; or the &lt;a href="https://waylonwalker/rss/"&gt;rss&lt;br&gt;
feed&lt;/a&gt; to stay up to date.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#related-links"&gt;
  &lt;/a&gt;
  Related links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PLTRNG6WIHETAj0nR_WYAxxGjd7kXch5zj"&gt;playlist for my dotfiles challenge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>linux</category>
      <category>bash</category>
      <category>zsh</category>
    </item>
    <item>
      <title>Create a private Ubuntu mirror</title>
      <author>immortalt</author>
      <pubDate>Fri, 03 Dec 2021 03:10:57 +0000</pubDate>
      <link>https://dev.to/immortalt/create-a-private-ubuntu-mirror-12a5</link>
      <guid>https://dev.to/immortalt/create-a-private-ubuntu-mirror-12a5</guid>
      <description>&lt;p&gt;To create a private Ubuntu image, the commonly used tools are debmirror and apt-mirror.&lt;br&gt;&lt;br&gt;
As of today, these two tools have their own advantages and disadvantages.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#debmirror"&gt;
  &lt;/a&gt;
  debmirror
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://help.ubuntu.com/community/Debmirror"&gt;debmirror document&lt;/a&gt;&lt;br&gt;&lt;br&gt;
debmirror has many downloading methods, and it will compare the local file with the file on the server before&lt;br&gt;
downloading so that only the missing files are downloaded. However, it does not seem to support multi-threaded&lt;br&gt;
downloading. Debmirror is downloaded one by one, so the download speed is relatively slow.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#aptmirror"&gt;
  &lt;/a&gt;
  apt-mirror
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://apt-mirror.github.io/"&gt;apt-mirror document&lt;/a&gt;&lt;br&gt;&lt;br&gt;
apt-mirror supports 20 threads to download at the same time by default. If you choose a suitable mirror station, the&lt;br&gt;
download speed can reach the maximum of my network. However, it does not seem to make a comparison. Although it can&lt;br&gt;
speed up the download start speed, sometimes some files may be lost, resulting in an incomplete mirror, so the client&lt;br&gt;
cannot be updated.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-write-the-config-file"&gt;
  &lt;/a&gt;
  how to write the config file
&lt;/h3&gt;

&lt;p&gt;In order to download the complete package, we need to modify the configuration file in &lt;code&gt;/etc/apt/mirror.list&lt;/code&gt;. Use this&lt;br&gt;
format to ensure that the i386 package will be downloaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;deb-amd64 http://mirrors.aliyun.com/ubuntu focal main restricted universe multiverse
deb-i386 http://mirrors.aliyun.com/ubuntu focal main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#combine-them-together"&gt;
  &lt;/a&gt;
  Combine them together
&lt;/h2&gt;

&lt;p&gt;Therefore, in order to achieve a balance between efficiency and completeness, we can combine apt-mirror and debmirror.&lt;br&gt;
We can first use apt-mirror to download quickly, then we can use debmirror to check and download the missing packages.&lt;br&gt;
Maybe this is the best way to download the Ubuntu mirror.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>To improve your technical skills, become a concept collector!
</title>
      <author>Sabrina Koumoin</author>
      <pubDate>Fri, 03 Dec 2021 03:07:44 +0000</pubDate>
      <link>https://dev.to/brinascode/to-improve-your-technical-skills-become-a-concept-collector-p8j</link>
      <guid>https://dev.to/brinascode/to-improve-your-technical-skills-become-a-concept-collector-p8j</guid>
      <description>&lt;p&gt;One of the best pieces of engineering advice my dad ever gave me was: "𝐅𝐨𝐜𝐮𝐬 𝐨𝐧 𝐭𝐡𝐞 𝐜𝐨𝐧𝐜𝐞𝐩𝐭𝐬 𝐚𝐧𝐝 𝐛𝐞𝐜𝐨𝐦𝐞 𝐚 𝐜𝐨𝐧𝐜𝐞𝐩𝐭 𝐜𝐨𝐥𝐥𝐞𝐜𝐭𝐨𝐫. 𝐈𝐟 𝐲𝐨𝐮 𝐥𝐞𝐚𝐫𝐧 𝐡𝐨𝐰 𝐭𝐨 𝐫𝐞𝐚𝐝 𝐚 𝐦𝐚𝐩, 𝐞𝐯𝐞𝐧 𝐰𝐡𝐞𝐧 𝐭𝐡𝐞 𝐜𝐢𝐭𝐢𝐞𝐬 𝐜𝐡𝐚𝐧𝐠𝐞 𝐲𝐨𝐮 𝐜𝐚𝐧 𝐬𝐭𝐢𝐥𝐥 𝐟𝐢𝐧𝐝 𝐲𝐨𝐮𝐫 𝐰𝐚𝐲".&lt;/p&gt;

&lt;p&gt;I love this so much because it's easy to get overwhelmed in tech with all the coding languages and tools available to us. But when you think of yourself as a concept-collector you can start to identify patterns in the things you're learning.&lt;/p&gt;

&lt;p&gt;For example, I noticed that no matter what framework I use, web development is essentially made up of these building blocks:&lt;/p&gt;

&lt;p&gt;🌄 Views -&amp;gt; What's being displayed to the user&lt;/p&gt;

&lt;p&gt;🎢 Events -&amp;gt; The different things that a user 'causes to happen'&lt;/p&gt;

&lt;p&gt;🚨 Event Handling -&amp;gt; What we do after the user causes things to happen&lt;/p&gt;

&lt;p&gt;🗳 Storage -&amp;gt; Data/information needs to be stored and retrieved&lt;/p&gt;

&lt;p&gt;🚏 Routing and Controllers -&amp;gt; Allows us to create conceptual locations for where data/information should live&lt;/p&gt;

&lt;p&gt;⚒ Optimization -&amp;gt; Making things run as smoothly as possible&lt;/p&gt;

&lt;p&gt;In other words:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The user needs to see something&lt;/li&gt;
&lt;li&gt;The user needs to interact with what they see and make things happen&lt;/li&gt;
&lt;li&gt;When they cause something to happen I need to decide what occurs next&lt;/li&gt;
&lt;li&gt;My data needs to be stored somewhere, and I need to be able to access it&lt;/li&gt;
&lt;li&gt;I use routes to allow the user to access data kept in different locations&lt;/li&gt;
&lt;li&gt;I optimize to make things run smoother&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you learn something new, try to grasp the deeper meaning of what's being done. 𝘊𝘰𝘥𝘪𝘯𝘨 𝘭𝘢𝘯𝘨𝘶𝘢𝘨𝘦𝘴 𝘢𝘯𝘥 𝘴𝘺𝘯𝘵𝘢𝘹𝘦𝘴 𝘢𝘳𝘦 𝘰𝘯𝘭𝘺 𝘢 𝘮𝘦𝘢𝘯𝘴 𝘵𝘰 𝘢𝘯 𝘦𝘯𝘥, 𝘢 𝘸𝘢𝘺 𝘵𝘰 𝘢𝘤𝘤𝘰𝘮𝘱𝘭𝘪𝘴𝘩 𝘢 𝘱𝘶𝘳𝘱𝘰𝘴𝘦. If you notice these patterns you'll be able to switch between frameworks and languages much more easily and confidently!&lt;/p&gt;




&lt;p&gt;If you liked this blog post feel free to check out more of my tech content on &lt;a href="https://www.instagram.com/brinascode/"&gt;Instagram&lt;/a&gt;, &lt;a href="https://www.youtube.com/channel/UCYrIYDWuz0LZbIuOazb-5FQ"&gt;YouTube&lt;/a&gt; and &lt;a href="https://twitter.com/brinascode"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.tiktok.com/@brinascode"&gt;TikTok&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>December 2nd, 2021: What did you learn this week?</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 03 Dec 2021 02:49:46 +0000</pubDate>
      <link>https://dev.to/nickytonline/december-2nd-2021-what-did-you-learn-this-week-536c</link>
      <guid>https://dev.to/nickytonline/december-2nd-2021-what-did-you-learn-this-week-536c</guid>
      <description>&lt;p&gt;It's that time of the week again. So wonderful devs, what did you learn this week? It could be programming tips, career advice etc.&lt;/p&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/lSVL6vdhdZVPW/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/lSVL6vdhdZVPW/giphy.gif" alt="Boss from the Office Space movie sipping his coffee in front of a cubicle" width="240" height="180"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Feel free to comment with what you learnt and/or reference your TIL post to give it some more exposure.&lt;/p&gt;


&lt;div class="ltag__tag ltag__tag__id__5305"&gt;
  
    .ltag__tag__id__5305 .follow-action-button{
      background-color: #ffedc9 !important;
      color: #820000 !important;
      border-color: #ffedc9 !important;
    }
  
    &lt;div class="ltag__tag__content"&gt;
      &lt;h2&gt;#&lt;a href="https://dev.to/t/todayilearned" class="ltag__tag__link"&gt;todayilearned&lt;/a&gt; Follow
&lt;/h2&gt;
      &lt;div class="ltag__tag__summary"&gt;
        Summarize a concept that is new to you.
      &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>weeklylearn</category>
      <category>discuss</category>
      <category>weeklyretro</category>
    </item>
  </channel>
</rss>
