<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to create a sleek "baseline" animation in CSS under 15 lines of code</title>
      <author>ManuTheCoder</author>
      <pubDate>Mon, 29 Nov 2021 17:24:26 +0000</pubDate>
      <link>https://dev.to/manuthecoder/how-to-create-a-sleek-baseline-animation-in-css-under-15-lines-of-code-386o</link>
      <guid>https://dev.to/manuthecoder/how-to-create-a-sleek-baseline-animation-in-css-under-15-lines-of-code-386o</guid>
      <description>&lt;p&gt;Off late, I've been obsessed with this trend in web pages. I saw this animation in Canva. Here's how to make it: &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h4&gt;

&lt;p&gt;Let's create some HTML. We'll need a &lt;code&gt;span&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello, World!&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h3&gt;

&lt;p&gt;Let's create some CSS&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="nc"&gt;.text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;-apple-system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;"Segoe UI"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Oxygen-Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Ubuntu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Cantarell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;"Helvetica Neue"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="m"&gt;0.5s&lt;/span&gt; &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="n"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;.39&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1.04&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="nb"&gt;baseline&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;140%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* Just for basic styles */&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#37474f&lt;/span&gt;
  &lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Explained&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;&lt;/code&gt; - This is just for fancy stuff&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;display: inline-block;&lt;/code&gt; - We'll need this to animate the transform property&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;@keyframes baseline&lt;/code&gt; - This is the defined animation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;overflow:hidden&lt;/code&gt; - Hides the overflow of the header&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Great! You've successfully made a baseline CSS animation. Hit the ❤️ button if you liked this post!&lt;br&gt;
Demo: &lt;a href="https://jsfiddle.net/ManuTheCoder/xao1s6kd/68/"&gt;https://jsfiddle.net/ManuTheCoder/xao1s6kd/68/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Bulding a Talwind CSS dark mode switcher using Flowbite</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Mon, 29 Nov 2021 17:05:25 +0000</pubDate>
      <link>https://dev.to/zolidev/bulding-a-talwind-css-dark-mode-switcher-5g9</link>
      <guid>https://dev.to/zolidev/bulding-a-talwind-css-dark-mode-switcher-5g9</guid>
      <description>&lt;p&gt;Disclaimer: this tutorial uses examples from the official Flowbite documentation's &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;dark mode guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Offering a dark version for your website is more of an expected feature rather than a nice to have nowadays. Luckily, Tailwind CSS has a dark mode functionality enabled and the components from Flowbite also support it by using the "class" option.&lt;/p&gt;

&lt;p&gt;Learn how to enable and build a &lt;a href="https://flowbite.com/docs/customize/dark-mode/"&gt;dark version switcher for Tailwind CSS and Flowbite&lt;/a&gt; by using JavaScript and the configuration file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#toggle-dark-mode-manually"&gt;
  &lt;/a&gt;
  Toggle dark mode manually
&lt;/h2&gt;

&lt;p&gt;All you need to do to enable dark mode for your Tailwind CSS project and Flowbite components is to add the following code inside your &lt;code&gt;tailwind.config.js&lt;/code&gt; file and then add the &lt;code&gt;dark&lt;/code&gt; class on your &lt;code&gt;html&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;class&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Alternatively, you can also just use the "media" option to automatically set the dark or light theme based on the browser's color scheme preference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// tailwind.config.js&lt;/span&gt;
&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;darkMode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;media&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dark-mode-switcher"&gt;
  &lt;/a&gt;
  Dark mode switcher
&lt;/h2&gt;

&lt;p&gt;If you want to create a dark mode switcher for Tailwind CSS and Flowbite you'll have to add some JavaScript code and a toggle element that a user can use to change their preferences.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Toggle dark mode by checking user preference in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of your HTML:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;// On page load or when changing themes, best to add inline in `head` to avoid FOUC&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will first check if you've previously set the theme color preference manually using the local storage and as a fallback it will either set the dark or light mode based on your browser color scheme preference.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element that can be interacted with to manually change the theme color:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme-toggle"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"button"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg text-sm p-2.5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme-toggle-dark-icon"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-5 h-5 hidden"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 20 20"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme-toggle-light-icon"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"w-5 h-5 hidden"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"currentColor"&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 20 20"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"&lt;/span&gt; &lt;span class="na"&gt;fill-rule=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt; &lt;span class="na"&gt;clip-rule=&lt;/span&gt;&lt;span class="s"&gt;"evenodd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example we used a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; component where we change the icon inside based on the current color scheme.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Add the following JavaScript inside your main file to handle the click events on the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;themeToggleDarkIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-toggle-dark-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;themeToggleLightIcon&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-toggle-light-icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Change the icons inside the button based on previous settings&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(prefers-color-scheme: dark)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleLightIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleDarkIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;themeToggleBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;theme-toggle&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;themeToggleBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="c1"&gt;// toggle icons inside button&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleDarkIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;themeToggleLightIcon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// if set via local storage previously&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;// if NOT set via local storage previously&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;light&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color-theme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dark&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This script changes the icon inside the button based on previous preferences and also handles the click events by setting the dark mode preference using local storage and also adding or removing the &lt;code&gt;dark&lt;/code&gt; class from the main &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;This dark mode switcher is part of a larger open source component library built with Tailwind CSS called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sB3FIxZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itzxfhelcifuo317mhh2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sB3FIxZ---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/itzxfhelcifuo317mhh2.png" alt="Flowbite - Tailwind CSS components" width="880" height="444"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can learn more about this &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Tailwind CSS component library&lt;/a&gt; by checking out the official Flowbite documentation.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>webdev</category>
      <category>tutorial</category>
      <category>op</category>
    </item>
    <item>
      <title>Setting up VS Code for beginners</title>
      <author>Haris#</author>
      <pubDate>Mon, 29 Nov 2021 16:46:59 +0000</pubDate>
      <link>https://dev.to/harishash/setting-up-vs-code-for-beginners-4m03</link>
      <guid>https://dev.to/harishash/setting-up-vs-code-for-beginners-4m03</guid>
      <description>&lt;p&gt;VS code editor has arguably become the most popular tool for development. It is no doubt powerful, easy to get along with and very light. Customizing VS Code according to your needs and work can bring a massive difference in the performance of your development. But the question remains - Does it even matter how the code editor looks? Because after all it’s just a tool to get the job done. I personally think attention to details is very important, as a good looking working space or even a tool can greatly influence productivity. If I like how it looks, I’ll probably enjoy writing code even more. Also, for how long can you look at the same editor, I bet you get bored looking at the same thing all the time. &lt;/p&gt;

&lt;p&gt;So, in today’s article, I’ll present to you my top preferences to customize VS Code editor for maximum efficiency.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#theme"&gt;
  &lt;/a&gt;
  Theme
&lt;/h1&gt;

&lt;p&gt;Customizing themes according to your preference in VS Code is very well known in the dev community. Here are a few of my favourites that you can find and use for free through its marketplace.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#andromeda"&gt;
  &lt;/a&gt;
  Andromeda:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ccoZohJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um71pdc2w19sdmg6drtb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ccoZohJr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/um71pdc2w19sdmg6drtb.png" alt="Andromeda VS Code extension" width="880" height="161"&gt;&lt;/a&gt;Andromeda is for devs who want to combine art with programming. It has one of the best UI with vibrant colors, dark background, etc. It has vivid colors and high saturation but if you like your interface to be minimal this is not the right choice for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=EliverLara.andromeda"&gt;Try Andromeda&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monokai-pro"&gt;
  &lt;/a&gt;
  Monokai Pro:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MMFulIXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wryi4hag52bci4q9yl6m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MMFulIXp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wryi4hag52bci4q9yl6m.png" alt="Monokai Pro VS Code extension" width="880" height="160"&gt;&lt;/a&gt;Monokai Pro is undoubtedly a professional visual studio code theme that comes with colors. This is the one I use the most as I love colors and I’m one of those devs who love to have a plethora of colors to play with while coding. Monokai Pro is colorful but you won’t get overwhelmed with colors. So, it is bright, clean, and perfect to code on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=monokai.theme-monokai-pro-vscode"&gt;Try MonoKai Pro&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abyss"&gt;
  &lt;/a&gt;
  Abyss:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XXtYnlpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shsvw2pxa4b7iq2njxas.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XXtYnlpN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/shsvw2pxa4b7iq2njxas.png" alt="Abyss VS Code extension" width="880" height="164"&gt;&lt;/a&gt;This is one of the most underrated themes but I enjoy using it for some reason. This is literally like art. Very eye pleasing caring colors which fantastically classify semantics of the code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=gerane.Theme-Abyss"&gt;Try Abyss&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#icons"&gt;
  &lt;/a&gt;
  Icons
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#material-icons"&gt;
  &lt;/a&gt;
  Material Icons:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nv3ExbJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9pp2xwnmwthx4ff3qlc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nv3ExbJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m9pp2xwnmwthx4ff3qlc.png" alt="Material icons VS Code icons extension" width="880" height="164"&gt;&lt;/a&gt;I recommend it to anyone who would like their VS Code workspace to look modern, spiced up, and professional. It helps me instantly find folders without any issue and looks beautiful. Best theme for highlighting important project directories. This is the only Icon theme I’ve used and I’m enjoying it so far. Let me know your favourites down in comments and I'll give them a try.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Try Material Icons&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#fira-code"&gt;
  &lt;/a&gt;
  Fira Code:
&lt;/h2&gt;

&lt;p&gt;Fonts depend on personal taste. If you’re been writing code for years there is a chance that you might not want to change but for beginners it’s common to experiment and set one for yourself. Fira is one of my favourite fonts when it comes to coding as it makes it easy for me to read the code.&lt;br&gt;
&lt;a href="https://fonts.google.com/specimen/Fira+Code"&gt;Get Fira Code&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#monoid-font"&gt;
  &lt;/a&gt;
  Monoid font:
&lt;/h2&gt;

&lt;p&gt;Another favourite font is Monoid as it has extra-large punctuation marks and operators, apertures are large to help make characters more distinguishable, and ascenders and descenders are kept short and because it’s open source you can even tweak it to your tastes if you like.&lt;br&gt;
&lt;a href="https://larsenwork.com/monoid/"&gt;Get Monoid&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hack-font"&gt;
  &lt;/a&gt;
  Hack Font:
&lt;/h2&gt;

&lt;p&gt;Last but not the least, Hack. This is not the best but I like this font because it’s easy to read and is easily distinguishable.&lt;br&gt;
&lt;a href="https://sourcefoundry.org/hack/"&gt;Get Hack&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#extensions"&gt;
  &lt;/a&gt;
  Extensions
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#prettier"&gt;
  &lt;/a&gt;
  Prettier:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w8tQrjAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8d262we33os2q6s5k0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w8tQrjAy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0z8d262we33os2q6s5k0.png" alt="Prettier VS Code extension" width="880" height="139"&gt;&lt;/a&gt;It is a tool that automatically makes your code more readable and consistent with your project's style guide. Prettier also integrates with your editor, so your code is tidied up every time you save your changes.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme"&gt;Try Prettier&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blox"&gt;
  &lt;/a&gt;
  blox:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wqi9Sp1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gpq1agbfcaij91qsmkd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wqi9Sp1E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5gpq1agbfcaij91qsmkd.png" alt="blox VS Code extension" width="880" height="139"&gt;&lt;/a&gt;blox is another extension that I prefer as a beginner because it lets you drop code snippets. It’s aimed at fast tracking the developer workflow through the ease of adding pre-built UI components without leaving your VS code window.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=vsblox.blox"&gt;Try blox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-preview"&gt;
  &lt;/a&gt;
  Live Preview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4D_IuLXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qntx47rzcn6c7mzrrkt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4D_IuLXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0qntx47rzcn6c7mzrrkt.png" alt="Live Preview VS Code extension" width="880" height="139"&gt;&lt;/a&gt;Instead of switching between tabs/desktops everytime I want to see a change, Live preview hosts a local server where you can preview your web projects inside VS code. It has many preview features including HTML file previewing, Embedded preview, Persistent Server task with server Logging, External browser Previewing &amp;amp; Debugging, Console Output Channel, Workspace-less Previewing, and Multi-root Support.&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.live-server"&gt;Try Live Preview&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;So this wraps up my top picks to set up Visual Studio Code for Beginners. Let me know your favourite picks down in the comments. Hope y'all enjoy this article too.&lt;/p&gt;

&lt;p&gt;Happy Developing!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>productivity</category>
      <category>vscode</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Semantics, Not Syntax; Developer empowerment using functional-first programming</title>
      <author>Kirk Shillingford</author>
      <pubDate>Mon, 29 Nov 2021 16:35:42 +0000</pubDate>
      <link>https://dev.to/kirkcodes/semantics-not-syntax-developer-empowerment-using-functional-first-programming-45oo</link>
      <guid>https://dev.to/kirkcodes/semantics-not-syntax-developer-empowerment-using-functional-first-programming-45oo</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;"It's not about syntax; it's about semantics."&lt;/em&gt; - &lt;a href="https://twitter.com/rtfeldman"&gt;Richard Feldman&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This article is just a collection of my thoughts concerning my favourite languages and why I enjoy them. For the most part, I think software developers operate like artists; our attachment or reluctance to different technologies is heavily influenced by recency, emotional connection, and personal association. We like the things we like, not necessarily the things that are "correct" if there is even some correct to be.&lt;/p&gt;

&lt;p&gt;However, in recent times I've seen a few languages spark joy for myself and other developers, and I have spent some time contemplating why that is the case; what makes these (seemingly disparate and unrelated) languages all seem to inspire the same type of zeal and interest in their users.&lt;/p&gt;

&lt;p&gt;That seeming disparity is essential. Rust, Elixir, f#, and Go could never be mistaken for each other, yet their advocates' &lt;em&gt;emotional&lt;/em&gt; response feels familiar. And in between the various quirks of function definition, platforms, object definitions, etc., there seems to be some more fantastic design ethic that draws people in.&lt;/p&gt;

&lt;p&gt;So I'd like to surface some of the ones that I've noticed and maybe explain a bit of &lt;em&gt;why&lt;/em&gt; I think they matter to us.&lt;/p&gt;

&lt;p&gt;Note: I'll be using examples from a tiny &lt;a href="https://github.com/tkshill/FSnake/blob/master/src/Snake.fs"&gt;implementation&lt;/a&gt; of the Snake Game I wrote in &lt;a href="https://fsharp.org/"&gt;F#&lt;/a&gt; here because the language exemplifies pretty much all the things I'll be speaking about today. Also, I like it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#immutability-as-default"&gt;
  &lt;/a&gt;
  Immutability as Default
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/JSjiaBMFpyrQ66VfdP/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/JSjiaBMFpyrQ66VfdP/giphy.gif" alt="gif about hating changes" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I had to put forth the single most powerful of these language semantics to influence and improve the type of programs we write, it would have to be the &lt;em&gt;decision&lt;/em&gt; to make values &lt;strong&gt;not&lt;/strong&gt; alterable by default.&lt;/p&gt;

&lt;p&gt;I say value here, not variable, because, of course, if a value cannot be mutated once initialised, it's not varying at all now. But the concept of variables seems so fundamentally baked into what programming means that the idea of working without them seems inconceivable. What does it mean to program with variables? &lt;/p&gt;

&lt;p&gt;To the computer, not much. Under the hood, languages that leverage immutability become the same variables and spaces in memory that we've become used to. But to the developer, it's a &lt;strong&gt;big deal&lt;/strong&gt; to be able to make guarantees that data can only ever be what you defined it to be the &lt;em&gt;first&lt;/em&gt; time. And if you want something new, you can use the first thing as a template for the new thing, but they are not the same.&lt;/p&gt;

&lt;p&gt;Let's look at an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;
&lt;span class="p"&gt;[&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;StructAttribute&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;]&lt;/span&gt;
&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;advance&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;AlreadyOver&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;EatsFood&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;newSnake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updateSnake&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="bp"&gt;true&lt;/span&gt;
      &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;newFood&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createFood&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newSnake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Head&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt; &lt;span class="n"&gt;newSnake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newSnake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newFood&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the core data type for our Snake implementation, the type &lt;code&gt;Game&lt;/code&gt;, a record/object with fields Food of a kind &lt;code&gt;Food&lt;/code&gt;, Snake of type &lt;code&gt;Snake&lt;/code&gt;, Size of type &lt;code&gt;int&lt;/code&gt; and Status of type &lt;code&gt;Status&lt;/code&gt;. We'll learn what those types are a little later in the article, but what I want to focus on right now is a snippet of the &lt;code&gt;advance()&lt;/code&gt; function shown below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;advance()&lt;/code&gt; is a function that accepts a game and returns a game. I've trimmed away most of the implementation but kept the portion where advance has determined the snake has eaten a piece of food.&lt;/p&gt;

&lt;p&gt;Let's look at the order of operations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;let newSnake = updateSnake game.Snake true&lt;/code&gt; is used to create a new snake based on the state of the old one.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;let newFood = createFood game.Size (newSnake.Head:: newSnake.Tail)&lt;/code&gt; creates a &lt;em&gt;new&lt;/em&gt; piece of food by passing in the size of the grid and our new snake.&lt;/li&gt;
&lt;li&gt;Finally we return &lt;code&gt;{ game with Snake = newSnake; Food = newFood }&lt;/code&gt;. Now, this &lt;em&gt;looks&lt;/em&gt; very much like a stateful update. It is changing the game fields to these new values. But what it's doing is &lt;em&gt;making a new record&lt;/em&gt;, using the values from the old game, but with these new changes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The old game was unmodified. The game returned is an entirely different value. But the semantics of the language make it cheap, efficient, and sensible to produce new values. So we don't have to worry about actions later accidentally mutating previous values.&lt;/p&gt;

&lt;p&gt;It's essential to think about this last part. It's not that we &lt;em&gt;can't&lt;/em&gt; program like this in other languages. It's just that their semantics make it less worthwhile. It's harder to track when you're mutating or not. Idiomatic methods and functions in those languages mutate. There could be a performance overhead for making new values too often. These are all &lt;em&gt;semantic barriers&lt;/em&gt; to using immutable values and disempowering the developer from this programming style, leading to more precarious code.&lt;/p&gt;

&lt;p&gt;In languages like F# and &lt;a href="https://www.rust-lang.org/"&gt;Rust&lt;/a&gt;, the &lt;code&gt;mutable&lt;/code&gt; keyword is an intentional indicator to the language that you intend to modify a value. In languages like &lt;a href="https://elm-lang.org/"&gt;Elm&lt;/a&gt;, you cannot do mutation at all. But either way, it makes the programmer much more &lt;em&gt;thoughtful&lt;/em&gt; about how they change states in their code. And in the field of software development, &lt;strong&gt;thoughtfulness matters&lt;/strong&gt;*.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-default-nulls"&gt;
  &lt;/a&gt;
  No Default Nulls
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/ZCCERtxEH01ksB2tXu/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/ZCCERtxEH01ksB2tXu/giphy.gif" alt="gif of being disappointed by nothing" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I won't spend too much time on this one since many, many people have expounded on the &lt;a href="https://hinchman-amanda.medium.com/null-pointer-references-the-billion-dollar-mistake-1e616534d485"&gt;dangers&lt;/a&gt; of &lt;a href="https://www.lucidchart.com/techblog/2015/08/31/the-worst-mistake-of-computer-science/"&gt;null&lt;/a&gt; &lt;a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/"&gt;values&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Suffice to say, it is difficult to &lt;strong&gt;trust&lt;/strong&gt; types, typing, and functions itself in languages that do not or cannot guarantee that the function will return the type you expect, and perhaps more importantly, do not enforce that you write operations that &lt;em&gt;return&lt;/em&gt; the types you say they do.&lt;/p&gt;

&lt;p&gt;It's OK to have a function that returns &lt;code&gt;Some value&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;. That's a semantically correct logical operation. Sometimes things fail. What's &lt;strong&gt;not&lt;/strong&gt; fine is if language &lt;em&gt;inserts&lt;/em&gt; a null value because you &lt;em&gt;forgot&lt;/em&gt; to return a value at all operation paths in your function. It's hard to write and use code that you cannot trust. It's hard to read and follow docs if every function can &lt;em&gt;not&lt;/em&gt; return the value it's supposed to.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;changeDirection&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="n"&gt;proposedChange&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
    &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;proposedChange&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Perpendicular&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proposedChange&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="p"&gt;_&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This function, &lt;code&gt;changeDirection&lt;/code&gt;, is responsible for changing the way the snake is moving. It has some guard logic for making sure the snake's direction can only change &lt;em&gt;perpendicularly&lt;/em&gt;. A snake moving up can either go left or right, but it can't, for example, reverse back into itself.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;| _ -&amp;gt; game&lt;/code&gt; is the default case for our match (switch) statement where we return the game that came in unchanged. And F# will complain if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We forget the default (or fail to account for all possible shapes of the input)&lt;/li&gt;
&lt;li&gt;We return anything but a game from this function at any point. It won't compile unless we &lt;em&gt;tell&lt;/em&gt; it that this function could return a game or something else. But then, everywhere we call this function, we would have to deal with the fact that it &lt;em&gt;might&lt;/em&gt; return a game or it might not. All our inputs have to match our outputs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that means if I say a function returns an &lt;code&gt;int&lt;/code&gt;, the language itself will ensure I'm not lying, and I'd rather not be a liar.&lt;/p&gt;

&lt;p&gt;Almost every language I know created in the last decade does not have default nullability on its functions and objects. What was meant as a convenience turned out to be a detriment, and it turns out developers prefer living without it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#brevity"&gt;
  &lt;/a&gt;
  Brevity
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/X9jbyxzhco1JmR2AsR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/X9jbyxzhco1JmR2AsR/giphy.gif" alt="gif of a short person being annoyed" width="480" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have &lt;em&gt;many&lt;/em&gt; thoughts on brevity. So many thoughts. I can't write them all because there's something wrong with not being brief about being brief.&lt;/p&gt;

&lt;p&gt;So, briefly,&lt;/p&gt;

&lt;p&gt;Programming languages and paradigm popularity ebbs and wanes. But nothing truly goes away. In the 90s and aughts, we saw C#, C++, and Java in maybe their heyday as the language &lt;em&gt;du jour&lt;/em&gt; of software development. Many times, it has been posited that the rise of &lt;em&gt;dynamic&lt;/em&gt; languages like python, ruby, and javascript was a direct response to developers feeling the friction of the overhead of the enterprise languages.&lt;/p&gt;

&lt;p&gt;Some people think that this was a resistance to the rigidity of static typing. Developers wanted more freedom and spent less time "type wrangling", opting for performing actions over defining structures.&lt;/p&gt;

&lt;p&gt;I think that's &lt;em&gt;part&lt;/em&gt; of it, and not all of it. Specifically, I don't believe the types were necessarily the problem, but more like collateral damage from incredibly verbose language syntax.&lt;/p&gt;

&lt;p&gt;Curly braces, accessibility modifiers, semicolon, semicolon, semicolon, and always everywhere type definitions made for an intimidating syntax for new developers and seemed to add to laden the burgeoning developer; the better you understood the language, the more code you seemed to have to write to express yourself.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="n"&gt;opposite&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="c1"&gt;// Direction -&amp;gt; Direction&lt;/span&gt;
    &lt;span class="k"&gt;function&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Up&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Down&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Down&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Up&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;
    &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a private function in F# that returns the opposite direction. F# does not make explicit return statements in its functions; everything is an expression, so the function's body **statementsvalits. Indentation handles defining the function body. Newlines define the following case in the switch. Arrows (-&amp;gt;) separate cases from results. &lt;em&gt;Mise en place&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Languages like python, F#, and Rust, in contrast to the older iterations of the enterprise languages, do their best to eliminate superfluous syntax, verbose symbols and overly elaborate exposition for every construct. They embrace whitespace as syntax; an idea which arguably does not make that much sense for compilation, but makes a massive difference for &lt;strong&gt;human readability&lt;/strong&gt;. Code people can read and parse is lexically succinct.&lt;/p&gt;

&lt;p&gt;By and large, languages are getting briefer and more expressive, relying more on intuitive whitespace for scoping.&lt;/p&gt;

&lt;p&gt;And as for the question of verbose type definitions:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#type-inference"&gt;
  &lt;/a&gt;
  Type inference
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/hTerI4FpPtJg4/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/hTerI4FpPtJg4/giphy.gif" alt="gif of two men asking if you're psychic" width="499" height="241"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a direct continuation of the pattern of brevity discussed above, recently we've seen the emergence of &lt;strong&gt;type inference&lt;/strong&gt; (the ability for a language compiler or runtime to determine and &lt;em&gt;enforce&lt;/em&gt; types based on usage).&lt;/p&gt;

&lt;p&gt;All the F# code I've shown you so far has been fully/strongly typed. Every function parameter and function return has been deduced and enforced by the type checker.&lt;/p&gt;

&lt;p&gt;Some tools, like the VSCode &lt;a href="https://ionide.io/"&gt;Ionide&lt;/a&gt; extension take advantage of this and will display the types &lt;strong&gt;for you&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ualUU4vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzeapno1rna3250q19fs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ualUU4vK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzeapno1rna3250q19fs.png" alt="image of the code with type hints" width="880" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All the type comments you see here are overlaid on to the code. They're not actually being written in the file.&lt;/p&gt;

&lt;p&gt;It's hard for me to return to dynamic languages when I know I can get all the benefits of strong types and compile time guarantees without having to explicitly write all the type information.&lt;/p&gt;

&lt;p&gt;Safety meets brevity. Admittedly, type inference isn't perfect, and you lose context if you're reading the code outside of an optimized editor experience, but at that point, it's still no &lt;strong&gt;worse&lt;/strong&gt; than if the code was dynamic, and you still have the knowledge that all the logic is type safe and checks out.&lt;/p&gt;

&lt;p&gt;I never personally felt the slow down that dynamic programming enthusiasts have mentioned comes with using static types - I think I write &lt;strong&gt;working&lt;/strong&gt; code faster with strong typing - but if you are concerned with speed and expressiveness, type inference seems like an excellent way to mitigate it. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstract-data-types"&gt;
  &lt;/a&gt;
  Abstract Data Types
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/krtDmVuQGssOtMWfRg/giphy.gif" alt="gif of being impressed" width="480" height="268"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We've reached the final pattern I want to discuss here and I feel like I've saved the best for last; at least for me, it is my personal favourite of all the things we've discussed here and the one that has had the greatest impact on my progression as a developer.&lt;/p&gt;

&lt;p&gt;[Algebraic Data Types] aka Custom Types aka Union and Product Types are a relatively straightforward concept with profound applications.&lt;/p&gt;

&lt;p&gt;Ultimately, programming is giving instructions to a machine to perform meaningful work. And modern programming involves &lt;em&gt;making abstractions&lt;/em&gt; that produce code that performs the behaviours we desire. Values, functions, classes, modules and all these other namespaces allow us to define constructs and ideas that map the &lt;em&gt;real&lt;/em&gt; domain of our endeavours to a program space of data structures and logic.&lt;/p&gt;

&lt;p&gt;Algebraic Data Structures (ADTs) provide a straightforward syntax for expressing the shape of a problem with as little overhead as possible.&lt;/p&gt;

&lt;p&gt;Let's see how.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Game&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Snake&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Tail&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Head&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Tail&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Food&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Status&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Active&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Won&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Lost&lt;/span&gt;

&lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Up&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Down&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Left&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Right&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the types representing the domain of my Snake game. The concepts, so to speak, that are meaningful to the idea of snake. What &lt;em&gt;is&lt;/em&gt; a game of snake? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the minimum amount of information necessary to play a game of snake?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a few interesting things happening here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The data structure for the game is composed from smaller structures&lt;/li&gt;
&lt;li&gt;We can easily alias types (give them a more semantically meaningful name that's relevant on the context of our application). Like how &lt;code&gt;Food&lt;/code&gt; and the snake's &lt;code&gt;Head&lt;/code&gt; are both just positions, but we can use their aliases throughout our code for more clarity.&lt;/li&gt;
&lt;li&gt;Status and Direction are both &lt;a href="https://www.typescriptlang.org/docs/handbook/unions-and-intersections.html"&gt;Union types&lt;/a&gt;. They're similar to enums, but they're not integers or strings under the good. They're fully qualified Values that we can use in our code, like making our own primitives unique to this application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might not find this particularly exciting, saying these are &lt;em&gt;just&lt;/em&gt; fancy enums and records, but ADTs are fully unencumbered by shape:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="nc"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Restart&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nc"&gt;Direction&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Tick&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we make a &lt;code&gt;Message&lt;/code&gt; type that has two basic values that don't rely on any other data, and one that requires a Direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight fsharp"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
  &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Restart&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Dir&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;changeDirection&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt; &lt;span class="n"&gt;direction&lt;/span&gt;
  &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;Tick&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nn"&gt;Game&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;advance&lt;/span&gt; &lt;span class="n"&gt;game&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we consume this data type we can make decisions and access the associated data with each value, but &lt;strong&gt;not&lt;/strong&gt; mix them up. We can't use the direction in any value except the &lt;code&gt;Dir direction&lt;/code&gt; case, because the others do not have that structure.&lt;/p&gt;

&lt;p&gt;This allows us to &lt;em&gt;precisely&lt;/em&gt; model domains without wastage. It is not a trivial operation to express something like that message type in a language like Java, and requires significantly more code to do so. As a consequence, people rarely do it, opting to use more mutation, and nullable values to handle states where data is lacking, or shouldn't exist.&lt;/p&gt;

&lt;p&gt;And that causes more bugs.&lt;/p&gt;

&lt;p&gt;We shouldn't write code that squeezes our real-world domain into the primitive types of our programming languages; our programming languges should provide the tools to represent our domain precisely and without wastage. The better the representation, the easier it will be to work with the data.&lt;/p&gt;

&lt;p&gt;ADTs are now a first-class feature for me in any language I want to use. The more resistance a language gives me to describing what a thing &lt;em&gt;actually&lt;/em&gt; is, the less I find myself wanting to use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final thoughts
&lt;/h2&gt;

&lt;p&gt;If you've made it here, thank you for taking the time to read my little love letter to the patterns I enjoy, and why I think other developers enjoy them as well.&lt;/p&gt;

&lt;p&gt;We've gone this whole way without me mentioning functional programming, and that's deliberate. While almost all of these patterns saw their origins and notable iterations in the functional programming space, I've recently found myself moving away from attempting to separate the world into functional or not functional; there are just patterns that I like, and tools that implement them.&lt;/p&gt;

&lt;p&gt;F# itself has recently done the same with it's updated tagline:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;F# empowers everyone to write succinct, robust and performant code&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The goal is not to be functional or object oriented. It's not to be the most popular language or the fastest language.&lt;/p&gt;

&lt;p&gt;It's to help people write good code.&lt;br&gt;
It's to help developers express their desires.&lt;br&gt;
It's to avoid bugs, and errors.&lt;/p&gt;

&lt;p&gt;Languages that execute well on these ideas, seem to be well received. And it's not just the new languages. All the old tools and frameworks are thinking about developer empowerment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It was never really about semicolons.&lt;/strong&gt; The things we've just talked about aren't recommendations or suggestions in style guides. They're not buried in tomes like, "Everything you need to know about X". They're baked into the language ecosystems themselves.&lt;/p&gt;

&lt;p&gt;Let me know in the comments what you think, and what language patterns bring you delight.&lt;/p&gt;

</description>
      <category>fsharp</category>
      <category>functional</category>
      <category>typescript</category>
      <category>rust</category>
    </item>
    <item>
      <title>Aprenda a usar o LinkedIn para aumentar as suas oportunidades profissionais</title>
      <author>Arthur Nascimento Assunção</author>
      <pubDate>Mon, 29 Nov 2021 16:30:50 +0000</pubDate>
      <link>https://dev.to/arthurassuncao/aprenda-a-usar-o-linkedin-para-aumentar-as-suas-oportunidades-profissionais-294g</link>
      <guid>https://dev.to/arthurassuncao/aprenda-a-usar-o-linkedin-para-aumentar-as-suas-oportunidades-profissionais-294g</guid>
      <description>&lt;p&gt;Se torne um profissional bem visto e almejado aplicando essas dicas sobre LinkdeIn.&lt;/p&gt;

&lt;p&gt;Oliver está na metade do curso de Engenharia Elétrica, tira excelentes notas e estuda muito para as provas. Sophia é da turma de Oliver, tira boas notas e estuda para as provas, porém ela tenta participar do máximo de atividades extracurriculares possível. Por fim, Emily, também da mesma turma dos anteriores, tira boas notas e estuda para as provas, porém ela tenta participar de algumas de atividades extracurriculares e, sempre que participa, escreve textos e publica no site Medium ou Dev.to, em seguida posta na rede social LinkedIn falando sobre sua experiência ao fazer a atividade extracurricular e posta o &lt;em&gt;link&lt;/em&gt; do seu texto publicado, além disso, ainda hospeda códigos de trabalhos acadêmicos, que os professores passam, em repositórios no site GitHub. Assim, ela é ativa no Github e LinkedIn.&lt;/p&gt;

&lt;p&gt;A partir dessa história, qual dos três alunos parece ter maiores chances de conseguir estágios e empregos ao longo da vida? Oliver que é um excelente aluno, Sophia que participa de todas atividades extracurriculares, mas que não divulga nada do que faz ou Emily que é boa aluna e divulga tudo que faz e participa?&lt;/p&gt;

&lt;p&gt;Obviamente, o mercado de trabalho não é exato e depende de cada processo seletivo, contudo as chances de Oliver, mesmo sendo o melhor alunos (em notas e, talvez, até conhecimento) dos três são menores que as chances das outras alunas e é bem provável que as chances de Emily sejam as maiores.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;"Saber e não fazer, ainda não é saber" Lao Tsé&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A frase acima é extremamente importante no mundo conectado de hoje em dia, afinal de nada adianta você ter algum conhecimento se ninguém souber disso, se você não colocá-lo em prática.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cuidado-com-as-expectativas"&gt;
  &lt;/a&gt;
  Cuidado com as expectativas
&lt;/h2&gt;

&lt;p&gt;Conseguir a primeira vaga de emprego pode ser bastante difícil, pois:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As empresas costumam ter expectativas irreais. Por exemplo, não é incomum ver cargos de nível júnior exigindo vários anos de experiência.&lt;/li&gt;
&lt;li&gt;Muitos processos de entrevista incluem avaliações de quadro branco com base em algoritmos (vaga de desenvolvedor), mesmo para funções de front-end júnior.&lt;/li&gt;
&lt;li&gt;Boas vagas de empregos para nível júnior geralmente são extremamente competitivas. Algumas chegam a receber centenas de inscrições nos primeiros dias após o anúncio.&lt;/li&gt;
&lt;li&gt;As empresas costumam não deixar claras as informações sobre suas faixas salariais, processo de entrevista e planos de treinamento.&lt;/li&gt;
&lt;li&gt;Atualmente o Brasil está passando por diversas crises e, por isso, nossa taxa de desemprego está altíssima, neste exato momento, dia 18 de novembro de 2021, a taxa é 14,1%, totalizando uns 14,4 milhões de desempregados, segundo o IBGE (2021).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#motivos-para-voc%C3%AA-confiar-neste-texto"&gt;
  &lt;/a&gt;
  Motivos para você confiar neste texto
&lt;/h2&gt;

&lt;p&gt;Ao longo da minha vida tenho seguido a área acadêmica, porém me mantenho extremamente conectado ao mundo profissional, às tecnologias que as empresas estão interessadas e gosto de ensinar aos meus alunos formas de irem mais longe. Assim eu:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Li textos relacionados ao uso de redes sociais, como LinkedIn, para aumentar as chances de alguém conseguir ser contratado;&lt;/li&gt;
&lt;li&gt;Assisti as famosas "Semana da carreira" de alguns profissionais do mercado, todas relacionadas a carreira de desenvolvedor;&lt;/li&gt;
&lt;li&gt;Sigo e segui profissionais, como recrutadores, que abordam temas como escrita de currículo, preenchimento de LinkedIn.&lt;/li&gt;
&lt;li&gt;Sigo no próprio LinkedIn diversos recrutadores;&lt;/li&gt;
&lt;li&gt;Estou em contato com profissionais da minha área;&lt;/li&gt;
&lt;li&gt;Continuo aprendendo tecnologias atuais e me mantenho muito atualizado, inclusive tenho desenvolvidos sites para a instituição onde trabalho, o IFSudesteMG;&lt;/li&gt;
&lt;li&gt;Pedi a alguns amigos que estão no mercado de trabalho para darem revisarem o texto e sugerirem melhorias;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que você sabe que precisa mostrar ao mundo o que sabe, vamos as dicas!!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-o-que-o-mercado-de-trabalho-busca"&gt;
  &lt;/a&gt;
  1. O que o mercado de trabalho busca?
&lt;/h2&gt;

&lt;p&gt;Primeiro precisamos lembrar que cada área de trabalho é única e tem as suas próprias regras e expectativas. Mas algumas são gerais que costumam estar presente em diversas áreas do conhecimento. &lt;br&gt;
Além disso, empresas e recrutadores buscam pessoas que os ajudem a resolver seus problemas, toda empresa tem, ao menos, um produto e todo produto resolve, ao menos, um problema. Então saiba que seu perfil deve se encaixar no que eles acreditam ser a pessoa que irá ajudá-los a resolver os problemas da empresa.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Empresas buscam solucionadores de problemas.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A partir disso, geralmente o que o mercado espera de você:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Conhecimento prático&lt;/strong&gt;: lembre da frase de Lao Tsé ("Saber e não fazer, ainda não é saber"), você precisa demonstrar que tem experiência prática para que as empresas se interessem por você;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Experiência verificável&lt;/strong&gt;: ter tido uma experiência é bom, mas como a empresa saberá se é real? Infelizmente, muitas pessoas mentem em seus currículos, então mostre provas do seu conhecimento;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proatividade&lt;/strong&gt;: Seja proativo, as empresas querem pessoas assim, que deem ideias, que têm mais iniciativa, ou seja, que acrescentam mais a empresa;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Criatividade&lt;/strong&gt;: as &lt;em&gt;Soft Skills&lt;/em&gt; (conhecimentos não-técnicos) estão em alta, uma delas é a criatividade, as empresas esperam que você seja mais que apenas um apertador de parafuso, afinal, na prática, haverá diversas situações novas;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Saber trabalhar em equipe&lt;/strong&gt;: Empresas são formadas de pessoas, então sempre buscam pessoas que trabalham em equipe, tente mostrar projetos onde trabalhou em equipe e dê o crédito aos seus colegas;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Usar melhores práticas&lt;/strong&gt;: toda área tem boas práticas, mostre que seus projetos usam boas práticas, escreva sobre o processo de desenvolvimento de algum projeto mostrando as boas práticas e publique.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Além do que o mercado espera, existem ideias que o mercado não espera de você, contudo aqui dependemos muito de cada área, as dicas são mais voltadas para o mercado de desenvolvimento de &lt;em&gt;software&lt;/em&gt;, mas são úteis em quase todas áreas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Formação acadêmica&lt;/strong&gt;: algumas áreas valorizam muito a formação acadêmica, mas com o mercado cheio de profissionais, ter uma formação não é um diferencial, então ter um diploma de engenheiro não é bem o que as empresas esperam, pois é algo intrínseco a sua área, ainda há áreas não regulamentadas como a computação, onde ter uma formação acadêmica não conta muito e não é obrigatório, afinal existem desenvolvedores de &lt;em&gt;software&lt;/em&gt; que não tem formação acadêmica;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Anos de carreira&lt;/strong&gt;: Ter anos de carreira não significa ser bom, nem mesmo que sua experiência foi boa. Tente detalhar melhor sua experiência e mostrar que seus anos de carreira não são só tempo, são anos aprendendo e desenvolvendo suas habilidades;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Idade&lt;/strong&gt;: É óbvio que a idade tem algum peso na hora da seleção, porém ela não costuma ser um foco das empresas;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quantos cursos ou certificados a pessoa tem&lt;/strong&gt;: Ter feito cursos e ter certificados não significa praticamente nada, eu posso fazer mil cursos e não saber nada sobre eles, por isso te digo, escreva textos sobre os conhecimentos adquiridos em cursos, crie projetos com base nos cursos e mostre que não é só um curso, é uma experiência;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Então o que os &lt;strong&gt;Recrutadores&lt;/strong&gt; olham?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Linkedin&lt;/strong&gt;: Atualmente a maior rede social para divulgar seu currículo, buscar vagas ou encontrar candidatos é o LinkedIn, crie o seu e seja ativo na rede, se venda!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Conteúdos na internet&lt;/strong&gt;: Recrutadores ou gestores com vagas disponíveis podem encontrar você até mesmo por artigos (textos) na internet ou vídeos no Youtube onde você explica conceitos ou processos importantes para a sua área de atuação;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Sites específicos para portfólio da sua área&lt;/strong&gt;: Algumas áreas, principalmente áreas de tecnologia, tem sites específicos para divulgar seus trabalhos, por exemplo, se você é desenvolvedor coloque projetos no Github. Já se você é designer coloque projetos no Pinterest ou Dribble.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Site pessoal como portfólio&lt;/strong&gt;: Você pode também desenvolver ou comprar um site e colocar seus projetos nele.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#2-afinal-o-que-%C3%A9-o-linkedin"&gt;
  &lt;/a&gt;
  2. Afinal, o que é o LinkedIn?
&lt;/h2&gt;

&lt;p&gt;O LinkedIn é uma rede social voltada para o mercado de trabalho, nela criamos perfis profissionais, semelhantes a currículos do mundo digital, e seguimos outros profissionais, empresas e recrutadores. Nesta rede alguns buscam vagas de emprego, outros oferecem vagas e outros agregam valor em seus currículos para, em um futuro momento, buscarem vagas melhores.&lt;/p&gt;

&lt;p&gt;Esta rede social funciona semelhante ao Facebook, mas com o foco totalmente profissional, inclusive evite assuntos que não sejam profissionais, como política, religião e outros assuntos que não agregam valor a uma discussão profissional, também evite ser polêmico, pois pode ser mal interpretado e isso será negativo para sua imagem e nome.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#21-import%C3%A2ncia-do-uso-do-linkedin"&gt;
  &lt;/a&gt;
  2.1. Importância do uso do LinkedIn
&lt;/h3&gt;

&lt;p&gt;A importância da rede é óbvia, servir de local para se candidatar a vagas de emprego e para ofertar vagas. Contudo há outras questões:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Destacar o seu perfil para ajudar a conseguir vagas e indicações;&lt;/li&gt;
&lt;li&gt;Realizar &lt;em&gt;networking&lt;/em&gt; com pessoas da sua área;&lt;/li&gt;
&lt;li&gt;Mostrar seu conhecimento e te ajudar a crescer;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#3-cria%C3%A7%C3%A3o-de-conta-no-linkedin"&gt;
  &lt;/a&gt;
  3. Criação de conta no LinkedIn
&lt;/h2&gt;

&lt;p&gt;Agora que vocÊ sabe o que é essa rede e sua importância, vamos criar uma nova conta. Para isso, primeiro, crie um LinkedIn, para isso abra o site do LinkedIn, como no &lt;em&gt;print&lt;/em&gt; abaixo e clique em &lt;code&gt;Cadastre-se agora&lt;/code&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V9FEvCwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158gvbdniko113mesw4g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9FEvCwW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/158gvbdniko113mesw4g.png" alt="Linkedin - Página inicial" width="880" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Preencha os campos e-mail/telefone e senha, como mostra a figura abaixo, e continue o processo de criação do currículo no LinkedIn.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DMa-bl0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb1it5e0nr1v5l57jvrg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DMa-bl0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb1it5e0nr1v5l57jvrg.png" alt="Linkedin - Criação de conta" width="391" height="454"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora acesse seu perfil, clique em &lt;code&gt;Eu&lt;/code&gt; e depois em &lt;code&gt;Visualizar perfil&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LjRTqzTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muauo5bil60ojy339y66.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LjRTqzTl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/muauo5bil60ojy339y66.png" alt="Linkedin - Visualizar perfil" width="269" height="187"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#4-exemplo-de-perfil"&gt;
  &lt;/a&gt;
  4. Exemplo de perfil
&lt;/h2&gt;

&lt;p&gt;Abaixo uma parte do meu perfil, caso queira acessar acesse em &lt;a href="https://www.linkedin.com/in/arthurassuncao/"&gt;Linkedin.com/in/arthurassuncao&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZvCNw7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t3q2nkmknbsqi91x794.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZvCNw7r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2t3q2nkmknbsqi91x794.png" alt="Linkedin - Perfil de ArthurAssuncao" width="775" height="329"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#5-foto-do-perfil"&gt;
  &lt;/a&gt;
  5. Foto do perfil
&lt;/h2&gt;

&lt;p&gt;Sua foto de perfil é importante, pois ela transmite algumas informações e, infelizmente, as pessoas irão tirar conclusões com base em sua foto, mesmo que não sejam informações corretas. Então ao ver uma foto a pessoa irá analisar se ela transmite seriedade, compromisso, se a fisionomia demonstra que a pessoa é colaborativa e nada arrogante e por ai vai. É óbvio que a partir de uma foto é impossível inferir essas coisas, mas as pessoas farão isso mesmo que inconscientemente. Além disso, a foto bem feita passa uma boa primeira impressão.&lt;/p&gt;

&lt;p&gt;Um site que permite analisar a foto do seu perfil é o &lt;a href="https://www.snappr.com/photo-analyzer/analyzer/"&gt;Snappr Photo Analyzer&lt;/a&gt;. Esse site de tá dicas e notas em diversos quesitos para a sua foto. Uma nota geral maior ou igual a 75 é considerada muito boa. Contudo, recomendo que não se apegue demais ao que o site informa, pois ele faz a analise de forma automática, então uma foto ruim que atenda a alguns critérios pode ser considerada boa.&lt;/p&gt;

&lt;p&gt;Veja a nota da minha foto na figura abaixo. Essa minha foto nem é a melhor do mundo e obteve nota bastante alta:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FDQgfty2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go5ta6c5n0mb6taeryu2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FDQgfty2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/go5ta6c5n0mb6taeryu2.png" alt="LinkedIn - Nota da foto de ArthurAssuncao no Snappr" width="880" height="341"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Como melhorar as suas fotos?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Remova o fundo&lt;/strong&gt;: caso precise, use sites como o &lt;a href="https://www.remove.bg/pt-br"&gt;Remove.bg&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E abaixo umas dicas baseadas no Snappr Photo Analyzer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Sorriso&lt;/strong&gt;: faça um sorriso expressivo, sem mostrar o interior da boca;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Mandíbula&lt;/strong&gt;: mantenha seu queixo reto e com boa sombra;
Olhos: feche levemente seus olhos ao sorrir;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Zoom&lt;/strong&gt;: Mostre seus ombros em sua foto, uma foto com ombros e rosto é mais adequada que apenas seu rosto;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Regra dos terços&lt;/strong&gt;: imagine a sua foto dividida em 9 quadrados (matriz 3x3) e veja se seus olhos ficam próximos as interseções dos quadrados superiores, por exemplo;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Fundo&lt;/strong&gt;: mantenha um fundo neutro e sem muito brilho;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Brilho&lt;/strong&gt;: a foto precisa ser clara (brilhante), mas não muito;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Contraste&lt;/strong&gt;: deve ter um contraste ideal;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Nitidez&lt;/strong&gt;: quanto maior a nitidez e qualidade da foto melhor;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Saturação&lt;/strong&gt;: saturação ideal para que a foto tenha as cores no ponto;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Temperatura da cor&lt;/strong&gt;: deve ser uma temperatura ideal, nem muito quente (vermelha) e nem muito fria (azul);&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#6-se%C3%A7%C3%A3o-t%C3%ADtulo-seu-t%C3%ADtulo-profissional"&gt;
  &lt;/a&gt;
  6. Seção Título (seu título profissional)
&lt;/h2&gt;

&lt;p&gt;A primeira coisa a fazer é alterar o &lt;code&gt;título&lt;/code&gt;, não coloque termos como &lt;code&gt;Em busca de recolocação&lt;/code&gt; ou outro termo que não agregue informação, indique qual a sua função ou a função desejada e inclua palavras-chave, veja como o meu &lt;code&gt;título&lt;/code&gt; fica.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Professor | Desenvolvedor Front-end | React | Typescript
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perceba que indico minha colocação/cargo, sou professor, cargo afim que eu poderia trabalhar (atuo, as vezes, como desenvolvedor para a instituição que trabalho e para mim mesmo, sempre de forma não remunerada) e tecnologias que utilizo (React e Typescript), assim meu perfil é mais facilmente encontrado quando algum recrutador procura por desenvolvedores React, por exemplo.&lt;br&gt;
Ou seja, indique o que vc quer para sua carreira.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#7-se%C3%A7%C3%A3o-sobre"&gt;
  &lt;/a&gt;
  7. Seção Sobre
&lt;/h2&gt;

&lt;p&gt;Aqui é a sua descrição, se venda.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;É a apresentação de si;&lt;/li&gt;
&lt;li&gt;Fale sobre os benefícios de você no cargo pretendido, ou seja, se é um desenvolvedor de sites com conhecimento em testes, fale que &lt;code&gt;desenvolve sistemas confiáveis e estáveis por utilizar testes ao longo do processo de desenvolvimento&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lembre que quem vai ler pode ser da área técnica, por isso palavras-chave e palavras técnicas são interessante, porém boa parte dos que vão acessar seu perfil serão recrutadores, eles querem pessoas que resolvam problemas;&lt;/li&gt;
&lt;li&gt;Explique os motivos pelos quias você tem conhecimento dos requisitos mais comuns para a vaga/cargo pretendida;&lt;/li&gt;
&lt;li&gt;Apresente projetos parecidos com tarefas que a vaga/cargo pretendida realiza;&lt;/li&gt;
&lt;li&gt;Mostre que é autoridade no assunto com base em números, como horas de experiência, projetos concluídos etc;&lt;/li&gt;
&lt;li&gt;Fale na língua dos RHs

&lt;ul&gt;
&lt;li&gt;Quem você é?&lt;/li&gt;
&lt;li&gt;O que você faz?&lt;/li&gt;
&lt;li&gt;Onde você quer chegar?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Detalhe bem, mas seja breve. Recrutadores podem ler dezenas de perfis todos os dias, então não há tempo para ler textos muito longos.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dica, pesquise sobre o método AIDA (Atenção, Interesse, Desejo e Ação), com ele você consegue se destacar mais. &lt;br&gt;
Veja como está o meu Sobre:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2VfGeaa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtewac9ab6qnxw2twzt5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2VfGeaa2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qtewac9ab6qnxw2twzt5.png" alt="LinkedIn - Sobre de arthurassuncao" width="768" height="577"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba que tento sempre falar que tenho experiência, uso palavras-chave, indico minha capacidade por números, pois números servem como prova. Na minha visão, o meu Sobre ainda está um pouco grande, poderia ser mais direto, focado em uma área apenas. Eu poderia pegar algumas informações menos relevantes do Sobre e colocar nas experiências.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Números não mentem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#8-experi%C3%AAncias"&gt;
  &lt;/a&gt;
  8. Experiências
&lt;/h2&gt;

&lt;p&gt;Não importa o cargo, o que importa é o que você fez e quais foram seus resultados e tecnologias/conhecimentos aplicados. Explique o que fez ou faz no cargo.&lt;/p&gt;

&lt;p&gt;Veja como está a minha experiência no IFSudesteMG.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Eav0r8Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkj1n52juislc06320kg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Eav0r8Vj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rkj1n52juislc06320kg.png" alt="LinkedIn - Experiência de ArthurAssuncao" width="768" height="727"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#9-compet%C3%AAncias"&gt;
  &lt;/a&gt;
  9. Competências
&lt;/h2&gt;

&lt;p&gt;As competências formam o que você sabe, suas habilidades, como Excel, Gestão de projetos, Desenho de telas, HTML, Liderança etc.&lt;br&gt;
Essas competências ajudarão o seu perfil a aparecer em buscas, pois cada competência é uma palavra chave, por exemplo, se você adiciona a Excel como competência, então seu perfil pode aparecer em uma busca por profissionais que sabem Excel.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#91-adicione-compet%C3%AAncias"&gt;
  &lt;/a&gt;
  9.1. Adicione Competências
&lt;/h3&gt;

&lt;p&gt;Indique quais você sabe e que são importantes para o cargo pretendido, remova competências inúteis ou pouco relevantes para o cargo, só as mantenha se você tiver poucas competências. Para isso, vá na seção &lt;code&gt;Competências e recomendações&lt;/code&gt; e clique em &lt;code&gt;Adicionar nova competência&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#92-pe%C3%A7a-recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  9.2. Peça recomendações
&lt;/h3&gt;

&lt;p&gt;Peça para amigos te indicarem competências, é possível você pedir pelo próprio LinkedIn, faça assim, envie seu perfil para um amigo, peça para ele ir na seção Competências e recomendações e marcar as competências que ele considera que você tenha, veja um &lt;em&gt;print&lt;/em&gt; da seção competências de um amigo, o Breno. Perceba que eu recomendei ele por &lt;code&gt;Go (Programming Language)&lt;/code&gt;, pois já assisti vídeos e textos sobre Go que ele publicou e o conheço há bastante tempo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9bdq3UGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhotahclmxrwgqam280l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9bdq3UGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vhotahclmxrwgqam280l.png" alt="Competências e recomendações de Breno no Linkedin" width="768" height="439"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#93-consiga-recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  9.3. Consiga recomendações
&lt;/h3&gt;

&lt;p&gt;Conheço algumas formas de conseguir mais recomendações de competências fazendo o seguinte:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Dê recomendações a pessoas que você reconhece tendo tais competências, assim a pessoa se sentirá contente e pensará em te devolver o favor. Isso é muito bom para ser feito com amigos de trabalho, amigos de faculdade ou colegas que são da sua área.&lt;/li&gt;
&lt;li&gt;Publique textos ou vídeos no LinkedIn, diretamente na rede social ou links do seu blog/site, e coloque palavras-chave no texto de divulgação, mostrando que tem aquelas competências, assim alguém pode ler/ver, gostar e te indicar por tais competências.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;
  &lt;a href="#94-testes-de-compet%C3%AAncia"&gt;
  &lt;/a&gt;
  9.4. Testes de competência
&lt;/h3&gt;

&lt;p&gt;O LinkedIn tem uma área de &lt;code&gt;teste de competência&lt;/code&gt;, basta ir na seção &lt;code&gt;Competências e recomendações&lt;/code&gt; e clique em &lt;code&gt;Fazer teste de competência&lt;/code&gt;, conforme a imagem abaixo indica. Cuidado que cada teste dura cerca de 15 minutos e tem perguntas um tanto difíceis, porém vale muito a pena, principalmente se você está no começo da carreira.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Faça testes de competência sem medo de falhar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Faça testes sem medo, pois todo mundo falha, eu preciso tirar um tempo e fazer mais testes, vou reprovar algumas vezes, mas, no final, terei passado em vários.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zOwlYwdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy1kh3nmge2w080vat6n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zOwlYwdF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hy1kh3nmge2w080vat6n.png" alt="Linkedin - Fazer teste de competência" width="771" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Veja como ficam as competências validadas pelo teste, ou seja, as que você foi aprovado. No caso do &lt;em&gt;print&lt;/em&gt;, fui aprovado em CSS e HTML, perceba como elas diferem das outras.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GkxC4hQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r59x7vtpf5ak11jofc5v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GkxC4hQR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r59x7vtpf5ak11jofc5v.png" alt="LinkedIn - Competências" width="682" height="422"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#10-recomenda%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  10. Recomendações
&lt;/h2&gt;

&lt;p&gt;Arthur, mas você acabou de falar de recomendações, calma, acima eu abordei recomendação de competência, aqui é recomendação no sentido de QI (Quem indica), ou seja, aqui você irá solicitar recomendações de pessoas onde elas irão falar sobre como foi trabalhar com você e indicarão qual era a posição delas em relação a você. Veja abaixo um exemplo de recomendação do perfil de um Daniel, no caso eu acessei o perfil dele e fui na seção de Recomendações.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdjyuHXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5z5fox75qsyp5w5uirr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdjyuHXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o5z5fox75qsyp5w5uirr.png" alt="LinkedIn - Recomendações" width="769" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Perceba, na imagem, que você pode solicitar uma recomendação ao Daniel (a pessoa do perfil que você está acessando), pode também recomendá-lo. &lt;br&gt;
Na recomendação que Daniel recebeu temos o nome de quem recomendou, o cargo e empresa e também qual a data e relação da pessoa (Carlos) com Daniel e, obviamente, o texto da recomendação. Portanto, isso é muito importante, pois é uma espécie de indicação.&lt;/p&gt;

&lt;p&gt;Algumas considerações sobre indicações:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cada relação que você tem características diferentes para lhe avaliar, afinal um chefe pode falar sobre como você é responsável, mas pouco pode falar sobre o quanto ajuda seus companheiros, enquanto um colega de trabalho pode falar sobre o quanto você é colaborativo, mas não tanto sobre você ser responsável quanto a prazos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de chefes são muito relevantes, pois são figuras de autoridade e quem ver seu perfil irá aceitar esse viés.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de colegas de trabalho são relevantes, pois são pessoas que viveram o dia a dia contigo, portanto passa credibilidade.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de orientadores/professores podem ser relevantes pelos mesmos motivos que chefes, porém em menor grau, pois podem ser entendidas como tendenciosas.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recomendações de amigos tem menor relevância.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#11-publica%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  11. Publicações
&lt;/h2&gt;

&lt;p&gt;Publicações são conteúdos, podendo ser textos, vídeos ou carrossel (em PDF), postados na rede social e servem para aumentar o engajamento no seu perfil e, com isso, o alcance do seu nome, permitindo que você se conecte a mais pessoas e consiga mais vagas de empregos.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#111-o-que-publicar"&gt;
  &lt;/a&gt;
  11.1. O que publicar?
&lt;/h3&gt;

&lt;p&gt;Primeira coisa é saber o que publicar, te dou uma lista de conteúdos interessantes para serem publicados, seja como textos ou vídeos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Conteúdo sobre um curso rápido que você realizou. Lembre de marcar o instrutor/professor do curso;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre uma tecnologia ou conhecimento que você aprendeu, mesmo que sozinho;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre alguma &lt;em&gt;Soft Skills&lt;/em&gt; que você tem desenvolvido, como liderança, gestão, negociação ou outra;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre alguma disciplina que você tem realizado, pode ser um tema ensinado no curso, um trabalho acadêmico ou qualquer outro conhecimento válido;&lt;/li&gt;
&lt;li&gt;Processo de desenvolvimento de uma ideia ou trabalho que tem feito, para mostrar que você segue boas práticas e boas tecnologias, quando for o caso;&lt;/li&gt;
&lt;li&gt;Conteúdo sobre resolução de exercícios de alguma área de atuação, podendo até abordar possíveis questões de concursos ou de entrevistas;&lt;/li&gt;
&lt;li&gt;e muito mais.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#112-onde-publicar"&gt;
  &lt;/a&gt;
  11.2. Onde publicar
&lt;/h3&gt;

&lt;p&gt;Publique seu texto em seu blog, seu site (caso tenha), no site &lt;a href="https://medium.com/"&gt;Medium&lt;/a&gt;, ou no &lt;a href="https://dev.to/"&gt;Dev.to&lt;/a&gt; ou, mesmo, no &lt;a href="https://pingback.com/"&gt;Pingback&lt;/a&gt;.&lt;br&gt;
Para saber, blogs podem ser criados com plataformas como Blogspot, Wordpress e outras. O Medium é o site de publicação de textos mais famoso de todos, porém ele não é 100% gratuito para quem lê. O dev.to é muito reconhecido dentre os desenvolvedores de &lt;em&gt;Software&lt;/em&gt; e o Pingback têm surgido como alternativa. Assim, recomendo que, se você é programador ou pretende ser, use o Dev.to e, caso esteja em outra área do conhecimento, que use o Medium.&lt;/p&gt;

&lt;p&gt;Enquanto isso, vídeos podem ser postados no famoso Youtube, nesse caso não há o que pensar em alternativas, pois é a plataforma mais famosa.&lt;/p&gt;

&lt;p&gt;Não esqueça, aqui estamos falando da plataforma primária onde os conteúdos serão postados, pois depois você postará o &lt;em&gt;link&lt;/em&gt; desses conteúdos no seu LinkedIn.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#113-dicas-para-agregar-valor-aos-conte%C3%BAdos"&gt;
  &lt;/a&gt;
  11.3. Dicas para agregar valor aos conteúdos
&lt;/h3&gt;

&lt;p&gt;Ao criar um conteúdo, seja um texto, vídeo ou carrossel (estilo instagram), saiba que você precisa:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Falar a língua do seu público-alvo, se é no LinkedIn e quer atingir recrutadores, explique termos técnicos ao longo do texto, assim você mantém o termo (como palavra-chave) e não deixa o recrutador sem entender o texto;&lt;/li&gt;
&lt;li&gt;Usar termos que mostrem que você está antenado com o mercado. Por exemplo, atualmente as &lt;em&gt;Soft Skills&lt;/em&gt; estão em alta, mostre que você tem conhecimento sobre elas, como a Empatia, e mostre, inclusive, que você tem essa habilidade desenvolvida. Faça isso também ao postar o &lt;em&gt;link&lt;/em&gt; do seu conteúdo no LinkedIn.&lt;/li&gt;
&lt;li&gt;Usar muitas palavras-chave e termos relevantes para vagas de emprego, isso é essencialmente importante ao postar no LinkedIn, pois um recrutador ou funcionário técnico de uma empresa, perceberá que você tem conhecimento sobre diversos itens das vagas em aberto nas empresas que trabalham.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#12-projetos"&gt;
  &lt;/a&gt;
  12. Projetos
&lt;/h2&gt;

&lt;p&gt;Adicione seus projetos no LinkedIn e, caso tenha pouca ou nenhuma experiência profissional, coloque seus projetos como experiência profissional. Veja bem, não é para mentir, apenas indicar que um projeto que participou é uma forma de experiência profissional, mesmo que sem contrato e não-remunerada.&lt;/p&gt;

&lt;p&gt;Descreva bem seus projetos e técnicas usadas para facilitar o entendimento por quem acessar o seu perfil. Caso não tenha projetos, monte projetos pessoais ou para pessoas próximas. Se é um desenvolvedor, crie um site clone de um site famoso ou crie um site para uma loja de um amigo.&lt;/p&gt;

&lt;p&gt;Nesse primeiro momento, não pense tanto em ganhar dinheiro, pense na experiência, ela é mais importante.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quem está começando deve focar mais no ganho de experiência que no dinheiro.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#13-crie-uma-url-personalizada"&gt;
  &lt;/a&gt;
  13. Crie uma &lt;em&gt;URL&lt;/em&gt; personalizada
&lt;/h2&gt;

&lt;p&gt;No início do texto eu mostrei a &lt;em&gt;url&lt;/em&gt; (&lt;em&gt;link&lt;/em&gt;) do meu perfil, ela é &lt;a href="https://www.linkedin.com/in/arthurassuncao"&gt;https://www.linkedin.com/in/arthurassuncao&lt;/a&gt;, perceba que ela é personalizada, tem o meu nome de perfil sem muitos números ou caracteres aleatórios, veja os dois exemplos abaixo e me diga qual seria melhor:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/arthurassuncao"&gt;https://www.linkedin.com/in/arthurassuncao&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/arthurass51482_1"&gt;https://www.linkedin.com/in/arthurass51482_1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;É claro que a primeira é melhor, portanto, ao criar sua conta altere a &lt;em&gt;url&lt;/em&gt;, tente usar a mesma &lt;em&gt;url&lt;/em&gt; (a parte que indica o usuário, como &lt;code&gt;arthurassuncao&lt;/code&gt;) que usa em outras redes sociais.&lt;br&gt;
Para fazer isso basta ir no topo do seu perfil a direita e clicar em &lt;code&gt;Editar perfil público e URL&lt;/code&gt;, como mostra a imagem abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--89MeBPZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bxj0gvnudy39ugijltn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89MeBPZb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1bxj0gvnudy39ugijltn.png" alt="LinkedIn - Editar perfil público e URL" width="315" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Na página que será aberta, altere a &lt;em&gt;url&lt;/em&gt; também no canto direito superior, como a figura abaixo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VbZG9JFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kgs86d28og3yu9didlw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VbZG9JFy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8kgs86d28og3yu9didlw.png" alt="LinkedIn - Alterar sua URL personalizada" width="304" height="139"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#14-usando-a-rede-social-linkedin-de-forma-assertiva"&gt;
  &lt;/a&gt;
  14. Usando a rede social LinkedIn de forma assertiva
&lt;/h2&gt;

&lt;p&gt;Se conecte (adicione) a profissionais de sua área e profissionais de recursos humanos (rh - recrutadores), principalmente profissionais ligados a empresas que você tem interesse em trabalhar.&lt;/p&gt;

&lt;p&gt;Ao se conectar a alguém, mande uma mensagem com um bom texto de apresentação, por exemplo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Olá, sou Desenvolvedor Web com experiência em ReactJS e
penso em trabalhar em sua empresa, por isso te adicionei,
pois caso alguma vaga surja, ficarei sabendo e estarei disponível.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#15-como-encontrar-vagas"&gt;
  &lt;/a&gt;
  15. Como encontrar vagas
&lt;/h2&gt;

&lt;p&gt;Há várias formas de encontrar vagas, a forma tradicional é por meio do menu &lt;code&gt;Vagas&lt;/code&gt;, como a figura abaixo mostra.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4dJc11Kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4s3b42d9jnx5klzff5e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4dJc11Kq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4s3b42d9jnx5klzff5e.png" alt="LinkedIn - Menu vagas" width="819" height="638"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nesta parte do site, use o filtro, é possível filtrar até por trabalho remoto.&lt;/p&gt;

&lt;p&gt;Mas há outras formas, sugiro você &lt;strong&gt;pesquisar nas postagens&lt;/strong&gt;, pois muita gente posta vagas como postagem normal. Assim, vá no campo de busca e procure por palavras-chave de vagas que você procura. Por exemplo, um desenvolvedor Web Front-end pode pesquisar por &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;JavaScript&lt;/code&gt;, &lt;code&gt;ReactJS&lt;/code&gt; ou outro termo de vagas almejadas e marque &lt;code&gt;Publicações&lt;/code&gt;. Veja a imagem abaixo com o resultado da busca por &lt;code&gt;vaga ReactJS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Vde6-Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj91rkupuumwbhc1drx7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Vde6-Jo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jj91rkupuumwbhc1drx7.png" alt="LinkedIn - busca de vaga em publicações" width="880" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Assim você irá ver publicações de vagas feitas por outros usuários.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#151-o-que-fazer-ao-encontrar-uma-vaga-em-uma-postagem"&gt;
  &lt;/a&gt;
  15.1. O que fazer ao encontrar uma vaga em uma postagem
&lt;/h3&gt;

&lt;p&gt;Ao encontrar vagas, comente na publicação, mas também mande mensagem direta com um texto de apresentação, mostrando sua experiência relacionadas a vaga. Você também pode cogitar, enviar mensagem para a pessoa perguntando sobre:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mais informações sobre a vaga;&lt;/li&gt;
&lt;li&gt;peça dicas, caso não seja um recrutador;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#16-se-candidate-se-arrisque"&gt;
  &lt;/a&gt;
  16. Se candidate, se arrisque!
&lt;/h2&gt;

&lt;p&gt;Não espere estar 100% apto a uma vaga para tentar, não tente se adequar totalmente aos requisitos de nenhuma vaga. Se você sabe o mínimo para a vaga, tente, qual a pior coisa que pode acontecer? Não ser contratado? Sem problemas, você tenta outra vaga depois.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As únicas pessoas que nunca fracassam são as que nunca tentam.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sabemos que em diversas áreas as empresas exigem milhares de conhecimentos e muitos não irão ser utilizados, na computação isso é extremamente comum, então foque no título da vaga e na descrição ao invés das técnicas e tecnologias pedidas, ou seja, se você tem perfil para ser um Engenheiro eletricista e a vaga é para &lt;code&gt;Pessoa engenheira eletricista&lt;/code&gt; com uma descrição que você tem algum conhecimento, &lt;strong&gt;então se candidate, se arrisque!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Além disso, siga empresas que você poderia trabalhar, pois sempre que postarem vagas de emprego, aparecerá uma notificação, semelhante a notificação da figura abaixo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Siga empresas que tem interesse, pois você receberá notificações de vagas. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eulxksg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss95uazr8apa01iz32zn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eulxksg5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ss95uazr8apa01iz32zn.png" alt="LinkedIn - Notificação de vagas" width="603" height="150"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#17-erros-ortogr%C3%A1ficos-e-de-concord%C3%A2ncia"&gt;
  &lt;/a&gt;
  17. Erros ortográficos e de concordância
&lt;/h2&gt;

&lt;p&gt;Temido por todas as pessoas, o tal do Português e suas concordâncias dão medo, mas são essenciais para uma comunicação profissional, por isso peça para alguém avaliar os textos do seu perfil, pois as vezes cometemos pequenos erros de português. E se um recrutador perceber um erro em seu perfil, pode pensar que você não é tão bom quanto diz ser.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#171-dica-para-verificar-ortografia"&gt;
  &lt;/a&gt;
  17.1. Dica para verificar ortografia
&lt;/h3&gt;

&lt;p&gt;Após escrever um texto, seja o seu Sobre, descrição de experiência ou mesmo uma postagem para um blog ou medium, copie o texto e cole em um editor de textos, como o Microsoft Word ou Libreoffice Writer e verifique se tem erros de ortografia.&lt;/p&gt;

&lt;p&gt;Caso queira verificar ortografia em um texto em inglês use o &lt;a href="https://www.grammarly.com"&gt;Grammarly&lt;/a&gt; ou o altere o idioma do corretor ortográfico do seu programa de &lt;em&gt;office&lt;/em&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#18-como-se-portar-na-rede-social-linkedin"&gt;
  &lt;/a&gt;
  18. Como se portar na rede social LinkedIn
&lt;/h2&gt;

&lt;p&gt;Como você já percebeu, o LinkedIn é uma rede social profissional, é um ambiente profissional, portanto saiba se portar adequadamente. &lt;br&gt;
Quem comete graves erros no LinkedIn, pode ter "sua cabeça pedida", ou seja, alguém pode montar um texto, marcar a pessoa que cometeu tal erro e a empresa que a pessoa trabalha, isso pode fazer com que a pessoa perca o emprego ou tenha dificuldades para conseguir um.&lt;br&gt;
Na maior parte das vezes são erros graves, como ser preconceituoso, assediar outra pessoa pelo LinkedIn, mas há uns casos onde é apenas uma opinião polêmica que alguns não aceitam, sim, temos muita gente intolerante em nosso mundo, inclusive dentre as que se dizem contra intolerância.&lt;br&gt;
Portanto, tenha polidez e fale apenas sobre assuntos estritamente profissionais. Asssim evite:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Temas polêmicos;&lt;/li&gt;
&lt;li&gt;Política, religião e outros temas sem consenso;&lt;/li&gt;
&lt;li&gt;Ser preconceituoso, isso parece óbvio, mas algumas pessoas esquecem;&lt;/li&gt;
&lt;li&gt;Assediar pessoas, LinkedIn é profissional, se quer "dar em cima" de alguém use o Facebook ou Instragram.&lt;/li&gt;
&lt;li&gt;Julgar uma situação sem conhecer a fundo o que aconteceu, isso vale para sua vida, tenha empatia;&lt;/li&gt;
&lt;li&gt;Falta de respeito. Sabemos que as vezes as pessoas podem falar coisas sem sentido ou defender o indefensável, mas nada justifica faltar com o respeito, ainda mais em uma rede social desse tipo;&lt;/li&gt;
&lt;li&gt;Outros assuntos não profissionais.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por fim, não interaja (curtir, comentar ou compartilhar) com conteúdos que tirem o foco da rede. Eu costumo desfazer conexão com profissionais que ficam interagindo com postagem sobre política, por exemplo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#19-respeite-os-recrutadores"&gt;
  &lt;/a&gt;
  19. Respeite os recrutadores
&lt;/h2&gt;

&lt;p&gt;Muitas vezes esquecemos que "o outro" também é um trabalhador como nós, por isso leia as dicas abaixo:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Se uma vaga tem requisitos ou descrição ruim, a culpa é de quem elaborou a vaga, não do recrutador;&lt;/li&gt;
&lt;li&gt;Se o recrutador diz não poder informar a faixa salarial, é bem provável que a gestão da empresa não permita, ou seja, não é mera má vontade;&lt;/li&gt;
&lt;li&gt;Se o recrutador te mandar um pedido de conversa, responda educadamente se você tem interesse ou não, evite ignorar ou ser mal-educado;&lt;/li&gt;
&lt;li&gt;Lembre, o recrutador ou qualquer outra pessoa envolvida no processo está ali trabalhando e seguindo regras da gestão, é uma pessoa como você.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#20-dicas-extras"&gt;
  &lt;/a&gt;
  20. Dicas Extras
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tente ficar, ao menos, 1 ano em cada empresa que trabalhar. Sabemos que alguns empregos são muito ruins, seja pela baixa valorização ou por ambientes tóxicos, mas consecutivas passagens rápidas por empresas "mancham" um currículo. Empresas costumam não ver problema em alguém que ficou 6 meses em um emprego, mas alguém que ficou menos de 12 meses em dois ou mais empregos pode ser muito mal visto, pois vão pensar que esse funcionário usa empresas como trampolim ou que saem na primeira dificuldade, deixando a empresa "na mão". Não cabe a mim dizer se é certo ou errado, mas alerto para um fenômeno que pode acontecer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências
&lt;/h2&gt;

&lt;p&gt;IBGE. Desemprego. Disponível em: &lt;a href="https://www.ibge.gov.br/explica/desemprego.php"&gt;https://www.ibge.gov.br/explica/desemprego.php&lt;/a&gt;. Acesso em 18 de nov de 2021.&lt;br&gt;
Canal Conecta. 21 dicas que vão destacar seu perfil LinkedIn. Disponível em: &lt;a href="https://canalconecta.com.br/21-dicas-que-vao-destacar-seu-perfil-linkedin"&gt;https://canalconecta.com.br/21-dicas-que-vao-destacar-seu-perfil-linkedin&lt;/a&gt;. Acesso em 18 de nov de 2021.&lt;/p&gt;

</description>
      <category>linkedin</category>
      <category>mercadodetrabalho</category>
      <category>portfólio</category>
    </item>
    <item>
      <title>Debugging the Technical Interview. Methods and Cheating</title>
      <author>Shai Almog</author>
      <pubDate>Mon, 29 Nov 2021 16:14:45 +0000</pubDate>
      <link>https://dev.to/codenameone/debugging-the-technical-interview-methods-and-cheating-38lb</link>
      <guid>https://dev.to/codenameone/debugging-the-technical-interview-methods-and-cheating-38lb</guid>
      <description>&lt;p&gt;&lt;strong&gt;A blog post about cheating in a technical interview reminded me of how divided we are on this crucial subject.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The headline caught my attention right away “ &lt;a href="https://levelup.gitconnected.com/i-was-shocked-to-catch-a-candidate-cheating-in-an-online-interview-2441fef0ab4"&gt;I was shocked to catch a candidate cheating in an online interview&lt;/a&gt; ”... How the hell do you cheat in an interview?&lt;br&gt;
Does  &lt;a href="https://en.wikipedia.org/wiki/Cyrano_de_Bergerac_(play)"&gt;Cyrano de Bergerac&lt;/a&gt;  whisper the answer from outside the camera?&lt;/p&gt;

&lt;p&gt;Well, close enough. The candidate was googling answers and copying them into a shared screen, pretending this was his code. Hiding this is lying. That’s never OK. But this really reminded me of a tweet I read ages ago which unfortunately I can’t find… It went something like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My wife is learning to code and confided in me that she's “cheating”. She Googles the stuff she doesn’t know. Should I tell her?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is brilliant! &lt;/p&gt;

&lt;p&gt;We all know what the author means. We all Google coding stuff all the time. Obviously, there’s a way to do this right (especially regarding IP) but if you’re testing something that’s Googlable then you’re testing the wrong skill. Technical Interview questions should focus on things that are more relevant and not Googleable.&lt;/p&gt;

&lt;p&gt;After reading &lt;a href="https://yieldcode.blog/how-to-be-a-great-technical-interviewer/"&gt;these&lt;/a&gt; &lt;a href="https://levelup.gitconnected.com/software-interviews-suck-here-is-how-to-fix-them-ea587f89db89"&gt;articles&lt;/a&gt; on the subject, I felt I needed to write something of my own that reflects my perspective on a good technical interview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-the-goal-in-a-technical-interview"&gt;
  &lt;/a&gt;
  What’s the Goal in a Technical Interview
&lt;/h2&gt;

&lt;p&gt;When I conduct a technical interview, I’m hiring a teammate. This teammate should be a person I want to work with. As a result, I focus on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Obviously, I don’t want to hire a person who’s unreliable. Lying is an instant disqualification&lt;/li&gt;
&lt;li&gt;No live coding tests&lt;/li&gt;
&lt;li&gt;No take home exercises&lt;/li&gt;
&lt;li&gt;No ranking websites or hacker challenges&lt;/li&gt;
&lt;li&gt;All interviews are one on one&lt;/li&gt;
&lt;li&gt;Have three people conduct one-on-one interviews (separately). Reach consensus&lt;/li&gt;
&lt;li&gt;No “make you think” puzzle questions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I tell this to people I get the knee jerk reaction of “so what the hell do you ask” or “why not X?”. I’ll start with the positive first, the things I ask…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debugging-as-a-technical-interview-technique"&gt;
  &lt;/a&gt;
  Debugging as a Technical Interview Technique
&lt;/h2&gt;

&lt;p&gt;I don’t care about programming experience in a specific company. I care about programming experience, it can be in open source, university or elsewhere. If you did any real world programming, then you had bugs and you dealt with them.&lt;/p&gt;

&lt;p&gt;That’s programming. If you don’t know a programming language, you can pick it up. If you don’t know a library or API, you can learn it. But debugging and dealing with issues is a skill you develop by doing. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-hardest-technical-interview-question-i-ever-got"&gt;
  &lt;/a&gt;
  The Hardest Technical Interview Question I Ever Got
&lt;/h3&gt;

&lt;p&gt;Sun Microsystems conducted interviews by using three separate engineers. The 3rd one,  &lt;a href="https://medium.com/@erand"&gt;Eran Davidov&lt;/a&gt;  asked me a question that was one of the hardest questions I ever got in a technical interview. Years later, I asked him about it and he totally forgot that… &lt;/p&gt;

&lt;p&gt;The question was: “Tell me about a bug you made, how you tracked it and fixed it?”. &lt;br&gt;
I started telling him about a bug I tracked, and he stopped me. Was it a bug you made?&lt;/p&gt;

&lt;p&gt;Well, no. “I want to hear about something you made”.&lt;/p&gt;

&lt;p&gt;I don’t get stage fright. I’m never speechless. But I was drawing blanks. I was sitting there and the only bug that came to mind was two days I spent looking for a problem because of a &lt;code&gt;&amp;lt;&lt;/code&gt; sign pointing in the wrong direction… I can’t tell him THAT!&lt;/p&gt;

&lt;p&gt;Eventually I had to confess that I know I’m responsible for bugs… But my brain completely erased them from my mind. He still must have recommended me for the job despite my clear, over inflated ego. At least he knew about that in advance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#great-technical-job-interviews-questions"&gt;
  &lt;/a&gt;
  Great Technical Job Interviews Questions
&lt;/h3&gt;

&lt;p&gt;Based on that, here are some of the best technical interview questions to ask in no particular order:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tell me about the last project you’re passionate about&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I want people who enjoy what they’re doing. I want them to tell me what worked, what didn’t work. What they can do better and what they learned. By creating a discussion around this, I need to form a metal image of the project.&lt;/p&gt;

&lt;p&gt;I love seeing people “geek out” on a project. If they don’t, it’s a serious warning sign.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tell me about the last big bug you tracked. What was your process?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A debugging story tells me more about a candidate than anything else. People might draw a blank here or might take a while to find something, but these are engaging stories, so they’re great for an interview.&lt;/p&gt;

&lt;p&gt;People need to describe the tools and techniques they used to track a bug. That’s something you can only do with experience. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How would you implement something like X?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I was interviewing at Lightrun, they asked me how I would scale a specific system for production. I could use a whiteboard but honestly this works OK verbally, too. Making architectural decisions, explaining them and then adapting based on additional considerations… That’s core to what we do.&lt;/p&gt;

&lt;p&gt;You can ask dozens of questions like this… The nice thing about this is that you can even give them to candidates in advance and they can come prepared. You still wouldn’t lose much of the value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-about-code"&gt;
  &lt;/a&gt;
  What about Code?
&lt;/h3&gt;

&lt;p&gt;Reading code is much harder than writing it. That’s why I consider coding questions completely redundant. Here, open source can come to the rescue. &lt;/p&gt;

&lt;p&gt;One thing I did in recent interviews was this. I sent a link to an open source repository and an issue. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Describe to me how you would debug this issue?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then I would guide them through the process verbally to see if they pick up my intention. E.g. I explained a situation where the user clicks something and system doesn’t respond. So where would you look?&lt;/p&gt;

&lt;p&gt;Obviously, people had to locate the part that handles event dispatching to place a breakpoint there. Following that thought process was very illuminating. Far more valuable than a bubble sort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-common-technical-interview-questions-are-problematic"&gt;
  &lt;/a&gt;
  Why Common Technical Interview Questions are Problematic
&lt;/h2&gt;

&lt;p&gt;So it’s time to get negative. Previously, I instantly discarded many technical interview techniques as being flawed. Your favorite might have been there, so it’s time to explain why I don’t like them.&lt;/p&gt;

&lt;p&gt;I’ll skip the “no liars” rule. I think that’s pretty obvious. But here are the others.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-live-coding-tests"&gt;
  &lt;/a&gt;
  No live coding tests
&lt;/h3&gt;

&lt;p&gt;We spend more time debugging and reading code than coding in a normal day to day. So writing code in an interview is redundant. It’s stressful and doesn’t show much.&lt;/p&gt;

&lt;p&gt;Doing it on a whiteboard or a foreign computer is the worst. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-take-home-exercises"&gt;
  &lt;/a&gt;
  No take home exercises
&lt;/h3&gt;

&lt;p&gt;This is humiliating. Getting homework from an employer shows a future employee complete disregard for their time. The people who will go through with this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Desperate - I don't mean this as a slight. Getting a job in a rough market or a first job is hard and if this is what the employer demands... But even if you get the job, this leaves a bad taste&lt;/li&gt;
&lt;li&gt;Would probably just copy off the internet&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So you get absolutely no valuable information from this and lose potentially outstanding candidates who take a job with an employer that values their time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-ranking-websites-or-hacker-challenges"&gt;
  &lt;/a&gt;
  No ranking websites or hacker challenges
&lt;/h3&gt;

&lt;p&gt;These websites over value people like myself who have a larger social footprint. When hiring you want to “moneyball” the candidates. You want someone who doesn’t look good for a casual interview but is an amazing candidate. I’ve run into some coders who are timid people with a small social footprint. But they are amazing coders.&lt;/p&gt;

&lt;p&gt;I have 50k on stackoverflow, it mostly says I answered over 3000 questions. It means I spent time on that, not that I'm exceptionally talented. &lt;/p&gt;

&lt;p&gt;I think it speaks to my work ethic and patience. Those make me a great developer advocate. But for a programming position, that doesn’t really say anything about my skill as a developer. My hacker rank is also very high because I wrote a lot of code. But my experience is very domain specific and might not apply to a specific job. I’m also REALLY expensive… &lt;/p&gt;

&lt;p&gt;Ultimately, I think those websites are a small data point you can consider. But for coding or team leading, they shouldn’t be a major factor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#all-interviews-are-one-on-one"&gt;
  &lt;/a&gt;
  All interviews are one on one
&lt;/h3&gt;

&lt;p&gt;This isn’t something I experienced. But I heard people (especially women) complain that they felt “ganged up on” when several interviewers “bombed them” with questions. This is difficult. We want the interviewee to feel at ease. After all, if we like them, we need them to like us back. The interview experience is the first step in hiring.&lt;/p&gt;

&lt;p&gt;As such, we want a one-on-one process to help form a relationship. This will be valuable later when hiring.&lt;/p&gt;

&lt;p&gt;Ideally, you want diverse interviewers to prevent bias from creeping into the process. This is tough in smaller startups before they have representation in wider demographics. Once you have that, you need to integrate it into the process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#have-three-people-conduct-oneonone-interviews-separately-reach-consensus"&gt;
  &lt;/a&gt;
  Have Three people conduct one-on-one interviews (separately). Reach consensus
&lt;/h3&gt;

&lt;p&gt;This sort of interview breeds mistakes. I can form a positive opinion of a person because of charm, projection, etc. When using this method with a single interviewer, you will get problematic results. &lt;/p&gt;

&lt;p&gt;The strength is in numbers and consensus. Charm might fool one person. One person might miss a problematic sign. But three people are hard to fool.&lt;/p&gt;

&lt;p&gt;Two is problematic, if they disagree about a fact there’s no one to balance this out. They might still miss something. Four is a bit too much. They might create a situation where the interviewee might feel uncomfortable. &lt;/p&gt;

&lt;p&gt;No “make you think” puzzle questions&lt;br&gt;
People love the “why are pothole covers round” type of questions. I honestly love them too. As a game. &lt;/p&gt;

&lt;p&gt;Do they tell me if a person can be a good coder?&lt;/p&gt;

&lt;p&gt;Hell no. &lt;/p&gt;

&lt;p&gt;Why not head hunt chess grand masters?&lt;/p&gt;

&lt;p&gt;The skill set required to solve these puzzles is completely different. &lt;/p&gt;

&lt;p&gt;So why do companies such as Google still do it?&lt;/p&gt;

&lt;p&gt;To make the hiring process seem tough. By making getting a job at Google seem “exclusive” and hard to get, you create an aura of achievement around your company. This makes people value that achievement more than it’s actually worth.&lt;/p&gt;

&lt;p&gt;So why don’t I recommend this?&lt;/p&gt;

&lt;p&gt;Because we’re not Google. Without the branding surrounding a hiring process like that, you just have another filter that will block excellent candidates. All of that for a redundant question that makes no sense. A major faceless organization can play to its made up “exclusive club” as a strength. Smaller companies need to have a more personal touch when hiring (hence one on ones).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In technical interviews don’t:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Do live coding tests&lt;/li&gt;
&lt;li&gt;Take home exercises&lt;/li&gt;
&lt;li&gt;Use ranking websites or hacker challenges&lt;/li&gt;
&lt;li&gt;Interview as a group&lt;/li&gt;
&lt;li&gt;Interview by just one or two people&lt;/li&gt;
&lt;li&gt;Use puzzle questions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ask open questions&lt;/li&gt;
&lt;li&gt;Ask about debugging&lt;/li&gt;
&lt;li&gt;Ask about passion and recent projects&lt;/li&gt;
&lt;li&gt;Interview one on one&lt;/li&gt;
&lt;li&gt;Have three interviewers&lt;/li&gt;
&lt;li&gt;Support diversity&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>hiring</category>
      <category>career</category>
      <category>discuss</category>
      <category>startup</category>
    </item>
    <item>
      <title>Javascript Namespace pattern </title>
      <author>George Hadjisavva</author>
      <pubDate>Mon, 29 Nov 2021 15:57:12 +0000</pubDate>
      <link>https://dev.to/scuz12/javascript-namespace-pattern-b9p</link>
      <guid>https://dev.to/scuz12/javascript-namespace-pattern-b9p</guid>
      <description>&lt;h2&gt;
  &lt;a href="#namespace-pattern"&gt;
  &lt;/a&gt;
  Namespace Pattern
&lt;/h2&gt;

&lt;p&gt;Namespace can dramatically reduce the number of globals required and at the same time prevents the collisions or excessive name prefixing .&lt;br&gt;
Its important to know that javascript doesn't have namespaces built into the language syntax , but you can achieve this feature quite easy .Instead of adding functions,objects and variables into global scope you can create one global object and add all the functionality &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#refactor-antipattern-to-namespace-example"&gt;
  &lt;/a&gt;
  Refactor anti-pattern to Namespace example
&lt;/h3&gt;

&lt;p&gt;Consider this example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//anti-pattern example
function Read() {}
function Speak() {}
var topic_to_learn = "Javascript";
//objects
var book1 = {}
book1.data = {title:"Learn javascript",author:"John doe"}
var book2 = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;in this example all the functions,variables and objects are declared and polluting the global scope of your application .  You can refactor this type of code by creating a single global object for your application , called for example &lt;em&gt;Student&lt;/em&gt; and change all functions and variables to become properties of your global object&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;//Declare the global object
var STUDENT = {}
//constructors
STUDENT.Read = function(){};
STUDENT.SPEAK = function(){};

//a varibale
STUDENT.topic_to_learn = "javascript"

//object container 
STUDENT.books = {}

//nested objects 
STUDENT.books.book1 = {};
STUDENT.books.book1.data = {title:"Learn javascript",author:"John doe"}
//add second book
STUDENT.books.book2 = {};

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pattern is good way to namespace your code and avoid naming collisions not only in your own code but collisions between your code and third-party code on the same page .&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawbacks-of-namespace"&gt;
  &lt;/a&gt;
  Drawbacks of Namespace
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More to type , prefixing every variable and function adds up in the total amount of code that needs to be downloaded&lt;/li&gt;
&lt;li&gt;Only one global instance as a result any part of the code can modify the global instance and the rest of the functionality gets the updated state&lt;/li&gt;
&lt;li&gt;Long nested names = slower property resolution lookups&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Database Indexing Is an Art</title>
      <author>Divya </author>
      <pubDate>Mon, 29 Nov 2021 15:56:24 +0000</pubDate>
      <link>https://dev.to/jobber/database-indexing-is-an-art-24io</link>
      <guid>https://dev.to/jobber/database-indexing-is-an-art-24io</guid>
      <description>&lt;p&gt;What comes to your mind when you think of fine tuning your full stack app? DB index would be top of my list! I often get questions from junior engineers on why should we think of adding and index and why it is so important? &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-database-index"&gt;
  &lt;/a&gt;
  What is a database index?
&lt;/h2&gt;

&lt;p&gt;Indexes are used to quickly locate data without having to search every row in a database table each time a database table is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both quick random searches and efficient access to sorted records.&lt;/p&gt;

&lt;p&gt;One of the neatest and quickest method to enhance the performance of Rails apps is to optimize database queries. Depending on the type of situation, we can address it in a variety of ways. &lt;strong&gt;N+1&lt;/strong&gt; queries appear to be common among rails apps, fortunately, easy to solve. However, you may come across some seemingly simple queries that take far longer than they should, adding a correct index helps the best here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-should-we-use-them"&gt;
  &lt;/a&gt;
  When should we use them?
&lt;/h2&gt;

&lt;p&gt;When it comes to performance of a system, indexes play a vital role in fetching results, be it select or conditional query. Index should be created on columns which are frequently queried. Also it is important to keep the number of indexes small to optimize the insert operations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-add-them-to-our-rails-code"&gt;
  &lt;/a&gt;
  How to add them to our rails code?
&lt;/h2&gt;

&lt;p&gt;The quickest way to add indexes is by generating a migration, hence it is important to consider this while we plan to add our tables into the system.&lt;/p&gt;

&lt;p&gt;We need to wisely decide whether a field needs index or not. Indexing does take up extra space, and we may not need to store duplicate data without a strong reason. One example is when you are trying to index a polymorphic association, we need to make sure we create double index. Also any frequently used field on sort can be improved by delicate indexes.&lt;/p&gt;

&lt;p&gt;If you'd like to add an index on any new column you are adding:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;bin/rails generate migration AddPartNumberToProducts part_number:string:index
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will generate the appropriate add_column and add_index statements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class AddPartNumberToProducts &amp;lt; ActiveRecord::Migration[6.0]
  def change
    add_column :products, :part_number, :string
    add_index :products, :part_number
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add indexes later once we add columns to the databases. Rails supports checking if an index exists before creating one. We can make use of &lt;code&gt;if_not_exists&lt;/code&gt; attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;add_index :products, :part_number, if_not_exists: true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PostgreSQL allows us to build indexes concurrently without locking up the database. Since operation is concurrent and it doesn’t lock up the table, we can avoid accidental downtimes. Below snippet allows us to run a rails migration with &lt;strong&gt;concurrent&lt;/strong&gt; option.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def change
  add_index :products, :part_number, :algorithm =&amp;gt; :concurrently
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However you can’t run the above from inside of a transaction. To avoid this, we need to use &lt;strong&gt;disable_ddl_transaction!&lt;/strong&gt; . This option was added starting from Rails 4, to run this one migration without a transaction wrapper:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;disable_ddl_transaction!
def change
  add_index :products, :part_number, :algorithm =&amp;gt; :concurrently
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Credits : &lt;a href="https://guides.rubyonrails.org/active_record_migrations.html"&gt;RubyOnRails&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More ways to add simple and complex index can be found in the &lt;a href="https://api.rubyonrails.org/v6.1.4/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-add_index"&gt;Rails docs&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-validate-if-my-index-works"&gt;
  &lt;/a&gt;
  How to validate if my index works?
&lt;/h2&gt;

&lt;p&gt;Example: I have a table with 10K records, I am searching for a record matches my condition where the column doesn't have any index. We can leverage 'explain' to find the difference in fetch time:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiIu16E9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6grun6v59ppvayafuigu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiIu16E9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6grun6v59ppvayafuigu.png" alt="Without Index" width="880" height="106"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After adding index on the column:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iIzvC6Ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t3y0y9a074oz0ybd39j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iIzvC6Ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6t3y0y9a074oz0ybd39j.png" alt="With index" width="865" height="107"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the above scenario if we have sort or queries based on the part_number, without an index in place we can clearly see the performance cost impact on sequence scan vs index scan. Small steps into big improvements. As a dev, it’s good to keep in mind this as a rule to decide if an index is needed or not is by checking if any columns are referenced in the &lt;strong&gt;where, having and order by in the SQL&lt;/strong&gt; queries.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#any-special-cases-to-consider"&gt;
  &lt;/a&gt;
  Any special cases to consider?
&lt;/h2&gt;

&lt;p&gt;Sometimes indexes, especially unique indexes, can be case sensitive. MySQL indexes are already case-insensitive, but PostgreSQL creates case sensitive indexes by default. One good example here can be emails and usernames. If we don’t mention case sensitivity along with validation in rails models with Postgres, the purpose of uniqueness may not be served.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;validates_uniqueness_of :username, case_sensitive: false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This won't be sufficient to make it bullet proof. That query during validation wouldn't be able to take advantage of a regular index on username. To guarantee concurrency, there ought to be a unique index on &lt;strong&gt;lower(username)&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-we-have-to-index-our-data"&gt;
  &lt;/a&gt;
  Do we have to index our data?
&lt;/h2&gt;

&lt;p&gt;Not always. Indexes are great way to increase the performance of the application, but sometimes over indexing can slow the performance too. We need to be mindful while indexing. One example can be any index on a table which gets frequently deleted can negatively affect us on performing. The more data, the bigger the index. Huge tables might bite us back too.&lt;/p&gt;

&lt;p&gt;One other real example from Jobber, missing indexes on searchable fields can cause a significant amount of delay, with a simple index this can be improved to make the customer delighted.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-takeaways"&gt;
  &lt;/a&gt;
  Key Takeaways
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Indexes in databases work similar to lookups in real books&lt;/li&gt;
&lt;li&gt;create them wisely, considering storage and negative impact on performance&lt;/li&gt;
&lt;li&gt;Preferably fits best in huge tables&lt;/li&gt;
&lt;li&gt;Some rails validations require indexing to make it work&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#about-jobber"&gt;
  &lt;/a&gt;
  About Jobber
&lt;/h2&gt;

&lt;p&gt;We are hiring for remote positions across Canada at all software engineering levels! &lt;/p&gt;

&lt;p&gt;Our awesome Jobber technology teams span across Payments, Infrastructure, AI/ML, Business Workflows &amp;amp; Communications. We work on cutting edge &amp;amp; modern tech stacks using React, React Native, Ruby on Rails, &amp;amp; GraphQL. &lt;/p&gt;

&lt;p&gt;If you want to be a part of a collaborative work culture, help small home service businesses scale and create a positive impact on our communities, then visit our &lt;a href="https://getjobber.com/about/careers?utm_source=linkedin&amp;amp;utm_medium=social&amp;amp;utm_campaign=eng_blog"&gt;careers&lt;/a&gt; site to learn more!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>database</category>
      <category>indexing</category>
      <category>performance</category>
    </item>
    <item>
      <title>Flask CRUD API on AWS</title>
      <author>Francesco Ciulla</author>
      <pubDate>Mon, 29 Nov 2021 15:55:06 +0000</pubDate>
      <link>https://dev.to/tinystacks/flask-crud-api-on-aws-257n</link>
      <guid>https://dev.to/tinystacks/flask-crud-api-on-aws-257n</guid>
      <description>&lt;p&gt;In this article, we’ll deploy the Flask application we created in the previous article on AWS, using:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Amazon RDS (Relational Database Service)&lt;/li&gt;
&lt;li&gt;Amazon ECR (Elastic Container Registry)&lt;/li&gt;
&lt;li&gt;Amazon ECS (Elastic Container Service)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Video Version:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/8rj5LzMPvQw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZNYYMtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638194576828/xmNmpgP7u.png" alt="image.png" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create RDS instance of Postgres&lt;/li&gt;
&lt;li&gt;Test the RDS instance&lt;/li&gt;
&lt;li&gt;Clone and build the TinyStacks GitHub repository&lt;/li&gt;
&lt;li&gt;Create ECR repository&lt;/li&gt;
&lt;li&gt;Tag the Docker image and push it to the ECR repository&lt;/li&gt;
&lt;li&gt;Deploy to ECS using the ECR image&lt;/li&gt;
&lt;li&gt;Test with Postman (and TablePlus)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#create-rds-instance"&gt;
  &lt;/a&gt;
  Create RDS Instance
&lt;/h3&gt;

&lt;p&gt;Go to the &lt;a href="https://console.aws.amazon.com"&gt;AWS Management Console&lt;/a&gt;onsole and search for RDS: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TIWZ3TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611055822/LrRO0ZA_Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TIWZ3TN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611055822/LrRO0ZA_Y.png" alt="image.png" width="880" height="522"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Create Database&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg3gO-jI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611100171/NIz5VTYo5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gg3gO-jI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611100171/NIz5VTYo5.png" alt="image.png" width="880" height="261"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From the list of available options, select:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Standard&lt;/li&gt;
&lt;li&gt;Postgres version 12.5&lt;/li&gt;
&lt;li&gt;Free Tier (If you’re a new customer or haven’t used RDS before, you can get up to 750 hours of usage free)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PyvChpdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611176264/oAVRsgzol.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PyvChpdh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611176264/oAVRsgzol.png" alt="image.png" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Choose a name for the instance (basically the name of the database), the master username (postgres), and the password (postgres). Confirm the password. (Make sure to use a more secure password in a production environment!)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MT0DxbQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611254326/GBsBXyuI9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MT0DxbQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611254326/GBsBXyuI9.png" alt="image.png" width="880" height="552"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can leave the rest as it is, except for &lt;strong&gt;Connectivity&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XYi7f1oL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611433986/4gjKH4YML.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XYi7f1oL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611433986/4gjKH4YML.png" alt="image.png" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll set this up soon. &lt;/p&gt;

&lt;p&gt;You can leave the rest as it is. Just double-check that the estimated monthly cost shows "Free Tier" (assuming you still have Free Tier credits). . Note that the cost of RDS instances may vary over time. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I_U1Cicc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611674929/qIcp6PLBz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I_U1Cicc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637611674929/qIcp6PLBz.png" alt="image.png" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then click &lt;strong&gt;Create Database&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;While you wait, click on the database name and on the security group.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E_EuiGYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612088779/OGtxnm-zx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E_EuiGYf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612088779/OGtxnm-zx.png" alt="image.png" width="880" height="280"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the security group id, then on &lt;strong&gt;Edit Inbound rules&lt;/strong&gt;. This will let us test our database with an external tool. If you want, you can skip this step. If you do, be sure that both the RDS instance and your app are in the same security group.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_i6CRlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612316878/rFQ0__1ee.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_i6CRlT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612316878/rFQ0__1ee.png" alt="image.png" width="880" height="378"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, add another inbound rule and make the RDS instance accessible:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I-Gyr4SP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612521151/u1vJdcwdg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I-Gyr4SP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612521151/u1vJdcwdg.png" alt="image.png" width="880" height="405"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we are ready to test the RDS instance.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-the-rds-instance"&gt;
  &lt;/a&gt;
  Test the RDS instance
&lt;/h3&gt;

&lt;p&gt;To test the RDS instance, we will use &lt;a href="https://tableplus.com/"&gt;TablePlus&lt;/a&gt;, but you can use any tool you want. Alternative tools include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pgadmin.org/"&gt;pgadmin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.postgresql.org/docs/13/app-psql.html"&gt;psql&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Create a new PostgreSQL connection:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q9tEQfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612696683/JX2zFxDU0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Q9tEQfh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612696683/JX2zFxDU0.png" alt="image.png" width="880" height="392"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fill in all the information  required to connect:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host: (the endpoint of the RDS instance)&lt;/li&gt;
&lt;li&gt;port: 5432&lt;/li&gt;
&lt;li&gt;username: postgres&lt;/li&gt;
&lt;li&gt;password: postgres&lt;/li&gt;
&lt;li&gt;database: postgres&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can disable SSL mode. (But make sure to leave SSL enabled when working in a production environment!)&lt;/p&gt;

&lt;p&gt;Click &lt;strong&gt;Test Connection&lt;/strong&gt;. If you see a &lt;code&gt;connection is ok&lt;/code&gt; message, you’re good to go. The database is empty for now. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eLwS40UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612863833/hGVGtflNX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eLwS40UL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637612863833/hGVGtflNX.png" alt="image.png" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#clone-the-repository-change-branch-and-build-the-docker-image"&gt;
  &lt;/a&gt;
  Clone the repository, change branch, and build the Docker image
&lt;/h3&gt;

&lt;p&gt;Clone &lt;a href="https://github.com/tinystacks/aws-docker-templates-flask"&gt;the aws-docker-templates-flask repository&lt;/a&gt; from Tinystacks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/tinystacks/aws-docker-templates-flask.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Step into the directory&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd aws-docker-templates-flask
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, switch your GitHub branch. You can check all the branches with the command &lt;code&gt;git branch -a&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout flask-local-postgres
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then open this folder with your favorite IDE. IF you have Visual Studio code, you can type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open a terminal and, in the folder where the &lt;code&gt;docker-compose.yml&lt;/code&gt; file is located, type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#ecr"&gt;
  &lt;/a&gt;
  ECR
&lt;/h3&gt;

&lt;p&gt;Login into your AWS CLI, using your &lt;code&gt;&amp;lt;AWS_ACCOUNT_ID&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;REGION&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ecr get-login-password --region &amp;lt;REGION&amp;gt; | docker login --username AWS --password-stdin &amp;lt;AWS_ACCOUNT_ID&amp;gt;.dkr.ecr.&amp;lt;REGION&amp;gt;.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create a new ECR repository using the prompt. Use your &lt;code&gt;&amp;lt;REGION&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;aws ecr create-repository --repository-name flask-app --region &amp;lt;REGION&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you can check the Amazon Console registries on ECR:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hUlLv3iA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614165719/bZPVFaPI9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hUlLv3iA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614165719/bZPVFaPI9.png" alt="image.png" width="880" height="269"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click on the repository name, you won’t see any images. That’s what we expect (for now).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AWe7L7bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614205244/PpO7VKlMl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AWe7L7bu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614205244/PpO7VKlMl.png" alt="image.png" width="880" height="276"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tag-and-push-the-docker-image-on-ecr"&gt;
  &lt;/a&gt;
  Tag and push the Docker image on ECR
&lt;/h3&gt;

&lt;p&gt;You can use the value &lt;code&gt;&amp;lt;IMAGE_TAG&amp;gt;&lt;/code&gt; to create an image with the tag &lt;code&gt;latest&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker tag pythonapp &amp;lt;IMAGE_TAG&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now push the image to the ECR repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker push &amp;lt;IMAGE_TAG&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And check the image on the ECR repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FAABNrNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614585135/K0_cg8FPS.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FAABNrNI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614585135/K0_cg8FPS.png" alt="image.png" width="880" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ecs"&gt;
  &lt;/a&gt;
  ECS
&lt;/h3&gt;

&lt;p&gt;Now, let's deploy our service using Amazon Elastic Container Service (ECS). &lt;/p&gt;

&lt;p&gt;Search for &lt;code&gt;ecs&lt;/code&gt; on the AWS Management Console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LpMnA9FT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614745786/zZHtl7pRN.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LpMnA9FT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614745786/zZHtl7pRN.png" alt="image.png" width="880" height="247"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on &lt;strong&gt;Get Started&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WOKbMK6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614777189/eDBvXsSz7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WOKbMK6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614777189/eDBvXsSz7.png" alt="image.png" width="880" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on Custom and then click &lt;strong&gt;Configure&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tkelwyeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614826259/OU7gsk3Zuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tkelwyeP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614826259/OU7gsk3Zuu.png" alt="image.png" width="880" height="303"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will let us configure the container task we want to run in our cluster.&lt;/p&gt;

&lt;p&gt;Choose:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Container name: any you want&lt;/li&gt;
&lt;li&gt;Image: the &lt;code&gt;&amp;lt;IMAGE_TAG&amp;gt;&lt;/code&gt; (latest)&lt;/li&gt;
&lt;li&gt;Port: 80&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, in &lt;strong&gt;Advanced Configuration&lt;/strong&gt; add an environment variable as defined in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8HrXYkO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615006835/j4hXd9uac.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8HrXYkO---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615006835/j4hXd9uac.png" alt="image.png" width="880" height="216"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Ptxerdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614984806/HvL0zmyke.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Ptxerdw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637614984806/HvL0zmyke.png" alt="image.png" width="880" height="88"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the values here, use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Key: &lt;code&gt;&amp;lt;DATABASE_URL&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Value: &lt;code&gt;postgresql://postgres:postgres@&amp;lt;RDS_INSTANCE_IP&amp;gt;:5432/postgres&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Remember to replace the database entry with the &lt;code&gt;&amp;lt;RDS_INSTANCE_IP&amp;gt;&lt;/code&gt; for your instance. You can find your &lt;code&gt;&amp;lt;RDS_INSTANCE_IP&amp;gt;&lt;/code&gt; on TablePlus or RDS.&lt;/p&gt;

&lt;p&gt;Leave the rest as it is and click &lt;strong&gt;Update&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kfU-IqMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615311632/7oS6lOqGg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfU-IqMD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615311632/7oS6lOqGg.png" alt="image.png" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;Task definition&lt;/strong&gt;, click &lt;strong&gt;Next&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--scqNl_yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615357327/9X_x_a2H4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--scqNl_yt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615357327/9X_x_a2H4.png" alt="image.png" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Likewise, on &lt;strong&gt;Service&lt;/strong&gt;, click &lt;strong&gt;Next&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f20LP0iY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615388152/rhCuyJGNO.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f20LP0iY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615388152/rhCuyJGNO.png" alt="image.png" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On &lt;strong&gt;Cluster configuration&lt;/strong&gt;, define a name for your cluster and click &lt;strong&gt;Next&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Fpwl1Fd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615622461/B0GxtD0cZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Fpwl1Fd2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615622461/B0GxtD0cZ.png" alt="image.png" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You’re all set! !Click &lt;strong&gt;Create&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCWA6LL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615658246/xjObFj7d2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCWA6LL6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615658246/xjObFj7d2.png" alt="image.png" width="880" height="415"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creation will take a couple of minutes. Once all the check marks have turned green, click &lt;strong&gt;View Service&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qj2NyTmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615874107/B8gHmWHvE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qj2NyTmR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637615874107/B8gHmWHvE.png" alt="image.png" width="880" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on the task and copy its &lt;strong&gt;Public IP&lt;/strong&gt;. We will need that to test our application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-with-postman-and-tableplus"&gt;
  &lt;/a&gt;
  Test With Postman and Tableplus
&lt;/h3&gt;

&lt;p&gt;First, let’s get all the items. If we get an empty list [], it means that the table has been created and we are getting no items. That’s what we expect, since we just created the table with no data.&lt;/p&gt;

&lt;p&gt;GET Request at the endpoint: &lt;code&gt;/items&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GamNcGUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616027229/DQTCJKE-P.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GamNcGUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616027229/DQTCJKE-P.png" alt="image.png" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To create a new item, make a POST request at the endpoint &lt;code&gt;/items&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uJokm67H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616148992/cJUdmhyOv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uJokm67H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616148992/cJUdmhyOv.png" alt="image.png" width="880" height="375"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create 2 more items:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yONKSqGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616178954/55LgCea7S.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yONKSqGZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616178954/55LgCea7S.png" alt="image.png" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--huWPtFo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616194776/mhQJ0j6UU.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--huWPtFo1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616194776/mhQJ0j6UU.png" alt="image.png" width="880" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To get a single item, make a GET request, appending the &lt;code&gt;id&lt;/code&gt; of the item we want to retrieve at the end of the &lt;code&gt;/items&lt;/code&gt; path. For example &lt;code&gt;/items/2&lt;/code&gt; retrieves the item with id = 2.&lt;br&gt;
(Don't mind the body in this request, that was from the last post request.)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zWKuliC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616336239/6AlhJaPMF.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zWKuliC5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616336239/6AlhJaPMF.png" alt="image.png" width="880" height="364"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To update an existing item, make a PUT request. Specify the id of the item we want to modify in the url and the new item in the body of the request:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUdksZKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616457092/yOhbHfDtg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUdksZKY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616457092/yOhbHfDtg.png" alt="image.png" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try to GET the item 2 again, we’ll receive the updated item:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uuwNmrBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616498327/l11Eu9GUT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uuwNmrBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616498327/l11Eu9GUT.png" alt="image.png" width="880" height="386"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, to delete an existing item - for example, the item with id = 3 - we can make a DELETE quest at the path &lt;code&gt;/items/3&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EJzDloPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616558361/lhFOsY5Sc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EJzDloPC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616558361/lhFOsY5Sc.png" alt="image.png" width="880" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we try to get all the items again, we only get two:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bNC1DaQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616651335/f-S4dg5Y1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bNC1DaQk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616651335/f-S4dg5Y1.png" alt="image.png" width="880" height="432"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A final test using TablePlus:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oCKx2xl8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616688018/LNpKSpQwP.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oCKx2xl8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637616688018/LNpKSpQwP.png" alt="image.png" width="880" height="536"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GitHub Repository (branch: flask-local-postgres): &lt;a href="https://github.com/tinystacks/aws-docker-templates-flask"&gt;https://github.com/tinystacks/aws-docker-templates-flask.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;TinyStacks powers teams to build faster without abstractions or menial DevOps tasks.&lt;br&gt;
Check &lt;a href="https://www.tinystacks.com/"&gt;TinyStacks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Video Version:&lt;br&gt;
&lt;a href="https://youtu.be/8rj5LzMPvQw"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iZNYYMtX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638194576828/xmNmpgP7u.png" alt="image.png" width="880" height="494"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>docker</category>
      <category>postgres</category>
      <category>python</category>
    </item>
    <item>
      <title>How to load responsive images in AVIF and WebP using the HTML picture element</title>
      <author>Salma Alam-Naylor</author>
      <pubDate>Mon, 29 Nov 2021 15:44:16 +0000</pubDate>
      <link>https://dev.to/whitep4nth3r/load-avif-webp-using-html-picture-tag-4576</link>
      <guid>https://dev.to/whitep4nth3r/load-avif-webp-using-html-picture-tag-4576</guid>
      <description>&lt;p&gt;&lt;a href="https://www.contentful.com/developers/changelog/#images-api-now-supports-avif-format-conversion"&gt;We released support for the new AVIF image format&lt;/a&gt; on the Contentful Images API at our Fast Forward 2021 conference. This means you can return your images stored in Contentful in the new AVIF format via the REST API with a query parameter, or via the GraphQL API with a transform function in your query.&lt;/p&gt;

&lt;p&gt;But what is AVIF — and should you be using it right now? &lt;/p&gt;

&lt;p&gt;Now this stuff is tricky, so strap in and get ready for a wild ride! In this post, we’ll cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Image formats, compression and browser support&lt;/li&gt;
&lt;li&gt;Why image compression is important&lt;/li&gt;
&lt;li&gt;The HTML &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element&lt;/li&gt;
&lt;li&gt;Lazy loading and browser support&lt;/li&gt;
&lt;li&gt;Performance improvements gained with AVIF&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are you ready? Let’s go.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-avif"&gt;
  &lt;/a&gt;
  What is AVIF?
&lt;/h2&gt;

&lt;p&gt;In short, AVIF is the new kid on the block when it comes to image compression. Released in 2019 by the &lt;a href="https://aomedia.org/"&gt;Alliance for Open Media&lt;/a&gt;, AVIF claims to offer &lt;a href="https://aomedia.org/av1-features/"&gt;30% better compression than current alternatives&lt;/a&gt; such as WebP. It’s optimized for the web, designed with a low computation footprint, and what’s more — it’s open source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-is-image-compression-important"&gt;
  &lt;/a&gt;
  Why is image compression important?
&lt;/h2&gt;

&lt;p&gt;Websites in 2021 are an incredibly visual experience, full of images, animations and full-page photography. If you’re not careful, you can end up forcing visitors to your website to download hundreds of megabytes of images on a visit to your page. This risks making your website slow, inevitably causing your visitors to bounce. And we don’t want that!&lt;/p&gt;

&lt;p&gt;A fast experience on the web is crucial to providing a great user experience for visitors to your website, and as of June 2021, Google uses &lt;a href="https://web.dev/vitals/"&gt;Core Web Vitals&lt;/a&gt; scores to rank websites in search results. Core Web Vitals are currently scored on three aspects of user experience — loading, interactivity and visual stability.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading"&gt;
  &lt;/a&gt;
  Loading
&lt;/h3&gt;

&lt;p&gt;Loading performance is measured by the &lt;strong&gt;Largest Contentful Paint (LCP)&lt;/strong&gt;. (This has nothing to do with the Contentful CMS in this context! 🙈 ). If you’re forcing users to download megabytes of images when the page first starts to load — for example, large hero images at the top of the page — your LCP time will increase. To provide a good user experience, the LCP should happen within 2.5 seconds of when the page first starts loading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interactivity"&gt;
  &lt;/a&gt;
  Interactivity
&lt;/h3&gt;

&lt;p&gt;Interactivity is measured by the &lt;strong&gt;First Input Delay (FID)&lt;/strong&gt; — and measures how soon your web application responds to user input such as clicking and typing into form fields. To provide a good user experience, pages should have an FID of 100 milliseconds or less.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-stability"&gt;
  &lt;/a&gt;
  Visual stability
&lt;/h3&gt;

&lt;p&gt;Visual stability is measured by &lt;strong&gt;Cumulative Layout Shift (CLS)&lt;/strong&gt;. Have you ever clicked on a part of a web page, only to find that you unexpectedly clicked on something else after a rogue element or image was finally loaded? CLS is where content pops into view once it has loaded, often pushing content down or sideways on the web page — and can be extremely frustrating! CLS makes your web page unstable — and usually, large images that take time to load are to blame. A good user experience maintains a CLS score of 0.1 or less.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-is-image-compression-important%C2%A0"&gt;
  &lt;/a&gt;
  Why is image compression important? 
&lt;/h3&gt;

&lt;p&gt;Did you know that the &lt;a href="https://worldpopulationreview.com/country-rankings/internet-speeds-by-country"&gt;average internet speed across the world in 2021&lt;/a&gt; is only 55.13Mbs? That’s only marginally faster than the speed of a slow 3G connection as simulated in Chromium Dev Tools. If you’re the nerdy type and want to look at the source code for the throttling simulations — &lt;a href="https://github.com/ChromeDevTools/devtools-frontend/blob/80c102878fd97a7a696572054007d40560dcdd21/front_end/sdk/NetworkManager.js#L261"&gt;check out this link on GitHub&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E7EhBFgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538bdz0cr2y9guzqj75y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E7EhBFgf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/538bdz0cr2y9guzqj75y.png" alt="A graph showing the average internet speed in the world in 2021 a surveyed by world population review dot com as 55.15Mbs." width="880" height="1044"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In "&lt;a href="https://www.smashingmagazine.com/2021/09/modern-image-formats-avif-webp/"&gt;Using Modern Image Formats: AVIF And WebP&lt;/a&gt;, Addy Osmani, engineering manager at Google Chrome, gives us this fascinating piece of data: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you’re optimizing for the Web Vitals, you might be interested to hear that images account for ~42% of the Largest Contentful Paint element for websites.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If almost 50% of your LCP is down to images — you need to deliver them to your website visitors in as few bytes as possible. The smaller the image file sizes are on your web pages, the less time it takes for visitors to your websites to download them — and this is especially important on slow internet connections and older, slower devices. &lt;/p&gt;

&lt;p&gt;Minimizing the size of your images ensures your Core Web Vitals scores are as good as possible across the board, which means you provide a better experience for your users, and ultimately means your pages rank better in Google search results. And to minimise the size of your images — you need to use the image format that yields the lightest results.&lt;/p&gt;

&lt;p&gt;So — if AVIF images currently offer the smallest image file sizes, we should all get on the AVIF train ASAP, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-you-convert-all-your-images-to-avif-right-now"&gt;
  &lt;/a&gt;
  Should you convert all your images to AVIF right now?
&lt;/h2&gt;

&lt;p&gt;WebP, there are some downsides to adopting this new format in 2021.&lt;/p&gt;

&lt;p&gt;AVIF may not be able to compress non-photographic images as well as PNG or lossless WebP. I found this to be the case in my initial experiments with the hero image on the homepage of &lt;a href="https://whitep4nth3r.com/?utm_source=dev-to"&gt;my personal website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VidqBdkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k86h3c1ckecxqe9dtjso.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VidqBdkR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k86h3c1ckecxqe9dtjso.png" alt="A screenshot from my Twitch stream, where I am looking to the left and smiling, with VSCode open in the background." width="880" height="468"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whilst this image does contain photographic imagery of my face, most of the image is text and illustrations. As a WebP image, this image came in at 118kb, whilst as an AVIF image, the image size increased to 125kb. &lt;/p&gt;

&lt;p&gt;Secondly, at the time of writing this article, &lt;a href="https://caniuse.com/?search=avif"&gt;not all browsers currently support the AVIF image format&lt;/a&gt;. Edge, Safari and some mobile browsers are not quite there yet.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--epkvKWjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0dwh41ux1f9xryytpjv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--epkvKWjN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h0dwh41ux1f9xryytpjv.png" alt="A screenshot of can I use dot com showing that the support for AVIF is currently only available in Firefox, Chrome, Opera, Android and Samsung Internet browser." width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-all-is-not-lost%C2%A0"&gt;
  &lt;/a&gt;
  But all is not lost! 
&lt;/h3&gt;

&lt;p&gt;There is a beautiful way we can harness the power of native HTML to serve different supported image formats to browsers using the HTML &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tag. And what’s more, when other browsers do catch up with the AVIF train — you won’t need to change any code! &lt;/p&gt;

&lt;p&gt;Before we look at the HTML, let’s take a look at how you can convert your images stored in Contentful to the new AVIF format using the REST and GraphQL APIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-convert-your-images-to-avif-using-the-contentful-images-api"&gt;
  &lt;/a&gt;
  How to convert your images to AVIF using the Contentful Images API
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.contentful.com/developers/docs/references/images-api/#/reference/retrieval"&gt;The Contentful Images API&lt;/a&gt; offers a variety of image transformations and manipulations as query parameters on the URL pointing to an image asset. You can change the quality of an image, resize it, add a background color, crop it, add rounded corners and more, as well as change the format of an image. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-query-parameters-on-an-image-url"&gt;
  &lt;/a&gt;
  Using query parameters on an image URL
&lt;/h3&gt;

&lt;p&gt;To convert your images stored in Contentful to AVIF, add fm=avif as a query parameter to your image URL. We’ll be using this technique later in the HTML example code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://images.ctfassets.net/{space_id}/{asset_id}/{unique_id}/{file_name}?fm=avif
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here’s an example URL for you to play with in your browser. Experiment with changing the format parameter to jpg, png, webp, gif or avif and compare the size of the image returned in the network tab! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://images.ctfassets.net/zz0ob82dbd6h/5YwujztZwQrte5WfgZf3eV/9eba3414d91e8e1e376fc96c0c8e6d63/cat-heavy-breathing-intensifies.gif?fm=avif"&gt;https://images.ctfassets.net/zz0ob82dbd6h/5YwujztZwQrte5WfgZf3eV/9eba3414d91e8e1e376fc96c0c8e6d63/cat-heavy-breathing-intensifies.gif?fm=avif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the impatient among you, here’s how the image formats compare in terms of size:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jpg: &lt;strong&gt;76.8kb&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;png: &lt;strong&gt;125kb&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;webp: &lt;strong&gt;167kb&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;gif: &lt;strong&gt;1.2MB&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;avif: &lt;strong&gt;25.3kb&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QV5EM5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94qjjr9j14whwjtq0j9f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QV5EM5f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94qjjr9j14whwjtq0j9f.png" alt="A stacked collage image showing the same heavy breathing cat gif in five image formats, showing that the avif image is the fewest bytes." width="830" height="1804"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AVIF is the clear winner in terms of reduction in size for this image. However, one interesting thing to note is that whereas the original animated GIF comes in at a whopping 1.2MB, converting the image to WebP reduces the image size by a massive 87% &lt;strong&gt;and preserves the animation frames&lt;/strong&gt;! I think that’s a fascinating achievement and a wonderful nugget of information! I was so excited at this discovery that I shared it on Twitter!&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yOebT15Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1460244031586410500/pu/img/MNnDU9pAq4HU3BP2.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqF2sPDH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1461360329619763206/FbjYze58_normal.jpg" alt="⚡️ Salma | whitep4nth3r profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        ⚡️ Salma | whitep4nth3r
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/whitep4nth3r"&gt;@whitep4nth3r&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I just discovered that WebP preserves animated frames in GIF images!&lt;br&gt;&lt;br&gt;This GIF converted to WebP reduces the file size by 87% from 1.2Mb to just 167kb. (Look at the file types in the network tab!)&lt;br&gt;&lt;br&gt;Does this mean an end to hugely lossy GIF compression or am I missing something? 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:54 PM - 15 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1460244790059188226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1460244790059188226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1460244790059188226" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#using-graphql"&gt;
  &lt;/a&gt;
  Using GraphQL
&lt;/h3&gt;

&lt;p&gt;If you’re using GraphQL, you can convert your images to AVIF via a transform function on the image URL in the GraphQL query, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight graphql"&gt;&lt;code&gt;&lt;span class="k"&gt;query&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="n"&gt;blogPostCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AVIF&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here’s the response returned. You’ll notice that this is the same image URL we used in the example above, demonstrating that the GraphQL API communicates directly with Contentful’s Images API to return what you need in your GraphQL response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"blogPostCollection"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"items"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://images.ctfassets.net/zz0ob82dbd6h/5YwujztZwQrte5WfgZf3eV/9eba3414d91e8e1e376fc96c0c8e6d63/cat-heavy-breathing-intensifies.gif?fm=avif"&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However — while you can retrieve images in AVIF format in GraphQL — &lt;strong&gt;remember that not all browsers support this image format yet&lt;/strong&gt; — so you don’t want to lock yourself down to the AVIF image format. &lt;/p&gt;

&lt;p&gt;Now let’s look at how we can take a base image URL and serve it in different ways to browsers that support different image formats using Contentful’s Images API and the native HTML &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; tag. &lt;/p&gt;

&lt;p&gt;And here is what you’ve all been waiting for!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-serve-responsive-images-with-avif-in-supported-browsers-using-the-html-tag"&gt;
  &lt;/a&gt;
  How to serve responsive images with AVIF in supported browsers using the HTML  tag
&lt;/h2&gt;

&lt;p&gt;I’ve attempted to understand &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images"&gt;the low-down on responsive images from MDN&lt;/a&gt; for many years and I must admit it was hard to grasp! &lt;a href="https://www.stefanjudis.com/snippets/a-picture-element-to-load-correctly-resized-webp-images-in-html/"&gt;This post from Stefan Judis&lt;/a&gt; provided a great help in getting to grips with this, in conjunction with MDN.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GfFDQ-R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2f5fzjgj4btaq7k0aoq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GfFDQ-R---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2f5fzjgj4btaq7k0aoq.png" alt='The "one does not simply" meme that reads: "One does not simply use width:100% to create responsive images".' width="651" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we get into the code, we need to understand what we mean by responsive images. Responsive images are not simply about giving all images &lt;code&gt;width: 100%&lt;/code&gt; to fill the size of a container! The real power in responsive images is serving different image files of different sizes to different viewport sizes — and what’s more — screens with different &lt;strong&gt;pixel densities or display resolutions&lt;/strong&gt;. This is called &lt;strong&gt;Resolution Switching&lt;/strong&gt;, and by providing browsers with an array of image URL options by configuring a &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element’s &lt;code&gt;srcset&lt;/code&gt;, &lt;code&gt;media&lt;/code&gt;, and &lt;code&gt;type&lt;/code&gt; attributes, the most compatible image — according to the current layout and display capabilities — will be displayed. &lt;/p&gt;

&lt;p&gt;Let’s get straight into the HTML code example, and unpack what it does.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500&amp;amp;fm=avif 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900&amp;amp;fm=avif 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300&amp;amp;fm=avif 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700&amp;amp;fm=avif 1700w,
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500&amp;amp;fm=webp 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900&amp;amp;fm=webp 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300&amp;amp;fm=webp 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700&amp;amp;fm=webp 1700w
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700 1700w
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.ctfassets.net/.../img.png"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Some great alternative text"&lt;/span&gt;
    &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt;
    &lt;span class="na"&gt;decoding=&lt;/span&gt;&lt;span class="s"&gt;"async"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2032"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1076"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-element"&gt;
  &lt;/a&gt;
  HTML  element
&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; HTML element wraps &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements and one &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element to offer alternative versions of an image for different displays, devices or browsers (depending on the image formats supported).&lt;/p&gt;

&lt;p&gt;The magic in the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element is that the browser chooses the most appropriate &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element to display. If no matches are found — or the browser doesn't support the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element — the browser falls back to the URL in the &lt;code&gt;src&lt;/code&gt; attribute of the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. The selected image is then presented in the space occupied by the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element. To prevent Cumulative Layout Shift as the image is loading, it’s important to add the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; attributes to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element for this fallback.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="err"&gt;...&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://images.ctfassets.net/.../img.png"&lt;/span&gt;
    &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"Some great alternative text"&lt;/span&gt;
    &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2032"&lt;/span&gt;
    &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1076"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-element"&gt;
  &lt;/a&gt;
  HTML  element

&lt;/h2&gt;

&lt;p&gt;The HTML &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element provides multiple media types for the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element to select the best-fit for the browser or device. You can also use the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element inside HTML &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements in the same way.&lt;/p&gt;

&lt;p&gt;In this example, the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; elements are offering image formats in &lt;code&gt;type="image/avif"&lt;/code&gt; and &lt;code&gt;type="image/webp"&lt;/code&gt;, which browsers will choose to display in that order depending on support.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/webp"&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#html-srcset-and-sizes-attributes"&gt;
  &lt;/a&gt;
  HTML srcset and sizes attributes
&lt;/h3&gt;

&lt;p&gt;The HTML &lt;code&gt;srcset&lt;/code&gt; attribute is a comma-separated list of strings of image URLs and either a width descriptor — such as &lt;code&gt;300w&lt;/code&gt;, or a pixel density descriptor — such as &lt;code&gt;1.5x&lt;/code&gt;.&lt;br&gt;
&lt;br&gt;
 &lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;srcset="
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=500&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 500w,
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=900&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 900w,
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=1300&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 1300w,
      https://images.ctfassets.net/.../img.png?q=75&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;w=1700&lt;span class="err"&gt;&amp;amp;&lt;/span&gt;fm=avif 1700w
    "
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The HTML &lt;code&gt;sizes&lt;/code&gt; attribute is a comma-separated list of media conditions paired with sizes to describe the final rendered image width — &lt;strong&gt;in CSS pixels, not physical pixels&lt;/strong&gt; (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio"&gt;read more about different types of pixels on MDN&lt;/a&gt;). The browser wants to know the best-fit resources to request as the page is loading. The &lt;code&gt;sizes&lt;/code&gt; attribute helps the browser to calculate the layout of the page and request the most suitable images for the layout — even before the CSS has loaded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;sizes="(max-width: 735px) 100vw, 736px"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes work together in the browser to determine which image defined in the &lt;code&gt;srcset&lt;/code&gt; to request as the page is being rendered or the viewport resized.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In this code example, four image URLs are provided in the &lt;code&gt;srcset&lt;/code&gt; for four different image widths: 500w, 900w, 1300w, 1700w. Notice that the &lt;code&gt;w={width}&lt;/code&gt; parameter on the image URLs is resizing the base image to match with size of the width descriptor &lt;a href="https://www.contentful.com/developers/docs/references/images-api/#/reference/resizing-&amp;amp;-cropping/change-the-resizing-behavior"&gt;using the capabilities of the Contentful Images API&lt;/a&gt;. When not using the Contentful Images API, you may wish to choose completely different image URLs at different viewport widths to serve different image sizes. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-note-on-the-magic-736-number"&gt;
  &lt;/a&gt;
  A note on the magic 736 number
&lt;/h3&gt;

&lt;p&gt;For blog posts on my personal website, the maximum width of the image container will only ever be 736px — in CSS pixels.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;sizes&lt;/code&gt; attribute states that under a viewport width of 736px, choose the most appropriate image from the &lt;code&gt;srcset&lt;/code&gt;, considering that the image will be laid out across the entire viewport width (100vw). Depending on the device, full viewport width (100vw) could translate to 300 device pixels at 1 DPR, 600 device pixels at 2 DPR and 900 device pixels at 3DPR.&lt;/p&gt;

&lt;p&gt;At a viewport width of 736px and above (remember, it’s 736 CSS pixels), the browser knows that the image widths will not exceed 736 CSS pixels as the CSS is controlling the container width. Depending on the device, 736 CSS pixels will be 1472px at 2DPR and 2208px at 3DPR. At all viewport widths, the browser will choose the closest match from the &lt;code&gt;srcset&lt;/code&gt; list. Like magic!&lt;/p&gt;

&lt;p&gt;This is an entirely personal example, and you should configure your image widths according to the layout of your web pages. You can also make further optimizations using CSS &lt;code&gt;calc()&lt;/code&gt; to account for the padding values inside the container to load even smaller images at different viewport widths.&lt;/p&gt;

&lt;p&gt;It’s also important to note that the &lt;code&gt;srcset&lt;/code&gt; and &lt;code&gt;sizes&lt;/code&gt; attributes only come into effect when the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; element is a direct child of a &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt;
    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/avif"&lt;/span&gt;
    &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=500&amp;amp;fm=avif 500w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=900&amp;amp;fm=avif 900w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1300&amp;amp;fm=avif 1300w,
      https://images.ctfassets.net/.../img.png?q=75&amp;amp;w=1700&amp;amp;fm=avif 1700w
    "&lt;/span&gt;
    &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"(max-width: 735px) 100vw, 736px"&lt;/span&gt;
  &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html-loadinglazy-and-decodingasync"&gt;
  &lt;/a&gt;
  HTML loading=”lazy” and decoding=”async”
&lt;/h2&gt;

&lt;p&gt;Lazy loading is a strategy to identify resources such as images, video and other media as non-blocking, or non-critical — and to load these only when needed, such as when a user scrolls that resource into view.&lt;/p&gt;

&lt;p&gt;To prevent visitors to web pages downloading a full page of images that aren’t visible in the viewport yet, we can use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading"&gt;native HTML lazy loading&lt;/a&gt; with the &lt;code&gt;loading="lazy"&lt;/code&gt; attribute to defer image loading until a user scrolls near it — no JavaScript required! As stated before, to prevent Cumulative Layout Shift, be sure to add the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; of the base image as attributes to the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element, which will instruct the browser to leave the correct space on the page in which to finally load your image when it scrolls into view.&lt;/p&gt;

&lt;p&gt;And in addition, the &lt;code&gt;decoding="async"&lt;/code&gt; attribute tells the browser that the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding"&gt;image loading can be performed asynchronously&lt;/a&gt;, so that content below the resource — such as paragraphs of text — are not blocked by the image taking a moment to load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt;
  &lt;span class="err"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;loading=&lt;/span&gt;&lt;span class="s"&gt;"lazy"&lt;/span&gt;
  &lt;span class="na"&gt;decoding=&lt;/span&gt;&lt;span class="s"&gt;"async"&lt;/span&gt;
  &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"2032"&lt;/span&gt;
  &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"1076"&lt;/span&gt;
&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s worth a mention that &lt;code&gt;loading="lazy"&lt;/code&gt; isn’t entirely supported across all browsers yet, but at the time of writing this article, &lt;a href="https://webkit.org/blog/12040/release-notes-for-safari-technology-preview-135/"&gt;Safari just shipped it in the newest Tech Preview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--P5u_bYt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dyedlufunr1su80xex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--P5u_bYt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r4dyedlufunr1su80xex.png" alt="A screenshot from can I use dot com showing that lazy loading is supported only in Safari's newest tech preview. Firefox, chrome, Opera, Android, Edge, and Samsung Internet are shown to support it." width="880" height="559"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-code-in-action"&gt;
  &lt;/a&gt;
  The code in action
&lt;/h2&gt;

&lt;p&gt;Here’s a video of the code example in action at 1 DPR. Notice the lazy-loading in action as the page is scrolled, and how the browser loads different image URLs from the &lt;code&gt;srcset&lt;/code&gt; when the browser is resized! And let me reiterate — &lt;strong&gt;no JavaScript required&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHRc2yfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ela0jzr7vvlsgzm2j2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHRc2yfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/01ela0jzr7vvlsgzm2j2.gif" alt="An animated image showing the network tab in Chromium dev tools is loading differently sizes images when the browser window is resized." width="800" height="450"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-serving-avif-improve-my-website"&gt;
  &lt;/a&gt;
  How did serving AVIF improve my website?
&lt;/h2&gt;

&lt;p&gt;The code example above is &lt;em&gt;a lot&lt;/em&gt; of HTML to write! But I like it for how self-documenting it is. And what’s more, I’ve bagged some significant performance improvements for my personal website while learning all about AVIF.&lt;/p&gt;

&lt;p&gt;For image-heavy blog posts, and in particular &lt;a href="https://whitep4nth3r.com/blog/personalized-image-social-sharing-with-cloudinary-nextjs"&gt;this blog post&lt;/a&gt;, converting all images from WebP to AVIF reduced the cumulative size of images on a desktop screen at 2 DPR from just over 1Mb to just 404kb. And on mobile devices at 1 DPR, it reduced the cumulative sizes of images from 430kb to 124kb. &lt;strong&gt;That’s a 60-70% reduction across device sizes!&lt;/strong&gt; Those are some huge savings! And plus, all images are lazy-loaded, which means the browser doesn’t request them until the image is near to the visible viewport.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-bottom-line"&gt;
  &lt;/a&gt;
  The bottom line
&lt;/h2&gt;

&lt;p&gt;Responsive images on the web are a tricky business to get right! But if you get them right, you provide a better user experience for your website visitors across browsers, devices and screen sizes, and you get bonus points from Google in your Core Web Vitals scores.&lt;/p&gt;

&lt;p&gt;If you’d like to see the final code example as a React component in the code for my personal blog site, &lt;a href="https://github.com/whitep4nth3r/p4nth3rblog/blob/main/components/ResponsiveImage/index.js"&gt;check it out on GitHub&lt;/a&gt;, and if you have any questions about responsive images and how you can make the best of the Contentful Images API, &lt;a href="https://twitter.com/whitep4nth3r"&gt;find me on Twitter&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>html</category>
      <category>a11y</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to upload videos / docs along your code using SpeaCode?👨‍💻📷🚀</title>
      <author>liadshviro</author>
      <pubDate>Mon, 29 Nov 2021 15:37:12 +0000</pubDate>
      <link>https://dev.to/liadshviro/how-to-upload-videos-docs-along-your-code-using-speacode-gcj</link>
      <guid>https://dev.to/liadshviro/how-to-upload-videos-docs-along-your-code-using-speacode-gcj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-speacode"&gt;
  &lt;/a&gt;
  What is Speacode?
&lt;/h2&gt;

&lt;p&gt;Speacode is a knowledge sharing platform that improves collaboration among developers that are working on the same repository. Speacode stores videos and docs and makes them easily accessible to other developers in the exact lines of codes they belong to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-install-speacode-plugin"&gt;
  &lt;/a&gt;
  STEP 1 – install Speacode plugin🚀
&lt;/h2&gt;

&lt;p&gt;Open your IDE and then navigate into the plugins marketplace&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search “SpeaCode”&lt;/li&gt;
&lt;li&gt;Intall the plugin “&lt;a href="https://plugins.jetbrains.com/plugin/15672-speacode-video-screen-recorder-for-code--python-java-js-php-etc"&gt;Speacode Video Screen Recorder for Code | Python Java JS PHP etc&lt;/a&gt;"&lt;/li&gt;
&lt;li&gt;After the installation, click on Restart IDE for the changes to take effect.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#step-2-add-a-videodoc-comment-above-your-changes"&gt;
  &lt;/a&gt;
  STEP 2 – Add a video/doc comment above your changes
&lt;/h2&gt;

&lt;p&gt;In order to add a video simply add a comment with the word video.&lt;br&gt;
*The syntax of comments in various programming languages varies.&lt;br&gt;
//video&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iXKdB6n9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbn3q3nbgve5ff32tzsl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iXKdB6n9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zbn3q3nbgve5ff32tzsl.png" alt="Image description" width="746" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add a document simply add a comment with the word &lt;br&gt;
//doc&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ovvhu1l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a2q2t2qb7q79yaa2tjr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ovvhu1l2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2a2q2t2qb7q79yaa2tjr.png" alt="Image description" width="768" height="329"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-click-on-the-play-icon-and-start-recording-your-screen"&gt;
  &lt;/a&gt;
  STEP 3 – Click on the play icon and start recording your screen
&lt;/h2&gt;

&lt;p&gt;When you click on the play button you will see 4 actions,in order  to start recording your screen click on “Record a video”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6NmibIWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ofuvmtuwzyqign2oji.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6NmibIWp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y8ofuvmtuwzyqign2oji.jpeg" alt="Image description" width="768" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4-choose-your-microphone-and-camera-not-a-must"&gt;
  &lt;/a&gt;
  STEP 4 – Choose your microphone and camera (Not a must)
&lt;/h2&gt;

&lt;p&gt;SpeaCode screen recorder will be opened and you will be able to choose the microphone, and a camera if you would like to turn it on.&lt;br&gt;
Then, you can go ahead and click on the “Start Recording” button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRKYY57z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3up63j9347rjjravodvn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRKYY57z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3up63j9347rjjravodvn.png" alt="Image description" width="768" height="520"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-5-after-you-finish-recording-click-on-the-stop-button"&gt;
  &lt;/a&gt;
  STEP 5 – After you finish recording click on the Stop button
&lt;/h2&gt;

&lt;p&gt;After you have finished recording your screen click on the stop button on the left side of the recorded screen.&lt;br&gt;
Preview window will pop up and you will be able to save the video by clicking on the “Save” button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h3XiYsNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvl6io5qhe3nlbny882x.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h3XiYsNN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yvl6io5qhe3nlbny882x.jpeg" alt="Image description" width="768" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-6-upload-the-video-from-the-ide"&gt;
  &lt;/a&gt;
  STEP 6 – Upload the video from the IDE
&lt;/h2&gt;

&lt;p&gt;Click on the Play button again and then click on “Upload Video”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i6nGklOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64iwaxo6pt31qnp5cmyo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i6nGklOK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64iwaxo6pt31qnp5cmyo.png" alt="Image description" width="768" height="339"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-7-fill-out-the-upload-form"&gt;
  &lt;/a&gt;
  STEP 7 – Fill out the upload form
&lt;/h2&gt;

&lt;p&gt;Choose the title for the video and choose the video you have created in step 4 by clicking on the “Browse” button.&lt;br&gt;
In the tag field, you can write the task id or any other information you want divided by “,” (comma)&lt;br&gt;
After you have completed the form you can click on “Upload”.&lt;br&gt;
A notification will be sent after the video has been uploaded successfully.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dClRmM-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38mvs900cte51dd1cqz9.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dClRmM-v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/38mvs900cte51dd1cqz9.jpeg" alt="Image description" width="768" height="422"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The comment has been updated with the new information.😀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#congratulations-your-video-is-ready"&gt;
  &lt;/a&gt;
  Congratulations - your video is Ready!
&lt;/h2&gt;

&lt;p&gt;Click on the play icon -&amp;gt; "Play Video"&lt;br&gt;
The video will be played on your local machine 🎉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq4cKcmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo1vk2uig20vuz5ae9iq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nq4cKcmU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vo1vk2uig20vuz5ae9iq.png" alt="Image description" width="580" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codereview</category>
      <category>python</category>
      <category>video</category>
      <category>java</category>
    </item>
    <item>
      <title>Same logic in 4 major FE frameworks, how do they compare?</title>
      <author>Štěpán Granát</author>
      <pubDate>Mon, 29 Nov 2021 15:34:37 +0000</pubDate>
      <link>https://dev.to/tolgee_i18n/same-logic-in-4-major-fe-frameworks-how-do-they-compare-3k5e</link>
      <guid>https://dev.to/tolgee_i18n/same-logic-in-4-major-fe-frameworks-how-do-they-compare-3k5e</guid>
      <description>&lt;p&gt;In &lt;a href="https://tolgee.io"&gt;Tolgee.io&lt;/a&gt; we needed to implement integrations for all major frontend frameworks. I'd say, that this is quite a good opportunity to show a real world comparison between them and it will allow us to dive into a bit more advanced functionality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overall-design"&gt;
  &lt;/a&gt;
  Overall design
&lt;/h2&gt;

&lt;p&gt;Tolgee is a localization platform. Our integration libraries have two purposes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Display and format translations in the application + manage language changes&lt;/li&gt;
&lt;li&gt;In dev mode allow "in-context" localization - which means, that user can edit translations directly in the app&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in dev mode our library needs to communicate with our server, but in production mode it will only deal with generated JSON files, containing translations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ufI4zeeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2aujd3py4hwdkf4ksth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ufI4zeeE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x2aujd3py4hwdkf4ksth.png" alt="Tolgee schema" width="651" height="448"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#general-integration-library-architecture"&gt;
  &lt;/a&gt;
  General integration library architecture
&lt;/h2&gt;

&lt;p&gt;Integration libraries provide tailored API for given framework and only need to React on translation/language changes, coming from core library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translating-regular-texts"&gt;
  &lt;/a&gt;
  Translating regular texts
&lt;/h3&gt;

&lt;p&gt;Every integration needs to provide a way to translate regular texts on the page in form of special component, so user can simply use the component and we need to make sure, that correct translation is displayed (based on selected language). We are using &lt;a href="https://formatjs.io/docs/core-concepts/icu-syntax/"&gt;ICU&lt;/a&gt; message format, which allows passing variables, so user can also pass named parameters, which are referenced in translation self and translation strings can look like &lt;code&gt;You have {itemsCount} items in your cart&lt;/code&gt;. In ideal scenario we'd like something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="na"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"cart_content_key"&lt;/span&gt; &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;itemsCount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;My main working tool is React and so I use React as kind of reference implementation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#translating-imperatively"&gt;
  &lt;/a&gt;
  Translating imperatively
&lt;/h3&gt;

&lt;p&gt;Translations can occur not only directly as children in DOM elements, but also in parameters like &lt;code&gt;title&lt;/code&gt; or &lt;code&gt;aria-label&lt;/code&gt;. For these cases we can't use component, but we need some user callable function, which will translate the text for him imperatively. E.g.:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;translation_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#source-of-data"&gt;
  &lt;/a&gt;
  Source of data
&lt;/h3&gt;

&lt;p&gt;We need a way to provide &lt;code&gt;tolgee/core&lt;/code&gt; instance and ideally we don't want limit it for just one (user might want to use multiple different sources of translations in the same project). Ideal would be to provide the instance globally or to a subtree of components in the application (In React it's exactly what Context API does).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-for-react"&gt;
  &lt;/a&gt;
  Implementation for React
&lt;/h2&gt;

&lt;p&gt;In React we use context API to provide Tolgee instance to all children:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TolgeeProviderContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TolgeeProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TolgeeProviderContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;TolgeeProviderContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Provider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's look how we can use Tolgee context in &lt;code&gt;T&lt;/code&gt; component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TolgeeProviderContext&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// get initial value&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTranslated&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// subscribe to translation changes&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTranslationChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;setTranslate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tolgee instance holds internal cache with all current translations. So when we call &lt;code&gt;tolgee.instant()&lt;/code&gt;, we'll get current translation of the key with applied parameters, also we can subscribe to translation changes, which happen e.g. when language is changed or when user manually changes the translation through in-context localization tool.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#imperative-translating-in-react"&gt;
  &lt;/a&gt;
  Imperative translating in React
&lt;/h3&gt;

&lt;p&gt;To create simple to use &lt;code&gt;t&lt;/code&gt; function in React, we need to somehow "hook" it to component lifecycle as we need not just to translate keys, but also subscribe the component to translation changes. Simplest solution (as I might given you a hint) is to create hook, which returns this &lt;code&gt;t&lt;/code&gt; function. Then we have separate &lt;code&gt;t&lt;/code&gt; function for each component and we can connect it to the component lifecycle. Let's look how that can look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useTranslate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;ReturnFnType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTolgeeContext&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// dummy state to force component to re-render&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setDummyValue&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;reRender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setDummyValue&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// array of used keys&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usedKeysRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTranslationChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// check if we are using this key&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usedKeysRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;reRender&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// remember that this key was used&lt;/span&gt;
    &lt;span class="nx"&gt;usedKeysRef&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;React doesn't have a direct way how to force component to re-render, so we do it through dummy state update.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This hook can be then used in following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useTranslate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;title_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We basically give user a function and then observe what keys is he using it for. When translation changes, we check if it was used before in this component and eventually we force component to re-render.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#notes"&gt;
  &lt;/a&gt;
  Notes
&lt;/h4&gt;

&lt;p&gt;Implementation for all frameworks and is quite simplified in order to fit into one article. The core library is in reality a bit more complex, also we've completely skipped in-context localization event handlers (that allows user to click on translation), as it is quite complicated subject.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-for-vuejs"&gt;
  &lt;/a&gt;
  Implementation for Vue.js
&lt;/h2&gt;

&lt;p&gt;Vue.js has also concept of providing a context to it's children. We can do this by &lt;code&gt;provide&lt;/code&gt; method on any component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TolgeeProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TolgeeProvider&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;({...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;// more reactive properties here&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;beforeUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$slots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Vue is using methods to manage lifecycle of the component, it is quite similar to React class components. Where Vue is quite different is that it's using reactive objects - everyting you put inside &lt;code&gt;data&lt;/code&gt; property, will get turned into reactive objects (which are watching for changes), so that way Vue triggers re-renedering. In example above, we are putting a whole &lt;code&gt;tolgeeContext&lt;/code&gt; into data property because in reality we need more things to be passed down and it needs to be reactive.&lt;/p&gt;

&lt;p&gt;Now let's look how &lt;code&gt;T&lt;/code&gt; component can work.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;T&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tolgeeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;translation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
          &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parameters&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTranslationChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;beforeUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translation&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similarly as in React, we use &lt;code&gt;tolgeeContext&lt;/code&gt; through &lt;code&gt;inject&lt;/code&gt; property and subscribe to&lt;br&gt;
translation changes in lifecycle methods.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#imperative-translating-in-vue"&gt;
  &lt;/a&gt;
  Imperative translating in Vue
&lt;/h3&gt;

&lt;p&gt;As we don't have anything like hooks in Vue, we'll have to use it's &lt;code&gt;Mixin&lt;/code&gt; api. Mixin is a way how to share logic between components while using it's lifecycle methods.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;TolgeeMixin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tolgeeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;beforeCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usedKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTranslationChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usedKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$forceUpdate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$t&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usedKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;beforeUnmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Mixin can then be used following way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;:title=&lt;/span&gt;&lt;span class="s"&gt;"$t('title_key')"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;mixins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TolgeeMixin&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here we inject &lt;code&gt;tolgeeContext&lt;/code&gt;, subscribe into translation changes and add &lt;code&gt;$t&lt;/code&gt; method, which can then be used by the user. We also maintain a list of keys, which were used and we update the component when they change. Notice that Vue has explicit method &lt;code&gt;$forceUpdate&lt;/code&gt;, which causes re-render of the component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-in-svelte"&gt;
  &lt;/a&gt;
  Implementation in Svelte
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Svelte and Angular sections are written by &lt;a href="https://dev.to/jancizmar"&gt;Jan Cizmar&lt;/a&gt;, as he is the author of the integrations&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In Svelte we implemented the provider quite similarly as in Vue and React.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- TolgeeProvider.svelte --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TolgeeConfig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;setContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tolgeeContext&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
  &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;T&lt;/code&gt; component that uses the context looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tolgeeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;translated&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;translated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;tolgeeContext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTranslationChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

{translated}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;TolgeeProvider&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; component are very similar to React implementation.&lt;/p&gt;

&lt;p&gt;The differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Svelte has lifecycle methods, React has hooks&lt;/li&gt;
&lt;li&gt;Context API has is a bit different&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#imperative-translating-in-svelte"&gt;
  &lt;/a&gt;
  Imperative translating in Svelte
&lt;/h3&gt;

&lt;p&gt;The biggest difference from React integration is in the &lt;code&gt;getTranslate&lt;/code&gt; method, which in Svelte returns a Store containing the method to actually translate the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getTranslate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tolgeeContext&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// set of used keys&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usedKeys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="c1"&gt;// dummy store which is updated to forces providing of new translate method&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;updateStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;updateStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;usedKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
    &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTranslationChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usedKeys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;has&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// return new translate method when something is changed&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// when updateStore changes, translate function gets changed as well&lt;/span&gt;
    &lt;span class="nx"&gt;updateStore&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keyName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example usage of &lt;code&gt;getTranslate&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;getTranslate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;{$t('title_key')}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In React the &lt;code&gt;useTranslate&lt;/code&gt; is hook, which is basically modifying state to force rerender when translation changes and the returned &lt;code&gt;t&lt;/code&gt; function called by the new render then returns new value.&lt;/p&gt;

&lt;p&gt;Similar thing happens in Svelte, but there the &lt;code&gt;t&lt;/code&gt; is actually a Store containing the translating function. That's why there is the &lt;code&gt;$&lt;/code&gt; before the function call. It means that the value should be re-rendered whenever the Store is updated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implementation-in-angular"&gt;
  &lt;/a&gt;
  Implementation in Angular
&lt;/h2&gt;

&lt;p&gt;The most different approach is used in Angular integration. Angular has no concept of provider, instead we can use module, which setups the Tolgee Core library and provides the service, pipe and component to allow translating in the module components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-ngxtolgeemodule"&gt;
  &lt;/a&gt;
  The NgxTolgeeModule
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;NgModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;declarations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TranslatePipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;STranslatePipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;exports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TranslatePipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;STranslatePipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TComponent&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;NgxTolgeeModule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// @dynamic&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;forRoot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TolgeeConfig&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;ModuleWithProviders&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NgxTolgeeModule&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;filesUrlPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/assets/i18n/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;ngModule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;NgxTolgeeModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;providers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="nx"&gt;TranslateService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;TranslationsProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;APP_INITIALIZER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;useFactory&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TranslationsProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;provider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="na"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;TranslationsProvider&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TranslateService&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="na"&gt;multi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;provide&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TolgeeConfig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;useValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool thing about this is the factory, which enables us to wait for translations to be loaded before it renders the application to the DOM. In other frameworks, this is handled by loadingFallback props or slots, which are rendered when translations are loading.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-translation-service-and-observables"&gt;
  &lt;/a&gt;
  The translation service and Observables
&lt;/h3&gt;

&lt;p&gt;In Angular world RxJs and its Observable interface are very popular. The Observable is similar thing as an event&lt;br&gt;
emitter. It enables us to emmit new values until we are done and enables us to unsubscribe when we need so. This is&lt;br&gt;
exactly what we need for our purpose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;TranslationData&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TolgeeConfig&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./tolgeeConfig&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TranslateService&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TolgeeConfig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Logic creating the Instance of Tolgee and lot of other stuff is ommited&lt;/span&gt;
  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;_tolgee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Tolgee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Tolgee&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_tolgee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;translated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;

      &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onTranslationChangeSubscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tolgee&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onTranslationChange&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;onTranslationChangeSubscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The service's &lt;code&gt;translate&lt;/code&gt; method creates new Observable and emits new value every time translation is changed, which is emitted by Tolgee instance from @tolgee/core library. It also returns function, which enables us to unsubscribe.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-component-with-raw-t-endraw-attribute-selector"&gt;
  &lt;/a&gt;
  The component with &lt;code&gt;t&lt;/code&gt; attribute selector
&lt;/h3&gt;

&lt;p&gt;As an equivalent to &lt;code&gt;T&lt;/code&gt; component in React, we can use &lt;code&gt;t&lt;/code&gt; selector, it subscribes to &lt;code&gt;translate&lt;/code&gt; Observable and changes the result according to the new value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TranslateService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./translate.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TOLGEE_WRAPPED_ONLY_DATA_ATTRIBUTE&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@tolgee/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;[t]&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;template&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;``&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Input&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;translateService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TranslateService&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;HTMLElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;TOLGEE_WRAPPED_ONLY_DATA_ATTRIBUTE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translateService&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;translated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-translate-endraw-pipe"&gt;
  &lt;/a&gt;
  The &lt;code&gt;translate&lt;/code&gt; pipe
&lt;/h3&gt;

&lt;p&gt;Pipe is a feature, which is missing in all the other integrations. It's basically function, which is able to change value used in template to some other value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;OnDestroy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/core&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;TranslateService&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./translate.service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rxjs&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Pipe&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;translate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;pure&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TranslatePipe&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;PipeTransform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;OnDestroy&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Subscription&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;protected&lt;/span&gt; &lt;span class="nx"&gt;translateService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TranslateService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;ngOnDestroy&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="nb"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
      &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// parameters unchanged&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscription&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translateService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Angular is basically running the transform method every time the user moves mouse or hits some keys, since it is impure pipe, which may return different result for the same input. That happens when language is changed: same key and params, different result.&lt;/p&gt;

&lt;p&gt;In comparison to other frameworks it seems that Angular library needs a bit more code and the integration is more complicated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;It is interesting, how these frameworks/libraries take inspiration from each other. Svelte being the newest has something from everyone and the code seems very natural and clean. Vue takes inspiration from both Angular and React and is kinda compromise between them. Then you have React, which stands out with hooks and JSX. And Angular taking inspiration from "classic" Model-View-Controller schema, which is familiar to backend developers.&lt;/p&gt;

&lt;p&gt;We'll be glad if you let us know how to improve/simplify an implementation in any of these frameworks/libraries. We don't claim that we know all these frameworks that well. I've used Vue seriously for the first time and Jan was learning Svelte from scratch, while he was implementing this (their documentation is outstanding).&lt;/p&gt;

</description>
      <category>react</category>
      <category>vue</category>
      <category>svelte</category>
      <category>angular</category>
    </item>
  </channel>
</rss>
