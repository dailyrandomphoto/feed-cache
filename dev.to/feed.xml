<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Organize React Components Better with Barrel Exports</title>
      <author>Joe Ziemba</author>
      <pubDate>Tue, 28 Sep 2021 22:45:13 +0000</pubDate>
      <link>https://dev.to/justmyrealname/organize-react-components-better-with-barrel-exports-4fno</link>
      <guid>https://dev.to/justmyrealname/organize-react-components-better-with-barrel-exports-4fno</guid>
      <description>&lt;p&gt;We all know that React imports can get a little... verbose.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;compose&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;recompose/compose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Dispatch&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;connect&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-redux&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;querystring&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;query-string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;generateMetaInfo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;shared/generate-meta-info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Head&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/head&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SegmentedControl&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/segmentedControl&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ChannelProfileCard&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/entities&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommunityAvatar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/avatar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;MembersList&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/MembersList&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PostFeed&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/PostsFeed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CommunitySidebar&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/communitySidebar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FeedsContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InfoContainer&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../community/style&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;FullScreenRedirectView&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../views/viewHelpers/fullScreenRedirect&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// and this isn't even that long...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The node module imports are unavoidable, but we &lt;em&gt;can&lt;/em&gt; clean up our local imports&lt;br&gt;
with a pattern called &lt;strong&gt;barrel exporting&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-barrel-export"&gt;
  &lt;/a&gt;
  The Barrel Export
&lt;/h2&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;ChannelProfileCard&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CommunityAvatar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;CommunitySidebar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;ErrorBoundary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FeedsContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;FullScreenRedirectView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;Head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;InfoContainer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;MembersList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;PostFeed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SegmentedControl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;SidebarSection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;A lot easier on the eyes, eh?&lt;/p&gt;

&lt;p&gt;Barrel is about more than the aesthetic though. We get better Intellisense and auto-importing for components in editors like VSCode thanks to the named exports, along with more flexibility in organizing our filesystem. We can nest folders as deep as it makes sense without worrying about ballooning import statements.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#how-to-set-up-barrel-exports"&gt;
  &lt;/a&gt;
  How to set up Barrel Exports
&lt;/h2&gt;

&lt;p&gt;A traditional &lt;code&gt;export&lt;/code&gt;/&lt;code&gt;import&lt;/code&gt; setup for React looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/SidebarSection/index.js&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* implementation */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/Homepage/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/blocks/Row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components/Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To enable the Barrel pattern, all we need to do 2 things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change from a default to named exports.&lt;/li&gt;
&lt;li&gt;Add an &lt;code&gt;index.js&lt;/code&gt; in whatever directory you want to be "the Barrel." From this file, we'll re-export all our components in that branch of the filesystem.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/Layout/SidebarSection/index.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="cm"&gt;/* implementation */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/components/index.js&lt;/span&gt;

&lt;span class="c1"&gt;// This is the Barrel!&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Layout/blocks/Row&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Layout/SidebarSection&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// src/views/Homepage/index.js&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;SidebarSection&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../../components&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's Next
&lt;/h3&gt;

&lt;p&gt;In future posts we'll look at even more improvements we can make to our React code with patterns like dot notation and removing the need to relative imports. Follow me on Twitter &lt;a href="https://twitter.come/justmyrealname"&gt;@justmyrealname&lt;/a&gt; to hear when new articles drop!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>codequality</category>
      <category>webdev</category>
    </item>
    <item>
      <title>My Baseline Mac Setup</title>
      <author>Daniel Starner</author>
      <pubDate>Tue, 28 Sep 2021 22:42:52 +0000</pubDate>
      <link>https://dev.to/dstarner/my-baseline-mac-setup-21fb</link>
      <guid>https://dev.to/dstarner/my-baseline-mac-setup-21fb</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to"&gt;dev.to&lt;/a&gt; is full of &lt;a href="https://dev.to/search?q=my%20mac%20setup"&gt;"&lt;em&gt;Check Out My Setup&lt;/em&gt;"&lt;/a&gt; and &lt;a href="https://dev.to/search?q=%20my%20terminal%20setup"&gt;"&lt;em&gt;Configure Your Terminal&lt;/em&gt;"&lt;/a&gt; posts, for better or worse...&lt;/p&gt;

&lt;p&gt;Well, it's time to be corny and add my own article to that list! Please don't judge this too harshly. Most of this is a public &amp;amp; refactored version of a GitHub gist that I walk through whenever I get a new Macbook, whether it be for work or for personal use. I will try to dive into the tooling and functionality a bit more so that you understand why I choose it as my baseline.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-things-first-iterm"&gt;
  &lt;/a&gt;
  First Things First; iTerm
&lt;/h2&gt;

&lt;p&gt;Gosh, I don't know if I could live without &lt;a href="https://iterm2.com/"&gt;iTerm2&lt;/a&gt;, because it's window and session management is leagues above the normal OSX Terminal. This is always the first thing that I install on any Macbook that I know I'll be using, because I just like the feel, customization, and mobility that iTerm provides over native Terminal. Check out their &lt;a href="https://iterm2.com/features.html"&gt;Features page&lt;/a&gt; to see what the fuss is about, but the nice multi-pane/multi-tab controls are enough to justify it's usage to me.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JUsT lEArn &lt;code&gt;tmux&lt;/code&gt; InsTEad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes, I understand tmux provides multi-session control and that's 90% of what I use iTerm2 for...but I'm a bad developer who never took the time to learn tmux, and its worked just fine for me so far.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
    </item>
    <item>
      <title>Serverless file storage with AWS Lambda</title>
      <author>Sergei Sumarokov</author>
      <pubDate>Tue, 28 Sep 2021 21:30:57 +0000</pubDate>
      <link>https://dev.to/kompotkot/serverless-file-storage-with-aws-lambda-1ghi</link>
      <guid>https://dev.to/kompotkot/serverless-file-storage-with-aws-lambda-1ghi</guid>
      <description>&lt;p&gt;Hello! Today we will deploy a serverless infrastructure based on AWS Lambda for uploading images (or any other files) with private storage in an AWS S3 bucket. We will be using terraform scripts that are uploaded and available at my &lt;a href="https://github.com/kompotkot/hatchery/tree/main/files_distributor"&gt;kompotkot/hatchery&lt;/a&gt; GitHub repository.&lt;/p&gt;

&lt;p&gt;This approach has the following advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;lambda is called on request and therefore allows to save on server maintenance costs if this functionality is not key for your application&lt;/li&gt;
&lt;li&gt;lambda functions have an isolated runtime environment, which is ideal for processing uploaded files. Should malicious code be uploaded, the attacker will not be able to leave the sandbox, and the sandbox session will be forcibly terminated after some time&lt;/li&gt;
&lt;li&gt;storing files in an S3 bucket is very cheap&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project structure
&lt;/h2&gt;

&lt;p&gt;As an example, we'll be using an abstract app for journal entries with an API.&lt;br&gt;
We can upload an image in each entry, and the structure is similar to a file directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- journal_1
  - entry_1
    - image_1
  - entry_2
    - image_1
    - image_n
  - entry_n
- journal_n
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our hypothetical API has an endpoint for receiving an entry in a journal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl \
  --request GET \
  --url 'https://api.example.com/journals/{journal_id}/entries/{entries_id}'
  --header 'Authorization: {token_id}'
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If in response to this endpoint &lt;code&gt;status_code&lt;/code&gt; is equal to 200, it means the user is authorized and has access to the journal. Accordingly, we will let them store images for this entry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#registering-the-app-on-bugoutdev"&gt;
  &lt;/a&gt;
  Registering the app on Bugout.dev
&lt;/h2&gt;

&lt;p&gt;To avoid adding an extra table to the database, which we would need for storing which image belongs to which entry, we will use &lt;code&gt;resources&lt;/code&gt; from &lt;a href="https://bugout.dev/"&gt;Bugout.dev&lt;/a&gt;. This approach is used to simplify our infrastructure, but, if required, this step can be substituted for creating a new table in your database and writing an API for creating, modifying, and deleting data about the stored images. Bugout.dev is open source and you can review the API documentation at the GitHub &lt;a href="https://github.com/bugout-dev"&gt;repository&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We will need an account and a team called &lt;code&gt;myapp&lt;/code&gt; (you can use any name in relation to your project) at the &lt;a href="https://bugout.dev/account/teams"&gt;Bugout.dev Teams&lt;/a&gt; page, you should save this team’s ID for the next step (in our case it’s &lt;code&gt;e6006d97-0551-4ec9-aabd-da51ee437909&lt;/code&gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBQN_pLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A5Lk9gSuzQguv5XdXjvYOnw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBQN_pLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2A5Lk9gSuzQguv5XdXjvYOnw.png" alt="2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, let’s create a Bugout.dev Application for our team myapp through a curl request (the token can be generated at the &lt;a href="https://bugout.dev/account/tokens"&gt;Bugout.dev Tokens&lt;/a&gt; page) and save it in the &lt;code&gt;BUGOUT_ACCESS_TOKEN&lt;/code&gt; variable:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl \
  --request POST \
  --url 'https://auth.bugout.dev/applications' \
  --header "Authorization: Bearer $BUGOUT_ACCESS_TOKEN" \
  --form 'group_id=e6006d97-0551-4ec9-aabd-da51ee437909' \
  --form 'name=myapp-images' \
  --form 'description=Image uploader for myapp notes' \
  | jq .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In response we will get confirmation of a successfully created application:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"f0a1672d-4659-49f6-bc51-8a0aad17e979"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"group_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"e6006d97-0551-4ec9-aabd-da51ee437909"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"myapp-images"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Image uploader for myapp notes"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The ID &lt;code&gt;f0a1672d-4659-49f6-bc51-8a0aad17e979&lt;/code&gt; will be used for storing &lt;code&gt;resources&lt;/code&gt;, where every resource is the uploaded image’s metadata. The structure is set in any form depending on the required keys, in our case, it will look as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a6423cd1-317b-4f71-a756-dc92eead185c"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"application_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"f0a1672d-4659-49f6-bc51-8a0aad17e979"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"resource_data"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"d573fab2-beb1-4915-91ce-c356236768a4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"random-image-name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"entry_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"51113e7d-39eb-4f68-bf99-54de5892314b"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"extension"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"png"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-19 15:15:00.437163"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"journal_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2821951d-70a4-419b-a968-14e056b49b71"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-19T15:15:00.957809+00:00"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"updated_at"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"2021-09-19T15:15:00.957809+00:00"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a result, we have a remote database, where every time we upload an image to an S3 bucket, we’ll be writing which journal(&lt;code&gt;journal_id&lt;/code&gt;) and which entry(&lt;code&gt;entry_id&lt;/code&gt;) the image was added to under which ID, name, and extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preparing-the-aws-project-environment"&gt;
  &lt;/a&gt;
  Preparing the AWS project environment
&lt;/h2&gt;

&lt;p&gt;AWS will store images in an S3 bucket and function as a server on Lambda for image manipulation. We will need an AWS account and a configured IAM user for terraform. It is an account with &lt;code&gt;Programmatic access&lt;/code&gt; to all resources without having access to the web console:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-Zu-bhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AzvEBy6syc1LRM2_jOMk2bw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-Zu-bhN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AzvEBy6syc1LRM2_jOMk2bw.png" alt="3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Get the access keys and add these variables to your environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export AWS_ACCESS_KEY_ID=&amp;lt;your_aws_terraform_account_access_key&amp;gt;
export AWS_SECRET_ACCESS_KEY=&amp;lt;your_aws_terraform_account_secret_key&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s also deploy a VPC with the subnets:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 subnets with private access&lt;/li&gt;
&lt;li&gt;2 subnets with public access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They will be useful for configuring the AWS Load Balancer. The code for this module can be found under &lt;a href="https://github.com/kompotkot/hatchery/tree/main/files_distributor/network"&gt;files_distributor/network&lt;/a&gt;. Let’s edit the variables in the &lt;code&gt;variables.tf&lt;/code&gt; file and launch the script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the output, add environment variables with values &lt;code&gt;AWS_HATCHERY_VPC_ID&lt;/code&gt;, &lt;code&gt;AWS_HATCHERY_SUBNET_PUBLIC_A_ID&lt;/code&gt; and &lt;code&gt;AWS_HATCHERY_SUBNET_PUBLIC_B_ID&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#server-code"&gt;
  &lt;/a&gt;
  Server code
&lt;/h2&gt;

&lt;p&gt;In our project, we’ll be using a simple AWS Lambda function. In my experience, I’ve noticed that as the packet with code surpasses 10MB, the upload speed to AWS drops dramatically. Even if we upload it to the S3 bucket in advance and then make a lambda from it, AWS can freeze for a long time. Therefore, if you are using third-party libraries it can make sense to use lambda layers, whereas if you aren’t planning to use any libraries with lightweight code on CloudFront, consider looking into lambda@edge.&lt;/p&gt;

&lt;p&gt;The full code can be found in the &lt;a href="https://github.com/kompotkot/hatchery/blob/main/files_distributor/bucket/modules/s3_bucket/files/lambda_function.py"&gt;lambda_function.py&lt;/a&gt; file in the repository. In my opinion, it’s more effective to work with nodejs, but to facilitate in-depth file processing we’ll use python. The code consists of main blocks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;MY_APP_JOURNALS_URL = "https://api.example.com"     # API endpoint for accessing out journal entries app
BUGOUT_AUTH_URL = "https://auth.bugout.dev"         # Bugout.dev endpoint for writing resources (image metadata)
FILES_S3_BUCKET_NAME = "hatchery-files"      # S3 bucket name, where we’ll store the images
FILES_S3_BUCKET_PREFIX = "dev"               # S3 bucket prefix, where we’ll store the images
BUGOUT_APPLICATION_ID = os.environ.get("BUGOUT_FILES_APPLICATION_ID")   # Bugout.dev application ID that we created prior
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s expand the default exception to proxy the response from Bugout.dev Resources. E.g., if the image does not exist, when we request the resource, we’ll receive error 404, which we’ll in turn return to the client as a reply to the request for the missing image.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BugoutResponseException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;status_code&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;detail&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To save an image in an S3 bucket we’ll use the &lt;code&gt;cgi&lt;/code&gt; standard library that’ll let us parse the request’s body that was sent in &lt;code&gt;multipart/&amp;lt;image_type&amp;gt;&lt;/code&gt; format. We’ll save images under the path &lt;code&gt;{journal_id}/entries/{entry_id}/images/{image_id}&lt;/code&gt; without specifying the file’s name and extension.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;put_image_to_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;content_length&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;decoded_body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"boundary"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"boundary"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"CONTENT-LENGTH"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;content_length&lt;/span&gt;

    &lt;span class="n"&gt;form_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_multipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decoded_body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;image_str&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;form_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"file"&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/entries/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/images/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
        &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;put_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;Body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we extract an image from the S3 bucket we’ll need to encode it into base64 for correct transmission.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_image_from_bucket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;image_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_PREFIX&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;journal_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/entries/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;entry_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/images/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;image_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FILES_S3_BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;image_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Body"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;encoded_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;encoded_image&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;lambda_handler(event,context)&lt;/code&gt; function’s implementation is available at this GitHub &lt;a href="https://github.com/kompotkot/hatchery/blob/main/files_distributor/bucket/modules/s3_bucket/files/lambda_function.py"&gt;link&lt;/a&gt;, to sum up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Firstly, we assert that the request is formatted correctly and contains &lt;code&gt;journal_id&lt;/code&gt; and &lt;code&gt;entry_id&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Then we call our hypothetical app’s API &lt;code&gt;https://api.example.com/journals/{journal_id}/entries/{entry_id}&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Depending on the request method: &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; or &lt;code&gt;DELETE&lt;/code&gt; we read, upload or delete an image from the journal’s entry&lt;/li&gt;
&lt;li&gt;When we’re uploading to the S3 bucket, we check the extension and the file’s size. This can be expanded into hash verification to avoid uploading the same file, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, we’ll need to package &lt;code&gt;requests&lt;/code&gt; into the Lambda library. Luckily, &lt;code&gt;boto3&lt;/code&gt;  for work with AWS functionality is ready out of the box. Let’s create an empty python environment, install the library and package the contents of &lt;code&gt;site-packages&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;python3 &lt;span class="nt"&gt;-m&lt;/span&gt; venv .venv
&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
pip &lt;span class="nb"&gt;install &lt;/span&gt;requests
&lt;span class="nb"&gt;cd&lt;/span&gt; .venv/lib/python3.8/site-packages
zip &lt;span class="nt"&gt;-r9&lt;/span&gt; &lt;span class="s2"&gt;"lambda_function.zip"&lt;/span&gt; &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Place the created archive &lt;code&gt;lambda_function.zip&lt;/code&gt;  into the &lt;code&gt;files_distributor/bucket/modules/s3_bucket/files&lt;/code&gt; directory and add the Lambda function itself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;zip &lt;span class="nt"&gt;-g&lt;/span&gt; lambda_function.zip &lt;span class="nt"&gt;-r&lt;/span&gt; lambda_function.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our server is ready, now we can upload code to AWS and deploy Lambda server, to do so use the script in &lt;code&gt;files_distributor/bucket&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’re left with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A private AWS S3 bucket &lt;code&gt;hatchery-sources&lt;/code&gt; that stores the Lambda function code&lt;/li&gt;
&lt;li&gt;A private AWS S3 bucket &lt;code&gt;hatchery-files&lt;/code&gt; that we’ll store our images into with the prefix &lt;code&gt;dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;AWS Lambda function with working server code&lt;/li&gt;
&lt;li&gt;An IAM role for the Lambda that allows writing into a specific S3 bucket and logs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The IAM role rules are in &lt;code&gt;files_distributor/bucket/modules/iam/files/iam_role_lambda_inline_policy.json&lt;/code&gt;. The other file &lt;code&gt;iam_role_lambda_policy.json&lt;/code&gt;  is needed for the Lambda to function works correctly.&lt;/p&gt;

&lt;p&gt;To debug Lambda you can just &lt;code&gt;print&lt;/code&gt; the required values or use the standard &lt;code&gt;logging&lt;/code&gt; module for python. The output for every Lambda function call is available at AWS CloudWatch:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kba3EzA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ASkrr3o73JHKmTStJ2SFJgA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kba3EzA8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2ASkrr3o73JHKmTStJ2SFJgA.png" alt="4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After creating the function, add a variable &lt;code&gt;BUGOUT_FILES_APPLICATION_ID&lt;/code&gt; from our code to the Lambda environment, which you can do in the tab &lt;code&gt;Configuration/Environment variables&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As the last step, save the AWS Lambda arn into the environment variable &lt;code&gt;AWS_HATCHERY_LAMBDA_ARN&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuring-the-aws-load-balancer-and-open-ports"&gt;
  &lt;/a&gt;
  Configuring the AWS Load Balancer and open ports
&lt;/h2&gt;

&lt;p&gt;The only step left now is to create AWS Security Group where we’ll set a port the AWS Load Balancer will listen to for subsequent data transmit into the Lambda function (in our case it’s 80 and 443).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;terraform apply &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_vpc_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_VPC_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_sbn_public_a_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_SUBNET_PUBLIC_A_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_sbn_public_b_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_SUBNET_PUBLIC_B_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;-var&lt;/span&gt; &lt;span class="nv"&gt;hatchery_lambda_arn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$AWS_HATCHERY_LAMBDA_ARN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations, our AWS Lambda function is open to the world and ready to upload and return images for our journal entries app!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>lambda</category>
      <category>bugout</category>
      <category>devops</category>
    </item>
    <item>
      <title>Open Source: As explained to a five-year-old</title>
      <author>Glowreeyah </author>
      <pubDate>Tue, 28 Sep 2021 21:29:57 +0000</pubDate>
      <link>https://dev.to/glowreeyah/open-source-as-explained-to-a-five-year-old-45ld</link>
      <guid>https://dev.to/glowreeyah/open-source-as-explained-to-a-five-year-old-45ld</guid>
      <description>&lt;p&gt;&lt;em&gt;It is Christmas, and Daddy brings home a Christmas tree, and the tree needs to be decorated. You have lots of decoration ideas, same as your sister, but you cannot decorate the tree till you receive permission from your Dad. Until permission to decorate the tree is granted, you cannot decorate the tree. This is similar to the way open source works.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what could Open Source mean?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Open source is the source code of computer software that is accessible to the public to change, redo, remake only when permission is granted.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How does that work?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the development process of that software, publicly making it accessible is considered so that when the software is released, anyone can have access to it through a means of permission. Github is where open source projects are mostly uploaded so they can be made available to the public. From Github, there are repositories where you can get the project to use the code or contribute changes to the software.&lt;/p&gt;

&lt;p&gt;The permission given to open source is called License . This License contains conditions where the actual owners of the software state how exactly they want you to use, change or modify their software. Some of these licenses could include MIT license(MIT), Apache License 2.0, GNU General Public License etc.&lt;/p&gt;

&lt;p&gt;Open Source Software are most preferred because they are interested in having more control over these kinds of software. Examples of Open Source Projects include; Linux, Mozilla Firefox, Apache, WordPress, VLC Media Player etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why the need for Open Source?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Contributing to Open Source has lots of benefits, and they are&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Source Software tends to have fewer bugs than regular software.&lt;/li&gt;
&lt;li&gt;Open source helps owners do a global software product for little to free cost.&lt;/li&gt;
&lt;li&gt;It encourages collaboration amongst the Open Source Communities.&lt;/li&gt;
&lt;li&gt;The source code is made available to the public to understand its purpose or how it works and how it works.&lt;/li&gt;
&lt;li&gt;It promotes the exchange of knowledge, allowing for more people to become skilled software developers.&lt;/li&gt;
&lt;li&gt;Since it is made public for modification, it meets all the criteria of the public.&lt;/li&gt;
&lt;li&gt;It is free.&lt;/li&gt;
&lt;li&gt;Open Source Software is highly secured because developers constantly review the code, thereby ensuring security and accountability.&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>github</category>
      <category>techtalks</category>
      <category>opensource</category>
      <category>dev</category>
    </item>
    <item>
      <title>Toxic optionals - TypeScript</title>
      <author>András Tóth</author>
      <pubDate>Tue, 28 Sep 2021 21:03:44 +0000</pubDate>
      <link>https://dev.to/latobibor/toxic-optionals-typescript-55bj</link>
      <guid>https://dev.to/latobibor/toxic-optionals-typescript-55bj</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/latobibor/toxic-flexibility-a-case-for-typescript-6ff"&gt;In my previous blog post&lt;/a&gt; I was talking about the inherent &lt;strong&gt;Toxic flexibility&lt;/strong&gt; of the &lt;code&gt;JavaScript&lt;/code&gt; language itself.&lt;/p&gt;

&lt;p&gt;I made a case for cutting down the number of options a piece of code can have so our tool chain including your IDE of choice can help you serving with just the right thing you need at the right moment, or help you "remember" every place a given object was used without having to guess it by use a "Find in all files" type dialog.&lt;/p&gt;

&lt;p&gt;However &lt;strong&gt;toxic flexibility&lt;/strong&gt; can sprout up in &lt;code&gt;TypeScript&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;Let's start with a real life product example!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-survey"&gt;
  &lt;/a&gt;
  Building a survey
&lt;/h2&gt;

&lt;p&gt;In our company we have to deal with surveys aka questionnaires. Overly simplified each &lt;code&gt;survey&lt;/code&gt; will have a number of &lt;code&gt;question&lt;/code&gt;s of different types.&lt;/p&gt;

&lt;p&gt;Let's say our product manager says: &lt;em&gt;"I want people to have the ability to add an &lt;strong&gt;integer&lt;/strong&gt; or a &lt;strong&gt;string&lt;/strong&gt; question."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For example: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many batteries were present? =&amp;gt; &lt;code&gt;integer question&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;How would you describe your experience? =&amp;gt; &lt;code&gt;string question&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's write the types down (I omit most of the details like IDs to keep it clean):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next day the product manager comes in and says: &lt;em&gt;"I want these types to have constraints: a &lt;code&gt;string&lt;/code&gt; question might have &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum lengths&lt;/code&gt;, while &lt;code&gt;integer&lt;/code&gt; questions might have &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum values&lt;/code&gt;."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;OK, we scratch our heads and then decide to go "smart" and say: &lt;em&gt;"You know what? I will have just a &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; property. The property &lt;code&gt;min&lt;/code&gt; will mean if it is &lt;code&gt;string&lt;/code&gt; a &lt;code&gt;minimum length&lt;/code&gt; and if it is &lt;code&gt;integer&lt;/code&gt; a &lt;code&gt;minimum value&lt;/code&gt;."&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(Note: at this point we started to stray away from &lt;code&gt;true domain objects&lt;/code&gt; to make our &lt;em&gt;initial&lt;/em&gt; implementation simpler. I will come back to this later.)&lt;/p&gt;

&lt;p&gt;The next day the product manager comes in again: &lt;em&gt;"All was well and good, but now I want a &lt;code&gt;boolean&lt;/code&gt; question (a yes-no one), which does not have a &lt;code&gt;min-max&lt;/code&gt; type of constraint. Also I want &lt;code&gt;min-max&lt;/code&gt; values to be optional. Also people want to make photos and want to have a constraint over the maximum number of photos they can make but I do not wish to set a minimum."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So we go and update our type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally the product manager comes to tell: &lt;em&gt;"Oh no, I completely forgot! We want people to have a question type where they select from a list of options with a radio button. I will call it &lt;code&gt;single choice&lt;/code&gt;."&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Now things start to sour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single-choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks like we can handle all these types with one excellent &lt;code&gt;type&lt;/code&gt;! Or is there a drawback...? 🤔&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cartesian-products-and-the-poison-of-optional-properties"&gt;
  &lt;/a&gt;
  Cartesian products and the poison of optional properties
&lt;/h2&gt;

&lt;p&gt;Let's see what kind of objects we can make from this &lt;code&gt;Question&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// no surprises&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validImage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;validInteger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// but also this will compile...&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;invalidYesNo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lol&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;wat&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Whenever you use optional you create the Cartesian product of all possible missing and added properties! We have 4 optional properties now we will have 2&lt;sup&gt;4&lt;/sup&gt; options: 16 possible types of which only 4 of them are &lt;code&gt;valid domain objects&lt;/code&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#look-at-how-it-all-ends-up"&gt;
  &lt;/a&gt;
  Look at how it all ends... up ⚠️
&lt;/h3&gt;

&lt;p&gt;A several years in my coding career I got really aware that to write good code I should not just see my module (be it a class or a function or a component) on its own, I constantly need to check how it is used: is it easy or is it cumbersome to interact with the object I have just defined.&lt;/p&gt;

&lt;p&gt;The type I created above will be extremely cumbersome to use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// overly simplified logic just to show the problem&lt;/span&gt;
&lt;span class="c1"&gt;// This is a simple React example, don't worry if you &lt;/span&gt;
&lt;span class="c1"&gt;// are not familiar with it&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ShowQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uh-oh, invalid yes-no question!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single-choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; 
      &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;min&lt;/span&gt; 
      &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;choices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Uh-oh, invalid single-choice question!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// and so on and so on - finally we can show it&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Constraint&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maximum value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Constraint&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maximum no of photos&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
 &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Drill this into your forehead:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every &lt;code&gt;optional property&lt;/code&gt; you set up will warrant at least an &lt;code&gt;if&lt;/code&gt; somewhere else.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#-raw-union-type-endraw-to-the-rescue"&gt;
  &lt;/a&gt;
  &lt;code&gt;Union type&lt;/code&gt; to the rescue!
&lt;/h2&gt;

&lt;p&gt;I promised to come back to the domain objects. In everyone's mind we only have 5 types. Let's make then only five (plus a base)!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;QuestionBase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yes-no&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; 
            &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;single-choice&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// I am not going to define all of them, they are simple&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;IntegerQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;QuestionBase&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// pay attention to this: answerType is now narrowed down&lt;/span&gt;
  &lt;span class="c1"&gt;// to only 'integer'!&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;minValue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;maxValue&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;ImageQuestion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;QuestionBase&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;answerType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// we can make now things mandatory as well!&lt;/span&gt;
  &lt;span class="c1"&gt;// so if product says we must not handle&lt;/span&gt;
  &lt;span class="c1"&gt;// infinite number of photos&lt;/span&gt;
  &lt;span class="nl"&gt;maxNumberOfPhotos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;IntegerQuestion&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;ImageQuestion&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// | YesNoQuestion | ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How do we use them? We are going to use &lt;a href="https://www.typescriptlang.org/docs/handbook/2/narrowing.html"&gt;&lt;code&gt;narrowing&lt;/code&gt;&lt;/a&gt; (see link for more details).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-case-for-some-raw-switchcase-endraw-"&gt;
  &lt;/a&gt;
  A case for some &lt;code&gt;switch-case&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;One of my favourite things to do when you have to deal with a stream of polymorphic objects is to use &lt;code&gt;switch-case&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderAllQuestions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;questions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;renderOneQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderOneQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// question.type is valid on all question types&lt;/span&gt;
  &lt;span class="c1"&gt;// so this will work&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;integer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;renderIntegerQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nx"&gt;renderStringQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Check the type! We are now 100% sure&lt;/span&gt;
&lt;span class="c1"&gt;// it is the right one.&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderIntegerQuestion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IntegerQuestion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// your IDE will bring `maxValue` up after you typed 'ma'&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxValue&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxValue&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; 
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Constraint&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Maximum value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;question&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxValue&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I know there are nicer React patterns than having a render function for everything. Here I just wanted to make a kind of framework-agnostic example.&lt;/p&gt;

&lt;p&gt;What happened above is that we were able to &lt;em&gt;funnel&lt;/em&gt; a set of types to concrete types without having to use the dangerous &lt;code&gt;as&lt;/code&gt; operator or to feel out the type at hand with duck-typing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;To sum it all up:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;optional properties&lt;/code&gt; result in conditions that check them leading to &lt;strong&gt;Cartesian product explosion&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;we cut down the number of &lt;strong&gt;invalid possibilities&lt;/strong&gt; to only &lt;strong&gt;5 valid &lt;code&gt;domain objects&lt;/code&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;these &lt;code&gt;domain objects&lt;/code&gt; also &lt;strong&gt;match the terminology&lt;/strong&gt; product management and clients have&lt;/li&gt;
&lt;li&gt;since we &lt;strong&gt;encapsulated&lt;/strong&gt; what is common in &lt;code&gt;QuestionBase&lt;/code&gt; now we are free to add question specific extras and quirks&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;instead of having a god-component&lt;/strong&gt; question handler that handles rendering of a question with an insane set of conditions (and growing!) we now boxed away the differences neatly in &lt;strong&gt;separate, aptly-typed components&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;we can also handle an &lt;strong&gt;array of different values&lt;/strong&gt; and without any type casting with (e.g. &lt;code&gt;question as IntegerQuestion&lt;/code&gt;) we created a type-safe system&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Questions? Did I make errors?&lt;br&gt;
Let me know in the comments.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>cleancode</category>
      <category>javascript</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a backend in Javascript: Introduction to Node.js</title>
      <author>Eric The Coder</author>
      <pubDate>Tue, 28 Sep 2021 20:59:49 +0000</pubDate>
      <link>https://dev.to/ericchapman/create-a-backend-in-javascript-introduction-to-node-js-215a</link>
      <guid>https://dev.to/ericchapman/create-a-backend-in-javascript-introduction-to-node-js-215a</guid>
      <description>&lt;p&gt;Here is a series of articles to help you create backend applications in Javascript.&lt;/p&gt;

&lt;p&gt;Node.js is now a must, so it is essential for a developer to master it.&lt;/p&gt;

&lt;p&gt;I will publish a new article every two days and little by little you will learn everything there is to know about Node.js&lt;/p&gt;

&lt;p&gt;To not miss anything follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-nodejs"&gt;
  &lt;/a&gt;
  What is Node.js?
&lt;/h2&gt;

&lt;p&gt;NodeJS allows you to run JavaScript code outside of a browser.&lt;/p&gt;

&lt;p&gt;Node.js is a free, open source, server environment that uses JavaScript language to create server-side web applications. (backend)&lt;/p&gt;

&lt;p&gt;Node.js works on different platforms (Windows, Linux, Unix, Mac OS X, etc.) With Node.js we can build a fast and highly scalable web application.&lt;/p&gt;

&lt;p&gt;Using Node.js also means that we can use JavaScript across the stack, i.e. the same language for the frontend and the backend. So more rapid and efficient development.&lt;/p&gt;

&lt;p&gt;Node.js has a huge library of ready-made packages that will save you a lot of time. These libraries are managed by NPM (Node Package Manager)&lt;/p&gt;

&lt;p&gt;A special feature of Node.js is that it uses asynchronous programming (running multiple tasks at the same time) vs synchronous programming (running one task at a time) found on many server-side programming languages like PHP and Ruby.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#installing-nodejs"&gt;
  &lt;/a&gt;
  Installing Node.js
&lt;/h2&gt;

&lt;p&gt;Node.js can be installed directly from its website: [&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt; marge(&lt;a href="https://nodejs.org/en/"&gt;https://nodejs.org/en/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Detailed documentation is also available on the Node.js website: [&lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt; marge(&lt;a href="https://nodejs.org/en/docs/"&gt;https://nodejs.org/en/docs/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Once the installation is complete, you can check the version installed with this command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="c"&gt;# v16.9.1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello World
&lt;/h2&gt;

&lt;p&gt;Tradition requires, the first thing we are going to do is the classic 'Hello World'&lt;/p&gt;

&lt;p&gt;The fastest and easiest way to run code with Node is by using REPL. To launch the REPL, just run this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node
Welcome to Node.js v16.9.1
Type &lt;span class="s2"&gt;".help"&lt;/span&gt; &lt;span class="k"&gt;for &lt;/span&gt;more information
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hello World&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Hello&lt;/span&gt; &lt;span class="nx"&gt;World&lt;/span&gt;
&lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The REPL allows you to run javascript but you will understand it is very limited. The REPL is used for running small orders or for testing only.&lt;/p&gt;

&lt;p&gt;If you want to write a complete program in NodeJS, you will need to create a file and run it.&lt;/p&gt;

&lt;p&gt;Create and open the app.js file, enter the following line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;console.log &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World'&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each file is considered by NodeJS to be a module and can therefore be executed.&lt;/p&gt;

&lt;p&gt;To do this, from the terminal enter: node &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;node app.js
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go, well done you have just created your first NodeJS application!&lt;/p&gt;

&lt;p&gt;Whenever you need to run NodeJS code you will need to do so with this command.&lt;/p&gt;

&lt;p&gt;We will see, later that there is a way to create a NodeJS server that will allow code to be executed automatically.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-browser-vs-javascript-server"&gt;
  &lt;/a&gt;
  JavaScript browser vs JavaScript server
&lt;/h2&gt;

&lt;p&gt;As you have seen thanks to NodeJS you can run JavaScript code without a browser! This is good but despite this, not everything is exactly the same.&lt;/p&gt;

&lt;p&gt;Here is a list of the main differences between JavaScript browser code and NodeJS&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A browser application run on the client's computer&lt;/li&gt;
&lt;li&gt;A NodeJS application is running on the server&lt;/li&gt;
&lt;li&gt;With NodeJS, there is no browser so no DOM and no Window object&lt;/li&gt;
&lt;li&gt;With NodeJS it is possible to access the file system&lt;/li&gt;
&lt;li&gt;With NodeJS, the module system called 'CommonJS' does not work with the same syntax as ES6 JavaScript modules&lt;/li&gt;
&lt;li&gt;There are objects in NodeJS which are available everywhere in your code. These objects are called the Globals.

&lt;ul&gt;
&lt;li&gt;Here are some of these objects. You will learn how to use it in due course:

&lt;ul&gt;
&lt;li&gt;__dirname (return the path of the current folder)&lt;/li&gt;
&lt;li&gt;__filename (returns the name of the file being executed)&lt;/li&gt;
&lt;li&gt;require (allows you to load modules)&lt;/li&gt;
&lt;li&gt;module (returns info on the current module)&lt;/li&gt;
&lt;li&gt;process (returns info about the current environment)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;That's all for today, follow me on twitter: &lt;a href="https://twitter.com/EricTheCoder_"&gt;https://twitter.com/EricTheCoder_&lt;/a&gt; to be notified of the publication of the next article (within two days).&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>A short guide to help you pick the correct HTML tag</title>
      <author>Jozsef Polgar</author>
      <pubDate>Tue, 28 Sep 2021 20:40:41 +0000</pubDate>
      <link>https://dev.to/polgarj/a-short-guide-to-help-you-pick-the-correct-html-tag-56l9</link>
      <guid>https://dev.to/polgarj/a-short-guide-to-help-you-pick-the-correct-html-tag-56l9</guid>
      <description>&lt;p&gt;A semantically correct HTML tag informs the browser and the developer about its content. It also helps keyboards and assistive technologies to navigate through a website.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;more than 100 HTML tags&lt;/em&gt;, but which ones are semantic and which are not?&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Non-semantic elements:&lt;/strong&gt; div and span, etc. Unlike semantic elements, these are not holding any extra information about their content.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;Semantic elements:&lt;/strong&gt; header, main, footer, article, img, p, h1, etc.&lt;/p&gt;

&lt;p&gt;When you create a new HTML file, you have something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I will focus on &lt;strong&gt;what's inside the body element&lt;/strong&gt; and name only the most important tags. You can find a link with a full list of HTML elements at the end of this article.&lt;/p&gt;

&lt;p&gt;The HTML tags can be separated into different groups and it helped me to understand the whole concept and I think this is the best way to explain it, so let's start.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-sectioning-or-landmarks"&gt;
  &lt;/a&gt;
  Content sectioning or landmarks
&lt;/h2&gt;

&lt;p&gt;The layout of the main page of this blog looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ev2ZJ7Dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uselessdivs.com/img/a-short-guide-to-help-you-pick-the-correct-html-tag/layout.svg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ev2ZJ7Dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://uselessdivs.com/img/a-short-guide-to-help-you-pick-the-correct-html-tag/layout.svg" alt="A visual representation of the main elements of the website, such as header, nav, main, section, article, aside."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#header-and-nav"&gt;
  &lt;/a&gt;
  header and nav
&lt;/h3&gt;

&lt;p&gt;In my &lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;, you can find the logo, which is a link and it leads to the main page and &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element which contains the links to my other pages.&lt;br&gt;
You can also put here some &lt;strong&gt;introduction about the page&lt;/strong&gt;, a search bar, or other elements.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#main"&gt;
  &lt;/a&gt;
  main
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element holds different content on each page. This &lt;strong&gt;holds the primary information&lt;/strong&gt; of the current page &lt;strong&gt;or the main functionality&lt;/strong&gt; of an application.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#footer"&gt;
  &lt;/a&gt;
  footer
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;tag creates a footer for a section or for the whole document. You can have multiple &lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt; elements in one page, which typically contains data, like: contact info to the author, copyrigt information, related links etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#aside"&gt;
  &lt;/a&gt;
  aside
&lt;/h3&gt;

&lt;p&gt;You can also find the &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; on the right side of my page. It &lt;strong&gt;holds complementary content&lt;/strong&gt;. If I remove it, nothing will be missing from the primary content. You can put here for example table of contents, related posts, etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#section"&gt;
  &lt;/a&gt;
  section
&lt;/h3&gt;

&lt;p&gt;Inside my &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element, you can find the &lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt; tag. This is a non-semantic tag, and it should &lt;strong&gt;always&lt;/strong&gt; have a heading.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#h1-h6"&gt;
  &lt;/a&gt;
  h1 - h6
&lt;/h3&gt;

&lt;p&gt;Heading elements: &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h3&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h4&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;h5&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt;, are the titles of the different sections. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest level of the headings, and it is necessary to have one on each page but there should be only one per page. &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest. If you run out of headings, there is another option: &lt;a href="https://uselessdivs.com/blog/the-7th-heading"&gt;the 7th heading&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The reason you should use landmarks is that screen readers and other &lt;em&gt;assistive technologies can jump back and forth between these elements&lt;/em&gt;.&lt;br&gt;
For example, all the pages have the same header with the same logo, the same navigation, but with a keyboard shortcut, you can jump over them and start with the content of the main tag.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#text-content-elements"&gt;
  &lt;/a&gt;
  Text content elements
&lt;/h2&gt;

&lt;p&gt;These can help you &lt;strong&gt;organize the written content&lt;/strong&gt; on your pages and give information about the content to search engines and screen readers.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#p"&gt;
  &lt;/a&gt;
  P
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; stands for paragraph. In other words, a block of text. You will use it a lot for wrapping your text content with it.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ul-ol-li"&gt;
  &lt;/a&gt;
  ul, ol, li
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; - unordered list, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; - ordered list, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; - list elements of the two kind of lists. If you need to create a list you have to use them.&lt;/p&gt;

&lt;p&gt;List items are wrapped in &lt;em&gt;&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, if the order is not important&lt;/em&gt;. It will put bullet points before each list item.&lt;/p&gt;

&lt;p&gt;Choose &lt;em&gt;&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, if you need a numbered list&lt;/em&gt; and it will put a number before each item in ascending order.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#figure-figcaption-blockquote-cite"&gt;
  &lt;/a&gt;
  Figure, figcaption, blockquote, cite
&lt;/h3&gt;

&lt;p&gt;I will explain all of them with one example. Look at this block of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;blockquote&lt;/span&gt; &lt;span class="na"&gt;cite=&lt;/span&gt;&lt;span class="s"&gt;"https://www.htmhell.dev/24-a-placeholder-is-not-a-label/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Every form input element needs a label.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Manuel Matuzović, &lt;span class="nt"&gt;&amp;lt;cite&amp;gt;&lt;/span&gt;A placeholder is not a label - HTMHell&lt;span class="nt"&gt;&amp;lt;/cite&amp;gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; go hand in hand&lt;br&gt;
The &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; is a self-contained element optionally, but usually with a caption. This caption is the &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; element.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;blockquote&amp;gt;&lt;/code&gt; is for quotations, where you want to indicate the author, the source, etc. (You can use the cite attribute on this tag to give the URL of the source of this quotation).&lt;br&gt;
&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt; element &lt;em&gt;is holding the reference to a quoted content&lt;/em&gt;. Name of the author, title of the cited material, etc. and this is the first element of our next group, the inline text elements.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#inline-text-elements"&gt;
  &lt;/a&gt;
  Inline text elements
&lt;/h2&gt;

&lt;p&gt;You can wrap smaller parts of text like words, sentences, etc into different tags to define its style, meaning, or structure.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#a"&gt;
  &lt;/a&gt;
  a
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; or anchor elements are links, which have a &lt;strong&gt;href&lt;/strong&gt; attribute, which leads to &lt;em&gt;other web pages, files, email addresses, phone numbers, or a location on the same page&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#em"&gt;
  &lt;/a&gt;
  em
&lt;/h3&gt;

&lt;p&gt;Use this element to &lt;strong&gt;emphasize any text content.&lt;/strong&gt; &lt;em&gt;Screen readers read this part of a text in a different way.&lt;/em&gt; Browsers render the content of this text in italic font style but don't use it only for styling.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#strong"&gt;
  &lt;/a&gt;
  strong
&lt;/h3&gt;

&lt;p&gt;Use this element to &lt;strong&gt;mark content, which is more important&lt;/strong&gt; than the rest of the text. &lt;strong&gt;Screen readers read this part of a text in a different way.&lt;/strong&gt; Browsers render the content of this text in bold font style but don't use it only for styling.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#q"&gt;
  &lt;/a&gt;
  q
&lt;/h3&gt;

&lt;p&gt;A short inline quotation, which doesn't need an entire paragraph. (You can use the cite attribute on this tag to give the URL of the source of this quotation)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image-and-multimedia"&gt;
  &lt;/a&gt;
  Image and multimedia
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#audio"&gt;
  &lt;/a&gt;
  audio
&lt;/h3&gt;

&lt;p&gt;audio is used to embed sound into your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#img"&gt;
  &lt;/a&gt;
  img
&lt;/h3&gt;

&lt;p&gt;img is used to embed an image into your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  video
&lt;/h3&gt;

&lt;p&gt;video is used to embed a video into your website.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#table-content"&gt;
  &lt;/a&gt;
  Table content
&lt;/h2&gt;

&lt;p&gt;I think an example is the easiest way to explain these elements:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/polgarj/embed/vYZvwrQ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#table"&gt;
  &lt;/a&gt;
  table
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; creates a two-dimensional table with rows and columns&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thead"&gt;
  &lt;/a&gt;
  thead
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt; is a row or rows that define the column heading&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#th"&gt;
  &lt;/a&gt;
  th
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; is a single cell as a header of a group of cells. This group of cells can be a column or a row, and you have to define it by the scope attribute. The scope attribute can have the value of col or row.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tbody"&gt;
  &lt;/a&gt;
  tbody
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; wraps the main content of our table, which is usually between the thead and the tfoot elements.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tr"&gt;
  &lt;/a&gt;
  tr
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; defines a row of cells in a table.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#td"&gt;
  &lt;/a&gt;
  td
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; stands for table data. This is a single cell that holds the information.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#tfoot"&gt;
  &lt;/a&gt;
  tfoot
&lt;/h3&gt;

&lt;p&gt;This is a row at the end of the table, that summarizes its content.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#forms"&gt;
  &lt;/a&gt;
  Forms
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#form"&gt;
  &lt;/a&gt;
  form
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element wraps the entire form that users can use to enter their data and submit it to the server.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#fieldset"&gt;
  &lt;/a&gt;
  fieldset
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; groups related inputs in a form. Fieldsets need a caption and this caption is the legend element. For example, if you have a form with a shipping address and billing address, you can create two groups of inputs with the fieldset element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#legend"&gt;
  &lt;/a&gt;
  legend
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;legend&amp;gt;&lt;/code&gt; element defines a caption for the fieldset.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  input
&lt;/h3&gt;

&lt;p&gt;Users can interact with &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements to enter their data. &lt;em&gt;There are many different kinds of input fields for different types of information&lt;/em&gt;, like text, color, file, etc.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#label"&gt;
  &lt;/a&gt;
  label
&lt;/h3&gt;

&lt;p&gt;Every &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field needs a caption and this caption is the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element. &lt;strong&gt;You can't replace the &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; tag with the placeholder attribute.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#select-and-option"&gt;
  &lt;/a&gt;
  select and option
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; is a special kind of input field, with a dropdown menu. This dropdown menu contains &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#textarea"&gt;
  &lt;/a&gt;
  textarea
&lt;/h3&gt;

&lt;p&gt;Users can enter &lt;em&gt;multiple lines of text&lt;/em&gt; in this field&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#button"&gt;
  &lt;/a&gt;
  button
&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; tag creates a clickable element, which looks like a button. It is used to submit forms.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#others"&gt;
  &lt;/a&gt;
  Others
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#iframe"&gt;
  &lt;/a&gt;
  iframe
&lt;/h3&gt;

&lt;p&gt;You can embed other HTML files into your website with the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; element. For example, you can insert a song from Spotify or a video from YouTube into your website.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#picture"&gt;
  &lt;/a&gt;
  picture
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; has almost the same purpose as the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; element, but you can specify more sources and browsers decide, which is the best for them. If you want to use a new image format, like .avif, (which is not yet widely supported at the time I write this post), you should give the image in another format, like png with the &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#source"&gt;
  &lt;/a&gt;
  source
&lt;/h3&gt;

&lt;p&gt;With this element you can specify multiple sources for the &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt;, the &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; elements, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;picture&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;source&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"image.webp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"image.avif"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/picture&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#svg"&gt;
  &lt;/a&gt;
  svg
&lt;/h3&gt;

&lt;p&gt;I could describe it in a more complicated way, but &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; is &lt;em&gt;mostly used to display a vector graphic image&lt;/em&gt;, that you can enlarge or reduce to any size without becoming pixelated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-by-playing"&gt;
  &lt;/a&gt;
  Learn by playing
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://twitter.com/plfstr" rel="noreferrer"&gt;Paul Foster&lt;/a&gt; built this awesome memory game. Test yourself and beat your score tomorrow. &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/plfstr/embed/zYqQeRw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;
    If you pick the correct elements, your code will be easier to read by other developers,&lt;br&gt;
    it will be easier for assistive technology users to use your website,&lt;br&gt;
    the search engines will rank your website higher (SEO).&lt;br&gt;
    Sometimes you should stop and think about whether there is a better HTML element than the one you want to use.
&lt;/p&gt;

&lt;p&gt;If you are missing something or find any inaccuracies, please let me know and I will add or correct it as soon as I can.&lt;/p&gt;

&lt;p&gt;Originally posted on &lt;a href="https://uselessdivs.com/blog/a-short-guide-to-help-you-pick-the-correct-html-tag"&gt;Use Less Divs&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>a11y</category>
    </item>
    <item>
      <title>Why web3 matters</title>
      <author>Cat McGee</author>
      <pubDate>Tue, 28 Sep 2021 20:08:03 +0000</pubDate>
      <link>https://dev.to/catmcgeecode/why-web3-matters-4oe0</link>
      <guid>https://dev.to/catmcgeecode/why-web3-matters-4oe0</guid>
      <description>&lt;p&gt;&lt;a href="https://blog.mcgee.cat/why-web3-matters"&gt;Original post on Hashnode&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, a Twitter thread entitled &lt;em&gt;Why web3 matters&lt;/em&gt; went viral. And as much as I love this sentiment, I couldn't help but roll my eyes when reading through Chris Dixon's buzzword-filled tweets. That kind of blockchain lingo is loved by crypto salespeople and NFT grifters, but is quite far removed from people who, well... actually want to understand why web3 matters. It doesn't help that Twitter is a cesspool for controversies, and Chris's thread seemed to divide people into two groups - you either agree with everything he said 100% making you a delusional zoomer, or you're an old-fashioned granddad who can't keep up with the times. I'm here to help you make up your own mind, and hopefully find yourself somewhere in between these two extremes.&lt;/p&gt;

&lt;p&gt;If you're someone who loves to read irrationally enthusiastic reassurances about the next blockchain get-rich-quick scheme, this post is not for you. But if you're fed up of the constant bombardment of jargon and actually want to understand why on earth Twitter is suddenly talking about a new web, read on. I'm going to tell you why web3 &lt;em&gt;actually&lt;/em&gt; matters and what it means for you - a person, not a venture capitalist. 😉&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-wrong-with-our-current-web"&gt;
  &lt;/a&gt;
  What's wrong with our current web?
&lt;/h2&gt;

&lt;p&gt;We've had two iterations of the web so far - known as, you guessed it, web1 and web2. Web1 was king from approximately 1990-2005, and most people using the web in those days were consumers rather than creators. Content was consumed by many but created by few, mainly obnoxiously nerdy tech people and forward-thinking news sites. It is now nicknamed the 'read-only web.'&lt;/p&gt;

&lt;p&gt;Web2 changed that, particularly with the introduction of social media. Suddenly, more and more people were posting, creating, and sharing their lives with the world. Those who were originally only reading news stories started publicly arguing with them. And the internet that we know today was born.&lt;/p&gt;

&lt;p&gt;But there's a problem. Everything that we post, share, comment, like, or furiously screenshot is owned by someone else. And it goes deeper - it's owned by 4 big companies: Google, Apple, Facebook, and Amazon. We'll call them GAFA.&lt;/p&gt;

&lt;p&gt;The web has gone from being created by few and consumed by many, to being created by many and consumed by many, to being &lt;strong&gt;created by many and owned by few&lt;/strong&gt;. GAFA have created a &lt;strong&gt;Data Economy&lt;/strong&gt;, feeding off of the content that we create and using it against us. They control the information we create, the information we see, and with that they're able to &lt;em&gt;gently&lt;/em&gt; exploit our human weaknesses by manipulating what we believe, which in turn makes ads more effective - the Data Economy business model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The company with the most data always wins.&lt;/strong&gt; Facebook buys out any and all threats to their social media monopoly - remember when WhatsApp was privacy-focussed? Or when Instagram was actually a non-toxic platform for friends to share photos? Google has made Bing a meme, Yahoo a boomers-only search engine, and reduced Mozilla to desperately holding onto the ethical part of the browser market. And Amazon has basically disrupted every market in existence and changed the course of the economy. But like, in a bad way.&lt;/p&gt;

&lt;p&gt;The Data Economy isn't just an exploitive and rigged business model, but it also has devastating consequences when things go wrong. When so much data is owned by one entity, it makes them a prime target for hacking. And oh boy, do these guys get hacked. For a glimpse into how insecure the Data Economy is, have a look at Wikipedia's &lt;a href="https://en.wikipedia.org/wiki/List_of_data_breaches"&gt;list of data breaches&lt;/a&gt;. And to find out if your data has been exposed to the public, enter your email into &lt;a href="https://haveibeenpwned.com/"&gt;Have I Been Pwned&lt;/a&gt;. Not only are there accidental data breaches, but there have been cases of &lt;a href="https://en.wikipedia.org/wiki/Facebook%E2%80%93Cambridge_Analytica_data_scandal"&gt;purposeful illegal selling of data&lt;/a&gt; from GAFA. There is no sign of this stopping, and no incentive to stop either. That's where web3 comes in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-web3-ideal"&gt;
  &lt;/a&gt;
  The web3 ideal
&lt;/h2&gt;

&lt;p&gt;Web3 promises two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;To remove the ability to make money from data&lt;/li&gt;
&lt;li&gt;To create incentives to make money on the internet through other means&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By achieving both these goals, we will no longer live in a Data Economy. Companies will have to find new ways to make money, and people will be able to take control of their own data. There will be no incentive to hack into data centres. We'll live in a world where &lt;strong&gt;the people consume, create, and own our information&lt;/strong&gt;, not in a world of surveillance capitalism that feeds 4 power-hungry data-hoarding entities.&lt;/p&gt;

&lt;p&gt;Sound unrealistic? Up until now, it has been. We've been relying on governments and companies to do the right thing, and we've seen how that's panned out. But if we can't trust people to enforce these promises, we can trust technology. So let's go through how web3 can technologically fulfill each of its promises.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#remove-the-ability-to-make-money-from-data"&gt;
  &lt;/a&gt;
  Remove the ability to make money from data
&lt;/h2&gt;

&lt;p&gt;Web3 has often been called the &lt;strong&gt;decentralized web&lt;/strong&gt;. While data is currently &lt;em&gt;centralized&lt;/em&gt; and owned by GAFA, web3 applications separate their data and store it on a large number of computers and hard drives. These computers are not owned by one company - the idea is that each person can own a small amount of data. Without one entity having access to data, there is no ability to make money from it. &lt;/p&gt;

&lt;p&gt;There are plenty of ways to accomplish this technologically. The most well-known solution to this currently is (brace yourself) &lt;em&gt;blockchain&lt;/em&gt;. Without going into boring details of how a blockchain works, it allows each computer to hold a small amount of data - a block in a chain. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://bitcoin.org/"&gt;Bitcoin&lt;/a&gt; and &lt;a href="https://ethereum.org/"&gt;Ethereum&lt;/a&gt; are the two biggest blockchains in existence, but others like &lt;a href="https://solana.com/"&gt;Solana&lt;/a&gt; and  &lt;a href="https://cardano.org/"&gt;Cardano&lt;/a&gt; are slowly catching up. There are hundreds of decentralized apps, aka dapps, already deployed on Ethereum, and building on the blockchain is getting easier by the minute. It is by far the most secure decentralized architecture.&lt;/p&gt;

&lt;p&gt;There are other ways to build a decentralized network. The obsession over and reliance on blockchain is, quite frankly, BS. There are decentralized storage companies out there (like &lt;a href="https://www.storj.io/"&gt;Storj&lt;/a&gt;) that pay any person to host some of their storage space to be a 'node' on their network, while allowing developers to store their data on these nodes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Web3 is not blockchain&lt;/strong&gt; - this is an incredibly important point to understand. Blockchain is a web3 architecture, but it is not the only way to accomplish a decentralized web, and in most cases it is unnecessarily expensive. However, with blockchain comes &lt;strong&gt;cryptocurrency&lt;/strong&gt;, which brings us to our next point.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#create-incentives-to-make-money-on-the-internet-through-other-means"&gt;
  &lt;/a&gt;
  Create incentives to make money on the internet through other means
&lt;/h2&gt;

&lt;p&gt;Without one entity having access to large amounts of data, we can't have a Data Economy. And removing the Data Economy already opens up new incentives to make money through other means. But when people talk about making money using web3, they're talking about crypto.&lt;/p&gt;

&lt;p&gt;Just a warning: some of this next part may sound similar to Chris's thread, but I promise it will actually be coherent. &lt;/p&gt;

&lt;p&gt;Crypto provides a financial incentive, known as &lt;strong&gt;tokens&lt;/strong&gt;, to participate in the building of a decentralized web. There are many ways to earn tokens - some examples are offering storage (like Storj), creating content, or sometimes even &lt;a href="https://www.forbes.com/sites/youngjoseph/2020/09/17/uniswap-ethereum/"&gt;being early adapters of the application.&lt;/a&gt; Companies can set up their own protocol for rewarding their users, and it cuts out the need for other third party services. There is no need to send data through AWS, Stripe, or PayPal, as tokens can be sent directly from the provider to the user.&lt;/p&gt;

&lt;p&gt;Tokens can also be sent directly from one user to another. No more relying on Google to give you your YouTube earnings, or directing your audience to Patreon so they can donate - users can directly 'tip' you a token if they like your content. There are also the famous NFTs, which, sorry Chris, do not let you &lt;em&gt;"own a piece of the internet"&lt;/em&gt;. NFTs are tokens too, but they are not equal in value to each other. While owning an OG token is like owning a dollar, owning an NFT is more like owning a painting. All dollars are equal in value, but not all paintings are equal in value. NFTs are each unique, and they're pretty cool - check out &lt;a href="https://opensea.io/"&gt;OpenSea&lt;/a&gt; if you're interested in getting into it.&lt;/p&gt;

&lt;p&gt;This token economy is exactly what the web was created for in the first place. It's direct. &lt;em&gt;People&lt;/em&gt; reward &lt;em&gt;people&lt;/em&gt; for providing a service or participating in a better world. There is no malicious data tracking or manipulation. No exploitation, no incessant ads, no algorithms designed to be addictive. No reliance on huge profit-driven companies. Just people interacting with people. That's web3.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-where-are-we"&gt;
  &lt;/a&gt;
  So where are we?
&lt;/h2&gt;

&lt;p&gt;Most apps you use are still web2. The majority of dapps out there are purely for finance, like trading crypto or buying and selling NFTs. But we're getting there, and web3 is already beginning to expand into huge industries, like &lt;a href="https://audius.co/"&gt;music&lt;/a&gt;, &lt;a href="https://livepeer.org/"&gt;video streaming&lt;/a&gt;, and even &lt;a href="https://axieinfinity.com/"&gt;gaming&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Web3 may currently seem pretty inaccessible, and when buzzword tweets go viral it continues to push the narrative that the decentralized web is only for people already in the know. But web2 was like that too. There are thousands of people passionately working to make this space more accessible for all, and you'll soon be using web3 apps without even knowing. &lt;/p&gt;

&lt;p&gt;It's super easy to start your own journey into web3, and you can get involved today by installing &lt;a href="https://metamask.io/"&gt;Metamask&lt;/a&gt;, a browser extension to make your browser compatible with blockchain apps. If you're a developer interested in getting into the web3 space, I cannot recommend &lt;a href="https://dev.to/dabit3/the-complete-guide-to-full-stack-solana-development-with-react-anchor-rust-and-phantom-3291"&gt;Nader Dabit&lt;/a&gt;'s content enough.&lt;/p&gt;

&lt;p&gt;Thanks for reading. This is my first ever post about web3, and was &lt;a href="https://blog.mcgee.cat/why-web3-matters"&gt;originally posted here&lt;/a&gt;. I'll be posting more about the decentralized web so if you're interested in reading my (potentially controversial) takes, make sure to follow me &lt;a href="https://blog.mcgee.cat/"&gt;on Hashnode&lt;/a&gt; or &lt;a href="https://twitter.com/messages/compose?recipient_id=2287174586&amp;amp;text=Hey%20Cat!"&gt;slide into my Twitter DMs&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>twitter</category>
      <category>discuss</category>
    </item>
    <item>
      <title>A Strange Request</title>
      <author>Pato Z</author>
      <pubDate>Tue, 28 Sep 2021 19:44:26 +0000</pubDate>
      <link>https://dev.to/pzavolinsky/a-strange-request-48i9</link>
      <guid>https://dev.to/pzavolinsky/a-strange-request-48i9</guid>
      <description>&lt;p&gt;I'm planning a fancy dinner party for our friends, and you being my friend, decide to help me with the arrangements. Everything is going well until I ask you...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-strange-request"&gt;
  &lt;/a&gt;
  A Strange Request
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Hey, I need you to run to the Library, you know that building full of books we used to visit in ancient times, before the Internet?&lt;/li&gt;
&lt;li&gt;Yes, I know what a Library &lt;em&gt;is&lt;/em&gt;, thankyouverymuch.&lt;/li&gt;
&lt;li&gt;I need you to find me the title of the first five books about broccoli ever published, it's a matter of life and death.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Being the brains behind this operation, you first worry about my mental sanity, but then dubbing me a bit eccentric, you decide to humor me. Before heading out to the Library, you take out a piece of paper and jot down my request:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT book titles
FROM books in the Library
WHERE the book topic is about 'broccoli'
ORDER BY publication year
LIMIT 5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(I sneak a peek at your note and think to myself "What a strange fella").&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#road-trip"&gt;
  &lt;/a&gt;
  Road trip
&lt;/h2&gt;

&lt;p&gt;Clearly you don't live in the Library so to get there you'll need to take some means of transportation. And today your transport of choice is a &lt;a href="https://en.wikipedia.org/wiki/Network_socket"&gt;TCP Socket&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Never mind what happens in the Library, a &lt;em&gt;lot&lt;/em&gt; can go wrong on the way there and back: you could get lost, take too long, decide to stop for coffee on your way back, even get to the Library only to find out that it's temporarily closed due to a bug infestation.&lt;/p&gt;

&lt;p&gt;I, being the inquisitive chef, start preparing for the worst, including network errors and socket timeouts.&lt;/p&gt;

&lt;p&gt;Luckily the roads are clear, so a couple of milliseconds later you arrive at the Library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-only-sensible-way"&gt;
  &lt;/a&gt;
  The only sensible way
&lt;/h2&gt;

&lt;p&gt;Fresh through the door, you see an impressive building stuffed from top to bottom with rows and rows of books.&lt;/p&gt;

&lt;p&gt;Eager to get your broccoli quest out of the way you do what any sensible human being would do in this situation: you pick the first book in the first shelf and read it from cover to cover to see if it's about broccoli or not, you make a note of its &lt;em&gt;broccoliness&lt;/em&gt; and its publication year and continue with the second one, and so on until you've read the whole library. Then you find the five earliest publications and head back home.&lt;/p&gt;

&lt;p&gt;Unfortunately years have passed, the dinner party was a sham and we are no longer on speaking terms. This strategy was too inefficient. It could've worked if there were only a couple of books in the Library but this was not the case.&lt;/p&gt;

&lt;p&gt;What you just did is known as a &lt;a href="https://en.wikipedia.org/wiki/Full_table_scan"&gt;table scan&lt;/a&gt; (also known as a &lt;code&gt;collection scan&lt;/code&gt;) and in most cases you'll lose friends and ruin parties because of it.&lt;/p&gt;

&lt;p&gt;We need a better approach, luckily librarians have solved this problem before.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-bunch-of-cards"&gt;
  &lt;/a&gt;
  A bunch of cards
&lt;/h2&gt;

&lt;p&gt;Libraries since forever had this great tool called The Catalog. Library catalogs, before computers, were big pieces of furniture, chests of drawers filled with small cardboard cards. Each card contained information about where to find books according to some criteria. An alternative name for these "catalog furniture things" is &lt;a href="https://en.wikipedia.org/wiki/Database_index"&gt;indexes&lt;/a&gt; (or "indices" if you're feeling particularly fancy).&lt;/p&gt;

&lt;p&gt;Armed with this knowledge you venture into the mysterious Room of Catalogs. In there you find lots of catalogs with book reference cards for many different types of queries. You have "books by size", "books by weight", "books by nutritional value", ... etc. Browsing through them you find two indexes that catch your attention: "books by topic" and "books by publication year".&lt;/p&gt;

&lt;p&gt;These two should come in handy but which one to choose?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-plan-comes-together"&gt;
  &lt;/a&gt;
  A plan comes together
&lt;/h2&gt;

&lt;p&gt;So you have a choice to make, should you go check the topic index or the publication index? The answer you can already foresee: "it depends".&lt;/p&gt;

&lt;p&gt;If the library had only books on green veggies, then the chances of finding a broccoli book in there would be pretty high. In other words the "broccoli" card of the topic index would be very &lt;em&gt;very&lt;/em&gt; long. If this was the case, maybe going to the publication index and starting from the oldest known year, searching those books for &lt;em&gt;broccoliness&lt;/em&gt; until you find five would make sense.&lt;/p&gt;

&lt;p&gt;In non-veggie only libraries though this strategy would be disastrous, so you decide you'll go for the topic index.&lt;/p&gt;

&lt;p&gt;But before jumping to it, you realize picking the right index is no trivial task, pick the right index and you might be done in an instant, pick the wrong one and you might have to stay at the library overnight.&lt;/p&gt;

&lt;p&gt;Just like you have people that specialize in finding the perfect wine to go with a meal, the task of finding the right index for your query is best left to &lt;a href="https://en.wikipedia.org/wiki/Query_optimization"&gt;query planners&lt;/a&gt; (sometimes called &lt;code&gt;query optimizers&lt;/code&gt;). You can think of these as kind of query &lt;a href="https://en.wikipedia.org/wiki/Sommelier"&gt;sommeliers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the process of choosing an index you just learned an important nugget of wisdom:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;index efficiency depends on many things, including not only the question you are trying to answer, but the data that was indexed and the index stats.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#all-over-the-place"&gt;
  &lt;/a&gt;
  All over the place
&lt;/h2&gt;

&lt;p&gt;So you approach the catalog titled "books by topic", open the drawer for "b" and rummage through the cards until you find a dusty old card labeled "broccoli". The future's looking bright, you'll be outta here in no time you think.&lt;/p&gt;

&lt;p&gt;Unfortunately you look down at the card and to your dismay, there are 100 book locations listed in the card, and even worse, these locations are all over the place, some in the upper floors, others in the basement, etc.&lt;/p&gt;

&lt;p&gt;Apparently books in the library are not physically ordered by the type of veggie they discuss, go figure.&lt;/p&gt;

&lt;p&gt;The physical order of books is often called the &lt;a href="https://en.wikipedia.org/wiki/Database_index#Clustered"&gt;cluster index&lt;/a&gt; and a popular one for books would be "alphabetical by author". An alternative would be "just put it in the next empty shelf", something like ordered by purchase date.&lt;/p&gt;

&lt;p&gt;Anyway back to your current predicament, you can foresee lots of stairs and walking around in the library. You'll need to go check those 100 locations, make a note of the publication year, then find the earliest five.&lt;/p&gt;

&lt;p&gt;You're not looking forward to it, if only there was a way for you to avoid those trips up and down the library...&lt;/p&gt;

&lt;p&gt;Then suddenly two ideas pop into your head.&lt;/p&gt;

&lt;p&gt;The first one: what if you take this list of 100 locations and use the "books by publication year" index to find the first five there, then you'll only need to do five trips around the library.&lt;/p&gt;

&lt;p&gt;Like any query planning activity, the efficiency of this strategy depends on many factors. If the broccoli card had only, say 6 entries, then probably doing six trips around the library would be faster than rummaging through the publication index (that contains many &lt;em&gt;many&lt;/em&gt; books that are &lt;em&gt;not about broccoli&lt;/em&gt; for some reason).&lt;/p&gt;

&lt;p&gt;On the other hand, if the library was so big that you needed to take a train from one room to the other, then whatever you can do to avoid fetching books would be the right call.&lt;/p&gt;

&lt;p&gt;Given the complexity of this type of decision, some query planners might not even bother with trying to consider &lt;a href="https://www.postgresql.org/docs/current/indexes-bitmap-scans.html"&gt;index intersection&lt;/a&gt; strategies like this one and just go fetch the 100 books.&lt;/p&gt;

&lt;p&gt;But even if we were to consider this strategy, the potential inefficiencies are plain to see.&lt;/p&gt;

&lt;p&gt;The second idea seems more promising...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-compound-solution-to-a-compound-problem"&gt;
  &lt;/a&gt;
  A compound solution to a compound problem
&lt;/h2&gt;

&lt;p&gt;Wouldn't it be nice if the people that created these two indexes had created one containing both publication and topic information at the same time? Some sort of &lt;a href="https://docs.mongodb.com/manual/core/index-compound/"&gt;compound index&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;You start pondering about the endless possibilities and quickly realize there are two paths forward: we could either (a) add topic information to the publication index or (b) add publication information to the topic index.&lt;/p&gt;

&lt;p&gt;What a mouthful, let's see that in action!&lt;/p&gt;

&lt;p&gt;A card in the publication index looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1985
====
  - 1
  - 2
  - 5
  - 6
  - 10
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we add topic information to this index (that would be option &lt;code&gt;a&lt;/code&gt; above), we'd get something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;1985
====
- broccoli
  - 1
  - 5
  - 10
- cars
  - 2
  - 6
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are sorting all the books in the card by topic and adding topic titles, so the card for publication year "1985" under the title "broccoli" would list locations 1, 5, 10.&lt;/p&gt;

&lt;p&gt;We could do the same for the topic index. Right now cards in that index look like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;broccoli
========
- 1
- 5
- 10
- 234
- 567
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To add publication information to this index (that would be option &lt;code&gt;b&lt;/code&gt; above), we'd get something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;broccoli
========
- 1985
  - 1
  - 5
  - 10
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the task at hand (b) looks like the most promising solution, but knowing what you know about strange book requests, surely there are other questions that are best answered by an (a) type of index.&lt;/p&gt;

&lt;p&gt;Thanks to this compound index of "books by topic and publication year (in that order)" you can just pick the five first locations and go fetch those books. A huge improvement!&lt;/p&gt;

&lt;p&gt;You take this time to admire the craft of these ancient index makers. When making compound indexes the order in which indexes are combined is &lt;em&gt;very&lt;/em&gt; significant.&lt;/p&gt;

&lt;p&gt;Just by looking at (a) and (b) you can tell the difference.&lt;/p&gt;

&lt;p&gt;You can almost see the emerging pattern here:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;when building compound indexes, put filter fields first (the ones over which you specify conditions) and sorting fields later (the ones you'll order by).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#not-the-wrong-princess-again"&gt;
  &lt;/a&gt;
  Not the wrong princess, again!
&lt;/h2&gt;

&lt;p&gt;“Five books, five trips, things are looking pretty good” you think, putting on a smug face and nodding to yourself like a psycho.&lt;/p&gt;

&lt;p&gt;This is a huge milestone because, to be honest, all prior approaches had that frustrating feeling of climbing two flights of stairs to find a book only to realize it wasn’t the book you wanted.&lt;/p&gt;

&lt;p&gt;You felt a bit like an Italian descent plumber constantly trying to save a princess from some kind of dragon thing only to realize you saved the &lt;em&gt;wrong&lt;/em&gt; princess, again.&lt;/p&gt;

&lt;p&gt;So, happy with this huge efficiency improvement, you go fetch the first book, write the title down and just before leaving for the second one you glance at the shelves and your heart sinks.&lt;/p&gt;

&lt;p&gt;Wouldn’t it be nice if all the books about broccoli were on the same shelf? All that broccoli knowledge neatly &lt;em&gt;clustered&lt;/em&gt; together. One trip surely beats five. How hard would it be to convince the local librarians to change the way they sort books on the shelves? Pretty hard, probably.&lt;/p&gt;

&lt;p&gt;This is exhausting, so you decide to take a break...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-coffee-interlude-at-the-local-bookshop"&gt;
  &lt;/a&gt;
  A coffee interlude at the local bookshop
&lt;/h2&gt;

&lt;p&gt;You sit and nurse a hot coffee while pondering about why every time you propose changing the cluster index to a librarian they go red with anger and blue with sadness. There must be a reason.&lt;/p&gt;

&lt;p&gt;(right about this time, I’m at home chopping onions and wondering how could you possibly have a decent &lt;a href="https://en.wikipedia.org/wiki/Network_delay"&gt;latency&lt;/a&gt; with all this philosophical pondering and meandering)&lt;/p&gt;

&lt;p&gt;Before coming up with an explanation you think of an alternative approach: let’s talk about bookshops.&lt;/p&gt;

&lt;p&gt;Bookshops are ancient brick and mortar places where you can go to buy books. Most bookshops organize books by topic, and within each topic, alphabetically by author. Pretty close to what we need.&lt;/p&gt;

&lt;p&gt;So you wonder why do bookshop people subject themselves to this book sorting torture that brings librarians to tears?&lt;/p&gt;

&lt;p&gt;Of the top of your mind, one explanation is that bookshops aim to answer a very limited number of questions, namely “where’s this book?”, “where are all the books by this author?”, etc. And bookshops want to make it easier for people to find those books by walking around the store without any help. Also, bookstores usually have much fewer books than libraries.&lt;/p&gt;

&lt;p&gt;Explanation aside, what would it take to sort books that way? Well, you should probably ask a bookstore clerk next time you visit one. In the meantime, clearly we need to deal with overflow. When an author publishes a new book and we don’t have enough space to place it on the shelf, we need to shift everything to the right.&lt;/p&gt;

&lt;p&gt;If we were to do this in the library, we’d also need to update every card in every index because the location for this book changed to the next shelf. This feels pretty annoying and requires us to be able to answer a meta question: where are all the index references to this book?&lt;/p&gt;

&lt;p&gt;Your brain starts to hurt, so you decide to park that thought for later.&lt;/p&gt;

&lt;p&gt;Deep down you keep wondering about how convenient it would be to cluster books by topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-asymptote-of-awesome"&gt;
  &lt;/a&gt;
  The Asymptote of Awesome
&lt;/h2&gt;

&lt;p&gt;Back at the library you decide to recap. So far you did a single index lookup in the "books by topic and publication year (in that order)". You got 5 locations, but because of your convincing powers, the library now clusters by this index, so those 5 locations are actually consecutive, so you really need a single trip through the library.&lt;/p&gt;

&lt;p&gt;You started this journey by looking at every single book in the library, then you narrowed the search down to all 100 books about broccoli. From there to just the first five broccoli books. And, in the ultimate optimization, a single lookup for five consecutive books!&lt;/p&gt;

&lt;p&gt;You feel accomplished, you ascended the Peak of Efficiency, you must have reached the Asymptote of Awesome.&lt;/p&gt;

&lt;p&gt;(you quickly take out a piece of paper and scribble down “Asymptote of Awesome” in case you decide to start a rock band in the future)&lt;/p&gt;

&lt;p&gt;...unless…&lt;/p&gt;

&lt;p&gt;One trip around the library is much better than a hundred, but you know what’s better than one trip around the library? &lt;/p&gt;

&lt;p&gt;You’re right: &lt;em&gt;no&lt;/em&gt; trips around the library!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#is-there-such-a-thing-as-being-too-lazy"&gt;
  &lt;/a&gt;
  Is there such a thing as being &lt;em&gt;too&lt;/em&gt; lazy?
&lt;/h2&gt;

&lt;p&gt;What if we could &lt;em&gt;&lt;a href="https://www.postgresql.org/docs/current/sql-createindex.html"&gt;include&lt;/a&gt;&lt;/em&gt; the book titles in the topic index. Maybe scribble the title right next to the location? Something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;broccoli
========
- 1985
  - [location 1]: Broccoli in the flux capacitor
  - [location 5]: Green veggies of the future, a look at 2015 agriculture
  - [location 10]: Little edible trees
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this new expanded index, you can now answer the question directly from the index. No trips, no walking around the library at all.&lt;/p&gt;

&lt;p&gt;You realize there is something deeply meaningful in this: some queries can be answered directly from an index. These queries are known as &lt;a href="https://docs.mongodb.com/manual/core/query-optimization/#covered-query"&gt;covered queries&lt;/a&gt; (because an index fully covers the query without having to go fetch the book).&lt;/p&gt;

&lt;p&gt;Covered queries are the ultimate query, the holy grail of laziness, and therefore of performance.&lt;/p&gt;

&lt;p&gt;You can hear a manic evil laughter suddenly bursting from your own mouth. “Every query should be a covered query, every query should have its own index, in fact let's index every property, what we need is more indexes, more catalogs, more cardboard…”&lt;/p&gt;

&lt;p&gt;You pick up a piece of paper and start trying to solve the &lt;a href="https://en.wikipedia.org/wiki/Travelling_salesman_problem"&gt;traveling salesman problem&lt;/a&gt; to optimize hitting every stationary in town so that you can score precious cardboard to start indexing ASAP, and then it dawns on you: somebody must have thought about this before, how come librarians are not doing this already?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-publishers-worst-nightmare"&gt;
  &lt;/a&gt;
  A publisher's worst nightmare
&lt;/h2&gt;

&lt;p&gt;Books are mostly immutable. Once published they stay published as is, they don’t really change much. But what if they did? What would happen if books kept changing? What would that mean to the humble librarian?&lt;/p&gt;

&lt;p&gt;Clearly there are all sorts of wrong things that can happen. The easiest is when the thing that changes is not a part of any index, then you just take a permanent marker, find the book and change it.&lt;/p&gt;

&lt;p&gt;But what if the property that changed was indexed? There was a typ0 in the book and the publication year was wrong. We’d need to find the card for the publication index and fix it. If we had a compound index like "books by topic and publication year (in that order)" we’d need to find the card for the book topic, then move the book under the right publication year. The more indexes we have the more changes we’d need to make.&lt;/p&gt;

&lt;p&gt;Probably the worst type of change is the cluster index change. You suddenly recall your coffee break and how painful it was to shift every book to the right. Not to mention answering the question of: where are all the index references to this book?&lt;/p&gt;

&lt;p&gt;And, if we happen to be inserting a book at the beginning of the cluster index we might need to shift every single book in the library and update every single card of every single index.&lt;/p&gt;

&lt;p&gt;There’s also the problem of space. If we take this to the extreme, every index is a cluster index, every index includes every property in the book, so for every index you’d need a whole new library building.&lt;/p&gt;

&lt;p&gt;All of this is kind of depressing and, to be honest, you already have what you came for, it’s getting late so you better head back.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-return"&gt;
  &lt;/a&gt;
  The return
&lt;/h2&gt;

&lt;p&gt;So you are finally back, you hand me over the list with the five titles, expecting a hero’s welcome.&lt;/p&gt;

&lt;p&gt;Instead, I look at the list, shrug and say “just as I suspected, there are at least 5 books about broccoli”, and keep cooking.&lt;/p&gt;

&lt;p&gt;You start wondering why you subject yourself to friends like me.&lt;/p&gt;

&lt;p&gt;Upon careful examination you start thinking about what could I have done to avoid so much waste. So far we’ve been so focused on finding the right books that we never stopped to think about what we were using the books for.&lt;/p&gt;

&lt;p&gt;I asked for the title of the first five books about broccoli. What if I had asked “how many of the first five books about broccoli have a green cover?” or maybe “how many times is the word ‘broccoli’ mentioned in the first five books about broccoli?”&lt;/p&gt;

&lt;p&gt;All of these questions have something in common (a couple of things actually). First and foremost they are pretty weird. But much more interesting is the fact that all of them could be answered using the same five books!&lt;/p&gt;

&lt;p&gt;In truth there were two parts of my strange request. Find me a couple of books, and from those books I only want the titles.&lt;/p&gt;

&lt;p&gt;All queries have the same two parts: a criteria for selecting books (often called a &lt;code&gt;filter&lt;/code&gt;) and some instructions of what to do with those books once you find them (usually called a &lt;code&gt;projection&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;My original query had “get the first five books about broccoli” as the filter and “from those I want the title” as the projection.&lt;/p&gt;

&lt;p&gt;We’ve been focusing mostly on the filter so far, trying our best to avoid any kind of physical activity, but let’s talk about the projection for a moment.&lt;/p&gt;

&lt;p&gt;We’ll start by altering the filter to make matters much &lt;em&gt;much&lt;/em&gt; worse…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frenemies"&gt;
  &lt;/a&gt;
  Frenemies
&lt;/h2&gt;

&lt;p&gt;Let’s say that instead of the first five books about broccoli, I asked for the first thousand.&lt;/p&gt;

&lt;p&gt;If you had the right index that covers this query, you could get an answer very quickly and efficiently, without a single trip around the library.&lt;/p&gt;

&lt;p&gt;If, on the other hand, you needed to use a compound index, you’d still need to go fetch 1000 books. This is usually the most typical scenario given that a cluster index at this point is probably out of the question.&lt;/p&gt;

&lt;p&gt;That being said, you could easily fit 1000 book titles in a small pocket-sized notebook. What if I had asked for 1000 full books instead?&lt;/p&gt;

&lt;p&gt;So you diligently fetch and carry 1000 books to your car only to realize you cannot fit 1000 books in the trunk of a compact.&lt;/p&gt;

&lt;p&gt;You hire a truck, load it and drive it back to my house.&lt;/p&gt;

&lt;p&gt;Once there, you see me give the books a cursory glance, check the titles and throw the rest in the trash.&lt;/p&gt;

&lt;p&gt;At this point you scream bloody murder.&lt;/p&gt;

&lt;p&gt;And now we learned a new lesson, if you want to keep your friends, ask only for what you truly need. Don’t be lazy and ask for &lt;em&gt;everything&lt;/em&gt; just because it’s easier than to explain what you want.&lt;/p&gt;

&lt;p&gt;So with this final frustration out of the way, it’s time to wrap up with this party.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cue-nostalgic-music"&gt;
  &lt;/a&gt;
  Cue nostalgic music
&lt;/h2&gt;

&lt;p&gt;In the end the party was a big success. Whether so much broccoli wisdom had anything to do with it or not, only time will tell.&lt;/p&gt;

&lt;p&gt;Before everyone heads home, let’s recap what we’ve learned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Table scans ruin parties and friendships.&lt;/li&gt;
&lt;li&gt;Always use an index for your queries.&lt;/li&gt;
&lt;li&gt;You can check how good a particular index is for your query by comparing the number of books fetched with the number of books actually included in the result. You want these numbers to be as close as possible.&lt;/li&gt;
&lt;li&gt;Fancy people call indexes “indices”.&lt;/li&gt;
&lt;li&gt;When creating compound indexes, the order of the properties being indexed matters &lt;em&gt;a lot&lt;/em&gt;. You want “filter” properties first, “sorting” properties later.&lt;/li&gt;
&lt;li&gt;Sometimes you can answer queries directly from the index, these are covered queries. Having indexes that cover your quieres has a cost so try to balance coverage obsession with pragmatic index building. Only cover the most critical queries.&lt;/li&gt;
&lt;li&gt;If you want to check which indexes apply to a particular query, query planners are always very eager to &lt;a href="https://www.postgresql.org/docs/current/sql-explain.html"&gt;explain&lt;/a&gt; their train of thought.&lt;/li&gt;
&lt;li&gt;The physical ordering of books is the cluster index. Cluster indexes can be very efficient, but changes to the cluster index can be painful.&lt;/li&gt;
&lt;li&gt;Projections are very important, always ask exactly what you need.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And in the end you might be left wondering what was I cooking, well…&lt;/p&gt;

&lt;p&gt;...that’s a wrap.&lt;/p&gt;

</description>
      <category>database</category>
      <category>performance</category>
      <category>optimization</category>
      <category>broccoli</category>
    </item>
    <item>
      <title>15 Developer Tools to Make You Super Productive</title>
      <author>Prosper Otemuyiwa</author>
      <pubDate>Tue, 28 Sep 2021 19:12:17 +0000</pubDate>
      <link>https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a</link>
      <guid>https://dev.to/sourcegraph/15-developer-tools-to-make-you-super-productive-2g0a</guid>
      <description>&lt;p&gt;The best software developers arm themselves with superior knowledge of specific tools that get the job done.&lt;/p&gt;

&lt;p&gt;Pairing with experienced developers leaves you with many tips, tricks, shortcuts, and tools that they have access to and mastered to help them focus on a product’s business logic.&lt;/p&gt;

&lt;p&gt;Today, I’ll show you 15 developer tools that’ll improve your productivity immensely.&lt;/p&gt;

&lt;p&gt;Let’s go!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-cloudinary"&gt;
  &lt;/a&gt;
  1. Cloudinary
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cloudinary.com"&gt;Cloudinary&lt;/a&gt; is a full-stack media service that stores, transforms, optimizes, and delivers all your media assets with easy-to-use APIs and widgets.&lt;/p&gt;

&lt;p&gt;Cloudinary is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a feature/app that stores tons of images and videos.&lt;/li&gt;
&lt;li&gt;Build a UI that allows single and multiple uploads. Cloudinary provides a plug-and-play skinnable UI widget, so you &amp;amp; your team don’t need to build any UI.&lt;/li&gt;
&lt;li&gt;Make your app and website load faster. Cloudinary delivers media assets insanely quickly via their global CDN!&lt;/li&gt;
&lt;li&gt;Build a feature/app for video delivery and transformation like Instagram. Cloudinary provides several APIs to help with that.&lt;/li&gt;
&lt;li&gt;Build a backend service that crops, manipulates, transforms, reads text from images, extracts captions from videos using AI, compresses and optimizes media files.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cloudinary provides several &lt;a href="https://cloudinary.com/documentation/cloudinary_sdks"&gt;SDKs for different languages and frameworks&lt;/a&gt; to make integration a walk in the park!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-sourcegraph"&gt;
  &lt;/a&gt;
  2. Sourcegraph
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://sourcegraph.com"&gt;Sourcegraph&lt;/a&gt; is a software tool that allows you to search all of your code. It provides precise code intelligence and insights. With Sourcegraph, you search small, medium and enormous codebases like &lt;a href="https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/torvalds/linux%24+list_head&amp;amp;patternType=literal"&gt;Linux&lt;/a&gt;, &lt;a href="https://sourcegraph.com/github.com/kubernetes/kubernetes"&gt;Kubernetes&lt;/a&gt;, &lt;a href="https://sourcegraph.com/github.com/chromium/chromium"&gt;Chrome&lt;/a&gt;, etc.&lt;/p&gt;

&lt;p&gt;Sourcegraph is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search all of your &lt;a href="https://learn.sourcegraph.com/how-to-search-code-with-sourcegraph-using-literal-patterns"&gt;public and private code across several repositories&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Find all occurrences of code across your organization.&lt;/li&gt;
&lt;li&gt;Search for how other developers use specific API and code blocks across more than two million open source repositories on GitHub and Gitlab.&lt;/li&gt;
&lt;li&gt;Refactor codebase easily and in record time.&lt;/li&gt;
&lt;li&gt;Provide precise code intelligence for all of your code.&lt;/li&gt;
&lt;li&gt;Create real-time dashboards to track the progress of migrations, deprecations, or usage of anything that can be found with a Sourcegraph search.&lt;/li&gt;
&lt;li&gt;Automate large-scale code changes. You can find and modify code across several repositories with a single file—no need to make several PRs across several code repositories to make a simple change. &lt;a href="https://about.sourcegraph.com/batch-changes"&gt;Sourcegraph Batch changes&lt;/a&gt; can do that for you!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-insomnia"&gt;
  &lt;/a&gt;
  3. Insomnia
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://insomnia.rest"&gt;Insomnia&lt;/a&gt; is a software tool that enables you to test API endpoints quickly. &lt;/p&gt;

&lt;p&gt;Insomnia is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Test Rest, Soap, GraphQL and GRPC API endpoints while building.&lt;/li&gt;
&lt;li&gt;Generate API documentation for your codebase.&lt;/li&gt;
&lt;li&gt;Build API pipelines.&lt;/li&gt;
&lt;li&gt;Design APIs using OpenAPI.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-netlify"&gt;
  &lt;/a&gt;
  4. Netlify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt; is a service that builds and deploys your front-end code quickly. It provides a very efficient workflow for creating apps with many developers.&lt;/p&gt;

&lt;p&gt;Netlify is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy front-end code to the Internet with ease.
Build Jamstack apps. Netlify places a massive bet on Jamstack and provides tools and resources to build and develop Jamstack apps.&lt;/li&gt;
&lt;li&gt;Generate new unique and publicly available URLs on every pull request and commit for other developers and QA folks to test what you’re building on the fly.
Serve static assets with fast CDN.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#5-retool"&gt;
  &lt;/a&gt;
  5. Retool
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.netlify.com"&gt;Retool&lt;/a&gt; is a software tool that enables you to build internal tools without writing a line of code. &lt;/p&gt;

&lt;p&gt;Retool is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build a dashboard / UI internally to monitor and modify data. With Retool, you can connect to your database or any data source and use their drag-and-drop components to build your internal tools remarkably fast.&lt;/li&gt;
&lt;li&gt;Make non-developers have access to the database without setting up a database environment for them.&lt;/li&gt;
&lt;li&gt;Provide customer support with tools to debug customer problems without building a new set of tools for them.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#6-laravel-forge"&gt;
  &lt;/a&gt;
  6. Laravel Forge
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://forge.laravel.com"&gt;Laravel Forge&lt;/a&gt; is a software service that eliminates the headache of building, managing, fine-tuning, deploying and upgrading servers for PHP applications.&lt;/p&gt;

&lt;p&gt;Laravel Forge is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be responsible for your servers with minimal or no knowledge of DevOps.&lt;/li&gt;
&lt;li&gt;Deploy and manage Laravel, WordPress, Statamic, PHP, and Database server instances.&lt;/li&gt;
&lt;li&gt;Focus on building applications without the additional headache of managing queue workers and scaling server instances.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#7-aws-amplify"&gt;
  &lt;/a&gt;
  7. AWS Amplify
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/amplify"&gt;AWS Amplify&lt;/a&gt; is a set of tools and services that front-end, web and mobile developers can use together or individually to build scalable full-stack applications powered by AWS.&lt;/p&gt;

&lt;p&gt;AWS Amplify is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy static web apps to the Internet in a few clicks.&lt;/li&gt;
&lt;li&gt;Provide non-developers with an admin UI to manage app content.&lt;/li&gt;
&lt;li&gt;Add authentication to your apps without building/managing/writing auth code from scratch.&lt;/li&gt;
&lt;li&gt;Provide a simple mechanism for managing user-generated content for your app in public, protected or private AWS storage buckets.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#8-auth0"&gt;
  &lt;/a&gt;
  8. Auth0
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://auth0.com"&gt;Auth0&lt;/a&gt; is a service best known for providing developers authentication, federated identity, single sign-on, and serverless features. In addition, they manage and maintain the most extensively used open-source authentication module, passport, in the global developer ecosystem!&lt;/p&gt;

&lt;p&gt;Auth0 is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add primary and social (Facebook, Google, LinkedIn, Dropbox) authentication to your web and mobile apps.&lt;/li&gt;
&lt;li&gt;Add Single Sign-On features to your suite of apps.&lt;/li&gt;
&lt;li&gt;Add Federated Identity to your apps.&lt;/li&gt;
&lt;li&gt;Build serverless services. Auth0 webtask enables you to develop serverless apps.&lt;/li&gt;
&lt;li&gt;Add Passwordless authentication to your apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#9-garden"&gt;
  &lt;/a&gt;
  9. Garden
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://garden.io"&gt;Garden&lt;/a&gt; is a cloud service that enables fast and efficient Kubernetes development. It’s a tool that simplifies and manages the development of your Kubernetes instances while building distributed applications.&lt;/p&gt;

&lt;p&gt;Garden is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don’t want to deal with managing and developing Kubernetes instances yourself.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#10-bitrise"&gt;
  &lt;/a&gt;
  10. Bitrise
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.bitrise.io"&gt;Bitrise&lt;/a&gt; is a fast, flexible and scalable mobile CI/CD service that simplifies the development and deployment of all your mobile apps.&lt;/p&gt;

&lt;p&gt;Bitrise is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Need over the air deployment service to share your app updates quickly with users&lt;/li&gt;
&lt;li&gt;Run several test runners against mobile app code PRs automatically&lt;/li&gt;
&lt;li&gt;Build, deploy and release your code host (e.g. Github) branches automatically into executables for different platforms. E.g. With your hybrid apps such as Flutter and Ionic, Bitrise automatically builds the bundles for Android and iOs platforms.&lt;/li&gt;
&lt;li&gt;Need a service to handle all the DevOps for your mobile apps while focusing on code.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#11-vercel"&gt;
  &lt;/a&gt;
  11. Vercel
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://vercel.com"&gt;Vercel&lt;/a&gt; is a developer-focused service. As a result, it’s one of the best tools to deploy any front-end app in less than three clicks.&lt;/p&gt;

&lt;p&gt;Vercel is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Deploy your front-end codebase with one click. It allows you to import a repo from GitHub, Gitlab and Bitbucket and returns the deployed URL in record time.&lt;/li&gt;
&lt;li&gt;Get a preview URL for every change pushed to your code host.&lt;/li&gt;
&lt;li&gt;Get started with a battle-tested front-end framework and e-commerce templates.&lt;/li&gt;
&lt;li&gt;Ship production-ready, highly available fast websites with Next.js (Vercel authors and maintains this framework). Static assets are served through Vercel’s CDN automatically.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#12-easycron"&gt;
  &lt;/a&gt;
  12. EasyCron
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.easycron.com"&gt;Easycron&lt;/a&gt; is a service that runs all your cron jobs for you on the cloud. No hassles, easy setup!&lt;/p&gt;

&lt;p&gt;Easycron is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don’t want to go through the hassle of setting up crontabs and infrastructure on your servers for recurring jobs.&lt;/li&gt;
&lt;li&gt;You have a serverless function or API URL that needs to run recurrently. You can add it to EasyCron and set the recurring times via the UI. That’s it! If the jobs fail at any time, EasyCron sends notifications to you about the failure.&lt;/li&gt;
&lt;li&gt;You want to have the luxury of turning your jobs on and off easily and manually running them. EasyCron provides an easy UI to manage your cron jobs.&lt;/li&gt;
&lt;li&gt;You want to clone existing jobs. EasyCron handles that as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#13-wakatime"&gt;
  &lt;/a&gt;
  13. WakaTime
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://wakatime.com"&gt;WakaTime&lt;/a&gt; is a tool that automatically reports stats and metrics right from your code editor. In addition, it provides a dashboard with a breakdown of time spent working on tasks.&lt;/p&gt;

&lt;p&gt;WakaTime is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You want to measure the time you spend on coding tasks.&lt;/li&gt;
&lt;li&gt;You want to know the files and areas of a project or codebase you devote time to.&lt;/li&gt;
&lt;li&gt;You want to set coding goals.&lt;/li&gt;
&lt;li&gt;Email reports of coding stats.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Over &lt;a href="https://wakatime.com/integrations"&gt;50 open-source editor plugins&lt;/a&gt; are available for WakaTime.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-eversql"&gt;
  &lt;/a&gt;
  14. EverSQL
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.eversql.com"&gt;EverSQL&lt;/a&gt; is a service that predicts performance bottlenecks and automatically optimizes your SQL queries using AI.&lt;/p&gt;

&lt;p&gt;EverSQL is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You don’t want to hire a DBA.&lt;/li&gt;
&lt;li&gt;Need to improve the performance of your SQL queries.&lt;/li&gt;
&lt;li&gt;Regularly &lt;a href="https://www.eversql.com/sql-query-optimizer"&gt;submit SQL queries for optimization&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#15-ngrok"&gt;
  &lt;/a&gt;
  15. Ngrok
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt; is a tool that provides an instant, secure and shareable URL to your localhost server through any NAT or firewall.&lt;/p&gt;

&lt;p&gt;Ngrok is an excellent choice if you want to do the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Share a locally running project with co-workers.&lt;/li&gt;
&lt;li&gt;Testing any auth flow from sites such as Twitter that expect a valid HTTPS connection for the callback.&lt;/li&gt;
&lt;li&gt;Replay HTTP requests made to your URL for introspection.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#more-tools"&gt;
  &lt;/a&gt;
  More Tools?
&lt;/h2&gt;

&lt;p&gt;I'll like to know what services &amp;amp; software tools make you super productive as a software developer. &lt;/p&gt;

&lt;p&gt;Feel free to drop it in the comment section! &lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>programming</category>
      <category>codequality</category>
    </item>
    <item>
      <title>Beginners Guide to Software Engineering Part 1</title>
      <author>Kiran Iyer</author>
      <pubDate>Tue, 28 Sep 2021 18:53:27 +0000</pubDate>
      <link>https://dev.to/kiraniyerdev/beginners-guide-to-software-engineering-part-1-4b14</link>
      <guid>https://dev.to/kiraniyerdev/beginners-guide-to-software-engineering-part-1-4b14</guid>
      <description>&lt;p&gt;I am very excited to have the opportunity to write this guide to help beginners navigate their way through the tech industry. I applaud you for taking the initiative and making such a strong decision because it can be a long and difficult process. I myself started out in the same boat not long ago and it has been an interesting, challenging journey so far!&lt;/p&gt;

&lt;p&gt;Over the course of my studying, I've met many wonderful developers, mentors, and communities who have been really helpful, as well as a large number of friends from all over the world who are all on the same journey. I can't express my gratitude to them enough.&lt;/p&gt;


&lt;p&gt;&lt;a href="https://giphy.com/gifs/vh1-scared-famous-xT0xevozBTg7ChpL44"&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finding a new career that you enjoy can be difficult, whether you are new to the workforce or are in a job you dislike. Today's digital world has created a plethora of tech careers, making it difficult to choose which one is best for you. With so many career options available today, it can be a rather confusing and difficult process to choose the right one.&lt;/p&gt;

&lt;p&gt;While the upskilling process requires strong commitment and patience, the career rewards it provides are well worth the effort.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-software-engineering"&gt;
  &lt;/a&gt;
  What is Software Engineering?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zTV3ALbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.javatpoint.com/tutorial/software-engineering/images/software-engineering-introduction.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTV3ALbE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://static.javatpoint.com/tutorial/software-engineering/images/software-engineering-introduction.png" alt="software engineering image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Software engineering is the process of evaluating user needs and then designing, developing, and testing software to meet those requirements.&lt;/p&gt;

&lt;p&gt;In simple terms, Software is a program that executes some code to serve a computational purpose. It's a collection of these executable codes, different libraries, and a whole lot of documentation.&lt;/p&gt;

&lt;p&gt;Engineering is more about the development of such products, using well-defined methods.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-started-as-a-software-engineer"&gt;
  &lt;/a&gt;
  How to Get Started as a Software Engineer?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qAPONeP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ranvoo.com/wp-content/uploads/2018/09/how-to-remove-the-stains.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qAPONeP8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ranvoo.com/wp-content/uploads/2018/09/how-to-remove-the-stains.jpg" alt="how image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are a few things you should think about before embarking on your software engineer journey. The information provided here is intended to provide you with the fundamentals of getting started, as well as a simple guide providing you a direction on how to learn to become a software engineer.&lt;/p&gt;

&lt;p&gt;First and foremost, learn about the various software engineering disciplines such as Frontend, Backend, DevOps, and so on. Once you've done your homework and have a good understanding of how these departments operate and what is expected of them, look at the various technologies utilized, for example - HTML, CSS &amp;amp; JavaScript in the Frontend, and how to get there.&lt;/p&gt;

&lt;p&gt;The best approach to get started is to choose a discipline that you are passionate about. When people initially consider a profession in software engineering, they may be inclined to study everything and really fast. However, coming from personal experience, I can assure you that this is counterproductive. You must be aware of, and constantly remind yourself of, the fact that you are embarking on a lifetime of technological learning. It requires consistency, perseverance, and solid determination, suffice to say take it slow and know that everyone learns at their own pace.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Rome was not built in a day, but they worked on it every day&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-skills-do-you-need-to-succeed-as-a-software-engineer"&gt;
  &lt;/a&gt;
  What Skills Do You Need to Succeed as a Software Engineer?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1uH3TDwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://toxsl.com/blog/image/16/post-image_file-skills-required.png%3Fthumbnail%3D840" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1uH3TDwA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://toxsl.com/blog/image/16/post-image_file-skills-required.png%3Fthumbnail%3D840" alt="Software Engineering skills"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: I'm only giving an overview of the required skills, saving lengthy details for another day or article maybe 😉&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#coding"&gt;
  &lt;/a&gt;
  Coding
&lt;/h3&gt;

&lt;p&gt;A software engineer needs a lot of different skill sets in order to maximize the effectiveness of their work. Knowledgeable coding skills are an integral part of a software engineer's toolkit as coding is the backbone of any work that they do.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#problem-solving"&gt;
  &lt;/a&gt;
  Problem solving
&lt;/h3&gt;

&lt;p&gt;Using creativity and critical thinking to break complex problems down and finding solutions. Analyzing data to identify the scope of problems and isolate invalid data models. Software engineers with strong problem-solving abilities are well-positioned to advance in their careers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attention-to-detail"&gt;
  &lt;/a&gt;
  Attention to detail
&lt;/h3&gt;

&lt;p&gt;Coders must be able to concentrate on minute details for extended periods of time. Noticing patterns, memorizing commands, and identifying flaws can all help create a successful application. When programmers build something, they frequently document their process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#team-work"&gt;
  &lt;/a&gt;
  Team work
&lt;/h3&gt;

&lt;p&gt;When team members collaborate effectively to work towards a single goal—building a product that provides the best possible experience for end consumers—they can significantly increase their efficiency. As a result, time to market is shortened, coding and other development errors are avoided, and the team is more cohesive. In addition to having a passion for software programming, software engineers must also be able to work well in a team.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leadership"&gt;
  &lt;/a&gt;
  Leadership
&lt;/h3&gt;

&lt;p&gt;A good leadership skill set will help software engineers work themselves out of a tight spot when they have to deal with both customers and other departments. When it comes to getting a promotion, showing these leadership skills is essential. As you make your way up the ladder of success at work, you'll need to be able to delegate responsibilities and keep close tabs on budgets. This will become increasingly important as your projects evolve into more complex affairs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xjNjOLAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kingdomcallingblog.files.wordpress.com/2018/01/its-a-marathon-not-a-sprint.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xjNjOLAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://kingdomcallingblog.files.wordpress.com/2018/01/its-a-marathon-not-a-sprint.jpg" alt="Journey Quote Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we've covered the basics of what Software Engineering entails and what to expect, it's time to roll up your sleeves, fire up your computer, open your editor, and start writing code - Whatcha lookin at? That is to say, start writing code or maybe build an app by tomorrow 😂&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Look at you! You Just Got Got! 😆 I only wish it were that simple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's time to explore all possibilities in tech and see what really sparks your interest! Give yourself the time to process it and more importantly "Know Your Why", knowing your purpose helps you find your true passion, and the passion becomes an important driver for you to achieve something extraordinary, the passion will push you to reach your goals.&lt;/p&gt;

&lt;p&gt;Here's a link to &lt;a href="https://github.com/Memphis1983/developer-roadmap"&gt;software engineering roadmap&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the following parts of this series, we'll go over how to prepare for and plan your journey, as well as the challenges you'll face and how to overcome them while staying focused, healthy, and making progress.&lt;/p&gt;

&lt;p&gt;Stay tuned!&lt;br&gt;
&lt;/p&gt;
&lt;p&gt;&lt;a href="https://giphy.com/gifs/gadischwartz-nbc-news-gadi-schwartz-jaXDDTuKmeJvwI56kV"&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;via GIPHY&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>developer</category>
      <category>softwareengineering</category>
    </item>
    <item>
      <title>What is Use Strict? Explained</title>
      <author>Aravind Sanjeev</author>
      <pubDate>Tue, 28 Sep 2021 18:47:05 +0000</pubDate>
      <link>https://dev.to/aravsanj/what-is-use-strict-explained-3hc8</link>
      <guid>https://dev.to/aravsanj/what-is-use-strict-explained-3hc8</guid>
      <description>&lt;p&gt;&lt;a href="https://humaneer.org/blog/what-is-use-strict-explained"&gt;Read original&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;"use strict" is a directive that is used to enable strict mode in JavaScript. It's simply a string that is placed on top of our code. When the browser comes across the string, it runs the code below in strict mode. In this post, we will look at why strict mode exists and when we should use it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#strict-mode"&gt;
  &lt;/a&gt;
  Strict mode
&lt;/h2&gt;

&lt;p&gt;Strict mode in JavaScript was introducted in ECMAScript 5. Until then, JavaScript has evolved without any compatibility issues. Although that came with the added benefit of never breaking the code, it also means any imperfections had to be kept. So strict mode was introduced to make some breaking changes while allowing already existing code to work.&lt;/p&gt;

&lt;p&gt;JavaScript code will work as intended in normal (now dubbed "sloppy") mode. With strict mode, it will be more restrictive giving less margin for error. It will also increase compatibility for future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enabling-strict-mode"&gt;
  &lt;/a&gt;
  Enabling strict mode
&lt;/h2&gt;

&lt;p&gt;Strict mode can be enabled for the entire script or individual function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-whole-scripts"&gt;
  &lt;/a&gt;
  For whole scripts
&lt;/h3&gt;

&lt;p&gt;To enable strict mode for the whole script, we provide "use strict" on top.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The entire script now works in strict mode&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you're mixing strict mode code with non-script mode ones, you could run into some trouble. If the strict mode code is the parent, entire JavaScript will run in strict mode. If the non-strict mode code is the parent, strict mode will be rendered useless. It is not ideal to mix strict mode code with non-strict ones.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-individual-function"&gt;
  &lt;/a&gt;
  For individual function
&lt;/h3&gt;

&lt;p&gt;To use strict mode for an individual function, we put the same statement but inside function body.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;strictmode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="c1"&gt;// function definition&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ecmascript-2015"&gt;
  &lt;/a&gt;
  ECMAScript 2015
&lt;/h2&gt;

&lt;p&gt;ECMAScript 2015, more famously ES6 has introduced modules and classes. All codes related to classes are run in strict mode by default. In modules, anything exported using the &lt;code&gt;export&lt;/code&gt; keyword is in strict mode.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;strictmode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function definition&lt;/span&gt;
  &lt;span class="c1"&gt;// runs in strict mode&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;strictmode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Same applies for named exports.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;strictmode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// function definition&lt;/span&gt;
  &lt;span class="c1"&gt;// runs in strict mode&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-strict-mode"&gt;
  &lt;/a&gt;
  Why strict mode?
&lt;/h2&gt;

&lt;p&gt;As already mentioned, strict mode gives a more restrictive environment to developers. An example of this is declaring variables.&lt;/p&gt;

&lt;p&gt;While writing normally, we can simply assign a value without declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;randomVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, in strict mode this will throw an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;randomVariable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="c1"&gt;// throws a reference error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Hence, we must always declare the varibale with &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt; or &lt;code&gt;const&lt;/code&gt;. This makes it impossible to accidently create a global variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="c1"&gt;// works because already declared&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Strict mode will also throw an error when assigning value to non-writable globals like &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Strict mode also prohibits duplicate parameters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// throws an error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In strict mode, each parameters must be unique. These are few of the behavioral changes. You can read a more detailed account of changes in this mdn &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"&gt;article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-to-use-strict-mode"&gt;
  &lt;/a&gt;
  When to use strict mode?
&lt;/h2&gt;

&lt;p&gt;Ideally anytime you aren't having conflict with your existing code. Since strict mode is meant to keep your code tidy and future-proof, there is no reason to avoid it. However, you must do sufficient feature testing to make sure the browser has implemented it under strict mode. Strict mode is now a decade-old feature and is available in all major browsers&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
