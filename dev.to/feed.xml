<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Choosing a Message Broker: Kafka vs RabbitMQ vs AWS SQS/SNS</title>
      <author>Michael Haberman</author>
      <pubDate>Tue, 01 Jun 2021 15:05:10 +0000</pubDate>
      <link>https://dev.to/aspecto/choosing-a-message-broker-kafka-vs-rabbitmq-vs-aws-sqs-sns-20na</link>
      <guid>https://dev.to/aspecto/choosing-a-message-broker-kafka-vs-rabbitmq-vs-aws-sqs-sns-20na</guid>
      <description>&lt;p&gt;Microservice applications rely heavily on messaging and asynchronous communications to keep everything working smoothly. &lt;/p&gt;

&lt;p&gt;Choosing the right message broker is one of the first critical choices you must make when developing the services that need to communicate with each other. &lt;/p&gt;

&lt;p&gt;Making the “right” choice can be a battle of features and edge cases that can be challenging to differentiate between. &lt;/p&gt;

&lt;p&gt;In this article, I’ll help provide a bit of guiding light by providing an overview of a few of the more well-known message brokers – Kafka, RabbitMQ, and AWS SQS/SNS. &lt;/p&gt;

&lt;p&gt;I’ll explore the driving forces behind them, the general messaging model they follow and do my best to provide some guidance on selecting the broker that is right for you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apache-kafka"&gt;
  &lt;/a&gt;
  Apache Kafka
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://kafka.apache.org/"&gt;Kafka&lt;/a&gt; is an open-source message broker developed and maintained primarily by the &lt;a href="https://www.apache.org/foundation/"&gt;Apache Software Foundation&lt;/a&gt;, with the assistance of the open-source community.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Focus on streamable content, working with large data streams&lt;/li&gt;
&lt;li&gt;Message persistence and reprocessing capabilities are core features&lt;/li&gt;
&lt;li&gt;On-site hosting with third party options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Kafka provides optimized stream-based processing of events, with a publish/subscribe model driving the communications between consumers. &lt;/p&gt;

&lt;p&gt;These events can be subdivided into topics, allowing for greater organization of your distributed application’s communication patterns, and are partitioned onto multiple servers within a cluster, allowing for a resilient and highly performant message delivery system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-details-and-deployment"&gt;
  &lt;/a&gt;
  Technical Details and Deployment
&lt;/h3&gt;

&lt;p&gt;Apache &lt;a href="https://kafka.apache.org/documentation/streams/"&gt;provides SDKs&lt;/a&gt; in several different languages.&lt;/p&gt;

&lt;p&gt;Kafka is designed to be deployed on-site, within your own application’s architecture. This can be on a set of stand-alone servers, a virtual machine, or a Docker container.&lt;/p&gt;

&lt;p&gt;Multiple vendors offer Kafka hosting as a service, such as &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/kafka-hosting.html"&gt;AWS&lt;/a&gt;, &lt;a href="https://www.cloudkarafka.com/"&gt;CloudKarafka&lt;/a&gt;, and &lt;a href="https://aiven.io/kafka"&gt;Aiven&lt;/a&gt;, or in virtual machines.&lt;/p&gt;

&lt;p&gt;Below is some sample JS code for &lt;a href="https://kafka.js.org/docs/getting-started"&gt;getting started&lt;/a&gt; with Apache Kafka events:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { Kafka } = require('kafkajs')
const kafka = new Kafka({
 clientId: 'my-app',
 brokers: ['localhost:9092']
})

// this produces a message
async function produce() {
 const producer = kafka.producer()
 await producer.connect()
 await producer.send({
   topic: 'TOPIC_NAME',
   messages: [
     { key: 'key1', value: 'hello world' },
   ],
 })
}

async function consume() {
 const consumer = kafka.consumer({ groupId: 'my-group' })
 await consumer.connect()
 await consumer.subscribe({ topic: 'TOPIC_NAME' })
 await consumer.run({
   eachMessage: async ({ topic, partition, message }) =&amp;gt; {
     console.log({
       key: message.key.toString(),
       value: message.value.toString(),
       headers: message.headers,
     })
   },
 })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strengths-amp-weaknesses"&gt;
  &lt;/a&gt;
  Strengths &amp;amp; Weaknesses
&lt;/h3&gt;

&lt;p&gt;Kafka has a high focus on data stream throughput, something that shows in their &lt;a href="https://www.confluent.io/blog/kafka-fastest-messaging-system/"&gt;performance statistics&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This focus on processing streams of data results in a system with high throughput, allowing for complex processing of large data streams. &lt;/p&gt;

&lt;p&gt;Kafka’s routing capabilities for those streams of data are relatively limited when compared to other message brokers – a gap that is continually getting smaller as these products improve. &lt;/p&gt;

&lt;p&gt;To summarize, Kafka is a powerful solution that can provide robust and fault-tolerant high-performance message streaming, letting you confidently drive your application’s behavior.&lt;/p&gt;

&lt;p&gt;Depending on your bandwidth and resources, you can abstract away as much or as little of the hosting as you feel comfortable, making Kafka a solid choice that will scale with your traffic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rabbitmq"&gt;
  &lt;/a&gt;
  RabbitMQ
&lt;/h2&gt;

&lt;p&gt;Like Kafka, &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt; is another open-source message broker. Originally developed by Rabbit Technologies, the technology has through a series of acquisitions ended up under the ownership of VMWare.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Focus on messaging-based communication, with support for large data streams&lt;/li&gt;
&lt;li&gt;Complex routing capabilities provided as a core feature&lt;/li&gt;
&lt;li&gt;On-site hosting with third party options&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RabbitMQ uses the publish/subscribe model as well, sending message objects in their binary form to different named queues, which can be dynamically created and destroyed. &lt;/p&gt;

&lt;p&gt;RabbitMQ is designed to operate both in isolation and as part of a cluster, providing enough configurable power to drive any set of redundancy or data safety needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-details-and-deployment"&gt;
  &lt;/a&gt;
  Technical Details and Deployment
&lt;/h3&gt;

&lt;p&gt;RabbitMQ provides several &lt;a href="https://www.rabbitmq.com/devtools.html"&gt;client libraries&lt;/a&gt; in a wide variety of languages.&lt;/p&gt;

&lt;p&gt;It can be deployed on-site, on anything from a full server to a container, or on one of several cloud providers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.stackhero.io/en/services/RabbitMQ"&gt;Stackhero&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cloudamqp.com/"&gt;CloudAMQP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.compose.com/databases/rabbitmq"&gt;Compose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following sample code, written in Node.js using the AMQPLIB package, should provide a small sample of what it might be like to work with RabbitMQ:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const amqp = require('amqplib/callback_api');
amqp.connect('amqp://localhost', function(error0, connection) {
 if (error0) {
   throw error0;
 }
 connection.createChannel(function(error1, channel) {
   if (error1) {
     throw error1;
   }
   const queue = 'hello-queue';
   const msg = 'Hello world!';

   channel.assertQueue(queue, {
     durable: false
   });

   // Sending message to queue
   channel.sendToQueue(queue, Buffer.from(msg));
   console.log("Sent message", msg);

   // Consuming messages
   channel.consume(queue, function(msg) {
     console.log("Received message", msg.content.toString());
   }, { noAck: true });
 });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strengths-amp-weaknesses"&gt;
  &lt;/a&gt;
  Strengths &amp;amp; Weaknesses
&lt;/h3&gt;

&lt;p&gt;RabbitMQ has the power to handle workloads of nearly any size, and can effectively scale alongside your application as your user base grows.&lt;/p&gt;

&lt;p&gt;With a  focus on messaging-based delivery and complex routing scenarios, RabbitMQ is extremely adaptable to any application architecture. &lt;/p&gt;

&lt;p&gt;While originally there was no great support for data stream processing, and messages were generally only processed once without the capacity to reprocess a stream, both of these gaps have closed as RabbitMQ has continued to grow. &lt;/p&gt;

&lt;p&gt;With the ability to take ownership of the things you want and outsource the rest, RabbitMQ can fit into any appropriate role in your application’s infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-web-services-sqssns"&gt;
  &lt;/a&gt;
  Amazon Web Services SQS/SNS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;SNS&lt;/a&gt; and &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt; represent two different ways of looking at distributed messaging.&lt;/p&gt;

&lt;p&gt;SNS is highly focused on message delivery, offering a publish-subscribe model to quickly distribute a message to an array of clients (e.g., mobile devices, HTTPS endpoints, other AWS services).&lt;/p&gt;

&lt;p&gt;SQS, by comparison, is focused on the successful delivery and processing of messages by individual clients.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-features"&gt;
  &lt;/a&gt;
  Key Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Two products allowing for both broadcast messaging and pub/sub&lt;/li&gt;
&lt;li&gt;Quick setup and configuration using AWS&lt;/li&gt;
&lt;li&gt;No hosting available outside of AWS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While SNS will broadcast the same message to an array of recipients, SQS will distribute queue messages to single subscribers for processing.&lt;/p&gt;

&lt;p&gt;SNS takes a push-based approach to notifications, allowing for automated responses to notification activity, while SQS tends to focus more on a polling-style mechanism with some additional event-driven functionality supported.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#technical-details"&gt;
  &lt;/a&gt;
  Technical Details
&lt;/h3&gt;

&lt;p&gt;AWS provides a general SDK with access to most AWS services (SQS and SNS included) in &lt;a href="https://aws.amazon.com/tools/"&gt;several popular languages&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The below sample code uses the AWS SDK to demonstrate the process of working with SNS and SQS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// SNS - publish
const AWS = require('aws-sdk');
AWS.config.update({ region: 'REGION' });

const publishParams = {
 Message: 'MESSAGE_TEXT',
 TopicArn: 'TOPIC_ARN'
};

const publishTextPromise = new AWS.SNS({ apiVersion: '2010-03-31' }).publish(publishParams).promise();

publishTextPromise.then(
 function(data) {
   console.log(`Message ${publishParams.Message} sent to topic ${publishParams.TopicArn}`);
 }).catch(
 function(err) {
   console.error(err, err.stack);
 });

// SNS - Subscribe
const subscribeParams = {
 TopicArn : 'TOPIC_ARN'
}
const subscribePromise = new AWS.SNS({ apiVersion: '2010-03-31' }).listSubscriptionsByTopic(subscribeParams).promise();
subscribePromise.then(
 function(data) {
   console.log(data);
 }).catch(
 function(err) {
   console.error(err, err.stack);
 }
);

// SQS - send
const sqs = new AWS.SQS({ apiVersion: '2012-11-05' });
const queueURL = "SQS_QUEUE_URL";

const sendParams = {
 DelaySeconds: 10,
 MessageAttributes: {
   "Title": {
     DataType: "String",
     StringValue: "Some String"
   }
 },
 MessageBody: "Something!",
 QueueUrl: queueURL
};

sqs.sendMessage(sendParams, function(err, data) {
 if (err) {
   console.log("Error sending to SQS", err);
 } else {
   console.log("Success sending to SQS", data.MessageId);
 }
});

// SQS - receive
const receiveParams = {
 AttributeNames: [
   "SentTimestamp"
 ],
 MaxNumberOfMessages: 10,
 MessageAttributeNames: [
   "All"
 ],
 QueueUrl: queueURL,
 VisibilityTimeout: 20,
 WaitTimeSeconds: 0
};

sqs.receiveMessage(receiveParams, function(err, data) {
 if (err) {
   console.log("Receive Error", err);
 } else if (data.Messages) {
   console.log("Received messages:", JSON.stringify(data.Messages))
 }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#strengths-amp-weaknesses"&gt;
  &lt;/a&gt;
  Strengths &amp;amp; Weaknesses
&lt;/h3&gt;

&lt;p&gt;AWS SQS and SNS, together, can be used to build the backbone of a highly scalable, highly resilient distributed application.&lt;/p&gt;

&lt;p&gt;With ties into many other AWS services (such as AWS Lambda), these two tools can help you easily grow your application’s communications, while providing you with all the tools you need to manage the underlying complexities of the service interactions. &lt;/p&gt;

&lt;p&gt;If your web application is already running on AWS, set-up time is effectively zero, with much less complexity than many of the other systems. This does potentially come at the expense of a larger AWS bill as the number of messages grows. &lt;/p&gt;

&lt;p&gt;While Kafka and RabbitMQ don’t provide a default message size limit, AWS provides some limits around SQS and SNS messages – converting the messages into S3 objects after they reach a certain size.&lt;/p&gt;

&lt;p&gt;We published a &lt;a href="https://www.aspecto.io/blog/how-to-send-large-sqs-sns-messages-with-node-js/"&gt;detailed article on how you can overcome this size limit&lt;/a&gt; – I highly recommend browsing it to get a feel for how SQS in particular manages large messages.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;[You can find our SQS/SNS Producer/Consumer Library inside. It provides an ability to pass payloads through s3]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;SQS and SNS being cloud-first do add the additional complication of being vendor-locked to a specific service, whereas other message brokers resolve this by providing local installation and maintenance capabilities.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choosing-the-right-message-broker"&gt;
  &lt;/a&gt;
  Choosing The Right Message Broker
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6s4uJvtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5osbyu9grpfnvcy9psr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6s4uJvtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5osbyu9grpfnvcy9psr.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generally speaking, there are two considerations you should be thinking about when choosing a broker:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consideration-1-the-type-of-messages-you-send"&gt;
  &lt;/a&gt;
  Consideration #1: The Type of Messages You Send
&lt;/h3&gt;

&lt;p&gt;The first step to choosing a message broker is determining what messages you’ll be sending, and what their general format will be. &lt;/p&gt;

&lt;p&gt;The characteristics of these messages will drive the questions that need to be asked about each platform’s offering, though most will be roughly equivalent in terms of feature set – meaning that at a general level, every solution listed above supports the functionality needed to serve as a message broker for a scalable distributed application. &lt;/p&gt;

&lt;p&gt;From a pure feature perspective, one solution is as good as another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consideration-2-your-daily-work-and-applications-infrastructure"&gt;
  &lt;/a&gt;
  Consideration #2: Your Daily Work and Applications’ Infrastructure
&lt;/h3&gt;

&lt;p&gt;This is where secondary considerations come into play. Think about your day-to-day work and systems and ask yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you building an application exclusively in AWS? Maybe SQS and SNS make the most sense for establishing your inter-service communication&lt;/li&gt;
&lt;li&gt;Are you more interested in writing your application than maintaining the piped data between its components? Then a third-party hosted solution might be the best option for allowing you to focus on your strengths while growing your codebase&lt;/li&gt;
&lt;li&gt;Are you highly focused on speed of delivery and minimal latency? Then Kinesis might be right up your alley (we’ll go over Kinesis on another article, so stay tuned), while an application more focused on verified delivery and redundancy might choose a different technology.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The requirements of your application’s infrastructure and behavioral patterns will drive the choice at this level.&lt;/p&gt;

&lt;p&gt;With the above taken into the account, and with the caveat that it is hard – and somewhat unfair – to reduce these large tech products down to a couple of lines of recommendations, &lt;strong&gt;here are some guidelines on choosing the right message broker:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you care about message retention and being able to easily re-process data, Kafka is likely your best option&lt;/li&gt;
&lt;li&gt;If you are more concerned with being able to maintain and implement a complex set of routing rules, RabbitMQ is likely your best choice&lt;/li&gt;
&lt;li&gt;If you’re a small startup looking to get up and running quickly, with minimal overhead, AWS SQS/SNS is a great option given its quick setup and cost structure&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-endtoend-visibility-into-a-message-journey"&gt;
  &lt;/a&gt;
  Getting End-to-end Visibility Into a Message Journey
&lt;/h2&gt;

&lt;p&gt;One element you’ll want to evaluate is how to best maintain the final product. Once your application is sending messages, how do we track things down when they go wrong? &lt;/p&gt;

&lt;p&gt;&lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; is a set of SDKs and tools that can be used to set up observability for your distributed application, providing you the means to troubleshoot the distributed messaging driving your application when things go wrong.&lt;/p&gt;

&lt;p&gt;Here’s a quick &lt;a href="https://www.aspecto.io/blog/how-to-achieve-end-to-end-microservices-visibility-in-asyn-messaging-with-opentelemetry/"&gt;step-by-step guide on implementing OpenTelemetry in your distributed applications&lt;/a&gt;, allowing you to achieve end-to-end visibility into a message journey. The guide demonstrates how to do so with Kafka as the message broker.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;[PS: grab your OpenTelemetry Kafkajs Instrumentation for Node.js inside.]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you’re building an application that is “distributed” in any way, odds are you’ll need to handle asynchronous communications between components of your application at some point. &lt;/p&gt;

&lt;p&gt;Messages – and the brokers that deliver them – will play a critical role in the infrastructure driving your application. &lt;/p&gt;

&lt;p&gt;The above summary is by no means exhaustive – I would probably need another thousand words just to make a solid start at capturing the complete message broker landscape – but should hopefully provide some quality information that you can use when making your decision. &lt;/p&gt;

&lt;p&gt;The key is to fully understand the requirements for your application, and how those requirements fit into the capabilities of the message brokers you are evaluating.&lt;/p&gt;

&lt;p&gt;There is ultimately no “wrong” answer to which message broker you choose, but hopefully, the above information helps point you in the right direction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;About Aspecto

Aspecto is an OpenTelemetry-based troubleshooting platform 
that helps developers prevent distributed application 
issues from their local dev environment, 
and across the entire development cycle.

You can think of it as the 
Chrome DevTools for your distributed applications.

Aspecto is used for detecting and 
troubleshooting microservices-based distributed systems, 
and preventing software failures before deployment.

Visit us at Aspecto.io
for more microservices tutorials
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>tutorial</category>
      <category>webdev</category>
      <category>aws</category>
      <category>microservices</category>
    </item>
    <item>
      <title>Will Self-Supervised Visual Transformers Replace Pre-Trained CNNs?</title>
      <author>Hugo</author>
      <pubDate>Tue, 01 Jun 2021 14:58:40 +0000</pubDate>
      <link>https://dev.to/zumolabs/will-self-supervised-visual-transformers-replace-pre-trained-cnns-4j7o</link>
      <guid>https://dev.to/zumolabs/will-self-supervised-visual-transformers-replace-pre-trained-cnns-4j7o</guid>
      <description>&lt;p&gt;Pre-trained CNNs are still king when training models for computer vision use cases. However, the emerging popularity of Visual Transformers (ViTs), and subsequent consensus about their unsupervised learning capabilities, gives unexpected space for ViTs to usurp the throne.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pretrained-cnns"&gt;
  &lt;/a&gt;
  Pre-Trained CNNs
&lt;/h1&gt;

&lt;p&gt;Convolutional Neural Networks work by sliding a pattern (formally known as the kernel, but also referred to as a "feature map") across an image (Slide 1). This sliding strategy is effective because it acts as a natural form of translation invariance: once a CNN can recognize something in one part of the image, it will recognize it in any part of the image [1]. However, this approach leads to a kind of fragility: feature maps are often overfit to a particular texture or object size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--koHY4O-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rravd458nij591e86fz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--koHY4O-m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rravd458nij591e86fz.png" alt="Slide 1: CNNs and Feature Maps"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Building up feature maps requires a ton of data, and CNNs are usually pre-trained on a large generic dataset like COCO or ImageNet-the latter boasting over one million images and around 1,000 categories. Further, a pre-trained CNN can be fine-tuned to new tasks by cutting out the model head and retraining with a new, often much smaller, dataset (Slide 2).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zW8AZixI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8hgurjjqfh57dj73cp1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zW8AZixI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8hgurjjqfh57dj73cp1.png" alt="Slide 2: Pre-training and fine-tuning."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#transformers"&gt;
  &lt;/a&gt;
  Transformers
&lt;/h1&gt;

&lt;p&gt;Transformers have been popular in natural language processing (NLP) for quite some time. They work through a concept known as "self-attention," which pays certain input parts more attention than others [3]. In NLP, this allows for specific words within a sentence to be identified as more important. There are different types of attention and plenty of nuance for the experts to argue over, but the words "attention" and "focus" are good mental models of how these networks learn.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#selfsupervised-vit"&gt;
  &lt;/a&gt;
  Self-Supervised ViT
&lt;/h1&gt;

&lt;p&gt;Self-supervised training is a little different in that it does not require labels-you don't need to tell the model that the object in an image belongs to the category "cat," for example. Instead, a self-supervised training technique might involve cropping an image, feeding it through multiple networks, and then getting them all to agree on which features in the image are essential (Slide 3). This type of learning technique, called DINO [3], successfully trained visual transformers (transformers for visual tasks, e.g., images). The ViTs trained with DINO ended up surprisingly effective for classification tasks, reaching 80% top-1 accuracy on ImageNet. Inspecting the self-attention maps of these ViTs also shows that they can very precisely segment out objects in an image (Slide 4).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dnJIPpIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/on2pdhpm8xcj4ukft1b0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnJIPpIN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/on2pdhpm8xcj4ukft1b0.png" alt="Slide 3: Self-supervised training."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AxQ9zBAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39aros0k882lpnsndrzz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AxQ9zBAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39aros0k882lpnsndrzz.png" alt="Slide 4: Self-attention in ViT."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, the bold prediction: self-supervised ViTs will eventually replace pre-trained CNNs as the go-to feature encoders for computer vision tasks. There are still unanswered questions, such as whether ViTs will generalize outside the training distribution better than CNNs. But one thing is sure: not requiring labels during training will enable using much larger datasets. Consider the difference in capacity between ImageNet and a self-supervised ViT trained on the entire internet of images…&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Thanks for reading our latest paper exploration. If you love computer vision, check out zpy [4], our open-source synthetic data development toolkit. It's everything you need to generate and iterate on synthetic training data for computer vision. Your feedback, commits, and feature requests are invaluable as we continue to build a more robust set of tools for generating synthetic data. Meanwhile, if you could use support with a particularly tricky problem, please reach out.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h1&gt;

&lt;p&gt;[1] CS231n Convolutional Neural Networks for Visual Recognition - Convolutional Neural Networks (&lt;a href="https://cs231n.github.io/convolutional-networks/"&gt;https://cs231n.github.io/convolutional-networks/&lt;/a&gt;)&lt;br&gt;
[2] Transformer: A Novel Neural Network Architecture for Language Understanding (&lt;a href="https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html"&gt;https://ai.googleblog.com/2017/08/transformer-novel-neural-network.html&lt;/a&gt;)&lt;br&gt;
[3] Emerging Properties in Self-Supervised Vision Transformers (&lt;a href="https://arxiv.org/pdf/2104.14294.pdf"&gt;https://arxiv.org/pdf/2104.14294.pdf&lt;/a&gt; ).&lt;br&gt;
[4] zpy (github.com/ZumoLabs/zpy)&lt;/p&gt;

</description>
      <category>deeplearning</category>
      <category>datascience</category>
      <category>python</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>How to start competitive coding!</title>
      <author>Rishabh Dwivedi</author>
      <pubDate>Tue, 01 Jun 2021 14:54:38 +0000</pubDate>
      <link>https://dev.to/rishabh062/how-to-start-competitive-coding-ce4</link>
      <guid>https://dev.to/rishabh062/how-to-start-competitive-coding-ce4</guid>
      <description>&lt;h3&gt;
  &lt;a href="#competitive-programmingcp-is-a-mind-sport-usually-held-over-the-internet-or-a-local-network-involving-participants-trying-to-program-according-to-provided-specifications"&gt;
  &lt;/a&gt;
  Competitive programming(CP) is a mind sport usually held over the Internet or a local network, involving participants trying to program according to provided specifications.
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#basic-requirement-for-cp-is"&gt;
  &lt;/a&gt;
  Basic requirement for CP is.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Participation&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically CP demands regular participation on various contest which held over internet.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Learning&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are participation but not learning new concepts then it is of no use. You need to maintain both.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Patience&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most important thing you need to learn is patience while doing the problems. Some time you will not get AC or green tick for particular problem but must not loose hope. You need to explore it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#basic-steps-in-learning-competitive-programming"&gt;
  &lt;/a&gt;
  Basic steps in learning Competitive programming:
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Choose well known programming language.&lt;/strong&gt;&lt;br&gt;
Choosing a correct programming language is great concert here. Although you can do CP in any language but usually C++/C or JAVA is most preferred because of speed and time of execution which is great in this language. Python is slow as compared to C/C++ and JAVA, that's why very less number of programmers used to do Competitive Programming.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Choosing some platform for practising competitive programming.&lt;/strong&gt;&lt;br&gt;
There are many platform present where you can practice and take part in contest.&lt;br&gt;
Some of them are.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.codechef.com/"&gt;Codechef&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://codeforces.com/"&gt;Codeforces&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://leetcode.com/"&gt;Leetcode&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://practice.geeksforgeeks.org/"&gt;GeeksforGeeks&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.hackerrank.com/"&gt;Hackerrank&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Learn Data Structures and Algorithms.&lt;/strong&gt;&lt;br&gt;
Data Structures are something that helps you in making the program more efficient. Algorithms are something that use various data structures to implement the logic and solve the program.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Learn them from here.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.geeksforgeeks.org/data-structures/"&gt;GeeksforGeeks-DS&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.geeksforgeeks.org/fundamentals-of-algorithms/"&gt;GeeksforGeeks-Algo&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Last--&amp;gt; Practice practice Practice a lot.&lt;/strong&gt;
If you want to become excel on that you need to practice and keep learning from your mistake .&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#start-your-journey-as-soon-as-possible-and-enjoy-this-sports"&gt;
  &lt;/a&gt;
  Start your journey as soon as possible and enjoy this sports.
&lt;/h3&gt;

&lt;p&gt;Visit my &lt;em&gt;codechef&lt;/em&gt; profile--&amp;gt; &lt;a href="https://www.codechef.com/users/rishabh062"&gt;Rishabh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Follow me here.&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://twitter.com/Rishabh07147212"&gt;Twitter&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;a href="https://www.linkedin.com/in/rishabh-dwivedi-28737b1a0"&gt;Linkedln&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>watercooler</category>
      <category>discuss</category>
      <category>showdev</category>
    </item>
    <item>
      <title>TUTORIAL: How to create a modal in UI Builder</title>
      <author>Backendless</author>
      <pubDate>Tue, 01 Jun 2021 14:26:31 +0000</pubDate>
      <link>https://dev.to/backendless/tutorial-how-to-create-a-modal-in-ui-builder-5b97</link>
      <guid>https://dev.to/backendless/tutorial-how-to-create-a-modal-in-ui-builder-5b97</guid>
      <description>&lt;p&gt;A modal is a common UI element used to grab the user’s attention by overlaying the page. In this step-by-step tutorial, we will show you how to implement, style, and interact with modals in UI Builder.&lt;/p&gt;

&lt;p&gt;Also known as overlays or dialog windows, modals are an easy way to ensure your user receives information or takes an action you want them to take. In order to guarantee the user interacts with the modal, most modals prevent the user from interacting with the underlying page.&lt;/p&gt;

&lt;p&gt;While this can be effective in small doses, the modal UI element should be used in moderation as it tends to disrupt the user experience.&lt;/p&gt;

&lt;p&gt;Check out an example of the component &lt;a href="https://eu.backendlessappcontent.com/8AAA8E74-06F7-48FD-9154-1AA3227BFA24/D8E91033-BD89-40C0-9FD9-126973003E38/files/web/app/index.html?page=Modal"&gt;in this demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will take you through the process of implementing a modal in Backendless’ built-in UI Builder. To follow along, simply login or create a free Backendless account.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note from the author: The names for the classes and elements in this component are used for example. You can them to whatever you prefer.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modal-structure-in-ui-builder"&gt;
  &lt;/a&gt;
  Modal Structure In UI Builder
&lt;/h2&gt;

&lt;p&gt;Let’s start assembling the modal window by creating the component structure on the User interface tab.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--42ahJNp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17prc6wd2s0h27lcf2fu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--42ahJNp_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17prc6wd2s0h27lcf2fu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The general structure of the component is shown below. For clarity, element IDs are named the same as classes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PUP0bJUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l77si5v3n8fsd6vq1fmj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PUP0bJUk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l77si5v3n8fsd6vq1fmj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#descriptions"&gt;
  &lt;/a&gt;
  Descriptions
&lt;/h3&gt;

&lt;p&gt;*&lt;code&gt;modal__open&lt;/code&gt; – button for opening a modal window (can be any of your custom solutions)&lt;br&gt;
*&lt;code&gt;modal&lt;/code&gt; – root element of the modal (required)&lt;br&gt;
  *&lt;code&gt;modal__card&lt;/code&gt; – root block for your content; inside this element put what you need (required)&lt;br&gt;
    *&lt;code&gt;modal__close&lt;/code&gt; – button to close the modal window (you can do as you need)&lt;br&gt;
  *&lt;code&gt;modal__shadow&lt;/code&gt; – shading curtain behind the modal window, restricts access to other elements of the page (required)&lt;/p&gt;

&lt;p&gt;All elements of the component, except buttons, use the Block component.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZApOKOV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ufmyprfls74jouwy4lb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZApOKOV8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ufmyprfls74jouwy4lb.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the buttons, we will use the Button element but you can use whatever you want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ze9SdPCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6573x11j5zinb28vozu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ze9SdPCC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o6573x11j5zinb28vozu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When creating elements, immediately assign ID and Classes according to this structure:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_U5b2Ftv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf1ugo58sv0jqn5vwtia.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_U5b2Ftv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rf1ugo58sv0jqn5vwtia.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a result, you should get something similar to this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---sUArs39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nxnmxabe7tb892kvm33.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---sUArs39--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nxnmxabe7tb892kvm33.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you create the entire structure of the component, you need to reset all settings for the Block elements. To do this, you need to delete all the selected properties. Later, we will indicate the necessary ones through the styles. The Padding property is set to 0 and then reset in the same way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q8CNLR55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4fobw12izj8zys2253o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q8CNLR55--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l4fobw12izj8zys2253o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#styles"&gt;
  &lt;/a&gt;
  Styles
&lt;/h2&gt;

&lt;p&gt;To create styles, switch to the Theme tab. Inside the page, select the Editor tab and then Extensions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8UjyAuRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj8bhf0h3u5ollslzffu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8UjyAuRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gj8bhf0h3u5ollslzffu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we’ll create Extensions. You can change the names as you like.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lB7v0FYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0sg145s5mgn5jd2ovyw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lB7v0FYZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d0sg145s5mgn5jd2ovyw.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Extension &lt;code&gt;MxModal&lt;/code&gt; is a LESS-mixin in which the basic styles of the component are taken out for ease of multiple use. Edit only if you know what you are doing!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://backendless.com/how-to-add-customized-styles-to-your-app/"&gt;Learn more about CSS LESS in UI Themes.&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.mx-modal {
    display: none !important;
    position: fixed !important;
    top: 0 !important;
    bottom: 0 !important;
    left: 0 !important;
    right: 0 !important;
    z-index: 1000 !important;
    flex-direction: column !important;
    justify-content: center !important;
    align-items: center !important;
    width: 100% !important;
    height: 100% !important;
    padding: 0 15px !important;

    &amp;amp;.open {
        display: flex !important;
    }

    @media (min-width: 768px) {
        padding: 0 !important;
    }
}

.mx-modal__curtain {
    position: fixed !important;
    top: 0 !important;
    bottom: 0 !important;
    left: 0 !important;
    right: 0 !important;
    z-index: -1 !important;
    background-color: rgba(0, 0, 0, 0.7);
    width: 100% !important;
    height: 100% !important;
}
.mx-modal__card {
    width: 100% !important;

    @media (min-width: 768px) {
        width: 600px !important;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Extension &lt;code&gt;Modal&lt;/code&gt; contains the general styling of the component on the page according to your project. The most important thing is to import mixins; any other properties can be adjusted as you like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.modal__open {
    width: 200px !important;
}
.modal {
    .mx-modal();
}
.modal__card {
    .mx-modal__card();

    flex-direction: column !important;
    justify-content: flex-end !important;
    align-items: flex-end !important;
    background-color: #fff;
    height: 300px !important;
    border-radius: 5px;
    box-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.20), 
                0px 2px 2px 0px rgba(0, 0, 0, 0.14), 
                0px 1px 5px 0px rgba(0, 0, 0, 0.12);
}
.modal__close {
    width: 200px !important;
}
.modal__shadow {
    .mx-modal__curtain();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logic"&gt;
  &lt;/a&gt;
  Logic
&lt;/h2&gt;

&lt;p&gt;Let’s start adding &lt;a href="https://backendless.com/features/backendless-core/codeless"&gt;Codeless logic&lt;/a&gt; from the root Page element. To do this, we return to the User interface tab, select the Page element and click on the puzzle icon as in the screenshot.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpbm2ifX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1wc16unucwgr39k5cpz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qpbm2ifX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b1wc16unucwgr39k5cpz.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Logic tab that opens for the Page element, we hang the logic on the On Page Enter event as in the screenshot. This will create a global modal state variable &lt;code&gt;isOpenModal&lt;/code&gt; for the entire page. We set the value to &lt;code&gt;false&lt;/code&gt;, which in our logic will define a closed modal window.&lt;/p&gt;

&lt;p&gt;If you want to use several different modals, add a unique variable for each window.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5TGpS5vQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asdcr5skejb189bcp4ws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5TGpS5vQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asdcr5skejb189bcp4ws.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order not to switch between tabs to select the following items, we will use the navigator. To do this, unpin the Page element by clicking on the button icon.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yx1HxW-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1bx1vvsh67ljms0tdth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yx1HxW-9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1bx1vvsh67ljms0tdth.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we add logic for the rest of the elements.&lt;/p&gt;

&lt;p&gt;On the window open button, use the On Click Event. Set the &lt;code&gt;isOpenModal&lt;/code&gt; variable to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a4kEnDOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwg9972xo61mb1ukf7x9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a4kEnDOm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zwg9972xo61mb1ukf7x9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, add a handler for the On Click Event for the close button and shade curtain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VeGjI0zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiw1lflv05dydwvuhde.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VeGjI0zZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gqiw1lflv05dydwvuhde.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hGuUF_oP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bfokpz5k4nsv5d415us.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hGuUF_oP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0bfokpz5k4nsv5d415us.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, all that remains is to add logic to the element with the &lt;code&gt;modal&lt;/code&gt; class. For this, we use the Class List Logic event. Here, depending on the value of the &lt;code&gt;isOpenModal&lt;/code&gt; variable, the open class is added or removed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EKiw8-vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ef145r1lo0y33m1la0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKiw8-vc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i3ef145r1lo0y33m1la0.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s all there is to it! We hope that you found this useful and, as always, happy codeless coding!&lt;/p&gt;

</description>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The function(){of 'JS strings'}</title>
      <author>Al</author>
      <pubDate>Tue, 01 Jun 2021 14:23:00 +0000</pubDate>
      <link>https://dev.to/yugely/the-function-of-js-strings-1kpe</link>
      <guid>https://dev.to/yugely/the-function-of-js-strings-1kpe</guid>
      <description>&lt;p&gt;This post is going to go over dynamic function creation and it will take a general look at how JS looks at strings, and different ways they can be used.&lt;/p&gt;

&lt;p&gt;These methodologies should be avoided as they tend to deliver unpredictable results that often off little reasoning as to why the evaluated the way they did. There are also concerns around accidental invocations. Unless you do the due diligence to take it to task I wouldn't incorporate it. But, we've all been in the spot where we just need to make it work even if its a quick and dirty way of doing the deed. (technical debt.. cough ough..)&lt;/p&gt;

&lt;p&gt;I think this is a cool characteristic of the language and one I believe developers should be aware of, as it is an important facet in which the language itself operates. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example-take-a-moment-to-picture-how-this-is-going-to-run"&gt;
  &lt;/a&gt;
  Example: (take a moment to picture how this is going to run)
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
JS Regex - Vanilla bby
*/&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello, in a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;in time out :(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;out of timeout, in f&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comparison check b, before timeout call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; first comparison check b &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second comparison check b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first comparison check res&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;third comparison check b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we have is a function within a string, or a string concatenated with a function. When run we will check the type of the value, and of a value and do a strict comparison check as to what each variable is. This is going to be run through the v8 engine, which really shouldn’t matter (let me know if you have found different)&lt;/p&gt;

&lt;p&gt;Lets take a look now at what my output from the this code looks like:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nwwLxnxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e5pm2xvuwcrso175dnd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nwwLxnxj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6e5pm2xvuwcrso175dnd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did you expect that output? I did not. In fact for the most part I cannot explain the repetition either outside of the variable initializing itself for comparison checks.&lt;/p&gt;

&lt;p&gt;But I want you to pay attention to the fact that though the system saw it was a string, told me it was in fact a string, and did so with a strict comparison check multiple times: the &lt;em&gt;b&lt;/em&gt; variable was not a string as it carried out the routine embedded inside of it. &lt;/p&gt;

&lt;p&gt;What does this say? &lt;br&gt;
Well it says there is some sort of duality in the way JS views strings (I've often thought of it as one big regex engine). That JS saw it was a string, but still had the direction to carry out the embedded instructions instead of print out what the instruction would be. Cant strings in fact be functions? Yes, in face strings can indeed be evaluated at runtime as functions. The next few examples were pulled from answered questions as I believe there is some great discussions on the topic.&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#example-2"&gt;
  &lt;/a&gt;
  Example 2
&lt;/h1&gt;

&lt;p&gt;[&lt;a href="https://stackoverflow.com/questions/43726544/how-to-call-a-function-using-a-dynamic-name-in-js"&gt;https://stackoverflow.com/questions/43726544/how-to-call-a-function-using-a-dynamic-name-in-js&lt;/a&gt;]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//variables&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3213&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;da&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

&lt;span class="c1"&gt;//Create string representation of function&lt;/span&gt;
&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test0&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; + da + &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt; &lt;span class="c1"&gt;//this["test"+0]&lt;/span&gt;
&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test1&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; + ta + &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);};&lt;/span&gt; &lt;span class="c1"&gt;//this["test"+1]&lt;/span&gt;

&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;;});&lt;/span&gt;

&lt;span class="c1"&gt;// calling the function&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt; &lt;span class="c1"&gt;//calls test1&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]();&lt;/span&gt; &lt;span class="c1"&gt;//calls test0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is using an invocation to access the the two functions. This is a dynamic invocation which is a way a good amount of libraries are built (sans the dynamic way to invoke the function. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example-3"&gt;
  &lt;/a&gt;
  Example 3
&lt;/h1&gt;

&lt;p&gt;[&lt;a href="https://stackoverflow.com/questions/7650071/is-there-a-way-to-create-a-function-from-a-string-with-javascript"&gt;https://stackoverflow.com/questions/7650071/is-there-a-way-to-create-a-function-from-a-string-with-javascript&lt;/a&gt;]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// Implement it&lt;/span&gt;
&lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;function &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;() { alert('Foo'); };&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// Test it&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Next is TRUE&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is using the "eval()" function to evaluate the string as a function instead of printing it. instead of printing it. Outside of a whonky DB return value, there really isn't a whole lot to use this with.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example-4"&gt;
  &lt;/a&gt;
  Example 4
&lt;/h1&gt;

&lt;p&gt;[&lt;a href="https://stackoverflow.com/questions/20129236/creating-functions-dynamically-in-js"&gt;https://stackoverflow.com/questions/20129236/creating-functions-dynamically-in-js&lt;/a&gt;]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;return alert("hello, " + name + "!");&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;erick&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is constructing the body and contents of the function and using the built the &lt;em&gt;function&lt;/em&gt; feature to store a body that evaluates as a function and storing it in variable &lt;em&gt;f&lt;/em&gt;.&lt;br&gt;
I personally think this is a cleaner and more approachable way to do this task as it mitigates the concerns around accidental invocation. In the example, the &lt;em&gt;'name'&lt;/em&gt; param is the value being passed in for the function when called and the second param contains the contents of the function itself.&lt;/p&gt;

&lt;p&gt;String can be evaluated as functions in JS, a characteristic of the language that not many others share. While fun to toy with to see what spits out the console, I think it best not to incorporate it en masse, but to understand better how the HUGE ecosystem surrounding the language itself is used.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A beginners guide to infosec</title>
      <author>Cossack Labs</author>
      <pubDate>Tue, 01 Jun 2021 14:17:25 +0000</pubDate>
      <link>https://dev.to/cossacklabs/a-beginners-guide-to-infosec-3o22</link>
      <guid>https://dev.to/cossacklabs/a-beginners-guide-to-infosec-3o22</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;In this first-remote 2021, infosec career rollercoaster thrills and charms like it was never before. However, to move in this direction as a junior specialist, you need to gain some new skills and a brand new line of thought. &lt;a href="https://www.cossacklabs.com/"&gt;Cossack Labs’&lt;/a&gt; senior security engineers are sharing advice about this path.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These basic principles and rules will help you drive through your infosec career safe and sound right from the start. Ready, steady, go! 🚀&lt;/p&gt;




&lt;p&gt;Table of contents:&lt;br&gt;
❇️ &lt;a href="#hard-skills"&gt;Hard skills&lt;/a&gt;: 4️⃣ points to consider&lt;br&gt;
❇️ &lt;a href="#soft-skills"&gt;Soft skills&lt;/a&gt;: run smarter&lt;br&gt;
❇️ &lt;a href="#shortcuts"&gt;Shortcuts for career racers&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#hard-skills"&gt;
  &lt;/a&gt;
  📚 &lt;a&gt;Hard skills&lt;/a&gt; 📚
&lt;/h2&gt;

&lt;p&gt;Learning security can be as hard as doing it. “Eat the elephant one bite at a time, play the long game and move steadily and constantly”, they say. This universal principle works in infosec as well. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You need a lot of small steps and a plan.&lt;/strong&gt; Here are the elements of planning which can add brilliance to your infosec career to-do list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1️⃣ Understand how computers work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First things first: what distinguishes a good junior engineer from a bad one is knowing the basics.&lt;/p&gt;

&lt;p&gt;Start upgrading yourself in computer science: 101 courses on computers, OS, network technologies, Linux/Windows administering, and programming will do nicely. With advanced computer skills, you will move faster and smoothly into the next stage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you prefer books, get your copy of Security Engineering by Ross Anderson or read its chapters &lt;a href="https://www.cl.cam.ac.uk/~rja14/book.html"&gt;available online&lt;/a&gt; for free. This really huge book is both useful and entertaining, so why not let yourself get into a new profession with fun but not blood, sweat, and tears. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;2️⃣ Broaden the security horizon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Awareness is one of the main weak points of most entry-level specialists in information security.&lt;/p&gt;

&lt;p&gt;Tune in security vibes. Get an answer to a question “&lt;a href="https://dev.to/cossacklabs/what-do-appsec-and-fire-extinguishers-have-in-common-5efe"&gt;what do appsec and fire extinguishers have in common?&lt;/a&gt;”. Read through &lt;a href="https://owasp.org/www-project-top-ten/"&gt;OWASP Top Ten&lt;/a&gt;, &lt;a href="https://github.com/OWASP/ASVS"&gt;OWASP ASVS&lt;/a&gt;, &lt;a href="https://github.com/OWASP/owasp-masvs"&gt;OWASP MASVS&lt;/a&gt;, &lt;a href="https://owaspsamm.org/"&gt;OWASP SAMM&lt;/a&gt;. Have fun with tasks like &lt;a href="https://owasp.org/www-project-juice-shop/"&gt;OWASP juice shop&lt;/a&gt; and move on.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The effective and time-saving way of systemising the knowledge is to take entry-level courses with certification, like CompTIA Security+, ISC2 SSCP, GIAC Security essentials. They will help to get acquainted with the industry, its terms, notions, and concepts. &lt;br&gt;
Skills that you obtain at this stage will work for both if you get deeper in infosec or quit it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;3️⃣ Select your team&lt;/strong&gt; 🔴🔵&lt;/p&gt;

&lt;p&gt;At this point, it's high time to decide which team you are in. &lt;/p&gt;

&lt;p&gt;Do you want to attack weak spots in systems, application or infrastructure security? Alternatively, you can play for defence, analyze risks and threat models, and implement effective security measures.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Understanding in what proportion you are interested in a red/blue teaming is already a huge guideline for further development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;🔴 &lt;strong&gt;Red teamers&lt;/strong&gt; look for weaknesses and vulnerabilities, testing the security of applications, infrastructures and systems. The work of the red team is to "touch, twist and wobble until it breaks," with varying degrees of consistency.&lt;/p&gt;

&lt;p&gt;It’s easier becoming a decent red teamer, all other things being equal than becoming a good defender because the feedback loop from your work is an order of magnitude shorter—"it’s either worked or failed."&lt;/p&gt;

&lt;p&gt;In an offensive security specialist's journey, the Offensive Security Certified Professional (OSCP) course can be your first infosec mountaineering equipment in a collection.&lt;/p&gt;

&lt;p&gt;🔵 &lt;strong&gt;Blue teamers&lt;/strong&gt; analyze risks and threats, design and implement security measures. This work involves system thinking, the ability to represent complex processes at different levels of the technological stack, see the "big picture" and be able to dig into details.&lt;/p&gt;

&lt;p&gt;Note, that defence is a harder, longer, and more complicated process where you have to pay attention to lots of details and keep a broad view simultaneously. Occasionally, it will demand some red skills as well. To succeed on this path, you need to work hard, solve more tasks, and gain extensive experience in as many projects as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4️⃣ Look for an internship&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some specialities, like &lt;strong&gt;data security&lt;/strong&gt;, require a very specific knowledge set—like understanding cryptography, crypto attack and defences, and building crypto-based systems.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As in Cossack Labs we build software for data security, all our engineers understand crypto. Recently we started running a closed &lt;a href="https://dev.to/cossacklabs/backstage-cryptographic-r-d-internship-at-cossack-labs-24dg"&gt;crypto R&amp;amp;D internship&lt;/a&gt;🎓 program, and plan to make it public soon.&lt;/p&gt;

&lt;p&gt;Quite an obvious tip: check out our updates not to miss an opportunity!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At the moment, our first interns are going through intensive crypto studies seasoned with lots of Rust programming. They learn building and attacking crypto primitives, dealing with cryptographic libraries, studying cutting edge crypto, like zk-SNARKs, doing research and presenting their discoveries, and getting used to working in a team. Our cryptographers, software and security engineers support them during the whole program. &lt;/p&gt;

&lt;p&gt;For a beginner security engineer, an internship can be a skyrocket to a pro. We highly recommend searching for such an opportunity!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#soft-skills"&gt;
  &lt;/a&gt;
  👩‍💼 &lt;a&gt;Soft skills&lt;/a&gt; 👨‍💼
&lt;/h2&gt;

&lt;p&gt;Infosec is not all about tools, it’s about people. This discovery will lead you to study psychology and people's behaviour. You will find astonishing things about “them” and yourself as well.&lt;/p&gt;

&lt;p&gt;Soon, &lt;strong&gt;you might start feeling sad and annoyed about people, their risk management misfits and poor decision-making.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Get prepared one day to meet a strange infosec personality aspect: high criticism of others combined with protectiveness and “toxicity”. The more you learn, the more mistakes and flaws you will see in people close and far from you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Technically, this is your job. Predictably, later, this toxicity can fire back to you.&lt;/p&gt;

&lt;p&gt;Imagine this “Day by day you search for vulnerabilities and really find them, try to mitigate successfully or not, and have to address sudden security incidents as well. One day you win, another—not quite so.” This situation plays out over and over again and this is frustrating.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Apart from purely technical issues, it’s worth paying attention to your personal mental health and well-being. &lt;/p&gt;

&lt;p&gt;Run smarter, not harder. Sports, physical activities, enough rest and healthy sleep, contrary to expectations, can help you stay more productive in infosec. &lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#shortcuts-for-career-racers"&gt;
  &lt;/a&gt;
  💨 &lt;a&gt;Shortcuts for career racers &lt;/a&gt;💨
&lt;/h2&gt;

&lt;p&gt;Every long way can be a little shorter, eh? &lt;br&gt;
If it’s in your style, here are some tricks:&lt;/p&gt;

&lt;p&gt;❇️ &lt;strong&gt;Practice lab.&lt;/strong&gt; Either in the red or blue team, you need practice on a playground. From a $5 virtual server to a mini data centre in your basement—practice makes perfect.&lt;br&gt;
❇️ &lt;strong&gt;Credentials.&lt;/strong&gt; Don’t miss capture-the-flag contests and public playgrounds (for example, &lt;a href="https://www.hackthebox.eu/"&gt;HackTheBox&lt;/a&gt;, &lt;a href="https://www.root-me.org/?lang=en"&gt;Root Me&lt;/a&gt;, &lt;a href="https://cryptopals.com/"&gt;Cryptopals&lt;/a&gt;, &lt;a href="https://cryptohack.org/"&gt;CryptoHack&lt;/a&gt;). Some playgrounds have public scoreboards which might help you to get a job.&lt;br&gt;
❇️ &lt;strong&gt;Certificates.&lt;/strong&gt; Security certificates are a controversial topic as they don't represent the knowledge, but they might let your CV come through filters.&lt;br&gt;
❇️ &lt;strong&gt;Internship.&lt;/strong&gt; As we mentioned above, find an internship in a company that does things that excite you—and apply.&lt;br&gt;
❇️ &lt;strong&gt;Conferences, talks, and blogs.&lt;/strong&gt; Pandemic made taking part in major security events much easier. You can pick up the cherries and get info from the stable at &lt;a href="https://nonamecon.org/"&gt;NoNameCon&lt;/a&gt;, &lt;a href="https://www.defcon.org/"&gt;DefCon&lt;/a&gt;, &lt;a href="https://www.rsaconference.com/"&gt;RSA&lt;/a&gt;, &lt;a href="https://www.infoq.com/security/"&gt;security tracks at InfoQ&lt;/a&gt;. &lt;br&gt;
❇️ &lt;strong&gt;Podcasts:&lt;/strong&gt; &lt;a href="https://defensivesecurity.org/"&gt;Defensive Security&lt;/a&gt;, &lt;a href="https://risky.biz/netcasts/risky-business/"&gt;Risky Business&lt;/a&gt;, &lt;a href="https://securityweekly.com/"&gt;Security weekly&lt;/a&gt;. &lt;br&gt;
❇️ &lt;strong&gt;Follow infosec engineers:&lt;/strong&gt; &lt;a href="https://twitter.com/vixentael"&gt;@vixentael&lt;/a&gt;, &lt;a href="https://twitter.com/julepka"&gt;@julepka&lt;/a&gt;, &lt;a href="https://twitter.com/9gunpi"&gt;@9gunpi&lt;/a&gt;, and &lt;a href="https://twitter.com/cossacklabs"&gt;@CossackLabs&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Constant learning is a common thing in IT in general, and in infosec in particular. Here you are to agree with the ever-changing technology stack and life-long learning approach. &lt;/p&gt;

&lt;p&gt;So, get ready to run really fast to stay still. Continuous and often radical challenges in this industry is a rule and they demand to comply and grow with it.🕊️&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>security</category>
      <category>discuss</category>
    </item>
    <item>
      <title>Create A Joke Generator : API project </title>
      <author>IsteakShupto</author>
      <pubDate>Tue, 01 Jun 2021 14:16:07 +0000</pubDate>
      <link>https://dev.to/isteakshupto/create-a-joke-generator-api-project-3ca6</link>
      <guid>https://dev.to/isteakshupto/create-a-joke-generator-api-project-3ca6</guid>
      <description>&lt;p&gt;Github source code : &lt;a href="https://github.com/IsteakShupto/dadjoke-generator"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Live project link : &lt;a href="https://dadjoke-generator-project.netlify.app/"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Api link : &lt;a href="https://icanhazdadjoke.com/api"&gt;Click here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the html part,we will use a paragraph tag where we will generate our joke and a button which will generate the joke.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"IE=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Dadjoke Generator&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"shortcut icon"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./image/favicon.png"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"image/x-icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"./css/style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"jokebox"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;Dadjoke Generator &lt;span class="ni"&gt;&amp;amp;#128528;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"joke"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Get a joke&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--Javascript--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./js/script.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we will style our html.We will use box shadow to highlight our &lt;code&gt;.jokebox&lt;/code&gt; and &lt;code&gt;.btn&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url(https://fonts.googleapis.com/css?family=Karla:200,300,regular,500,600,700,800,200italic,300italic,italic,500italic,600italic,700italic,800italic)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--karla&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Karla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="m"&gt;#111827&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#536dfe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--karla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.jokebox&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.21&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#4B5563&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.6rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.21&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt; &lt;span class="m"&gt;7px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.25&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#536dfe&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--karla&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will call the api using async function.We will name the function &lt;code&gt;loadJoke()&lt;/code&gt;.We will use await fetch to get the data from the api.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href="https://icanhazdadjoke.com/api"&gt;documentation&lt;/a&gt; we need to use &lt;code&gt;headers&lt;/code&gt; interface to accept the &lt;code&gt;application/json&lt;/code&gt; data.&lt;/p&gt;

&lt;p&gt;Then after clicking the button we will simply insert the joke to the paragraph tag.&lt;/p&gt;

&lt;p&gt;To load a joke when the window loads we will use an event listener which will be attached to our window object named "DOMContentLoaded".We will simply pass the &lt;code&gt;loadJoke()&lt;/code&gt; there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;insertjoke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.joke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;loadJoke&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://icanhazdadjoke.com/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;Accept&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;joke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nx"&gt;insertjoke&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loadJoke&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOMContentLoaded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loadJoke&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>keywords</category>
    </item>
    <item>
      <title>Weekly Challenge 115</title>
      <author>Simon Green</author>
      <pubDate>Tue, 01 Jun 2021 14:13:16 +0000</pubDate>
      <link>https://dev.to/simongreennet/weekly-challenge-115-26c9</link>
      <guid>https://dev.to/simongreennet/weekly-challenge-115-26c9</guid>
      <description>&lt;p&gt;&lt;a href="https://perlweeklychallenge.org/blog/perl-weekly-challenge-115/"&gt;Challenge&lt;/a&gt;, &lt;a href="https://github.com/manwar/perlweeklychallenge-club/tree/master/challenge-115/sgreen"&gt;My solutions&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#task-1-string-chain"&gt;
  &lt;/a&gt;
  TASK #1 › String Chain
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given an array of strings.&lt;/p&gt;

&lt;p&gt;Write a script to find out if the given strings can be chained to form a circle. Print 1 if found otherwise 0.&lt;/p&gt;

&lt;p&gt;A string &lt;code&gt;$S&lt;/code&gt; can be put before another string &lt;code&gt;$T&lt;/code&gt; in circle if the last character of &lt;code&gt;$S&lt;/code&gt; is same as first character of &lt;code&gt;$T&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;I thought this was straight and even submitted a &lt;a href="https://github.com/manwar/perlweeklychallenge-club/pull/4174"&gt;pull request&lt;/a&gt; last night. My logic was to get a sorted order of the first letter and last letter of each word. If they matched, we had a solution. And it worked for the two examples. However, I realised a few minute later that it didn't cover the cases where we had two different circles (for example &lt;code&gt;ab bc ca ij jk ki&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;This had me thinking today (sorry boss!) about what the best way of finding a solution that didn't involve a recursive sub-routine. I failed.&lt;/p&gt;

&lt;p&gt;So I now have a solution that works, but I'm not overly happy with it, but I believe it works. It will be interesting to see how other Team PWC members tackle the task.&lt;/p&gt;

&lt;p&gt;I have a recursive subroutine &lt;code&gt;_reduce_list&lt;/code&gt; that takes two parameters, the words used and the words remaining. The first call puts the first word in the list in the used value. It doesn't really matter what word we used first, as we need to make a circle.&lt;/p&gt;

&lt;p&gt;For each call, I find possible words we can add to the list (where there first letter is the same as the last letter of the last word), and recursively call the subroutine. If there is no solution, I return 0. If we have found a possible solution, we need to do one final check that the first letter of the first word is the same as the last letter of the last word to complete the circle.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./ch-1.pl abc dea cd 
1

$ ./ch-1.pl ade cbd fgh
0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#task-2-largest-multiple"&gt;
  &lt;/a&gt;
  TASK #2 › Largest Multiple
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h2&gt;

&lt;p&gt;You are given a list of positive integers (0-9), single digit.&lt;/p&gt;

&lt;p&gt;Write a script to find the largest multiple of 2 that can be formed from the list.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#my-solution"&gt;
  &lt;/a&gt;
  My solution
&lt;/h2&gt;

&lt;p&gt;Hopefully this is as straight forward as I think it is. After checking all inputs are a single digit, I sort the numbers in decreasing order in an array called &lt;code&gt;@numbers&lt;/code&gt;. I then find the position (index) of the last even number. If it is not already in the last position, I move that digit to the end.&lt;/p&gt;

&lt;p&gt;I also display a message if no even digits can be found.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./ch-2.pl 1 0 2 6
6210

$ ./ch-2.pl 1 4 2 8
8412

$ ./ch-2.pl 4 1 7 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>perl</category>
      <category>perlweeklychallenge</category>
    </item>
    <item>
      <title>𝐖𝐚𝐧𝐭𝐞𝐝 𝐭𝐨 𝐰𝐨𝐫𝐤 𝐰𝐢𝐭𝐡 𝐭𝐡𝐞 𝐀𝐏𝐈𝐬 𝐢𝐧 𝐟𝐥𝐮𝐭𝐭𝐞𝐫?</title>
      <author>Balram Rathore</author>
      <pubDate>Tue, 01 Jun 2021 14:05:50 +0000</pubDate>
      <link>https://dev.to/devstack06/-1lea</link>
      <guid>https://dev.to/devstack06/-1lea</guid>
      <description>&lt;p&gt;This series can help you with the,&lt;br&gt;
📌📌 Getting the data through Rest API and using it on flutter&lt;br&gt;
📌📌 Model class Creation&lt;br&gt;
📌📌 Posting the data from the flutter app to the back end using Rest API.&lt;br&gt;
📌📌 It will help you handle all the types of JSON data like a single object, list object, nested objects, etc.&lt;/p&gt;

&lt;p&gt;Link of series: &lt;a href="https://youtube.com/playlist?list=PLtIU0BH0pkKpXE-1vC7NswofFPby1OYh-"&gt;https://youtube.com/playlist?list=PLtIU0BH0pkKpXE-1vC7NswofFPby1OYh-&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;find the repo link in the description and subscribe to the channel for more awesome videos.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YYZyLNM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u46ssmglxgkl37cygz3b.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YYZyLNM4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u46ssmglxgkl37cygz3b.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>restapi</category>
    </item>
    <item>
      <title>3 Tales of Tricky Statistics</title>
      <author>George</author>
      <pubDate>Tue, 01 Jun 2021 14:05:35 +0000</pubDate>
      <link>https://dev.to/primalskill/3-tales-of-tricky-statistics-3dgp</link>
      <guid>https://dev.to/primalskill/3-tales-of-tricky-statistics-3dgp</guid>
      <description>&lt;p&gt;Statistics can often be misleading, here's an example. Take the number of billionaires in ten countries:&lt;/p&gt;

&lt;p&gt;💰 United States - 585&lt;br&gt;
💰 China - 476&lt;br&gt;
💰 India - 131&lt;br&gt;
💰 Germany - 114&lt;br&gt;
💰 Russia - 98&lt;br&gt;
💰 Hong Kong - 67&lt;br&gt;
💰 Canada - 64&lt;br&gt;
💰 United Kingdom - 54&lt;br&gt;
💰 Brazil - 43&lt;br&gt;
💰 Italy - 42&lt;/p&gt;

&lt;p&gt;From this list, we can safely say that the US is clearly leading here, or can we? This number is not showing reality because the underlying comparison, billionaires to nr. of people is different in each country.&lt;/p&gt;

&lt;p&gt;Normalizing the basis to compare to, let's say, per million people would be a much better metric because every country on the list above has at least a million citizens.&lt;/p&gt;

&lt;p&gt;The list below shows this:&lt;/p&gt;

&lt;p&gt;👉 Hong Kong ~8.93&lt;br&gt;
👉 Canada ~1.70&lt;br&gt;
👉 US ~1.6&lt;br&gt;
👉 Germany ~1.37&lt;br&gt;
👉 United Kingdom ~0.81&lt;br&gt;
👉 Italy ~0.69&lt;br&gt;
👉 Russia ~0.67&lt;br&gt;
👉 China ~0.3&lt;br&gt;
👉 Brazil ~0.19&lt;br&gt;
👉 India ~0.09&lt;/p&gt;

&lt;p&gt;This list shows a totally different picture. We compared two dimensions normalizing one to the other and calculated the average.&lt;/p&gt;



&lt;p&gt;Another case where averaging can be misleading is employee salaries and the national or company-wide average, which is not a very accurate metric simply because if we take five employees in a company with the following salaries: &lt;/p&gt;

&lt;p&gt;👶 Employee 1 - 5,000.00 USD / month&lt;br&gt;
👶 Employee 2 - 5,500.00 USD / month&lt;br&gt;
👶 Employee 3 - 6,000.00 USD / month&lt;br&gt;
👶 Employee 4 - 12,000.00 USD / month&lt;br&gt;
👶 Employee 5 - 14,000.00 USD / month&lt;/p&gt;

&lt;p&gt;On average we could say that an employee has 8,500.00 USD / month. Employee 1 wouldn't agree.&lt;/p&gt;

&lt;p&gt;A better metric would be the median salary, which is considered a more neutral measure and it's 6,000.00 USD / month.&lt;/p&gt;

&lt;p&gt;So, next time you interview for a job and the HR person says "Oh yeah, our employees get around X amount of USD per month" you should ask if it's on average or median? 😁&lt;/p&gt;



&lt;p&gt;A wonderfully elegant yet horrible metric is lines of code in a codebase. It's wonderful because it's straightforward, it's a number everybody can understand, one project has 100.000 LoC another project has 20.000 LoC, therefore, the former is bigger than the latter.&lt;/p&gt;

&lt;p&gt;Yet it's a horrible metric because managers often use it to measure developer productivity.&lt;/p&gt;

&lt;p&gt;Why is that? Well, a program can be written in an infinite amount of ways, one developer can write a function in 5 lines another can write it in 25 lines. Which is better?&lt;/p&gt;

&lt;p&gt;Also, the process of writing code differs from let's say writing this blog post. A developer can write 1000 lines of code, deleting 300, and modifying the rest to be under 500 LoC.&lt;/p&gt;

&lt;p&gt;Or, one project can adhere to one type of coding style another to a different one, for example, the same exact code can be written in four different ways:&lt;/p&gt;

&lt;p&gt;Ten lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Three lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Four lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One line:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using lines of code as a blanket statistic to measure productivity is horrible but if a manager uses this metric, by logic, the developer who wrote it in ten lines is the most productive.&lt;/p&gt;

&lt;p&gt;Developer productivity is a really complex metric, there's no single truth, but we can employ a variety of other strategies such as:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The number of bugs QA caught after a feature was implemented.&lt;/li&gt;
&lt;li&gt;Effort of feature vs. time of development.&lt;/li&gt;
&lt;li&gt;Time and effort of peer reviews.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In the end, WTF/minute is a better metric than LoC. 🙃&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQ18LXRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqbehnv8h17gy1dr79tv.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQ18LXRi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqbehnv8h17gy1dr79tv.jpeg" alt="WTFs/minute"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://twitter.com/charlesdeluvio"&gt;charlesdeluvio&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://primalskill.blog/3-tales-of-tricky-statistics"&gt;https://primalskill.blog/3-tales-of-tricky-statistics&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Please comment and consider sharing this article; and if you have any questions you can contact me here in the comments or on &lt;a href="https://twitter.com/feketegy"&gt;Twitter&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>software</category>
      <category>statistics</category>
      <category>analytics</category>
    </item>
    <item>
      <title>10 Blazor Features You Probably Didn't Know</title>
      <author>Lauren Del Signore</author>
      <pubDate>Tue, 01 Jun 2021 14:04:32 +0000</pubDate>
      <link>https://dev.to/grapecity/10-blazor-features-you-probably-didn-t-know-1mgp</link>
      <guid>https://dev.to/grapecity/10-blazor-features-you-probably-didn-t-know-1mgp</guid>
      <description>&lt;p&gt;Blazor is still a relatively young technology, yet it has gained incredible momentum since its release in 2018. Originally an experimental project, Blazor now ships as part of .NET 5 and is considered production-ready.&lt;/p&gt;

&lt;p&gt;Its main attraction for .NET developers is that they can use their favorite languages like C# to write single-page applications, reusing existing .NET libraries and frameworks. Like most modern web technologies, Blazor is evolving rapidly. Every few months, its developers release previews packed with new features.&lt;/p&gt;

&lt;p&gt;If you experimented with Blazor during the early days, you might have encountered snags and limitations that no longer exist. Blazor is tightly integrated with ASP.NET Core, supports all major .NET APIs not constrained by the browser’s security sandbox, and provides bi-directional integration with JavaScript. These capabilities make it a robust choice to build enterprise web applications.&lt;/p&gt;

&lt;p&gt;If you still have your doubts about using Blazor, keep reading. Here are the top ten things you wish Blazor could do — that it actually does! &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#net-5-and-c-9"&gt;
  &lt;/a&gt;
  .NET 5 and C# 9
&lt;/h4&gt;

&lt;p&gt;Blazor ships as part of .NET and supports all relevant APIs. Some APIs, such as file I/O, just don’t make sense in the browser context due to restrictions on accessing the local file system.&lt;/p&gt;

&lt;p&gt;Blazor also supports the latest C# language version 9.0. Using the newest language constructs not only improves your code’s conciseness and readability, but it can also actually improve performance! Here’s a quick look at some helpful C# 9.0 features you can use in your Blazor apps.&lt;/p&gt;

&lt;p&gt;Did you know you can save keystrokes with simplified object initialization? It’s no longer necessary to redeclare the class when you create a new instance. This redundant code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Person person = new Person();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Simplifies to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Person person = new ();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the new switch expression to simplify logic. What looked like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public int DoMath(int a, int b, Operator op)
{
   switch(op)
   {
      case Operator.Add:
         return a + b;
      case Operator.Sub:
         return a - b;
      case Operator.Mult:
         return a * b;
      default:
         return a / b;
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can now express more succinctly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public int DoBetterMath(int a, int b, Operator op) =&amp;gt;
   op switch
   {
      Operator.Add =&amp;gt; a + b,
      Operator.Sub =&amp;gt; a - b,
      Operator.Mult =&amp;gt; a * b,
      _ =&amp;gt; a / b
   };
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don’t forget you can also use the fast SpanT for array and string manipulation, as well as the new &lt;a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/tutorials/ranges-indexes"&gt;range operators&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#markdown"&gt;
  &lt;/a&gt;
  Markdown
&lt;/h4&gt;

&lt;p&gt;Markdown creates web-based documents as a popular and lightweight alternative to HTML. Its simple syntax makes it easy to write without having to worry about nested tags or special controls.&lt;/p&gt;

&lt;p&gt;Repositories like GitHub and most blog engines and content management systems (CMS) support Markdown. Browsers lack native Markdown support and can only display it once it’s rendered into HTML. A variety of open-source libraries format, parse, validate, and transform markdown.&lt;/p&gt;

&lt;p&gt;Building a markdown editor in Blazor is incredibly easy since it supports existing .NET libraries. The figure below demonstrates a simple Blazor WebAssembly markdown editor that takes only minutes to create.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kYDw2bxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/ImageOne_Markdown.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kYDw2bxD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/ImageOne_Markdown.png" alt="Markdown"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To see for yourself, create a new Blazor WebAssembly project. If you’re not sure how, check out &lt;a href="https://docs.microsoft.com/en-us/learn/modules/build-blazor-webassembly-visual-studio-code/"&gt;this learning module&lt;/a&gt;. Next, add a reference to the &lt;a href="https://www.nuget.org/packages/Markdig/"&gt;Markdig&lt;/a&gt; package. Update the Index page to include this row:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="row"&amp;gt;
    &amp;lt;div class="col-6"&amp;gt;
        &amp;lt;textarea 
            @bind-value="@MarkdownText" 
            @bind-value:event="oninput"
            rows="20"
            cols="80"&amp;gt;
        &amp;lt;/textarea&amp;gt;        
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="col-6"&amp;gt;
        &amp;lt;textarea 
            @bind-value="@Html" 
            @bind-value:event="oninput"
            rows="20"
            cols="80"&amp;gt;
        &amp;lt;/textarea&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;a href="http://net-informations.com/faq/asp/inline.htm"&gt;code behind&lt;/a&gt;, implement properties like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private string markdown;

public string MarkdownText
{
    get =&amp;gt; markdown;
    set 
    {
        if (value != markdown)
        {
            markdown = value;
            OnMarkdownChanged();
        }
    }
}

public string Html { get; set; }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The conversion is then as simple as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;private void OnMarkdownChanged() =&amp;gt; Html = Markdown.ToHtml(markdown);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you have a real-time markdown editor that refreshes the HTML as you type.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#grpc"&gt;
  &lt;/a&gt;
  gRPC
&lt;/h4&gt;

&lt;p&gt;The popular new gRPC framework provides high-performance communication between endpoints. It uses the newer HTTP/2 protocol, which allows parallel requests over a single connection. The payload is a compressed binary format, so it usually has a much smaller network footprint than traditional REST or even WCF SOAP-based implementations.&lt;/p&gt;

&lt;p&gt;According to this &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/cloud-native/grpc"&gt;gRPC architecture document&lt;/a&gt;, gRPC can be up to eight times faster than JSON serialization and has 60 to 80 percent smaller payloads than equivalent REST services. gRPC is built into .NET Core, and the default, lightweight web server that ships with .NET Core (Kestrel) and supports HTTP/2.&lt;/p&gt;

&lt;p&gt;Browser limitations make it impossible to implement a standard gRPC browser client because no APIs exist to control HTTP/2 communication. An open-source project called &lt;a href="https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md"&gt;gRPC-Web&lt;/a&gt; provides an extension that functions in the browser and includes a proxy to handle requests from both implementations, making it possible to use gRPC from Blazor WebAssembly applications.&lt;/p&gt;

&lt;p&gt;After you install and configure the required packages, gRPC calls look almost identical to REST-based requests. Here’s an example call:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;forecasts = 
   await WeatherForecastsClient.GetWeatherAsync(new WeatherForecast()).Forecasts;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;gRPC requires all APIs to have a custom input and custom output. In the example above, the custom input WeatherForecast indicates a request for the forecast, and the response contains the Forecasts property payload.&lt;/p&gt;

&lt;p&gt;You can see the complete end-to-end example in the blog post &lt;a href="https://azure.github.io/AppService/2021/03/15/How-to-use-gRPC-Web-with-Blazor-WebAssembly-on-App-Service.html"&gt;How to use gRPC-Web with Blazor WebAssembly on App Service&lt;/a&gt;. An open-source project even generates all required gRPC infrastructure from a set of interfaces. Check out the &lt;a href="https://github.com/carlfranklin/GrpcGenerator"&gt;gRPC generator&lt;/a&gt; to see the “grWizard” in action.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h4&gt;

&lt;p&gt;GraphQL is another popular protocol that is rapidly replacing traditional REST in modern web applications. Facebook created it to improve its user interface performance and designed it specifically to streamline communication from a front-end client. They did not intend it for interprocess communication like gRPC.&lt;/p&gt;

&lt;p&gt;GraphQL is popular for its strongly-typed schema, easy discoverability, and capacity for a single request to aggregate responses from multiple back ends. Its most popular feature enables the client to define the response shape to receive only the specifically required data and avoid over-fetching.&lt;/p&gt;

&lt;p&gt;Consider a data set that contains contact information. To implement an autocomplete search box that just returns names, you might make a request like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   contact(filter: 'likness') {
      lastname,
      firstname
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The request only returns names. In a different component, you might want to show more data and shape the request like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
   contact(filter: 'likness') {
      lastname,
      phone,
      address {
         street,
         zipCode
      }
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Popular GraphQL libraries for .NET include &lt;a href="https://graphql-dotnet.github.io/docs/getting-started/introduction/"&gt;GraphQL.NET&lt;/a&gt; and &lt;a href="https://github.com/ChilliCream/hotchocolate"&gt;Hot Chocolate.&lt;/a&gt; To see GraphQL in action with a Blazor WebAssembly app, follow the &lt;a href="https://chillicream.com/docs/strawberryshake/get-started"&gt;Get started with Strawberry Shake&lt;/a&gt; guide. A companion to HotChocolate (GraphQL on the server), Strawberry Shake creates .NET GraphQL client proxies to consume endpoints with strongly-typed payloads. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ef-core-and-azure-cosmos-db"&gt;
  &lt;/a&gt;
  EF Core and Azure Cosmos DB
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/ef/core/"&gt;Entity Framework Core&lt;/a&gt; (EF Core) is an object-to-database mapper enabling developers to use domain objects and a consistent, strongly-typed data access API to manage data persistence. It supports various databases, including SQL Server, MySQL, PostgreSQL, SQLite, and Azure Cosmos DB. EF Core is cross-platform and targets .NET 5, so it is fully compatible with Blazor projects.&lt;/p&gt;

&lt;p&gt;The caveat is the browser’s security sandbox: most databases use non-standard protocols over non-standard ports that browsers don’t support. Azure Cosmos DB is an exception because it provides the option to access APIs directly over HTTPS. &lt;/p&gt;

&lt;p&gt;The &lt;a href="https://docs.microsoft.com/en-us/ef/core/providers/cosmos/?tabs=dotnet-core-cli"&gt;EF Core Azure Cosmos DB provider&lt;/a&gt; can access the database directly from the client running in the browser. This has constraints, however. It is bad practice to store credentials, even encrypted credentials, on the client. You must assume the client has access and the information could leave your database wide open.&lt;/p&gt;

&lt;p&gt;To secure access, secure the user’s identity with a provider like &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/security/webassembly/hosted-with-azure-active-directory?view=aspnetcore-5.0"&gt;Azure Active Directory.&lt;/a&gt; Then, instead of using your secret key, you can request an Azure Cosmos DB resource token with security constraints. &lt;/p&gt;

&lt;p&gt;Read &lt;a href="https://blog.jeremylikness.com/blog/ef-core-and-cosmosdb-with-blazor-webassembly/"&gt;EF Core and Azure Cosmos DB with Blazor WebAssembly&lt;/a&gt; to learn more.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#progressive-web-apps"&gt;
  &lt;/a&gt;
  Progressive Web Apps
&lt;/h4&gt;

&lt;p&gt;It’s often challenging to deliver apps that work across all devices and deliver a native experience. Progressive web apps (PWA) provide a “best of all worlds” solution.&lt;/p&gt;

&lt;p&gt;Using a special browser-based feature called a service worker, PWAs enable web apps to run disconnected. Install these apps just like ordinary apps on your phone, desktop, or tablet. Their code delivers pages from local storage when an active connection is not available. They also support push notifications, so your users never miss an important event.&lt;/p&gt;

&lt;p&gt;The Blazor WebAssembly app template has a checkbox to enable PWA. From the command line, simply use the &lt;strong&gt;--pwa&lt;/strong&gt; switch, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new blazorwasm --pwa -o pwa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After creating your new project, you’ll notice particular files under &lt;strong&gt;wwwroot.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;manifest.json&lt;/strong&gt; is a special configuration file that describes your app and the location of various icons to use when installed.&lt;/li&gt;
&lt;li&gt;Several icons ship with the template.&lt;/li&gt;
&lt;li&gt;The service-worker.published.js script contains the special code that enables offline mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The basic PWA app stores pages in local storage as the user navigates the site. It pre-installs essential pages and intercepts the browser’s fetch page mechanism. The interception code loads pages from the cache when the user is offline and refreshes the cache when the user is online. When you run the application, modern browsers provide the option to install it.&lt;/p&gt;

&lt;p&gt;The figure below shows the icon and action in Microsoft Edge.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---TPJNP4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image1_Microsoft%2520Edge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---TPJNP4y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image1_Microsoft%2520Edge.png" alt="MicrosoftEdge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Installing the PWA app adds it to your applications list, places an icon to run it, and launches it in a chromeless window that looks like the figure below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fk08LCcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image2_Blazor.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fk08LCcr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image2_Blazor.png" alt="Blazor"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Although the app has its own window that you can move and resize, it is a version of the web browser dedicated to running the PWA.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#css-isolation"&gt;
  &lt;/a&gt;
  CSS Isolation
&lt;/h4&gt;

&lt;p&gt;The latest Blazor release features CSS isolation. Single-page application frameworks like Angular and React heavily use this powerful feature.&lt;/p&gt;

&lt;p&gt;Instead of being forced to manage a single large CSS library for the entire app, CSS isolation enables you to style each component individually. There is no need to come up with unique names for each component type. If you style a heading element for “component A” it only applies to that component and doesn’t conflict with “component B.”&lt;/p&gt;

&lt;p&gt;The default Blazor project template generates examples of CSS isolation. To create a stylesheet isolated to your component, simply create a file with the same name as the component with the &lt;strong&gt;.css&lt;/strong&gt; extension. In the default Blazor template, notice that &lt;strong&gt;MainLayout.razor&lt;/strong&gt; has a related file named &lt;strong&gt;MainLayout.razor.css.&lt;/strong&gt; The styles defined in that file only apply to the MainLayout component.&lt;/p&gt;

&lt;p&gt;To see how it works, notice that when you run your app, it references a file with the convention &lt;strong&gt;appname.styles.css.&lt;/strong&gt; The figure below shows the result of examining network calls for an app named “pwa.”&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcw604S8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image%25203_PWA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcw604S8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image%25203_PWA.png" alt="Pwa"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Opening the file reveals this code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/* /Shared/MainLayout.razor.rz.scp.css */
.page[b-o6yozaou6y] {
    position: relative;
    display: flex;
    flex-direction: column;
}

.main[b-o6yozaou6y] {
    flex: 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice the styles now have a unique suffix to avoid collision with other components. For full CSS isolation details, read &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/css-isolation?view=aspnetcore-5.0"&gt;ASP.NET Core Blazor CSS Isolation.&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#virtualization"&gt;
  &lt;/a&gt;
  Virtualization
&lt;/h4&gt;

&lt;p&gt;Business apps commonly handle large data lists. Paging is not always an option or the optimal solution, but large lists can degrade performance due to the overhead of rendering the list’s components. Users, on the other hand, only use a subset of the data at any given time. Even if the list contains hundreds of thousands of elements, the app likely only displays a few dozen at once.&lt;/p&gt;

&lt;p&gt;Virtualization takes advantage of this to render only visible components. For a list of 500,000 elements, the app only renders the 50 elements in view. As the user scrolls the list and other elements come into view, the app renders them. The overall time to process is the same, but delaying the render until the item scrolls into view gives users the perception of improved performance.&lt;/p&gt;

&lt;p&gt;In Blazor apps, virtualization is extremely easy to implement. Consider a FoodItem component that displays a list of food items. A typical list might render like this (notice the use of the @key attribute to help Blazor keep track of list items).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div style="height:500px;overflow-y:scroll"&amp;gt;
    @foreach (var foodItem in foods)
    {
        &amp;lt;FoodItem @key="foodItem.Id" Item=”@foodItem” /&amp;gt;
    }
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To virtualize this component, so the app only renders in-view items, simply wrap the list in the Virtualize component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div style="height:500px;overflow-y:scroll"&amp;gt;
    &amp;lt;Virtualize Items="@foods"&amp;gt;
        &amp;lt;FoodItem @key="context.Id" Item="@context" /&amp;gt;
    &amp;lt;/Virtualize&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some virtualization guidelines relate to how you size components. You can also specify a delegate to provide items for streaming. Read &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/virtualization?view=aspnetcore-5.0"&gt;ASP.NET Core Blazor Component Virtualization&lt;/a&gt; to learn more about virtualization.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#serverside-prerendering"&gt;
  &lt;/a&gt;
  Server-Side Pre-Rendering
&lt;/h4&gt;

&lt;p&gt;A common single-page application challenge is the delay between serving the web page and rendering the data. The page template must load first, followed by asynchronous operations to fetch and render data. This can cause a poor user experience.&lt;/p&gt;

&lt;p&gt;Server-side pre-rendering addresses this issue by constructing the page in a virtual Document Object Model (DOM) on the server then delivering it as static content. The client app then takes over. This creates a seamless experience for the end-user. Pre-rendering can also improve your website’s search engine optimization (SEO) by delivering content for search engines to index.&lt;/p&gt;

&lt;p&gt;For pre-rendering to work, the app must be hosted. A static website doesn’t have the server capabilities to pre-render. An ASP.NET Core hosted app can host the Blazor WebAssembly to render the first page of components on the first load. The document &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/prerendering-and-integration?view=aspnetcore-5.0&amp;amp;pivots=webassembly"&gt;Pre-render and integrate ASP.NET Core Razor components&lt;/a&gt; details the configuration steps.&lt;/p&gt;

&lt;p&gt;You don’t have to settle for pre-rendering at runtime in response to HTTP requests. Your app can pre-render as part of your build process and deliver a set of static assets that represent the initial website state. Learn more about this approach by reading &lt;a href="https://swimburger.net/blog/dotnet/pre-render-blazor-webassembly-at-build-time-to-optimize-for-search-engines"&gt;Pre-render Blazor WebAssembly at build time to optimize for search engines.&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#hot-reload"&gt;
  &lt;/a&gt;
  Hot Reload
&lt;/h4&gt;

&lt;p&gt;One of the hottest new Blazor features, and number one on this list, is Hot Reload. Web development can be iterative, and productivity depends on seeing the result of incremental changes as quickly as possible. The .NET team not only implemented this feature, but they made it blazing fast. If you’ve used reload in previous versions, toss your expectations out the window because you must see the updated reload for yourself.&lt;/p&gt;

&lt;p&gt;The new Hot Reload feature is available in .NET 6 preview 3. Be sure to download and install that .NET version to take advantage of the performance improvements.&lt;/p&gt;

&lt;p&gt;The feature in .NET 5 requires recompiling and reloading the entire app, which is far slower. Use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we run that, we see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;6.0.100-preview.3.21202.5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s see Hot Reload in action. Create a new Blazor project called HotReload:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new blazorwasm -o HotReload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go to the directory:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd HotReload
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the project in your favorite editor, like Visual Studio (VS) or Visual Studio Code (if you use Visual Studio, ensure you use v16.9 or later). Under properties, find and open the launchSettings.json file.&lt;/p&gt;

&lt;p&gt;Under your web server of choice (defaults are either IIS Express or the name of your app), add the property &lt;strong&gt;hotReloadProfile&lt;/strong&gt; with the value &lt;strong&gt;blazorwasm.&lt;/strong&gt; Ours looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
  "iisSettings": {
    // cutting this out for brevity
  },
  "profiles": {
    "IIS Express": {
      // ignore this for now
    },
    "hotreload": {
      "hotReloadProfile" : "blazorwasm",
      "commandName": "Project",
      "dotnetRunMessages": "true",
      "launchBrowser": true,
      // etc. etc.
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Save your changes. From the command line, run using the new watch command, followed by the standard run command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet watch -- run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’re correctly set up, the first message should note that Hot Reload is active. While the app is running, open the project in your favorite integrated development environment (IDE) or open the pages using Notepad.&lt;/p&gt;

&lt;p&gt;Go to Pages, then Index.razor, change “Hello, world!” to “Hello, live refresh!”, and save. You should see the app restart and deliver the new content. The first time is always slower, so next, edit the text “Welcome to your new app” by adding “friend” at the end. Save it, and you should almost immediately see results similar to the figure below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J7q_eaSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image%25204_Refresh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J7q_eaSo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://global-cdn.grapecity.com/blogs/componentone/20210524-10-blazor-features-you-probably-didnt-know/Image%25204_Refresh.png" alt="LiveRefresh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can learn more about this feature in the &lt;a href="https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-6-preview-3/#initial-net-hot-reload-support"&gt;.NET 6 Preview 3 announcement.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Blazor may be relatively new, but it’s a mature framework with strong backing from the .NET ecosystem, including GrapeCity’s ComponentOne. These ten features are only a subset of what’s possible with Blazor. Now that you know what Blazor can do, you can create your web applications with features you may not have thought possible.&lt;/p&gt;

</description>
      <category>blazor</category>
      <category>dotnet</category>
      <category>devops</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GraphQL or REST</title>
      <author>Francisco Mendes</author>
      <pubDate>Tue, 01 Jun 2021 14:04:18 +0000</pubDate>
      <link>https://dev.to/franciscomendes10866/graphql-or-rest-3837</link>
      <guid>https://dev.to/franciscomendes10866/graphql-or-rest-3837</guid>
      <description>&lt;p&gt;For a long time now, REST has been the most popular protocol for sending information over the web. But in the last few years we have seen a great increase in the popularization of GraphQL. Which supposedly came to solve some of the problems of REST.&lt;/p&gt;

&lt;p&gt;But first of all let's have an idea of what an Api is.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  What is an Api?
&lt;/h1&gt;

&lt;p&gt;You may not know what it means or what it does. But Apis are working behind the scenes to provide you with richer digital experiences.&lt;/p&gt;

&lt;p&gt;It is a standardization for applications to communicate with each other to provide information and functionality without human intervention.&lt;/p&gt;

&lt;p&gt;I believe you are still confused, because I was not very clear with my explanation. So I will use this image to give an example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-L9fMnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1622548614/api_brh70r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-L9fMnm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dj5iihhqv/image/upload/v1622548614/api_brh70r.png" alt="example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the most popular example and it was with which I learned the concept of how an Api works.&lt;/p&gt;

&lt;p&gt;The way an Api works is usually compared to ordering food at a restaurant, where you represent the customer (the web, mobile or desktop client), the waiter represents the Api and the chef represents the server. You examine the menu, choose the meal you want and order from the waiter. The waiter takes your order to the chef. The chef executes it. Then, the waiter brings the meal to you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-rest"&gt;
  &lt;/a&gt;
  What is REST?
&lt;/h1&gt;

&lt;p&gt;It is an Api design paradigm designed to standardize web services through a set of constraints.&lt;/p&gt;

&lt;p&gt;Using REST when building a web service makes it easier for clients and servers to get along, even when one is unaware of the other, so they can grow in a dependent way, as long as they follow the appropriate conventions.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-graphql"&gt;
  &lt;/a&gt;
  What is GraphQL?
&lt;/h1&gt;

&lt;p&gt;It was designed to handle a large volume of complex and nested data that is present in many modern applications.&lt;/p&gt;

&lt;p&gt;Basically it allows clients to have the possibility to obtain only the data they want from the Api. This gives tremendous flexibility from the point of view of the frontend.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#whats-the-difference"&gt;
  &lt;/a&gt;
  What’s the Difference?
&lt;/h1&gt;

&lt;p&gt;REST and GraphQL are fundamentally similar, as both include the idea of resources.&lt;/p&gt;

&lt;p&gt;The core idea of REST is the resource and each resource is identified by a URL, and you retrieve that resource according to the HTTP verb. So it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// GET /api/posts/10&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GraphQL or REST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bla bla bla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that we have two resources, the first one is the post and the second are the comments. And whenever we make an HTTP request to this endpoint, all this data will always be returned, even if we only want the post data and not the comments.&lt;/p&gt;

&lt;p&gt;GraphQL has a different approach, as mentioned earlier. This is because the two resources in the previous example are completely separate. First, we would have to define the data that both resources hold. And only after that we could query the data.&lt;/p&gt;

&lt;p&gt;If we just wanted to get the data from the post, we would have to do it as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  query {&lt;/span&gt;
&lt;span class="c1"&gt;//    singlePost(id: 10) {&lt;/span&gt;
&lt;span class="c1"&gt;//      id&lt;/span&gt;
&lt;span class="c1"&gt;//      title&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="c1"&gt;//  }&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GraphQL or REST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However if we wanted to get only the title of the post and the comments, we would do it this way:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//  query {&lt;/span&gt;
&lt;span class="c1"&gt;//    singlePost(id: 10) {&lt;/span&gt;
&lt;span class="c1"&gt;//      title&lt;/span&gt;
&lt;span class="c1"&gt;//      comments {&lt;/span&gt;
&lt;span class="c1"&gt;//        id&lt;/span&gt;
&lt;span class="c1"&gt;//        message&lt;/span&gt;
&lt;span class="c1"&gt;//      }&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="c1"&gt;//  }&lt;/span&gt;

&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GraphQL or REST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;comments&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bla bla bla&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#rest-apis-issues"&gt;
  &lt;/a&gt;
  REST Apis issues
&lt;/h1&gt;

&lt;p&gt;Some of the problems that are solved by GraphQL are the over/under fetching, the flexibility and the excessive amount of requests to Api.&lt;/p&gt;

&lt;p&gt;These problems happen because the only way to obtain data in REST Apis is to make HTTP requests to certain endpoints in order to obtain certain structured data sets. And because of this, it is difficult to provide clients with the data they really need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#graphql-apis-issues"&gt;
  &lt;/a&gt;
  GraphQL Apis issues
&lt;/h1&gt;

&lt;p&gt;In GraphQL, there is a common problem called the n+1 problem. This is because in GraphQL we execute different functions (resolvers), while in REST we have only one function (controller) per endpoint. That is, our Api will end up making several requests to fetch data for a given resource.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#when-should-i-use-restgraphql"&gt;
  &lt;/a&gt;
  When should I use REST/GraphQL?
&lt;/h1&gt;

&lt;p&gt;I have to mention that when we start a project, we should use tools that we are more confident to use. Each paradigm has its advantages and disadvantages, just as each has its own learning curve and challenges.&lt;/p&gt;

&lt;p&gt;If you want to have greater compatibility with other types of clients (web, mobile and desktop) and tools or if you have a project that is easily structured, the use of REST would be ideal.&lt;/p&gt;

&lt;p&gt;However, if you want to have the flexibility to choose which resources to consume with a single request to the Api or if you want to query only the data you want, using GraphQL would be ideal.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#graphql-challenges"&gt;
  &lt;/a&gt;
  GraphQL Challenges
&lt;/h1&gt;

&lt;p&gt;Although I am talking about Apis development, the differences between the two paradigms become great if we put the frontend in question. &lt;/p&gt;

&lt;p&gt;From the point of view of the development of the frontend when consuming Apis with GraphQL it is a dream come true, because we have all the flexibility we want and it is not that difficult to implement. &lt;/p&gt;

&lt;p&gt;However, the backend is totally different, because this is where the whole concept is different from what we are used to REST. And this is where all the complexity and the learning curve lies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-about-you"&gt;
  &lt;/a&gt;
  What about you?
&lt;/h1&gt;

&lt;p&gt;Have you created GraphQL Apis in your projects?&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>graphql</category>
    </item>
  </channel>
</rss>
