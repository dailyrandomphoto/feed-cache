<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Web Services vs API</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Thu, 08 Apr 2021 06:18:38 +0000</pubDate>
      <link>https://dev.to/priyans23611789/web-services-vs-api-h96</link>
      <guid>https://dev.to/priyans23611789/web-services-vs-api-h96</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uNI6q0A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjrmet0aj6xcjpc73t7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uNI6q0A6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tdjrmet0aj6xcjpc73t7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;APIs and Web Services are those two terms that get overlapped and confused with each other. You might have heard these words used interchangeably quite often. Although they do have a few overlaps, the concept of both is different. So let’s get started with the basics and help you to understand the difference and similarities between them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-a-web-service"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Is a Web Service?&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Web Services are a web application component. It is a set of technologies and rules that allows two or more components on the web or internet to interact with each other. These components can be anything from a web server to a web browser. As defined by the World Wide Web Consortium(W3C), Web Services render a standard way of communication between software applications that run on different frameworks or platforms. Web Service is a system designed to support interoperable interactions between machines over a network. Therefore, web services need the network to operate.&lt;/p&gt;

&lt;p&gt;The first web service used is WSDL (Web Services Description Language) - which is a set of rules that are used to describe web services and is written in XML. Apart from that, web Services mostly use SOAP (Simple Object Access Protocol) - a messaging protocol that shares XML data via HTTP (HyperText Transfer Protocol) requests. It is mainly associated with &lt;a href="https://www.decipherzone.com/blog-detail/soa-vs-microservices"&gt;Service Oriented Architecture (SOA)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Overall, a web service is nothing but a connection technology that enables two or more components aka services to interoperate. These are the bridge between components on the web. Each of these components or programs does things that other programs need, whether it’s featuring a database, computation, or executing scripts. Technically, web services send data back and forth through HTTP requests. These requests often return textual data in XML or JSON form.&lt;/p&gt;

&lt;p&gt;But what are APIs then? Let’s check!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-an-api"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/What-is-an-API-and-How-it-works-"&gt;What is an API?&lt;/a&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;The term API stands for Application Programming Interface. It is a set of routines, object classes, data structures, or protocols offered by libraries or operating systems to support application development. It enables two otherwise distanced entities to communicate in a standardized way. An API is similar to a messenger that receives requests and informs the system what a user wants to do and then returns the response.&lt;/p&gt;

&lt;p&gt;To help you understand the concept of API, let’s see a scenario. You are probably familiar with the process of searching for flights or trains online. On the application or website, you will get the drop-down menu to choose departure city, date, destination, return date, class and other variables. To book your flight or train, you interact with the database of airlines or railways respectively to check if there’s any seat available for you. But what if you are not using a railways or airways website or app that aggregates information from their databases. Instead, you are using a third-party travel website that checks different databases and provides the information you have asked for. In that case, with your query, that website will interact with API to get information from different systems over the internet to check prices, availability and book seats. After that, it delivers the response back to the travel website and finally shows it to you.&lt;/p&gt;

&lt;p&gt;So an API could be anything in any form. The only thing that it has to be is a way of communication with a software component. But how is it different from web services?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#key-difference-between-web-services-and-apis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;a href="https://www.decipherzone.com/blog-detail/api-vs-web-services"&gt;Key Difference Between Web Services and APIs&lt;/a&gt;&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Web Services vs APIs.&lt;/strong&gt; Clearly, both Web Services and APIs are a means of communication. The basic difference between them is as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web Services provide interaction between two machines over a network while APIs acts as an interface between two different applications for interoperability.&lt;/li&gt;

&lt;li&gt;Web Services requires a network connection while APIs may or may not require a network for their operability.&lt;/li&gt;

&lt;li&gt;While APIs can use any protocols or design patterns, web services mostly use SOAP and sometimes REST, XML-RPC, or UDDI.&lt;/li&gt;

&lt;li&gt;Many public APIs are transparent with open documentation and self-service portals for rapid developer onboarding. However, web services offer specific data or functionality to certain patterns only. &lt;/li&gt;

&lt;li&gt; Moreover, each web service is an API but all APIs are not web services because a web service might not perform all the operations that an API would do.&lt;/li&gt;

&lt;li&gt;APIs features efficiency, wide reach, personalization, data ownership, time-effectiveness, programming language independence, and easy integration with GUI; Web Services offer loose coupling, synchronous and asynchronous functionality, document exchange support while supporting remote procedure calls. &lt;/li&gt;

&lt;li&gt; As web services need SOAP protocol to transfer data over the network, it does not have a lightweight architecture. On the other hand, APIs have a lightweight architecture as most of their required libraries and data are running on the .NET framework. &lt;/li&gt;

&lt;li&gt; Web Services provides support for HTTP only while APIs support HTTP/s, URL Requests/Response Headers and so on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you understand that API is an interface that enables to build on the data and functionality of another application, web service is a network-based resource to fulfil a certain task. Both the API and Web Services are useful at their core. If you want to develop an application for your business, hire developers who have vast experience and knowledge in the related field.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.decipherzone.com/blog-detail/customer-experience-web-design"&gt;Decipher&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>python</category>
      <category>react</category>
    </item>
    <item>
      <title>An In-depth Introduction to State in React – Explained with Code Examples</title>
      <author>Yogesh Chavan</author>
      <pubDate>Thu, 08 Apr 2021 05:59:32 +0000</pubDate>
      <link>https://dev.to/myogeshchavan97/how-state-works-in-react-explained-with-code-examples-2mjd</link>
      <guid>https://dev.to/myogeshchavan97/how-state-works-in-react-explained-with-code-examples-2mjd</guid>
      <description>&lt;p&gt;The state is the most complex thing in React that beginners, as well as experienced developers, struggle to understand. So in this article, we'll explore all about the state in React. &lt;/p&gt;

&lt;p&gt;Before understanding the state, let's first understand some basics so it's easy to understand the state later. &lt;/p&gt;

&lt;p&gt;So let's get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-render-data-in-the-ui-in-react"&gt;
  &lt;/a&gt;
  How to Render Data in the UI in React
&lt;/h2&gt;

&lt;p&gt;To render anything on the screen in React, we use the &lt;code&gt;ReactDOM.render&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;It has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;element&lt;/code&gt; can be any HTML element, JSX or a component that returns a JSX&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;container&lt;/code&gt; is the element on the UI inside which we want to render the data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;callback&lt;/code&gt; is the optional function we can pass which gets called once something is rendered or re-rendered on the screen&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take a look at the below code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/focused-shockley-oh4tn?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we're just rendering a single h1 element to the screen.&lt;/p&gt;

&lt;p&gt;To render multiple elements we can do it as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React is awesome.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;rootElement&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/white-hooks-dgru0?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We can also take out the JSX and put it in a variable which is a preferred way of rendering content If it gets larger like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Welcome to React!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;React is awesome.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/trusting-night-5g825?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we've also added an extra pair of round brackets to align the JSX properly and to make it a single JSX expression.&lt;/p&gt;

&lt;p&gt;If you want to understand JSX in detail and its various important features, check out my &lt;a href="https://www.freecodecamp.org/news/jsx-in-react-introduction/"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, let's display a button and some text on the screen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/quizzical-cohen-x55p8?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K9094AWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860095077/UZqsWe8fK.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K9094AWW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860095077/UZqsWe8fK.gif" alt="counter_initial.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, when we click on the button, the &lt;code&gt;counter&lt;/code&gt; value is incremented as can be seen in the console but on the UI it's not getting updated.&lt;/p&gt;

&lt;p&gt;This is because we're rendering the &lt;code&gt;content&lt;/code&gt; JSX only once using the &lt;code&gt;ReactDOM.render&lt;/code&gt; method when the page is loaded and we're not calling it again so even though the value of &lt;code&gt;counter&lt;/code&gt; is updating, it's not getting displayed on the UI. So let's fix this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;renderContent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;renderContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;renderContent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/adoring-noether-8gsgu?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we've moved the &lt;code&gt;content&lt;/code&gt; JSX and  &lt;code&gt;ReactDOM.render&lt;/code&gt; method call inside a &lt;code&gt;renderContent&lt;/code&gt; function and once it's defined, we're calling the function so it will render the content on UI on page load.&lt;/p&gt;

&lt;p&gt;Note that, we've also added  &lt;code&gt;renderContent&lt;/code&gt; function call inside the &lt;code&gt;handleClick&lt;/code&gt; function so every time we click on the button, the &lt;code&gt;renderContent&lt;/code&gt; function will be called and we'll see the updated counter on the UI.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZoefOHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860129906/UMBjqUyNU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZoefOHO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860129906/UMBjqUyNU.gif" alt="counter_updated.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As can you see, it's working as expected and the &lt;code&gt;counter&lt;/code&gt; value is correctly getting displayed on the UI. &lt;/p&gt;

&lt;p&gt;You might think that it's costly to re-render the entire DOM again on every button click but it's not because React uses Virtual DOM algorithm where it checks what is changed on the UI and only re-renders the elements which are changed and entire DOM is not re-rendered again.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTmFgIRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860148606/IZTjwxwoS.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZTmFgIRw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860148606/IZTjwxwoS.gif" alt="counter_preview.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://8gsgu.csb.app/"&gt;Preview link&lt;/a&gt; for the Code Sandbox to try it yourself.&lt;/p&gt;

&lt;p&gt;As you can see, only the counter value is re-rendered and not the entire DOM. This is the reason React is so fast and virtual DOM makes React more useful.&lt;/p&gt;

&lt;p&gt;But still, it's not feasible to call &lt;code&gt;renderContent&lt;/code&gt; function every time we want to update the UI. So React added a concept of State.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-state-in-react"&gt;
  &lt;/a&gt;
  Introduction to State in React
&lt;/h2&gt;

&lt;p&gt;The state allows us to manage the changing data in the application. It's defined as an object where we define key-value pairs specifying various data we want to track in the application.&lt;/p&gt;

&lt;p&gt;In React, all the code we write is defined inside a component.&lt;/p&gt;

&lt;p&gt;There are mainly two ways of creating a component in React:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;class based component&lt;/li&gt;
&lt;li&gt;functional component&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;We'll start with class based component now. Later in this article, we will see a functional component way of creating components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You should know how to work with class based components as well as functional components including hooks. &lt;/p&gt;

&lt;p&gt;Instead of directly learning functional components with React hooks you should first understand class based components so it's easy to clear the basics.&lt;/p&gt;

&lt;p&gt;A Class based component is created by using an ES6 class keyword and by extending the &lt;code&gt;Component&lt;/code&gt; class provided by React like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Counter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment counter&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Counter&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nx"&gt;rootElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that, the name of the component starts with a capital letter(&lt;code&gt;Counter&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/nostalgic-burnell-57fhd?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let's explore what we're doing here.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inside the constructor function, we're first calling &lt;code&gt;super&lt;/code&gt; by passing &lt;code&gt;props&lt;/code&gt; to it. Then we've defined the state as an object with &lt;code&gt;counter&lt;/code&gt; as a property of the object.&lt;/li&gt;
&lt;li&gt;We're also binding &lt;code&gt;this&lt;/code&gt; context to &lt;code&gt;handleClick&lt;/code&gt; function so inside the &lt;code&gt;handleClick&lt;/code&gt; function we get correct context for &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then inside the &lt;code&gt;handleClick&lt;/code&gt; function, we're updating the &lt;code&gt;counter&lt;/code&gt; and logging it to the console.&lt;/li&gt;
&lt;li&gt;And inside the &lt;code&gt;render&lt;/code&gt; method, we're returning the JSX that we want to render on the UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ro-gYI28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860172160/9Reehx6c6.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ro-gYI28--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860172160/9Reehx6c6.gif" alt="counter_mutate_state.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the &lt;code&gt;counter&lt;/code&gt; is correctly getting updated as can be seen in the console but it's not getting updated on the UI.&lt;/p&gt;

&lt;p&gt;This is because we're directly updating the state inside the &lt;code&gt;handleClick&lt;/code&gt; function as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So React does not re-render the component and &lt;strong&gt;it's also a bad practice to directly update state.&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Never ever directly update/mutate state in React as it's a bad practice and it will cause issues in your application. Also, your component will not be re-rendered on state change If you make a direct state change.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#syntax-of-setstate"&gt;
  &lt;/a&gt;
  Syntax of setState
&lt;/h2&gt;

&lt;p&gt;To make the state change, React has provided a &lt;code&gt;setState&lt;/code&gt; function that allows us to update the value of the state.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;setState&lt;/code&gt; function has the following syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setState(updater, [callback])
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;updater&lt;/code&gt; can either be a function or an object&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;callback&lt;/code&gt; is an optional function that gets executed once the state is successfully updated&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Calling &lt;code&gt;setState&lt;/code&gt; automatically re-renders the entire component and all its child components. We don't need to manually re-render as seen previously using the &lt;code&gt;renderContent&lt;/code&gt; method.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-a-function-to-update-state-in-react"&gt;
  &lt;/a&gt;
  How to Use a Function to Update State in React
&lt;/h2&gt;

&lt;p&gt;Let's modify the &lt;a href="https://codesandbox.io/s/nostalgic-burnell-57fhd?file=/src/index.js"&gt;above Code Sandbox&lt;/a&gt; to use the &lt;code&gt;setState&lt;/code&gt; function for updating the state.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/withered-dust-p3emg?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you check the updated &lt;code&gt;handleClick&lt;/code&gt; function it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're passing a function as a first argument to the &lt;code&gt;setState&lt;/code&gt; function and we're returning a new state object with &lt;code&gt;counter&lt;/code&gt; incremented by 1 based on the previous value of &lt;code&gt;counter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We're using the arrow function in the above code, but using a normal function will also work.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i9jWFqBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860195497/jxwbF6-jy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i9jWFqBt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860195497/jxwbF6-jy.gif" alt="counter_updated_async.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you notice, we're correctly getting the updated value of the &lt;code&gt;counter&lt;/code&gt; on the UI but in the console, we're getting the previous &lt;code&gt;counter&lt;/code&gt; value even though we've added console.log after &lt;code&gt;this.setState&lt;/code&gt; call.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is because the &lt;code&gt;setState&lt;/code&gt; function is asynchronous in nature.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means even though we called &lt;code&gt;setState&lt;/code&gt; to increment the &lt;code&gt;counter&lt;/code&gt; value by 1, It does not happen immediately because when we call &lt;code&gt;setState&lt;/code&gt; function, the entire component gets re-rendered so React needs to check what all things need to be changed using Virtual DOM algorithm and perform various checks for an efficient update of the UI.&lt;/p&gt;

&lt;p&gt;This is the reason you may not get the updated value for &lt;code&gt;counter&lt;/code&gt; immediately after the call to &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a very important thing to keep in mind in React as you will encounter hard to debug issues If you don't write code by keeping in mind that &lt;code&gt;setState&lt;/code&gt; is asynchronous in React.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If for some reason you want to get the updated value of state immediately after &lt;code&gt;setState&lt;/code&gt; call, you can pass a function as the second argument to the &lt;code&gt;setState&lt;/code&gt; call which will be executed once the state is updated.&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/jolly-dawn-65wis?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; with that change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eTFGcCzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860218997/5eQykv2mF.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eTFGcCzb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860218997/5eQykv2mF.gif" alt="counter_updated_sync.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we're getting the correct value of &lt;code&gt;counter&lt;/code&gt; in the console as soon as it's updated on the UI.&lt;/p&gt;

&lt;p&gt;In the above demo, the &lt;code&gt;handleClick&lt;/code&gt; function looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So here, for the &lt;code&gt;setState&lt;/code&gt; function call, we're passing two arguments. The first is a function that returns a new State and the second is a callback function that will be called once the state is updated. We're just logging the updated counter value to the console in the callback function.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Even though React provides a callback function to get the updated state value immediately to perform some operation, It's recommended to use it only for quick testing or logging. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead, React recommends to use the &lt;code&gt;componentDidUpdate&lt;/code&gt; method which is React life cycle method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/youthful-pine-txb1o?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find more information about why to use &lt;code&gt;componentDidUpdate&lt;/code&gt; instead of &lt;code&gt;setState&lt;/code&gt; callback &lt;a href="https://stackoverflow.com/questions/56501409/what-is-the-advantage-of-using-componentdidupdate-over-the-setstate-callback#answer-56502614"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-simplify-state-and-method-declaration"&gt;
  &lt;/a&gt;
  How to Simplify State and Method Declaration
&lt;/h2&gt;

&lt;p&gt;If you see the constructor code in the above Code Sandbox demos, you will see that it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make use of the &lt;code&gt;this&lt;/code&gt; keyword inside the &lt;code&gt;handleClick&lt;/code&gt; event handler, we have to bind it in the constructor as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, just for declaring the state, we have to create a constructor, add a &lt;code&gt;super&lt;/code&gt; call inside it and then we can declare the state.&lt;/p&gt;

&lt;p&gt;This is not just cumbersome but also makes the code unnecessarily complicated.&lt;/p&gt;

&lt;p&gt;As the number of event handlers increases, the number of &lt;code&gt;.bind&lt;/code&gt; calls also increases. We can avoid doing this using the class properties syntax.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/sad-bassi-7fxnl?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; with the class properties syntax.&lt;/p&gt;

&lt;p&gt;Here, we've moved the state directly inside the class as:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;handlerClick&lt;/code&gt; event handler is changed to arrow function syntax like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As arrow functions do not have their own &lt;code&gt;this&lt;/code&gt; context, it will take the context as the class so there is no need of using &lt;code&gt;.bind&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;This makes code a lot simpler and easy to understand as we don't need to keep binding every event handler.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href="https://github.com/facebook/create-react-app"&gt;create-react-app&lt;/a&gt; already has in-built support for it and you can start using this syntax right now.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We'll be using this syntax from now onwards and is the popular and preferred way to write React components.&lt;/p&gt;

&lt;p&gt;If you want to learn more about this class properties syntax, check out my &lt;a href="https://javascript.plainenglish.io/how-to-write-clean-and-easy-to-understand-react-code-using-class-properties-syntax-5b375b0618d3?source=friends_link&amp;amp;sk=c170992cab9025fddb7b34b8894ea993"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-es6-shorthand-syntax"&gt;
  &lt;/a&gt;
  How to Use ES6 Shorthand Syntax
&lt;/h2&gt;

&lt;p&gt;If you check the &lt;code&gt;setState&lt;/code&gt; function call in the above code sandbox, it looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's a lot of code. Just for returning an object from a function, we're using 5 lines of code.&lt;/p&gt;

&lt;p&gt;We can simplify it to a single line as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've wrapped the object in round brackets to make it implicit return. This works because If we have a single statement in an arrow function we can skip the return keyword and curly brackets like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the above code is the same as below code:&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But as the opening curly bracket is considered as the start of the function body, we need to wrap the object inside round brackets to make it work properly.&lt;/p&gt;

&lt;p&gt;Here's an updated &lt;a href="https://codesandbox.io/s/zen-galois-pew17?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; with this change.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-an-object-as-a-state-updater-in-react"&gt;
  &lt;/a&gt;
  How to Use an Object as a State Updater in React
&lt;/h2&gt;

&lt;p&gt;In the above code, we've used a function as the first argument for &lt;code&gt;setState&lt;/code&gt; but we can also pass an object as an argument.&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/zealous-nobel-yvvmw?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7i18K063--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860244631/1v3RrY63N.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7i18K063--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860244631/1v3RrY63N.gif" alt="updated_name.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The component code looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
          &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter your name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we've added an input textbox where the user types name and it's displayed below the textbox as the user types into the textbox. &lt;/p&gt;

&lt;p&gt;In the state, we've initialized the name property to &lt;code&gt;Mike&lt;/code&gt; and we've added an &lt;code&gt;onChange&lt;/code&gt; handler to the input textbox like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mike&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
  &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Enter your name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So when we type anything in the textbox, we're updating the state with the value typed by passing an object to the &lt;code&gt;setState&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;But which form of &lt;code&gt;setState&lt;/code&gt; to use and is preferred? whether to pass an object or a function as a first argument to the &lt;code&gt;setState&lt;/code&gt; function.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;The answer is:&lt;/strong&gt; pass an object, If you don't need the &lt;code&gt;prevState&lt;/code&gt; parameter to find the next state value otherwise pass the function as the first argument to &lt;code&gt;setState&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But you need to be aware of one issue with passing an object as an argument.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href="https://codesandbox.io/s/eloquent-panini-u2ooe?file=/src/index.js"&gt;this Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the above demo, the &lt;code&gt;handleClick&lt;/code&gt; method looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're taking the current value of the &lt;code&gt;counter&lt;/code&gt; and incrementing it by 1 and it works fine as can be seen below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROVNBQGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860266756/iMr9r7yFE.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROVNBQGa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860266756/iMr9r7yFE.gif" alt="object_setstate_correct.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, take a look at &lt;a href="https://codesandbox.io/s/busy-johnson-oqvfn?file=/src/index.js"&gt;this Code Sandbox Demo&lt;/a&gt; which is a modified version of the previous Code Sandbox demo.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;handleClick&lt;/code&gt; method looks like this now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're first setting the &lt;code&gt;counter&lt;/code&gt; value to 5 and then incrementing it by 1. So the expected value of &lt;code&gt;counter&lt;/code&gt; is 6. Let's see if that's the case.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9U9Q_qzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860292261/uPJ6m7fGU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9U9Q_qzW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860292261/uPJ6m7fGU.gif" alt="object_setstate_wrong.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, when we click the button the first time, we expected the &lt;code&gt;counter&lt;/code&gt; value to become 5 but it becomes 1 and on every next click it's incremented by 1.&lt;/p&gt;

&lt;p&gt;This is because as we have seen previously, the &lt;code&gt;setState&lt;/code&gt; function is asynchronous in nature. When we call &lt;code&gt;setState&lt;/code&gt; function, the value of the &lt;code&gt;counter&lt;/code&gt; does not become 5 immediately so on the next line we're getting the &lt;code&gt;counter&lt;/code&gt; value of 0 which we've initialized the state initially. &lt;/p&gt;

&lt;p&gt;So it becomes 1 when we call &lt;code&gt;setState&lt;/code&gt; again to increment the &lt;code&gt;counter&lt;/code&gt; by 1 and it keeps on incrementing by 1 only.&lt;/p&gt;

&lt;p&gt;To fix this issue, we need to use the updater syntax of the &lt;code&gt;setState&lt;/code&gt; where we pass a function as the first argument.&lt;/p&gt;

&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/strange-silence-qhykz?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the above demo, the &lt;code&gt;handleClick&lt;/code&gt; method looks like this now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--98H2VpPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860314528/4CA-SlvHw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--98H2VpPh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860314528/4CA-SlvHw.gif" alt="object_setstate_updater.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, when we first time clicks on the button, the value of &lt;code&gt;counter&lt;/code&gt; becomes 7 which is as expected because first, we set it to 5 and then increment it by 1 twice so it becomes 7 and it remains at 7 even If we click the button multiple times because on every click we're re-setting it to 5 and incrementing twice.&lt;/p&gt;

&lt;p&gt;This is because inside the &lt;code&gt;handleClick&lt;/code&gt; we're calling &lt;code&gt;setState&lt;/code&gt; to set the &lt;code&gt;counter&lt;/code&gt; value to 5 by passing an object as the first argument to the &lt;code&gt;setState&lt;/code&gt; function and after that, we've called two &lt;code&gt;setState&lt;/code&gt; calls where we're using the function as the first argument.&lt;/p&gt;

&lt;p&gt;So how does this work correctly?&lt;/p&gt;

&lt;p&gt;When React sees a &lt;code&gt;setState&lt;/code&gt; call, it schedules an update to make a change to the state because it's asynchronous but before it completes the state change, React sees that there is another &lt;code&gt;setState&lt;/code&gt; call so React will not re-render immediately with a new &lt;code&gt;counter&lt;/code&gt; value but It merges all the &lt;code&gt;setState&lt;/code&gt; calls and updates the &lt;code&gt;counter&lt;/code&gt; based of the previous value of &lt;code&gt;counter&lt;/code&gt; as we've used the &lt;code&gt;prevState.counter&lt;/code&gt; to calculate the &lt;code&gt;counter&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;And once all the &lt;code&gt;setState&lt;/code&gt; calls are completed successfully, then only React re-renders the component. So even If there are three &lt;code&gt;setState&lt;/code&gt; calls, React will re-render the component only once, which you can confirm by adding a &lt;code&gt;console.log&lt;/code&gt; statement inside the &lt;code&gt;render&lt;/code&gt; method.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So the point to remember is that you should carefully use an object as the first argument to &lt;code&gt;setState&lt;/code&gt; call as it might result in an unpredictable outcome and use function as the first argument to get the correct result based on the previous result.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might not call &lt;code&gt;setState&lt;/code&gt; one after another as we've done in the above demo but you might call it inside another function as shown below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="nx"&gt;doSomethingElse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isLoggedIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// do something different &lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;handleClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// some code&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;isLoggedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;doSomethingElse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above code, we've defined a &lt;code&gt;isLoggedIn&lt;/code&gt; state and we've two functions &lt;code&gt;handleClick&lt;/code&gt; and &lt;code&gt;doSomethingElse&lt;/code&gt;. Inside the &lt;code&gt;handleClick&lt;/code&gt; function, we're updating the &lt;code&gt;isLoggedIn&lt;/code&gt; state value to &lt;code&gt;true&lt;/code&gt; and immediately we're calling the &lt;code&gt;doSomethingElse&lt;/code&gt; function on the next line.&lt;/p&gt;

&lt;p&gt;So inside the &lt;code&gt;doSomethingElse&lt;/code&gt; you might think that you will get the &lt;code&gt;isLoggedIn&lt;/code&gt; state as &lt;code&gt;true&lt;/code&gt; and code inside if condition will be executed but it will not be executed because &lt;code&gt;setState&lt;/code&gt; is asynchronous and the state might not be updated immediately. &lt;/p&gt;

&lt;p&gt;That's why React added lifecycle methods like &lt;code&gt;componendDidUpdate&lt;/code&gt; to do something when state or prop is updated.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So you should keep an eye to check If you're using the same &lt;code&gt;state&lt;/code&gt; variable again in the next line or next function to do some operation to avoid the undesired results. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#how-to-merge-setstate-calls-in-react"&gt;
  &lt;/a&gt;
  How to Merge setState Calls in React
&lt;/h2&gt;

&lt;p&gt;Take a look at &lt;a href="https://codesandbox.io/s/bold-cache-zcj4u?file=/src/index.js"&gt;this CodeSandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we've &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;counter&lt;/code&gt; properties declared in the state like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and &lt;code&gt;handleOnClick&lt;/code&gt; and &lt;code&gt;handleOnChange&lt;/code&gt; event handlers declared like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;handleOnClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;handleOnChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check the &lt;code&gt;setState&lt;/code&gt; calls in the above functions, you can see that, inside the &lt;code&gt;handleOnClick&lt;/code&gt; function, we're only setting the state for &lt;code&gt;counter&lt;/code&gt; and inside the &lt;code&gt;handleOnChange&lt;/code&gt; function we're only setting the state for &lt;code&gt;username&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;So we don't need to set the state for both of the state variables at the same time like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;somevalue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can update only the one which we want to update. React will manually merge the other state properties and we don't need to worry about manually merging them ourselves.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UOMQ4k9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860345126/a6YXmrocE.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UOMQ4k9F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1617860345126/a6YXmrocE.gif" alt="state_merged.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we're successfully changing the &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; independently of each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-state-in-functional-components-in-react"&gt;
  &lt;/a&gt;
  How to Use State in Functional Components in React
&lt;/h2&gt;

&lt;p&gt;Until now, we've seen how to use state in class based components. Let's now see how to use it in functional components. &lt;/p&gt;

&lt;p&gt;Functional components are similar to class components except that they do not have state and lifecycle methods. This is the reason, you may have heard of them called as stateless functional components.&lt;/p&gt;

&lt;p&gt;These components only accept props and return some JSX.&lt;/p&gt;

&lt;p&gt;Functional components make code short and easier to understand and test.&lt;/p&gt;

&lt;p&gt;They're also a little faster to execute as they don't have lifecycle methods and don't have extra data offered by &lt;code&gt;React.Component&lt;/code&gt; class which we extend in class based components.&lt;/p&gt;

&lt;p&gt;Take a look at &lt;a href="https://codesandbox.io/s/sleepy-pascal-8ugh3?file=/src/index.js"&gt;this Code Sandbox Demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, we're loading a list of 20 random users from the &lt;a href="https://randomuser.me/"&gt;random user generator API&lt;/a&gt;, when the component is loaded inside the &lt;code&gt;componentDidMount&lt;/code&gt; method like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://randomuser.me/api/?page=0&amp;amp;results=20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;users&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;results&lt;/span&gt; &lt;span class="p"&gt;}))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and once we got those users, we're setting it to the &lt;code&gt;users&lt;/code&gt; state and displaying it on the UI.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;))}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we're passing all the data that we need to display to the &lt;code&gt;User&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;User&lt;/code&gt; component looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;last&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="na"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;Email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hr&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;This &lt;code&gt;User&lt;/code&gt; component is a functional component.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A functional component is a function that starts with a capital letter and returns a JSX.&lt;/p&gt;

&lt;p&gt;Always remember to start your component name with a capital letter like &lt;code&gt;User&lt;/code&gt; whether it's a class based component or a functional component because that's how React differentiates it from normal HTML elements when we use them like &lt;code&gt;&amp;lt;User /&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we use &lt;code&gt;&amp;lt;user /&amp;gt;&lt;/code&gt;, React will check for the HTML element with the name &lt;code&gt;user&lt;/code&gt; and as there is no such HTML element, you'll not get the desired output.&lt;/p&gt;

&lt;p&gt;In the above &lt;code&gt;User&lt;/code&gt; functional component, we get the props passed to the component inside the &lt;code&gt;props&lt;/code&gt; parameter of the function.&lt;/p&gt;

&lt;p&gt;So instead of using &lt;code&gt;this.props&lt;/code&gt; as in class components, we're using just &lt;code&gt;props&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We never use &lt;code&gt;this&lt;/code&gt; keyword in functional components so it avoids the various issues associated with &lt;code&gt;this&lt;/code&gt; binding. &lt;/p&gt;

&lt;p&gt;Therefore, functional components are preferred over class components. &lt;/p&gt;

&lt;p&gt;Once we've &lt;code&gt;props&lt;/code&gt;, we're using the object destructuring syntax to get the values out of it and display on the UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-state-in-react-hooks"&gt;
  &lt;/a&gt;
  How to Use State in React Hooks
&lt;/h2&gt;

&lt;p&gt;Starting with version 16.8.0, React introduced hooks that have completely changed the way we write code in React. Using React Hooks we can use state and lifecycle methods inside functional components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;React hooks are functional components with added state and lifecycle methods.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now, there is very little to no difference between class based component and functional components. &lt;/p&gt;

&lt;p&gt;Both of them can have state and life cycle methods.&lt;/p&gt;

&lt;p&gt;But React hooks are nowadays preferred for writing React components because they make the code shorter and easier to understand. &lt;/p&gt;

&lt;p&gt;You will rarely find React components written using class components nowadays.&lt;/p&gt;

&lt;p&gt;To declare a state using React Hooks, we need to use the &lt;code&gt;useState&lt;/code&gt; hook.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook accepts a parameter which is the initial value of the state.&lt;/p&gt;

&lt;p&gt;In class based components, state is always an object but when using &lt;code&gt;useState&lt;/code&gt;, you can provide any value as the initial value like a number, string, boolean, object, array, null etc.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useState&lt;/code&gt; hook returns an array whose first value is the current value of the state and the second value is the function which we will use to update the state similar to &lt;code&gt;setState&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Let’s take an example of class based component which uses state and we will convert it into a functional component using hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;handleOnClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="p"&gt;}));&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleOnClick&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/delicate-thunder-xdpri?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; which is written using class components.&lt;/p&gt;

&lt;p&gt;Let’s convert the above code to use hooks.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactDOM&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react-dom&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Counter value is: &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Increment&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's a &lt;a href="https://codesandbox.io/s/elegant-heyrovsky-3qco5?file=/src/index.js"&gt;Code Sandbox Demo&lt;/a&gt; which is written using React hooks.&lt;/p&gt;

&lt;p&gt;As you can see, using React hooks makes the code a lot shorter and easier to understand.&lt;/p&gt;

&lt;p&gt;Let’s understand the above code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To use the &lt;code&gt;useState&lt;/code&gt; hook, we need to import it as we have done it in the first line.&lt;/li&gt;
&lt;li&gt;Inside the App component, we are calling &lt;code&gt;useState&lt;/code&gt; by passing &lt;code&gt;0&lt;/code&gt; as the initial value and using destructuring syntax, we stored the array values returned by &lt;code&gt;useState&lt;/code&gt; into &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;setCounter&lt;/code&gt; variables.&lt;/li&gt;
&lt;li&gt;It's a common convention to prefix the function name used to update the state with the &lt;code&gt;set&lt;/code&gt; keyword as in &lt;code&gt;setCounter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When we click the increment button, we are defining an inline function and calling the &lt;code&gt;setCounter&lt;/code&gt; function by passing the updated counter value.&lt;/li&gt;
&lt;li&gt;Note that, as we already have the counter value, we have used that to increment the counter using &lt;code&gt;setCounter(counter + 1)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Since there is a single statement in the inline on click handler, there is no need for moving the code into a separate function. Though you can do that if the code inside the handler becomes complex.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;If you want to learn in detail about &lt;code&gt;useState&lt;/code&gt; and other React hooks along with examples, then check out my &lt;a href="https://levelup.gitconnected.com/an-introduction-to-react-hooks-50281fd961fe?source=friends_link&amp;amp;sk=89baff89ec8bc637e7c13b7554904e54"&gt;Introduction to React Hooks&lt;/a&gt; article.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;Want to learn all ES6+ features in detail including let and const, promises, various promise methods, array and object destructuring, arrow functions, async/await, import and export and a whole lot more from scratch?&lt;/p&gt;

&lt;p&gt;Check out my &lt;a href="https://modernjavascript.yogeshchavan.dev/"&gt;Mastering Modern JavaScript&lt;/a&gt; book. This book covers all the pre-requisites for learning React and helps you to become better at JavaScript and React.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check out free preview contents of the book &lt;a href="https://www.freecodecamp.org/news/learn-modern-javascript/"&gt;here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Also, you can check out my &lt;strong&gt;free&lt;/strong&gt; &lt;a href="https://yogeshchavan.podia.com/react-router-introduction"&gt;Introduction to React Router&lt;/a&gt; course to learn React Router from scratch.&lt;/p&gt;

&lt;p&gt;Want to stay up to date with regular content regarding JavaScript, React, Node.js? &lt;a href="https://www.linkedin.com/in/yogesh-chavan97/"&gt;Follow me on LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/3w0DGum"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Taa9-Eif--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gist.github.com/myogeshchavan97/98ae4f4ead57fde8d47fcf7641220b72/raw/c3e4265df4396d639a7938a83bffd570130483b1/banner.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>What are Data Structures?</title>
      <author>Rishabh Singh ⚡</author>
      <pubDate>Thu, 08 Apr 2021 05:52:47 +0000</pubDate>
      <link>https://dev.to/mindninjax/what-are-data-structures-ec5</link>
      <guid>https://dev.to/mindninjax/what-are-data-structures-ec5</guid>
      <description>&lt;p&gt;If you are preparing for a coding interview, implement a new algorithm or maybe you simply wanna help yourself with your computer science academic curriculum, the knowledge of Data Structures is a must. &lt;/p&gt;

&lt;p&gt;In this article, we will cover all the essential yet basic knowledge you need to get started learning Data Structures and in the following parts, we will take a deep dive into all the popular data structures to help you get familiar with them as fast as possible.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-coding-in-simple-terms"&gt;
  &lt;/a&gt;
  What is Coding - in simple terms?
&lt;/h2&gt;

&lt;p&gt;If you are from a computer science background then you may already know quite a few things about what exactly coding is but talking in the simplest terms possible &amp;amp; in the term that's relevant to our topic, coding is nothing but manipulation of data. &lt;/p&gt;

&lt;p&gt;Now, this may sound a little absurd to you but if you look closely all we do in coding is structure, organize &amp;amp; manage data, in short, all we do is deal with data in one or another way.&lt;/p&gt;

&lt;p&gt;Simplifying this definition, we can say that data structures are a way to organize and manage data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-data-structures"&gt;
  &lt;/a&gt;
  What is Data Structures?
&lt;/h2&gt;

&lt;p&gt;We already saw what basically a data structure is, in simple terms. Now coming to a more generic definition, let's have a glance over the basic Wikipedia definition of Data Structures.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;From this definition, we can extract 3 main points about Data Structures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a collection of data values&lt;/li&gt;
&lt;li&gt;There is a relationship among those data values&lt;/li&gt;
&lt;li&gt;And there are certain operations that can be performed on them to manipulate it&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let's verify these points with an example of a simple one-dimensional array.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Don't worry if you know nothing about arrays right now, we are going to cover arrays in future parts of this series. &lt;/p&gt;

&lt;p&gt;For now, you can refer to the Wikipedia definition here but basically, an array is a collection of data that usually belongs to the same type. &lt;/p&gt;

&lt;p&gt;For example &lt;strong&gt;&lt;em&gt;an array of numbers&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfb9QMBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.geeksforgeeks.org/wp-content/uploads/array-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Wfb9QMBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://media.geeksforgeeks.org/wp-content/uploads/array-2.png" alt="https://media.geeksforgeeks.org/wp-content/uploads/array-2.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now if you look closely at the above illustration, you will notice that an array can contain multiple units of data that usually belong to the same type. In this case, it is an array of alphabets. &lt;/p&gt;

&lt;p&gt;Along with that, we have some notations below the array which starts from 0. These are called indexes and help us to access the values of the array at that specific index. You don't have to worry about the 3 digit numbers above the array as of now so let's arbitrarily ignore them. &lt;/p&gt;

&lt;p&gt;Now coming back to our points, we can say that the first point is true since the array is a collection of data, the second point is true as well since there is a relationship between the data values which is described by the index number.&lt;/p&gt;

&lt;p&gt;And we can definitely perform operations on the array to maybe delete an element, move an element, add a new element, etc. Hence the third point also ends up being true. &lt;/p&gt;

&lt;p&gt;So you just saw how data structures like arrays fit well into the definition of data structures &amp;amp; follow the same fundamental points described.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-summary"&gt;
  &lt;/a&gt;
  Final Summary
&lt;/h2&gt;

&lt;p&gt;A Data Structure is nothing but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a collection of data&lt;/li&gt;
&lt;li&gt;that data is somehow related to one another&lt;/li&gt;
&lt;li&gt;&amp;amp; you can perform operations on it to manipulate it as per your needs&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#support"&gt;
  &lt;/a&gt;
  Support
&lt;/h2&gt;

&lt;p&gt;Thank you so much for reading! I hope you learned something new today. Please leave a like, a lovely comment, or feedback &amp;amp; also consider following me as I regularly post useful &amp;amp; informative articles to help you become a better programmer. &lt;/p&gt;

&lt;p&gt;If you like my work please consider &lt;a href="https://buymeacoff.ee/mindninjaX"&gt;Buying me a Coffee&lt;/a&gt; so that I can bring more projects, more articles for you.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SNezDmj5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png" alt="https://dev-to-uploads.s3.amazonaws.com/i/5irx7eny4412etlwnc64.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also if you have any questions or doubts feel free to contact me on &lt;a href="https://twitter.com/mindninjaX"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/mindninjax/"&gt;LinkedIn&lt;/a&gt; &amp;amp; &lt;a href="https://github.com/mindninjaX"&gt;GitHub&lt;/a&gt;. Or you can also post a comment/discussion &amp;amp; I will try my best to help you :D&lt;/p&gt;

</description>
      <category>java</category>
      <category>cpp</category>
      <category>python</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>Web Security: Hashing, Salting, and Encryption</title>
      <author>Joseph Maurer</author>
      <pubDate>Thu, 08 Apr 2021 05:11:57 +0000</pubDate>
      <link>https://dev.to/mwrpwr/web-security-hashing-salting-and-encryption-l30</link>
      <guid>https://dev.to/mwrpwr/web-security-hashing-salting-and-encryption-l30</guid>
      <description>&lt;p&gt;As a web developer or engineer it is imperative that your users’ information is safe and secure in a database and during communication with your front end. But adding extra security to your code can add complexity to how your system works. Here is some basic terminology that every developer needs to know at a minimum before handling user information.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Hashing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Passwords and sensitive information should never be transmitted as plain text. It can and will be stolen, no matter how many users you have on your system. A hash generates a unique fixed length output representation of a given input. A website should maintain a known secret key, and combine both the password and key to generate a scrambled output. Even if a bad actor were to acquire the hashed value of the password, they would still not be able to work out what the password is if a proper salt is used. Hashing is deterministic and therefore is not good enough on its own and not a replacement for encryption. But at a bare minimum it is a step up from transmitting raw text.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5Rp2wRBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/659/0%2Aw8QVgl_Z3KCxv1_7" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Rp2wRBG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/659/0%2Aw8QVgl_Z3KCxv1_7"&gt;&lt;/a&gt;Here is an ASP.NET Core example of how to hash a string. Source: &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/security/data-protection/consumer-apis/password-hashing?view=aspnetcore-5.0"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Salting&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;If you notice in the code above, there is a variable called salt that is a 128 byte array. What in the world is this? Salting is the addition of unique, random characters known only to the site at the beginning of the string that you want to hash. The salt is typically then stored by the site and used when validating the hash. The reason that a salt is needed is because inputs could potentially be hashed to the same string, but since the salt is random the hashes will then be unique.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pro tip:&lt;/em&gt; You can hash and sal multiple times to increase the difficulty in breaking the security.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Encryption is a function of cryptography and is similar to hashing, except encryption is designed to be undone, while hashing is not. Let’s take a look at an example of how to encrypt data in an ASP.NET c# environment. The using aes variable in the example is what is doing the encryption. Aes is a reference to the AES encryption algorithm which you can read more about &lt;a href="https://www.educative.io/edpresso/what-is-the-aes-algorithm"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nhbag7sI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/695/0%2ALUwMXnLt_C1bRWRN" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nhbag7sI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/695/0%2ALUwMXnLt_C1bRWRN"&gt;&lt;/a&gt;Here is an ASP.NET Core example of how to encrypt data. Source: &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/security/encrypting-data"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Keys&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Symmetric and Asymmetric Keys are a great security practice for keeping data safe. Continuing with the above example, AES is a symmetric algorithm meaning that you need to use the same key to encrypt and decrypt the data. As with everything in this post, never store a cryptographic key in plaintext or transfer a key between machines in plain text. It’s not sage. Instead, consider using a &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-store-asymmetric-keys-in-a-key-container"&gt;secure key container&lt;/a&gt; to store any cryptographic keys. In the below example we create an EncryptionMethod object that is initialize to the URL identifies of the cryptographic algorithm used to generate the AES key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E9GFtRXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/435/0%2ADQ2oijUceMLdz-C7" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--E9GFtRXw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/435/0%2ADQ2oijUceMLdz-C7"&gt;&lt;/a&gt;Encrypt XML Elements with Symmetric Keys Source: &lt;a href="https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-encrypt-xml-elements-with-symmetric-keys"&gt;Microsoft Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are so many resources out there that can help you if you are trying to add more security to your platform. And the best practices can really save you and your company later down the line. Personally I have never had to write production encryption code, but doing research on the topic makes me want to know more about the topic!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/maurerpwer"&gt;Tweet me&lt;/a&gt; if you work with encryption and any challenges that you face!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fXqZV8Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De5d9a49621db" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fXqZV8Eb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://medium.com/_/stat%3Fevent%3Dpost.clientViewed%26referrerSource%3Dfull_rss%26postId%3De5d9a49621db" width="1" height="1" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>security</category>
      <category>csharp</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>React App For Beginner's</title>
      <author>LP</author>
      <pubDate>Thu, 08 Apr 2021 05:00:38 +0000</pubDate>
      <link>https://dev.to/lakpa/react-app-for-beginners-3jj5</link>
      <guid>https://dev.to/lakpa/react-app-for-beginners-3jj5</guid>
      <description>&lt;p&gt;Hello friends ,&lt;br&gt;
Here is a link  &lt;a href="https://lp-codes.github.io/My-First-React-App/#/My-First-React-App/"&gt;https://lp-codes.github.io/My-First-React-App/#/My-First-React-App/&lt;/a&gt; of Live App I have tried to create using react, it might be useful for beginner's as a concept who are learning react .I have tried to cover react components such as routers ,hooks,useffect &amp;amp; using bootstrap,fontawesome,materialui ,api's with react -- There is basic home page with external media links , weather app, To-do-App with local storage &amp;amp; a Covid Tracker .Attaching some Snaps from link,&lt;br&gt;
If more info is required kindly ping me ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aLSVlMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58it3mnqiqzlr45jsxd0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aLSVlMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58it3mnqiqzlr45jsxd0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcjchfHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obmip3my3br92wz7vsex.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcjchfHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obmip3my3br92wz7vsex.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UPyc6pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj5kegj11zeolvajjgfg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UPyc6pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj5kegj11zeolvajjgfg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RLKYIKcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98v3dd8c2b714b5hcqyn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RLKYIKcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98v3dd8c2b714b5hcqyn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
 Git-repo - &lt;a href="https://github.com/LP-Codes/My-First-React-App/tree/gh-pages"&gt;https://github.com/LP-Codes/My-First-React-App/tree/gh-pages&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Spring Boot + React Redux example</title>
      <author>Tien Nguyen</author>
      <pubDate>Thu, 08 Apr 2021 04:10:26 +0000</pubDate>
      <link>https://dev.to/tienbku/spring-boot-react-redux-example-378d</link>
      <guid>https://dev.to/tienbku/spring-boot-react-redux-example-378d</guid>
      <description>&lt;p&gt;In this tutorial, we will learn how to build a full stack React Redux + Spring Boot example with a CRUD App. The back-end server uses Spring Boot with Spring Web MVC for REST APIs and Spring Data JPA for interacting with embedded database (H2 database). Front-end side is made with React, Redux, React Router, Axios &amp;amp; Bootstrap.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://bezkoder.com/spring-boot-react-redux-example/"&gt;https://bezkoder.com/spring-boot-react-redux-example/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Spring Boot React Redux example Overview&lt;/h2&gt;

&lt;p&gt;We will build a full-stack Spring Boot &amp;amp; React Redux Tutorial Application in that:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutorial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;We can create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;We can also find Tutorials by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The images below shows screenshots of our System.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyOXiMa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzu36q3g1qfoy4x6odqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyOXiMa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzu36q3g1qfoy4x6odqw.png" alt="spring-boot-react-redux-example-crud-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve all Tutorials:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--giyZm_GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuod1ort3zciud545akr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--giyZm_GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuod1ort3zciud545akr.png" alt="spring-boot-react-redux-example-crud-retrieve-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;strong&gt;Edit&lt;/strong&gt; button to retrieve an item:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BaQdd8mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uac0f34ohgk5a6jautj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BaQdd8mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uac0f34ohgk5a6jautj0.png" alt="spring-boot-react-redux-example-crud-retrieve-one-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this Page, you can:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;change status to &lt;strong&gt;Published&lt;/strong&gt; using &lt;strong&gt;Publish&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;remove the Tutorial from Database using &lt;strong&gt;Delete&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;update the Tutorial details on Database with &lt;strong&gt;Update&lt;/strong&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2h5__0q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x32hs301b1ml0z185p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2h5__0q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x32hs301b1ml0z185p.png" alt="spring-boot-react-redux-example-crud-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search items by title:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x-3gAA2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqojbiaf0cy91s9iei4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x-3gAA2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqojbiaf0cy91s9iei4.png" alt="spring-boot-react-redux-example-crud-search-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Architecture of Spring Boot React Redux example&lt;/h2&gt;

&lt;p&gt;This is the application architecture we're gonna build:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V73WV8fU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6yyf7owp3h5si5gs63b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V73WV8fU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6yyf7owp3h5si5gs63b.png" alt="spring-boot-react-redux-example-crud-architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Boot exports REST Apis using Spring Web MVC &amp;amp; interacts with embedded H2 Database using Spring JPA&lt;/li&gt;
&lt;li&gt;React Client sends HTTP Requests and retrieves HTTP Responses using &lt;em&gt;Axios&lt;/em&gt;, consume data on Redux which provides state to the Components. React Router is used for navigating to pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also find the Spring Restful Apis that works with other databases here:&lt;br&gt;
- &lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring JPA + PostgreSQL&lt;/a&gt;&lt;br&gt;
- &lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api/"&gt;Spring JPA + MySQL&lt;/a&gt;&lt;br&gt;
- &lt;a href="https://bezkoder.com/spring-boot-mongodb-crud/"&gt;Spring Data + MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Spring Boot Rest Apis Back-end&lt;/h2&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;These are APIs that Spring Boot App will export:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table width="100%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We make CRUD operations &amp;amp; finder methods with Spring Data JPA's &lt;code&gt;JpaRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The database will be H2 Database (in memory or on disk) by configuring project dependency &amp;amp; datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
        &lt;li&gt;Java 8&lt;/li&gt;
        &lt;li&gt;Spring Boot 2.4 (with Spring Web MVC, Spring Data JPA)&lt;/li&gt;
        &lt;li&gt;H2 Database&lt;/li&gt;
        &lt;li&gt;Maven 3.6.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project Structure&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-ySnnpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0huboi7we5v3207gbll5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-ySnnpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0huboi7we5v3207gbll5.png" alt="spring-boot-react-redux-example-crud-server-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;Tutorial&lt;/code&gt; data model class corresponds to entity and table &lt;em&gt;tutorials&lt;/em&gt;.&lt;br&gt;
– &lt;code&gt;TutorialRepository&lt;/code&gt; is an interface that extends &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;JpaRepository&lt;/a&gt; for CRUD methods and custom finder methods. It will be autowired in &lt;code&gt;TutorialController&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;TutorialController&lt;/code&gt; is a &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;RestController&lt;/a&gt; which has request mapping methods for RESTful requests such as: &lt;em&gt;getAllTutorials&lt;/em&gt;, &lt;em&gt;createTutorial&lt;/em&gt;, &lt;em&gt;updateTutorial&lt;/em&gt;, &lt;em&gt;deleteTutorial&lt;/em&gt;, &lt;em&gt;findByPublished&lt;/em&gt;...&lt;br&gt;
– Configuration for Spring Datasource, JPA &amp;amp; Hibernate in &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;br&gt;
– &lt;strong&gt;pom.xml&lt;/strong&gt; contains dependencies for Spring Boot and H2 Database.&lt;/p&gt;

&lt;h2&gt;React Redux Front-end&lt;/h2&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;This is React components that we're gonna implement:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gLmD52C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fip8rrzxcni7n30vrtk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gLmD52C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fip8rrzxcni7n30vrtk.png" alt="spring-boot-react-redux-example-crud-client-components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– The &lt;code&gt;App&lt;/code&gt; component is a container with React &lt;code&gt;Router&lt;/code&gt;. It has &lt;code&gt;navbar&lt;/code&gt; that links to routes paths.&lt;/p&gt;

&lt;p&gt;– Three components that dispatch &lt;strong&gt;&lt;em&gt;actions&lt;/em&gt;&lt;/strong&gt; to &lt;code&gt;Redux Thunk Middleware&lt;/code&gt; which uses &lt;code&gt;TutorialDataService&lt;/code&gt; to call Rest API.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;code&gt;TutorialsList&lt;/code&gt; component gets and displays Tutorials.&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;Tutorial&lt;/code&gt; component has form for editing Tutorial's details based on &lt;code&gt;:id&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;AddTutorial&lt;/code&gt; component has form for submission new Tutorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;– &lt;code&gt;TutorialDataService&lt;/code&gt; uses &lt;code&gt;axios&lt;/code&gt; to make HTTP requests and receive responses.&lt;/p&gt;

&lt;p&gt;This diagram shows how Redux elements work in our React Application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnMkFP6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hlfk958dgeryz4dwvw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnMkFP6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hlfk958dgeryz4dwvw9.png" alt="spring-boot-react-redux-example-crud-store-architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're gonna create Redux &lt;code&gt;store&lt;/code&gt; for storing &lt;code&gt;tutorials&lt;/code&gt; data. Other React Components will work with the Store via dispatching an &lt;code&gt;action&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reducer&lt;/code&gt; will take the action and return new &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
    &lt;li&gt;React 17/16&lt;/li&gt;
    &lt;li&gt;react-redux 7.2.3&lt;/li&gt;
    &lt;li&gt;redux 4.0.5&lt;/li&gt;
    &lt;li&gt;redux-thunk 2.3.0&lt;/li&gt;
    &lt;li&gt;react-router-dom 5.2.0&lt;/li&gt;
    &lt;li&gt;axios 0.21.1&lt;/li&gt;
    &lt;li&gt;bootstrap 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project Structure&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NAm3XaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0pmxledyj2pe0iru91w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NAm3XaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0pmxledyj2pe0iru91w.png" alt="spring-boot-react-redux-example-crud-client-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;package.json&lt;/strong&gt; contains main modules: &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-router-dom&lt;/code&gt;, &lt;code&gt;react-redux&lt;/code&gt;, &lt;code&gt;redux&lt;/code&gt;, &lt;code&gt;redux-thunk&lt;/code&gt;, &lt;code&gt;axios&lt;/code&gt; &amp;amp; &lt;code&gt;bootstrap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;App&lt;/code&gt; is the container that has &lt;code&gt;Router&lt;/code&gt; &amp;amp; navbar.&lt;/li&gt;
&lt;li&gt;There are 3 components: &lt;code&gt;TutorialsList&lt;/code&gt;, &lt;code&gt;Tutorial&lt;/code&gt;, &lt;code&gt;AddTutorial&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;http-common.js&lt;/strong&gt; initializes axios with HTTP base Url and headers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TutorialDataService&lt;/code&gt; has methods for sending HTTP requests to the Apis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.env&lt;/strong&gt; configures &lt;em&gt;port&lt;/em&gt; for this React CRUD App.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About Redux elements that we're gonna use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;actions&lt;/strong&gt; folder contains the action creator (&lt;em&gt;tutorials.js&lt;/em&gt; for CRUD operations and searching).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;reducers&lt;/strong&gt; folder contains the reducer (&lt;em&gt;tutorials.js&lt;/em&gt;) which updates the application state corresponding to dispatched action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more steps and Source code, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-react-redux-example/"&gt;https://bezkoder.com/spring-boot-react-redux-example/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;Related Posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-pagination/"&gt;React + Spring Boot: Pagination example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-react-jwt-auth/"&gt;Spring Boot + React: Login example with JWT Authentication &amp;amp; Spring Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-file-upload-spring-boot/"&gt;React Upload/Download Files to/from Spring Boot Rest Apis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run both projects in one place:&lt;br&gt;
&lt;a href="https://bezkoder.com/integrate-reactjs-spring-boot/"&gt;How to integrate React.js with Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front-end without Redux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-crud-web-api/"&gt;Using React Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-hooks-crud-axios-api/"&gt;Using React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-material-ui-examples-crud/"&gt;Using React with Material UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Spring Restful Apis for other databases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring JPA + PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api/"&gt;Spring JPA + MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-mongodb-crud/"&gt;Spring Data + MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>spring</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>I made a Climate Change News App</title>
      <author>Sanjeev Sharma</author>
      <pubDate>Thu, 08 Apr 2021 04:10:18 +0000</pubDate>
      <link>https://dev.to/thesanjeevsharma/i-made-a-climate-change-news-app-1n5a</link>
      <guid>https://dev.to/thesanjeevsharma/i-made-a-climate-change-news-app-1n5a</guid>
      <description>&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;I've been working on a little news app for the past few weekends. It's a news app that only focuses on "climate change". It shows climate change related articles from different sources.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="http://polrr.news"&gt;http://polrr.news&lt;/a&gt;&lt;br&gt;
Tech Stack: React(TS), NodeJS, MongoDB, AWS&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-i-made-this"&gt;
  &lt;/a&gt;
  Why I made this?
&lt;/h4&gt;

&lt;p&gt;This is not my first project using MERN, I have built some decent apps for other people(at work or helped some friends) but I never added a good project to my portfolio. I do have some apps, but they are either on Heroku or Netlify and those apps are more like experiment stuff. I've abandoned a lot of projects too. &lt;/p&gt;

&lt;p&gt;This time I wanted to make something from start to finish. Something that can go on my portfolio/resume. Something people can actually use and benefit from it.&lt;/p&gt;

&lt;p&gt;Why this specific news app?&lt;/p&gt;

&lt;p&gt;I could've easily made a Netflix or YouTube clone and added it to my resume. People do it and they get jobs based on that. If you're a beginner that's fine. But for a guy like me, who's not a beginner that might not look nice + it's not even fun as I already know the flow and everything. Also, nobody's going to use it. After one gets a job, that project will go into the pool of unfinished projects.&lt;/p&gt;

&lt;p&gt;As developers, we have the privilege to build stuff that can actually make someones' life easier. Almost anybody can come up with an idea, but the ability to execute only lies among a few.&lt;/p&gt;

&lt;p&gt;These are the few reasons I chose to develop this specific app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Chance of people using this app &amp;gt; Chances of anybody using a clone. I can get actual user feedback and add new features based on that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I wanted to try Typescript. I wanted it to be something small so I can focus more on Typescript and less on thinking about the app features and their complexity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I wanted this to be a refresher for my MERN skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's not something recruiters see every day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MOST IMPORTANT! As I mentioned I have this habit of abandoning projects. I didn't wanna pick something huge as I might get bored and leave the project unfinished.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the first time, I brought a domain for a project. 🙌&lt;/p&gt;

&lt;p&gt;It's not HTTPS, because I can't afford it. LOL. 😁&lt;/p&gt;

&lt;p&gt;I have a few more ideas to work on. I'll be experimenting with new technologies and try to build something people can actually use.&lt;/p&gt;

&lt;p&gt;All of this information wasn't necessary, but I hope this helps out someone who's deciding to start on a new project.&lt;/p&gt;

&lt;p&gt;Also, I'll be writing an article on hosting on AWS(+ nginx). If you are interested, let's stay connected.&lt;/p&gt;

&lt;p&gt;Thank you. ✌️&lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://www.twitter.com/thesnjvsharma"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/thesanjeevsharma"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>showdev</category>
    </item>
    <item>
      <title>What to review in ReactJS Code?</title>
      <author>Neha Sharma </author>
      <pubDate>Thu, 08 Apr 2021 03:38:47 +0000</pubDate>
      <link>https://dev.to/hellonehha/what-to-review-in-reactjs-code-1co7</link>
      <guid>https://dev.to/hellonehha/what-to-review-in-reactjs-code-1co7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-components"&gt;
  &lt;/a&gt;
  1. Components
&lt;/h1&gt;

&lt;p&gt;The first thing to check in the PR - "Is developer is following '&lt;a href="https://reactjs.org/docs/thinking-in-react.html"&gt;thinking in React&lt;/a&gt;'" suggested by the ReactJS team? If the developer hasn't broken the code in components then flag it.&lt;/p&gt;

&lt;p&gt;Example: instead of making &lt;code&gt;Homepage.jsx&lt;/code&gt; as one whole component, break the page into the components. This exercise should be done at 2 levels: &lt;code&gt;Application&lt;/code&gt; level and &lt;code&gt;page&lt;/code&gt; level. &lt;/p&gt;

&lt;p&gt;At the application level, identifies the reusable (Global) components, and at the Page-level repeat the same exercise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think about: reusability, and global and generic components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Components"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, make sure that the developer has not put down all the business logic in one component.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-props-amp-propsdrilling"&gt;
  &lt;/a&gt;
  2. props &amp;amp; props-drilling
&lt;/h1&gt;

&lt;p&gt;As ReactJS developers or web developers, we are used to putting the content or values hardcoded in the code. &lt;/p&gt;

&lt;p&gt;One of the features of ReactJS is &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;props&lt;/a&gt; this gives flexibility as well as control over the content and values.&lt;/p&gt;

&lt;p&gt;So, do review which value can be moved to the props? Also, props help in the flow of the data between the components. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But be cautious about "prop drilling". This could lead to a re-render which will be expensive for the performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Props"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-states"&gt;
  &lt;/a&gt;
  3. States
&lt;/h1&gt;

&lt;p&gt;One more feature of ReactJS is &lt;code&gt;states&lt;/code&gt;. As a beginner ReactJS developer, while handling events or the different states of the application, developers get confused about managing state in React or JavaScript way or states is UI or APP.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a ReactJS developer, you should handle states via only the ReactJS way, not the JavaScript way. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, keep asking would this state is UI state or application state? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If it is a UI state then it should handle at the component level and if it is app-level then lift the states to the parent level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/States"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-consistency-in-styling-method"&gt;
  &lt;/a&gt;
  4. Consistency in styling method
&lt;/h1&gt;

&lt;p&gt;Styling in React comes with a lot of options from CSS, SASS, Styled components, CSS Modules, etc. It is important to follow one way of styling. &lt;/p&gt;

&lt;p&gt;If the developer has no consistency in styling then flag it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow one way of styling. Consistency is important for the clean and maintainable code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#5-consistency-in-file-extension"&gt;
  &lt;/a&gt;
  5. Consistency in file extension
&lt;/h1&gt;

&lt;p&gt;React supports JS and JSX both extensions. Have consistency, you can have components in JSX or JS and follow the same with reducers, Actions, etc.&lt;/p&gt;

&lt;p&gt;If the developer has no consistency in the file extension then flag it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Consistency in file extension is important for the clean architecture of the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#6-semantic-html"&gt;
  &lt;/a&gt;
  6. Semantic HTML
&lt;/h1&gt;

&lt;p&gt;React's JSX at the end of the day is HTML only. Hence, it is important to write the semantic JSX(HTML). Why? because &lt;code&gt;Header.jsx (&amp;lt;Header /&amp;gt;)&lt;/code&gt; it not equivalent to HTML header tag.&lt;/p&gt;

&lt;p&gt;So, review the JSX if the semantic code is written or not. If not, then flag it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write clean and semantic JSX (HTML).Always remember JSX is HTML at the end of the day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Semantic-html"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-context-api-before-redux"&gt;
  &lt;/a&gt;
  7. Context API before Redux
&lt;/h1&gt;

&lt;p&gt;While starting with the React project review the scale of the project. When the project is small, use Context API. With large applications migrate to state management libraries such as MobX, Redux, etc.&lt;/p&gt;

&lt;p&gt;If the developer is using Redux or MobX where the ContextAPI can be used, you know the drill :) &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Start with small as per the project scope and scale when required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/ContextAPI"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-functional-code"&gt;
  &lt;/a&gt;
  8. Functional Code
&lt;/h1&gt;

&lt;p&gt;While creating components in ReactJS it is very common to see all the code is written within the &lt;code&gt;component&lt;/code&gt; only. ReactJS is all about writing functional code.&lt;/p&gt;

&lt;p&gt;Move the methods or functions from the component. This will break the code into functional code as well as this will make the components reusable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Functional-code"&gt;Code Example&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-props-validation"&gt;
  &lt;/a&gt;
  9. Props Validation
&lt;/h1&gt;

&lt;p&gt;As ReactJS developers make habit of static props validation. This will help the developers to avoid early bugs and issues while doing development. &lt;/p&gt;

&lt;p&gt;By using props validation we can also state which props are required, what the default value should be, and a lot more.&lt;/p&gt;

&lt;p&gt;Use PropTypes, Flow, or TypeScript with ReactJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Props-validation"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-clean-folder-structure"&gt;
  &lt;/a&gt;
  10. Clean Folder Structure
&lt;/h1&gt;

&lt;p&gt;Create React App (CRA) is the most popular way of the bootstrapping React project. However, most of the developers forget to clean the folder before pushing it to production. It is important to delete all the unnecessary files and folders which are not required. CRA allows developers to design their architecture. However, I would suggest sticking to what most of the popular react developers are following.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#11-testing"&gt;
  &lt;/a&gt;
  11. Testing
&lt;/h1&gt;

&lt;p&gt;This is one more good practice for ReactJS developers. One can start with the snapshot testing then move to Unit testing, and E2E testing. Remember, that there are a lot of advantages of testing in the long term.&lt;/p&gt;

&lt;p&gt;You can use Jest, Enzyme, or React-Testing library &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#12-avoid-over-engineering"&gt;
  &lt;/a&gt;
  12. Avoid Over Engineering
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Avoid 'Over-Engineering' and Keep it Simple Silly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look at the problem and think of the simplest solution rather than over-complicated it. As well as, in the attempt of writing less code do not write non-readable code. Remember, we developers are working in collaboration. Our code should be readable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#13-hooks-before-lifecycle"&gt;
  &lt;/a&gt;
  13. Hooks before lifecycle
&lt;/h1&gt;

&lt;p&gt;Thanks to Hooks from the ReactJS team. Now, instead of moving the components to class or smart we can keep the components functional and use hooks. &lt;/p&gt;

&lt;p&gt;This will help in the performance improvement as now you are moving the components from class to functional.&lt;/p&gt;

&lt;p&gt;Happy Code Review!! &lt;/p&gt;

&lt;p&gt;Let me know what are your tips for the code review in the comments :) &lt;/p&gt;

</description>
    </item>
    <item>
      <title>SOLID: Principio de Abierto/Cerrado</title>
      <author>Victor Manuel Pinzon</author>
      <pubDate>Thu, 08 Apr 2021 03:13:26 +0000</pubDate>
      <link>https://dev.to/victorpinzon198/solid-principio-de-abierto-cerrado-2mjp</link>
      <guid>https://dev.to/victorpinzon198/solid-principio-de-abierto-cerrado-2mjp</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;em&gt;Este articulo es una continuación a la publicación de &lt;a href="https://dev.to/victorpinzon198/solid-principio-de-responsabilidad-unica-5ffo"&gt;principios SOLID&lt;/a&gt;.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;El segundo principio SOLID es probablemente el más importante de todos, pero el menos utilizado. La poca inclusión de este principio se ha debido a su débil y confusa definición.&lt;/p&gt;

&lt;p&gt;El principio de abierto/cerrado fue acuñado por Bertrand Meyer en su libro &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Object-Oriented_Software_Construction"&gt;Object Oriented Software Construction&lt;/a&gt;&lt;/em&gt;, quien lo definió de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Las entidades de software (clases, módulos, funciones, etc) deben de estar abierta para su extensión, pero cerradas para su modificación.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La definición original por Meyer es ambigua y poco aplicable en la practica, lo que ocasionó que muchos desarrolladores de la época ignoraran la aplicación de dicho principio. Años despues, Bob Martin amplió la definición de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;El comportamiento de un sistema debería de ser capaz de ser extendido sin necesidad de modificar dicho sistema.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La explicación dada por Bob Martin es más clara y es compatible con la arquitectura de Plugin, la cual estaba en su apogeo en esa época. Esta arquitectura indica que un sistema de software debería de ser construido con la capacidad de agregar plugins a ciertos componentes, sin que estos sepan los detalles de la implementación de los mismos. &lt;/p&gt;

&lt;p&gt;Por ejemplo, un sistema integrado de desarrollo (IDE) permite ampliar su funcionamiento mediante plugins, tales como: Lite Server, Remote SSH, etc., esto sin afectar el funcionamiento del mismo. El IDE permite agregar plugins siempre y cuando cada extensión siga las reglas definidas para su implementación. Es decir, el sistema se encuentra abierto para su extensión mediante plugins pero no para la modificación de las funciones centrales del IDE.&lt;/p&gt;

&lt;p&gt;Otro ejemplo del principio de abierto/cerrado son las librerías de software. Estas se desarrollan con el objetivo que sean utilizadas en diferentes contextos e implementadas en todos los casos posibles, es decir, las librerías por naturaleza deben de estar abiertas para su extensión. Sin embargo, un cambio en el core de la librería podría significar cambios en todos los puntos y contextos donde dicha librería ha sido utilizada, en otras palabras, las librerías por naturaleza deben de estar cerradas para modificaciones.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo a nivel de código. Actualmente laboras en una empresa de desarrollo de juegos de PC. Tu jefe, como parte del próximo proyecto, te solicita implementar una librería que permita el cálculo del área de rectángulos. Esta será útil para la maquetación de los personajes del juego. &lt;/p&gt;

&lt;p&gt;Para llevar a cabo esta tarea defines las siguientes clases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;altura&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*Getters / Setters*/&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La clase &lt;strong&gt;Rectangulo&lt;/strong&gt; almacena la base y altura de la figura geométrica.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBase&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAltura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La clase &lt;strong&gt;CalculadorArea&lt;/strong&gt; define el método encargado de calcular el área del rectángulo, el cual se realiza mediante la multiplicación de la base por la altura.&lt;/p&gt;

&lt;p&gt;El calculador de areas se utiliza de la siguiente forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.yourregulardeveloper.main&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rec1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;13.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rec2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.89&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.85&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de rectangulo 1: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec1&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de rectangulo 2: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tu librería termina siendo un éxito y es utilizada en varios proyectos adicionales que está llevando a cabo la empresa. Meses después tu jefe te solicita que la librería también calcule el área de cuadrados. &lt;/p&gt;

&lt;p&gt;Al momento de empezar a diseñar tu implementación te das cuenta de dos factores:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El cuadrado es un caso especial de rectángulo.&lt;/li&gt;
&lt;li&gt;El área del cuadrado se calcula de forma diferente al rectángulo tradicional. Está se calcula elevando el tamaño de sus lados al cuadrado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estos factores resaltan que el código de tu librería no cumple con el principio de abierto/cerrado. Por supuesto que podrías debatir que en la clase &lt;strong&gt;Rectangulo&lt;/strong&gt; se puede asignar el mismo valor para la base/altura y se obtendría el mismo funcionamiento para las figuras de tipo cuadrado ¿Pero qué sucede si en futuros requerimientos se solicita el cálculo del área de un circulo o de cualquier otra figura geométrica? &lt;/p&gt;

&lt;p&gt;La respuesta es la implementación del principio abierto/cerrado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aplicaci%C3%B3n-del-principio-de-abiertocerrado"&gt;
  &lt;/a&gt;
  Aplicación del principio de abierto/cerrado
&lt;/h2&gt;

&lt;p&gt;El caso anterior nos ejemplifica los problemas que se pueden generar al momento de diseñar aplicaciones que no tomen en cuenta los cambios que se pueden dar en ciertos módulos. El objetivo principal del principio de abierto/cerrado es exactamente ese, diseñar soluciones que tomen en cuenta los cambios que se puedan dar en el futuro y estructurar las soluciones para que se puedan agregar dichos cambios sin afectar el código existente.&lt;/p&gt;

&lt;p&gt;Por ejemplo, para solucionar el caso de los rectángulos nos vamos ayudar del uso de interfaces. Una interfaz es un conjunto de métodos que definen el funcionamiento de una clase, pero no su implementación. Por lo tanto, podemos definir una interfaz genérica para cualquier figura geométrica y que tenga la definición de un método para el cálculo del área. Luego, que cada figura geométrica defina la implementación propia de cada cálculo de área. &lt;/p&gt;

&lt;p&gt;Tomar en cuenta la siguiente interfaz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luego se crean las clases de cada figura geométrica que se utilizará en la librería. Cada clase del tipo &lt;strong&gt;FiguraGeometrica&lt;/strong&gt; implementa su propia forma de calcular el área.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;altura&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cuadrado&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Cuadrado&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circulo&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.1416&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Circulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Circulo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radio&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se modifica la clase CalculadorArea para que reciba un objeto del tipo FiguraGeometrica y con este calcula el área de la figura, sin importar de cual se trata.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt; &lt;span class="n"&gt;figura&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;figura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;    
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La ejecución de la librería se puede realizar de la siguiente forma.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Cuadrado&lt;/span&gt; &lt;span class="n"&gt;cuadrado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Cuadrado&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.85&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.85&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Circulo&lt;/span&gt; &lt;span class="n"&gt;circulo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Circulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.98&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de figura: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cuadrado&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de figura: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de figura: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;circulo&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La nueva estructura de la librería cumple con el principio de abierto/cerrado, ya que se pueden agregar más figuras geométricas sin modificar el código actual, siempre y cuando las nuevas figuras implementen la interfaz FiguraGeometrica.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cuando-se-puede-aplicar-el-principio-de-abiertocerrado"&gt;
  &lt;/a&gt;
  ¿Cuando se puede aplicar el principio de abierto/cerrado?
&lt;/h2&gt;

&lt;p&gt;El principio abierto/cerrado no debe de ser una regla inamovible en el diseño de soluciones de software. El problema con este principio, al igual que con el de la responsabilidad única, es que el desarrollador debe de predecir los posibles futuros requerimientos que generaran cambios en el código actual. &lt;/p&gt;

&lt;p&gt;Esto puede ser más sencillo para desarrolladores senior o semi-senior, pero para desarrolladores junior puede ser una receta para el desastre. La incorrecta aplicación del principio de abierto/cerrado puede complicar innecesariamente el diseño del código. Esto en lugar ayudar a que la aplicación sea más mantenible y escalable, logra exactamente lo opuesto.&lt;/p&gt;

&lt;p&gt;Mi recomendación personal es siempre escribir código que sea fácilmente entendible por otros desarrolladores y fácil de modificar cuando cambien los requerimientos. En relación con el principio de abierto/cerrado es mejor esperar la primera iteración de cambios para poder prever los puntos en donde el diseño cambiará y así poder aplicar el principio.&lt;/p&gt;

&lt;p&gt;Si deseas ampliar tu conocimiento acerca del principio de abierto/cerrado, puedes leer el &lt;a href="http://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html"&gt;blog de Robert C. Martin.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En una proxima publicación ahondaremos en el principio de sustitución de Liskov.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>solid</category>
      <category>spanish</category>
      <category>architecture</category>
    </item>
    <item>
      <title>DynamoDB Attribute Packing for Single-Table Designs</title>
      <author>Michael O'Brien</author>
      <pubDate>Thu, 08 Apr 2021 03:07:46 +0000</pubDate>
      <link>https://dev.to/sensedeep/dynamodb-attribute-packing-for-single-table-designs-1c0d</link>
      <guid>https://dev.to/sensedeep/dynamodb-attribute-packing-for-single-table-designs-1c0d</guid>
      <description>&lt;p&gt;A DynamoDB secondary index can select which attribute to project (replicate) to the index. It can project all item attributes, a subset of the attributes or only the key attributes.&lt;/p&gt;

&lt;p&gt;If you project only the keys, then a read from the secondary index will return the key attributes. With these keys you can read all the remaining attributes from the primary index, but that will incur an additional read request and require code to manage the second request.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://www.sensedeep.com/blog/posts/2021/dynamodb-singletable-design.html"&gt;DynamoDB single-table Designs&lt;/a&gt; choosing which attributes to project to secondary indexes can be a challenge. With single-table designs, you store multiple entities with different named attributes in a single table. This means the set of attributes to project to GSIs may be large and diverse. Furthermore, once defined, you cannot change the names of projected attributes after you create the GSI. These issues can make efficient use GSIs difficult and evolving and changing your data design problematic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sensedeep.com/blog/posts/2020/dynamodb-onetable.html"&gt;OneTable&lt;/a&gt; solves this problem by supporting the mapping and package of entity attributes into a single GSI attribute. This makes the task of defining which attributes to project to the GSI relatively easy and also permits changing your data design without having to recreate the GSIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onetable-attribute-mapping"&gt;
  &lt;/a&gt;
  OneTable Attribute Mapping
&lt;/h2&gt;

&lt;p&gt;OneTable schemas can define an attribute mapping via the &lt;code&gt;map&lt;/code&gt; schema property. This defines a physical table attribute name for the schema field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will store the User.name property in the &lt;code&gt;data&lt;/code&gt; table attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-to-one-mapping"&gt;
  &lt;/a&gt;
  One to One Mapping
&lt;/h3&gt;

&lt;p&gt;OneTable mapping definitions can also map multiple different entities onto the same attribute name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will store both the Account.name and User.email values in the GSI 'data' attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#many-to-one-packing"&gt;
  &lt;/a&gt;
  Many to One Packing
&lt;/h3&gt;

&lt;p&gt;Sometimes, you may need to project multiple field properties into a GSI. By using OneTable mappings, you can map and pack multiple attributes from a single entity to a single GSI attribute.&lt;/p&gt;

&lt;p&gt;By specifying a mapped name that contains the period character, you can pack property values into an object stored in a single attribute. OneTable will transparently pack and unpack values on read/write operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;models&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user:${email}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.last&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will pack the User.email, User.firstName and User.lastName properties under the GSI &lt;code&gt;data&lt;/code&gt; attribute. The data attribute will have the values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also map and pack the properties from multiple entities into a single attribute name.&lt;/p&gt;

&lt;p&gt;By using the &lt;code&gt;map&lt;/code&gt; facility, you can create a single GSI &lt;code&gt;data&lt;/code&gt; attribute that contains all the required attributes for access patterns that use the GSI. By modifying the OneTable schema and using the OneTable CLI for migrations, you can easily evolve your design without recreating your GSIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-mapped-attributes"&gt;
  &lt;/a&gt;
  Using Mapped Attributes
&lt;/h2&gt;

&lt;p&gt;When issuing APIs that write to a mapped attribute, you must provide all the properties that map to that attribute for the entity.&lt;/p&gt;

&lt;p&gt;For example, the following will fail because the lastName is not provided and the API must provide all three properties: email, firstName and lastName that map to the &lt;code&gt;data&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coyote@acme.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Peter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#value-templates"&gt;
  &lt;/a&gt;
  Value Templates
&lt;/h2&gt;

&lt;p&gt;There is one other technique you can use for one-way attribute packing.&lt;/p&gt;

&lt;p&gt;A OneTable schema field can define a &lt;code&gt;value&lt;/code&gt; property which operates like a JavaScript template string. Embedded &lt;code&gt;${field}&lt;/code&gt; references are expanded to create the attribute value. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user:${country}:${zip}:${state}:${address}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a sort-key (sk) attribute with the values of country, zip, state and address catenated after a 'user:' prefix. This is useful for queries that can search on varying segments of the sort key using begins_with.&lt;/p&gt;

&lt;p&gt;Note: this technique replicates the attributes in the &lt;code&gt;value&lt;/code&gt; template and is thus not a technique to reduce overall data storage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onetable-follow"&gt;
  &lt;/a&gt;
  OneTable Follow
&lt;/h2&gt;

&lt;p&gt;If reading from a secondary index that projects a subset of attributes and you wish to fetch the entire item, you would normally have to issue a second read to fetch the full item from the primary index.&lt;/p&gt;

&lt;p&gt;OneTable makes this easier by using the &lt;code&gt;follow&lt;/code&gt; option where OneTable will transparently follow the retrieved primary keys from a GSI and fetch the full item from the primary index so that you do not have to issue the second read manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;acme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gs1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;follow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under the hood, OneTable is still performing two reads to retrieve the item but your code is much cleaner. For situations where the storage costs are a concern, this approach allows minimal cost, keys-only secondary indexes to be used without the complexity of multiple requests in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sensedeep-with-onetable"&gt;
  &lt;/a&gt;
  SenseDeep with OneTable
&lt;/h2&gt;

&lt;p&gt;At SenseDeep, we've used OneTable and the OneTable CLI extensively with our &lt;a href="https://app.sensedeep.com"&gt;SenseDeep&lt;/a&gt; serverless Developer Studio. All data is stored in a single DynamoDB table and we extensively use single-table design patterns. We could not be more satisfied with DynamoDB implementation. Our storage and database access costs are insanely low and access/response times are excellent.&lt;/p&gt;

&lt;p&gt;Please try our Serverless developer studio &lt;a href="https://www.sensedeep.com/"&gt;SenseDeep&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contact"&gt;
  &lt;/a&gt;
  Contact
&lt;/h3&gt;

&lt;p&gt;You can contact me (Michael O'Brien) on Twitter at: &lt;a href="https://twitter.com/mobstream"&gt;@mobstream&lt;/a&gt;, or &lt;a href="//mob-pub-18@sensedeep.com"&gt;email&lt;/a&gt; and ready my &lt;a href="https://www.sensedeep.com/blog"&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To learn more about SenseDeep and how to use our serverless developer studio, please visit &lt;a href="https://www.sensedeep.com/"&gt;https://www.sensedeep.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sensedeep.com/blog/posts/2020/dynamodb-onetable.html"&gt;OneTable Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/onetable-cli"&gt;OneTable Migrate CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sensedeep.com/blog/posts/2021/dynamodb-singletable-design.html"&gt;DynamoDB Single Table Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/onetable-cli"&gt;OneTable Migrate CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sensedeep.com/"&gt;SenseDeep Web Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.sensedeep.com/"&gt;SenseDeep App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>dynamodb</category>
      <category>nosql</category>
    </item>
    <item>
      <title>4 awesome javascript projects worthy of your collection</title>
      <author>lindelof</author>
      <pubDate>Thu, 08 Apr 2021 03:03:37 +0000</pubDate>
      <link>https://dev.to/lindelof/4-awesome-javascript-projects-worthy-of-your-collection-53fi</link>
      <guid>https://dev.to/lindelof/4-awesome-javascript-projects-worthy-of-your-collection-53fi</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-been-staying-at-home-recently-and-when-facing-the-computer-i-was-collecting-all-kinds-of-fun-things"&gt;
  &lt;/a&gt;
  I have been staying at home recently, and when facing the computer, I was collecting all kinds of fun things.
&lt;/h3&gt;

&lt;p&gt;I wonder if you have also encountered this kind of time, when you want to find a certain effect or something, but you are at a loss and you can't find it. At this time, you will regret it. If you can usually collect more treasures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MnlO54F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wluuunp6z7upo3yyurck.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MnlO54F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wluuunp6z7upo3yyurck.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have carefully selected three awesome items that are worth collecting for you, maybe you can think of it when you need it&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-awesome-web-effect"&gt;
  &lt;/a&gt;
  1. Awesome Web Effect
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomlindelofawesomewebeffect"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/lindelof/awesome-web-effect"&gt;https://github.com/lindelof/awesome-web-effect&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QhCXfEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zttr42f6ovg2h3cvi7gb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QhCXfEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zttr42f6ovg2h3cvi7gb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's like decorating a beautiful Christmas tree in a room. Sometimes a small web page with cool effects will make your project shine. This is a very fun series, I want to collect those cool effects that are common on the page.&lt;/p&gt;

&lt;p&gt;Not limited to any framework (react, vue, angular, etc.), as long as the effect can be simply inserted into the page, you can send it to me, I like them and hope you like them too.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-awesome-landing-page"&gt;
  &lt;/a&gt;
  2. Awesome Landing Page
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomnordicgiant2awesomelandingpage"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/nordicgiant2/awesome-landing-page"&gt;https://github.com/nordicgiant2/awesome-landing-page&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A series of beautiful and practical landing page templates. There are a lot of beautiful landing page templates. They are built using various front-end technologies. I hope you like them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbyG21am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2w6pibe2jfle7vhd0od.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbyG21am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2w6pibe2jfle7vhd0od.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-awesome-web-vr"&gt;
  &lt;/a&gt;
  3. Awesome Web VR
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomwizztjhawesomewebvr"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/wizztjh/awesome-WebVR"&gt;https://github.com/wizztjh/awesome-WebVR&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtq-HP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/smt30wc6p9r8pda6imuw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtq-HP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/smt30wc6p9r8pda6imuw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A curated list of awesome WebVR packages and resources. WebVR was an experimental JavaScript application programming interface (API) that enabled applications to interact with virtual reality devices, such as the HTC Vive, Oculus Rift, Google Cardboard or Open Source Virtual Reality (OSVR) in a web browser. It was implemented in Firefox and Chromium-based browsers until, before being deprecated and removed. WebVR API was superseded by a more powerful WebXR API that is capable of representing virtual reality and augmented reality devices simultaneously.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-awesome-web-storage"&gt;
  &lt;/a&gt;
  4. Awesome web storage
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomsoftvarawesomewebstorage"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/softvar/awesome-web-storage"&gt;https://github.com/softvar/awesome-web-storage&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJ5Kmoll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q91hmzsdl3s9v1809j66.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJ5Kmoll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q91hmzsdl3s9v1809j66.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything you need to know about Client-side Storage.Web storage, sometimes known as DOM storage (Document Object Model storage), provides web application software methods and protocols used for storing data in a web browser.&lt;/p&gt;

&lt;p&gt;Web storage is being standardized by the World Wide Web Consortium (W3C). It was originally part of the HTML5 specification, but is now in a separate specification.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Thank you very much for your patience to see here, I think you are a crazy geek just like me. I hope you like my column, I will always share useful things to everyone.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why your website should have a Skip Link? </title>
      <author>Rahul</author>
      <pubDate>Thu, 08 Apr 2021 01:47:46 +0000</pubDate>
      <link>https://dev.to/rahxuls/why-your-website-should-have-a-skip-link-2ghk</link>
      <guid>https://dev.to/rahxuls/why-your-website-should-have-a-skip-link-2ghk</guid>
      <description>&lt;p&gt;It's critical that any web pages you create are accessible to all. Unfortunately, it's something that's often ignored and neglected.&lt;/p&gt;

&lt;p&gt;This quick and easy tutorial will show you how to add a skip link to your page to make it more accessible. It's usually a good idea to incorporate accessibility into something you're making because it usually results in a much better overall product.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-skip-link"&gt;
  &lt;/a&gt;
  What is skip link?
&lt;/h3&gt;

&lt;p&gt;It is a link that lets the user skip to the main content of the page. It's usually hidden and becomes visible when it's in focus. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-and-why-you-need"&gt;
  &lt;/a&gt;
  When and Why you need?
&lt;/h3&gt;

&lt;p&gt;If a user is navigating a site with their keyboard they will usually is the tab key to go through the links and bottoms in your page. &lt;/p&gt;

&lt;p&gt;So this means they will have to tab through each link in your navigation (since it's usually at top) before they get to the main content every time they navigate between pages. &lt;/p&gt;

&lt;p&gt;(WHICH IS ANNOYING😬😬)&lt;/p&gt;

&lt;p&gt;Having a link that will skip past all that and scroll straight to the main content of the page will make the process less frustrating and more accessible. &lt;/p&gt;

&lt;p&gt;Let's see&lt;/p&gt;

&lt;p&gt;HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"skkip_link"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Skip to main
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  
            &lt;span class="c"&gt;&amp;lt;!--HEADER AND NAVIGATION HERE --&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;First paragraph...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.skip_link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.skip_liink&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.skip_link&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.skip_link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you used skip links? No? Give it a try!&lt;/p&gt;




&lt;p&gt;🚀Thanks For Reading | Happy Coding🌃&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
