<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Making Project Management Not Suck w/ Zach Ozer of Clubhouse</title>
      <author>Conor Bronsdon</author>
      <pubDate>Tue, 20 Jul 2021 15:50:39 +0000</pubDate>
      <link>https://dev.to/linearb/making-project-management-not-suck-w-zach-ozer-of-clubhouse-4ln4</link>
      <guid>https://dev.to/linearb/making-project-management-not-suck-w-zach-ozer-of-clubhouse-4ln4</guid>
      <description>&lt;p&gt;It’s time for project management not to suck anymore.&lt;/p&gt;

&lt;p&gt;That’s why on this week’s episode of &lt;a href="https://devinterrupted.com/podcast/making-project-management-not-suck/"&gt;Dev Interrupted&lt;/a&gt; we've brought in Zach Ozer, the VP of Engineering at Clubhouse.io, to talk about how the new partnership between &lt;a href="https://linearb.io/"&gt;LinearB&lt;/a&gt; and &lt;a href="https://clubhouse.io/signup/"&gt;Clubhouse&lt;/a&gt; is helping dev teams eliminate the need for status update meetings, and automate the manual tasks so many project management tools require from developers.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#listen-to-the-full-episode"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Listen to the full episode&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/50FuvvMf5bQPNyigTaVI85"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Episode Highlights include:&lt;/strong&gt;
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;What’s broken with software development and project management today&lt;/li&gt;
&lt;li&gt;How engineering organizations can eliminate status update meetings&lt;/li&gt;
&lt;li&gt;What a dev-first project management tool does different&lt;/li&gt;
&lt;li&gt;Why &lt;a href="https://linearb.io/clubhouse-and-linearb/"&gt;LinearB and Clubhouse.io are partnering&lt;/a&gt; and what it means for you&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#join-the-dev-interrupted-discord-server"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Join the Dev Interrupted Discord Server&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;With over 1200 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.gg/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wzIBzHH0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19j3dzgz4r4kzav3w6z8.png" alt="Join the Dev Interrupted Discord Community!"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>management</category>
      <category>leadership</category>
      <category>productivity</category>
      <category>agile</category>
    </item>
    <item>
      <title>.NET 6: The MOST promising FEATURES 🔥</title>
      <author>Dotnetsafer</author>
      <pubDate>Tue, 20 Jul 2021 15:38:47 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/net-6-the-most-promising-features-1i5n</link>
      <guid>https://dev.to/dotnetsafer/net-6-the-most-promising-features-1i5n</guid>
      <description>&lt;p&gt;&lt;strong&gt;Microsoft&lt;/strong&gt; is putting the batteries and already presents .NET 6 Preview 5. According to what they tell us, they are already in the second half of the &lt;strong&gt;.NET 6&lt;/strong&gt; version and they are beginning to teach new features that promise a lot. 🤗&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-net-what-is-it-for"&gt;
  &lt;/a&gt;
  What is .NET? What is it for?
&lt;/h2&gt;

&lt;p&gt;What is .NET in general, is a &lt;em&gt;Microsoft&lt;/em&gt; platform to develop Software, covering many operating systems such as &lt;strong&gt;Windows&lt;/strong&gt;, &lt;strong&gt;iOS&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt;, &lt;strong&gt;Android&lt;/strong&gt; … The main idea of ​​.NET is to be able to develop applications independent of the physical architecture or the operating system in the one that was going to be executed.&lt;br&gt;&lt;br&gt;
Its main advantages are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;strong&gt;Decreased&lt;/strong&gt; development time&lt;/li&gt;
&lt;li&gt;  Use of &lt;strong&gt;predesigned functionalities&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Reduction&lt;/strong&gt; of development and maintenance cost&lt;/li&gt;
&lt;li&gt;  &lt;strong&gt;Simplification&lt;/strong&gt; of maintenance&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Okay, I understand. And what is .NET 6? &lt;em&gt;🤔&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;.NET 6 is the new version of .NET &lt;em&gt;(currently .NET 5)&lt;/em&gt; that Microsoft promises to release on &lt;strong&gt;November 9&lt;/strong&gt; of this year. It brings many improvements and new features compared to .NET 5.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#what-are-net-6-new-features"&gt;
  &lt;/a&gt;
  What are .NET 6 new features?
&lt;/h2&gt;

&lt;p&gt;If we speak in general, we can speak from .NET MAUI, through the new implementation of the 64-bit architecture, to Visual Studio 2022 and its function more... 😎 But we are going to explain the most important ones and the ones you should know.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#nuget-package-validation"&gt;
  &lt;/a&gt;
  NuGet package validation
&lt;/h3&gt;

&lt;p&gt;Package validation tools will allow &lt;strong&gt;NuGet&lt;/strong&gt; library developers to validate that their packages are consistent and well-formed.&lt;/p&gt;

&lt;p&gt;Its main characteristics are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Validate that there are &lt;strong&gt;no important change&lt;/strong&gt;s in the versions&lt;/li&gt;
&lt;li&gt;  Validate that the package &lt;strong&gt;has the same set of public APIs&lt;/strong&gt; for all specific runtime implementations.&lt;/li&gt;
&lt;li&gt;  Determine &lt;strong&gt;applicability gaps in the target framework&lt;/strong&gt; or in the execution time.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#workload-enhancements-in-the-net-sdk"&gt;
  &lt;/a&gt;
  Workload Enhancements in the .NET SDK
&lt;/h3&gt;

&lt;p&gt;Microsoft reports that it has added new workload commands in .NET 6 to improve administration:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;dotnet workload search&lt;/code&gt; List the workloads available to install.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;dotnet workload unistall&lt;/code&gt; Removes the specified workload if you no longer need a workload. It is also a good option to save space.&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;dotnet workload repair&lt;/code&gt; Reinstall all previously installed workloads.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#crossgen2"&gt;
  &lt;/a&gt;
  Crossgen2
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/blob/main/docs/workflow/building/coreclr/crossgen.md"&gt;Crossgen&lt;/a&gt; allows &lt;strong&gt;IL&lt;/strong&gt; precompiling into native code as a publishing step. Pre-compiling is primarily beneficial to improve startup. &lt;strong&gt;Crossgen2&lt;/strong&gt; is a scratch implementation that is already proving to be a superior platform for code generation innovation.&lt;/p&gt;

&lt;p&gt;Here we can see how to enable the pre-compilation with Crossgen2 from the &lt;em&gt;MSBuild&lt;/em&gt; properties:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;Enable&lt;/span&gt; &lt;span class="n"&gt;pre&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;compiling&lt;/span&gt; &lt;span class="n"&gt;native&lt;/span&gt; &lt;span class="nf"&gt;code&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;crossgen2&lt;/span&gt; &lt;span class="p"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PublishReadyToRun&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;PublishReadyToRun&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="n"&gt;Enable&lt;/span&gt; &lt;span class="n"&gt;generating&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;composite&lt;/span&gt; &lt;span class="n"&gt;R2R&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="p"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;PublishReadyToRunComposite&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;PublishReadyToRunComposite&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#windows-forms-the-default-font"&gt;
  &lt;/a&gt;
  Windows Forms: The default font
&lt;/h3&gt;

&lt;p&gt;Already with .NET 6 you can set a default font for an &lt;code&gt;Application.SetDefaultFont&lt;/code&gt;application. Also the pattern it uses is similar to setting high dpi or visual styles. An example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Program&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;STAThread&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="p"&gt;{&lt;/span&gt;  
&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetHighDpiMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HighDpiMode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SystemAware&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;EnableVisualStyles&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;  
&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetCompatibleTextRenderingDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="p"&gt;+&lt;/span&gt;
&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;SetDefaultFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Font&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;FontFamily&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Microsoft Sans Serif"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;8f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="n"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Form1&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here are &lt;strong&gt;2 examples&lt;/strong&gt; after you set the default font.&lt;/p&gt;

&lt;p&gt;Microsoft Sans Serif, 8pt:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hYxSucBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AvmG68_KDdFHO40cI3iUACg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hYxSucBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/700/1%2AvmG68_KDdFHO40cI3iUACg.png" alt=".NET 6 default Microsoft Sans Serif font feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Chiller, 12pt:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aO7e6CJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/702/1%2Aj5KboU7AIu-Uy8wyvlDOAw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aO7e6CJ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/702/1%2Aj5KboU7AIu-Uy8wyvlDOAw.png" alt=".NET 6 default Chiller font feature"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#performance-increase-in-the-biginteger-library"&gt;
  &lt;/a&gt;
  Performance increase in the BigInteger library
&lt;/h3&gt;

&lt;p&gt;BigIntegers parsing of decimal and hexadecimal strings has been improved. In the following photo you can see improvements of up to &lt;strong&gt;89%&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--H7nPSkoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/567/1%2An1SEZhv0BfnD_OEOW8gMsQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--H7nPSkoh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/567/1%2An1SEZhv0BfnD_OEOW8gMsQ.png" alt=".NET 6 performance test"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ssl-3-support"&gt;
  &lt;/a&gt;
  SSL 3 support
&lt;/h3&gt;

&lt;p&gt;The .NET crypto APIs support the use of &lt;strong&gt;OpenSSL 3&lt;/strong&gt; as the preferred native crypto provider on &lt;em&gt;Linux&lt;/em&gt;. .NET 6 will use &lt;strong&gt;OpenSSL 3&lt;/strong&gt; if available. Otherwise, it will use &lt;strong&gt;OpenSSL 1.x&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#ios-cpu-sampling-speedscope"&gt;
  &lt;/a&gt;
  IOS CPU Sampling (SpeedScope)
&lt;/h3&gt;

&lt;p&gt;The graph below shows part of an &lt;strong&gt;iOS&lt;/strong&gt; startup &lt;em&gt;CPU&lt;/em&gt; sampling session seen in &lt;strong&gt;SpeedScope&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---YQ76oIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/567/1%2AttzNOe-QN8oIFPGF5yMEvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---YQ76oIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/567/1%2AttzNOe-QN8oIFPGF5yMEvw.png" alt="iOS CPU performance test in .NET 6"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#android-cpu-sampling-perfview"&gt;
  &lt;/a&gt;
  Android CPU Sampling (PerfView)
&lt;/h3&gt;

&lt;p&gt;The following image shows the &lt;strong&gt;Android&lt;/strong&gt; &lt;em&gt;CPU&lt;/em&gt; sampling seen in &lt;strong&gt;PerfView&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n-HA9Hki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/567/1%2AoTV4Yz_afyq9iWAyy8zAAw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n-HA9Hki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/567/1%2AoTV4Yz_afyq9iWAyy8zAAw.png" alt="Android CPU performance test in .NET 6"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#net-6-conclusion"&gt;
  &lt;/a&gt;
  .NET 6 Conclusion
&lt;/h2&gt;

&lt;p&gt;This .NET 6 Preview 5 is perhaps the biggest so far of all the ones that have been released in terms of quantity and quality of features. Right now you can try .NET 6 by downloading it from the &lt;strong&gt;Official Web of .NET 6.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As Microsoft says…&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The future has arrived&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With all the tools already announced and all that remain to be shown and released, development will become a much easier, more optimized and more productive task, highly improving the developer experience in their current and future projects.&lt;/p&gt;

&lt;p&gt;From &lt;a href="https://dotnetsafer.com/"&gt;&lt;strong&gt;Dotnetsafer&lt;/strong&gt;&lt;/a&gt; we would like to know your opinion. Sound good features? Anything you would like them to take out? Leave it in the comments so we can talk about it. 😊&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>netcore</category>
      <category>csharp</category>
      <category>dotnet6</category>
    </item>
    <item>
      <title>Are Amazon and Google at odds with Agile?</title>
      <author>scottshipp</author>
      <pubDate>Tue, 20 Jul 2021 15:18:50 +0000</pubDate>
      <link>https://dev.to/scottshipp/are-amazon-and-google-at-odds-with-agile-4ga6</link>
      <guid>https://dev.to/scottshipp/are-amazon-and-google-at-odds-with-agile-4ga6</guid>
      <description>&lt;p&gt;&lt;em&gt;Working software over comprehensive documentation&lt;/em&gt; is one of the core values of &lt;a href="https://agilemanifesto.org/"&gt;The Agile Manifesto&lt;/a&gt;. And even though this carries the caveat "...while there is value in the items on the right, we value the items on the left more..." it typically means that Agile approaches such as scrum, kanban, or XP avoid rather than emphasize documentation.&lt;/p&gt;

&lt;p&gt;It is interesting, then, that two of our times' largest and most successful companies place written documentation at the core of their work.&lt;/p&gt;

&lt;p&gt;Amazon is well-known for its &lt;a href="https://www.cnbc.com/2018/04/23/what-jeff-bezos-learned-from-requiring-6-page-memos-at-amazon.html"&gt;6-pager&lt;/a&gt; approach to outlining positions, gaining consensus, and, finally, &lt;a href="https://aws.amazon.com/blogs/enterprise-strategy/guts-part-three-having-backbone-disagreeing-and-committing/"&gt;disagreeing and committing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Google, on the other hand, expects that employees work together via &lt;a href="https://www.industrialempathy.com/posts/design-docs-at-google/"&gt;design docs&lt;/a&gt;. The constant collaboration on documentation promotes a deeper level of shared understanding.&lt;/p&gt;

&lt;p&gt;Both approaches run aground of the now-traditional Agile recommendation to prefer working software instead. It wouldn't be hard to make an argument that by so blatantly ignoring such a core Agile principle, these two software behemoths are &lt;em&gt;not agile at all.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;It has even led to the popular Quora question, &lt;a href="https://www.quora.com/Why-do-some-developers-at-strong-companies-like-Google-consider-Agile-development-to-be-nonsense"&gt;"Why do some developers at strong companies like Google consider Agile development to be nonsense?"&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vx9mt_gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hf3n3vnugwycmoqedkrl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vx9mt_gH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hf3n3vnugwycmoqedkrl.jpeg" alt="Jeff Bezos, founder of Amazon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yet, at a deeper level there is harmony between the underlying motivations here. Both companies have cited writing documentation as a way  to be &lt;em&gt;more efficient,&lt;/em&gt; which is the explicit goal of Agile. Consider the &lt;a href="https://dev.toJeff%20Bezos%20and%20the%20Six-Page%20Memo"&gt;following summary of an interview with Jeff Bezos&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Working out a careful six-page narrative memo, [Bezos] told Rose, calls for “deeper thinking” and “clarity.” When the meeting convenes, the leader distributes the memo and a thirty-minute “study hall” begins, during which the attendees read the memo and make notes. Only then does discussion begin. Bezos said that this method saves time in the long run because 1) everyone is reading it together so it will be fresh in their minds; and 2) the kinds of questions people tend to ask—ones that are often answered in the next slide or paragraph—aren’t necessary. This process of reading and discussing the memos, Bezos said, fuels the kind of inventiveness that Amazon is known for.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The questions this raises are fascinating and thought-provoking. The obvious question surrounding whether or not written documentation of this form can be considered "agile" will soon be replaced by the other usual questions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Is &lt;em&gt;not&lt;/em&gt; being agile really so bad?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Are Google and Amazon perhaps successful in spite of focusing on written documentation and not because of it?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the age of remote work, where written documentation is often the best way to communicate, how can we reconcile the idea that we should prefer "working software" to "comprehensive documentation?"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What does "comprehensive" even mean?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just because Google and Amazon do it, why should we?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don't mean to answer any of these questions. But I think it's worth a glass of {coffee, wine, beer, tea, _________} and a think through. Whatever answer you land on, I hope your  team and company have a look at both sides of the conversation before jumping headfirst either way.&lt;/p&gt;

</description>
      <category>architecture</category>
      <category>agile</category>
      <category>development</category>
    </item>
    <item>
      <title>How to hide Feature A and show Feature B for different users in React</title>
      <author>Alex Barashkov</author>
      <pubDate>Tue, 20 Jul 2021 15:16:18 +0000</pubDate>
      <link>https://dev.to/alex_barashkov/how-to-hide-feature-a-and-show-feature-b-for-different-users-in-react-j6e</link>
      <guid>https://dev.to/alex_barashkov/how-to-hide-feature-a-and-show-feature-b-for-different-users-in-react-j6e</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;Have you ever wondered how do companies like Slack, Netlify, Zoom, Facebook (and rest of FAANG for sure)  gradually roll out new features just for some users?  🤔  &lt;/p&gt;

&lt;p&gt;Wonder no more! It is done via Feature Flags (or FF for short) and we're just about to dive into this concept.&lt;/p&gt;

&lt;p&gt;Feature Flags services work the following way. You define a list of features(eg. dark mode, horizontal login layout, design 2.0) and assign it to a group of users specifying conditions whether it should be enabled or disabled.&lt;/p&gt;

&lt;p&gt;Chances are that you've already used FF in your projects but wasn't aware of this. Did you store in a database some booleans that indicate whether particular user should have an access to a certain feature? If yes, then congratulations - you indeed have experience working with feature flags.&lt;/p&gt;

&lt;p&gt;Booleans in DB were good up to a certain point, but progress never stops and now we have much more flexible and dev friendly way to control feature presence. Let's take a look at feature flags services.  FF services have the following bonuses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;UI where you can define and manage features&lt;/li&gt;
&lt;li&gt;Users segmentation&lt;/li&gt;
&lt;li&gt;A/B testing&lt;/li&gt;
&lt;li&gt;Flags analytics&lt;/li&gt;
&lt;li&gt;Staged feature rollouts&lt;/li&gt;
&lt;li&gt;SDKs for different languages/frameworks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we are going to use &lt;a href="https://github.com/Flagsmith/flagsmith"&gt;Flagsmith&lt;/a&gt; - open source feature flag and remote config service, but you can check commercial alternatives such as &lt;a href="https://launchdarkly.com/"&gt;LaunchDarkly&lt;/a&gt;. Our goal is to learn how to start using feature flags in React and make the process of launching new functionality for users smoother.&lt;/p&gt;

&lt;p&gt;FF manipulation with Flagsmith can be done pretty much anywhere (frontend/backend/mobile platform). Let's take a look at the following schema: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ri8eP2U3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70xojzecxzyo7tmgrwyy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ri8eP2U3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/70xojzecxzyo7tmgrwyy.png" alt="diagram"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Let's break down what is happening here.&lt;/p&gt;

&lt;p&gt;1) User requests the page&lt;br&gt;
2) A certain side of your app (FE/BE) makes a call to Flagsmith service with user uuid&lt;br&gt;
3) Flagsmith matches received uuid with the configuration of available features for this particular user and returns the info on that&lt;br&gt;
4) App generates a page based on received feature info&lt;/p&gt;

&lt;p&gt;Definitely not a rocket science. Now to practice! &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/Flagsmith"&gt;
        Flagsmith
      &lt;/a&gt; / &lt;a href="https://github.com/Flagsmith/flagsmith"&gt;
        flagsmith
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Feature flagging and remote config service. Host yourself or use our hosted version at https://flagsmith.com/
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#our-goal"&gt;
  &lt;/a&gt;
  Our goal
&lt;/h3&gt;

&lt;p&gt;We want to build pretty much standard dashboard app (sorry, no todos today) with authorization set up. We want to show certain feature components only to those users who opted-in for beta. &lt;/p&gt;

&lt;p&gt;React, Next.js, Next-Auth and beautiful dashboard components from Tailwind UI are going to help us building it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dN2TSMBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c0sxyirkx8wzplpi8om.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dN2TSMBD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7c0sxyirkx8wzplpi8om.png" alt="4-pinned-projects"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#prerequirements"&gt;
  &lt;/a&gt;
  Pre-requirements
&lt;/h3&gt;

&lt;p&gt;Create a new app with Next.js, React and Next-Auth or clone this &lt;a href="https://github.com/Flagsmith/flagsmith-js-client/tree/main/examples/nextjs-auth"&gt;sample repository&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additional links&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nextjs.org/docs/getting-started"&gt;Getting started with Next.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://next-auth.js.org/getting-started/introduction"&gt;Getting started with nextauth&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://flagsmith.com/"&gt;Then create an account&lt;/a&gt; in the cloud version of Flagsmith.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9orzVOJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxnnpxq5xrcdb4eice5a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9orzVOJb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxnnpxq5xrcdb4eice5a.png" alt="1-sing-up"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configure-flagsmith-environment"&gt;
  &lt;/a&gt;
  Configure Flagsmith environment
&lt;/h3&gt;

&lt;p&gt;The configuration process is simple. Once you've signed up, create a new project. In Flagsmith you can define multiple environments per project, each environment keeps its own features/users/segments and API key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NQLGLJBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mme9h5kf9m0e5jl7ew8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQLGLJBf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7mme9h5kf9m0e5jl7ew8.png" alt="2-onboarding"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's create our first feature, we will name it - "pinned_projects". Beta users will be able to pin projects and see them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T-lcXQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbsi72oxlx36wfgieu65.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T-lcXQwq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qbsi72oxlx36wfgieu65.png" alt="3-create-feature"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next step we need to install &lt;code&gt;flagsmith-react&lt;/code&gt; package&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="nx"&gt;flagsmith&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;react&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As an initial step, we will wrap our _app.js with &lt;code&gt;FlagsmithProvider&lt;/code&gt; and pass Flagsmith API key, which we can get from the Settings page in Flagsmith UI. FlagsmithProvider will allow to use &lt;code&gt;useFlagsmith&lt;/code&gt; hook and pass the state to underlying components.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;components/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Provider&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;SessionProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;FlagsmithProvider&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flagsmith-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;../styles/globals.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MyApp&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;pageProps&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;FlagsmithProvider&lt;/span&gt; &lt;span class="na"&gt;environmentId&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NEXT_PUBLIC_FLAGSMITH_API_KEY&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SessionProvider&lt;/span&gt; &lt;span class="na"&gt;session&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Component&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;pageProps&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;SessionProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;FlagsmithProvider&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;FlagsmithProvider&lt;/code&gt; will initialise Flagsmith javascript client under the hood and you will be able to start getting flags declared in the UI. But it does not make too much sense unless we get user-specific flags. To let Flagsmith know which user requests flags, we need to &lt;code&gt;identify&lt;/code&gt; him. The perfect place for this Auth component, that responsible for checking user session and redirecting users to the sign-in page in case it's expired.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next-auth/client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useFlagsmith&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;flagsmith-react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Auth&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;identify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isIdentified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getTrait&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTrait&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFlagsmith&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Identify user and set email trait if does not exist&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;identifyUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;identify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hasEmail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;getTrait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;hasEmail&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;setTrait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Do nothing while loading&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;signIn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// If not authenticated, force log in&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;isIdentified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// In the example we don't save users in the database so we don't have id that should be used for identification&lt;/span&gt;
      &lt;span class="c1"&gt;// Instead we're going to use email as a trait and id&lt;/span&gt;
      &lt;span class="nx"&gt;identifyUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;isIdentified&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;identify&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isUser&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// Session is being fetched, or no user.&lt;/span&gt;
  &lt;span class="c1"&gt;// If no user, useEffect() will redirect.&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here you can see that we use &lt;code&gt;getTrait&lt;/code&gt; and &lt;code&gt;setTrait&lt;/code&gt;. Traits are simply key/value pairs that are associated with individual Identities. You can pass any additional information to the user, that later could be used for segmentation eg. current plan, opt-in for beta features or newsletters, etc. &lt;/p&gt;

&lt;p&gt;Let's create first segment and call it &lt;code&gt;beta_opt_in&lt;/code&gt; . Go to Segments → Create Segment. Here you also could define an expression based on the trait which will add users that match that condition to the segment. We can start from a simple one, such as if email has &lt;code&gt;[pixelpoint.io](http://pixelpoint.io)&lt;/code&gt; consider them as opted-in for beta features.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3I8xRa1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auwahcvy2viz7vhzhmue.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3I8xRa1c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/auwahcvy2viz7vhzhmue.png" alt="5-segment"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The final step is to add a check to our React component using &lt;code&gt;hasFeature("pinned_projects")&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hasFeature&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useFlagsmith&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"flex-1 relative z-0 overflow-y-auto focus:outline-none"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"border-b border-gray-200 px-4 py-4 sm:flex sm:items-center sm:justify-between sm:px-6 lg:px-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;HomeHeader&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;hasFeature&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pinned_projects&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"px-4 mt-6 sm:px-6 lg:px-8"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PinnedProjects&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;pinnedProjects&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ProjectsTable&lt;/span&gt; &lt;span class="na"&gt;items&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;projects&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;main&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#here-you-go"&gt;
  &lt;/a&gt;
  Here you go!
&lt;/h3&gt;

&lt;p&gt;If you've been following along, by this time you should have a nice little pet project demonstrating a modern approach to feature flags. Congratulations🎉&lt;/p&gt;

&lt;p&gt;Don't hesitate to extend it or leverage the idea in your existing project.&lt;/p&gt;

&lt;p&gt;P.S. Further reading&lt;/p&gt;

&lt;p&gt;In this article we just took a quick glance at Feature Flags and built a simple example app, but FF system is capable of much more. Check out: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.flagsmith.com/advanced-use/ab-testing"&gt;A/B testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.flagsmith.com/advanced-use/flag-analytics"&gt;Feature flags analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.flagsmith.com/advanced-use/staged-feature-rollouts"&gt;Staged rollouts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>react</category>
    </item>
    <item>
      <title>FlaskCaption - Basic Flask Project</title>
      <author>Atharva Shirdhankar</author>
      <pubDate>Tue, 20 Jul 2021 14:45:30 +0000</pubDate>
      <link>https://dev.to/star_trooper/flaskcaption-basic-flask-project-p03</link>
      <guid>https://dev.to/star_trooper/flaskcaption-basic-flask-project-p03</guid>
      <description>&lt;p&gt;&lt;strong&gt;Pre-requisites:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python 3 or higher.&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Html and CSS&lt;/li&gt;
&lt;li&gt;Editor - VSCode / PyCharm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Part 1: Dependencies Installation&lt;/strong&gt;&lt;br&gt;
Open terminal and install the following dependencies.&lt;br&gt;
Commands :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pip install flask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install SpeechRecognition&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Part 2: Setting-Up Project&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now create a folder give it anyname. Here, I have given folder name as Flaskproject.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HTKoLCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efs24f8fjunh09sjocg0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HTKoLCU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efs24f8fjunh09sjocg0.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, open the empty folder in VSCode or PyCharm IDE(I preferred VSCode).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inside the empty folder we have to create a python file (app.py), a templates directory and static directory and inside static directory create styles directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fVrDxg92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4mphvg78na8dbesqqpj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fVrDxg92--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o4mphvg78na8dbesqqpj.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Part 3: Coding&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the app.py file and enter the following code:&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Code &lt;code&gt;app.py&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from flask import Flask, render_template , request , redirect
import speech_recognition as sr

app = Flask(__name__)

@app.route("/", methods=["GET","POST"])
def index():
    transcript = ''
    if request.method == "POST":
         print("FORM DATA RECEIVED")

         if "file" not in request.files:
              return redirect(request.url)

         file = request.files["file"]
         if file.filename == "":
             return redirect(request.url)

         if file:
             recognizer = sr.Recognizer()  
             wavfile = sr.AudioFile(file)
             with wavfile as source:
                 data = recognizer.record(source)
             transcript = recognizer.recognize_google(data, key=None)

    return render_template('index.html' , transcript = transcript)

if __name__ == " main ":
    app.run(debug=True, threaded=True)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2.Create index.html file in templates directory:&lt;/p&gt;

&lt;p&gt;Code &lt;code&gt;index.html&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang="en"&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset="UTF-8"&amp;gt;
    &amp;lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&amp;gt;
    &amp;lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&amp;gt;
    &amp;lt;title&amp;gt;FlaskProject - AudiotoText&amp;lt;/title&amp;gt;
    &amp;lt;link rel="stylesheet" href="{{url_for('static', filename='styles/style.css')}}"&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;header&amp;gt;FlaskCaption&amp;lt;/header&amp;gt;
    &amp;lt;div id="mainContainer"&amp;gt;
        &amp;lt;h2&amp;gt;Upload Audio File&amp;lt;/h2&amp;gt;
        &amp;lt;form method="post" enctype="multipart/form-data"&amp;gt;
           &amp;lt;input type="file" name="file" id="fileinput"&amp;gt;
           &amp;lt;br&amp;gt;
           &amp;lt;input type="submit" id="submitButton" value="Process"/&amp;gt;

        &amp;lt;/form&amp;gt;
        {% if transcript != "" %}
        &amp;lt;div class="speechTranscriptContainer"&amp;gt;
            &amp;lt;h1&amp;gt;Transcripted Text&amp;lt;/h1&amp;gt;
            &amp;lt;p&amp;gt;{{transcript}}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        {% endif %}

    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3.Create a styles.css file inside static/styles directory:&lt;/p&gt;

&lt;p&gt;Code &lt;code&gt;style.css&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
body{
    margin: 0;
    padding: 0;
    background-color: aliceblue;

}

h1, p , input{
    font-family: cursive;
}

header{
    display: flex;
    justify-content: center; 
    font-size: 50px;
    font-family: Georgia, 'Times New Roman', Times, serif;
}

#mainContainer{
    display: flex;
    align-items: center;
    flex-direction: column;
    border-radius: 10px;
    background-color: white;
    margin-top: 15%;   
}

#submitButton{
    background-color: #0191FE;
    color: white;
    border: none;
    border-radius: 10px;
    margin-top: 10px;
    margin-left: 30%;
    padding: 10px;   
}

#submitButton:hover{
    cursor: pointer;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Part 4: Execution&lt;/strong&gt;&lt;br&gt;
To run the flask webapp we need one command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--39-a7-pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2hujywqdffmpyg3h818.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--39-a7-pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l2hujywqdffmpyg3h818.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This command will run our flask webapp locally on port number 5000 by default.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 5: Output&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pWi_eYJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r7rxeqw6yaae6mm3lf2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pWi_eYJV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3r7rxeqw6yaae6mm3lf2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Part 6: Final File Structure:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0uJi6beB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6x5ssp75p1puw21p8v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0uJi6beB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/du6x5ssp75p1puw21p8v.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Some Pros of the Project:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The accuracy of converting the &lt;strong&gt;Audio(Speech)&lt;/strong&gt; to convert &lt;strong&gt;text&lt;/strong&gt; is almost &lt;strong&gt;92%&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Some Cons of the Project:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The project only take .wav file as a input.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Resources&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/StarTrooper08/FlaskCaption"&gt;Github Repository&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pypi.org/project/Flask/"&gt;Flask Doc&lt;/a&gt;&lt;br&gt;
&lt;a href="https://pypi.org/project/SpeechRecognition/"&gt;SpeechRecognition Doc&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>flask</category>
    </item>
    <item>
      <title>JSON in AssemblyScript</title>
      <author>Jairus Tanaka</author>
      <pubDate>Tue, 20 Jul 2021 14:44:53 +0000</pubDate>
      <link>https://dev.to/assemblyscript/json-in-assemblyscript-28cg</link>
      <guid>https://dev.to/assemblyscript/json-in-assemblyscript-28cg</guid>
      <description>&lt;p&gt;&lt;strong&gt;Finally, AssemblyScript has a fully-functional JSON implementation.&lt;/strong&gt; &lt;em&gt;&lt;a href="https://github.com/aspkg/as-json"&gt;as-json&lt;/a&gt;&lt;/em&gt; implements full JSON compatibility that enables AssemblyScript to use JSON to communicate with APIs, store data, and more. In this article, I will introduce you to &lt;em&gt;as-json&lt;/em&gt; and help you include it into your project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;as-json&lt;/em&gt; uses the same general API as the JavaScript JSON object. We can then use it just like JS. However, we must install and prep it first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;json-as
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nt"&gt;--transform&lt;/span&gt; json-as/transform
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Installation complete. Lets use some JSON! 🔥&lt;/p&gt;

&lt;p&gt;&lt;em&gt;json-test.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json-as&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the Schemas&lt;/span&gt;
&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create the JSON object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jairus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tanaka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;english&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;43.130850291&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.926401705&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Now, encode and decode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Encoded: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JSONSchema&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Decoded:`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`{`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` firstName: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` lastName: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` age: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` human: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;human&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` meta: {`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`   country: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;,`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`   awesome: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` },`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` language: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;language&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;` location: [&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;]`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`}`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note: If you are not running in WASI, use as-console instead.&lt;/p&gt;

&lt;p&gt;So, &lt;em&gt;json-as&lt;/em&gt; serialized and deserialized JSON. Lets see if it was correct.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;json-test.ts&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json-as&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Create the Schemas&lt;/span&gt;
&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;i32&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;f64&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;json&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Meta&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;boolean&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Create the JSON object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;JSONSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jairus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tanaka&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;human&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;US&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;awesome&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;english&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;43.130850291&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;32.926401705&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// Now, encode and decode&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JSONSchema&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// We perform an equality check&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decoded&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Yay! JSON-AS works! 😄&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Oof. JSON-AS died.😖&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yay! JSON is now working for AssemblyScript. Go ahead and mess around with it and let me know what you make.&lt;br&gt;
NPM: &lt;a href="https://www.npmjs.com/package/json-as"&gt;https://www.npmjs.com/package/json-as&lt;/a&gt;&lt;br&gt;
GitHub: &lt;a href="https://github.com/aspkg/as-json"&gt;https://github.com/aspkg/as-json&lt;/a&gt;&lt;br&gt;
Thanks for reading 😁&lt;/p&gt;

</description>
      <category>webassembly</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>A Illustrated Guide To: Fusion Development</title>
      <author>Nitya Narasimhan</author>
      <pubDate>Tue, 20 Jul 2021 14:24:31 +0000</pubDate>
      <link>https://dev.to/azure/a-illustrated-guide-to-fusion-development-22l4</link>
      <guid>https://dev.to/azure/a-illustrated-guide-to-fusion-development-22l4</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;TL;DR: Key resources for learning more!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;👩🏽‍💻 &lt;a href="https://docs.microsoft.com/en-us/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Explore the Fusion Development Learning Path&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👩🏽‍🏫 &lt;a href="https://docs.microsoft.com/en-us/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Read the Fusion Development eBook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📺 &lt;a href="https://channel9.msdn.com/Events/Azure-Functions/Azure-Functions-Discover-OpenAPI-and-Power-Apps?WT.mc_ID=azurefunctionsonlearntv-35831-ninarasi"&gt;Watch Azure Functions Sessions On-Demand&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🗺 &lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;Download a hi-res poster of the Illustrated Guide&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This is a low-resolution image for the illustrated guide. Click on it to access the hi-res image -- or scroll down for a deep-dive into the illustrations.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCSfvhrx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pm9ralwv9bccbfhnlpm1.png" alt="An Illustrated Guide to Fusion Development: Shows a 25-cell 5x5 grid of images, each illustrating one unit or section of the Fusion Dev Learning Path "&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Recently, a few colleagues of mine hosted an online event that explores the topics of &lt;a href=""&gt;OpenAPI&lt;/a&gt;, &lt;a href=""&gt;Power Platforms&lt;/a&gt; and &lt;a href=""&gt;Fusion Development&lt;/a&gt; in a series of short, actionable talks. &lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/azure" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TSIs2QqE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--MdxUgcr_--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/512/64ce0b82-730d-4ca0-8359-2c21513a0063.jpg" alt="Microsoft Azure"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOJaOvLG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--bjwYsbM9--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/8619/686ae69d-8c31-462d-bd5e-c373a688e99d.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/azure/azure-functions-discover-open-api-a-learning-event-1okh" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Azure Functions: Discover OpenAPI &amp;amp; Power Apps - A Learning Event! &lt;/h2&gt;
      &lt;h3&gt;Nitya Narasimhan for Microsoft Azure ・ Jul 6 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#azure&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#openapi&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#powerfuldevs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;Didn't get a chance to attend the live event? Or just want to revisit a specific session? We have you covered! All the session replays are now available &lt;a href="https://channel9.msdn.com/Events/Azure-Functions/Azure-Functions-Discover-OpenAPI-and-Power-Apps?WT.mc_ID=azurefunctionsonlearntv-35831-ninarasi"&gt;here on Ch9&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ISqV8K5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fl4i7wxnsoj9js5vfu4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ISqV8K5m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fl4i7wxnsoj9js5vfu4.png" alt="Image shows 6 speaker cards for the 6 sessions from the Azure Functions event, each linked to a video for replay"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#learning-resources"&gt;
  &lt;/a&gt;
  Learning Resources
&lt;/h2&gt;

&lt;p&gt;The event was structured around the broader theme of &lt;em&gt;low-code development&lt;/em&gt; and &lt;em&gt;fusion teams&lt;/em&gt;. Want to dive into more details? &lt;/p&gt;

&lt;p&gt;We have resources to suit your learning style:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;👩🏽‍💻 &lt;a href="https://docs.microsoft.com/en-us/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=azurefunctionsonlearntv-34311-ninarasi"&gt;The Fusion Development Learning Path&lt;/a&gt; for kinesthetic learners. Explore concept step-by-step, with hands-on exercises. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;👩🏽‍🏫 &lt;a href="https://docs.microsoft.com/en-us/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;The Fusion Development eBook&lt;/a&gt; if learn by reading. Go from Fusion Development concepts, to code - using Power Plaform to build low-code apps!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're a visual or visual-spatial learner who likes to "see the big picture" before you dive into details - then this illustrated guide to Fusion Development is for you!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-illustrated-guide"&gt;
  &lt;/a&gt;
  The Illustrated Guide
&lt;/h2&gt;

&lt;p&gt;The illustrated guide is part of my &lt;a href="https://twitter.com/sketchthedocs"&gt;SketchTheDocs&lt;/a&gt; initiative to bring visual storytelling to tech. 65% of us are visual learners who absorb, retain, and recall, information better when we have visual cues and illustrations.&lt;/p&gt;

&lt;p&gt;Scroll up to see a low-res (thumbnail) of the illustrated guide, or visit &lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;this link&lt;/a&gt; to view or download a poster-sized version that is easier to read. Better still, install it as desktop wallpaper while you go through the learning path - and see if you can make or reinforce connections.&lt;/p&gt;

&lt;p&gt;You can also visit this tweet for a 30-second timelapse that shows how the guide was created.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2RLIUi_l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1415091010430963712/pu/img/TLVSWk54amhnLyKX.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hCF7KqCo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1336782118924455944/K4ZDwHHg_normal.png" alt="Nitya Narasimhan profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nitya Narasimhan
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/nitya"&gt;@nitya&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Sneak peek at a Visual Guide to Fusion Development - illustrated summary of a &lt;a href="https://twitter.com/MSFTLearn"&gt;@MSFTLearn&lt;/a&gt; path built by my colleagues to show how pro-devs &amp;amp; citizen devs can work together to develop apps for biz needs.&lt;br&gt;&lt;br&gt;Learn path:&lt;br&gt;&lt;a href="https://t.co/Au7j5ThrtB"&gt;aka.ms/visual/fusion-…&lt;/a&gt;&lt;br&gt;&lt;br&gt;Related Event:&lt;br&gt;&lt;a href="https://t.co/GGGcdDijOk"&gt;docs.microsoft.com/en-us/events/l…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      23:36 PM - 13 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1415092751348211714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1415092751348211714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1415092751348211714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;





&lt;h2&gt;
  &lt;a href="#under-the-hood"&gt;
  &lt;/a&gt;
  Under The Hood
&lt;/h2&gt;

&lt;p&gt;I'm working on a blog post that I will link in later, that provides a deep dive into the individual cells. &lt;/p&gt;

&lt;p&gt;For now, let's look under the hood at a few visuals that showcase core themes:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-tech-intensity"&gt;
  &lt;/a&gt;
  1. Tech Intensity
&lt;/h3&gt;

&lt;p&gt;Chance are you've heard Microsoft CEO (Satya Nadella) mention &lt;code&gt;Tech Intensity&lt;/code&gt; more than once. But what does it mean? Here's an illustrated explainer of the concept. Digital transformation cannot succeed without three dimensions that building on each other: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;technology adoption&lt;/em&gt; readiness for real-world use &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;organizational trust&lt;/em&gt; that technology is reliable&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;individual capability&lt;/em&gt; to build &amp;amp; use technology&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MfbT07lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnwxk3brr6gjh89amup3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MfbT07lB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnwxk3brr6gjh89amup3.png" alt="Image visualizing the Tech Intensity lesson"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/transform-business-software-authoring-with-fusion-dev/2-tech-intensity?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this unit&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-fusion-development-process"&gt;
  &lt;/a&gt;
  2. Fusion Development Process
&lt;/h3&gt;

&lt;p&gt;Fusion Teams reflect our growing awareness that solving real-world business problems will require the skills of diverse teams (business devs, pro devs, citizen devs) &lt;em&gt;working together&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A Fusion Development Process is about breaking the silos between teams, and providing tools and workflows that empower &lt;em&gt;all types of devs&lt;/em&gt; to build apps by contributing their expertise (where comfortable) and asking others for help (where they have skill gaps).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vSTomw9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eia1ib5or0i8pbtk4dcx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSTomw9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eia1ib5or0i8pbtk4dcx.png" alt="Image visualizing the Fusion Development process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/transform-business-software-authoring-with-fusion-dev/4-fusion-development-process?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this unit&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-low-code-development"&gt;
  &lt;/a&gt;
  3. Low Code Development
&lt;/h3&gt;

&lt;p&gt;While fusion development explores the human workflows required to build apps, the low code development focus is on &lt;em&gt;removing barriers&lt;/em&gt; that prevent different fusion team members from contributing to app development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;High Code Apps&lt;/em&gt; reflect traditional notions of app development, with rich programming languages, frameworks and workflows, and more &lt;strong&gt;imperative&lt;/strong&gt; approaches to development.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Low Code Apps&lt;/em&gt; are about more action with &lt;em&gt;less code&lt;/em&gt;, employing scripting languages, drag-and-drop UI wizards, and more &lt;strong&gt;declarative&lt;/strong&gt; approaches to development.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zNIhfHtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjv7xx5o1u2dnpl72o7x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zNIhfHtl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kjv7xx5o1u2dnpl72o7x.png" alt="Image visualizing the meaning of Low Code Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/understanding-low-code-as-a-traditional-developer/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this module&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-power-apps-platform"&gt;
  &lt;/a&gt;
  4. Power Apps Platform
&lt;/h3&gt;

&lt;p&gt;Power Apps is &lt;a href="https://powerplatform.microsoft.com/en-us/power-apps/"&gt;part of Microsoft's Power Platform&lt;/a&gt; suite of technologies supporting low-code development. Citizen developers can use this to rapidly prototype apps without requiring a programming background. Pro developers can enhance fusion team development by using platform tools to build web APIs, data connectors, and serverless integration support for their team-mates.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wxFiYmdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tplcloiiw220is0zwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxFiYmdq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7tplcloiiw220is0zwv.png" alt="Image visualizing Power Apps technology"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Learn more &lt;a href="https://docs.microsoft.com/en-us/learn/modules/understanding-low-code-as-a-traditional-developer/2-what-is-low-code?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;in this unit&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#summary-amp-next-steps"&gt;
  &lt;/a&gt;
  Summary &amp;amp; Next Steps
&lt;/h3&gt;

&lt;p&gt;That was a rapid introduction to Fusion Development and related terms and technologies. I hope you found it fun &lt;strong&gt;and&lt;/strong&gt; functional - and that it inspires you to want to learn more!&lt;/p&gt;

&lt;p&gt;Here are some resources for next steps! Happy learning journeys!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;👩🏽‍💻 &lt;a href="https://docs.microsoft.com/en-us/learn/paths/transform-business-applications-with-fusion-development/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Explore the Fusion Development Learning Path&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;👩🏽‍🏫 &lt;a href="https://docs.microsoft.com/en-us/powerapps/guidance/fusion-dev-ebook/?WT.mc_id=azurefunctionsonlearntv-35831-ninarasi"&gt;Read the Fusion Development eBook&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;📺 &lt;a href="https://channel9.msdn.com/Events/Azure-Functions/Azure-Functions-Discover-OpenAPI-and-Power-Apps?WT.mc_ID=azurefunctionsonlearntv-35831-ninarasi"&gt;Watch Azure Functions Sessions On-Demand&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;🗺 &lt;a href="https://aka.ms/visual/fusion-dev-path/illustrated"&gt;Download a hi-res poster of the Illustrated Guide&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>beginners</category>
      <category>powerfuldevs</category>
      <category>azure</category>
      <category>openapi</category>
    </item>
    <item>
      <title>Write Better Java Project</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Tue, 20 Jul 2021 14:10:27 +0000</pubDate>
      <link>https://dev.to/surajondev/write-better-java-project-2055</link>
      <guid>https://dev.to/surajondev/write-better-java-project-2055</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;When we first started our coding journey. The program used to be short. The compiler was enough to know all the technical errors and warnings. We go on to solve those errors.&lt;/p&gt;

&lt;p&gt;As we kept on learning and developing projects. The codebase was getting larger, the complexity increases. It becomes hard to keep up with the code quality and code structures. &lt;/p&gt;

&lt;p&gt;Now the compiler can only show code errors but as a whole project was unable to provide any data.&lt;br&gt;
In such a case a program that can detect errors in the whole package can be very handy. So one such tool is Jarchitect.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-jarchitect"&gt;
  &lt;/a&gt;
  What is Jarchitect?
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.jarchitect.com/"&gt;Jarchitect&lt;/a&gt; is a software for analyzing the Java-based project developed by CodeGear in 2009. It was intended to help developers to create a better project by providing different statistics and metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bUP7GWDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1625812508040_transparentlogo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bUP7GWDb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1625812508040_transparentlogo.png" alt="Jarchitect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The software is efficient in providing statics about the project. It supports a large number of metrics with visualization of dependency with dependency graphs and matrix graphs. It provides code quality with pre-defined quality metrics.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  Features
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Code Querying&lt;/strong&gt;: You can write the custom query to check for different conditions and can perform actions accordingly. It uses CQLinq for queries.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Quality Gates&lt;/strong&gt;: A quality gate is various check son the code to determine the overall quality of the software. It can fail a build if certain criteria do not meet.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Issue Management&lt;/strong&gt;: There can be a number of issues that are detected by the software. It has an issue management panel that helps you to manage your all issue in one place.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Code Quality Metrics&lt;/strong&gt;: It comes with code quality metrics that measure the quality of code. The number of lines in a code is one of the measures of code quality. Jarchitect comes with 80+ metrics.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Plugin Interaction&lt;/strong&gt;: The data extracted by Jarchitect can be more useful with the integration of plugins.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Diagrams&lt;/strong&gt;: It provides graphs to show statistics. &lt;/li&gt;
&lt;li&gt;It shows the following graphs:

&lt;ul&gt;
&lt;li&gt;Treemap Metrics&lt;/li&gt;
&lt;li&gt;Dependencies Matrix&lt;/li&gt;
&lt;li&gt;Dependencies Graph&lt;/li&gt;
&lt;li&gt;Abstractness vs Instability&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check more features and read in detail about listed features &lt;a href="https://www.jarchitect.com/features"&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  PROS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Useful Metrics&lt;/strong&gt;: It provides many useful metrics that can be used to improve the software and code quality.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Easily Query through Data&lt;/strong&gt;: You can query through the data to perform conditions on extracted data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Many types of data&lt;/strong&gt;: There are many metrics and are indifferent formats such as string, graphs, diagrams, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--It0NRyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1626688421879_dashboard.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--It0NRyFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1626688421879_dashboard.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  CONS
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;UI/UX&lt;/strong&gt;: The UI felt very old. It will take some time to be used to the interface as many panels are displayed on the screen at a time.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8d5iSnCu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://paper-attachments.dropbox.com/s_FD83CA05E4BCD846F3B1797E9CD3AF5F3B8D0C7F77F0A66004462BB887D17B63_1626688438918_jarchitectscreenshot.jpg" alt=""&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://www.jarchitect.com/GettingStarted"&gt;The software&lt;/a&gt; is good for finding issues and errors in the project. It has some useful data such as technical debt, code quality, etc. But due to bad UI, it makes it harder to notice all the usage metrics. Some are lost and some are hidden. Also, the pricing can be an issue for individual developers, especially with newbies.&lt;/p&gt;

&lt;p&gt;It has a &lt;a href="https://www.jarchitect.com/download"&gt;14-day free trial&lt;/a&gt;, I highly recommend you to try it once and find if it is useful for you.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading the blog post. One secret is that Jarchitect has approached me to write this review.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>beginners</category>
      <category>productivity</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>The four noisy horsemen of Perl hate</title>
      <author>Mark Gardner</author>
      <pubDate>Tue, 20 Jul 2021 14:00:00 +0000</pubDate>
      <link>https://dev.to/mjgardner/the-four-noisy-horsemen-of-perl-hate-o6p</link>
      <guid>https://dev.to/mjgardner/the-four-noisy-horsemen-of-perl-hate-o6p</guid>
      <description>&lt;p&gt;I publish &lt;a href="https://phoenixtrap.com/tag/perl/"&gt;Perl stories&lt;/a&gt; on this blog once a week, and it seems every time there’s at least one response on social media that amounts to, “I hate Perl because of its weird syntax.” Or, “It looks like line noise.” (Perl seems to have outlasted that one—when’s the last time you used an acoustic modem?) Or the quote attributed to &lt;a href="http://bostic.com"&gt;Keith Bostic&lt;/a&gt;: “The only language that looks the same before and after RSA encryption.”&lt;/p&gt;

&lt;p&gt;So let’s address, confront, and demystify this hate. What are these objectionable syntactical, noisy, possibly encrypted bits? And why does Perl have them?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#regular-expressions"&gt;
  &lt;/a&gt;
  Regular expressions
&lt;/h2&gt;

&lt;p&gt;Regular expressions, or &lt;em&gt;regexps&lt;/em&gt;, are not unique to Perl. JavaScript &lt;a href="https://262.ecma-international.org/12.0/#sec-regexp-regular-expression-objects"&gt;has them&lt;/a&gt;. Java &lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/package-summary.html"&gt;has them&lt;/a&gt;. Python &lt;a href="https://docs.python.org/3/library/re.html"&gt;has them&lt;/a&gt; as well as &lt;a href="https://pypi.org/project/regex/"&gt;another module&lt;/a&gt; that adds even more features. It’s hard to &lt;a href="https://en.wikipedia.org/wiki/Comparison_of_regular-expression_engines#Languages"&gt;find a language&lt;/a&gt; that doesn’t have them, either natively or through the use of a library. It’s common to want to search text using some kind of pattern, and regexps provide a fairly standardized if terse mini-language for doing so. There’s even a C‑based library called &lt;a href="https://www.pcre.org/"&gt;PCRE&lt;/a&gt;, or “Perl Compatible Regular Expressions,” enabling many other pieces of software to embed a regexp engine that’s inspired by (though &lt;a href="https://www.pcre.org/current/doc/html/pcre2compat.html"&gt;not quite compatible&lt;/a&gt;) with Perl’s syntax.&lt;/p&gt;

&lt;p&gt;Being itself inspired by Unix tools like &lt;a href="https://www.gnu.org/software/grep/"&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/a&gt;, &lt;a href="https://www.gnu.org/software/sed/manual/sed.html"&gt;&lt;code&gt;sed&lt;/code&gt;&lt;/a&gt;, and &lt;a href="https://en.wikipedia.org/wiki/AWK"&gt;&lt;code&gt;awk&lt;/code&gt;&lt;/a&gt;, &lt;strong&gt;Perl incorporated regular expressions into the language as few other languages have&lt;/strong&gt; , with &lt;a href="https://perldoc.pl/perlop#Binding-Operators"&gt;binding operators&lt;/a&gt; of &lt;code&gt;=~&lt;/code&gt; and &lt;code&gt;!~&lt;/code&gt; enabling easy matching and substitutions against expressions, and &lt;a href="https://perldoc.pl/perlop#Regexp-Quote-Like-Operators"&gt;pre-compilation&lt;/a&gt; of regexps into their own type of value. Perl then added the ability to &lt;a href="https://perldoc.pl/perlre#/x-and-/xx"&gt;separate regexps by whitespace&lt;/a&gt; to improve readability, use &lt;a href="https://perldoc.pl/perlop#Quote-and-Quote-like-Operators"&gt;different delimiters&lt;/a&gt; to avoid the &lt;a href="https://en.wikipedia.org/wiki/Leaning_toothpick_syndrome"&gt;leaning-toothpick syndrome&lt;/a&gt; of escaping slash (&lt;code&gt;/&lt;/code&gt;) characters with backslashes (&lt;code&gt;\&lt;/code&gt;), and name your &lt;a href="https://perldoc.pl/perlre#(?%3CNAME%3Epattern)"&gt;capture groups&lt;/a&gt; and &lt;a href="https://perldoc.pl/perlre#%5Ck%3CNAME%3E"&gt;backreferences&lt;/a&gt; when substituting or extracting strings.&lt;/p&gt;

&lt;p&gt;All this is to say that Perl regular expressions can be some of the most readable and robust &lt;strong&gt;when used to their full potential&lt;/strong&gt;. Early on this helped cement Perl’s reputation as a text-processing powerhouse, though the core of regexps’ succinct syntax can result in difficult-to-read code. Such inscrutable examples can be found in any language that implements regular expressions; at least Perl offers the enhancements mentioned above.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sigils"&gt;
  &lt;/a&gt;
  Sigils
&lt;/h2&gt;

&lt;p&gt;Perl has &lt;a href="https://perldoc.pl/perldata#Variable-names"&gt;three built-in data types&lt;/a&gt; that enable you to build all other data structures no matter how complex. Its variable names are always preceded by a &lt;em&gt;sigil&lt;/em&gt;, which is just a fancy term for a symbol or punctuation mark.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;scalar&lt;/strong&gt; contains a string of characters, a number, or a &lt;a href="https://perldoc.pl/perlref"&gt;reference&lt;/a&gt; to something, and is preceded with a &lt;code&gt;$&lt;/code&gt; (dollar sign).&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;array&lt;/strong&gt; is an ordered list of scalars beginning with an element numbered 0 and is preceded with a &lt;code&gt;@&lt;/code&gt; (at sign). &lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;hash&lt;/strong&gt; , or associative array, is an unordered collection of scalars indexed by string keys and is preceded with a &lt;code&gt;%&lt;/code&gt; (percent sign).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So variable names &lt;code&gt;$look&lt;/code&gt; &lt;code&gt;@like&lt;/code&gt; &lt;code&gt;%this&lt;/code&gt;. Individual elements of arrays or hashes are scalars, so they &lt;code&gt;$look[0]&lt;/code&gt; &lt;code&gt;$like{'this'}&lt;/code&gt;. (That’s the first element of the &lt;code&gt;@look&lt;/code&gt; array counting from zero, and the element in the &lt;code&gt;%like&lt;/code&gt; hash with a key of &lt;code&gt;'this'&lt;/code&gt;.)&lt;/p&gt;

&lt;p&gt;Perl also has a concept of &lt;a href="https://perldoc.pl/perldata#Slices"&gt;slices&lt;/a&gt;, or selected parts of an array or hash. A slice of an array looks like &lt;code&gt;@this[1, 2, 3]&lt;/code&gt;, and a slice of a hash looks like &lt;code&gt;@that{'one', 'two', 'three'}&lt;/code&gt;. You could write it out long-hand like &lt;code&gt;($this[1], $this[2], $this[3])&lt;/code&gt; and &lt;code&gt;($that{'one'}, $that{'two'}, $that{'three'}&lt;/code&gt; but &lt;strong&gt;slices are much easier&lt;/strong&gt;. Plus you can even specify one or more ranges of elements with the &lt;code&gt;..&lt;/code&gt; operator, so &lt;code&gt;@this[0 .. 9]&lt;/code&gt; would give you the first ten elements of &lt;code&gt;@this&lt;/code&gt;, or &lt;code&gt;@this[1 .. 4, 6 .. 9]&lt;/code&gt; would give you nine with the one at index &lt;code&gt;5&lt;/code&gt; missing. Handy, that.&lt;/p&gt;

&lt;p&gt;In other words, &lt;strong&gt;the sigil always tells you what you’re going to get&lt;/strong&gt;. If it’s a single scalar value, it’s preceded with a &lt;code&gt;$&lt;/code&gt;; if it’s a list of values, it’s preceded with a &lt;code&gt;@&lt;/code&gt;; and if it’s a hash of key-value pairs, it’s preceded with a &lt;code&gt;%&lt;/code&gt;. You never have to be confused about the contents of a variable because &lt;strong&gt;the name will tell you what’s inside&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#data-structures-anonymous-values-and-dereferencing"&gt;
  &lt;/a&gt;
  Data structures, anonymous values, and dereferencing
&lt;/h2&gt;

&lt;p&gt;I mentioned earlier that you can build complex data structures from Perl’s three built-in data types. Constructing them without a lot of intermediate variables requires you to use things like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;lists&lt;/strong&gt; , denoted between &lt;code&gt;(&lt;/code&gt; parentheses &lt;code&gt;)&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;anonymous arrays&lt;/strong&gt; , denoted between &lt;code&gt;[&lt;/code&gt; square brackets &lt;code&gt;]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;and &lt;strong&gt;anonymous hashes&lt;/strong&gt; , denoted between &lt;code&gt;{&lt;/code&gt; curly braces &lt;code&gt;}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Given these tools you could build, say, a scalar referencing an array of street addresses, each address being an anonymous hash:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;$addresses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;John Doe&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;address&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;123 Any Street&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Anytown&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;state&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;TX&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Mary Smith&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;address&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;100 Other Avenue&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Whateverville&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
    &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;state&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PA&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;(The &lt;code&gt;=&amp;gt;&lt;/code&gt; is just a way to show correspondence between a hash key and its value, and is just a funny way to write a comma (&lt;code&gt;,&lt;/code&gt;). And like &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas"&gt;some other programming languages&lt;/a&gt;, it’s OK to have trailing commas in a list as we do for the &lt;code&gt;'state'&lt;/code&gt; entries above; it makes it easier to add more entries later.)&lt;/p&gt;

&lt;p&gt;Although I’ve nicely spaced out my example above, you can imagine &lt;strong&gt;a less sociable developer might cram everything together&lt;/strong&gt; without any spaces or newlines. Further, to extract a specific value from this structure this same person might write the following, making you count dollar signs one after another while reading right-to-left then left-to-right:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$$addresses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]{'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don’t have to do that, though; we can use arrows that look like &lt;code&gt;-&amp;gt;&lt;/code&gt; to dereference our array and hash elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="nv"&gt;$addresses&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can even use postfix dereferencing to pull a slice out of this structure, which is just a fancy way of saying “always reading left to right”:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight perl"&gt;&lt;code&gt;&lt;span class="nv"&gt;say&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;$addresses&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;@&lt;/span&gt;&lt;span class="p"&gt;{'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="p"&gt;',&lt;/span&gt; &lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;city&lt;/span&gt;&lt;span class="p"&gt;'};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which prints out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mary Smith
Whateverville
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like I said above, the sigil always tells you what you’re going to get. In this case, we got:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a sliced list of values with the keys &lt;code&gt;'name'&lt;/code&gt; and &lt;code&gt;'city'&lt;/code&gt; out of…&lt;/li&gt;
&lt;li&gt;an anonymous hash that was itself the second element (counting from zero, so index of &lt;code&gt;1&lt;/code&gt;) referenced in…&lt;/li&gt;
&lt;li&gt;an anonymous array which was itself referenced by…&lt;/li&gt;
&lt;li&gt;the scalar named &lt;code&gt;$addresses&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s a mouthful, but complicated data structures often are. That’s why Perl provides a Data Structures Cookbook as the &lt;a href="https://perldoc.pl/perldsc"&gt;&lt;code&gt;perldsc&lt;/code&gt; documentation page&lt;/a&gt;, a references tutorial as the &lt;a href="https://perldoc.pl/perlreftut"&gt;&lt;code&gt;perlreftut&lt;/code&gt; page&lt;/a&gt;, and finally a detailed guide to references and nested data structures as the &lt;a href="https://perldoc.pl/perlref"&gt;&lt;code&gt;perlref&lt;/code&gt; page&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#special-variables"&gt;
  &lt;/a&gt;
  Special variables
&lt;/h2&gt;

&lt;p&gt;Perl was also inspired by Unix command shell languages like the &lt;a href="https://en.wikipedia.org/wiki/Bourne_shell"&gt;Bourne shell&lt;/a&gt; (&lt;code&gt;sh&lt;/code&gt;) or &lt;a href="https://www.gnu.org/software/bash/"&gt;Bourne-again shell&lt;/a&gt; (&lt;code&gt;bash&lt;/code&gt;), so it has many special variable names using punctuation. There’s &lt;code&gt;@_&lt;/code&gt; for the array of arguments passed to a subroutine, &lt;code&gt;$$&lt;/code&gt; for the process number the current program is using in the operating system, and so on. Some of these are so common in Perl programs they are written without commentary, but for the others &lt;strong&gt;there is always the &lt;a href="https://perldoc.pl/English"&gt;&lt;code&gt;English&lt;/code&gt;&lt;/a&gt; module&lt;/strong&gt;, enabling you to substitute in friendly (or at least more &lt;code&gt;awk&lt;/code&gt;-like) names.&lt;/p&gt;

&lt;p&gt;With &lt;code&gt;use English;&lt;/code&gt; at the top of your program, you can say:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;$LIST_SEPARATOR&lt;/code&gt; instead of &lt;code&gt;$"&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;$PROCESS_ID&lt;/code&gt; or &lt;code&gt;$PID&lt;/code&gt; instead of &lt;code&gt;$$&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;@{^CAPTURE}&lt;/code&gt; array instead of the numbered regular expression capture variables like &lt;a href="https://perldoc.pl/perlvar#%24%3Cdigits%3E-(%241,-%242,-...)"&gt;&lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt;, and &lt;code&gt;$3&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;et cetera.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of these predefined variables, punctuation and &lt;code&gt;English&lt;/code&gt; names alike, are documented on the &lt;a href="https://perldoc.pl/perlvar"&gt;&lt;code&gt;perlvar&lt;/code&gt; documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The choice to use punctuation variables or their &lt;code&gt;English&lt;/code&gt; equivalents is up to the developer, and some have more familiarity with and assume their readers understand the punctuation variety. Other less-friendly developers engage in “&lt;a href="https://en.wikipedia.org/wiki/Code_golf"&gt;code golf&lt;/a&gt;,” attempting to express their programs in as few keystrokes as possible.&lt;/p&gt;

&lt;p&gt;To combat these and other unsociable tendencies, the &lt;a href="https://perldoc.pl/perlstyle"&gt;&lt;code&gt;perlstyle&lt;/code&gt; documentation page&lt;/a&gt; admonishes, “Perl is designed to give you several ways to do anything, so &lt;strong&gt;consider picking the most readable one&lt;/strong&gt;.” Developers can (and should) also use the &lt;a href="https://metacpan.org/dist/Perl-Critic/view/bin/perlcritic"&gt;&lt;code&gt;perlcritic&lt;/code&gt;&lt;/a&gt; tool and its &lt;a href="https://metacpan.org/dist/Perl-Critic/view/lib/Perl/Critic/PolicySummary.pod"&gt;included policies to encourage best practices&lt;/a&gt;, such as &lt;a href="https://metacpan.org/pod/Perl::Critic::Policy::Variables::ProhibitPunctuationVars"&gt;prohibiting all but a few common punctuation variables&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion-do-you-still-hate-perl"&gt;
  &lt;/a&gt;
  Conclusion: Do you still hate Perl?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&lt;a href="https://www.stroustrup.com/quotes.html"&gt;Bjarne Stroustrup&lt;/a&gt;, designer of the C++ programming language&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s easy to hate what you don’t understand. I hope that reading this article has helped you decipher some of Perl’s “noisy” quirks as well as its features for increased readability. Let me know in the comments if you’re having trouble grasping any other aspects of the language or its ecosystem, and I’ll do my best to address them in future posts.&lt;/p&gt;

</description>
      <category>perl</category>
      <category>regularexpressions</category>
      <category>hate</category>
      <category>regex</category>
    </item>
    <item>
      <title>Creating a Spotify Web Clone with ReactJS+Spotify WEB API.</title>
      <author>sumit kumar bighaniya</author>
      <pubDate>Tue, 20 Jul 2021 13:41:19 +0000</pubDate>
      <link>https://dev.to/ammyy9908/creating-a-spotify-web-clone-with-reactjs-spotify-web-api-1b8g</link>
      <guid>https://dev.to/ammyy9908/creating-a-spotify-web-clone-with-reactjs-spotify-web-api-1b8g</guid>
      <description>&lt;p&gt;Pre View:&lt;a href="https://romantic-wozniak-9ac9cd.netlify.app"&gt;View:&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post i represent how i build a spotify clone web app using ReactJS+Redux using Spotify Web API...&lt;a href="https://developer.spotify.com/documentation/web-api/"&gt;Read docs.&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note::
&lt;/h3&gt;

&lt;p&gt;We cannot play audio of any song because this feature is not yet updated in spotify web api docs.&lt;/p&gt;

&lt;p&gt;hence in this project user can view their spotify data in terms of application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actors-of-the-application"&gt;
  &lt;/a&gt;
  Actors of the Application:
&lt;/h3&gt;

&lt;p&gt;Non-Premium Spotify Users:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;* Check their latest played song
* Visit Spotify User profile.
* Check their saved &amp;amp; liked playlists.
* View which device playing current song in song player.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Premium Spotify Users:&lt;br&gt;
    * The above 4 features of Non Premium Users is also same for the Premium users &lt;br&gt;
    in addition with this premium users can control player i.e user can play Next, Previous song, stop or resume the current played song, user can also control device volume by sliding the user control in player.&lt;/p&gt;

&lt;p&gt;Github Repo:&lt;a href="https://github.com/Ammyy9908/spotify"&gt;Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please 🌟 the repo if you like.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Github Copilot, useState e useEffects</title>
      <author>Sergio</author>
      <pubDate>Tue, 20 Jul 2021 13:23:29 +0000</pubDate>
      <link>https://dev.to/sergjun/github-copilot-usestate-e-useeffects-dep</link>
      <guid>https://dev.to/sergjun/github-copilot-usestate-e-useeffects-dep</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introducao"&gt;Introdução&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useState"&gt;useState&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#useEffect"&gt;useEffect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Copilot"&gt;Github Copilot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Links"&gt;Links úteis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Introdução&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Recentemente, comecei a estudar React no curso do &lt;a href="https://estartandodevs.com.br/"&gt;Estardando Devs&lt;/a&gt; e acabamos estudando esses dois hooks primordiais, &lt;b&gt;useState&lt;/b&gt; e o &lt;b&gt;useEffect&lt;/b&gt;, algumas coisas sobre ambos conceitos ficaram um tanto quanto confusas para mim, então, depois de muito apanhar e praticar fui pesquisar e procurar entender mais sobre ambos para complementar o meu conhecimento. &lt;/p&gt;

&lt;p&gt;Resolvi escrever esse texto para fixar mais esse aprendizado e talvez até ajudar qualquer pessoa que venha a ter dúvida semelhantes a minha, durante esse meio tempo de aprendizado, o meu acesso ao Github Copilot foi liberado e eu achei interessante narrar como foi "aprender" algo com uma tecnologia de I.A me dando algum auxilio e como ela funciona.  &lt;/p&gt;

&lt;p&gt;Reforçando que, esse texto se limita as minhas opiniões e experiencias;&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;Não irei entrar nos conceitos de &lt;b&gt;"O que é hook"&lt;/b&gt; ou explicações profundas sobre o &lt;b&gt;React&lt;/b&gt;, nem acho que tenho conhecimento para tal ainda, usarei exemplos simples mas funcionais que me ajudaram a entender melhor os conceitos e no final do texto irei deixar links de artigos que eu li/estou lendo para ter uma compreensão mais detalhada sobre tudo o que está sendo escrito aqui.  &lt;/p&gt;

&lt;p&gt;Criticas e sugestões sobre o conteúdo o texto são sempre bem vindas, por favor, se achou algo errado/mal escrito ou coisa do tipo, me oriente que eu irei arrumar assim que possível!  &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;useState&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Pelas minhas pesquisas e por uma leve quantidade de dedução,o &lt;b&gt;useState&lt;/b&gt;, é o primeiro hook que geralmente é mostrado quando React é ensinado ou falado,  na documentação oficial do React o exemplo que nós é apresentado é em forma de contador, escrito em código ficaria mais ou menos assim:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
import React, { useState } from 'react;

function Example() {
    const [count, setCount] = useState(0)

    return (

            &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;
            &amp;lt;button&amp;gt; setCount(count + 1)}&amp;amp;gt;
                Click me
            &amp;lt;/button&amp;gt;

    );
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Antes de eu dar minha explicação sobre como consegui entender melhor o que o useState faz, vou postar a forma feito em Javascript puro pra mostrar exatamente o que o count é e o que o setCount são:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
let count = 0;

const setCount = (value) =&amp;amp;gt; {
    count = value
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;O useState tem dois valores, o primeiro é uma &lt;b&gt;variável&lt;/b&gt; e o segundo é uma &lt;b&gt;função&lt;/b&gt;,e o trabalho dessa função é basicamente atualizar a variável!&lt;/p&gt;

&lt;p&gt;Exemplificando a variável agora que esse exemplo está claro:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;const [count, setCount] = useState(0)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;const&lt;/b&gt; - declaração de que a variável é uma const.&lt;br&gt;
&lt;b&gt;[count, setCount ]&lt;/b&gt; - desestruturação do array, onde &lt;b&gt;count&lt;/b&gt; é a variável e &lt;b&gt;setCount&lt;/b&gt; - é a função que atualiza o estado dessa variável.&lt;br&gt;
&lt;b&gt; useState(0)&lt;/b&gt; - passando o parâmetro inicial para a função e consequentemente para a variável, ou seja, &lt;b&gt;count&lt;/b&gt; ira começar em &lt;b&gt;(0)&lt;/b&gt;&lt;/p&gt;

&lt;h4&gt;Reforçando que:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;useState é um &lt;b&gt;array&lt;/b&gt;, mas seu retorno não está limitado a tal, no exemplo acima foi passado um nú mero, porem poderia ter sido passado uma string &lt;b&gt;" "&lt;/b&gt; (vazia ou não), ou um objeto &lt;b&gt;{ }&lt;/b&gt; (vazio ou não) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ainda sobre a ideia de ser um array, a desestruturação do mesmo é opcional e facilita muito a leitura, mas poderia ser usado dessa forma:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const arrayState = useState(0);
 const count = arrayState[0]; 
 const setCount = arrayState[1];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Um ultimo exemplo usando dois useStates para exemplificar:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
    const [count, setCount] = useState (0)
    const [theme, setTheme] = useState ("")

    function decrementCount () {
        setCount(prevCount =&amp;amp;gt; prevCount -1)
        setTheme('green')
    }

    function incrementCount() {
        setCount(prevCount =&amp;amp;gt; prevCount +1)
        setTheme('blue')
    }

    return (
        &amp;amp;lt;&amp;amp;gt;
        &amp;lt;button&amp;gt; - &amp;lt;/button&amp;gt;
        &amp;lt;span&amp;gt;{count}&amp;lt;/span&amp;gt;
        &amp;lt;span&amp;gt;{theme}&amp;lt;/span&amp;gt;
        &amp;lt;button&amp;gt; + &amp;lt;/button&amp;gt; 
        &amp;amp;gt;
    )
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;No código acima, temos dois useState, um para gerenciar a variável &lt;b&gt;count&lt;/b&gt; inicialmente declarado como &lt;b&gt;0&lt;/b&gt;, e um para gerenciar a variável &lt;b&gt;theme&lt;/b&gt;, inicialmente declarado como " " (uma string vazia), e temos dois botões no fim do código onde, cada um deles tem uma função diferente atribuída, ao se clicar no botão de &lt;b&gt;-&lt;/b&gt; a variável &lt;b&gt;count&lt;/b&gt; sera subtraída em 1 e a variável &lt;b&gt;theme&lt;/b&gt; vai renderizar &lt;b&gt;green&lt;/b&gt; na tela, ao clicar no botão de &lt;b&gt;+&lt;/b&gt; a variável &lt;b&gt;count&lt;/b&gt; sera somada em 1 e a variável &lt;b&gt;theme&lt;/b&gt; ira renderizar &lt;b&gt;blue&lt;/b&gt;!&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;useEffect&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Confesso que esse eu demorei um pouco mais para entender, o conceito e o que fazia, mas com o exemplo que eu vi, e irei escrever aqui, ficou claro e bem mais compreensível. &lt;/p&gt;

&lt;p&gt;Dada a minha própria limitação, não sera tão extenso quanto o &lt;b&gt;useState&lt;/b&gt; foi, mas acredito que ficará claro! &lt;/p&gt;

&lt;p&gt;Um jeito simples de se entender o useEffect de inicio é, pensar em um bloco de código que você deseja executar toda vez que algum componente for renderizado, isso ficou bem confuso de inicio mas o exemplo abaixo me fez entender melhor:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App () {
    const [resourceType, setResourceType] = useState ('')

    console.log('render')

    useEffect (() =&amp;amp;gt; {
        console.log("resourceType changed")

    }, [resourceType] )

    return (
        &amp;amp;lt;&amp;amp;gt;

                &amp;lt;button&amp;gt; setResourceType('post')}&amp;amp;gt;Post&amp;lt;/button&amp;gt;
                &amp;lt;button&amp;gt; setResourceType('users')}&amp;amp;gt;Users&amp;lt;/button&amp;gt;
                &amp;lt;button&amp;gt; setResourceType('comments')}&amp;amp;gt;Comments&amp;lt;/button&amp;gt;

            &amp;lt;h1&amp;gt;{resourceType}&amp;lt;/h1&amp;gt;
        &amp;amp;gt;
    )
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;De inicio, temos a utilização do useState novamente, como dito na parte de cima, ele é uma hook que ira controlar estados, &lt;b&gt;resourceType&lt;/b&gt; é a variável e &lt;b&gt;setResourceType&lt;/b&gt; a função que atualiza o valor dessa variável, e de inicio está sendo passado uma string vazia para ela &lt;b&gt;( ' ' )&lt;/b&gt;. &lt;/p&gt;

&lt;p&gt;Logo abaixo dessa declaração, temos um &lt;b&gt;console.log&lt;/b&gt; que ira renderizar a palavra render, e em seguida temos o uso do &lt;b&gt;useEffect&lt;/b&gt;, o mesmo recebe uma função como parâmetro (que pelo o que eu vi, quase sempre será uma arrow function) e essa função irá rodar outro &lt;b&gt;console.log&lt;/b&gt; com a frase resourceType changed, e no fim do &lt;b&gt;useEffect&lt;/b&gt;, temos um array com um parâmetro, nesse caso o &lt;b&gt;resourceType&lt;/b&gt;, a nossa variável lá do inicio. &lt;/p&gt;

&lt;p&gt;Na ultima parte, temos a renderização, três botoes, cada botão executando a função &lt;b&gt;setResourceType&lt;/b&gt; e em cada um deles um parâmetro diferente é passado, no primeiro botão, o parâmetro é o &lt;b&gt;post&lt;/b&gt;, no segundo botão, o parâmetro é &lt;b&gt;users&lt;/b&gt;, e no terceiro o parâmetro é &lt;b&gt;comments&lt;/b&gt;. &lt;/p&gt;

&lt;p&gt;A funcionalidade do useEffect no exemplo acima será a seguinte: &lt;/p&gt;

&lt;p&gt;Quando esse componente for renderizado, ele ira exibir no console a palavra render devido aquele primeiro console.log, ao se clicar em qualquer um dos botões, o &lt;b&gt;h1&lt;/b&gt; da página irá renderizar de acordo com o botão (&lt;b&gt;post &lt;/b&gt;ou &lt;b&gt;users&lt;/b&gt; ou &lt;b&gt;comments&lt;/b&gt;) e ira exibir resourceType changed que estava no segundo console.log dentro do useEffect. &lt;/p&gt;

&lt;p&gt;Isso acontece pois, como parâmetro, no useEffect, nos passamos o &lt;b&gt;resourceType&lt;/b&gt; dentro daquele array, com isso, o bloco de código dentro do useEffect só sera rodado se o &lt;b&gt;resourceType&lt;/b&gt; for modificado! &lt;/p&gt;

&lt;p&gt;Se não houvesse parametro no array, e o mesmo estivesse vazio &lt;b&gt;[ ]&lt;/b&gt;, o bloco do useEffect seria usado apenas uma vez, durante a primeira renderização! &lt;/p&gt;

&lt;p&gt;Se clicar no botão do &lt;b&gt;Post&lt;/b&gt; uma vez, quando qualquer um dos dois outros parâmetros (&lt;b&gt;users&lt;/b&gt; ou &lt;b&gt;comments&lt;/b&gt;) estiver renderizado na tela, as duas mensagens serão exibidas, pois ao clicar no botão você chamou a função &lt;b&gt;setResourceType&lt;/b&gt; e assim modificou o &lt;b&gt;resourceType&lt;/b&gt; fazendo com que o código do bloco &lt;b&gt;useEffect&lt;/b&gt; seja executado, mas se após isso, você clicar novamente no mesmo botão, você tera apenas um dos consoles.log, o de render, fora do useEffect, pois o &lt;b&gt;resourceType&lt;/b&gt; segue sem ser modificado, era um &lt;b&gt;Post&lt;/b&gt; e você clicando no mesmo botão ele continua sendo um &lt;b&gt;Post&lt;/b&gt;, segue inalterado. &lt;/p&gt;

&lt;p&gt;Esse foi o exemplo mais simples que consegui achar e ver na pratica o useEffect e facilitou demais o entendimento do mesmo para mim, por isso achei interessante escrever ele para reforçar, só que, o useEffect não se limita a isso, há um conceito mais abrangente nele que envolve &lt;b&gt;React class lifecycle methods&lt;/b&gt; e &lt;b&gt;componentDidMount, componentDidUpdate, e componentWillUnmount&lt;/b&gt; (infelizmente não consegui achar o nome desses conceitos em português e não achei uma boa ideia fazer tradução ao pé da letra). &lt;/p&gt;

&lt;p&gt;Não posso falar sobre esses conceitos pois, ainda estou estudando e entendendo tudo isso, talvez num texto futuro eu escreva sobre, irei deixar os links que eu estou acompanhando e se aprofundam mais nesses assuntos na ultima parte! &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Github Copilot&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Por fim, minha experiencia com a inteligencia artificial de copiloto! &lt;/p&gt;

&lt;p&gt;Bom, fiquei bem feliz ao receber no sábado o convite para o acesso antecipado do programa, estava (estou ainda na real) construindo um site para consumir a API do Github e exibir algumas informações e por coincidência recebi o convite no meio desse processo, mesmo sendo um projeto "simples" a primeira aparição do Copilot foi quase que imediata. &lt;/p&gt;

&lt;p&gt;Após a extensão ser instalada, você pode começar a utilizar o copiloto, usando a tag de comentário no Javascript &lt;b&gt;(//)&lt;/b&gt; e descrevendo o que você tem intenção de fazer geralmente retorna algo, utilizei as palavras fetch github api e em instantes depois de alguns enters o seguinte código me foi retornado:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function App() {
 //fetch data from github API
 const [data, setData] = useState(null);
 useEffect(() =&amp;amp;gt; {
   fetch("https://api.github.com/users/sergjun/repos")
     .then(response =&amp;amp;gt; response.json())
     .then(repos =&amp;amp;gt; setData(repos))
 }, []);

 return (

     &amp;lt;h2&amp;gt;
       Top languages
     &amp;lt;/h2&amp;gt;
     {data &amp;amp;amp;&amp;amp;amp; data.map((repo, i) =&amp;amp;gt; (

         &amp;lt;h4&amp;gt;{repo.name}&amp;lt;/h4&amp;gt;
         &amp;lt;p&amp;gt;{repo.description}&amp;lt;/p&amp;gt;

     ))}

 );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Um fetch honesto ( ao meu ver de iniciante ) onde ele faz justamente o que se propõe, a única coisa que eu alterei no período em que estava testando foi o retorno do parâmetro do useState (&lt;b&gt;null&lt;/b&gt;), por algum motivo esse valor acabava quebrando a aplicação, ao se colocar um retorno de string vazia (&lt;b&gt;" "&lt;/b&gt;) ela parava de crashar. &lt;/p&gt;

&lt;p&gt;Essa foi a vez que o Copilot mais "deu as caras", no resto do código, não sei se por falha minha, ou dele, ou talvez a "complexidade" da aplicação, ele não palpitou e honestamente, não fez tanta falta, ficou ao meu ver sendo bem parecido com snippets ou trechos de código meio que prontos que as vezes você copia e altera algumas coisas. &lt;/p&gt;

&lt;p&gt;Ainda assim, é uma tecnologia muito interessante, que estou curioso para ver como irá evoluir e se comportar nos próximos tempos, é bem interessante ver as soluções propostas por ele, outras pessoas já disseram isso de forma exaustiva mas sempre é bom reforçar, não adianta copiar e colar, em algumas das sugestões, o mesmo fazia a sugestão de utilização de react com classes e de nada adiantaria eu usar um código daquele tipo sendo que nada entenderia.&lt;br&gt;
 &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2&gt;Links úteis&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Como eu falei, sou iniciante nisso tudo, há um mar de informações e diversas referencias pelas quais se pode procurar por ai, estou usando essas e aceito toda e qualquer tipo de contribuição!&lt;br&gt;
 &lt;br&gt;
 &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pt-br.reactjs.org/docs/getting-started.html"&gt;Documentação oficial do React&lt;/a&gt;&lt;br&gt;
  &lt;br&gt;
&lt;a href="https://dev.to/dan_abramov/making-sense-of-react-hooks-2eib"&gt;Um texto do Dan Abramov falando sobre Hooks (inglês)&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://pt-br.reactjs.org/docs/hooks-intro.html"&gt;Documentação oficial do React introduzindo hooks&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://javascript.plainenglish.io/react-hooks-how-to-use-useeffect-ecea3e90d84f"&gt;Artigo muito bom falando sobre useEffect que o @ramonrxm me passou, muito obrigado, mais uma vez! (inglês)&lt;/a&gt;&lt;br&gt;
 &lt;br&gt;
&lt;a href="https://blog.webdevsimplified.com/2020-04/use-effect/"&gt;Artigo do autor do canal "web dev simplified" falando sobre useEffects, alguns exemplos foram tirados do canal dele, dos vídeos de useState e useEffect, recomendo demais! (inglês)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>github</category>
      <category>react</category>
      <category>learninpublic</category>
    </item>
    <item>
      <title>SWR + Dynamic Routes in Next.js</title>
      <author>Jannik Baranczyk</author>
      <pubDate>Tue, 20 Jul 2021 13:16:33 +0000</pubDate>
      <link>https://dev.to/wh1zk1d/swr-dynamic-routes-in-next-js-3cbl</link>
      <guid>https://dev.to/wh1zk1d/swr-dynamic-routes-in-next-js-3cbl</guid>
      <description>&lt;p&gt;Hey folks!&lt;/p&gt;

&lt;p&gt;If you recently worked with client side data fetching in Next.js, you probably heard of &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;. It comes with &lt;code&gt;useSWR&lt;/code&gt;, a React hook that makes all the complicated stuff in client side data fetching (caching, revalidation, focus tracking etc.) easy as pie.&lt;/p&gt;

&lt;p&gt;You can implement it with just a few lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import the hook&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="c1"&gt;// Define a custom fetcher function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the hook to fetch your data&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy, right? Well, it definitely is when you try to fetch an endpoint with no query parameters, like &lt;code&gt;/api/user&lt;/code&gt;. But when you try to pass a dynamic route parameter to your &lt;code&gt;useSWR&lt;/code&gt; hook, things can get a little bit tricky. I recently spent some time figuring out a solution for this, so I thought I should share my solution.&lt;/p&gt;

&lt;p&gt;Let's say we have a dynamic user route under &lt;code&gt;/pages/user/[id].js&lt;/code&gt;, which should show a user profile based on the ID we pass as a route parameter.&lt;/p&gt;

&lt;p&gt;The code to access that ID parameter would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import the useRouter hook from Next.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Use the useRouter hook&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

  &lt;span class="c1"&gt;// Grab our ID parameter&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&amp;gt;&lt;/span&gt;&lt;span class="err"&gt; 
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open that page with a random ID (&lt;code&gt;http://localhost:3000/user/42&lt;/code&gt; i.e), you should see the ID on the rendered page (&lt;code&gt;user id: 42&lt;/code&gt;). Now, instead of just rendering that ID, let's fetch the user related to that ID from our API endpoint and render a profile page.&lt;/p&gt;

&lt;p&gt;When I tried to do that, I thought I could just pass the ID parameter to the &lt;code&gt;useSWR&lt;/code&gt; hook and voilá – a beautiful profile page. The code looked like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/user/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But then the error messages came in – something obviously didn't work, my component just won't fetch the user. What happened here? When I had a look into the network tab, I noticed that the ID parameter wasn't passed to the fetch call – instead it said &lt;code&gt;undefined&lt;/code&gt;. But why? The ID was clearly there, so what the heck happened here?&lt;/p&gt;

&lt;p&gt;The answer is in the &lt;a href="https://nextjs.org/docs/routing/dynamic-routes#caveats"&gt;Next.js Docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pages that are statically optimized by Automatic Static Optimization will be hydrated without their route parameters provided, i.e &lt;code&gt;query&lt;/code&gt; will be an empty object (&lt;code&gt;{}&lt;/code&gt;). After hydration, Next.js will trigger an update to your application to provide the route parameters in the &lt;code&gt;query&lt;/code&gt; object.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since I didn't use &lt;code&gt;getServerSideProps&lt;/code&gt; or &lt;code&gt;getStaticProps&lt;/code&gt; on that page, Next turned on Automatic Static Optimization for it – which means the dynamic parameters from &lt;code&gt;router.query&lt;/code&gt; are not available until the hydration process has finished. Before, &lt;code&gt;query&lt;/code&gt; is just an empty object – that's why the network tab said &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So how can we tell &lt;code&gt;useSWR&lt;/code&gt; to wait until our dynamic route parameter is ready?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;swr&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Profile&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;

  &lt;span class="c1"&gt;// Use a ternary operator to only fetch the data when the ID isn't undefined&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useSWR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="s2"&gt;`/api/user/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fetcher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;failed&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;hello&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This way our page now initially renders &lt;code&gt;Loading...&lt;/code&gt;, and as soon as the hydration process has finished it fetches the user data and renders the profile.&lt;/p&gt;

&lt;p&gt;I hope this little explanation could help you!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>react</category>
    </item>
  </channel>
</rss>
