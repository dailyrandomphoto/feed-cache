<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>React App For Beginner's</title>
      <author>LP</author>
      <pubDate>Thu, 08 Apr 2021 05:00:38 +0000</pubDate>
      <link>https://dev.to/lakpa/react-app-for-beginners-3jj5</link>
      <guid>https://dev.to/lakpa/react-app-for-beginners-3jj5</guid>
      <description>&lt;p&gt;Hello friends ,&lt;br&gt;
Here is a link  &lt;a href="https://lp-codes.github.io/My-First-React-App/#/My-First-React-App/"&gt;https://lp-codes.github.io/My-First-React-App/#/My-First-React-App/&lt;/a&gt; of Live App I have tried to create using react, it might be useful for beginner's as a concept who are learning react .I have tried to cover react components such as routers ,hooks,useffect &amp;amp; using bootstrap,fontawesome,materialui ,api's with react -- There is basic home page with external media links , weather app, To-do-App with local storage &amp;amp; a Covid Tracker .Attaching some Snaps from link,&lt;br&gt;
If more info is required kindly ping me ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0aLSVlMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58it3mnqiqzlr45jsxd0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0aLSVlMH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58it3mnqiqzlr45jsxd0.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XcjchfHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obmip3my3br92wz7vsex.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XcjchfHG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obmip3my3br92wz7vsex.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6UPyc6pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj5kegj11zeolvajjgfg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6UPyc6pv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zj5kegj11zeolvajjgfg.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RLKYIKcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98v3dd8c2b714b5hcqyn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RLKYIKcX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98v3dd8c2b714b5hcqyn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
 Git-repo - &lt;a href="https://github.com/LP-Codes/My-First-React-App/tree/gh-pages"&gt;https://github.com/LP-Codes/My-First-React-App/tree/gh-pages&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>html</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Spring Boot + React Redux example</title>
      <author>Tien Nguyen</author>
      <pubDate>Thu, 08 Apr 2021 04:10:26 +0000</pubDate>
      <link>https://dev.to/tienbku/spring-boot-react-redux-example-378d</link>
      <guid>https://dev.to/tienbku/spring-boot-react-redux-example-378d</guid>
      <description>&lt;p&gt;In this tutorial, we will learn how to build a full stack React Redux + Spring Boot example with a CRUD App. The back-end server uses Spring Boot with Spring Web MVC for REST APIs and Spring Data JPA for interacting with embedded database (H2 database). Front-end side is made with React, Redux, React Router, Axios &amp;amp; Bootstrap.&lt;/p&gt;

&lt;p&gt;Full Article: &lt;a href="https://bezkoder.com/spring-boot-react-redux-example/"&gt;https://bezkoder.com/spring-boot-react-redux-example/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Spring Boot React Redux example Overview&lt;/h2&gt;

&lt;p&gt;We will build a full-stack Spring Boot &amp;amp; React Redux Tutorial Application in that:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;Each Tutorial has id, title, description, published status.&lt;/li&gt;
    &lt;li&gt;We can create, retrieve, update, delete Tutorials.&lt;/li&gt;
    &lt;li&gt;We can also find Tutorials by title.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The images below shows screenshots of our System.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a Tutorial:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyOXiMa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzu36q3g1qfoy4x6odqw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyOXiMa1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzu36q3g1qfoy4x6odqw.png" alt="spring-boot-react-redux-example-crud-create-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve all Tutorials:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--giyZm_GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuod1ort3zciud545akr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--giyZm_GT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuod1ort3zciud545akr.png" alt="spring-boot-react-redux-example-crud-retrieve-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on &lt;strong&gt;Edit&lt;/strong&gt; button to retrieve an item:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BaQdd8mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uac0f34ohgk5a6jautj0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BaQdd8mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uac0f34ohgk5a6jautj0.png" alt="spring-boot-react-redux-example-crud-retrieve-one-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On this Page, you can:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;change status to &lt;strong&gt;Published&lt;/strong&gt; using &lt;strong&gt;Publish&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;remove the Tutorial from Database using &lt;strong&gt;Delete&lt;/strong&gt; button&lt;/li&gt;
    &lt;li&gt;update the Tutorial details on Database with &lt;strong&gt;Update&lt;/strong&gt; button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2h5__0q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x32hs301b1ml0z185p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2h5__0q_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x1x32hs301b1ml0z185p.png" alt="spring-boot-react-redux-example-crud-update-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search items by title:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x-3gAA2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqojbiaf0cy91s9iei4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x-3gAA2l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kaqojbiaf0cy91s9iei4.png" alt="spring-boot-react-redux-example-crud-search-tutorial"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Architecture of Spring Boot React Redux example&lt;/h2&gt;

&lt;p&gt;This is the application architecture we're gonna build:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V73WV8fU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6yyf7owp3h5si5gs63b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V73WV8fU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n6yyf7owp3h5si5gs63b.png" alt="spring-boot-react-redux-example-crud-architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring Boot exports REST Apis using Spring Web MVC &amp;amp; interacts with embedded H2 Database using Spring JPA&lt;/li&gt;
&lt;li&gt;React Client sends HTTP Requests and retrieves HTTP Responses using &lt;em&gt;Axios&lt;/em&gt;, consume data on Redux which provides state to the Components. React Router is used for navigating to pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also find the Spring Restful Apis that works with other databases here:&lt;br&gt;
- &lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring JPA + PostgreSQL&lt;/a&gt;&lt;br&gt;
- &lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api/"&gt;Spring JPA + MySQL&lt;/a&gt;&lt;br&gt;
- &lt;a href="https://bezkoder.com/spring-boot-mongodb-crud/"&gt;Spring Data + MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Spring Boot Rest Apis Back-end&lt;/h2&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;These are APIs that Spring Boot App will export:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table width="100%"&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Methods&lt;/th&gt;
&lt;th&gt;Urls&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;create new Tutorial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;retrieve all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;retrieve a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;update a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials/:id&lt;/td&gt;
&lt;td&gt;delete a Tutorial by &lt;code&gt;:id&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;/api/tutorials&lt;/td&gt;
&lt;td&gt;delete all Tutorials&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;/api/tutorials?title=[keyword]&lt;/td&gt;
&lt;td&gt;find all Tutorials which title contains &lt;code&gt;keyword&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;We make CRUD operations &amp;amp; finder methods with Spring Data JPA's &lt;code&gt;JpaRepository&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The database will be H2 Database (in memory or on disk) by configuring project dependency &amp;amp; datasource.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
        &lt;li&gt;Java 8&lt;/li&gt;
        &lt;li&gt;Spring Boot 2.4 (with Spring Web MVC, Spring Data JPA)&lt;/li&gt;
        &lt;li&gt;H2 Database&lt;/li&gt;
        &lt;li&gt;Maven 3.6.1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project Structure&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-ySnnpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0huboi7we5v3207gbll5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-ySnnpT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0huboi7we5v3207gbll5.png" alt="spring-boot-react-redux-example-crud-server-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– &lt;code&gt;Tutorial&lt;/code&gt; data model class corresponds to entity and table &lt;em&gt;tutorials&lt;/em&gt;.&lt;br&gt;
– &lt;code&gt;TutorialRepository&lt;/code&gt; is an interface that extends &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/api/org/springframework/data/jpa/repository/JpaRepository.html"&gt;JpaRepository&lt;/a&gt; for CRUD methods and custom finder methods. It will be autowired in &lt;code&gt;TutorialController&lt;/code&gt;.&lt;br&gt;
– &lt;code&gt;TutorialController&lt;/code&gt; is a &lt;a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/RestController.html"&gt;RestController&lt;/a&gt; which has request mapping methods for RESTful requests such as: &lt;em&gt;getAllTutorials&lt;/em&gt;, &lt;em&gt;createTutorial&lt;/em&gt;, &lt;em&gt;updateTutorial&lt;/em&gt;, &lt;em&gt;deleteTutorial&lt;/em&gt;, &lt;em&gt;findByPublished&lt;/em&gt;...&lt;br&gt;
– Configuration for Spring Datasource, JPA &amp;amp; Hibernate in &lt;strong&gt;application.properties&lt;/strong&gt;.&lt;br&gt;
– &lt;strong&gt;pom.xml&lt;/strong&gt; contains dependencies for Spring Boot and H2 Database.&lt;/p&gt;

&lt;h2&gt;React Redux Front-end&lt;/h2&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;This is React components that we're gonna implement:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gLmD52C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fip8rrzxcni7n30vrtk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gLmD52C2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fip8rrzxcni7n30vrtk.png" alt="spring-boot-react-redux-example-crud-client-components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;– The &lt;code&gt;App&lt;/code&gt; component is a container with React &lt;code&gt;Router&lt;/code&gt;. It has &lt;code&gt;navbar&lt;/code&gt; that links to routes paths.&lt;/p&gt;

&lt;p&gt;– Three components that dispatch &lt;strong&gt;&lt;em&gt;actions&lt;/em&gt;&lt;/strong&gt; to &lt;code&gt;Redux Thunk Middleware&lt;/code&gt; which uses &lt;code&gt;TutorialDataService&lt;/code&gt; to call Rest API.&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;
&lt;code&gt;TutorialsList&lt;/code&gt; component gets and displays Tutorials.&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;Tutorial&lt;/code&gt; component has form for editing Tutorial's details based on &lt;code&gt;:id&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;
&lt;code&gt;AddTutorial&lt;/code&gt; component has form for submission new Tutorial.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;– &lt;code&gt;TutorialDataService&lt;/code&gt; uses &lt;code&gt;axios&lt;/code&gt; to make HTTP requests and receive responses.&lt;/p&gt;

&lt;p&gt;This diagram shows how Redux elements work in our React Application:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnMkFP6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hlfk958dgeryz4dwvw9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnMkFP6H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1hlfk958dgeryz4dwvw9.png" alt="spring-boot-react-redux-example-crud-store-architecture"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We're gonna create Redux &lt;code&gt;store&lt;/code&gt; for storing &lt;code&gt;tutorials&lt;/code&gt; data. Other React Components will work with the Store via dispatching an &lt;code&gt;action&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reducer&lt;/code&gt; will take the action and return new &lt;code&gt;state&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Technology&lt;/h3&gt;

&lt;ul&gt;
    &lt;li&gt;React 17/16&lt;/li&gt;
    &lt;li&gt;react-redux 7.2.3&lt;/li&gt;
    &lt;li&gt;redux 4.0.5&lt;/li&gt;
    &lt;li&gt;redux-thunk 2.3.0&lt;/li&gt;
    &lt;li&gt;react-router-dom 5.2.0&lt;/li&gt;
    &lt;li&gt;axios 0.21.1&lt;/li&gt;
    &lt;li&gt;bootstrap 4&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Project Structure&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2NAm3XaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0pmxledyj2pe0iru91w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2NAm3XaZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k0pmxledyj2pe0iru91w.png" alt="spring-boot-react-redux-example-crud-client-project-structure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;package.json&lt;/strong&gt; contains main modules: &lt;code&gt;react&lt;/code&gt;, &lt;code&gt;react-router-dom&lt;/code&gt;, &lt;code&gt;react-redux&lt;/code&gt;, &lt;code&gt;redux&lt;/code&gt;, &lt;code&gt;redux-thunk&lt;/code&gt;, &lt;code&gt;axios&lt;/code&gt; &amp;amp; &lt;code&gt;bootstrap&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;App&lt;/code&gt; is the container that has &lt;code&gt;Router&lt;/code&gt; &amp;amp; navbar.&lt;/li&gt;
&lt;li&gt;There are 3 components: &lt;code&gt;TutorialsList&lt;/code&gt;, &lt;code&gt;Tutorial&lt;/code&gt;, &lt;code&gt;AddTutorial&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;http-common.js&lt;/strong&gt; initializes axios with HTTP base Url and headers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;TutorialDataService&lt;/code&gt; has methods for sending HTTP requests to the Apis.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;.env&lt;/strong&gt; configures &lt;em&gt;port&lt;/em&gt; for this React CRUD App.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;About Redux elements that we're gonna use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;actions&lt;/strong&gt; folder contains the action creator (&lt;em&gt;tutorials.js&lt;/em&gt; for CRUD operations and searching).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;reducers&lt;/strong&gt; folder contains the reducer (&lt;em&gt;tutorials.js&lt;/em&gt;) which updates the application state corresponding to dispatched action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more steps and Source code, please visit:&lt;br&gt;
&lt;a href="https://bezkoder.com/spring-boot-react-redux-example/"&gt;https://bezkoder.com/spring-boot-react-redux-example/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;Related Posts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-spring-boot-pagination/"&gt;React + Spring Boot: Pagination example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-react-jwt-auth/"&gt;Spring Boot + React: Login example with JWT Authentication &amp;amp; Spring Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-file-upload-spring-boot/"&gt;React Upload/Download Files to/from Spring Boot Rest Apis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Run both projects in one place:&lt;br&gt;
&lt;a href="https://bezkoder.com/integrate-reactjs-spring-boot/"&gt;How to integrate React.js with Spring Boot&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Front-end without Redux:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-crud-web-api/"&gt;Using React Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-hooks-crud-axios-api/"&gt;Using React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/react-material-ui-examples-crud/"&gt;Using React with Material UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Spring Restful Apis for other databases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-postgresql-example/"&gt;Spring JPA + PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-jpa-crud-rest-api/"&gt;Spring JPA + MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bezkoder.com/spring-boot-mongodb-crud/"&gt;Spring Data + MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>spring</category>
      <category>webdev</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>I made a Climate Change News App</title>
      <author>Sanjeev Sharma</author>
      <pubDate>Thu, 08 Apr 2021 04:10:18 +0000</pubDate>
      <link>https://dev.to/thesanjeevsharma/i-made-a-climate-change-news-app-1n5a</link>
      <guid>https://dev.to/thesanjeevsharma/i-made-a-climate-change-news-app-1n5a</guid>
      <description>&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;I've been working on a little news app for the past few weekends. It's a news app that only focuses on "climate change". It shows climate change related articles from different sources.&lt;/p&gt;

&lt;p&gt;Link: &lt;a href="http://polrr.news"&gt;http://polrr.news&lt;/a&gt;&lt;br&gt;
Tech Stack: React(TS), NodeJS, MongoDB, AWS&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-i-made-this"&gt;
  &lt;/a&gt;
  Why I made this?
&lt;/h4&gt;

&lt;p&gt;This is not my first project using MERN, I have built some decent apps for other people(at work or helped some friends) but I never added a good project to my portfolio. I do have some apps, but they are either on Heroku or Netlify and those apps are more like experiment stuff. I've abandoned a lot of projects too. &lt;/p&gt;

&lt;p&gt;This time I wanted to make something from start to finish. Something that can go on my portfolio/resume. Something people can actually use and benefit from it.&lt;/p&gt;

&lt;p&gt;Why this specific news app?&lt;/p&gt;

&lt;p&gt;I could've easily made a Netflix or YouTube clone and added it to my resume. People do it and they get jobs based on that. If you're a beginner that's fine. But for a guy like me, who's not a beginner that might not look nice + it's not even fun as I already know the flow and everything. Also, nobody's going to use it. After one gets a job, that project will go into the pool of unfinished projects.&lt;/p&gt;

&lt;p&gt;As developers, we have the privilege to build stuff that can actually make someones' life easier. Almost anybody can come up with an idea, but the ability to execute only lies among a few.&lt;/p&gt;

&lt;p&gt;These are the few reasons I chose to develop this specific app:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Chance of people using this app &amp;gt; Chances of anybody using a clone. I can get actual user feedback and add new features based on that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I wanted to try Typescript. I wanted it to be something small so I can focus more on Typescript and less on thinking about the app features and their complexity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I wanted this to be a refresher for my MERN skills.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's not something recruiters see every day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MOST IMPORTANT! As I mentioned I have this habit of abandoning projects. I didn't wanna pick something huge as I might get bored and leave the project unfinished.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is the first time, I brought a domain for a project. 🙌&lt;/p&gt;

&lt;p&gt;It's not HTTPS, because I can't afford it. LOL. 😁&lt;/p&gt;

&lt;p&gt;I have a few more ideas to work on. I'll be experimenting with new technologies and try to build something people can actually use.&lt;/p&gt;

&lt;p&gt;All of this information wasn't necessary, but I hope this helps out someone who's deciding to start on a new project.&lt;/p&gt;

&lt;p&gt;Also, I'll be writing an article on hosting on AWS(+ nginx). If you are interested, let's stay connected.&lt;/p&gt;

&lt;p&gt;Thank you. ✌️&lt;/p&gt;

&lt;p&gt;You can connect with me on &lt;a href="https://www.twitter.com/thesnjvsharma"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/thesanjeevsharma"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>showdev</category>
    </item>
    <item>
      <title>What to review in ReactJS Code?</title>
      <author>Neha Sharma </author>
      <pubDate>Thu, 08 Apr 2021 03:38:47 +0000</pubDate>
      <link>https://dev.to/hellonehha/what-to-review-in-reactjs-code-1co7</link>
      <guid>https://dev.to/hellonehha/what-to-review-in-reactjs-code-1co7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-components"&gt;
  &lt;/a&gt;
  1. Components
&lt;/h1&gt;

&lt;p&gt;The first thing to check in the PR - "Is developer is following '&lt;a href="https://reactjs.org/docs/thinking-in-react.html"&gt;thinking in React&lt;/a&gt;'" suggested by the ReactJS team? If the developer hasn't broken the code in components then flag it.&lt;/p&gt;

&lt;p&gt;Example: instead of making &lt;code&gt;Homepage.jsx&lt;/code&gt; as one whole component, break the page into the components. This exercise should be done at 2 levels: &lt;code&gt;Application&lt;/code&gt; level and &lt;code&gt;page&lt;/code&gt; level. &lt;/p&gt;

&lt;p&gt;At the application level, identifies the reusable (Global) components, and at the Page-level repeat the same exercise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think about: reusability, and global and generic components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Components"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, make sure that the developer has not put down all the business logic in one component.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-props-amp-propsdrilling"&gt;
  &lt;/a&gt;
  2. props &amp;amp; props-drilling
&lt;/h1&gt;

&lt;p&gt;As ReactJS developers or web developers, we are used to putting the content or values hardcoded in the code. &lt;/p&gt;

&lt;p&gt;One of the features of ReactJS is &lt;a href="https://reactjs.org/docs/components-and-props.html"&gt;props&lt;/a&gt; this gives flexibility as well as control over the content and values.&lt;/p&gt;

&lt;p&gt;So, do review which value can be moved to the props? Also, props help in the flow of the data between the components. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But be cautious about "prop drilling". This could lead to a re-render which will be expensive for the performance.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Props"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-states"&gt;
  &lt;/a&gt;
  3. States
&lt;/h1&gt;

&lt;p&gt;One more feature of ReactJS is &lt;code&gt;states&lt;/code&gt;. As a beginner ReactJS developer, while handling events or the different states of the application, developers get confused about managing state in React or JavaScript way or states is UI or APP.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a ReactJS developer, you should handle states via only the ReactJS way, not the JavaScript way. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Also, keep asking would this state is UI state or application state? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If it is a UI state then it should handle at the component level and if it is app-level then lift the states to the parent level.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/States"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-consistency-in-styling-method"&gt;
  &lt;/a&gt;
  4. Consistency in styling method
&lt;/h1&gt;

&lt;p&gt;Styling in React comes with a lot of options from CSS, SASS, Styled components, CSS Modules, etc. It is important to follow one way of styling. &lt;/p&gt;

&lt;p&gt;If the developer has no consistency in styling then flag it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Follow one way of styling. Consistency is important for the clean and maintainable code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#5-consistency-in-file-extension"&gt;
  &lt;/a&gt;
  5. Consistency in file extension
&lt;/h1&gt;

&lt;p&gt;React supports JS and JSX both extensions. Have consistency, you can have components in JSX or JS and follow the same with reducers, Actions, etc.&lt;/p&gt;

&lt;p&gt;If the developer has no consistency in the file extension then flag it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Consistency in file extension is important for the clean architecture of the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#6-semantic-html"&gt;
  &lt;/a&gt;
  6. Semantic HTML
&lt;/h1&gt;

&lt;p&gt;React's JSX at the end of the day is HTML only. Hence, it is important to write the semantic JSX(HTML). Why? because &lt;code&gt;Header.jsx (&amp;lt;Header /&amp;gt;)&lt;/code&gt; it not equivalent to HTML header tag.&lt;/p&gt;

&lt;p&gt;So, review the JSX if the semantic code is written or not. If not, then flag it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Write clean and semantic JSX (HTML).Always remember JSX is HTML at the end of the day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Semantic-html"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-context-api-before-redux"&gt;
  &lt;/a&gt;
  7. Context API before Redux
&lt;/h1&gt;

&lt;p&gt;While starting with the React project review the scale of the project. When the project is small, use Context API. With large applications migrate to state management libraries such as MobX, Redux, etc.&lt;/p&gt;

&lt;p&gt;If the developer is using Redux or MobX where the ContextAPI can be used, you know the drill :) &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Start with small as per the project scope and scale when required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/ContextAPI"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-functional-code"&gt;
  &lt;/a&gt;
  8. Functional Code
&lt;/h1&gt;

&lt;p&gt;While creating components in ReactJS it is very common to see all the code is written within the &lt;code&gt;component&lt;/code&gt; only. ReactJS is all about writing functional code.&lt;/p&gt;

&lt;p&gt;Move the methods or functions from the component. This will break the code into functional code as well as this will make the components reusable.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Functional-code"&gt;Code Example&lt;/a&gt; &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-props-validation"&gt;
  &lt;/a&gt;
  9. Props Validation
&lt;/h1&gt;

&lt;p&gt;As ReactJS developers make habit of static props validation. This will help the developers to avoid early bugs and issues while doing development. &lt;/p&gt;

&lt;p&gt;By using props validation we can also state which props are required, what the default value should be, and a lot more.&lt;/p&gt;

&lt;p&gt;Use PropTypes, Flow, or TypeScript with ReactJS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Neha/ReactJS-code-review/tree/main/Props-validation"&gt;Code Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#10-clean-folder-structure"&gt;
  &lt;/a&gt;
  10. Clean Folder Structure
&lt;/h1&gt;

&lt;p&gt;Create React App (CRA) is the most popular way of the bootstrapping React project. However, most of the developers forget to clean the folder before pushing it to production. It is important to delete all the unnecessary files and folders which are not required. CRA allows developers to design their architecture. However, I would suggest sticking to what most of the popular react developers are following.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#11-testing"&gt;
  &lt;/a&gt;
  11. Testing
&lt;/h1&gt;

&lt;p&gt;This is one more good practice for ReactJS developers. One can start with the snapshot testing then move to Unit testing, and E2E testing. Remember, that there are a lot of advantages of testing in the long term.&lt;/p&gt;

&lt;p&gt;You can use Jest, Enzyme, or React-Testing library &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#12-avoid-over-engineering"&gt;
  &lt;/a&gt;
  12. Avoid Over Engineering
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Avoid 'Over-Engineering' and Keep it Simple Silly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Look at the problem and think of the simplest solution rather than over-complicated it. As well as, in the attempt of writing less code do not write non-readable code. Remember, we developers are working in collaboration. Our code should be readable.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#13-hooks-before-lifecycle"&gt;
  &lt;/a&gt;
  13. Hooks before lifecycle
&lt;/h1&gt;

&lt;p&gt;Thanks to Hooks from the ReactJS team. Now, instead of moving the components to class or smart we can keep the components functional and use hooks. &lt;/p&gt;

&lt;p&gt;This will help in the performance improvement as now you are moving the components from class to functional.&lt;/p&gt;

&lt;p&gt;Happy Code Review!! &lt;/p&gt;

&lt;p&gt;Let me know what are your tips for the code review in the comments :) &lt;/p&gt;

</description>
    </item>
    <item>
      <title>SOLID: Principio de Abierto/Cerrado</title>
      <author>Victor Manuel Pinzon</author>
      <pubDate>Thu, 08 Apr 2021 03:13:26 +0000</pubDate>
      <link>https://dev.to/victorpinzon198/solid-principio-de-abierto-cerrado-2mjp</link>
      <guid>https://dev.to/victorpinzon198/solid-principio-de-abierto-cerrado-2mjp</guid>
      <description>&lt;p&gt;&lt;em&gt;&lt;em&gt;Este articulo es una continuación a la publicación de &lt;a href="https://dev.to/victorpinzon198/solid-principio-de-responsabilidad-unica-5ffo"&gt;principios SOLID&lt;/a&gt;.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;El segundo principio SOLID es probablemente el más importante de todos, pero el menos utilizado. La poca inclusión de este principio se ha debido a su débil y confusa definición.&lt;/p&gt;

&lt;p&gt;El principio de abierto/cerrado fue acuñado por Bertrand Meyer en su libro &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Object-Oriented_Software_Construction"&gt;Object Oriented Software Construction&lt;/a&gt;&lt;/em&gt;, quien lo definió de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Las entidades de software (clases, módulos, funciones, etc) deben de estar abierta para su extensión, pero cerradas para su modificación.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La definición original por Meyer es ambigua y poco aplicable en la practica, lo que ocasionó que muchos desarrolladores de la época ignoraran la aplicación de dicho principio. Años despues, Bob Martin amplió la definición de la siguiente manera:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;El comportamiento de un sistema debería de ser capaz de ser extendido sin necesidad de modificar dicho sistema.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La explicación dada por Bob Martin es más clara y es compatible con la arquitectura de Plugin, la cual estaba en su apogeo en esa época. Esta arquitectura indica que un sistema de software debería de ser construido con la capacidad de agregar plugins a ciertos componentes, sin que estos sepan los detalles de la implementación de los mismos. &lt;/p&gt;

&lt;p&gt;Por ejemplo, un sistema integrado de desarrollo (IDE) permite ampliar su funcionamiento mediante plugins, tales como: Lite Server, Remote SSH, etc., esto sin afectar el funcionamiento del mismo. El IDE permite agregar plugins siempre y cuando cada extensión siga las reglas definidas para su implementación. Es decir, el sistema se encuentra abierto para su extensión mediante plugins pero no para la modificación de las funciones centrales del IDE.&lt;/p&gt;

&lt;p&gt;Otro ejemplo del principio de abierto/cerrado son las librerías de software. Estas se desarrollan con el objetivo que sean utilizadas en diferentes contextos e implementadas en todos los casos posibles, es decir, las librerías por naturaleza deben de estar abiertas para su extensión. Sin embargo, un cambio en el core de la librería podría significar cambios en todos los puntos y contextos donde dicha librería ha sido utilizada, en otras palabras, las librerías por naturaleza deben de estar cerradas para modificaciones.&lt;/p&gt;

&lt;p&gt;Veamos un ejemplo a nivel de código. Actualmente laboras en una empresa de desarrollo de juegos de PC. Tu jefe, como parte del próximo proyecto, te solicita implementar una librería que permita el cálculo del área de rectángulos. Esta será útil para la maquetación de los personajes del juego. &lt;/p&gt;

&lt;p&gt;Para llevar a cabo esta tarea defines las siguientes clases:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; 
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;altura&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="cm"&gt;/*Getters / Setters*/&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La clase &lt;strong&gt;Rectangulo&lt;/strong&gt; almacena la base y altura de la figura geométrica.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getBase&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAltura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;   
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La clase &lt;strong&gt;CalculadorArea&lt;/strong&gt; define el método encargado de calcular el área del rectángulo, el cual se realiza mediante la multiplicación de la base por la altura.&lt;/p&gt;

&lt;p&gt;El calculador de areas se utiliza de la siguiente forma:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.yourregulardeveloper.main&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;

        &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rec1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;13.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rec2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.89&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;9.85&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de rectangulo 1: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec1&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de rectangulo 2: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rec2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tu librería termina siendo un éxito y es utilizada en varios proyectos adicionales que está llevando a cabo la empresa. Meses después tu jefe te solicita que la librería también calcule el área de cuadrados. &lt;/p&gt;

&lt;p&gt;Al momento de empezar a diseñar tu implementación te das cuenta de dos factores:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;El cuadrado es un caso especial de rectángulo.&lt;/li&gt;
&lt;li&gt;El área del cuadrado se calcula de forma diferente al rectángulo tradicional. Está se calcula elevando el tamaño de sus lados al cuadrado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Estos factores resaltan que el código de tu librería no cumple con el principio de abierto/cerrado. Por supuesto que podrías debatir que en la clase &lt;strong&gt;Rectangulo&lt;/strong&gt; se puede asignar el mismo valor para la base/altura y se obtendría el mismo funcionamiento para las figuras de tipo cuadrado ¿Pero qué sucede si en futuros requerimientos se solicita el cálculo del área de un circulo o de cualquier otra figura geométrica? &lt;/p&gt;

&lt;p&gt;La respuesta es la implementación del principio abierto/cerrado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aplicaci%C3%B3n-del-principio-de-abiertocerrado"&gt;
  &lt;/a&gt;
  Aplicación del principio de abierto/cerrado
&lt;/h2&gt;

&lt;p&gt;El caso anterior nos ejemplifica los problemas que se pueden generar al momento de diseñar aplicaciones que no tomen en cuenta los cambios que se pueden dar en ciertos módulos. El objetivo principal del principio de abierto/cerrado es exactamente ese, diseñar soluciones que tomen en cuenta los cambios que se puedan dar en el futuro y estructurar las soluciones para que se puedan agregar dichos cambios sin afectar el código existente.&lt;/p&gt;

&lt;p&gt;Por ejemplo, para solucionar el caso de los rectángulos nos vamos ayudar del uso de interfaces. Una interfaz es un conjunto de métodos que definen el funcionamiento de una clase, pero no su implementación. Por lo tanto, podemos definir una interfaz genérica para cualquier figura geométrica y que tenga la definición de un método para el cálculo del área. Luego, que cada figura geométrica defina la implementación propia de cada cálculo de área. &lt;/p&gt;

&lt;p&gt;Tomar en cuenta la siguiente interfaz:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luego se crean las clases de cada figura geométrica que se utilizará en la librería. Cada clase del tipo &lt;strong&gt;FiguraGeometrica&lt;/strong&gt; implementa su propia forma de calcular el área.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;altura&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;altura&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cuadrado&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Cuadrado&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lado&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lado&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Circulo&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.1416&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Circulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Circulo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radio&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;radio&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Se modifica la clase CalculadorArea para que reciba un objeto del tipo FiguraGeometrica y con este calcula el área de la figura, sin importar de cual se trata.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FiguraGeometrica&lt;/span&gt; &lt;span class="n"&gt;figura&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;figura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;    
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La ejecución de la librería se puede realizar de la siguiente forma.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CalculadorArea&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;Cuadrado&lt;/span&gt; &lt;span class="n"&gt;cuadrado&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Cuadrado&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.15&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Rectangulo&lt;/span&gt; &lt;span class="n"&gt;rectangulo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Rectangulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.85&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10.85&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Circulo&lt;/span&gt; &lt;span class="n"&gt;circulo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Circulo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;7.98&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de figura: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cuadrado&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de figura: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rectangulo&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Calculo de figura: "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;calcArea&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;calcularArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;circulo&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;La nueva estructura de la librería cumple con el principio de abierto/cerrado, ya que se pueden agregar más figuras geométricas sin modificar el código actual, siempre y cuando las nuevas figuras implementen la interfaz FiguraGeometrica.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cuando-se-puede-aplicar-el-principio-de-abiertocerrado"&gt;
  &lt;/a&gt;
  ¿Cuando se puede aplicar el principio de abierto/cerrado?
&lt;/h2&gt;

&lt;p&gt;El principio abierto/cerrado no debe de ser una regla inamovible en el diseño de soluciones de software. El problema con este principio, al igual que con el de la responsabilidad única, es que el desarrollador debe de predecir los posibles futuros requerimientos que generaran cambios en el código actual. &lt;/p&gt;

&lt;p&gt;Esto puede ser más sencillo para desarrolladores senior o semi-senior, pero para desarrolladores junior puede ser una receta para el desastre. La incorrecta aplicación del principio de abierto/cerrado puede complicar innecesariamente el diseño del código. Esto en lugar ayudar a que la aplicación sea más mantenible y escalable, logra exactamente lo opuesto.&lt;/p&gt;

&lt;p&gt;Mi recomendación personal es siempre escribir código que sea fácilmente entendible por otros desarrolladores y fácil de modificar cuando cambien los requerimientos. En relación con el principio de abierto/cerrado es mejor esperar la primera iteración de cambios para poder prever los puntos en donde el diseño cambiará y así poder aplicar el principio.&lt;/p&gt;

&lt;p&gt;Si deseas ampliar tu conocimiento acerca del principio de abierto/cerrado, puedes leer el &lt;a href="http://blog.cleancoder.com/uncle-bob/2014/05/12/TheOpenClosedPrinciple.html"&gt;blog de Robert C. Martin.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;En una proxima publicación ahondaremos en el principio de sustitución de Liskov.&lt;/p&gt;

</description>
      <category>oop</category>
      <category>solid</category>
      <category>spanish</category>
      <category>architecture</category>
    </item>
    <item>
      <title>DynamoDB Attribute Packing for Single-Table Designs</title>
      <author>Michael O'Brien</author>
      <pubDate>Thu, 08 Apr 2021 03:07:46 +0000</pubDate>
      <link>https://dev.to/sensedeep/dynamodb-attribute-packing-for-single-table-designs-1c0d</link>
      <guid>https://dev.to/sensedeep/dynamodb-attribute-packing-for-single-table-designs-1c0d</guid>
      <description>&lt;p&gt;A DynamoDB secondary index can select which attribute to project (replicate) to the index. It can project all item attributes, a subset of the attributes or only the key attributes.&lt;/p&gt;

&lt;p&gt;If you project only the keys, then a read from the secondary index will return the key attributes. With these keys you can read all the remaining attributes from the primary index, but that will incur an additional read request and require code to manage the second request.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://www.sensedeep.com/blog/posts/2021/dynamodb-singletable-design.html"&gt;DynamoDB single-table Designs&lt;/a&gt; choosing which attributes to project to secondary indexes can be a challenge. With single-table designs, you store multiple entities with different named attributes in a single table. This means the set of attributes to project to GSIs may be large and diverse. Furthermore, once defined, you cannot change the names of projected attributes after you create the GSI. These issues can make efficient use GSIs difficult and evolving and changing your data design problematic.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.sensedeep.com/blog/posts/2020/dynamodb-onetable.html"&gt;OneTable&lt;/a&gt; solves this problem by supporting the mapping and package of entity attributes into a single GSI attribute. This makes the task of defining which attributes to project to the GSI relatively easy and also permits changing your data design without having to recreate the GSIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onetable-attribute-mapping"&gt;
  &lt;/a&gt;
  OneTable Attribute Mapping
&lt;/h2&gt;

&lt;p&gt;OneTable schemas can define an attribute mapping via the &lt;code&gt;map&lt;/code&gt; schema property. This defines a physical table attribute name for the schema field.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will store the User.name property in the &lt;code&gt;data&lt;/code&gt; table attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#one-to-one-mapping"&gt;
  &lt;/a&gt;
  One to One Mapping
&lt;/h3&gt;

&lt;p&gt;OneTable mapping definitions can also map multiple different entities onto the same attribute name.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will store both the Account.name and User.email values in the GSI 'data' attribute.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#many-to-one-packing"&gt;
  &lt;/a&gt;
  Many to One Packing
&lt;/h3&gt;

&lt;p&gt;Sometimes, you may need to project multiple field properties into a GSI. By using OneTable mappings, you can map and pack multiple attributes from a single entity to a single GSI attribute.&lt;/p&gt;

&lt;p&gt;By specifying a mapped name that contains the period character, you can pack property values into an object stored in a single attribute. OneTable will transparently pack and unpack values on read/write operations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;models&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;pk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user:${email}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;       &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.email&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.first&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data.last&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will pack the User.email, User.firstName and User.lastName properties under the GSI &lt;code&gt;data&lt;/code&gt; attribute. The data attribute will have the values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;email-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;first&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;last&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also map and pack the properties from multiple entities into a single attribute name.&lt;/p&gt;

&lt;p&gt;By using the &lt;code&gt;map&lt;/code&gt; facility, you can create a single GSI &lt;code&gt;data&lt;/code&gt; attribute that contains all the required attributes for access patterns that use the GSI. By modifying the OneTable schema and using the OneTable CLI for migrations, you can easily evolve your design without recreating your GSIs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-mapped-attributes"&gt;
  &lt;/a&gt;
  Using Mapped Attributes
&lt;/h2&gt;

&lt;p&gt;When issuing APIs that write to a mapped attribute, you must provide all the properties that map to that attribute for the entity.&lt;/p&gt;

&lt;p&gt;For example, the following will fail because the lastName is not provided and the API must provide all three properties: email, firstName and lastName that map to the &lt;code&gt;data&lt;/code&gt; attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;coyote@acme.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Peter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#value-templates"&gt;
  &lt;/a&gt;
  Value Templates
&lt;/h2&gt;

&lt;p&gt;There is one other technique you can use for one-way attribute packing.&lt;/p&gt;

&lt;p&gt;A OneTable schema field can define a &lt;code&gt;value&lt;/code&gt; property which operates like a JavaScript template string. Embedded &lt;code&gt;${field}&lt;/code&gt; references are expanded to create the attribute value. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;sk&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;user:${country}:${zip}:${state}:${address}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;     &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a sort-key (sk) attribute with the values of country, zip, state and address catenated after a 'user:' prefix. This is useful for queries that can search on varying segments of the sort key using begins_with.&lt;/p&gt;

&lt;p&gt;Note: this technique replicates the attributes in the &lt;code&gt;value&lt;/code&gt; template and is thus not a technique to reduce overall data storage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#onetable-follow"&gt;
  &lt;/a&gt;
  OneTable Follow
&lt;/h2&gt;

&lt;p&gt;If reading from a secondary index that projects a subset of attributes and you wish to fetch the entire item, you would normally have to issue a second read to fetch the full item from the primary index.&lt;/p&gt;

&lt;p&gt;OneTable makes this easier by using the &lt;code&gt;follow&lt;/code&gt; option where OneTable will transparently follow the retrieved primary keys from a GSI and fetch the full item from the primary index so that you do not have to issue the second read manually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;account&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Account&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;acme&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;gs1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;follow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Under the hood, OneTable is still performing two reads to retrieve the item but your code is much cleaner. For situations where the storage costs are a concern, this approach allows minimal cost, keys-only secondary indexes to be used without the complexity of multiple requests in your code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sensedeep-with-onetable"&gt;
  &lt;/a&gt;
  SenseDeep with OneTable
&lt;/h2&gt;

&lt;p&gt;At SenseDeep, we've used OneTable and the OneTable CLI extensively with our &lt;a href="https://app.sensedeep.com"&gt;SenseDeep&lt;/a&gt; serverless Developer Studio. All data is stored in a single DynamoDB table and we extensively use single-table design patterns. We could not be more satisfied with DynamoDB implementation. Our storage and database access costs are insanely low and access/response times are excellent.&lt;/p&gt;

&lt;p&gt;Please try our Serverless developer studio &lt;a href="https://www.sensedeep.com/"&gt;SenseDeep&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#contact"&gt;
  &lt;/a&gt;
  Contact
&lt;/h3&gt;

&lt;p&gt;You can contact me (Michael O'Brien) on Twitter at: &lt;a href="https://twitter.com/mobstream"&gt;@mobstream&lt;/a&gt;, or &lt;a href="//mob-pub-18@sensedeep.com"&gt;email&lt;/a&gt; and ready my &lt;a href="https://www.sensedeep.com/blog"&gt;Blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To learn more about SenseDeep and how to use our serverless developer studio, please visit &lt;a href="https://www.sensedeep.com/"&gt;https://www.sensedeep.com/&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.sensedeep.com/blog/posts/2020/dynamodb-onetable.html"&gt;OneTable Post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/onetable-cli"&gt;OneTable Migrate CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sensedeep.com/blog/posts/2021/dynamodb-singletable-design.html"&gt;DynamoDB Single Table Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/onetable-cli"&gt;OneTable Migrate CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.sensedeep.com/"&gt;SenseDeep Web Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://app.sensedeep.com/"&gt;SenseDeep App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>dynamodb</category>
      <category>nosql</category>
    </item>
    <item>
      <title>4 awesome javascript projects worthy of your collection</title>
      <author>lindelof</author>
      <pubDate>Thu, 08 Apr 2021 03:03:37 +0000</pubDate>
      <link>https://dev.to/lindelof/4-awesome-javascript-projects-worthy-of-your-collection-53fi</link>
      <guid>https://dev.to/lindelof/4-awesome-javascript-projects-worthy-of-your-collection-53fi</guid>
      <description>&lt;h3&gt;
  &lt;a href="#i-have-been-staying-at-home-recently-and-when-facing-the-computer-i-was-collecting-all-kinds-of-fun-things"&gt;
  &lt;/a&gt;
  I have been staying at home recently, and when facing the computer, I was collecting all kinds of fun things.
&lt;/h3&gt;

&lt;p&gt;I wonder if you have also encountered this kind of time, when you want to find a certain effect or something, but you are at a loss and you can't find it. At this time, you will regret it. If you can usually collect more treasures.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MnlO54F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wluuunp6z7upo3yyurck.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MnlO54F--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/wluuunp6z7upo3yyurck.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have carefully selected three awesome items that are worth collecting for you, maybe you can think of it when you need it&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-awesome-web-effect"&gt;
  &lt;/a&gt;
  1. Awesome Web Effect
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomlindelofawesomewebeffect"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/lindelof/awesome-web-effect"&gt;https://github.com/lindelof/awesome-web-effect&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0QhCXfEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zttr42f6ovg2h3cvi7gb.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0QhCXfEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/zttr42f6ovg2h3cvi7gb.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's like decorating a beautiful Christmas tree in a room. Sometimes a small web page with cool effects will make your project shine. This is a very fun series, I want to collect those cool effects that are common on the page.&lt;/p&gt;

&lt;p&gt;Not limited to any framework (react, vue, angular, etc.), as long as the effect can be simply inserted into the page, you can send it to me, I like them and hope you like them too.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-awesome-landing-page"&gt;
  &lt;/a&gt;
  2. Awesome Landing Page
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomnordicgiant2awesomelandingpage"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/nordicgiant2/awesome-landing-page"&gt;https://github.com/nordicgiant2/awesome-landing-page&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A series of beautiful and practical landing page templates. There are a lot of beautiful landing page templates. They are built using various front-end technologies. I hope you like them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RbyG21am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2w6pibe2jfle7vhd0od.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RbyG21am--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/o2w6pibe2jfle7vhd0od.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-awesome-web-vr"&gt;
  &lt;/a&gt;
  3. Awesome Web VR
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomwizztjhawesomewebvr"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/wizztjh/awesome-WebVR"&gt;https://github.com/wizztjh/awesome-WebVR&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jtq-HP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/smt30wc6p9r8pda6imuw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jtq-HP1n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/smt30wc6p9r8pda6imuw.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A curated list of awesome WebVR packages and resources. WebVR was an experimental JavaScript application programming interface (API) that enabled applications to interact with virtual reality devices, such as the HTC Vive, Oculus Rift, Google Cardboard or Open Source Virtual Reality (OSVR) in a web browser. It was implemented in Firefox and Chromium-based browsers until, before being deprecated and removed. WebVR API was superseded by a more powerful WebXR API that is capable of representing virtual reality and augmented reality devices simultaneously.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-awesome-web-storage"&gt;
  &lt;/a&gt;
  4. Awesome web storage
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#httpsgithubcomsoftvarawesomewebstorage"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/softvar/awesome-web-storage"&gt;https://github.com/softvar/awesome-web-storage&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eJ5Kmoll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q91hmzsdl3s9v1809j66.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eJ5Kmoll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q91hmzsdl3s9v1809j66.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything you need to know about Client-side Storage.Web storage, sometimes known as DOM storage (Document Object Model storage), provides web application software methods and protocols used for storing data in a web browser.&lt;/p&gt;

&lt;p&gt;Web storage is being standardized by the World Wide Web Consortium (W3C). It was originally part of the HTML5 specification, but is now in a separate specification.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;Thank you very much for your patience to see here, I think you are a crazy geek just like me. I hope you like my column, I will always share useful things to everyone.&lt;/p&gt;

</description>
      <category>html</category>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why your website should have a Skip Link? </title>
      <author>Rahul</author>
      <pubDate>Thu, 08 Apr 2021 01:47:46 +0000</pubDate>
      <link>https://dev.to/rahxuls/why-your-website-should-have-a-skip-link-2ghk</link>
      <guid>https://dev.to/rahxuls/why-your-website-should-have-a-skip-link-2ghk</guid>
      <description>&lt;p&gt;It's critical that any web pages you create are accessible to all. Unfortunately, it's something that's often ignored and neglected.&lt;/p&gt;

&lt;p&gt;This quick and easy tutorial will show you how to add a skip link to your page to make it more accessible. It's usually a good idea to incorporate accessibility into something you're making because it usually results in a much better overall product.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-skip-link"&gt;
  &lt;/a&gt;
  What is skip link?
&lt;/h3&gt;

&lt;p&gt;It is a link that lets the user skip to the main content of the page. It's usually hidden and becomes visible when it's in focus. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-and-why-you-need"&gt;
  &lt;/a&gt;
  When and Why you need?
&lt;/h3&gt;

&lt;p&gt;If a user is navigating a site with their keyboard they will usually is the tab key to go through the links and bottoms in your page. &lt;/p&gt;

&lt;p&gt;So this means they will have to tab through each link in your navigation (since it's usually at top) before they get to the main content every time they navigate between pages. &lt;/p&gt;

&lt;p&gt;(WHICH IS ANNOYING😬😬)&lt;/p&gt;

&lt;p&gt;Having a link that will skip past all that and scroll straight to the main content of the page will make the process less frustrating and more accessible. &lt;/p&gt;

&lt;p&gt;Let's see&lt;/p&gt;

&lt;p&gt;HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"skkip_link"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Skip to main
  &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;  
            &lt;span class="c"&gt;&amp;lt;!--HEADER AND NAVIGATION HERE --&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt; 
     &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Heading&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;First paragraph...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.skip_link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.skip_liink&lt;/span&gt;&lt;span class="nd"&gt;:active&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.skip_link&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
&lt;span class="nc"&gt;.skip_link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Have you used skip links? No? Give it a try!&lt;/p&gt;




&lt;p&gt;🚀Thanks For Reading | Happy Coding🌃&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>💻 Documentation as code</title>
      <author>Adam Coster</author>
      <pubDate>Thu, 08 Apr 2021 00:28:24 +0000</pubDate>
      <link>https://dev.to/adamcoster/documentation-as-code-40a7</link>
      <guid>https://dev.to/adamcoster/documentation-as-code-40a7</guid>
      <description>&lt;p&gt;Programmers &lt;em&gt;hate&lt;/em&gt; writing documentation. Most programmers, anyway. That's just stuff that gets in the way of the Real Work™, right?&lt;/p&gt;

&lt;p&gt;The truth is that the Real Work™ of programming mostly consists of things that aren't directly writing code. Determining specs, designing an API, exploring technical limitations, learning best practices, training others, and so on and so on.&lt;/p&gt;

&lt;p&gt;Even when a programmer &lt;em&gt;is&lt;/em&gt; directly creating code, that code itself must find some middle ground between sometimes-mutually-exclusive goals:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The code must solve the problem at hand.&lt;/li&gt;
&lt;li&gt;The code must be easy to maintain.&lt;/li&gt;
&lt;li&gt;The code must be efficient &lt;em&gt;enough&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to be maintainable, good code must be written &lt;em&gt;for people&lt;/em&gt;. Specifically &lt;em&gt;other people&lt;/em&gt;. Even if you're a solo developer, your future self will be a &lt;em&gt;different person&lt;/em&gt;, at least with respect to the code you're writing now.&lt;/p&gt;

&lt;p&gt;One way to deal with this is so-called "self-documenting code". Combining carefully thought-out variable and function names with clean-code practices and industry standards is mostly what this is about.&lt;/p&gt;

&lt;p&gt;Self-documenting code is also an excellent practice because it reduces how much documentation is required &lt;em&gt;outside&lt;/em&gt; the code (e.g. in comments). Having code in addition to comments that describe that code is a "Don't Repeat Yourself" (DRY) principle violation. The purpose of DRY is to prevent errors caused by changing something in one place without also changing that &lt;em&gt;same thing&lt;/em&gt; in another place. If there's only &lt;em&gt;one&lt;/em&gt; place, such a mistake isn't possible.&lt;/p&gt;

&lt;p&gt;But how do you document bigger-picture stuff? The overarching purpose of a project? Its entry point? Who should be using it? Its dependencies? When it was last updated? What coding standards it's using?&lt;/p&gt;

&lt;p&gt;It's a lot harder to keep your &lt;em&gt;project&lt;/em&gt; documentation DRY than it is for the lines of code within it. This is where we get into "Documentation as Code" (borrowed from the concept of "Infrastructure as Code"). The goal is to have every piece of documentation somehow coupled to the &lt;em&gt;functionality&lt;/em&gt; of the project itself, so that if one changes then both must change.&lt;/p&gt;

&lt;p&gt;Wherever possible, anyway.&lt;/p&gt;

&lt;p&gt;I admit that this is something I've been historically terrible about, and am trying to find ways to dramatically improve in my projects. I don't have a grand solution, but here are some useful concepts and tools I've been thinking about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Global conventions.&lt;/strong&gt; When I say "global" I mean across projects and teams. Adherence to convention is a type of documentation. For example, if everyone knows that event-triggered functions are always prefixed with &lt;code&gt;on&lt;/code&gt; (e.g. &lt;code&gt;onDownload()&lt;/code&gt;), then you can have simpler function names without also needing comments. Or if everyone agrees that callback functions will always start with an &lt;code&gt;error&lt;/code&gt; argument, then everyone's code can take advantage of that &lt;em&gt;without additional documentation&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configs everywhere.&lt;/strong&gt; Tools like &lt;a href="https://www.npmjs.com/package/cosmiconfig"&gt;"Cosmic Config"&lt;/a&gt; make it easy to simultaneously follow general industry practices while also doing things how you prefer to do them. By putting information into &lt;em&gt;parseable&lt;/em&gt;, &lt;em&gt;testable&lt;/em&gt; configuration files. This brings you into infrastructure-as-code and environment-as-code territory, further reducing documentation needs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Automate everything.&lt;/strong&gt; If a robot does something, a person doesn't need to know anything about how that something works. If you need to do something regularly in a project, turn that thing into code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Prevent setup errors.&lt;/strong&gt; All good tools have an &lt;code&gt;init&lt;/code&gt; command (or similar) to make it easy to start using that tool with minimum error. The best ones interactively guide the user through decisions they need to make by asking human-friendly questions. Ideally the user would never even need to look at the resulting configuration file(s).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Docs and Code should have the same dependencies.&lt;/strong&gt; This is a tricky one, but also the one I'm most excited about. It's reminiscent of the Dependency Inversion Principle. The idea is this: we normally treat documentation as being dependent on the code, but what if we had &lt;em&gt;both&lt;/em&gt; depend on something else? That way we could make changes to that something-else and consequently both the code and docs would stay in tune.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For that last item, you would definitely need documentation to be built by code for it to work. A simple example is using configuration files -- the code that builds your docs can read values out of the same config files that your code does. In effect, the more you can abstract concepts into modular code or data, the more it can be used in automated docs and code.&lt;/p&gt;

&lt;p&gt;API documentation is probably the best example of this, especially for languages as flexible as JavaScript: you could use centralized API documentation to dictate both the functionality of your code and the documentation that describes it!&lt;/p&gt;

&lt;p&gt;To accomplish this you could use tools like &lt;a href="https://swagger.io/specification/"&gt;Swagger/OpenAPI&lt;/a&gt;, &lt;a href="https://joi.dev/"&gt;joi&lt;/a&gt;,&lt;a href="https://express-validator.github.io/docs/"&gt;Express Validator&lt;/a&gt;, and others.&lt;/p&gt;

&lt;p&gt;I've only just started trying to find ways to do this. What tricks and tools do &lt;em&gt;you&lt;/em&gt; use?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article originally appeared in a &lt;a href="https://www.bscotch.net/post/devchat-11"&gt;DevChat Newsletter&lt;/a&gt;.&lt;/em&gt;*&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>devops</category>
      <category>discuss</category>
    </item>
    <item>
      <title>I love the way knowledge is shared in the programming world</title>
      <author>Francisco  Inoque</author>
      <pubDate>Wed, 07 Apr 2021 23:54:27 +0000</pubDate>
      <link>https://dev.to/frantchessico/i-love-the-way-knowledge-is-shared-in-the-programming-world-12kh</link>
      <guid>https://dev.to/frantchessico/i-love-the-way-knowledge-is-shared-in-the-programming-world-12kh</guid>
      <description>&lt;p&gt;Hello guys, today I want to share something with you that I love so much. So ...., I love to read code from other programmers and developers, I like to spend some time reading posts about the best programming practices, that somehow I feel better, sometimes I find myself discussing the code of another developer. And I feel that every time I read how my skills increase, my sense of criticism becomes smarter, how my practices improve and not like that, code from other programmers has served as inspiration for. I confess to you, everything I learned from programming I learned on the web, reading, watching video lessons and always practicing. I realize that there is no way to improve without seeing how others do it, without having feedback from other people, even though they don't know you, but through their codes you will have feedback, and this is what I love in the programming world, the way how knowledge is shared without any restrictions, without selfishness or self-centeredness. There are code projects all over the world, communities forming around technology ... I love it, I love this way of transmitting knowledge. For me, being a software engineer, programmer or developer is very noble. "I love how knowledge is shared in the programming world."&lt;/p&gt;

&lt;p&gt;Francisco Inoque.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>I love the way knowledge is shared in the programming world</title>
      <author>SavanaPointOfficial</author>
      <pubDate>Wed, 07 Apr 2021 23:40:21 +0000</pubDate>
      <link>https://dev.to/savanapointofficial/i-love-the-way-knowledge-is-shared-in-the-programming-world-40ed</link>
      <guid>https://dev.to/savanapointofficial/i-love-the-way-knowledge-is-shared-in-the-programming-world-40ed</guid>
      <description>&lt;p&gt;Hello guys, today I want to share something with you that I love so much. So ...., I love to read code from other programmers and developers, I like to spend some time reading posts about the best programming practices, that somehow I feel better, sometimes I find myself discussing the code of another developer. And I feel that every time I read how my skills increase, my sense of criticism becomes smarter, how my practices improve and not like that, code from other programmers has served as inspiration for. I confess to you, everything I learned from programming I learned on the web, reading, watching video lessons and always practicing. I realize that there is no way to improve without seeing how others do it, without having feedback from other people, even though they don't know you, but through their codes you will have feedback, and this is what I love in the programming world, the way how knowledge is shared without any restrictions, without selfishness or self-centeredness. There are code projects all over the world, communities forming around technology ... I love it, I love this way of transmitting knowledge. For me, being a software engineer, programmer or developer is very noble. "I love how knowledge is shared in the programming world."&lt;/p&gt;

&lt;p&gt;Francisco Inoque.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Writing a PR description </title>
      <author>Jasterix</author>
      <pubDate>Wed, 07 Apr 2021 23:38:25 +0000</pubDate>
      <link>https://dev.to/jasterix/writing-a-pr-description-5ap2</link>
      <guid>https://dev.to/jasterix/writing-a-pr-description-5ap2</guid>
      <description>&lt;p&gt;This isn't going to be an in-depth article or all that technical. But I've been itching to write over the last couple of weeks and this 30-min article is short enough to finish in one sitting right after work. My brain is at that perfect level of fatigue, where the words still come easy, but the thought of reading pages on a topic feels painful 😪&lt;/p&gt;

&lt;p&gt;Last week, I made my first PR for my first feature. After weeks of learning, video watching and question asking, I created a new Azure function that logs hello, world to the terminal.&lt;/p&gt;

&lt;p&gt;My PR description said as much:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Creates Azure function&lt;/li&gt;
&lt;li&gt;Logs hello, world&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simple. Right?&lt;/p&gt;

&lt;p&gt;But then I got PR comments. &lt;/p&gt;

&lt;p&gt;The comments themselves weren't the issue, but my logic was. I assumed everyone, being familiar with the "hello, world" approach, would understand this PR was the basis for the Azure function that was to come. Not realizing that even in the shell of a project, decisions have been made-- how to set up the code, what conventions are followed, what triggers make sense etc etc. &lt;/p&gt;

&lt;p&gt;So I took a step back, read the comments, stepped away again, re-worded the description, read the comments and then read some PRs and then read the comments again. &lt;/p&gt;

&lt;p&gt;Reading the other PRs was the most illuminating. Re-reading the comments at each step helped me piece together what information the reviewer needed. Reading the other PRs showed how different devs approached this. &lt;/p&gt;

&lt;p&gt;While short, most of the descriptions were helpful to a new set of eyes. Assuming 0 knowledge of the PR or the associated feature, they offered enough information for the reviewer to proceed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pr-description-template"&gt;
  &lt;/a&gt;
  PR description template
&lt;/h3&gt;

&lt;p&gt;In addition to commit small, frequent PRs, this is the PR template I have so far:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This PR will accomplish _____&lt;/li&gt;
&lt;li&gt;This will in turn have _____ impact on _____&lt;/li&gt;
&lt;li&gt;Not included in scope for this PR is _____ because of _____&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Photo by Karolina Grabowska from Pexels&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>codereview</category>
      <category>devjournal</category>
    </item>
  </channel>
</rss>
