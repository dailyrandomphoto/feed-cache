<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>3 Steps Protocol to boost your Learning Speed and Memory</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Thu, 13 May 2021 18:51:20 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/3-steps-protocol-to-boost-your-learning-speed-and-memory-29dn</link>
      <guid>https://dev.to/pjeziorowski/3-steps-protocol-to-boost-your-learning-speed-and-memory-29dn</guid>
      <description>&lt;p&gt;In this post, I'll show you how you can use hormones that are naturally produced in your body (cortisol and epinephrine, a.k.a adrenaline) to help you learn faster, improve your memory and increase your overall performance.&lt;/p&gt;

&lt;p&gt;If you don't have the time to read the whole article, I'll give you the three steps protocol to follow to get all the benefits. I strongly recommend reading the entire article to understand better the science behind which will allow you to implement it in your life more easily and adjust to your needs if needed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-steps-formula-to-improve-your-learning-and-performance"&gt;
  &lt;/a&gt;
  3 Steps Formula to improve your learning and performance
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Start the session with 90 minutes of deep focus learning or work (expect distractions in the first ~10 minutes, as well as at the end of the session)&lt;/li&gt;
&lt;li&gt;Increase adrenaline in your body using the Wim Hof breathing or any other breathing method&lt;/li&gt;
&lt;li&gt;Go into a non-sleep deep rest state (e.g. meditation, or something equally relaxing) for about 10-20 minutes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Additionally, make sure at the end of the day, your sleep is high quality.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-magic-science-behind"&gt;
  &lt;/a&gt;
  The magic (science) behind
&lt;/h2&gt;

&lt;p&gt;Many of you may know those hormones (cortisol and adrenaline/epinephrine) as something terrible, released when you are stressed, in a fight-or-flight mode. It's true, partially. I would like you to think about those hormones as hormones of alertness, activation, energy, though.&lt;/p&gt;

&lt;p&gt;In fact, cortisol and epinephrine are vital to your health. They are helping you boost your immune system, be alert and ready to act, boost energy levels, and have many other positive effects, including better learning performance.&lt;br&gt;
Cortisol is vital. You shouldn't call it a stress hormone. It makes you more alert and ready to take action, which is often perceived as anxiety if it raises too high levels. &lt;/p&gt;

&lt;p&gt;Cortisol can be more thought of as a hormone of energy. It makes you want to act, increases your heartbeat, makes you alert and turns off some non-vital processes like digestion.&lt;/p&gt;

&lt;p&gt;In general, cortisol can be a good tool if released at the right time, for the right amount of time, and in the correct dose - the same goes for adrenaline.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pubmed.ncbi.nlm.nih.gov/19555723/"&gt;Research says a sharp increase in cortisol and adrenaline leads to better learning and performance&lt;/a&gt;. Epinephrine is actually your best friend when it comes down to learning and remembering. &lt;/p&gt;

&lt;p&gt;It does so because it's usually released before extreme situations, e.g. you'll easily remember every detail of what happened before a car accident, and you'll remember it for a long time. I still remember how I crashed my uncle's car... It's all about how much, when and for how long you release cortisol and epinephrine.&lt;/p&gt;

&lt;p&gt;This is why increasing your adrenaline levels after a learning session may help you learn faster, and remember more. This is something deeply ingrained in human evolution. The same way a child learns not to touch a hot stove, you learn whatever you want to learn, as long as you get the adrenaline boost right after you stopped learning.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-those-hormones-are-harmful"&gt;
  &lt;/a&gt;
  When those hormones are harmful?
&lt;/h2&gt;

&lt;p&gt;They are harmful when being in a stress state is chronic and not controlled. You can not stay in this highly alert state for long. If you are stressed for more than a day you can consider it harmful.&lt;/p&gt;

&lt;p&gt;Also, remember that you want those shots of hormones right AFTER the learning session, not while learning!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-control-it-when-its-chronic"&gt;
  &lt;/a&gt;
  How to control it when it's chronic?
&lt;/h2&gt;

&lt;p&gt;Many methods may help you reduce cortisol levels in your body, but it's a topic for another article. Among those, you may find things like... meditation, breathing, deep rest, and all of the well-known relaxation methods.&lt;/p&gt;

&lt;p&gt;Avoid fasting, high-intensity training, cold showers as they all tend to increase cortisol and adrenaline levels in your body. Try to sleep well. Take care of yourself first. The basics are the most important!&lt;/p&gt;

&lt;p&gt;However, if you do everything well, take care of all the basics but still struggle, you can look at supplements like &lt;a href="https://examine.com/supplements/ashwagandha/"&gt;Ashwagandha&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I'll cover the topic of dealing with chronic high levels of cortisol in your body in one of the next articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#last-words"&gt;
  &lt;/a&gt;
  Last words
&lt;/h2&gt;

&lt;p&gt;To summarize - the so-called stress hormone and adrenaline are not your enemies. They are vital for your well being &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4034215/"&gt;and immune system&lt;/a&gt;. Use them as tools, take the control and get benefits in your learning and performance.&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>biohacking</category>
      <category>learning</category>
      <category>health</category>
    </item>
    <item>
      <title>Apple’s AirTag Security Concerns, a Deep Neural Network Hack, &amp; more on DevNews!</title>
      <author>Josh Puetz</author>
      <pubDate>Thu, 13 May 2021 18:37:33 +0000</pubDate>
      <link>https://dev.to/devteam/apple-s-airtag-security-concerns-a-deep-neural-network-hack-more-on-devnews-30gm</link>
      <guid>https://dev.to/devteam/apple-s-airtag-security-concerns-a-deep-neural-network-hack-more-on-devnews-30gm</guid>
      <description>&lt;p&gt;&lt;a class="mentioned-user" href="https://dev.to/saronyitbarek"&gt;@saronyitbarek&lt;/a&gt;
 and I are back for another episode of hot tech takes and developer news demystification...&lt;/p&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devnews/s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S4:E5 - Apple’s AirTag Security Concerns, a Deep Neural Network Hack, an Oil Pipeline Cyber Attack, and a Shortage of Semiconductors&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devnews"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevNews  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors" alt="DevNews" src="https://res.cloudinary.com/practicaldev/image/fetch/s--jJPvwj98--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XOSCOlKI--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devnews/s4-e5-apple-s-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors"&gt;
      &lt;img id="episode-profile-image" alt="S4:E5 - Apple’s AirTag Security Concerns, a Deep Neural Network Hack, an Oil Pipeline Cyber Attack, and a Shortage of Semiconductors" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--84VpOv6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--3GWkSFQs--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/346/5b0bd095-4a8c-4449-a43d-9e9b154b9d09.png"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#in-this-episode-we-cover"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In this episode, we cover...&lt;/strong&gt;
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Apple’s AirTag security concerns (the anti-stalking features you've heard about might not be cutting it)&lt;/li&gt;
&lt;li&gt;A US oil pipeline cyberattack and shutdown (ransomware attacks affect all industries, unfortunately) &lt;/li&gt;
&lt;li&gt;A shortage in semiconductors (semiconductors, MEGA short supplies)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also chatted with &lt;a href="//twitter.com/sanghyun_hong"&gt;Sanghyun Hong&lt;/a&gt; and &lt;a href="//twitter.com/yigitcankaya1"&gt;Yigitcan Kaya&lt;/a&gt; — Ph.D. students in Computer Science at the University of Maryland College Park, and co-authors of a research paper about how hackers could make AI networks consume much more energy than they already do.&lt;/p&gt;

&lt;p&gt;Thanks for tuning in!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devnews"&gt;follow DevNews&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Quick Listening Links&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s4-e5-apples-airtag-security-concerns-deep-neural-network/id1525581923?i=1000521592596"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/7s3kj5xtQmio9EIHigaADW"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cDovL2ZlZWRzLmNvZGVuZXdiaWUub3JnL2Rldm5ld3NfcG9kY2FzdC54bWw/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZuZXdzLzI5?sa=X&amp;amp;ved=0CAQQkfYCahcKEwiwrbzHo8fwAhUAAAAAHQAAAAAQCA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.stitcher.com/show/devnews/episode/s4-e5-apples-airtag-security-concerns-a-deep-neural-network-hack-an-oil-pipeline-cyber-attack-and-a-shortage-of-semiconductors-83928383"&gt;Stitcher&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devnews-dev-fH8hvsClkWp/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevNews-p1352512/?topicId=163027033"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devpods.dev/podcasts/devnews/episodes/162"&gt;Transcript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Our season four sponsors, &lt;a href="https://scoutapm.com/devnews"&gt;Scout APM&lt;/a&gt; and &lt;a href="https://rudderstack.com/"&gt;Rudderstack&lt;/a&gt; ❤️ &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/5xaOcLyzuYxpQyCgy9G/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/5xaOcLyzuYxpQyCgy9G/giphy.gif" alt="Valerie Cherish Newsflash"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>podcast</category>
    </item>
    <item>
      <title>💉 VacCoWIN - Check Available Slots for CoWIN Vaccination right from your Terminal!</title>
      <author>Dhruv Panchal</author>
      <pubDate>Thu, 13 May 2021 18:27:54 +0000</pubDate>
      <link>https://dev.to/dhhruv/vaccowin-check-available-slots-for-cowin-vaccination-right-from-your-terminal-23f5</link>
      <guid>https://dev.to/dhhruv/vaccowin-check-available-slots-for-cowin-vaccination-right-from-your-terminal-23f5</guid>
      <description>&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.cowin.gov.in/home"&gt;CoWIN Portal&lt;/a&gt;&lt;/strong&gt; is used to self-register yourself for the &lt;strong&gt;Vaccination&lt;/strong&gt; process in India. Here you can register yourself with your Phone Number and avail a slot from the available slots in various Vaccination Centres around the country.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;VacCowin&lt;/strong&gt; is a Python Script to find open slots for Vaccination in India based on your &lt;strong&gt;pincode (or multiple pincodes) or State and District&lt;/strong&gt;. This script will recheck after every few minutes and as soon the slots open, inform you via Beeping sound &amp;amp; Desktop notification.&lt;/p&gt;

&lt;p&gt;Since India has started the Vaccination Drive for those above 18 years of age, there is a very heavy rush and slots get booked soon. This script will come in handy for finding those slots as soon as they open.&lt;/p&gt;

&lt;p&gt;The data is retrieved using the open public APIs at &lt;a href="https://apisetu.gov.in/public/marketplace/api/cowin"&gt;API Setu&lt;/a&gt;. It works on both Linux and Windows.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/Vac-Cowin"&gt;
        Vac-Cowin
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      💉 Check Available Slots for CoWIN Vaccination right from your Terminal!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Install Python&lt;/li&gt;
&lt;li&gt;Clone this repository...
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/dhhruv/Vac-Cowin.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install, create and activate virtual environment.
For instance we create a virtual environment named 'venv'.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;virtualenv
python &lt;span class="nt"&gt;-m&lt;/span&gt; virtualenv venv
venv&lt;span class="se"&gt;\S&lt;/span&gt;cripts&lt;span class="se"&gt;\a&lt;/span&gt;ctivate.bat
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Install dependencies
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input:
&lt;/h2&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tags&lt;/th&gt;
&lt;th&gt;Actions&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-h, --help&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Show the Help Message and exiting the program.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-p, --pincode&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Pincode(s) to look for slots.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a, --age&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Age of the User(Default = 18).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-d, --date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Date to check Vaccination(Format = DD-MM-YYYY).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-w, --wizard&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;For a User Friendly Interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-i, --interval&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Interval in which to read Data from CoWin Website in Seconds. (Default = 300)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-s, --state&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The State you want to search for.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-t, --district&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The District you want to search for.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1.  Using Pincode(s):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You can check the available slots by entering Pincode(s) using &lt;code&gt;-p&lt;/code&gt; specified with age using &lt;code&gt;-a&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example: &lt;code&gt;python VacCowin.py -p 382150 -a 47&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CL5JojRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuwfiqhou9d4kjwfxoiz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CL5JojRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iuwfiqhou9d4kjwfxoiz.gif" alt="Method 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.  Using State and District:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You can check the available slots by entering State using &lt;code&gt;-s&lt;/code&gt; and District using&lt;code&gt;-t&lt;/code&gt; specified with age using &lt;code&gt;-a&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example: &lt;code&gt;python VacCowin.py -s Gujarat -t Ahmedabad -a 19&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ark06agp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ef864do4esavrdms55h.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ark06agp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ef864do4esavrdms55h.gif" alt="Method 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.  Using Wizard Mode(For Beginners):&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;   If you're a beginner then you can specify &lt;code&gt;-w&lt;/code&gt; in the Terminal or directly run the Script to enter the Wizard Mode for Beginners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;br&gt;
&lt;code&gt;python VacCowin.py -w&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;code&gt;python VacCowin.py&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Enter the Information asked to check the Available Slots.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--flEAmmf7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9hzi4ax15qapgh4qt4i.gif" alt="Method 3"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, stay tuned for further updates on GitHub:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/dhhruv"&gt;
        dhhruv
      &lt;/a&gt; / &lt;a href="https://github.com/dhhruv/Vac-Cowin"&gt;
        Vac-Cowin
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      💉 Check Available Slots for CoWIN Vaccination right from your Terminal!
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;b&gt;Note:- Either Proceed through Pincode Method OR (State and District) Method for a reliable response.&lt;/b&gt;&lt;/p&gt; 

</description>
      <category>codenewbie</category>
      <category>productivity</category>
      <category>beginners</category>
      <category>python</category>
    </item>
    <item>
      <title>Svelte Router - A Proposal</title>
      <author>Arthur Germano</author>
      <pubDate>Thu, 13 May 2021 18:16:25 +0000</pubDate>
      <link>https://dev.to/arthurgermano/svelte-router-a-proposal-2c6f</link>
      <guid>https://dev.to/arthurgermano/svelte-router-a-proposal-2c6f</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag5c8w7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnimi5ub61s2zgm1gqty.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ag5c8w7t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hnimi5ub61s2zgm1gqty.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Photo by Matt Duncan on Unsplash&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;Hi.. I am using Svelte for quite a while now. I think it is a pretty sweet compiler for front-end.&lt;/p&gt;

&lt;p&gt;But why do I decided to write a Router ?&lt;/p&gt;

&lt;p&gt;Because until now I didn’t find a router to attend to specific need. Well not a router embedded inside a framework like the Framework7.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, Framework7 is awesome too, but what if I just want a router not an entire framework.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#so-what-should-a-router-do-"&gt;
  &lt;/a&gt;
  So.. What Should a Router do ?
&lt;/h1&gt;

&lt;p&gt;That is an important question and all the routers I saw, until now, doesn’t give me the control that I need. They are great routers, but let’s face it what is important for a router to do.&lt;/p&gt;

&lt;p&gt;One can say routing.. of course — but is a little more than that.&lt;/p&gt;

&lt;p&gt;It has to control the routing and:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If it should route to a route;&lt;/li&gt;
&lt;li&gt;What to do before enter each route;&lt;/li&gt;
&lt;li&gt;What to do before enter that specific route;&lt;/li&gt;
&lt;li&gt;What to do when it is allowed to enter that route;&lt;/li&gt;
&lt;li&gt;Allow we to control all that above behavior in a easy way;&lt;/li&gt;
&lt;li&gt;And last but not least — access to everything everywhere!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is what I think a route should deliver. Kind of what VueRouter delivers to us.&lt;/p&gt;

&lt;p&gt;VueRouter is great and works like a charm.. so why shouldn’t Svelte have a great router too ?&lt;/p&gt;

&lt;p&gt;As I said that Svelte does have good routers however I personally don’t like routes based on structure. I like routers to give me the choice to do what I want to do when I want to do.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#scr-svelte-client-router-the-proposal"&gt;
  &lt;/a&gt;
  SCR — Svelte Client Router — The Proposal
&lt;/h1&gt;

&lt;p&gt;Who Am I to create a router right? I know my limitations I am not the wisest guy around, but I try to do my best =).&lt;/p&gt;

&lt;p&gt;That’s why I came with this proposal — I have created a router for Svelte that does exactly what I think it should do.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsl0Y5iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pkipng4fu752t38ejj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dsl0Y5iT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8pkipng4fu752t38ejj5.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;ta-daaa! A lot of work =D&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;p&gt;The key concept of this router is allow us to control the behavior before enter a route. So we can set:&lt;/p&gt;

&lt;p&gt;-&lt;b&gt;Global Before Enter Functions:&lt;/b&gt; To execute a function or array of functions to each route — Applied to all routes;&lt;br&gt;
-&lt;b&gt;Route Before Enter Functions:&lt;/b&gt; To execute a function or array of functions to a single route — Applied to a single route;&lt;br&gt;
-&lt;b&gt;Ignore Global Enter Functions:&lt;/b&gt; To just ignore Global Before Enter functions on a single route — Applied to a single route;&lt;br&gt;
-&lt;b&gt;Revert Order Of Execution:&lt;/b&gt; To execute Route Before Functions Before Global Before Functions;&lt;/p&gt;

&lt;p&gt;Of course it offers more than just that.. but it is focused on deliver that!&lt;/p&gt;

&lt;p&gt;With this router you will be able to control every aspect of routing, passing information forward throughout Before Enter Functions and After Before Enter Functions and receiving it in all components.&lt;/p&gt;

&lt;p&gt;One of the cooliest things is that every param, variable defined will be delivered in all places — functions, components, etc, as soon as possible.&lt;/p&gt;

&lt;p&gt;That means if you define a parameter inside of a Before Enter Function it will be delivered in the next one until the end, plus it will be delivered in your components.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Why is this nice, one can ask?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;&lt;em&gt;Because I can control the behavior of routing and even alter as soon as I want to.&lt;/em&gt;&lt;/b&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ah.. I almost forget you can set loading components to it — Global and Per Route too!&lt;/p&gt;

&lt;p&gt;As soon as Before Enter Functions kicks in it will show a loading component if the loading take time enough.&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#try-it-test-it-documentation"&gt;
  &lt;/a&gt;
  Try It — Test It — Documentation
&lt;/h1&gt;

&lt;p&gt;Yes, It is in its early stages however I think it is awesome!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router"&gt;SCR - Svelte Client Router - Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h1&gt;
  &lt;a href="#npm-package"&gt;
  &lt;/a&gt;
  NPM Package
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://arthurgermano.github.io/svelte-client-router/#/svelte-client-router"&gt;SCR - Svelte Client Router - Package&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;



&lt;h1&gt;
  &lt;a href="#see-on-github"&gt;
  &lt;/a&gt;
  See on Github
&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/arthurgermano/svelte-client-router"&gt;SCR - Svelte Client Router - Code&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;



&lt;h1&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h1&gt;

&lt;p&gt;I have worked with a little personal project and Svelte is really wonderful. I missed one thing in Svelte Community though, a good not embedded router.&lt;/p&gt;

&lt;p&gt;So here it my proposal. Please check out — test it and let me know your thoughts. =)&lt;br&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#finance-notes-project"&gt;
  &lt;/a&gt;
  Finance Notes Project
&lt;/h1&gt;

&lt;p&gt;If you want to check out my personal project..&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jgWpayi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxe8hhbi9o0sdoa5r16i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jgWpayi---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pxe8hhbi9o0sdoa5r16i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;small&gt;Finance Notes Project — PWA&lt;/small&gt;&lt;/center&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://financenotes.com.br/"&gt;Finance Notes Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dev.to/arthurgermano/my-experience-building-a-pwa-app-with-svelte-js-4pme"&gt;My Experience Building a PWA App with Svelte JS&lt;/a&gt;&lt;/p&gt;


&lt;/blockquote&gt;

&lt;p&gt;Cheers!&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>router</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Incremental Build Improvements, Angular 12, Distributed Task Execution, and more in Nx 12.3!</title>
      <author>Brandon Roberts</author>
      <pubDate>Thu, 13 May 2021 18:08:58 +0000</pubDate>
      <link>https://dev.to/nx/incremental-build-improvements-angular-12-distributed-task-execution-and-more-in-nx-12-3-41m9</link>
      <guid>https://dev.to/nx/incremental-build-improvements-angular-12-distributed-task-execution-and-more-in-nx-12-3-41m9</guid>
      <description>&lt;p&gt;&lt;strong&gt;Nx 12.3 includes many new features, including Incremental Build Improvements, Angular 12, Distributed Task Execution, and more!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Nx&lt;/strong&gt; is a suite of powerful, extensible dev tools to help you architect, test, and build at any scale - integrating seamlessly with modern technologies and libraries while providing a robust CLI, computation caching, dependency management, and more.&lt;/p&gt;

&lt;p&gt;If you aren't familiar with it, learn about Nx at &lt;a href="https://nx.dev/angular"&gt;nx.dev/angular&lt;/a&gt; and &lt;a href="https://nx.dev/react"&gt;nx.dev/react&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#incremental-build-improvements"&gt;
  &lt;/a&gt;
  Incremental Build Improvements
&lt;/h2&gt;

&lt;p&gt;Nx already supports incremental builds, and to enhance this feature we have introduced Target Dependencies. Each project's target may now declare other targets that the project depends on, meaning that those targets are completed before the project target is run.&lt;/p&gt;

&lt;p&gt;As an example, let's look at an application with a dependency on a buildable library. The following workspace configuration below displays &lt;code&gt;app1&lt;/code&gt; and &lt;code&gt;lib1&lt;/code&gt; with lib1 needing to be built before &lt;code&gt;app1&lt;/code&gt; is built. Previously, the &lt;code&gt;--with-deps&lt;/code&gt; option was always required to build the dependencies of &lt;code&gt;app1&lt;/code&gt;. Without specifying this option, the application would not build because its dependencies were not built. Because this requirement always has to be met, the &lt;code&gt;build&lt;/code&gt; target for &lt;code&gt;app1&lt;/code&gt; should declare a dependency on the build target of projects that app1 depends on. These dependencies can now be defined in the &lt;code&gt;workspace.json&lt;/code&gt; within the target configuration for the project.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now running &lt;code&gt;nx build app1&lt;/code&gt; will also schedule and build &lt;code&gt;nx build lib1&lt;/code&gt; without passing &lt;code&gt;--with-deps&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Another example is serving an application that requires building itself beforehand. Now you can also specify that the target depends on another target defined for the same project.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now serving &lt;code&gt;app1&lt;/code&gt; will first build &lt;code&gt;app1&lt;/code&gt;, along with any additional target dependencies. Target Dependencies give you more control and customization over project dependencies. Now for incremental builds, you don't have to specifically pass &lt;code&gt;--with-deps&lt;/code&gt;; The build is always incremental based on its target dependencies.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#support-for-updating-to-angular-version%C2%A012"&gt;
  &lt;/a&gt;
  Support for updating to Angular version 12
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Angular version 12 was just recently released and includes new features that many users are excited about, such as:&lt;/li&gt;
&lt;li&gt;Support for TypeScript 4.2.&lt;/li&gt;
&lt;li&gt;Full support for Webpack 5. In Angular 11, Webpack 5 was an opt-in feature.&lt;/li&gt;
&lt;li&gt;Support for NgRx version 12.&lt;/li&gt;
&lt;li&gt;Deprecation of Protractor as an E2E solution. Fortunately, Nx provides first-party support for &lt;a href="https://cypress.io"&gt;Cypress&lt;/a&gt; E2E testing.&lt;/li&gt;
&lt;li&gt;Angular ESLint has been updated to version 4.&lt;/li&gt;
&lt;li&gt;Updated Angular Storybook to use the new Storybook version 6 syntax.&lt;/li&gt;
&lt;li&gt;Removal of the lint target with TSLint in favor of community-maintained packages. Fortunately, Nx also provides first-party support for &lt;a href="https://github.com/angular-eslint/angular-eslint"&gt;Angular ESLint&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nx also helps users migrate from TSLint to ESLint automatically. See the video below for a walkthrough.&lt;/p&gt;

&lt;p&gt;Migrating Angular Applications from TSLint to ESLint&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/JtVqJMzsqyY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;As an additional note, users of Storybook 5 must upgrade to Storybook 6.2+ before upgrading to Angular 12. This is necessary because Storybook 6.2+ is needed to support Webpack 5+. See our &lt;a href="https://nx.dev/latest/angular/storybook/overview#upgrading-to-storybook-6-using-the-nx-migration-generator"&gt;Storybook 5 to 6 migration guide&lt;/a&gt; for more details on how you can upgrade.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-highlights"&gt;
  &lt;/a&gt;
  Other Highlights
&lt;/h2&gt;

&lt;p&gt;Each release of Nx also contains additional minor features and bug fixes. Some notable features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Gatsby is listed as a &lt;strong&gt;&lt;em&gt;preset&lt;/em&gt;&lt;/strong&gt; when creating new Nx workspaces.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;style-jsx&lt;/strong&gt; support for Gatsby.&lt;/li&gt;
&lt;li&gt;Next.js has been updated to &lt;strong&gt;version 10.2&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Next.js apps now have support for &lt;strong&gt;incremental builds&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;getJestProjects()&lt;/strong&gt; utility method to &lt;strong&gt;@nrwl/jest package&lt;/strong&gt; for the root jest.config.js.&lt;/li&gt;
&lt;li&gt;Added &lt;strong&gt;strict&lt;/strong&gt; option when generating React applications.
ESLint now has a &lt;strong&gt;recommended extension&lt;/strong&gt; included for new workspaces.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-update%C2%A0nx"&gt;
  &lt;/a&gt;
  How to Update Nx
&lt;/h2&gt;

&lt;p&gt;Updating Nx is done with the following command, and will update your dependencies and code to the latest version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx migrate latest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After updating your dependencies, run any necessary migrations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;nx migrate &lt;span class="nt"&gt;--run-migrations&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#distributed-task-execution-for-nx%C2%A0cloud"&gt;
  &lt;/a&gt;
  Distributed Task Execution for Nx Cloud
&lt;/h2&gt;

&lt;p&gt;When working in large codebases, only running tasks based on what is affected in your Continuous Integration(CI) environment is a time-saver. Even when you do need to run those sets of tasks, it's better to run them in parallel to speed up your CI process. Traditionally, you would set up a parent job to split your tasks such as linting and testing into "buckets", and use child jobs to run each bucket of tasks, each with its own task details. This turns into a very challenging and ongoing effort to distribute and gather results from these tasks across a grid of machines. We've solved this problem numerous times, and are working on an exciting new feature for Nx Cloud called Distributed Task Execution (DTE). DTE is a new way to distribute the work of many tasks across many machines. DTE provides a Zero-Config️ way to coordinate and schedule all the tasks, execute them across multiple machines, and collect the results from these tasks into a single run, giving you a clean consolidated view of all tasks run and their details.&lt;/p&gt;

&lt;p&gt;Watch as Victor Savkin demos this new feature using the Nx GitHub repo.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Exs64pscwxA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;DTE is in private beta right now, and will available to the public soon, and will be free for open-source projects. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#explore-more"&gt;
  &lt;/a&gt;
  Explore More
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/nx-is-modern-angular-bda6cf10746d"&gt;Nx is Modern Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/how-to-never-build-or-test-the-same-code-twice-2dc58e413279"&gt;How to never build or test the same code twice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/plugging-into-the-dependency-graph-construction-for-nx-bc79814f5521"&gt;Plugging into the Dependency Graph Construction for Nx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.nrwl.io/smarter-and-faster-angular-development-with-nx-6ccca0fe18d1"&gt;Smarter and Faster Angular Development with Nx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Get our &lt;a href="https://youtu.be/2mYLe9Kp9VM"&gt;free basic Nx workspaces course on youtube!&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Purchase our premium video course on advanced practices for Nx workspaces: &lt;a href="https://nxplaybook.com/p/advanced-nx-workspaces"&gt;here&lt;/a&gt;!&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;As always, if you are looking for enterprise consulting, training and support, you can find out more about how we work with our clients &lt;a href="https://nrwl.io/services/consulting"&gt;here&lt;/a&gt;.&lt;br&gt;
If you liked this, click the 👏 below so other people will see this here on Medium. Follow &lt;a href="https://dev.to/brandontroberts"&gt;Brandon Roberts&lt;/a&gt; and &lt;a href="https://dev.to/nrwl"&gt;@nrwl_io&lt;/a&gt; to read more about Nx and Nrwl. Also follow &lt;a href="https://twitter.com/brandontroberts"&gt;Brandon&lt;/a&gt;, &lt;a href="https://twitter.com/NxDevTools"&gt;Nx&lt;/a&gt;, and &lt;a href="https://twitter.com/nrwl_io"&gt;Nrwl&lt;/a&gt; on Twitter!&lt;/p&gt;

</description>
      <category>nx</category>
      <category>angular</category>
      <category>monorepos</category>
      <category>react</category>
    </item>
    <item>
      <title>Why You Should Use SaaS Boilerplate &amp; Starter-Kits To Speed Up Your App Development</title>
      <author>Condor</author>
      <pubDate>Thu, 13 May 2021 17:40:32 +0000</pubDate>
      <link>https://dev.to/aminebounizel/why-you-should-use-saas-boilerplate-starter-kits-to-speed-up-your-app-development-1p4h</link>
      <guid>https://dev.to/aminebounizel/why-you-should-use-saas-boilerplate-starter-kits-to-speed-up-your-app-development-1p4h</guid>
      <description>&lt;p&gt;Being a SaaS entrepreneur has its good and bad sides. While it comes with the excitement of having new ideas and launching new projects, there is one rather dull part of the process: setting it up. &lt;br&gt;
Setting up the basics and taking care of the technical aspects can be time-consuming, and, to be honest, no one likes to do it. Since it requires a lot of motivation, attention, and many working hours, it can delay your app development by several weeks, even months. So, what can you do to make the process faster?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-saas-boilerplates"&gt;
  &lt;/a&gt;
  What Are SaaS Boilerplates?
&lt;/h2&gt;

&lt;p&gt;What if you found out that a template could take care of all the boring, complicated parts by starting with a boilerplate that has everything that is needed, and you didn't have to do them yourself anymore? Yes, it's possible, and that's exactly what a SaaS boilerplate is. SaaS boilerplates involve functionalities that would otherwise cost entrepreneurs a lot of time and money to build.&lt;br&gt;
There are things that are common across all SaaS Apps. No matter what you are building, your SaaS will most likely be needing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Authentication feature which handles all the login, logout, forgot password.&lt;/li&gt;
&lt;li&gt;Integration to payment and a way to charging the customer and manage subscriptions and plans.&lt;/li&gt;
&lt;li&gt;Features to handle recurring payments, cancelation, charging credit cards.&lt;/li&gt;
&lt;li&gt;Pre-build permission, and roles management to grant and restrict user permissions based on roles with full end-user control.&lt;/li&gt;
&lt;li&gt;Dashboard for your users&lt;/li&gt;
&lt;li&gt;Profile page for your users&lt;/li&gt;
&lt;li&gt;Built-in component library&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;...etc&lt;/p&gt;

&lt;p&gt;There are plenty of different types of boilerplates available on the market, and all of them have a different set of features and facilities.&lt;br&gt;
Based on your preferred programming language and the architecture you think your SaaS platform will require, you can choose one boilerplate or a starter kit that could set the ground for all your future projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#boostackio"&gt;
  &lt;/a&gt;
  Boostack.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p1d2akFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fddeavnn0uj4mz8zx1pl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p1d2akFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fddeavnn0uj4mz8zx1pl.png" alt="Boostack SaaS Boilerplate"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://boostack.io"&gt;Boostack&lt;/a&gt; provide a proven starting point for new projects that save you months of time when launching your next SaaS Application it uses minimal dependencies, implements idiomatic code, and follows best practices, Boostack comes with a clean project structure and clean architecture that you can easily extend or customize.&lt;br&gt;
Built on MEVN stack, the open-source JavaScript Stack to build powerful and dynamic apps.&lt;br&gt;
Boostack is 100% Javascript with Node.js on the backend and Vue.js on the frontend, so you don't need to write, maintain, or debug in multiple languages.&lt;br&gt;
For makers, bootstrapper or solo-founder Boostack is the perfect SaaS Boilerplate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#railskitscom"&gt;
  &lt;/a&gt;
  Railskits.com
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NmzT4mE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da4pw8i6hbvk97hn7ixd.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NmzT4mE9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da4pw8i6hbvk97hn7ixd.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://railskits.com"&gt;Railskits&lt;/a&gt; gets your new software-as-a-service site off to a running start by providing you a well-tested and proven recurring billing system with credit card payments.&lt;br&gt;
Railskits is a Ruby on Rails framework for building membership-based applications, including account signups upgrades/downgrades, tiered pricing levels with customizable limits (e.g, # of users, # of projects, etc.), multi-tenant data security in a single database, and more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#innomaticio"&gt;
  &lt;/a&gt;
  Innomatic.io
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3HQv8wTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh98e3dt83binot57agn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3HQv8wTS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh98e3dt83binot57agn.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.innomatic.io/"&gt;Innomatic&lt;/a&gt; the open source platform for building multi-tenant applications in PHP&lt;br&gt;
Innomatic reduces the time and the budget to build SaaS products by providing SaaS engineering, service management, and business management components in ready-to-use form. Innomatic Platform is based on Symfony.&lt;br&gt;
Innomatic also provides a Business Application Framework for creating multi-tenant custom Enterprise applications with prebuilt features like ACL, roles/permissions, site-wide search engine, dashboard widgets.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#saascoreframeworkcom"&gt;
  &lt;/a&gt;
  Saascoreframework.com
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9meJItCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfmmpyeiu7fawxuafjsn.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9meJItCg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pfmmpyeiu7fawxuafjsn.PNG" alt="Saascoreframework"&gt;&lt;/a&gt; &lt;br&gt;
&lt;a href="http://www.saascoreframework.com/"&gt;Saascoreframework&lt;/a&gt; the saas core framework a multi-tenant framework that would support everything you would expect in a modern SaaS application including free trial setup, a multi-tenant database architecture, and different user roles. The SaaS Core Framework is a generic version of the underlying technology that supports PetSitClick which you can use to build your own SaaS application and save time.&lt;/p&gt;

&lt;p&gt;We hoped this article helped you find the best SaaS Boilerplate to use.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#image-by-garrhet-sampson-on-unsplash"&gt;
  &lt;/a&gt;
  &lt;em&gt;Image by Garrhet Sampson on &lt;a href="https://unsplash.com/"&gt;unsplash&lt;/a&gt;&lt;/em&gt;
&lt;/h6&gt;

</description>
      <category>saas</category>
      <category>boilerplate</category>
      <category>startup</category>
      <category>starterkit</category>
    </item>
    <item>
      <title>How to Maintain Your Skills as a Developer </title>
      <author>Ceora Ford</author>
      <pubDate>Thu, 13 May 2021 17:28:13 +0000</pubDate>
      <link>https://dev.to/ceeoreo/how-to-maintain-your-skills-as-a-developer-1e4e</link>
      <guid>https://dev.to/ceeoreo/how-to-maintain-your-skills-as-a-developer-1e4e</guid>
      <description>&lt;p&gt;It’s no secret that the tech industry is always changing. New frameworks are always emerging and new features are constantly being added to the languages and frameworks that already exist. This can be exciting but sometimes it can be hard to keep up. Some people work in environments that don’t welcome change. Not everyone’s team is looking to implement the latest innovation. &lt;/p&gt;

&lt;p&gt;Zachariah, CEO and CTO of &lt;a href="https://squadcast.fm/"&gt;SquadCast&lt;/a&gt;, had this experience. In &lt;a href="https://codesandbox.io/podcasts/version-one/Zachariah-Moreno-SquadCast"&gt;episode 3 of the Version One podcast&lt;/a&gt;, he talked about an experience he had early on in his career. He was in a position that didn’t allow for much growth. So how was he able to keep his coding skills up to par? &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So what I did was I used that time to contribute to open source projects, research, sharpen my skills, [to] kind of stay sharp.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As Zachariah mentioned, there are many things you can do to stay sharp. This post will explain 5 ways you can maintain and grow your coding skills. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-other-peoples-code"&gt;
  &lt;/a&gt;
  Read other people's code
&lt;/h2&gt;

&lt;p&gt;When it comes to getting better at a certain coding language or framework, we usually think that we need to work on some fancy, new project. While that isn't a bad idea, reading other people's code is another very helpful step. Reading other people's code can often be overlooked but it's a great way to familiarize yourself with new and old syntax and to test your ability to understand unfamiliar codebases. &lt;/p&gt;

&lt;p&gt;Where can you find projects to read through? A great place to start is GitHub. Check out your favorite open source projects and products. Casually read through the code and see what you can learn. Is there a feature that you're curious about? Try to find out how it was implemented. You can also search for projects by language. If there is a language you want to brush up on, you can check out some of the most popular &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#work-on-top-of-already-existing-code"&gt;
  &lt;/a&gt;
  Work on top of already existing code
&lt;/h2&gt;

&lt;p&gt;Work on existing projects. You can find your own projects and iterate on them, adding new features or changing the structure of your code. You can also search for open source projects on GitHub. Find a project that's in a language you would like to brush up on and find an issue you can tackle. If you're not quite comfortable with making open source contributions, you can either stick to your own existing projects or read this helpful, &lt;a href="https://codesandbox.io/post/how-to-make-your-first-open-source-contribution"&gt;step-by-step guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Working on existing code is great because it presents new challenges. You have to figure out code that may be deprecated or hard to understand, even if it’s your project. By doing this, you'll train yourself to navigate unfamiliar codebases. This is a very valuable skill to gain since oftentimes in professional settings, you’ll have to add to code that already exists instead of starting something from scratch. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#watch-other-people-code"&gt;
  &lt;/a&gt;
  Watch other people code
&lt;/h2&gt;

&lt;p&gt;Watch other people code on platforms like YouTube and Twitch. Through videos and live streams, you can see other developers code and problem solve out loud. You can follow their thought pattern and see how they fix and tackle bugs and other problems in their code. There’s so much you can gain from watching this process. You can learn new syntax, learn how to approach and solve problems, and learn how to implement new features.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-coding-challenges"&gt;
  &lt;/a&gt;
  Do coding challenges
&lt;/h2&gt;

&lt;p&gt;Try completing coding challenges and exercises. There are tons of websites out there like &lt;a href="//hackerrank.com"&gt;HackerRank&lt;/a&gt; and &lt;a href="https://www.codewars.com/"&gt;CodeWars&lt;/a&gt; that present problems that you have to solve with your code stack of choice. These challenges are made to be short and to the point while also forcing you to solve complex problems. They’re a great way to stay sharp and keep up with any language. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#read-articles-about-code"&gt;
  &lt;/a&gt;
  Read articles about code
&lt;/h2&gt;

&lt;p&gt;There are tons of developer blogs out there. Developer blogs are full of gems. There’s so much you can learn from reading articles. If there’s a topic you want to learn more about, do a quick Google search or search on sites like &lt;a href="http://dev.to"&gt;dev.to&lt;/a&gt; for articles that can help. &lt;/p&gt;

&lt;p&gt;Reading articles written by other developers is another way to see how other people think and problem solve. As mentioned earlier, this is invaluable and can add to your skills and knowledge. So when you come across an article that covers a topic you’re interested in, take the time to read through it. And make note of any points that stood out to you. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Tech moves fast but even so, growth can sometimes feel stagnant. If you feel like you’re at a standstill, try these tips. By doing these things, you’ll be able to stay sharp and grow your skills. There’s still more you can learn from Zachariah and his journey to becoming a CEO and CTO of SquadCast. Make sure to give his &lt;a href="https://codesandbox.io/podcasts/version-one/Zachariah-Moreno-SquadCast"&gt;Version One episode&lt;/a&gt; a listen to find out more!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/4MJ9C6HYscUi8UiOsMl2Ej"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>career</category>
      <category>webdev</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Beginner's Guide to Jest Testing in React</title>
      <author>Daniel Sasse</author>
      <pubDate>Thu, 13 May 2021 17:23:25 +0000</pubDate>
      <link>https://dev.to/dsasse07/beginner-s-guide-to-jest-testing-in-react-1nig</link>
      <guid>https://dev.to/dsasse07/beginner-s-guide-to-jest-testing-in-react-1nig</guid>
      <description>&lt;p&gt;In my last post &lt;a href="https://dev.to/dsasse07/a-beginner-s-guide-to-unit-testing-with-jest-45cc"&gt;A Beginner's Guide to Unit-testing with Jest&lt;/a&gt; I walked through how to get started with implementing tests in javascript with the Jest testing library. Here I hope to expand on what was already discussed about matchers and expectations, and the purpose of test implementation with an example of how to write basic tests for React components.&lt;/p&gt;

&lt;p&gt;Writing tests for React components with Jest follows the same similar structure of a &lt;code&gt;describe&lt;/code&gt; function containing &lt;code&gt;test&lt;/code&gt; blocks with &lt;code&gt;expect&lt;/code&gt; functions and matchers. However, instead of testing the functionality of individual functions, we need to ensure that the components are rendering properly, and that user interactions with the component function as expected. For a detailed guide for the basic setup for Jest testing and it purpose, please see my previous post, &lt;a href="https://dev.to/dsasse07/a-beginner-s-guide-to-unit-testing-with-jest-45cc"&gt;A Beginner's Guide to Unit-testing with Jest&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h3&gt;

&lt;p&gt;We will walk through the process of setting up a basic React App with interactive elements such as a counter with increment/decrement buttons, and a form to post text to the DOM. I will walk through writing the Jest tests and the rest of the code here, but you can view &lt;a href="https://github.com/dsasse07/jest-react-example"&gt;the repo containing all of the code here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contents"&gt;
  &lt;/a&gt;
  Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#setting-up-the-app"&gt;Setting Up The App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#anatomy-of-the-default-react-test"&gt;Anatomy of the Default React Test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#planning-the-tests"&gt;Planning the Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#describe-the-tests"&gt;Describe the Tests&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#counter-tests"&gt;Counter Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#form-tests"&gt;Form Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#implementing-the-component"&gt;Implementing the Component&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#resources"&gt;Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-the-app"&gt;
  &lt;/a&gt;
  Setting Up The App
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Steps:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a new react app, and &lt;code&gt;cd&lt;/code&gt; into that directory.&lt;/li&gt;
&lt;li&gt;Jest is installed as a dependency to React when using &lt;code&gt;npx-create-react-app&lt;/code&gt;, along with the React Testing Library. The React Testing Library provides additional functions to find and interact with DOM nodes of components. No additional installation or setup is needed when beginning your React app this way.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-react-app jest-react-example
&lt;span class="nb"&gt;cd &lt;/span&gt;jest-react-example
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#anatomy-of-the-default-test"&gt;
  &lt;/a&gt;
  Anatomy of the Default Test
&lt;/h2&gt;

&lt;p&gt;When a new React app is created using &lt;code&gt;npx-create-react-app&lt;/code&gt;, the &lt;code&gt;App.js&lt;/code&gt; file comes pre-filled with placeholder content and a test file is included for this placeholder - &lt;code&gt;App.test.js&lt;/code&gt;. Let's walk through what happening in this test file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.test.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;userEvent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/user-event&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@testing-library/jest-dom/extend-expect&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders learn react link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/learn react/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We begin by importing two crucial functions from the React Testing Library: &lt;code&gt;render&lt;/code&gt; and &lt;code&gt;screen&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Render&lt;/code&gt; is a function that will build the DOM tree in memory that would normally be rendered as a webpage. We will use this to turn our component code into the format that the user would be interacting with.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;Screen&lt;/code&gt; is a an object with a number of querying functions that will allow us to target element(s) in the DOM. For comparison, it functions similarly to &lt;code&gt;querySelector&lt;/code&gt;, however the syntax is a bit different since we will not be using an element tag/class/id with &lt;code&gt;screen&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The next import, &lt;code&gt;userEvent&lt;/code&gt; will allow us to simulate a variety of user actions onto a targeted element, such as button presses, typing, etc.&lt;a href="https://testing-library.com/docs/ecosystem-user-event"&gt;The full documentation for userEvent can be found here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The third import, &lt;code&gt;@testing-library/jest-dom/extend-expect&lt;/code&gt;, provides additional matchers that we can use against targeted elements. &lt;a href="https://testing-library.com/docs/ecosystem-jest-dom"&gt;The full documentation for Jest-DOM can be found here&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The second thing we need to import is the component that we will be testing in this file.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these imports completed, we see the familiar Jest test function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Copied from above&lt;/span&gt;
&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;renders learn react link&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;linkElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/learn react/i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;linkElement&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;The test function is invoked with a &lt;code&gt;string&lt;/code&gt; argument describing the test, and a callback function with the test content.&lt;/li&gt;
&lt;li&gt;The callback function first creates the DOM tree for the component by &lt;code&gt;render&lt;/code&gt;ing the component.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;getByText&lt;/code&gt; function of the &lt;code&gt;screen&lt;/code&gt; object is invoked with a regular expression argument. The &lt;code&gt;getByText&lt;/code&gt; function will return the first element in the DOM that has text matching the regular expression which we save to a variable for later use. If the text is not found, &lt;code&gt;undefined&lt;/code&gt; would be the value of our variable.&lt;/li&gt;
&lt;li&gt;The callback is completed with the &lt;code&gt;expect&lt;/code&gt; and matcher statements. In this case, we are simply stating that we expect that our previous query found an element in the document.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we start the app on the local machine using &lt;code&gt;npm start&lt;/code&gt; can see that the desired link test is clearly visible, and the default test should pass.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pYbJmfuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmvy4qalvgoh9brdgvdx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pYbJmfuy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cmvy4qalvgoh9brdgvdx.png" alt="Default React Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can confirm that the default test is working before we move on to our own by running &lt;code&gt;npm test&lt;/code&gt; in the console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--atL8zutY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4odho1umjxjo3mnfy2a4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--atL8zutY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4odho1umjxjo3mnfy2a4.png" alt="Default App.test.js results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#planning-the-tests"&gt;
  &lt;/a&gt;
  Planning the Tests
&lt;/h2&gt;

&lt;p&gt;Following Test-Driven Development, let's begin by defining what our App &lt;strong&gt;should&lt;/strong&gt; do, write the tests for it, and then implement the code that should pass the tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There should be two buttons: increment and decrement. When clicked, they should increase/decrease a counter on the page. The counter should never be negative, so the decrement button should be disabled when the counter is less than 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There should be a form with an input field and a submit button. The user should be able to type into the field, and when submit is pressed, the text from the field will display in a list on the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Each list item will have a "remove" button, that when pressed should remove that text from the screen.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#describe-the-tests"&gt;
  &lt;/a&gt;
  Describe the Tests
&lt;/h3&gt;

&lt;p&gt;Since the counter value will just be a number, I wanted to ensure that the query matches the counter value and not another number potentially on the page as may happen with just using &lt;code&gt;getByText()&lt;/code&gt;. For this, we can use the dataset attribute &lt;code&gt;data-testid&lt;/code&gt; similar to how we use &lt;code&gt;id&lt;/code&gt; in HTML. The difference is that &lt;code&gt;data-testid&lt;/code&gt; is strictly for testing purposes and not related to CSS or other interactions.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#counter-tests"&gt;
  &lt;/a&gt;
  Counter Tests
&lt;/h4&gt;

&lt;h6&gt;
  &lt;a href="#test-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test #1:&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;In this first test, I wrote the expectation statements to match the initial plan. We expect the DOM to include both buttons, the Counter label "Counter: ", and the value of the counter. We would also expect that when the page is first loaded, the counter has a default text value of 0, and because of this, our decrement button should be disabled to not allow a negative counter value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App Counter&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Counter Elements should be present&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Increment/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrementButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Decrement/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterLabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Counter:/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter-value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeEnabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrementButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrementButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterLabel&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#test-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test #2&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;For the counter, we expect that each time the increment button is pressed, the counter value should increase by 1. When the counter goes above zero, the decrement button should become enabled. To simulate a button press, we use the &lt;code&gt;click()&lt;/code&gt; function in the &lt;code&gt;userEvent&lt;/code&gt; object we had imported earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Within the describe block from test #1&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Increment increases value by 1 and enables decrement button present&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Increment/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrementButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Decrement/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter-value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrementButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
js&lt;/p&gt;
&lt;h6&gt;
  &lt;a href="#test-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test #3&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;We expect that when the decrement button is pressed, the counter value should decrease by 1. When the counter reaches zero, the decrement button should become disabled.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Within the describe block from test #1&lt;/span&gt;

  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Decrement decreases value by 1 and disables decrement button at 0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;incrementButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Increment/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decrementButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Decrement/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counterText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter-value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incrementButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrementButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrementButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;counterText&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveTextContent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;decrementButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeDisabled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#form-tests"&gt;
  &lt;/a&gt;
  Form Tests
&lt;/h4&gt;

&lt;p&gt;The second feature of our mini-app, to explore how we can text for user interaction with forms, involves a form that creates list items when submitted.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#test-4"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test #4&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;First, we can create the basic test to ensure that the expected elements are rendered to the page, similar to what was done earlier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App Item List&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;List Form Components render&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listItemInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Create List Item/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addItemButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add-item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listItemInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addItemButton&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#test-6"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test #6&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;Now that we have confirmed that the elements exist, we need to ensure that the function as expected: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We would expect that initially, the input field would be empty, and that the user user should able to type into the field and change the value of the field.&lt;/li&gt;
&lt;li&gt;With text in the field, we expect that the user should be able to click on the submit button to create a new list item on the page with that text, and it would reset the input field.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User can add item to page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listItemInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Create List Item/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addItemButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add-item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listItemInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listItemInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listItemInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addItemButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listItemInput&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toHaveValue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#test-7"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Test #7&lt;/strong&gt;
&lt;/h6&gt;

&lt;p&gt;After a list item has been created, the user should be able to click the remove button next to it, to remove it from the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;User can remove item from page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listItemInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByLabelText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/Create List Item/i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;addItemButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add-item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;listItemInput&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;addItemButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;removeButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getByTestId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;remove-item0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;userEvent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;removeButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newItem&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;not&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toBeInTheDocument&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#implementing-the-component"&gt;
  &lt;/a&gt;
  Implementing the Component
&lt;/h2&gt;

&lt;p&gt;With the tests in place, we should now build our component, and it should meet the expectations set in our tests. Writing the code for the app behavior is no different than it would be without the tests in place. The only additional thing we must do, is include the &lt;code&gt;data-testid&lt;/code&gt; on the elements for which our tests were querying elements using &lt;code&gt;getByTestId()&lt;/code&gt; such as the list items and buttons. The full code implemented to create the component can be found below the demo.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;End Result&lt;/strong&gt;:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d41HEi8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghxinrwnsdrkmayc574w.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d41HEi8t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghxinrwnsdrkmayc574w.gif" alt="Example App Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can now run the tests using &lt;code&gt;npm test&lt;/code&gt; as see the results!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BlF6Wlzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyodezccpxlfh6ifdson.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BlF6Wlzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyodezccpxlfh6ifdson.png" alt="Final Test Results"&gt;&lt;/a&gt;&lt;br&gt;
Below is the code used to create the component demonstrated above, using hooks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;listItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setListItems&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;newItemText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setNewItemText&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleCounterClick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleNewItemChange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;setNewItemText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleAddItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nx"&gt;setListItems&lt;/span&gt;&lt;span class="p"&gt;([...&lt;/span&gt;&lt;span class="nx"&gt;listItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newItemText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;listItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="nx"&gt;setNewItemText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleRemoveItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;newListItems&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;listItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;setListItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newListItems&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listItemComponents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;listItems&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;
        &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`item&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
          &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;`remove-item&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleRemoveItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Remove&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="nx"&gt;className&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;App-header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nx"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;counter-value&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; 
            &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleCounterClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Increment&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; 
            &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;handleCounterClick&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
            &lt;span class="nx"&gt;disabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Decrement&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;onSubmit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleAddItem&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt;
            &lt;span class="nx"&gt;htmlFor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nx"&gt;Create&lt;/span&gt; &lt;span class="nx"&gt;List&lt;/span&gt; &lt;span class="nx"&gt;Item&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; 
              &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;newItem&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
              &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;newItemText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
              &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleNewItemChange&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
            &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;testid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add-item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
            &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Add Item&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
          &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;listItemComponents&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;

      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/header&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;While this only scratches the surface of testing React components, I hope this serves as a primer for getting started with developing your own tests for you components. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  Resources:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/dsasse07/a-beginner-s-guide-to-unit-testing-with-jest-45cc"&gt;A Beginner's Guide to Unit-testing with Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.npmjs.com/package/@testing-library/jest-dom"&gt;Testing-Library/Jest-DOM Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://testing-library.com/docs/"&gt;Testing-Library/React Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dsasse07/jest-react-example"&gt;Blog Repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>react</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>useAsyncFunc: React hook for any async function</title>
      <author>Kevin White</author>
      <pubDate>Thu, 13 May 2021 17:06:56 +0000</pubDate>
      <link>https://dev.to/kwhitejr/useasyncfunc-react-hook-for-any-async-function-587p</link>
      <guid>https://dev.to/kwhitejr/useasyncfunc-react-hook-for-any-async-function-587p</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/kwhitejr/use-async-func"&gt;Source code&lt;/a&gt; and demo for generic async operation React hook. &lt;a href="https://codesandbox.io/s/silent-smoke-nrruh"&gt;Live example&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Want to suggest an improvement? I'm all ears! Please file an issue or open a PR!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useAsyncFunc&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;useAsyncFunc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;myAsyncFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do work&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="nx"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;setArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAsyncFn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myAsyncFunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstArg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;secondArg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isLoading&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;LoadingIcon&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;isError&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ErrorMsg&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;This &lt;code&gt;useAsyncFunc&lt;/code&gt; React hook stands on the shoulders of giants. &lt;a href="https://www.robinwieruch.de/"&gt;Robin Wieruch&lt;/a&gt;'s excellent &lt;a href="https://www.robinwieruch.de/react-hooks-fetch-data"&gt;&lt;em&gt;How to fetch data with React Hooks&lt;/em&gt;&lt;/a&gt; walks you step-by-step through the creation of a robust &lt;code&gt;useDataApi&lt;/code&gt; hook, which provides an exhaustively capable data fetching hook.&lt;/p&gt;

&lt;p&gt;The purpose of this post is to further build on that work by genericizing it to run any async function (and not just &lt;code&gt;fetch(myUrl)&lt;/code&gt;).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useasyncfunc"&gt;
  &lt;/a&gt;
  useAsyncFunc
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @param {function} fn   - The asynchronous function to be called
 * @param {Array} fnArgs  - Optionally, the arguments to be passed to `fn`, expressed as an array
 * @param {*} initialData - Optionally, default value(s) to returned as `data`
 * @returns {[state, setArgs]}
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useAsyncFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fnArgs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;initialData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="c1"&gt;// useState manages the async func arguments.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setArgs&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fnArgs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// useReducer manages the local complex state of the async func hook's lifecycle.&lt;/span&gt;
  &lt;span class="c1"&gt;// See the source code for the full reducer!&lt;/span&gt;
  &lt;span class="c1"&gt;// NOTE: it'd be easy to modify the reducer to fit your needs.&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useReducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;asyncReducer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;isLoading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;initialData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;didCancel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;callAsyncFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Begin each async func call with a clean slate.&lt;/span&gt;
      &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ASYNC_INIT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

      &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Because this is a generic hook for any async func,&lt;/span&gt;
        &lt;span class="c1"&gt;// simply call the function with the args!&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// Set success with result&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;didCancel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ASYNC_SUCCESS&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Otherwise, set failure&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;didCancel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ASYNC_FAILURE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// Actual invocation&lt;/span&gt;
    &lt;span class="nx"&gt;callAsyncFn&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="c1"&gt;// Cleanup function to optionally prevent setting state for unmounted component.&lt;/span&gt;
    &lt;span class="c1"&gt;// Ref: https://reactjs.org/docs/hooks-effect.html#example-using-hooks-1&lt;/span&gt;
    &lt;span class="c1"&gt;// Ref: https://www.robinwieruch.de/react-warning-cant-call-setstate-on-an-unmounted-component&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;didCancel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="c1"&gt;// useEffect will consider `fn` and `args` when deciding whether to skip a re-render.&lt;/span&gt;
    &lt;span class="c1"&gt;// In short, skip re-render if `fn` or `args` do not change.&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// `state` provides the status updates: { isLoading, isError, data }&lt;/span&gt;
  &lt;span class="c1"&gt;// `setArgs` allows you to update the arguments passed to the async func&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setArgs&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Really, that is it! Again, this is a slight modification to genericize Robin Wieruch's already-thorough &lt;code&gt;useDataApi()&lt;/code&gt; hook. My other small contribution is a basic test suite. Enjoy!&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Ignite — React Native Boilerplate</title>
      <author>kpiteng</author>
      <pubDate>Thu, 13 May 2021 16:39:24 +0000</pubDate>
      <link>https://dev.to/kpiteng/ignite-react-native-boilerplate-37po</link>
      <guid>https://dev.to/kpiteng/ignite-react-native-boilerplate-37po</guid>
      <description>&lt;p&gt;Discover Ignite — React Native Boilerplate for Expo &amp;amp; React Native, explore pre-setup libraries like React Navigation, MobX, APISauce, Flipper, Reactotron, i18N-js Localisation, Themes and many more.&lt;/p&gt;

&lt;p&gt;Quick Highlights — Ignite is popular React Native Boilerplate for Expo &amp;amp; React Native. Ignite saved two to four weeks time of React Native project creation, project setup, required dependency installation like Navigation, MobX, API Call, Utility and many more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ignite-boilerplate-includes-"&gt;
  &lt;/a&gt;
  Ignite — Boilerplate Includes -
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;React Navigation (Native)&lt;/li&gt;
&lt;li&gt;MobX State Tree (State Management)&lt;/li&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;li&gt;APISauce (REST API Interaction)&lt;/li&gt;
&lt;li&gt;Storybook&lt;/li&gt;
&lt;li&gt;i18N-JS Localisation&lt;/li&gt;
&lt;li&gt;Themes&lt;/li&gt;
&lt;li&gt;Reactotron Ready&lt;/li&gt;
&lt;li&gt;Flipper&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#take-away-"&gt;
  &lt;/a&gt;
  Take away -
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is React Native Navigation?&lt;/li&gt;
&lt;li&gt;What is MobX — MobX State Tree?&lt;/li&gt;
&lt;li&gt;What is TypeScript in React Native?&lt;/li&gt;
&lt;li&gt;What is APISauce in React Native?&lt;/li&gt;
&lt;li&gt;What is Flipper in React Native?&lt;/li&gt;
&lt;li&gt;What is Storybook in React Native?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#create-app-with-ignite-boilerplate-"&gt;
  &lt;/a&gt;
  Create App With Ignite Boilerplate —
&lt;/h2&gt;

&lt;p&gt;Create React Native App with Ignite is quite simple&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# for vanilla React Native
npx ignite-cli new PizzaApp

# or for Expo-powered:
npx ignite-cli new PizzaApp --expo
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ignite-boilerplate-folder-hierarchy-"&gt;
  &lt;/a&gt;
  Ignite Boilerplate — Folder Hierarchy —
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ignite-project
├── android (if not Expo)
├── ios (if not Expo)
├── app
│   ├── components
│   ├── i18n
│   ├── models
│   ├── navigators
│   ├── screens
│   ├── services
│   ├── theme
│   ├── utils
│   ├── app.tsx
|   ├── assets/fonts/
├── storybook
│   ├── views
│   ├── index.ts
│   ├── storybook-registry.ts
│   ├── storybook.ts
├── test
│   ├── __snapshots__
│   ├── storyshots.test.ts.snap
│   ├── mock-i18n.ts
│   ├── mock-reactotron.ts
│   ├── setup.ts
│   ├── storyshots.test.ts
├── e2e
│   └── config.json
├── ignite
│   └── templates
├── index.js
├── package.json
└── README.md
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#react-navigation-"&gt;
  &lt;/a&gt;
  React Navigation —
&lt;/h2&gt;

&lt;p&gt;React Navigation is popular library for Navigating between multiple components. React Navigation manage your application navigational stack. React Navigation has three libraries StackNavigator, Drawer Navigator, TabNavigator.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# npm 

npm install @react-navigation/native
npm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;StackNavigator&lt;/strong&gt; - Use while navigating from one component to another component. You can use push, pop, goBack, many more actions while you want navigation functionality between screens.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Drawer Navigator&lt;/strong&gt; - Drawer Navigator helps while you have multiple menu on side menu and each menu has multiple screens. So you can shift all your main menus into Drawer and press on any Drawer Option it will open specific screen/component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tab Navigator&lt;/strong&gt; - Tab Navigator helps while you want to give multiple menu option at bottom and each menu has multiple screens. Each Bottom Menu option has specific screen/component.&lt;/p&gt;

&lt;p&gt;You can do additional steps over here, Instead of giving Component/Screen to specific TabNavigator option, you can assign StackNavigator so you can manage your state of each TabNavigator option independently. Advantage of doing this, if you traverse 1..3 Screen in TabNavigatorMenuOption1, and you change to TabNavigatorMenuOption2 and traverse to 1…5 Screen and go back to TabNavigatorMenuOption1 then you can see 3 Screen which you left in TabNavigatorMenuOption1, instead of Starting from Screen1.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mobx-state-tree-"&gt;
  &lt;/a&gt;
  MobX State Tree —
&lt;/h2&gt;

&lt;p&gt;MobX is a popular state management library in React Native. MobX store feature allow to save, update and restore application state that uses by react component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// import observable from mobx
import { observable } from "mobx";

//create a store with count observable
class Store {
  @observable
  count = 0;
}

//export Store
export default new Store();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Typescript —&lt;br&gt;
Typescript is widely used programming language next to Javascript. Many of popular libraries are now available in Typescript because of simplified experience of type checking, error checking before developer run the code and help to reduce the code errors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i18n-react-native-localisation-"&gt;
  &lt;/a&gt;
  i18N, React Native Localisation —
&lt;/h2&gt;

&lt;p&gt;i18n-js is popular localisation library with various features like, Pluralization, Date/Time localisation, Number Localisation, Local fallback, Asset pipeline support and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#apisauce-"&gt;
  &lt;/a&gt;
  APISauce —
&lt;/h2&gt;

&lt;p&gt;APISauce is a JavaScript library for REST API Integration. Ignite has well-framed structure for APISauce. Ignite Boilerplate simplified API Call by dividing business logic among multiple files.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api-config.js&lt;/strong&gt; This file contain BaseURL definition, APIConfig Interface and Export Of API Configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api-problem.js&lt;/strong&gt; This file contain code logic for various errors management along with custom messages, like 401, 402, 404. You can also customised according your need and set error message accordingly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api.ts&lt;/strong&gt; This file contain apisauce instance setup, apiconfig and business login for API Call. You can create multiple various of same file as per your modules, like Home, Settings, Menu, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;api.types.ts&lt;/strong&gt; This file contain List of interface used by various modules for API call. This will help developers to define api response along with data types at central place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#theme-fonts-color-"&gt;
  &lt;/a&gt;
  Theme | Fonts | Color —
&lt;/h2&gt;

&lt;p&gt;This folder hierarchy contain common initialisation for color, spacing, timing, fonts and all. You can create your own file for common theme related constants.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#storybook-"&gt;
  &lt;/a&gt;
  Storybook —
&lt;/h2&gt;

&lt;p&gt;Storybook is a tool for UI development. It makes development faster and easier by isolating components. This allows you to work on one component at a time. You can develop entire UIs without needing to start up a complex dev stack, force certain data into your database, or navigate around your application.&lt;/p&gt;

&lt;p&gt;Connect Us —&lt;br&gt;
KPITENG - DIGITAL TRANSFORMATION&lt;br&gt;
&lt;a href="//www.kpiteng.com"&gt;www.kpiteng.com&lt;/a&gt; | &lt;a href="mailto:hello@kpiteng.com"&gt;hello@kpiteng.com&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/kpiteng"&gt;Facebook&lt;/a&gt; | &lt;a href="https://www.linkedin.com/company/kpiteng"&gt;Linkedin&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reactnative</category>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Why C++ is most preferred for competitive programming?</title>
      <author>Rishabh Dwivedi</author>
      <pubDate>Thu, 13 May 2021 16:27:16 +0000</pubDate>
      <link>https://dev.to/rishabh062/why-c-is-most-preferred-for-competitive-programming-8nk</link>
      <guid>https://dev.to/rishabh062/why-c-is-most-preferred-for-competitive-programming-8nk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#competitive-coding-is-like-a-mind-sport-where-you-run-your-brain-and-apply-logic-for-solving-questions"&gt;
  &lt;/a&gt;
  Competitive coding is like a mind sport where you run your brain and apply logic for solving questions.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;But I guess you always struck with a questions that why maximum programmers preferred &lt;em&gt;C++&lt;/em&gt; for doing so&lt;/strong&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vF3H5p6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a0vnuw8ozrd6i7zvdrt.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vF3H5p6M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a0vnuw8ozrd6i7zvdrt.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#here-are-the-reasons"&gt;
  &lt;/a&gt;
  Here are the reasons.
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It offers a library called STL (Standard Template Library). STL is a collection of C++ template classes that provides common data structures and functions.&lt;/li&gt;
&lt;li&gt;C++ is a Object Oriented Programming language as well as Procedural Oriented Programming language. Which make it so easy to use on given conditions. &lt;/li&gt;
&lt;li&gt;C++ is little faster as compare to others languages like &lt;strong&gt;Python&lt;/strong&gt; or &lt;strong&gt;Java&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Writing functions in C++ is more easy and efficient as compare to java , while writing functions in Python is also efficient but major factor to analyse is speed.&lt;/li&gt;
&lt;li&gt;Implementing &lt;em&gt;Data structures&lt;/em&gt; is quite easy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#c-is-totally-a-beginner-friendly-language-which-seems-to-be-very-addictive-once-you-fall-in-love-with-it"&gt;
  &lt;/a&gt;
  C++ is totally a beginner friendly language which seems to be very addictive once you fall in love with it.
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#thats-a-short-introduction-about-it-hope-you-find-it-useful"&gt;
  &lt;/a&gt;
  That's a short introduction about it hope you find it useful.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Rishabh Dwivedi&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;3 star codechef.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>watercooler</category>
      <category>computerscience</category>
      <category>programming</category>
    </item>
    <item>
      <title>Why Vercel &amp; Next are a dream team</title>
      <author>Nine</author>
      <pubDate>Thu, 13 May 2021 16:15:19 +0000</pubDate>
      <link>https://dev.to/codesnine/vercel-next-h4f</link>
      <guid>https://dev.to/codesnine/vercel-next-h4f</guid>
      <description>&lt;h4&gt;
  &lt;a href="#what-is-vercel"&gt;
  &lt;/a&gt;
  What is Vercel?
&lt;/h4&gt;

&lt;p&gt;​Vercel is a deployment and collaboration platform &lt;strong&gt;for frontend developers&lt;/strong&gt;. ​Vercel puts the frontend developer first, giving them comprehensive tools to build high-performance websites and applications.&lt;/p&gt;

&lt;p&gt;​Vercel enables developers to host websites and web services that deploy instantly and scale automatically – all without any configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3r02hPzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tqlohxn9ji79m706w5j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3r02hPzs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2tqlohxn9ji79m706w5j.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-is-nextjs"&gt;
  &lt;/a&gt;
  What is NextJS?
&lt;/h4&gt;

&lt;p&gt;Next is a React Framework that gives you the best developer experience with all the features you need for production: hybrid static &amp;amp; server rendering, TypeScript support, smart bundling, route pre-fetching, and more. No config needed.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sRuFCF2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l2uny3q0ij34nyd6ebb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sRuFCF2n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6l2uny3q0ij34nyd6ebb.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#next-and-vercel-the-incredible-duo"&gt;
  &lt;/a&gt;
  Next and Vercel - The Incredible Duo
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The Easiest Way to Deploy Next.js Apps&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vercel, built by the same team that made Next.js, provides production-grade hosting for Next.js websites with zero configuration.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After experiencing how easy it is to get up and running with these two well integrated, the developer can get a continuous deployment setup with a repo as easy as with a few clicks on the screen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It gives us a vast amount of templates to choose from directly from the &lt;a href="https://vercel.com/new/templates"&gt;Vercel&lt;/a&gt; page such as:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6zz4sT2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsr1chcm7xgew2vhybuz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6zz4sT2T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fsr1chcm7xgew2vhybuz.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is one of the most pleasant development experiences I have had so far. Bought a domain through their site for 20$ easily set it up and had a running homepage in one minute with continuous deployment when I push a change to the selected branch.&lt;/p&gt;

&lt;p&gt;I have to say using these two together has shown me how fun sometimes development can be when you get to choose the tools you wanna use and you get that AHA moment that you found your stack.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h4&gt;

&lt;p&gt;I am still new to this platform but I am keen and happy to explore it, thinking about what great apps I can build with such a great developer experience. &lt;/p&gt;

&lt;p&gt;If someone has any tips for me concerning these two let me know in the comments below.&lt;/p&gt;

&lt;p&gt;Follow me on Twitter at &lt;a href="https://twitter.com/CodesNine"&gt;@CodesNine&lt;/a&gt; and on Instagram at &lt;a href="https://www.instagram.com/nine_codes"&gt;@nine_codes&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>vercel</category>
      <category>javascript</category>
      <category>react</category>
    </item>
  </channel>
</rss>
