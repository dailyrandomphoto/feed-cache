<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Top 5 Technologies You Must Know in 2022</title>
      <author>virender</author>
      <pubDate>Thu, 06 Jan 2022 14:52:23 +0000</pubDate>
      <link>https://dev.to/virendebro/top-5-technologies-you-must-know-in-2022-1j1d</link>
      <guid>https://dev.to/virendebro/top-5-technologies-you-must-know-in-2022-1j1d</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 5 Technologies You Must Know in 2022&lt;/strong&gt;&lt;br&gt;
In this blog, i have discussed about Top 5 Technologies to know in 2022. Most Popular Technologies to Learn in 2022.&lt;/p&gt;

&lt;p&gt;1: Artificial Intelligence&lt;br&gt;
2: 5G Network Technology&lt;br&gt;
3: Blockchain&lt;br&gt;
4: AR &amp;amp; VR&lt;br&gt;
5: Cyber Security&lt;/p&gt;

&lt;p&gt;To read the full blog, click on the link above or search my website (&lt;strong&gt;CodesAshish&lt;/strong&gt;) on Google. I use to upload blogs related to programming and coding on my website. So Please visit once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thankyou&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>ai</category>
      <category>machinelearning</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>VSCode Datree: Datree's power now in your code editor 💪</title>
      <author>Suyash Sonawane</author>
      <pubDate>Thu, 06 Jan 2022 14:48:22 +0000</pubDate>
      <link>https://dev.to/suyashsonawane/vscode-datree-datrees-power-now-in-your-code-editor-4ol2</link>
      <guid>https://dev.to/suyashsonawane/vscode-datree-datrees-power-now-in-your-code-editor-4ol2</guid>
      <description>&lt;h1&gt;
  &lt;a href="#whats-in-this-article"&gt;
  &lt;/a&gt;
  What’s in this article?
&lt;/h1&gt;

&lt;p&gt;VSCode Datree  —  a VSCode Extension that brings &lt;a href="https://www.datree.io/?utm_source=suyash+sonawane&amp;amp;utm_medium=Medium+com&amp;amp;utm_campaign=VSCode+Datree%3A+Datree%E2%80%99s+power+now+in+your+code+editor&amp;amp;utm_id=Datree"&gt;Datree’s&lt;/a&gt; features right inside your code editor 🚀&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YhnStASi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYap8sVqvwQbrH3WXStqD3g.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YhnStASi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYap8sVqvwQbrH3WXStqD3g.gif" alt="Devs after installing VSCode Datree" width="498" height="202"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;p&gt;Improper Kubernetes configurations can lead to ineffective and hard-to-maintain resource allocations, in worst cases it can break the whole CI/CD if not detected in earlier stages of deployment. The VSCode Datree extension uses Datree under the hood to gather information about the YAML and Helm configurations and generate errors and suggestions that can be displayed right inside the code editor for the developer to act upon, as the Datree CLI currently doesn’t show the line number where the error is occurring this can help developers to find errors easily in large configurations. This open-source extension extends Datree’s functionality by allowing users to use custom policies made with Datree and use them directly through VSCode.&lt;br&gt;
The extension also simplifies it for the developer to correct the errors during the development phase rather than waiting for warnings later during the CI/CD pipelines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-datree"&gt;
  &lt;/a&gt;
  What’s Datree?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;h1&gt;
  &lt;a href="#prevent-kubernetes-misconfigurations-from-reaching-production-again-"&gt;
  &lt;/a&gt;
  Prevent Kubernetes misconfigurations from reaching production (again 😤 )!
&lt;/h1&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Datree&lt;/strong&gt; helps us tackle misconfigurations easily with the command-line tool that can be easily integrated into existing CI/CD pipelines and warns us before any  misconfigured resources get deployed to production. It can also assist during the development phase by warning about possible incorrect values much earlier in the first place to increase the overall efficiency.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installing-vscode-datree"&gt;
  &lt;/a&gt;
  Installing VSCode Datree
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Datree needs to be installed for the extension to work, get it here 👇&lt;a href="https://hub.datree.io/?utm_source=suyash+sonawane&amp;amp;utm_medium=Medium+com&amp;amp;utm_campaign=VSCode+Datree%3A+Datree%E2%80%99s+power+now+in+your+code+editor&amp;amp;utm_id=Datree"&gt;https://hub.datree.io/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The extension can be installed directly through the extensions tab available in VSCode or through VSCode’s marketplace.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=suyashsonawane.vscode-datree"&gt;&lt;strong&gt;VSCode Datree - Visual Studio Marketplace&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QRkTVNCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AUPkkPN6VFb6zi9QHhVzpog.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QRkTVNCj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AUPkkPN6VFb6zi9QHhVzpog.gif" alt="Installing VSCode Datree" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#exploring-the-features"&gt;
  &lt;/a&gt;
  Exploring the features
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Highlighting YAML Errors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Highlighting K8s Schema Errors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Helm Workflow Support &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Custom Test Configurations&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solution Suggestions&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The extension incorporates different Datree features and provides added functionalities to the user. Let us discuss each of these features in detail and the datree commands they run under the hood.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-highlighting-yaml-errors"&gt;
  &lt;/a&gt;
  1. Highlighting YAML Errors
&lt;/h2&gt;

&lt;p&gt;This feature shows the issue in the YAML structure of the configuration file, this helps to ensure that a properly structured configuration file is fed during production to avoid silly delays.&lt;br&gt;
By default, Datree checks the YAML structure of the config file even before running the actual configuration checks.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ datree test config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HMEjo8RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ACfsOjJ5aKkeaNoUur3v5ng.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HMEjo8RK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2ACfsOjJ5aKkeaNoUur3v5ng.gif" alt="YAML Errors" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-highlighting-k8s-schema-errors"&gt;
  &lt;/a&gt;
  2. Highlighting K8s Schema Errors
&lt;/h2&gt;

&lt;p&gt;This is the feature where Datree and the extension shines. The configuration file is analysed for any misconfiguration and incorrect values, then problems are highlighted along with helpful suggestions.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ datree test config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i79YJdYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ahx6RA_kCMfFX8ViDKei7sw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i79YJdYd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ahx6RA_kCMfFX8ViDKei7sw.gif" alt="K8s Schema Error" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vzN-fwqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAa7m36SIbQMi3uLFlKAMcQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzN-fwqZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAa7m36SIbQMi3uLFlKAMcQ.gif" alt="Policy Errors" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-support-for-helm-workflows"&gt;
  &lt;/a&gt;
  3. Support for Helm Workflows
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Helm and Datree’s Helm Plugin is required, get it here 👇&lt;br&gt;
&lt;a href="https://hub.datree.io/helm-plugin?utm_source=suyash+sonawane&amp;amp;utm_medium=Medium+com&amp;amp;utm_campaign=VSCode+Datree%3A+Datree%E2%80%99s+power+now+in+your+code+editor&amp;amp;utm_id=Datree"&gt;https://hub.datree.io/helm-plugin&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When it comes to defining Kubernetes configuration for large applications, Helm Charts play an important role by reducing duplication &amp;amp; complexity and boosting productivity. Datree’s Helm Plugin allows you to run policy checks on Helm Charts with ease, the extension can also detect the Helm workflow and automatically run the required helm plugin.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ helm datree test [CHART_DIRECTORY]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GxfFq5T2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJeXsvnJ639y1ANfs_S_lcQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GxfFq5T2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AJeXsvnJ639y1ANfs_S_lcQ.gif" alt="Helm Charts" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-custom-test-configurations"&gt;
  &lt;/a&gt;
  4. Custom Test Configurations
&lt;/h2&gt;

&lt;p&gt;Datree CLI provides a couple of options such as mentioning K8s schema version, policies, etc. The extension enables you to harness these options through an options panel.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ datree test config.yaml --schema-version 1.18.0 --policy staging
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vtQh2s97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAQZDzPK4aWVfLd3BpCKihA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vtQh2s97--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AAQZDzPK4aWVfLd3BpCKihA.gif" alt="Custom Parameters" width="600" height="325"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-solution-suggestions"&gt;
  &lt;/a&gt;
  5. Solution Suggestions
&lt;/h2&gt;

&lt;p&gt;Datree has 30 built-in battle-tested policy checks, if your configuration has these errors, a link to the solution article will be linked along with the error highlight.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--doJ8NTAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYjLYl2isSEA7SWAf0uAZcA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--doJ8NTAP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AYjLYl2isSEA7SWAf0uAZcA.gif" alt="Suggesting Solutions" width="600" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#future-scope"&gt;
  &lt;/a&gt;
  Future Scope
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linking Execution history &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved Error Highlighting&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As this extension is actively maintained, new features that are added to Datree CLI will be made available in the extension as well!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Being an Opensource project, if you find any issues, bugs, or have any suggestions feel free to contribute 🙌&lt;br&gt;
&lt;a href="https://github.com/SuyashSonawane/vscode-datree"&gt;&lt;strong&gt;GitHub - SuyashSonawane/vscode-datree: Simple VSCode Extension that allows you to run Datree tests…&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#pretext"&gt;
  &lt;/a&gt;
  Pretext
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Here I share the idea behind the extension and how it was created!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This extension is built for Datree as a part of the &lt;a href="https://cloudnativehack21.devpost.com/"&gt;Cloud Native Hackathon&lt;/a&gt;.&lt;br&gt;
Datree is a CLI tool that allows the rectification of K8s configuration files with ease and zero dependencies. While researching the possible use case for the hackathon I came across an idea about a VSCode extension that can show errors directly in the editor and to my surprise there was no existing solution to this!! , I always wanted to make a VSCode extension and now it was the perfect opportunity.&lt;/p&gt;

&lt;p&gt;First, I started with parsing the CLI’s output with its JSON output format, faced some issues with the structure, and contacted datree support for assistance, I came to know that there was already an issue that addressed this and &lt;a href="https://github.com/eyarz"&gt;Eyar Zilberman&lt;/a&gt; provided me with some ideas and a video that link that suggests such VSCode extension. I was very much pumped at this point and worked with full force to make it into a reality.&lt;/p&gt;

&lt;p&gt;VSCode has a very extensive API when it comes to developing extensions. I got the opportunity to learn and understand the logic that goes behind building such extensions. I worked with reviews, child processes, providers, and typescript while building this extension and React.js for building the webviews.&lt;/p&gt;

&lt;p&gt;I periodically updated the datree team with my progress and they were kind enough to solve my doubts and suggest improvements and features. &lt;a href="https://github.com/shimont"&gt;Shimon Tolts&lt;/a&gt; suggested adding Helm support and &lt;a href="https://github.com/dimabru"&gt;Dima Brusilovsky&lt;/a&gt; suggested having an interface where the user can provide custom configuration for the tests, thanks to them I was able to complete the first stable release of the extension.&lt;/p&gt;

&lt;p&gt;While working on this project I interacted with many hackers, solved their doubts, got some of the mine cleared, thanks to Community Classroom for making this happen&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#interested-to-know-more-about-me-heres-my-portfolio"&gt;
  &lt;/a&gt;
  Interested to know more about me, here’s my portfolio 🚀
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://suyashsonawane.me/"&gt;&lt;strong&gt;Portfolio | Suyash Sonawane&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thats-all-folks"&gt;
  &lt;/a&gt;
  That’s All Folks
&lt;/h1&gt;

&lt;p&gt;You can follow me on:&lt;br&gt;
Twitter: &lt;a href="https://twitter.com/SuyashYSonawane"&gt;Suyash Sonawane (@SuyashYSonawane) / Twitter&lt;/a&gt;&lt;br&gt;
LinkedIn: &lt;a href="https://www.linkedin.com/in/suyash-sonawane-44661417b/"&gt;Suyash Sonawane | LinkedIn&lt;/a&gt;&lt;br&gt;
Github: &lt;a href="https://github.com/SuyashSonawane"&gt;SuyashSonawane (Suyash Sonawane)&lt;/a&gt;&lt;/p&gt;

</description>
      <category>kubernetes</category>
      <category>vscode</category>
      <category>datree</category>
    </item>
    <item>
      <title>Koa vs Express</title>
      <author>Eugene Kopich</author>
      <pubDate>Thu, 06 Jan 2022 14:41:59 +0000</pubDate>
      <link>https://dev.to/web2033/koa-vs-express-3em1</link>
      <guid>https://dev.to/web2033/koa-vs-express-3em1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#koa-vs-express"&gt;
  &lt;/a&gt;
  Koa vs Express
&lt;/h2&gt;

&lt;p&gt;Philosophically, &lt;a href="https://github.com/koajs/koa"&gt;Koa&lt;/a&gt; aims to "fix and replace node", whereas &lt;a href="https://github.com/expressjs/express"&gt;Express&lt;/a&gt; "augments node". Koa uses promises and async functions to rid apps of callback hell and simplify error handling. It exposes its own &lt;code&gt;ctx.request&lt;/code&gt; and &lt;code&gt;ctx.response&lt;/code&gt; objects instead of node's &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;Express, on the other hand, augments node's &lt;code&gt;req&lt;/code&gt; and &lt;code&gt;res&lt;/code&gt; objects with additional properties and methods and includes many other "framework" features, such as routing and templating, which Koa does not.&lt;/p&gt;

&lt;p&gt;Thus, Koa can be viewed as an abstraction of node.js's &lt;code&gt;http&lt;/code&gt; modules, where as Express is an application framework for node.js.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;Koa&lt;/th&gt;
&lt;th&gt;Express&lt;/th&gt;
&lt;th&gt;Connect&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Middleware Kernel&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Routing&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Templating&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sending Files&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JSONP&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;✓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Thus, if you'd like to be closer to node.js and traditional node.js-style coding, you probably want to stick to Connect/Express or similar frameworks. If you want to get rid of callbacks, use Koa.&lt;/p&gt;

&lt;p&gt;As result of this different philosophy is that traditional node.js "middleware", i.e. functions of the form &lt;code&gt;(req, res, next)&lt;/code&gt;, are incompatible with Koa. Your application will essentially have to be rewritten from the ground, up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-koa-replace-express"&gt;
  &lt;/a&gt;
  Does Koa replace Express?
&lt;/h2&gt;

&lt;p&gt;It's more like Connect, but a lot of the Express goodies were moved to the middleware level in Koa to help form a stronger foundation. This makes middleware more enjoyable and less error-prone to write, for the entire stack, not just the end application code.&lt;/p&gt;

&lt;p&gt;Typically many middleware would re-implement similar features, or even worse incorrectly implement them, when features like signed cookie secrets among others are typically application-specific, not middleware specific.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#does-koa-replace-connect"&gt;
  &lt;/a&gt;
  Does Koa replace Connect?
&lt;/h2&gt;

&lt;p&gt;No, just a different take on similar functionality now that generators allow us to write code with less callbacks. Connect is equally capable, and some may still prefer it, it's up to what you prefer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-isnt-koa-just-express-40"&gt;
  &lt;/a&gt;
  Why isn't Koa just Express 4.0?
&lt;/h2&gt;

&lt;p&gt;Koa is a pretty large departure from what people know about Express, the design is fundamentally much different, so the migration from Express 3.0 to this Express 4.0 would effectively mean rewriting the entire application, so we thought it would be more appropriate to create a new library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-koa-different-than-connectexpress"&gt;
  &lt;/a&gt;
  How is Koa different than Connect/Express?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#promisesbased-control-flow"&gt;
  &lt;/a&gt;
  Promises-based control flow
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;No callback hell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better error handling through try/catch.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No need for domains.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#koa-is-barebones"&gt;
  &lt;/a&gt;
  Koa is barebones
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Unlike both Connect and Express, Koa does not include any middleware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike Express, routing is not provided.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unlike Express, many convenience utilities are not provided. For example, sending files.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Koa is more modular.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#koa-relies-less-on-middleware"&gt;
  &lt;/a&gt;
  Koa relies less on middleware
&lt;/h3&gt;

&lt;p&gt;For example, instead of a "body parsing" middleware, you would instead use a body parsing function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#koa-abstracts-nodes-requestresponse"&gt;
  &lt;/a&gt;
  Koa abstracts node's request/response
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Less hackery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better user experience.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Proper stream handling.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#koa-routing-third-party-libraries-support"&gt;
  &lt;/a&gt;
  Koa routing (third party libraries support)
&lt;/h3&gt;

&lt;p&gt;Since Express comes with its own routing, but Koa does not have&lt;br&gt;
any in-built routing, there are third party libraries available such as koa-router and koa-route. Similarly, just like we have helmet for security in Express, for Koa we have koa-helmet available and the list goes on for Koa available third party libraries.&lt;/p&gt;

</description>
      <category>koa</category>
      <category>express</category>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to use Python with Notion API</title>
      <author>Mihai-Adrian Andrei</author>
      <pubDate>Thu, 06 Jan 2022 14:31:36 +0000</pubDate>
      <link>https://dev.to/mihaiandrei97/how-to-use-python-with-notion-api-1n61</link>
      <guid>https://dev.to/mihaiandrei97/how-to-use-python-with-notion-api-1n61</guid>
      <description>&lt;p&gt;Everybody uses Notion. And why not? It is an awesome tool. But what if you want to also add it to some of your apps? It seems you can now do it by using the Notion API and I will show how you can integrate it using Python.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#notion-setup"&gt;
  &lt;/a&gt;
  Notion setup
&lt;/h2&gt;

&lt;p&gt;First, you need to create a page that contains a database in Notion. In this example, we are going to make one that contains 3 fields: &lt;code&gt;name, genre, and completed&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j8IqNs9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454499743/26O5x4__I.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j8IqNs9i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454499743/26O5x4__I.png" alt="image.png" width="880" height="248"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to have access to this page inside Python, we need to create an integration for it. For that, you can go to &lt;code&gt;Settings =&amp;gt; Integrations =&amp;gt; Develop your own integrations&lt;/code&gt;. After that, you specify a name for your integration and click submit. In the end, you will get to this screen:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SpCgyxXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454720564/wHtL1V_hv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SpCgyxXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454720564/wHtL1V_hv.png" alt="image.png" width="880" height="505"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see in the photo, you now have a secret key. Copy that because we will need it in our Python program.&lt;/p&gt;

&lt;p&gt;We need to do 2 more steps in Notion before starting to write some code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need to go on the notion page, click the &lt;code&gt;Share&lt;/code&gt; button, press &lt;code&gt;Invite&lt;/code&gt;, and then you can select the integration that you just created from a list:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0BiWsb-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454890420/AWKuYAkLc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0BiWsb-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641454890420/AWKuYAkLc.png" alt="image.png" width="789" height="423"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;With the page opened in your browser, you will need a database id. Let's say the link is the following one: &lt;code&gt;https://www.notion.so/19f00145217c4437afb06cfdbb2ad994?v=51972570a71c4b8b9b1feeec01e87eb5&lt;/code&gt;. The database id is &lt;code&gt;19f00145217c4437afb06cfdbb2ad994&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#python-setup"&gt;
  &lt;/a&gt;
  Python Setup
&lt;/h2&gt;

&lt;p&gt;First, we import the requests library that we are going to use to interact with the Notion API. Then, we store the secret and database_id from the notion setup.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'secret_from_notion_integration'&lt;/span&gt;
&lt;span class="n"&gt;database_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'database_id_from_link'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we will use the requests library to interact with the Notion API.&lt;/p&gt;

&lt;p&gt;The first function we are going to create is &lt;code&gt;getMovies&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/databases/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;database_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/query'&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="n"&gt;result_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;movie_list_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'results'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_list_result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, if you add a movie in Notion, and you call this function, you will see a lot of data. In order to make it more readeble and use only the information we need, we will make a helper function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="c1"&gt;# you can print result here and check the format of the answer.
&lt;/span&gt;  &lt;span class="n"&gt;movie_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;properties&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'properties'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;genre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Genre'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'rich_text'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Name'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'title'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'content'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;completed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Completed'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;'checkbox'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'genre'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'completed'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'movie_id'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie_id&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And call it inside &lt;code&gt;getMovies&lt;/code&gt;. The function should contain the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/databases/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;database_id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;/query'&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="n"&gt;result_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="n"&gt;movie_list_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;result_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'results'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;movie_list_result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="n"&gt;movie_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movie_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movies&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example of usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;movies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getMovies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# json.dumps is used to pretty print a dictionary 
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Movie list:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use this function to display your movies inside Python. Pretty cool, right 😁 ?&lt;/p&gt;

&lt;p&gt;The next function we are going to implement is &lt;code&gt;createMovie&lt;/code&gt;. For this one, we will need to construct a payload similar to the response from &lt;code&gt;getMovies&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/pages'&lt;/span&gt;

  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"database_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;database_id&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Genre"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"rich_text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;genre&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;completed&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;createdMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;createMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Movie1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Genre1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Created Movie:'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;createdMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you check Notion, you will see that a new entry in the table was created.🎉🎉🎉&lt;/p&gt;

&lt;p&gt;The update function is pretty similar to the create one. The major difference is that we need to also take into consideration a &lt;code&gt;movieId&lt;/code&gt;.  We create the payload in a similar way, but we also add the &lt;code&gt;movieId&lt;/code&gt; in the URL.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;updateMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/pages/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="s"&gt;"Name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Genre"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"rich_text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'genre'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="s"&gt;"Completed"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"checkbox"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'completed'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="n"&gt;movie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapNotionResultToMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;movie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to use this function, you first need to call &lt;code&gt;getMovies()&lt;/code&gt;. In that response, you can get a &lt;code&gt;movieId&lt;/code&gt; (in the ex: &lt;code&gt;fdd0fa87-4729-43e6-ae3f-823d48b382ee&lt;/code&gt;) and use it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;updatedMovie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;updateMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'fdd0fa87-4729-43e6-ae3f-823d48b382ee'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'UpdatedMovie1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;'genre'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'UpdatedGenre1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;'completed'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Update movie'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updatedMovie&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last function that we are going to create is &lt;code&gt;deleteMovie&lt;/code&gt;. In Notion, pages are using a property called &lt;code&gt;archived&lt;/code&gt;. If we set that to true, then the page will be deleted. So, this function will use the update endpoint in order to change the value of the 'archived' boolean.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;deleteMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'https://api.notion.com/v1/pages/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;movieId&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

  &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"archived"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"Authorization"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Bearer &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Notion-Version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"2021-08-16"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"Content-Type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"application/json"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, you can use it with a &lt;code&gt;movieId&lt;/code&gt; and if you check the database in Notion, that specific row will be deleted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;deleteMovie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'a19e538d-10cc-40ec-91bb-f7237c93e428'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It is easier to interact with Notion from JavaScript because they provide a client, and in Python, we don't have one, but that shouldn't stop you to use it😁.&lt;/p&gt;

</description>
      <category>python</category>
      <category>notion</category>
    </item>
    <item>
      <title>Case Study - Lunacy</title>
      <author>Dan Walmsley</author>
      <pubDate>Thu, 06 Jan 2022 14:30:00 +0000</pubDate>
      <link>https://dev.to/avalonia/case-study-lunacy-2fg9</link>
      <guid>https://dev.to/avalonia/case-study-lunacy-2fg9</guid>
      <description>&lt;p&gt;We interviewed Sergey Mikolaitis from &lt;a href="https://icons8.com/lunacy"&gt;icons8&lt;/a&gt;. Sergey and his team have recently released a fantastic design application called Lunacy.&lt;/p&gt;

&lt;p&gt;Lunacy is a truly cross platform graphic design tool powered by Avalonia.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-you-discover-avalonia"&gt;
  &lt;/a&gt;
  How did you discover Avalonia?
&lt;/h2&gt;

&lt;p&gt;I had seen Nikita Tsukanov give talks at conferences and on &lt;a href="https://www.youtube.com/watch?v=8qzqweimcFs"&gt;Youtube (Russian)&lt;/a&gt; back in the early days. It seemed like an interesting project but I didnt imagine how serious the team was about the platform and what it has now become, a serious player in the cross platform UI space.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-were-the-reasons-to-choose-avalonia"&gt;
  &lt;/a&gt;
  What were the reasons to choose Avalonia?
&lt;/h2&gt;

&lt;p&gt;We had been using WPF and our application was tied to just Windows.&lt;/p&gt;

&lt;p&gt;The newer replacements to WPF (UWP and Xamarin) were not able to offer us the flexibility that we needed for a content creation application.&lt;/p&gt;

&lt;p&gt;We had our eye on Avalonia for along time and we saw that it is a robust platform with a huge and active community behind it.&lt;/p&gt;

&lt;p&gt;Once Avalonia became stable enough we jumped at the opportunity to port our application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-was-your-experience-of-using-avalonia-and-porting-your-application"&gt;
  &lt;/a&gt;
  How was your experience of using Avalonia and porting your application?
&lt;/h2&gt;

&lt;p&gt;Initially there was a bit of a learning curve as with all new frameworks. Previously we had been focused on Windows only technologies so we had to start thinking about writing applications for cross platform, however since Avalonia is extremely similar to the likes of WPF and UWP we got up to speed quite quickly, we were able to re-use our existing knowledge and skills effectively.&lt;/p&gt;

&lt;p&gt;I believe the port would have taken us at least 3x longer if we had chosen a different framework.&lt;/p&gt;

&lt;p&gt;The biggest difference coming from WPF is the new CSS like styling system. Once we understood it however it was far more flexible and a joy to use.&lt;/p&gt;

&lt;p&gt;We see Avalonia as a "better WPF", its almost how you would make WPF if it was being designed today. There are many sensible improvements over WPF which save you a lot of time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#was-avalonia-missing-any-important-features-compared-to-wpf"&gt;
  &lt;/a&gt;
  Was Avalonia missing any important features compared to WPF?
&lt;/h2&gt;

&lt;p&gt;The only thing that was missing was IME support and right-to-left text support.&lt;/p&gt;

&lt;p&gt;Those however are actively being worked on and will soon be available.&lt;/p&gt;

&lt;p&gt;There were a few other very minor features that we were able to implement ourselves, we opened PRs and they were merged.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#was-it-important-that-avalonia-was-an-open-source-framework"&gt;
  &lt;/a&gt;
  Was it important that Avalonia was an open source framework?
&lt;/h2&gt;

&lt;p&gt;Not really but it became invaluable. The code quality of the framework is of a very high standard. This means the team were able to debug into Avalonia directly from the IDE and see nice clean and understandable code.&lt;/p&gt;

&lt;p&gt;Sometimes you could skip the documentation and have a quick peek at the code on GitHub to get the information you need. This is something you are usually scared to do with other large code bases.&lt;/p&gt;

&lt;p&gt;It also means when we find a bug or an issue, we are able to just fix it ourselves, we open a PR and it usually doesn't take long to have it merged.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-you-needed-help-where-did-you-find-it"&gt;
  &lt;/a&gt;
  When you needed help where did you find it?
&lt;/h2&gt;

&lt;p&gt;One of the best places for support was the community chat on Telegram.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://t.me/Avalonia"&gt;Telegram (EN)&lt;/a&gt;&lt;br&gt;
&lt;a href="https://t.me/AvaloniaRU"&gt;Telegram (RU)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We had a difficulty being able to submit our application to the Apple store. We chatted with members of the community and quickly found how to resolve it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-is-the-performance"&gt;
  &lt;/a&gt;
  How is the performance?
&lt;/h2&gt;

&lt;p&gt;The performance is excellent, our application is very graphical and we were able to make zooming, panning extremely smooth.&lt;/p&gt;

&lt;p&gt;We also know that the team are working to optimize Avalonia even further so its only getting better from here.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hasv24Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da6u77rn3i04b6pbl1dg.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hasv24Gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/da6u77rn3i04b6pbl1dg.jpg" alt="Image description" width="880" height="531"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://icons8.com/lunacy"&gt;Lunacy&lt;/a&gt; is available in the &lt;a href="https://apps.apple.com/app/id1582493835"&gt;Apple Store&lt;/a&gt; and &lt;a href="https://dev.toms-windows-store://pdp/?productid=9pnlmkkpcljj"&gt;Microsoft Store&lt;/a&gt;, visit their website to try out a real Avalonia application.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://icons8.com/lunacy"&gt;https://icons8.com/lunacy&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🎬Top 10 CSS &amp; JavaScript Projects🙌</title>
      <author>Robson Muniz</author>
      <pubDate>Thu, 06 Jan 2022 14:25:38 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/top-10-css-javascript-projects-1jk7</link>
      <guid>https://dev.to/robsonmuniz16/top-10-css-javascript-projects-1jk7</guid>
      <description>&lt;p&gt;&lt;strong&gt;Top 10 CSS &amp;amp; JavaScript Projects&lt;/strong&gt; that will help you test your knowledge and use muscle memory in creating them.&lt;/p&gt;




&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/xhaq1YhelIw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;We will see from the simple HTML (markup) as well as its presentation layer, adding beauty to your pages, going beyond that adding effects such as hover effects and others.&lt;/p&gt;

&lt;p&gt;Lastly we have more intermediate projects, we'll see how to manipulate CSS at our leisure using Javascript, making our sites really interactive.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Tech conferences list: how to find the next tech conference?</title>
      <author>Aurélie Vache</author>
      <pubDate>Thu, 06 Jan 2022 14:20:23 +0000</pubDate>
      <link>https://dev.to/aurelievache/tech-conferences-list-how-to-find-the-next-tech-conference-igc</link>
      <guid>https://dev.to/aurelievache/tech-conferences-list-how-to-find-the-next-tech-conference-igc</guid>
      <description>&lt;p&gt;As an organizer, speaker, attendee or sponsor, have you ever ask when and where the next tech conferences will be happen?&lt;br&gt;
And as a speaker maybe you want to submit your last talk, but where and when?&lt;/p&gt;

&lt;p&gt;In 2017, several years back!, I created a Git repository on GitHub titled &lt;a href="https://github.com/scraly/developers-conferences-agenda/"&gt;"Developers Conferences Agenda/List"&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/developers-conferences-agenda"&gt;
        developers-conferences-agenda
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This repository list a maximum of conferences's date in order to help conferences organizers &amp;amp; attendees
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#goal"&gt;
  &lt;/a&gt;
  Goal
&lt;/h2&gt;

&lt;p&gt;The goal of this repository was to: "list a maximum of conferences date in order to help conferences organizers/speakers/sponsors/attendees.&lt;/p&gt;

&lt;p&gt;As a conference organizer, we always ask us what will be the perfect date for the event?&lt;/p&gt;

&lt;p&gt;A data to take in account is the date of others events, but how to find this?&lt;/p&gt;

&lt;p&gt;As a developer, a technical lover, an attendee, we want to have a calendar, we want to know when will be the next event.&lt;/p&gt;

&lt;p&gt;And as a speaker, do you ask yourself what are the dates of the next CFP (Call For Paper)? What is the date and place of the next conferences?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHAHfTjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3kgr1k1okn9mb1wtoh4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHAHfTjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p3kgr1k1okn9mb1wtoh4.png" alt="CFP" width="880" height="282"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I propose to you this GitHub repository in order to list all conferences for developers in France, Europe and world."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-contribute"&gt;
  &lt;/a&gt;
  Want to contribute?
&lt;/h2&gt;

&lt;p&gt;I try to maintain and continually update this repository, but if you find any missing conferences you can easily contribute. Just add an event or your event. For that, just do a &lt;a href="https://github.com/scraly/developers-conferences-agenda/pulls"&gt;Pull Request (PR)&lt;/a&gt; in order to update this developers conferences agenda.&lt;/p&gt;

&lt;p&gt;If everybody contribute to this repository, it can really help conferences organizer. If they don't know your conference they can't buy a ticket and come to it 😏. It can also help sponsor: thanks to this tech conferences agenda, they can know which conferences to sponsor. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-repository"&gt;
  &lt;/a&gt;
  The repository
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/scraly"&gt;
        scraly
      &lt;/a&gt; / &lt;a href="https://github.com/scraly/developers-conferences-agenda"&gt;
        developers-conferences-agenda
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This repository list a maximum of conferences's date in order to help conferences organizers &amp;amp; attendees
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In order to help developers and tech lifetime it can be easy. No need to create the future Javascript framework, no need to understand all the concepts of Kubernetes and Docker.&lt;/p&gt;

&lt;p&gt;But the power is in your hands, you can add a star to this simple repository, share it, contribute it and create your own repositories and projects :-).&lt;/p&gt;

</description>
      <category>dev</category>
      <category>github</category>
    </item>
    <item>
      <title>Fixing Next.js router query param returning undefined on initial render
</title>
      <author>Deepankar Bhade</author>
      <pubDate>Thu, 06 Jan 2022 13:47:40 +0000</pubDate>
      <link>https://dev.to/deepcodes/fixing-nextjs-router-query-param-returning-undefined-on-initial-render-5f80</link>
      <guid>https://dev.to/deepcodes/fixing-nextjs-router-query-param-returning-undefined-on-initial-render-5f80</guid>
      <description>&lt;p&gt;While building a React application using next.js, I stumbled upon an issue that kept me stuck for a good amount of time. I don't want people to do the same therefore I would be covering the fix in this blog. Feel free to &lt;a href="#fix"&gt;skip to fix&lt;/a&gt; if you want to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;p&gt;First, let's just try to reproduce this issue. You might encounter some cases where you need access to query params of a route. Nextjs makes it easy to deal with routes by using the &lt;a href="https://nextjs.org/docs/api-reference/next/router"&gt;&lt;code&gt;useRouter&lt;/code&gt;&lt;/a&gt; hook. Here's an example code that you can place inside the &lt;code&gt;/pages&lt;/code&gt; directory to try it out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's visit the router with some param and see the logs. In my case, I visited &lt;code&gt;/test?name=Deepankar&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;{}&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;name: &lt;span class="s1"&gt;'Deepankar'&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in the 1st render we don't have the access to the param. So how do we know when the router fields are updated client-side and ready for use?. Now let's look into the fix.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fix"&gt;
  &lt;/a&gt;
  Fix
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;useRouter&lt;/code&gt; hook returns &lt;code&gt;isReady&lt;/code&gt; field which is a boolean value that denotes if the router fields are updated client-side and ready for use. Accessing &lt;code&gt;isReady&lt;/code&gt; field should be done inside of &lt;code&gt;useEffect&lt;/code&gt; methods and not for conditionally rendering on the server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight tsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;next/router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRouter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// Code using query&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;query&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isReady&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#reason"&gt;
  &lt;/a&gt;
  Reason
&lt;/h2&gt;

&lt;p&gt;Pages that are statically optimized by Automatic Static Optimization will be hydrated without their route parameters provided, i.e &lt;code&gt;query&lt;/code&gt; will be an empty object (&lt;code&gt;{}&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;After hydration, Next.js will trigger an update to your application to provide the route parameters in the &lt;code&gt;query&lt;/code&gt; object.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/api-reference/next/router"&gt;Next router docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/docs/routing/dynamic-routes#caveats"&gt;Dynamic routes caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>nextjs</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why we started Devsession</title>
      <author>Aram Drevekenin</author>
      <pubDate>Thu, 06 Jan 2022 13:46:32 +0000</pubDate>
      <link>https://dev.to/devsession_is/why-we-started-devsession-575a</link>
      <guid>https://dev.to/devsession_is/why-we-started-devsession-575a</guid>
      <description>&lt;p&gt;When I started developing, after a certain period of writing code alone, I was taught how to collaborate with others. I was introduced to version control tools (back then it was SVN, today it would be Git) as the point of coordination. My first impression was that someone was trying to play a trick on me. &lt;/p&gt;

&lt;p&gt;In order to work along side my teammates I would need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Work on my feature alone until I'm done&lt;/li&gt;
&lt;li&gt;Try to push my changes to the joint code base&lt;/li&gt;
&lt;li&gt;Have Git tell me what it understands are the contradictions I need to fix&lt;/li&gt;
&lt;li&gt;Fix those contradictions, and hope there aren't any more non-textual contradicting assumptions that the tool couldn't catch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This just seemed so needlessly complex to me.&lt;/p&gt;

&lt;p&gt;We waste so much time on merge conflicts, and on fixing bugs that happen because Alice zero indexed the IDs while Bob one indexed them.&lt;/p&gt;

&lt;p&gt;Development is team work, but as individual developers, our teammates' work is often a point of friction rather than a welcome additional pair of hands.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-if-things-could-be-different"&gt;
  &lt;/a&gt;
  What if things could be different?
&lt;/h2&gt;

&lt;p&gt;This is where Devsession comes in. We're building an IDE synchronizer that would allow you to have a Google-docs-like collaborative experience in your own IDE, and see your teammates type in real time.&lt;/p&gt;

&lt;p&gt;Plug in a url (for example: &lt;code&gt;https://my.devsession.is/alices-session&lt;/code&gt;) into your IDE, terminal or browser and you're in the session.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-a-dev-session-from-your-own-ide"&gt;
  &lt;/a&gt;
  Join a dev session from your own IDE
&lt;/h3&gt;

&lt;p&gt;With Devsession, the code is shared between all members of the team, but each one still works in their own environment.&lt;br&gt;
Devsession will also include a built in set of feature flags, allowing developers to switch each other's changes on and off if they want to temporarily work alone without having to diverge the code itself.&lt;/p&gt;

&lt;p&gt;The feature flags are logical rather than textual. This means that instead of having a language specific feature flag such as &lt;code&gt;if (my_feature_flag_name == true)&lt;/code&gt; inside the code, Devsession will be able to manage which parts of the code should appear in your editor depending on which flags you switched on.&lt;/p&gt;

&lt;p&gt;In addition, Devsession will include a built in modern messaging system. Meaning that if you don't want to be interrupted in your flow, you could also set yourself as "Do not disturb", and then your teammates can always switch off your feature flag if they want to.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kFZZ2Vkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb24z37usdpqmxiiye01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kFZZ2Vkk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yb24z37usdpqmxiiye01.png" alt="A depiction of a generic IDE with Alice and Bob writing code together concurrently with a set of feature flags they can use to turn each other's changes on and off" width="400" height="420"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#share-your-terminal-without-sharing-your-cursor"&gt;
  &lt;/a&gt;
  Share your terminal without sharing your cursor
&lt;/h3&gt;

&lt;p&gt;Devsession will also allow you to synchronize your terminal, with each user having their own cursor rather than being made to share the cursor with others. This would allow developers to hop between the different environments of their teammates in order to be able to seamlessly pair on a joint problem in the middle of development.&lt;/p&gt;

&lt;p&gt;This solution could also be used separately. In order to collaborate on solving a production issue or temporarily helping a friend out of a jam.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w7P41Kdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi5niqhpoxpc7ip8b2wn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w7P41Kdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi5niqhpoxpc7ip8b2wn.png" alt="A screenshot of a terminal with multiple users connected, each one with their own different colored cursor" width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#say-goodbye-to-meticulous-coordination"&gt;
  &lt;/a&gt;
  Say goodbye to meticulous coordination
&lt;/h3&gt;

&lt;p&gt;Imagine you and your teammate are working on two different features, each one touching the same data structure. For example: in a social media site, both of you need to change the &lt;code&gt;User&lt;/code&gt; model. One of you wants to add an attribute, and the other wants to change the type of a different attribute. Today, depending on our language or environment, we would often have to meticulously coordinate such tasks. Usually this would not even be enough and on the whole, we would be slowing each other down.&lt;/p&gt;

&lt;p&gt;With Devsession, this problem goes away. We would both make our changes to the data structure and quickly fix any contradicting assumptions each developer's implementation creates.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#look-through-history-with-varying-levels-of-granularity"&gt;
  &lt;/a&gt;
  Look through history with varying levels of granularity
&lt;/h3&gt;

&lt;p&gt;How often did you try to optimize a piece of code someone else wrote only to end up with basically the same thing after a few iterations? No shame, it happens to us all.&lt;/p&gt;

&lt;p&gt;Right now, if we need to understand a piece of code as developers, the only history we have is our git log. While certainly better than nothing, git commits tend to be of finished pieces. There is a lot of context about "why things are this way" that gets lost. We could ask the developer who wrote it... if they are still around - or if they even remember.&lt;/p&gt;

&lt;p&gt;Wouldn't be cool if we were able to analyze a piece of code and see exactly how it was written? Kind of like going through an undo-chain in our own editor.&lt;/p&gt;

&lt;p&gt;An upshot of Devsession is that since everyone is coding together in the same instance - the instance itself has memory. We could use it to better understand what was happening when a piece of code was created - and we could even edit it into a feed that developers could browse to find out what happened while they were on vacation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-you-want-to-get-rid-of-git"&gt;
  &lt;/a&gt;
  Do you want to get rid of Git?
&lt;/h3&gt;

&lt;p&gt;No, not at all! We believe Git is a great tool for version control, but that we've been misutilizing it as a collaboration tool.&lt;/p&gt;

&lt;p&gt;We think Git should be used in tandem with Devsession, with developers deciding when to commit a larger change together as part of the code-base's evolution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9moOFSEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gsnr0ubrozw71bj5vfq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9moOFSEd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8gsnr0ubrozw71bj5vfq.png" alt="A diagram showing how a Devsession instance can be used as a client for git with developers connecting to it directly and together deciding to push to Git" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#devsession-is-an-open-source-company"&gt;
  &lt;/a&gt;
  Devsession is an open source company
&lt;/h2&gt;

&lt;p&gt;Devsession was started by the team behind &lt;a href="https://github.com/zellij-org/zellij"&gt;Zellij&lt;/a&gt;. We intend to use Zellij as our technological infrastructure and be the first major app in a growing ecosystem around it. To that end, we intend to sponsor the development of Zellij and work to improve it and nurture others who might benefit from the infrastructure it offers.&lt;/p&gt;

&lt;p&gt;As a free service to the Zellij community - Devsession also intends to offer terminal sharing over the web for free. Sharing that will not lock users in to only having one cursor each. But instead allow them to work separately in the same session. When we launch, we intend for terminal sharing to be as simple as sending a friend a URL: &lt;code&gt;https://my.devsession.is/alices-session&lt;/code&gt;. They would open the URL in their browser or through Zellij and immediately start working together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g-e2kqBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h6tof9y2yqd1i2b9b73.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g-e2kqBN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h6tof9y2yqd1i2b9b73.png" alt="A diagram showing multiple users connected to the same Zellij instance, some from a browser and some from terminal emulators, assisted by Devsession in order to facilitate connecting to the session through a my.devsession.is url" width="880" height="506"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Devsession itself intends to be as open-source as possible. Pursuing revenue by providing services rather than creating intellectual property.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sound-interesting-want-to-learn-more"&gt;
  &lt;/a&gt;
  Sound interesting? Want to learn more?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://devsession.is"&gt;Sign up for early access!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>news</category>
      <category>showdev</category>
      <category>linux</category>
      <category>git</category>
    </item>
    <item>
      <title>Postman-powered testing of Akka Serverless gRPC APIs</title>
      <author>Jeremy Pollock</author>
      <pubDate>Thu, 06 Jan 2022 13:39:57 +0000</pubDate>
      <link>https://dev.to/jpollock/postman-powered-testing-of-akka-serverless-grpc-apis-24ha</link>
      <guid>https://dev.to/jpollock/postman-powered-testing-of-akka-serverless-grpc-apis-24ha</guid>
      <description>&lt;p&gt;Over the holidays, 2021, &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; gifted a fine upgrade to its users: beta support for the gRPC protocol in its API platform. As a Product Manager for Lightbend and helping out on its new gRPC native PaaS for building and running APIs and microservices, I was excited, to say the least. In another, recent blog &lt;a href="https://dev.to/jpollock/grpc-test-and-try-with-akka-serverless-and-evans-5gcc"&gt;post&lt;/a&gt;, I mentioned my desire to leverage UI test-and-try tools for APIs (my time in the REST API world of Mashery and PubNub was the source of such desire). In that same post though, I noted the lack of several important gRPC features, like server reflection and more robust import capabilities, as blockers; hence, my deep dive, in that post, into the CLI tool, &lt;a href="https://github.com/ktr0731/evans"&gt;Evans&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But just because one builds APIs and services in Akka Serverless, using gRPC as a first class citizen, doesn't mean that one has to rely solely on gRPC tooling. When running your logic on this serverless platform, you can access your developed, and running, APIs through direct HTTP requests. The product has an "always-on" feature called &lt;em&gt;HTTP transcoding&lt;/em&gt;, and its default behaviour is to expose every gRPC method as a &lt;code&gt;POST&lt;/code&gt; request to a &lt;code&gt;URI&lt;/code&gt; of &lt;code&gt;/&amp;lt;fully qualified service name&amp;gt;/&amp;lt;method name&amp;gt;&lt;/code&gt; , with that resource accepting a JSON representation of the full protobuf message. One simply has to look at their API definitions, as captured in a &lt;code&gt;protobuf&lt;/code&gt; to get the URIs that are needed. Let's check out what that really means!&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you just want to go make some API calls in Postman, you can access the demo collection using the below:&lt;br&gt;
&lt;a href="https://app.getpostman.com/run-collection/34862-3e1b7880-536c-41f9-a97b-8b1bef5cd88e?action=collection%2Ffork&amp;amp;collection-url=entityId%3D34862-3e1b7880-536c-41f9-a97b-8b1bef5cd88e%26entityType%3Dcollection%26workspaceId%3Ddee50495-76e5-4399-afea-21035ae2759d"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V37vEqA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://run.pstmn.io/button.svg" alt="Run in Postman" width="123" height="30"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#parsing-out-uris-from-a-protobuf"&gt;
  &lt;/a&gt;
  Parsing out URIs from a protobuf
&lt;/h2&gt;

&lt;p&gt;Ready to parse, human? To read through a possibly strangely constructed file and deduce &lt;code&gt;URIs&lt;/code&gt; that match the above format of &lt;code&gt;/&amp;lt;fully qualified service name&amp;gt;/&amp;lt;method name&amp;gt;&lt;/code&gt;? Well, even if you're not, let's learn!&lt;/p&gt;

&lt;p&gt;Below is a &lt;code&gt;protobuf&lt;/code&gt; file. If you have no idea what &lt;code&gt;protobuf&lt;/code&gt; is, you might want to check out this site: &lt;a href="https://developers.google.com/protocol-buffers"&gt;https://developers.google.com/protocol-buffers&lt;/a&gt;.  For purposes of this post, it can be thought of as our API contract. WSDL? OpenAPI specification? Well, like those, yes. The below file defines what API requests can be made, and what the inputs and outputs are Knowing this, we can look at the API contract and divine an API request.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;syntax = "proto3";

// This will be part of the fully qualified service name &amp;lt;1&amp;gt;
package com.example;

import "akkaserverless/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option java_outer_classname = "CounterApi";

message IncreaseValue {
    string counter_id = 1 [(akkaserverless.field).entity_key = true];
    int32 value = 2;
}

message DecreaseValue {
    string counter_id = 1 [(akkaserverless.field).entity_key = true];
    int32 value = 2;
}

message ResetValue {
    string counter_id = 1 [(akkaserverless.field).entity_key = true];
}

message GetCounter {
    string counter_id = 1 [(akkaserverless.field).entity_key = true];
}

message CurrentCounter {
    int32 value = 1;
}

// This will be part of the fully qualified service name, appended to the package name &amp;lt;2&amp;gt;
service CounterService {
    option (akkaserverless.codegen) = {
        value_entity: {
            name: "com.example.domain.Counter"
            entity_type: "counter"
            state: "com.example.domain.CounterState"

        }
    };

    // each of the below can be an URI API call, appended to the fully qualified service name (separated by a forward slash) &amp;lt;3&amp;gt;
    rpc Increase (IncreaseValue) returns (google.protobuf.Empty);
    rpc Decrease (DecreaseValue) returns (google.protobuf.Empty);
    rpc Reset (ResetValue) returns (google.protobuf.Empty);
    rpc GetCurrentCounter (GetCounter) returns (CurrentCounter);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Going from top to bottom, let me call out the critical parts, respective of our &lt;code&gt;URI&lt;/code&gt; generation exercise.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We pick up the first part of our &lt;code&gt;fully qualified service name&lt;/code&gt; in the &lt;code&gt;package&lt;/code&gt; line. In this case, as we start building our URI, &lt;code&gt;/com.example&lt;/code&gt; starts us off!&lt;/li&gt;
&lt;li&gt;The second important line is the &lt;code&gt;service CounterService&lt;/code&gt; one; it contains the structure of the API requests that are supported by the API service. To our &lt;code&gt;fully qualified service name&lt;/code&gt; string, we will append the &lt;code&gt;CounterService&lt;/code&gt; to form &lt;code&gt;/com.example.CounterService&lt;/code&gt;. And as such, we're done with that.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Onward to determining the &lt;code&gt;method&lt;/code&gt; name. For each of the &lt;code&gt;rpc&lt;/code&gt; lines, contained within the &lt;code&gt;service&lt;/code&gt;, there will be an URI created, appending &lt;code&gt;method&lt;/code&gt; to our &lt;code&gt;fully qualified service name&lt;/code&gt;. What this looks like, would be a set of partial URIs:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/com.example.CounterService/Increase
/com.example.CounterService/Decrease
/com.example.CounterService/Reset
/com.example.CounterService/GetCurrentCounter
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We're ready to go! Get me to Postman!&lt;/p&gt;

&lt;p&gt;Well, not so fast. We know that the &lt;code&gt;Always-on HTTP Transcoding&lt;/code&gt; feature in Akka Serverless is expecting a &lt;code&gt;POST&lt;/code&gt; with a &lt;code&gt;body&lt;/code&gt;, in JSON format, representing the API inputs. Where do we find these?&lt;/p&gt;

&lt;p&gt;As you look back at the part of the &lt;code&gt;protobuf&lt;/code&gt; file that had the method names, as marked by the &lt;code&gt;rpc&lt;/code&gt; designation, you will notice that immediately after the &lt;code&gt;method&lt;/code&gt; name, there is additional text, wrapped in parentheses. This is the input that the API method in question is expecting. Those input names, e.g. &lt;code&gt;IncreaseValue&lt;/code&gt;, map to &lt;code&gt;messages&lt;/code&gt; defined further up in the &lt;code&gt;protobuf&lt;/code&gt;. And from those &lt;code&gt;messages&lt;/code&gt;, we can determine the appropriate JSON to send in our API requests. We simply create a JSON attribute, with values matching the data type specified in the &lt;code&gt;message&lt;/code&gt;.  For example, message &lt;code&gt;IncreaseValue&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;message IncreaseValue {
    string counter_id = 1 [(akkaserverless.field).entity_key = true];
    int32 value = 2;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The following JSON could be used as an input to our API request:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"counter_id": "foo", "value": 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Putting the two (&lt;code&gt;URI&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt;) together, adding the hostname of the running service, we can build a &lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl -XPOST -H "Content-Type: application/json" -d '{"counter_id": "foo", "value": 1}' https://nameless-thunder-9740.us-east1.akkaserverless.app/com.example.CounterService/Increase
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Now we're ready for Postman!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-http-requests-in-postman"&gt;
  &lt;/a&gt;
  Creating HTTP Requests in Postman
&lt;/h2&gt;

&lt;p&gt;Postman has great documentation and is a very intuitive application. So really, I'm not sure I need to lay out the steps to do this. But given that this approach is all about making everyday "normal" HTTP requests to a gRPC service/API, perhaps a quick run-through will be good.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When you have to make a choice, blue pill or red...Wait. This isn't The Matrix! But with the recent beta release of &lt;code&gt;gRPC&lt;/code&gt; support in Postman, you'll be tempted to pick that path when creating a new request. Don't! Choose HTTP Request! &lt;/p&gt;




&lt;p&gt;Let's do this!&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;If you don't have Postman installed on your machine, head &lt;a href="https://www.postman.com/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Once you're ready, open up the Postman application.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;New&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XdgiDF1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgn1toradhk0vnyal2l3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdgiDF1Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dgn1toradhk0vnyal2l3.png" alt="Creating a new request in Postman" width="373" height="89"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;HTTP Request&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ps4QMkYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lfpc5wxxpf38ad0n2ji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ps4QMkYc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6lfpc5wxxpf38ad0n2ji.png" alt="Choosing request type" width="853" height="568"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Change HTTP Method from &lt;strong&gt;GET&lt;/strong&gt; to &lt;strong&gt;POST&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fill in the &lt;code&gt;Enter request URL&lt;/code&gt; text field with our API URI: &lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://nameless-thunder-9740.us-east1.akkaserverless.app/com.example.CounterService/Increase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Your request should look like this now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rJVJW517--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ffhtkb05ww26sqj1vtr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rJVJW517--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ffhtkb05ww26sqj1vtr.png" alt="Entering URI" width="880" height="106"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click on &lt;strong&gt;Body&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;raw&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If you're not finding the above two, they're here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b82zTg71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5tjdqm8p8cb8klyle3q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b82zTg71--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s5tjdqm8p8cb8klyle3q.png" alt="Adding body" width="880" height="161"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fill in the large text area with the above &lt;code&gt;POST&lt;/code&gt; body:&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"counter_id": "foo", "value": 1}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;strong&gt;Text&lt;/strong&gt; type to &lt;strong&gt;JSON&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aGfT2ZuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whsgtwu3pg4x1nieyh7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aGfT2ZuM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whsgtwu3pg4x1nieyh7f.png" alt="Changing content type" width="880" height="317"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;Send&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Profit!&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Your Postman app should looking something like this. &lt;code&gt;200 OK&lt;/code&gt;, in green, means success!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0rOvKadO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9grzt4hnmn3tdc8du6nj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0rOvKadO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9grzt4hnmn3tdc8du6nj.png" alt="Completed request" width="880" height="406"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can rinse-and-repeat the above steps for each of the four API requests defined the &lt;code&gt;protobuf&lt;/code&gt; file. You can also access a fully-finished Postman Collection (a set of API requests) by clicking on the below button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.getpostman.com/run-collection/34862-3e1b7880-536c-41f9-a97b-8b1bef5cd88e?action=collection%2Ffork&amp;amp;collection-url=entityId%3D34862-3e1b7880-536c-41f9-a97b-8b1bef5cd88e%26entityType%3Dcollection%26workspaceId%3Ddee50495-76e5-4399-afea-21035ae2759d"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V37vEqA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://run.pstmn.io/button.svg" alt="Run in Postman" width="123" height="30"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-go-next"&gt;
  &lt;/a&gt;
  Where to go next
&lt;/h3&gt;

&lt;p&gt;If you're wanting to build out your first &lt;code&gt;gRPC&lt;/code&gt; API (or just build more!), head to &lt;a href="https://console.akkaserverless.lightbend.com/p/register#"&gt;Akka Serverless&lt;/a&gt; to get a free account. Or if you want to read first, the docs are at &lt;a href="https://developer.lightbend.com/docs/akka-serverless/quickstart/index.html"&gt;https://developer.lightbend.com/docs/akka-serverless/quickstart/index.html&lt;/a&gt;. &lt;/p&gt;

</description>
      <category>postman</category>
      <category>microservices</category>
      <category>akka</category>
      <category>grpc</category>
    </item>
    <item>
      <title>Build a video call app with Svelte in an afternoon</title>
      <author>Jess Mitchell</author>
      <pubDate>Thu, 06 Jan 2022 13:34:49 +0000</pubDate>
      <link>https://dev.to/trydaily/build-a-video-call-app-with-svelte-in-an-afternoon-4h7b</link>
      <guid>https://dev.to/trydaily/build-a-video-call-app-with-svelte-in-an-afternoon-4h7b</guid>
      <description>&lt;p&gt;Daily's JavaScript library, &lt;a href="https://github.com/daily-co/daily-js"&gt;&lt;code&gt;daily-js&lt;/code&gt;&lt;/a&gt;, is compatible with any frontend framework, which means choosing your stack is really up to you. Today we'll be looking at one of our favourite frameworks at Daily...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/MZGH2MEUcfjVvIm2oR/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/MZGH2MEUcfjVvIm2oR/giphy.gif" alt="drumroll" width="480" height="480"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;! 🎉&lt;/p&gt;

&lt;p&gt;In today’s tutorial, we’ll rebuild our Daily Prebuilt demo, already built in &lt;a href="https://github.com/daily-demos/prebuilt-ui"&gt;React&lt;/a&gt; and &lt;a href="https://github.com/daily-demos/vue-daily-prebuilt"&gt;Vue&lt;/a&gt;, but this time with Svelte! ✨&lt;/p&gt;

&lt;p&gt;Specifically, we’ll cover how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Embed &lt;a href="https://daily.co/prebuilt"&gt;Daily Prebuilt&lt;/a&gt; in a Svelte app&lt;/li&gt;
&lt;li&gt;Handle updating your components based on whether you’ve joined a Daily call or not&lt;/li&gt;
&lt;li&gt;Manage your Daily Prebuilt call with a custom control panel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to test the completed version of the demo first, check out the &lt;a href="https://svelte-daily-prebuilt.netlify.app/"&gt;deployed version&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-exactly-is-svelte"&gt;
  &lt;/a&gt;
  What exactly is Svelte?
&lt;/h2&gt;

&lt;p&gt;Svelte is an open-source frontend component framework that can be used as an alternative to other frontend frameworks, like React or Vue. &lt;/p&gt;

&lt;p&gt;It differs from other frameworks based on how it updates your app’s UI. Instead of using a virtual DOM to handle app changes (like React uses), Svelte is instead a compiler that converts app components to JavaScript and inserts any UI changes directly into the DOM itself. &lt;/p&gt;

&lt;p&gt;Or, as the &lt;a href="https://svelte.dev/blog/svelte-3-rethinking-reactivity"&gt;Svelte docs&lt;/a&gt; put it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Svelte runs at build time, converting your components into highly efficient imperative code that surgically updates the DOM. As a result, you're able to write ambitious applications with excellent performance characteristics.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#who-is-this-tutorial-for"&gt;
  &lt;/a&gt;
  Who is this tutorial for?
&lt;/h2&gt;

&lt;p&gt;Since this is a Svelte tutorial, the following content will be most helpful for anyone already familiar with Svelte. In case you’re not, we’ll do our best to explain what is unique to Svelte. &lt;/p&gt;

&lt;p&gt;Thankfully, Svelte also has amazing documentation and &lt;a href="https://svelte.dev/tutorial/basics"&gt;interactive tutorials&lt;/a&gt; to learn the basics, and we highly recommend giving those a read!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;To get started locally, clone the &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt"&gt;Daily Prebuilt Svelte demo app&lt;/a&gt; and run the following commands in your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i
npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will also need to &lt;a href="https://dashboard.daily.co/signup"&gt;create a Daily account&lt;/a&gt; and a &lt;a href="https://dashboard.daily.co/rooms/create"&gt;new Daily room&lt;/a&gt; for testing the demo. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt"&gt;demo README&lt;/a&gt; includes additional instructions for creating new Daily rooms locally via the app.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Once you have the app running locally, navigate to &lt;code&gt;http://localhost:5000&lt;/code&gt; in your browser of choice, and you should see the home page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AXoyQkeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AXoyQkeF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy-1.png" alt="home screen" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#-raw-appsvelte-endraw-determining-which-view-to-show"&gt;
  &lt;/a&gt;
  &lt;code&gt;App.svelte&lt;/code&gt;: Determining which view to show
&lt;/h2&gt;

&lt;p&gt;Our app is going to have two possible views:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Our home page, which includes a form to join a call&lt;/li&gt;
&lt;li&gt;The call UI, which includes the Daily Prebuilt embed and our custom call controls&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8o8F9A2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-16-at-15.32.50%402x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8o8F9A2o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-16-at-15.32.50%402x.png" alt="2 possible views: call UI and home screen" width="880" height="933"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We know we'll need some logic to determine which view should show. To determine this, let’s take a look at our parent &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt/blob/main/src/App.svelte"&gt;&lt;code&gt;App&lt;/code&gt;&lt;/a&gt; component. &lt;code&gt;App&lt;/code&gt; will handle deciding whether the &lt;code&gt;Home&lt;/code&gt; or &lt;code&gt;Call&lt;/code&gt; component is rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./screens/Call.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./components/Header.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./screens/Home.svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//  || 'call'&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleJoinCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;// set component vars with form submission values&lt;/span&gt;
   &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// save in local storage&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleLeaveCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;svelte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;crossorigin&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://unpkg.com/@daily-co/daily-js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/svelte:head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleJoinCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{:&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleLeaveCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/if&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s step through this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the script tag, we start by importing the components we’ll be using (&lt;code&gt;Call&lt;/code&gt;, &lt;code&gt;Home&lt;/code&gt;, and &lt;code&gt;Header&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Then, we declare variables that will be used in this component but are assigned later on.&lt;/li&gt;
&lt;li&gt;Next, we define &lt;code&gt;handleJoinCall&lt;/code&gt;, which we'll describe in more detail below. In short, it sets our &lt;code&gt;currentScreen&lt;/code&gt; variable to &lt;code&gt;call&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We then define &lt;code&gt;handleLeaveCall&lt;/code&gt;, which simply resets &lt;code&gt;currentScreen&lt;/code&gt; to &lt;code&gt;home&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Lastly, we import our &lt;code&gt;daily-js&lt;/code&gt; script tag to make the &lt;code&gt;daily-js&lt;/code&gt; library available to the rest of the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s specifically look at the markdown in &lt;code&gt;App&lt;/code&gt; to see how we render our components:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;wrapper&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Header&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleJoinCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{:&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Call&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleLeaveCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sr"&gt;/if&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Svelte, you can conditionally render components based on your JavaScript values using an &lt;a href="https://svelte.dev/tutorial/else-if-blocks"&gt;&lt;code&gt;if&lt;/code&gt; statement&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;We know we always want to render our &lt;code&gt;Header&lt;/code&gt;, but we only want to render the &lt;code&gt;Call&lt;/code&gt; component if the user is trying to join a call, i.e. the &lt;code&gt;currentScreen&lt;/code&gt; equals &lt;code&gt;call&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This is where we can use Svelte’s &lt;code&gt;if&lt;/code&gt; syntax:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{#if currentScreen === "home"}&lt;/code&gt; to render the &lt;code&gt;Home&lt;/code&gt; screen&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;{:else}&lt;/code&gt; we can show the &lt;code&gt;Call&lt;/code&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And don’t forget to close your &lt;code&gt;if&lt;/code&gt; block with &lt;code&gt;{/if}&lt;/code&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listening-for-custom-events"&gt;
  &lt;/a&gt;
  Listening for custom events
&lt;/h3&gt;

&lt;p&gt;Another handy feature of Svelte is being able to dispatch &lt;a href="https://svelte.dev/tutorial/event-forwarding"&gt;custom events&lt;/a&gt; that can be forwarded to other components. &lt;/p&gt;

&lt;p&gt;Since the &lt;code&gt;Home&lt;/code&gt; component has a form to join calls, we want to call &lt;code&gt;handleJoinCall&lt;/code&gt; (defined in &lt;code&gt;App&lt;/code&gt;) when the form’s &lt;code&gt;submit&lt;/code&gt; event is dispatched. &lt;/p&gt;

&lt;p&gt;Similarly, when you’re in a call and go to leave the call, we want to listen for the custom &lt;code&gt;left&lt;/code&gt; event we'll define in &lt;code&gt;Call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We handle both situations by adding a custom listener on each component, like so:&lt;br&gt;
&lt;code&gt;&amp;lt;Call on:left={handleLeaveCall} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Notice how it says &lt;code&gt;on:left&lt;/code&gt;? This will listen for any &lt;code&gt;left&lt;/code&gt; events dispatched. To listen to other custom events you've defined, you can just update the event name, such as &lt;code&gt;on:fancy-event-name&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;One other thing to note is being able to pass variables to child components. In Svelte, we can pass the &lt;code&gt;userName&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; values as &lt;a href="https://svelte.dev/tutorial/declaring-props"&gt;props&lt;/a&gt; to the &lt;code&gt;Call&lt;/code&gt; component like so:&lt;br&gt;
 &lt;code&gt;&amp;lt;Call {userName} {url} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Since the prop name and variable being passed use the same name, we can use the shorthand notation. That is to say, &lt;code&gt;{url}&lt;/code&gt; is shorthand for &lt;code&gt;url={url}&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These properties can then be made available in &lt;code&gt;Call&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#honey-im-raw-homesvelte-endraw-"&gt;
  &lt;/a&gt;
  Honey, I’m &lt;code&gt;Home.svelte&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x8sO0Ucr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x8sO0Ucr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-home-copy.png" alt="Home screen again" width="880" height="436"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;App&lt;/code&gt; will render the &lt;code&gt;Home&lt;/code&gt; component first. &lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;Home&lt;/code&gt; component contains the main content for our app’s home screen. The code for it is a bit longer than &lt;code&gt;App&lt;/code&gt; so we’ll look at the most important sections.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createEventDispatcher&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At the top of our component, we import Svelte’s &lt;a href="https://svelte.dev/tutorial/component-events"&gt;&lt;code&gt;createEventDispatcher&lt;/code&gt; method&lt;/a&gt; and assign it to the variable &lt;code&gt;dispatch&lt;/code&gt;. This method is what we’ll use for dispatching our custom events discussed above. &lt;/p&gt;

&lt;p&gt;Now let’s jump to our HTML and focus on the &lt;code&gt;form&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;home-screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Daily&lt;/span&gt; &lt;span class="nx"&gt;Prebuilt&lt;/span&gt; &lt;span class="nx"&gt;Svelte&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h2&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Start&lt;/span&gt; &lt;span class="nx"&gt;demo&lt;/span&gt; &lt;span class="kd"&gt;with&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;unique&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="nx"&gt;or&lt;/span&gt; &lt;span class="nx"&gt;paste&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;own&lt;/span&gt; &lt;span class="nx"&gt;room&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
…&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goToCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Name&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Daily&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/label&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;
     &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
     &lt;span class="nx"&gt;required&lt;/span&gt;
     &lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="nx"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://your-domain.daily.co/room-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Join call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, we have a native HTML &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element with the &lt;code&gt;submit&lt;/code&gt; handler using &lt;code&gt;goToCall&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;form on:submit={goToCall}&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: This is not a custom event since forms have a native &lt;code&gt;submit&lt;/code&gt; event.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The form has two inputs for a username and Daily room URL. To make each of these input values available in our component’s JavaScript, we can bind each value to a variable declared at the top of the component.&lt;/p&gt;

&lt;p&gt;For example, the username input value will be bound to the variable &lt;code&gt;name&lt;/code&gt;, which is declared at the top of the file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goToCall&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;required&lt;/span&gt; &lt;span class="nx"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/form&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means when the form’s submit event occurs and the &lt;code&gt;goToCall&lt;/code&gt; method is called, we can use the input values via our bound variables (e.g &lt;code&gt;name&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;This also makes the input values available to forward to the &lt;code&gt;App&lt;/code&gt; component via the &lt;code&gt;dispatch&lt;/code&gt; method we defined before like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Home.svelte&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;goToCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

   &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;goToCall&lt;/code&gt;, we first prevent the form from refreshing the page with &lt;code&gt;e.preventDefault()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we use our &lt;code&gt;dispatch&lt;/code&gt; method to &lt;a href="https://svelte.dev/tutorial/event-forwarding"&gt;forward&lt;/a&gt; the &lt;code&gt;submit&lt;/code&gt; event to our &lt;code&gt;App&lt;/code&gt; component. Both &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; (our variables bound to the inputs) are passed as options to make those values available to &lt;code&gt;App&lt;/code&gt;, as well. &lt;/p&gt;

&lt;p&gt;If you recall from &lt;code&gt;App&lt;/code&gt;, the &lt;code&gt;Home&lt;/code&gt; component has an event listener on it for &lt;code&gt;submit&lt;/code&gt;, which calls the &lt;code&gt;handleJoinCall&lt;/code&gt; method. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;Home on:submit={handleJoinCall} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When our dispatched &lt;code&gt;submit&lt;/code&gt; event registers in &lt;code&gt;App&lt;/code&gt;, it will call &lt;code&gt;handleJoinCall&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// App.svelte&lt;/span&gt;
 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleJoinCall&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;currentScreen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="c1"&gt;// set component vars with form submission values&lt;/span&gt;
   &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="nx"&gt;userName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;detail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="c1"&gt;// save in local storage&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-url&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte-prebuilt-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;handleJoinCall&lt;/code&gt; we update &lt;code&gt;currentScreen&lt;/code&gt; to equal &lt;code&gt;call&lt;/code&gt;. This will cause the &lt;code&gt;Call&lt;/code&gt; component to show instead of &lt;code&gt;Home&lt;/code&gt;. We then set our &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;userName&lt;/code&gt; variables to the values passed from the form and save them in local storage, as well. &lt;/p&gt;

&lt;p&gt;Now that all the &lt;code&gt;Home&lt;/code&gt; form's information is shared with &lt;code&gt;App&lt;/code&gt; — who also shares it with &lt;code&gt;Call&lt;/code&gt; — we can move on to setting up our call UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#call-on-line-1-please"&gt;
  &lt;/a&gt;
  Call on line 1, please
&lt;/h2&gt;

&lt;p&gt;So far we’ve set up our &lt;code&gt;App&lt;/code&gt; component and our &lt;code&gt;Home&lt;/code&gt; screen. Now let’s build our Daily call in &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt/blob/main/src/screens/Call.svelte"&gt;&lt;code&gt;Call.svelte&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiEoEyqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-call-copy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiEoEyqd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.daily.co/blog/content/images/size/w1600/2021/12/svelte-call-copy.png" alt="Diagram of how the Call component is split up" width="880" height="535"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s start with the &lt;code&gt;Call&lt;/code&gt; component's HTML markdown this time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;
 &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meetingState&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joined-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call-screen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
   &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;call-screen prejoin&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
 &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controls&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;meetingState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleCamera&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleMic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;share&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleScreenShare&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;fullscreen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;goFullscreen&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;local&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleLocalVideo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="nl"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleRemoteVideo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have a container &lt;code&gt;div&lt;/code&gt; with two children:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Another &lt;code&gt;div&lt;/code&gt;, which is where we’ll embed Daily Prebuilt&lt;/li&gt;
&lt;li&gt;Our &lt;code&gt;Controls&lt;/code&gt; component, which receives the room &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;meetingState&lt;/code&gt;, and call &lt;code&gt;stats&lt;/code&gt; as props. It also has a list of custom event listeners added for each of the control’s buttons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s focus on the Daily call to start.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#embedding-daily-prebuilt-in-your-svelte-app"&gt;
  &lt;/a&gt;
  Embedding Daily Prebuilt in your Svelte app
&lt;/h3&gt;

&lt;p&gt;Svelte has a handy &lt;a href="https://svelte.dev/tutorial/onmount"&gt;&lt;code&gt;onMount&lt;/code&gt; lifecycle method&lt;/a&gt; that gets called when the component is first rendered.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// assume if the Call component is showing, we should join&lt;/span&gt;
   &lt;span class="nx"&gt;initializeDaily&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We know the &lt;code&gt;Call&lt;/code&gt; component mounts when the form is submitted, so we want to initialize the call as soon as &lt;code&gt;Call&lt;/code&gt; renders. We can do this by calling &lt;code&gt;initializeDaily&lt;/code&gt; on mount.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initializeDaily&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="err"&gt;…&lt;/span&gt;
   &lt;span class="c1"&gt;// select container element to embed Daily iframe in&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;container&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;// create Daily iframe&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DailyIframe&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;iframeStyle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;IFRAME_OPTIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="na"&gt;showLeaveButton&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="nx"&gt;userName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;});&lt;/span&gt;

   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joining-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joined-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="c1"&gt;// set up interval for retrieving current network stats&lt;/span&gt;
   &lt;span class="nx"&gt;interval&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;getNetworkStats&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

   &lt;span class="c1"&gt;// let the local user join the call, which will cause&lt;/span&gt;
   &lt;span class="c1"&gt;// the call to be displayed in our app UI&lt;/span&gt;
   &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stepping through this &lt;code&gt;initializeDaily&lt;/code&gt; function: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We first select our &lt;code&gt;div&lt;/code&gt; element that will be the Daily Prebuilt iframe’s container: &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;const container = document.getElementById("container");&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Next we create our Daily Prebuilt iframe with the &lt;a href="https://docs.daily.co/reference/daily-js/factory-methods/create-frame"&gt;&lt;code&gt;createFrame&lt;/code&gt; method&lt;/a&gt; via &lt;code&gt;daily-js&lt;/code&gt;, and pass the container &lt;code&gt;div&lt;/code&gt; and some call options to it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;window.DailyIframe.createFrame(container, options)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Recall: &lt;code&gt;window.DailyIframe&lt;/code&gt; exists because we imported the &lt;code&gt;daily-js&lt;/code&gt; script in &lt;code&gt;App&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Next, we add some Daily event listeners so we can update our UI if the local user joins a call, leaves, or there’s a critical error. We’ll explain this a bit more below.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;e.g. &lt;code&gt;callFrame.on("joined-meeting", updateMeetingState);&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Then we set up an interval to get the call’s network stats every 5 seconds so we can display it in our &lt;code&gt;Control&lt;/code&gt; panel. (We won’t go into more detail about this, but &lt;a href="https://www.daily.co/contact/support"&gt;ask us if you need help&lt;/a&gt;!)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;interval = setInterval(() =&amp;gt; getNetworkStats(), 5000);&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;And, finally, we use Daily’s &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/join"&gt;&lt;code&gt;join&lt;/code&gt; method&lt;/a&gt; to actually join the call. 🎉&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;await callFrame.join();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6fm0i5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.14.50.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6fm0i5_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.14.50.gif" alt="Transitioning from the home screen to video call" width="800" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-our-custom-control-panel"&gt;
  &lt;/a&gt;
  Adding our custom control panel
&lt;/h2&gt;

&lt;p&gt;As Bruce Springsteen once said, “Honey, I want the heart, I want the soul, I want control right now,” so let’s do just that and add a little more control to our app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;daily-js&lt;/code&gt; provides instance methods to programmatically do anything you can already do via Daily Prebuilt's UI. This gives a bit more flexibility to how you want to set up your own app’s UI.&lt;/p&gt;

&lt;p&gt;For example, if you want to add a big “Mute” button to your UI, you can! Let’s take a look at how.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-a-mute-button-to-toggle-local-audio"&gt;
  &lt;/a&gt;
  Adding a Mute button to toggle local audio
&lt;/h3&gt;

&lt;p&gt;As mentioned, our &lt;code&gt;Call&lt;/code&gt; component has a bunch of custom event listeners added to &lt;a href="https://github.com/daily-demos/svelte-daily-prebuilt/blob/main/src/components/Controls.svelte"&gt;&lt;code&gt;Controls&lt;/code&gt;&lt;/a&gt;. This means all the actual Daily logic can stay contained in our &lt;code&gt;Call&lt;/code&gt; component. The &lt;code&gt;Controls&lt;/code&gt; component is basically just UI to dispatch the custom events.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Controls&lt;/span&gt;
   &lt;span class="err"&gt;…&lt;/span&gt;
   &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;mic&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggleMic&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;Controls&lt;/code&gt;, we have a button to mute the local user:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Controls.svelte&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleToggleMicClick&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;span&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;Toggle&lt;/span&gt; &lt;span class="nx"&gt;mic&lt;/span&gt;
        &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;img&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/images/mic.svg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;alt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Microphone&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/span&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On click, this button calls &lt;code&gt;handleToggleMicClick&lt;/code&gt;. That method will then dispatch our &lt;code&gt;toggle-mic&lt;/code&gt; custom event:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const handleToggleMicClick = () =&amp;gt;  dispatch("toggle-mic");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Looping back to &lt;code&gt;Call&lt;/code&gt;, the &lt;code&gt;toggle-mic&lt;/code&gt; custom event that is forwarded calls &lt;code&gt;toggleMic&lt;/code&gt; (&lt;code&gt;on:toggle-mic={toggleMic}&lt;/code&gt;), a method defined in &lt;code&gt;Call&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;toggleMic&lt;/code&gt; method is what contains our &lt;code&gt;daily-js&lt;/code&gt; interaction.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggleMic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;logError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noCallFrameError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;localVideo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localAudio&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
   &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setLocalAudio&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;localVideo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If there is no Daily &lt;code&gt;callFrame&lt;/code&gt; – defined in &lt;code&gt;initializeDaily&lt;/code&gt; – we do nothing. This shouldn’t ever happen but, you know, bugs. 🐛&lt;/p&gt;

&lt;p&gt;Next, we get our current local audio state (muted or unmuted) via the &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/local-audio"&gt;&lt;code&gt;localAudio&lt;/code&gt; Daily method&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const localVideo = callFrame.localAudio();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Whatever the current value is, we want to make it the opposite. To do this, we can use the &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/set-local-audio"&gt;&lt;code&gt;setLocalAudio&lt;/code&gt; instance method&lt;/a&gt; and set our local audio to the inverse boolean value. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;callFrame.setLocalAudio(!localVideo);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once that’s called, your unmuted audio will mute, or vice versa! 💪&lt;/p&gt;

&lt;p&gt;We won’t cover all the buttons in the control panel since they all follow a similar pattern, but if you need help, &lt;a href="https://www.daily.co/contact/support"&gt;please let us know&lt;/a&gt;! 🤗&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXknzieW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.20.49.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXknzieW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.20.49.gif" alt="Muting yourself with a custom Mute button" width="800" height="453"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#appetite-for-call-destruction"&gt;
  &lt;/a&gt;
  Appetite for (call) destruction
&lt;/h2&gt;

&lt;p&gt;To understand how the Daily event listeners work a bit more, let’s use the &lt;a href="https://docs.daily.co/reference/daily-js/events/meeting-events#left-meeting"&gt;&lt;code&gt;left-meeting&lt;/code&gt; event&lt;/a&gt; as an example. &lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Call&lt;/code&gt;, we added an event listener for &lt;code&gt;left-meeting&lt;/code&gt;, which calls a callback method (&lt;code&gt;handleLeftMeeting&lt;/code&gt;) when triggered:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;

&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// in initializeDaily()&lt;/span&gt;

 &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;clearInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;interval&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="nx"&gt;dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The callback, &lt;code&gt;handleLeftMeeting&lt;/code&gt;, gets called when the local user clicks the &lt;code&gt;Leave&lt;/code&gt; button via Daily Prebuilt’s UI. It then dispatches a custom event (&lt;code&gt;left&lt;/code&gt;) that &lt;code&gt;App&lt;/code&gt; is listening for. &lt;/p&gt;

&lt;p&gt;It does a couple other clean up tasks as well, but we won't worry about that for now. Essentially, it resets our app’s state.&lt;/p&gt;

&lt;p&gt;If you recall, &lt;code&gt;App&lt;/code&gt; has a listener on the &lt;code&gt;Call&lt;/code&gt; component for a custom &lt;code&gt;left&lt;/code&gt; event:&lt;br&gt;
&lt;code&gt;&amp;lt;Call {userName} {url} on:left={handleLeaveCall} /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;handleLeaveCall&lt;/code&gt; gets called, which resets our &lt;code&gt;currentScreen&lt;/code&gt; value to &lt;code&gt;home&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;const handleLeaveCall = () =&amp;gt; currentScreen = "home";&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once &lt;code&gt;currentScreen&lt;/code&gt; gets reset to &lt;code&gt;home&lt;/code&gt;, &lt;code&gt;App&lt;/code&gt; will render the &lt;code&gt;Home&lt;/code&gt; component instead of &lt;code&gt;Call&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qf54yDTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.24.41.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qf54yDTC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.daily.co/blog/content/images/2021/12/CleanShot-2021-12-30-at-11.24.41.gif" alt="Leaving the call and going back to the home screen" width="800" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve come full circle back home! 🍩&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/tDJYUdv3osmDs5HlyU/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/tDJYUdv3osmDs5HlyU/giphy.gif" alt="full circle" width="500" height="281"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cleaning-up-after-the-party"&gt;
  &lt;/a&gt;
  Cleaning up after the party
&lt;/h3&gt;

&lt;p&gt;Now that we have reset our state to get back to the home screen, we still have a little leftover clean up to do.&lt;/p&gt;

&lt;p&gt;If you recall, we added some Daily event listeners to our &lt;code&gt;callFrame&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;As a final step, we can turn off those event listeners and destroy our Daily &lt;code&gt;callFrame&lt;/code&gt;. It will be recreated when the next call is joined so we don't need it hanging around after leaving this call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Call.svelte&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onDestroy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;onDestroy&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// remove event listeners&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joining-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joined-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;updateMeetingState&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;left-meeting&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleLeftMeeting&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;off&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="c1"&gt;// destroy Daily callframe after call ends&lt;/span&gt;
      &lt;span class="nx"&gt;callFrame&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destroy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Svelte provides an &lt;code&gt;onDestroy&lt;/code&gt; &lt;a href="https://svelte.dev/tutorial/ondestroy"&gt;lifecycle method&lt;/a&gt; that will be triggered when the &lt;code&gt;Call&lt;/code&gt; component is destroyed.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;onDestroy&lt;/code&gt;, we can turn off our Daily event listeners and destroy the &lt;code&gt;callFrame&lt;/code&gt; with Daily's &lt;a href="https://docs.daily.co/reference/daily-js/instance-methods/destroy"&gt;&lt;code&gt;destroy&lt;/code&gt; method&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;We hope this tutorial helps you get started with building your own Daily video apps in Svelte. To learn more about Daily Prebuilt, check out our &lt;a href="https://www.daily.co/blog/tag/daily-prebuilt/"&gt;other Daily Prebuilt blog posts&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;If you’d like to build something more custom, keep an eye out on &lt;a href="https://twitter.com/trydaily"&gt;Twitter&lt;/a&gt; for our next Svelte tutorial! 👀&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>CSS Transform - How to rotate, translate, scale &amp; skew a div ?</title>
      <author>Modern Web</author>
      <pubDate>Thu, 06 Jan 2022 13:31:01 +0000</pubDate>
      <link>https://dev.to/kunaal438/css-transform-complete-guide-on-css-transform-everything-you-need-for-good-developer-841</link>
      <guid>https://dev.to/kunaal438/css-transform-complete-guide-on-css-transform-everything-you-need-for-good-developer-841</guid>
      <description>&lt;p&gt;If you struggle with CSS transform or don’t know what it is. This article is for you. In this article you’ll not only learn what is CSS transform and how to use it. But you even see its properties and learn how you can make 3d objects. The video is very simple covering the topic for you. And at the end of the video you get 3 designs which are very amazing to make. I bet if you make those 3 design, you’ll not feel you don’t know about transform anymore.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h1&gt;

&lt;p&gt;You can watch video tutorial for better understanding with live example.&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/BEkE9lzpaKw"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#who-am-i-"&gt;
  &lt;/a&gt;
  Who am I ?
&lt;/h1&gt;

&lt;p&gt;Before we start, if you don't know me. Well, I am Kunaal from India manage Modern Web YouTube channel. I make content on web development to master your web dev skills, I made tutorials on &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6S45smPYeNv01aFFKWZSgYD"&gt;Fullstack Ecom website&lt;/a&gt;,&lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6QS_knm-9-dc4tTKgbQI-zZ"&gt;Personal Portfolios&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6RU_k6jymVX7EavJ1w9i4VW"&gt;Fullstack Blogging website&lt;/a&gt;, &lt;a href="https://www.youtube.com/playlist?list=PLqm86YkewF6TEYXEoyVUdDmmIEJ1TzORZ"&gt;Amazing Headers Animations&lt;/a&gt; and much more. If that excites you, you can visit my &lt;a href="https://www.youtube.com/channel/UCoygqHsdILWZFlfI5RMC-dw/"&gt;channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So without wasting more time lets start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#tansform"&gt;
  &lt;/a&gt;
  Tansform
&lt;/h1&gt;

&lt;h3&gt;
  &lt;a href="#so-what-is-css-transform-exactly"&gt;
  &lt;/a&gt;
  So what is CSS transform exactly.
&lt;/h3&gt;

&lt;p&gt;Well,CSS transform is used to change shapes, scale the element, rotate it and much more. Let's see some transform properties.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#syntax"&gt;
  &lt;/a&gt;
  Syntax
&lt;/h6&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we use css transform. Let's see some of it's value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#translate"&gt;
  &lt;/a&gt;
  Translate
&lt;/h3&gt;

&lt;p&gt;The first property of it is translate. Translate value is used to change element's position.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;translateX(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translateY(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translateZ(px) &lt;/td&gt;
&lt;td&gt;it is used to place element in Z axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translate(x,y) &lt;/td&gt;
&lt;td&gt;This is a short form for translateX and translateY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;translate3d(x,y,z) &lt;/td&gt;
&lt;td&gt;This is a short form for translateX, translateY and translateZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt; 

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PlbWbs7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkbkgh1fkc2ik20u1cw5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PlbWbs7V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tkbkgh1fkc2ik20u1cw5.png" alt="Frame 1 (2)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scale"&gt;
  &lt;/a&gt;
  Scale
&lt;/h3&gt;

&lt;p&gt;Scale is used to scale element in x, y, z axis.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;scaleX(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleY(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scaleZ(px) &lt;/td&gt;
&lt;td&gt;it is used to scale element in Z axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale(x,y) &lt;/td&gt;
&lt;td&gt;This is a short form for scaleX and scaleY&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;scale3d(x,y,z) &lt;/td&gt;
&lt;td&gt;This is a short form for scaleX, scaleY and scaleZ&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---D4l7eRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvny7iwo0b1di1035qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---D4l7eRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wvny7iwo0b1di1035qa.png" alt="Translate" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rotate"&gt;
  &lt;/a&gt;
  Rotate
&lt;/h3&gt;

&lt;p&gt;Rotate value is used to rotate element's position.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;rotate(deg) &lt;/td&gt;
&lt;td&gt;It is used to rotate element in 2d dimension&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotateX(deg) &lt;/td&gt;
&lt;td&gt;it is used to rotate element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotateY(deg) &lt;/td&gt;
&lt;td&gt;it is used to rotate element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rotate3d(x,y,z, angle) &lt;/td&gt;
&lt;td&gt;This is used to rotate element in 3d dimesion&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt; 

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOvrDOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fqujn46uc3fmiwhryz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDOvrDOQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l3fqujn46uc3fmiwhryz.png" alt="Translate (2)" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RotateX and RotateY value will behave like scale why is that we will talk at last.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#skew"&gt;
  &lt;/a&gt;
  Skew
&lt;/h3&gt;

&lt;p&gt;Skew value is used to slant the element.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;tr&gt;
&lt;td&gt;skewX(deg) &lt;/td&gt;
&lt;td&gt;it is used to skew element in X axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skewY(deg) &lt;/td&gt;
&lt;td&gt;it is used to skew element in Y axis&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;skew(deg) &lt;/td&gt;
&lt;td&gt;it is a short form for skewX and skewY&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h6&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h6&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TI0yRKJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiycml2q7h7e1ickxzsp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TI0yRKJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hiycml2q7h7e1ickxzsp.png" alt="Translate (4)" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So these was some CSS transform properties. But we donhave some more properties. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#transform-origin"&gt;
  &lt;/a&gt;
  Transform Origin
&lt;/h1&gt;

&lt;p&gt;Well, all the things we learnt till now in this article was a value of &lt;code&gt;transform&lt;/code&gt; property. But &lt;code&gt;transform-origin&lt;/code&gt; is a property itself. And its value could be a numerical value like &lt;code&gt;100px | 10%&lt;/code&gt; or can simply be the corners name. &lt;/p&gt;

&lt;p&gt;Well, up until now, all the transform was happening from the elements centre, because it was the origin of the elements. But what if I want to rotate the div from &lt;code&gt;top left&lt;/code&gt; side. Fir exactly this purpose, we have &lt;code&gt;transform-origin&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_LL3A7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8tbaf5u7z1bklrn2fr4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_LL3A7hv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x8tbaf5u7z1bklrn2fr4.png" alt="CSs transform" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It let's you define the origin of transformation of the element.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#perspective"&gt;
  &lt;/a&gt;
  Perspective
&lt;/h1&gt;

&lt;p&gt;And the last we have perspective. Remember &lt;code&gt;rotateX&lt;/code&gt; and &lt;code&gt;rotateY&lt;/code&gt; was behaving like &lt;code&gt;scale&lt;/code&gt; that was because of this perspective.&lt;/p&gt;

&lt;p&gt;Perspective is a viewpoint or viewing angle. And this define a viewing angle which make the element 3d.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XfNUQ_DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47a3uiugxtht26viib4x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfNUQ_DV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/47a3uiugxtht26viib4x.png" alt="CSS transform" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So if we rotate that div along X axis using perspective property like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.parent&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;perspective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.element&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotateX&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll see something like this.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xAKpCJ3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbiunjvhcwnfg3gmfyuu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xAKpCJ3L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbiunjvhcwnfg3gmfyuu.png" alt="Translate (3)" width="880" height="292"&gt;&lt;/a&gt;&lt;br&gt;
Now, it is 3d, right? So this was perspective. Remember we give this property to the parent element. because we set this to the element itself it will not affect because of the same viewing angles. And also the lesser the value of perspective, closer the element to the screen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap up
&lt;/h1&gt;

&lt;p&gt;So, that's it. That was all about CSS Transform. If you liked the article and found it helpful, make sure sure to follow me and you can also show your appreciation by simply subscribing my youtube channel. I make awesome web dev content though 😉&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/c/modern_web?sub_confirmation=1"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5gs5zBA7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeitpawvax07cx7r9yoa.png" width="334" height="90"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, As I decided to make advance CSS series, then I will do it on my style. And according to me its not enough that I'll tell you how to use it. You also have to practice it. For that, I made 3 designs for you that you can make using CSS Transfom for practice. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://drive.google.com/file/d/1ujRNHdi2y6ET9VUXJyA0hB9C0jm7FSrE/view?usp=sharing"&gt;Design 1&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/195MMd9f5xkr4pdmDbpDT4JOUIQ4uzGGz/view?usp=sharing"&gt;Design 2&lt;/a&gt;, &lt;a href="https://drive.google.com/file/d/1fh3Dq7EsTEXijHzYSVCsTP5X8ferolhN/view?usp=sharing"&gt;Design 3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well, make sure you code the above designs, it will motivate me to continue this CSS series. And make sure to submit it to me by tagging me on my instagram &lt;code&gt;@modern_web_channel&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you stuck anywhere, or have any doubt feel free to ask me. &lt;/p&gt;

&lt;p&gt;Thanks for reading 😊&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#articles-you-may-find-useful"&gt;
  &lt;/a&gt;
  Articles you may find Useful
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/css-the-best-css-effects-of-all-time-most-underrated-web-ux-2chj"&gt;Best CSS Effect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/quick-css-make-infinity-loading-animation-for-your-next-website-187k"&gt;Infinte CSS loader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-disney-plus-clone-for-beginner-in-2021-html-css-js-m3p"&gt;Disney+ Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/create-working-youtube-clone-with-search-box-youtube-api-2a6e"&gt;Youtube API - Youtube Clone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/kunaal438/how-to-create-netflix-clone-netflix-clone-with-hmtl-css-js-989"&gt;TMDB - Netflix Clone&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
