<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>peviitor.ro - viziune</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Mon, 27 Dec 2021 18:06:16 +0000</pubDate>
      <link>https://dev.to/sebiboga/peviitorro-viziune-3m1e</link>
      <guid>https://dev.to/sebiboga/peviitorro-viziune-3m1e</guid>
      <description>&lt;p&gt;Tot mai multe companii isi activeaza prezenta in online prin website-uri de prezentare. O componenta importanta este sectiunea de &lt;code&gt;CARIERE&lt;/code&gt;.&lt;br&gt;
Lipsa unui integrator a tuturor locurilor de munca disponibile pe piata fortei de munca ne-a incurajat sa implementam un &lt;code&gt;motor de cautare specific pentru locurile de munca&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#companiile"&gt;
  &lt;/a&gt;
  Companiile
&lt;/h4&gt;

&lt;p&gt;Companiile pot sa isi integreze ofertele de locuri de munca in motorul de cautare. Practic se poate face integrare intre website-ul companiei si motorul de cautare. &lt;br&gt;
Sursa de date principala pentru motorul de cautare peviitor.ro este website-ul companiei - sectiunea cariere.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#utilizatorii"&gt;
  &lt;/a&gt;
  Utilizatorii
&lt;/h4&gt;

&lt;p&gt;Cei care sunt in cautarea unui loc de munca, prin intermediul acestui motor de cautare, vor reusi foarte repede sa afle ofertele de pe piata muncii. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#despre-noi"&gt;
  &lt;/a&gt;
  Despre noi
&lt;/h4&gt;

&lt;p&gt;Suntem cativa oameni pasionati de IT care avem curajul sa aducem pe piata muncii ceva diferit. Am reusit sa automatizam procesul de culegere a datelor despre locurile de munca disponibile pentru cateva companii. Ne propunem sa crestem numarul companiilor integrate cu motorul de cautare in fiecare zi. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#probleme"&gt;
  &lt;/a&gt;
  Probleme
&lt;/h4&gt;

&lt;p&gt;Despre problemele rezolvate prin acest motor de cautare ar fi multe de spus, insa principalul avantaj este ca utilizatorul nu va mai trebui sa mearga pe sute de mii de website-uri si sa isi caute locul de munca visat intrebandu-se daca oportunitatea pentru el s-a ivit sau inca mai trebuie sa astepte.&lt;br&gt;
O alta problema rezolvata cu acest motor de cautare este ca oamenii din recrutare nu vor trebui sa introduca de mai multe ori acelasi anunt pe mai multe platforme in speranta ca poate candidatul ideal o sa le bata la usa.&lt;/p&gt;

&lt;p&gt;Despre &lt;code&gt;problemele identificate&lt;/code&gt; si uneori nerezolvate iarasi este mult de vorbit, insa merita mentionat un &lt;code&gt;detaliu tehnic&lt;/code&gt; care nu este acoperit in majoritatea paginilor care descriu locul de munca: nu am gasit nici o pagina pana in prezent care sa implementeze obiectul &lt;a href="https://schema.org/JobPosting"&gt;JobPosting&lt;/a&gt; din &lt;a href="https://schema.org/"&gt;https://schema.org/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#concluzie"&gt;
  &lt;/a&gt;
  Concluzie
&lt;/h4&gt;

&lt;p&gt;Am dori sa retinem faptul ca implementarea acestui proiect: motor de cautare &lt;a href="https://peviitor.ro"&gt;https://peviitor.ro&lt;/a&gt; pe langa functionalitatea principala vine sa aduca o standardizare tehnica a prezentarii locurilor de munca.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#detalii"&gt;
  &lt;/a&gt;
  Detalii
&lt;/h4&gt;

&lt;p&gt;Cateva detalii care merita mentionate sunt:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nu preluam CV-urile candidatilor&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pentru procesul de a aplica la o pozitie deschisa, ducem utilizatorul spre pagina originala unde a fost gasit locul de munca, unde potentialul candidat va citi detaliile si daca va dori va urma pasii spre a incepe procesul de recrutare&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nu facem recrutari pentru alte companii&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;proiectul este OPEN SOURCE - oricine doreste sa se implice VOLUNTAR, poate sa se implice respectand procesul definit&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ne dorim ca in final sa ajungem sa iti oferim oportunitatea pe care o cautai, pentru ca tu &lt;code&gt;sa activezi la adevaratul tau potential&lt;/code&gt; si chiar daca am inceput proiectul cu viziunea "pentru toti" vom incerca sa ne adresam cu oportunitatile "pentru fiecare", adica pentru tine in special, cel care vei fi utilizatorul platformei.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fie ca esti tu in cautarea unei oportunitati sau vrei sa iti ajuti prietenul sau prietena, foloseste cu incredere peviitor.ro caci aici gasesti informatiile actualizate!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://peviitor.ro/"&gt;https://peviitor.ro/&lt;/a&gt;&lt;br&gt;
&lt;a href="https://splash.peviitor.ro/"&gt;splash screen&lt;/a&gt;&lt;/p&gt;

</description>
      <category>searchengine</category>
      <category>peviitor</category>
      <category>job</category>
      <category>locuridemunca</category>
    </item>
    <item>
      <title>Basic CRUD Operations</title>
      <author>Israt Zahan Sathi</author>
      <pubDate>Mon, 27 Dec 2021 17:59:58 +0000</pubDate>
      <link>https://dev.to/ijsathi/basic-crud-operations-hg0</link>
      <guid>https://dev.to/ijsathi/basic-crud-operations-hg0</guid>
      <description>&lt;p&gt;&lt;strong&gt;CRUD Operations&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;CRUD&lt;/strong&gt; is an acronym for Create, Read, Update, and Delete. These are the four basic functions that can be performed with most traditional database systems and they are the backbone for interacting with any database.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bXfEjkfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzg9i3u89pb3eebmkdfi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bXfEjkfY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uzg9i3u89pb3eebmkdfi.png" alt="Image description" width="568" height="402"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Pic collected&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;HTML Verb: POST , CRUD: Create -&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
The POST function often uses the new resource "create". In particular, it is used to create subordinate resources. That is, no one else is subject to such parental assets. In other words, when creating a new resource, POST the parent and the service takes care of adding new resources to the parent, assigning an ID (new resource URI), etc.&lt;br&gt;
If created successfully, return HTTP status 201, 201 Return a location header with a link to the newly created resource with HTTP status.&lt;br&gt;
Posts are not secure or indomitable. Therefore it is recommended to request non-indomitable resources. Requesting two identical POSTs will probably result in two resources containing the same information.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/api/service /*{create a service if id not exists ,update otherwise}*/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;HTML Verb: GET, CRUD: Read-&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
The HTTP GET method is used to "read" or retrieve an asset presentation. In the "happy" or non-error path, GET provides a presentation in XML or JSON and an HTTP response code of 200 (OK). In case of an error, it often returns a 404 (not found) or 400 (bad request).&lt;br&gt;
According to the design of the HTTP specification, GET (including HEAD) requests are used to read data only and do not change it. Therefore, when used in this way, they are considered safe. That is, they can be called without the risk of data alteration or corruption. Calling it once has the same effect as calling 10 times, or not at all. Additionally, GET (and HEAD) is idempotent, meaning that multiple identical requests yield the same results as a single request.&lt;br&gt;
Do not publish unsafe activities through GET — it should never change any resources on the server.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/api/service /*{returns a single page of service}*/&lt;br&gt;
/api/service/{id} /*{returns a single service as defined by the id provided}*/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;HTML Verb: PUT, CRUD: Update-&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
PUT is often used for "update" capability, PUT-in a familiar resource URI containing a newly-updated representation of the original resource with the request body.&lt;br&gt;
However, PUT can also be used to create a resource where the resource ID is chosen by the client instead of the server. In other words, if the PUT is in a URI that contains the value of a non-existent resource ID. Again, there is a resource presentation in the request section. Many find it complicated and confusing. As a result, this method of creation should be used sparingly, if at all.&lt;br&gt;
Alternatively, use POST to create a new resource and provide the client-defined ID in the body representation - in a URI that does not include the resource ID.&lt;br&gt;
Upon successful update, return 200 from PUT or 204 if no content is returned to the body. When using PUT to create, return HTTP status 201 on successful creation. A body of feedback is optional and uses one more bandwidth. There is no need to return a link with a location title in case of creation as the client has already set the resource ID.&lt;br&gt;
PUT is not a secure operation, it modifies or creates the status on the server, but it is invincible. In other words, if you create or update a resource using PUT and then make the same call again, the resource is still there and still in the same condition as it did with the first call.&lt;br&gt;
For example, if a PUT call on an asset increases one counter of the asset, the call is no longer invincible. Sometimes this happens and it may be enough to document that the call is not indomitable. However, it is advisable to keep PUT requests in abeyance. It is strongly recommended to use POST for non-refractory requests.&lt;br&gt;
&lt;code&gt;/api/service /*{create a service if id not exists , update otherwise}*/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;HTML Verb: DELETE, CRUD: Delete-&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
DELETE is quite easy to understand. It is used to "delete" a resource identified by a URI.&lt;br&gt;
If successfully deleted, return HTTP status 200 (OK) with a response body, perhaps a presentation of the deleted item (often demanding too much bandwidth), or a wrapping response (see return value below). Either that or return HTTP status 204 (no content) without a response body. In other words, a 204 status without any body, or JSEND-style response and HTTP status 200 is the recommended response.&lt;br&gt;
HTTP-Spec-Wise, Delete operations are indomitable. When you delete an asset, it is removed. Repeated DELETE calls to that resource have the same consequences: the resource is gone. Calling DELETE means reducing a counter (within resources), the DELETE call is no longer invincible. As mentioned earlier, usage statistics and measurements may be updated while still considering the service incomplete unless any resource data is changed. It is recommended to use POST for non-exhaustive resource requests.&lt;br&gt;
However, there is a warning about DELETE disability. A second call to the resource DELETE will often return a 404 (not found) since it has already been removed and is therefore no longer found. This, in some respects, makes DELETE operations more incapacitated, however, the end state of the asset remains the same. A 404 return is acceptable and communicates the status of the call correctly.&lt;br&gt;
&lt;code&gt;/api/service/{id} /*{delete a single service as defined by the id provided}*/&lt;/code&gt;&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>javascript</category>
      <category>beginners</category>
      <category>react</category>
    </item>
    <item>
      <title>Basic Hooks, JSX, Componet Life Cycle</title>
      <author>Md Riyajul Kabir</author>
      <pubDate>Mon, 27 Dec 2021 17:44:42 +0000</pubDate>
      <link>https://dev.to/mdriyajulkabir/basic-hooks-jsx-componet-life-cycle-1opj</link>
      <guid>https://dev.to/mdriyajulkabir/basic-hooks-jsx-componet-life-cycle-1opj</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hooks&lt;/strong&gt;&lt;br&gt;
Hook is a new feature introduced in React 16.8 version. This allows you to use the status and other feedback features without typing the class. A hook is a function that "hooks in" the reaction state and lifecycle properties from the function element. It doesn't work inside the classroom.&lt;br&gt;
The hooks are backwards-compatible, which means there is no broken change. Also, it does not replace your knowledge of the concept of reaction.&lt;br&gt;
&lt;em&gt;&lt;strong&gt;When to use a Hooks:&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
If you write a function element, and then you want to add some state to it, first you do it by converting it into a class. But, now you can do this by using a hook inside the existing function element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WbNroCDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1wjduch6b5p7z5w3upd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WbNroCDW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1wjduch6b5p7z5w3upd.png" alt="Image description" width="880" height="1053"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JSX&lt;/strong&gt;&lt;br&gt;
JSX is a JavaScript syntax extension and sometimes known as JavaScript XML. It is a responsive extension of syntax in JavaScript language that provides a way to construct content rendering using syntax known to many developers. It looks like HTML.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SyUL9aW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddf8smtftqf0cugivxrm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SyUL9aW---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ddf8smtftqf0cugivxrm.png" alt="Image description" width="500" height="186"&gt;&lt;/a&gt;&lt;br&gt;
or &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--obJdUYiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bby5pwus0ms2q6mbfjnk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--obJdUYiD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bby5pwus0ms2q6mbfjnk.png" alt="Image description" width="386" height="27"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Component Lifecycle&lt;/strong&gt;&lt;br&gt;
The component is created i.e. mounted in DOM, updated and enlarged and then die or unmounted in DOM. This is referred to as a material life cycle. There are different life cycle methods that respond to different stages of life of an element.&lt;br&gt;
Lifecycle Methods:&lt;br&gt;
Initialization&lt;br&gt;
This is the stage where the element sets its state and props and starts its journey. This is usually done inside the constructor method.&lt;br&gt;
  &lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AhoRWqYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j9f94k2ey81jbwsthiw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AhoRWqYV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j9f94k2ey81jbwsthiw.png" alt="Image description" width="469" height="394"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Mounting&lt;/strong&gt;&lt;br&gt;
The name is self-explanatory. Mounting is the phase where our reactive component is mounted on the DOM, i.e. created and inserted into the DOM.&lt;br&gt;
This episode comes to the scene after the initial phase is over. At this stage, our material renders for the first time. The methods available at this stage are:&lt;br&gt;
&lt;strong&gt;&lt;em&gt;componentWillMount()&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This method is called just before mounting an element in the DOM or is called the render method. After this procedure, the component is mounted.&lt;br&gt;
&lt;strong&gt;&lt;em&gt;NB:&lt;/em&gt;&lt;/strong&gt; You will not make API calls or change any data using this.setstate in this manner as it is called before the render method. So, nothing can be done with the DOM (such as updating data with API feedback) because it is not mounted. Therefore, we cannot update the state with API feedback&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;componentDidMount()&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This method is called after mounting the component in the DOM. Like component Willmount, it is called once in a life cycle. Before this method is implemented, the render method is called, that is, we can access the DOM. We can make API calls and update states with API responses.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j2wU2L2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a1hpmw9zrhrmtio9pg6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j2wU2L2c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8a1hpmw9zrhrmtio9pg6.png" alt="Image description" width="502" height="495"&gt;&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;&lt;em&gt;updating&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This is the third stage through which our material passes. After the mounting episode where the component was created, the update episode comes into view. This is where the state of the component changes and, therefore, the rendering takes place.&lt;br&gt;
At this stage, the component's data (state and props) are updated to respond to user events such as clicking, typing, etc. This results in re-rendering of the component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Unmounting&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
This is the last stage of the material life cycle. As the name implies, at this stage the component is unmounted from the DOM.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>What 2021 software trends are going to fade away in 2022?</title>
      <author>Ben Halpern</author>
      <pubDate>Mon, 27 Dec 2021 17:39:55 +0000</pubDate>
      <link>https://dev.to/ben/what-2021-software-trends-are-going-to-fade-away-in-2022-5f33</link>
      <guid>https://dev.to/ben/what-2021-software-trends-are-going-to-fade-away-in-2022-5f33</guid>
      <description></description>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>What's your go to Rust resources?</title>
      <author>Nick Taylor</author>
      <pubDate>Mon, 27 Dec 2021 17:34:30 +0000</pubDate>
      <link>https://dev.to/nickytonline/rust-resources-1alb</link>
      <guid>https://dev.to/nickytonline/rust-resources-1alb</guid>
      <description>&lt;p&gt;We're getting close to the new year and I've heard from several folks in my circles that they're looking to learn Rust.&lt;/p&gt;

&lt;p&gt;What's your go to Rust resources? They can be beginner resources, advanced etc. If you have a post on DEV or elsewhere that you think folks might find helpful, include that too!&lt;/p&gt;

&lt;p&gt;Drop 'em all in the comments!&lt;/p&gt;

</description>
      <category>rust</category>
      <category>discuss</category>
    </item>
    <item>
      <title>SSH and GPG With Gitpod</title>
      <author>Dhananjay Tanpure</author>
      <pubDate>Mon, 27 Dec 2021 17:29:17 +0000</pubDate>
      <link>https://dev.to/dtan13/ssh-and-gpg-with-gitpod-3nbj</link>
      <guid>https://dev.to/dtan13/ssh-and-gpg-with-gitpod-3nbj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#get-your-gitconfig"&gt;
  &lt;/a&gt;
  Get Your &lt;strong&gt;.gitconfig&lt;/strong&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Your Git Config is located at &lt;strong&gt;~/.gitconfig&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Encode the File with base64:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat&lt;/span&gt; .gitconfig | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://gitpod.io/variables"&gt;Create a variable&lt;/a&gt; on gitpod.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Enter Name &lt;strong&gt;GITCONFIG&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enter output of previous command as Value.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Add following task to your &lt;strong&gt;.gitpod.yml&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="s"&gt;[[ ! -z $GITCONFIG  ]] &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;echo $GITCONFIG | base64 -d &amp;gt; ~/.gitconfig &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;chmod 644 ~/.gitconfig&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#make-commits-gpgsigned"&gt;
  &lt;/a&gt;
  Make commits GPG-signed
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;To sign commit using GPG you must first add GPG keys to Github and/or Gitlab.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/authentication/managing-commit-signature-verification"&gt;For Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/ee/user/project/repository/gpg_signed_commits/"&gt;For Gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Your GPG Keys are stored in &lt;strong&gt;~/.gnupg&lt;/strong&gt; folder. Encode this folder with base64.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;tar&lt;/span&gt; &lt;span class="nt"&gt;-czf&lt;/span&gt; - ~/.gnupg | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://gitpod.io/variables"&gt;Create a variable&lt;/a&gt; on gitpod.

&lt;ul&gt;
&lt;li&gt;Enter Name &lt;strong&gt;GNUPG&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enter output of previous command in Value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Add following task to your &lt;strong&gt;.gitpod.yml&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="s"&gt;[[ ! -z $GNUPG  ]] &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;cd ~ &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;rm -rf .gnupg &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;echo $GNUPG | base64 -d | tar --no-same-owner -xzf -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#ssh-github-and-gitlab-from-gitpod"&gt;
  &lt;/a&gt;
  SSH Github and Gitlab from gitpod
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Add SSH Keys to Github and/or Gitlab

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh"&gt;For Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.gitlab.com/ee/ssh/"&gt;For Gitlab&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get your SSH Public Key from &lt;strong&gt;id_rsa.pub&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gitpod.io/variables"&gt;Create a variable&lt;/a&gt; on gitpod.&lt;/li&gt;
&lt;li&gt;Enter Name &lt;strong&gt;SSH_PUBLIC_KEY&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Paste the contents of file in Value.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Get your SSH Public Key from &lt;strong&gt;id_rsa&lt;/strong&gt;:

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://gitpod.io/variables"&gt;Create a variable&lt;/a&gt; on gitpod.&lt;/li&gt;
&lt;li&gt;Enter Name &lt;strong&gt;SSH_PRIVATE_KEY&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Encode the File &lt;strong&gt;id_rsa&lt;/strong&gt; with base64.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cat &lt;/span&gt;id_rsa | &lt;span class="nb"&gt;base64&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; 0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Paste the output of previous command in Value.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;Add Following tasks to your &lt;strong&gt;.gitpod.yml&lt;/strong&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;tasks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;before&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="s"&gt;mkdir -p ~/.ssh &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;[[ ! -z $SSH_PUBLIC_KEY  ]] &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;echo $SSH_PUBLIC_KEY &amp;gt; ~/.ssh/id_rsa.pub &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;chmod 644 ~/.ssh/id_rsa.pub &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;[[ ! -z $SSH_PRIVATE_KEY  ]] &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;echo $SSH_PRIVATE_KEY | base64 -d &amp;gt; ~/.ssh/id_rsa &amp;amp;&amp;amp;&lt;/span&gt;
          &lt;span class="s"&gt;chmod 600 ~/.ssh/id_rsa&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thank-you"&gt;
  &lt;/a&gt;
  Thank You!
&lt;/h2&gt;

</description>
    </item>
    <item>
      <title>PHP 8: How to Get Started</title>
      <author>Sagrario Meneses</author>
      <pubDate>Mon, 27 Dec 2021 17:27:43 +0000</pubDate>
      <link>https://dev.to/smmd/php-8-how-to-get-started-1lb9</link>
      <guid>https://dev.to/smmd/php-8-how-to-get-started-1lb9</guid>
      <description>&lt;p&gt;&lt;a href="https://www.php.net/releases/8.0/en.php"&gt;PHP 8&lt;/a&gt; is a major update to the PHP programming language, released on November 26, 2020. Most recently &lt;a href="https://www.php.net/releases/8.1/en.php"&gt;PHP 8.1&lt;/a&gt; was released on November 25, 2021. And still more recently on December 17, &lt;a href="https://wiki.php.net/rfc"&gt;PHP 8.1.1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;According to the official page, this most recent version contains several new features and optimizations. In this post, I will tell you about some of the most interesting new features and detail how to get started. But before that, let’s talk a little about why PHP is a very special language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-makes-the-php-coding-language-fantastic"&gt;
  &lt;/a&gt;
  What Makes the PHP Coding Language Fantastic?
&lt;/h2&gt;

&lt;p&gt;PHP developers are used to dealing with jokes about being bad developers, but thankfully, this has changed recently. The truth is that being a good developer does not depend on the technologies, tools, or languages we use. Instead, being a good developer results from the qualities, skills, and experience acquired from doing our work properly.&lt;/p&gt;

&lt;p&gt;From a business perspective, PHP has evolved significantly. Many companies are using the PHP language to create different applications. Since these companies are constantly upgrading their PHP versions, they can build new features and reach their business goals faster.&lt;/p&gt;

&lt;p&gt;A good example of this is serverless PHP applications. I like to think that one of the significant advantages of using serverless is that we, as developers, can release code without thinking about servers. The cloud-based execution model is revolutionizing the industry, even though it’s not a new concept. Many companies are just starting to utilize serverless advantages like modularizing applications, scalability, reduced server costs, improved deployment process, etc. This paragraph alone can provide material for another blog post highlighting that PHP is not dead, contrary to what some people believe.&lt;/p&gt;

&lt;p&gt;Nowadays, as PHP developers, we have the opportunity to work with cool stuff. Frameworks like &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; and &lt;a href="https://symfony.com/"&gt;Symfony&lt;/a&gt; changed the way we set up new projects. CMSes like &lt;a href="https://www.drupal.org/"&gt;Drupal&lt;/a&gt; gave us the power to control our customization of content pages, and other contributions made by the PHP community have opened a world of opportunities.&lt;/p&gt;

&lt;p&gt;And that is not all; today, we are enjoying the latest version of the language.&lt;/p&gt;

&lt;p&gt;From my experience working with PHP for years, if I had to name an essential feature of the language, I would say it is the community. The PHP community is one of the warmest and most active communities nowadays, from the creator Rasmus Lerdorf to those who maintain the core of the language, people involved in creating and improving frameworks, the documentation, and the companies that use it and share their knowledge. It’s an amazing community, and I love being a part of it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-lets-get-into-php-8"&gt;
  &lt;/a&gt;
  Now, let’s get into PHP 8.
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#getting-started-with-php-8"&gt;
  &lt;/a&gt;
  Getting Started With PHP 8
&lt;/h3&gt;

&lt;p&gt;If this is your first time working with PHP, lucky you! PHP 8 is an excellent version to start with. Some groundbreaking changes were introduced in this update, and I will describe some of them. Keep reading if you’re interested in joining the PHP world.&lt;/p&gt;

&lt;p&gt;If you have experience with another PHP version, you will need to make some changes in your code to get it running. You will have it easier if you’re updating from version 7 because most of the changes were deprecated before that version.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#recommendations-for-the-transition-to-php8"&gt;
  &lt;/a&gt;
  Recommendations for the Transition to PHP8
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Try to get familiar with the documentation.&lt;/li&gt;
&lt;li&gt;Do not resist the changes: as time passes, it gets more difficult.&lt;/li&gt;
&lt;li&gt;Consider the effort: This will depend on:

&lt;ul&gt;
&lt;li&gt;Your current version. (as mentioned earlier)&lt;/li&gt;
&lt;li&gt;The size of your application.&lt;/li&gt;
&lt;li&gt;The priorities of your business.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Be aware of the advantages.&lt;/li&gt;
&lt;li&gt;If you are working on a big project:

&lt;ul&gt;
&lt;li&gt;Divide and conquer.&lt;/li&gt;
&lt;li&gt;Take baby steps.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Make sure to finish what you start.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-most-interesting-new-features"&gt;
  &lt;/a&gt;
  The Most Interesting New Features
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#constructor-property-promotion"&gt;
  &lt;/a&gt;
  Constructor Property Promotion
&lt;/h3&gt;

&lt;p&gt;Who does not like to see fewer lines of code? Well, with this &lt;a href="https://wiki.php.net/rfc"&gt;RFC&lt;/a&gt;, a shorthand syntax was added. We can now combine the specification of the class properties at the constructor.&lt;/p&gt;

&lt;p&gt;Before, your code looked like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUBg0LN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7i1oytvfm9ajl3sd9tr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZUBg0LN---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7i1oytvfm9ajl3sd9tr.png" alt="Old Constructor Syntax" width="880" height="755"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now it can look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NRYwq_M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at343ky9xj3squ3ylrfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NRYwq_M9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/at343ky9xj3squ3ylrfp.png" alt="New Constructor Syntax" width="824" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are some constraints and specifications that you can review on the &lt;a href="https://wiki.php.net/rfc/constructor_promotion"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-in-initializers"&gt;
  &lt;/a&gt;
  New in Initializers
&lt;/h3&gt;

&lt;p&gt;We can now initialize the value directly in the function declaration:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UzBIA3QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2j6tpamfkl2jfbncpjz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UzBIA3QW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y2j6tpamfkl2jfbncpjz.png" alt="Constructor Syntax 8.1" width="880" height="509"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Check more about this improvement on the &lt;a href="https://wiki.php.net/rfc/new_in_initializers"&gt;official documentation.&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#union-types"&gt;
  &lt;/a&gt;
  Union Types
&lt;/h3&gt;

&lt;p&gt;There have been times as a PHP developer where I wanted to use a more “flexible” variable. Considering the dynamic nature of the language, it can be useful. A “union type” is a collection of multiple types that indicates one of those types can be used.&lt;/p&gt;

&lt;p&gt;PHP 8 already supports: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type or null, using the special &lt;code&gt;?Type&lt;/code&gt; syntax&lt;/li&gt;
&lt;li&gt;Array or Traversable, using the special iterable type&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QrMaCp2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jrkge84vxlk3ieszpho.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QrMaCp2r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3jrkge84vxlk3ieszpho.png" alt="Union Type Syntax" width="880" height="330"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the above example, the input argument can be of type Foo or Bar, and the function returns either an int or a float.&lt;/p&gt;

&lt;p&gt;There are some exclusions, especially with the void type. Please review the &lt;a href="https://wiki.php.net/rfc/union_types_v2"&gt;official documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#named-arguments"&gt;
  &lt;/a&gt;
  Named Arguments
&lt;/h3&gt;

&lt;p&gt;This RFC allows passing arguments to a function based on the parameter name instead of the parameter position. A benefit of this new feature is that you can now skip optional parameters, which allows you to keep clean and understandable code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XfTcZ4rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qepwkpz757ur4vkhv4yl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XfTcZ4rz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qepwkpz757ur4vkhv4yl.png" alt="Function Declaration" width="756" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RKxf72pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7k1qru4kgnbjyz0gdzx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RKxf72pO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o7k1qru4kgnbjyz0gdzx.png" alt="Named Arguments Syntax" width="722" height="520"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;VS&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dL3VzDQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozbvxebudjh42hu85w62.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dL3VzDQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ozbvxebudjh42hu85w62.png" alt="Arguments Old Syntax" width="604" height="558"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can read about the benefits, attributes, and more on the &lt;a href="https://wiki.php.net/rfc/named_params"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enumerations"&gt;
  &lt;/a&gt;
  Enumerations
&lt;/h3&gt;

&lt;p&gt;Enums for short, this RFC allows us to define a new structure much like a class that can set a group of allowed values, if you have time using PHP probably you use public constants to handle this logic. This new option avoids errors during the management of these values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6QzHLs9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/591tb3nvxts27f6pkrqf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6QzHLs9M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/591tb3nvxts27f6pkrqf.png" alt="Enum Declaration" width="638" height="670"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A variable may be assigned to one of those legal values, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BUw6yQ9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhzxvui2o04wihggex2n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BUw6yQ9q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhzxvui2o04wihggex2n.png" alt="Enum Assignation" width="840" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can check the &lt;a href="https://wiki.php.net/rfc/enumerations"&gt;official documentation&lt;/a&gt; for more examples and details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jit-compiler"&gt;
  &lt;/a&gt;
  JIT Compiler
&lt;/h3&gt;

&lt;p&gt;The JIT acronym means “just in time.” JIT is a compiler that promises significant performance improvements. On the web, you can find some documented posts with tests made by PHP developers comparing processes with and without JIT, and in some cases, they got a ten times performance increase using JIT.&lt;/p&gt;

&lt;p&gt;With this compiler, there are some new opportunities for PHP developers that didn’t exist before, for example, machine learning, AI, etc. For me, this sounds promising. On the other hand, when thinking about web applications, you should know that there is no significant impact for you in using JIT right now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fibers"&gt;
  &lt;/a&gt;
  Fibers
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;"For most of PHP’s history, people have written PHP code only as synchronous code. Execution of functions stops until a result is available to return from the function, including for I/O operations, which can be quite slow."&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is the initial paragraph in the official documentation about this RFC that seeks to eliminate the distinction between synchronous and asynchronous functions by allowing functions to be interruptible. Allows the creation of full-stack, interruptible functions that can be used to implement cooperative multitasking in PHP, also known as coroutines or green-threads.&lt;/p&gt;

&lt;p&gt;This RFC can give us material for a new post, I will only get into a general description in order to get us familiar with it.&lt;/p&gt;

&lt;p&gt;Methods that use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;start()&lt;/code&gt; pass the arguments to the callable and will return whatever the &lt;code&gt;suspend()&lt;/code&gt; method receives.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;suspend()&lt;/code&gt; returns whatever value the &lt;code&gt;resume()&lt;/code&gt; method received.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resume()&lt;/code&gt; or &lt;code&gt;throw()&lt;/code&gt; returns whatever the next call to &lt;code&gt;suspend()&lt;/code&gt; received.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fibers functions are asynchronous until the brakes are hit, calling &lt;code&gt;suspend()&lt;/code&gt;. This passes the control to the "outside", but keep in mind this function is still alive waiting to be resumed.&lt;/p&gt;

&lt;p&gt;Basic init example:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R2h8h-KA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tyd7s8hvkxoawxl1zvj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R2h8h-KA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1tyd7s8hvkxoawxl1zvj.png" alt="Fiber init ex" width="880" height="558"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Check the &lt;a href="https://wiki.php.net/rfc/fibers"&gt;official documentation&lt;/a&gt; for more details and examples.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#other-improvements-that-caught-my-attention"&gt;
  &lt;/a&gt;
  Other Improvements That Caught My Attention
&lt;/h3&gt;

&lt;p&gt;PHP 8 has added a few more warnings and changed others to exceptions, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Warning to dereference null objects and arrays&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When I try to access a key inside a null array, PHP 8 shows “Warning: Trying to access array offset on value of type null.”&lt;/p&gt;

&lt;p&gt;In object references, it shows &lt;code&gt;Attempt to read property {foo} on null&lt;/code&gt; the same warning that appears if we try to access a property on a null object.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New Errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In PHP8, TypeError and ValueError were introduced. With these exceptions, types and value validations were enforced. The significant advantage of this enforcement is that we can now discover bugs early.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-thoughts"&gt;
  &lt;/a&gt;
  Further Thoughts
&lt;/h2&gt;

&lt;p&gt;If you are thinking about upgrading your PHP version, do it securely; do not forget to visit the list of breaking changes in the &lt;a href="https://github.com/php/php-src/blob/PHP-8.1.1/UPGRADING"&gt;upgrading document&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Remember that the level of complexity will vary depending on which version of PHP you’re upgrading. If you’re upgrading from a version greater than version 7, it might be more straightforward. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Here, I only mentioned a few of the many features of the latest PHP update. If this post caught your attention and you want to choose your favorite features, visit the &lt;a href="https://www.php.net/releases/8.1/en.php"&gt;official documentation&lt;/a&gt; to get familiar with all of them.&lt;/p&gt;

&lt;p&gt;I also want to include a book recommendation, &lt;a href="https://leanpub.com/rector-the-power-of-automated-refactoring"&gt;“RECTOR – The Power of Automated Refactoring”&lt;/a&gt;, written by two great members of the PHP community, &lt;a href="https://matthiasnoback.nl/"&gt;Matthias Noback&lt;/a&gt; and &lt;a href="https://tomasvotruba.com/"&gt;Tomas Votruba&lt;/a&gt;. This book is helpful in the journey of refactoring a PHP codebase.&lt;/p&gt;

&lt;p&gt;Keep in mind that the tech industry is constantly improving. As software engineers, we must be aware of the things that can make our work easier. Updates are usually one of them. I hope this post will be helpful for those who are interested in starting to use PHP or who already have a special affection for it.&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>beginners</category>
      <category>news</category>
    </item>
    <item>
      <title>Send automated emails using n8n.io
</title>
      <author>Suchitra</author>
      <pubDate>Mon, 27 Dec 2021 16:45:09 +0000</pubDate>
      <link>https://dev.to/suchitra_13/send-automated-emails-using-n8nio-5a5m</link>
      <guid>https://dev.to/suchitra_13/send-automated-emails-using-n8nio-5a5m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#you-will-need"&gt;
  &lt;/a&gt;
  You will need
&lt;/h2&gt;

&lt;p&gt;1 Terminal (ex- Git Bash)&lt;br&gt;
2 Email ID&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#stepbystep-guide"&gt;
  &lt;/a&gt;
  Step-By-Step Guide
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#step-1-install-n8n-using-npm-or-npx"&gt;
  &lt;/a&gt;
  Step 1: Install n8n using npm or npx
&lt;/h3&gt;

&lt;p&gt;Install n8n locally on our system, use the below command.&lt;br&gt;
&lt;code&gt;npm install n8n -g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Alternative, If we just want to use n8n without downloading to a local machine, can use this command&lt;br&gt;
&lt;code&gt;npx n8n&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this guide, we will work you through using npx.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#step-2-copy-the-url-and-paste-it-in-the-address-bar"&gt;
  &lt;/a&gt;
  Step 2:  Copy the URL and paste it in the address bar
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KlLzP7St--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by60s6xc2czb5ju9q9rz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KlLzP7St--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/by60s6xc2czb5ju9q9rz.png" alt="SS1" width="880" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After pasting “&lt;a href="http://localhost:5678/%E2%80%9D"&gt;http://localhost:5678/”&lt;/a&gt; in the address bar, we will get the n8n workflow page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--05r6OmYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idsd7u3f0adaph6fxile.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--05r6OmYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/idsd7u3f0adaph6fxile.png" alt="SS2" width="880" height="437"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Now, we are in n8n workflow, where we can use various types of tools to automate the task. So, over here, we will be using the “send email” node for sending the emails using this workflow.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#step-3-select-the-send-email-node"&gt;
  &lt;/a&gt;
  Step 3: Select the “send email” node
&lt;/h3&gt;

&lt;p&gt;Go to the “+” and in the search box type “send email” then select it. After selecting the “send email” node, the below window will pop up.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NvMzEClz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfeqcodo0yct193cv14e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NvMzEClz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cfeqcodo0yct193cv14e.png" alt="SS3" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: Before putting the mail address in “from email” make sure that you have the correct and that email account on a service with SMTP support.&lt;/p&gt;

&lt;p&gt;If we have a simple email account but in this case, we can also register our email account for SMTP service support by using some SMTP service provider's example elastic email.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#step-4-create-smtp-credentials"&gt;
  &lt;/a&gt;
  Step 4: Create SMTP credentials
&lt;/h3&gt;

&lt;p&gt;Go to Elastic-Email website and create SMTP credentials for your email. After creating, make sure to copy your password.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nICuBvyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50989jjfqzeekb6y1suq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nICuBvyd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50989jjfqzeekb6y1suq.png" alt="SS4" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we are ready to put all the required details for executing our “send email” node.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#step-5-put-all-the-details-for-sending-the-mail-from-the-send-email-node"&gt;
  &lt;/a&gt;
  Step 5: Put all the details for sending the mail from the “send email” node
&lt;/h3&gt;

&lt;p&gt;Click on “SMTP credential” and select the pencil icon and put all the details from the Elasic-Email SMTP details.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p9ItibJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9in516sa5r2z0tzmm76w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p9ItibJf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9in516sa5r2z0tzmm76w.png" alt="SS5" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Note: In “from email” put only that email which you have provided for SMTP service.&lt;/p&gt;

&lt;p&gt;1 Fill the “from email” address&lt;br&gt;
2 “To email” address&lt;br&gt;
3 BCC and CSS email (Optional)&lt;br&gt;
4 Subject&lt;br&gt;
5 Text or HTML form message&lt;/p&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3W7Vp-8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzlczy02032fg5rtysuj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3W7Vp-8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yzlczy02032fg5rtysuj.png" alt="SS6" width="880" height="438"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If all goes fine then the response will be like the below image&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfzQ3Xdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax9uj2h4ejkv8hqao1x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfzQ3Xdy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ax9uj2h4ejkv8hqao1x7.png" alt="SS7" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#result"&gt;
  &lt;/a&gt;
  Result
&lt;/h2&gt;

&lt;p&gt;Note: Check the spam folder also, if you don’t find it in your inbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t4JGodH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjs9e8hdw4dhjyx81z3l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t4JGodH9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tjs9e8hdw4dhjyx81z3l.png" alt="SS8" width="880" height="430"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#thanks-for-follow-along-hope-it-helps"&gt;
  &lt;/a&gt;
  &lt;em&gt;Thanks for follow along, hope it helps!&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suchitra"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWYI_Yhx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cawwn08bx5rh2s9bax2x.png" alt="image" width="545" height="153"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__449284"&gt;
  
    .ltag__user__id__449284 .follow-action-button {
      background-color: #a600ff !important;
      color: #ffd500 !important;
      border-color: #a600ff !important;
    }
  
    &lt;a href="/suchitra_13" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4xeM4t5L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--7hzloJNB--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/449284/d7520737-9b20-4d78-896c-f7725fe51850.jpg" alt="suchitra_13 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/suchitra_13"&gt;Suchitra&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/suchitra_13"&gt;I am enthusiastic about code and technology!!&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>beginners</category>
      <category>guide</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>3 magic steps to create and monetize an app ✨</title>
      <author>Łukasz Wardęga</author>
      <pubDate>Mon, 27 Dec 2021 16:18:29 +0000</pubDate>
      <link>https://dev.to/livechat/three-magic-steps-to-create-and-monetize-an-app-40o5</link>
      <guid>https://dev.to/livechat/three-magic-steps-to-create-and-monetize-an-app-40o5</guid>
      <description>&lt;p&gt;If you think about creating a source of passive income, or you would like to challenge yourself with creating an app from scratch, &lt;strong&gt;I have good and bad news for you.&lt;/strong&gt; 👌&lt;/p&gt;

&lt;p&gt;The good news is that it’s really simple, and the bad news is... that it’s really simple, so it won’t be that challenging.&lt;/p&gt;

&lt;p&gt;But let’s get to the point. In LiveChat, we run a Developer Program that allows external developers to create custom extensions and integrations for our product. These apps can be later bought by LiveChat’s users (all 34k of them) in our Marketplace.&lt;/p&gt;

&lt;p&gt;In our Program, we help you with the ideas for apps and support you with distribution among our users. (If you wonder what apps we currently are looking for, check out &lt;a href="https://developers.livechat.com/app-ideas/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=magic_video_tutorials"&gt;this site&lt;/a&gt;.) You can also consult the technical details with our staff while creating your application.&lt;/p&gt;

&lt;p&gt;A couple of days before Christmas, Oliwia, our Technical Writer, created three short video tutorials which will help you get along with our Developer Console.&lt;/p&gt;

&lt;p&gt;In these three videos, you will see her becoming a wizard 🧝‍♀️ and learn about the basic functionalities of our Developer Console. She will also explain to you how to submit an app through the dashboard and how to monetize it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check it out!&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-introduction-to-the-livechat-developer-console"&gt;
  &lt;/a&gt;
  1. Introduction to the LiveChat Developer Console
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/z_7fGblf7dQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-creating-an-app"&gt;
  &lt;/a&gt;
  2. Creating an App
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/QmnFM-p8zpg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-monetization"&gt;
  &lt;/a&gt;
  3. Monetization
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/yVO7-jt_SQY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you have any questions about the Developer Console or you would like to start building your own app, let me know in the comments! You can also check out our &lt;a href="https://developers.livechat.com/?utm_source=devto&amp;amp;utm_medium=referral&amp;amp;utm_campaign=magic_video_tutorials"&gt;Developer Program site&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Responsive Footer Design using HTML and CSS</title>
      <author>Shantanu Jana</author>
      <pubDate>Mon, 27 Dec 2021 16:16:53 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/responsive-footer-design-using-html-and-css-m1i</link>
      <guid>https://dev.to/shantanu_jana/responsive-footer-design-using-html-and-css-m1i</guid>
      <description>&lt;p&gt;In this article, you will learn how to create a Responsive Footer Design using HTML and CSS. Earlier I shared many more types of &lt;a href="https://www.foolishdeveloper.com/2021/09/responsive-footer-design.html"&gt;simple footer design&lt;/a&gt; tutorials with you. The design that I have shown in this tutorial is very simple and easy. Will be very suitable for different types of personal websites or business websites. &lt;/p&gt;

&lt;p&gt;Live Demo: &lt;a href="https://codepen.io/codemediaweb/full/RwZzQme"&gt;https://codepen.io/codemediaweb/full/RwZzQme&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is made fully responsive so that it can be easily used on any device. CSS's Flexbox has been used to make it responsive. With the help of Flexbox, no separate CSS code had to be added to make it responsive.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;📌📌 I have already shared &lt;a href="https://www.foolishdeveloper.com/2021/12/responsive-footer-design-using-html-css.html"&gt;step by step tutorial&lt;/a&gt;. If you have difficulty understanding the code, you can follow the tutorial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;HTML Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row primary"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column about"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Foolish Developer&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

   &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
      Lorem ipsum dolor sit amet consectetur adipisicing elit. Vitae,
      voluptatem corporis error non,
  &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"social"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa-brands fa-facebook-square"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa-brands fa-instagram-square"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa-brands fa-twitter-square"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa-brands fa-youtube-square"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa-brands fa-whatsapp-square"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Some Links&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

 &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#faq"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;F.A.Q&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#cookies-policy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cookies Policy&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#terms-of-services"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Terms Of Service&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#support"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Support&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;


&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column links"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Some Links&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#faq"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;F.A.Q&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#cookies-policy"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cookies Policy&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#terms-of-services"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Terms Of Service&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#support"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Support&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column subscribe"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Newsletter&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"email"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"Your email id here"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Subscribe&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"row copyright"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"footer-menu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Home&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Social&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Copyright &lt;span class="ni"&gt;&amp;amp;copy;&lt;/span&gt; 2021 Foolish Developer&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;CSS Code:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex-end&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#121315&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#a7a7a7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;footer&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Poppins"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.row&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.row.primary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;stretch&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h3&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#a7a7a7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#2a8ded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.about&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#c7940a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-around&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2.4em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.social&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#bac6d9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.copyright&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.3em&lt;/span&gt; &lt;span class="m"&gt;1em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#25262e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.footer-menu&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.footer-menu&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#cfd2d6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.footer-menu&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#27bcda&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.copyright&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.9em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;850px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.row.primary&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can &lt;a href="https://www.foolishdeveloper.com/2021/12/responsive-footer-design-using-html-css.html"&gt;download the source code&lt;/a&gt; if you want.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>The Formula of Becoming A Highly Effective Programmer</title>
      <author>notmahnoor</author>
      <pubDate>Mon, 27 Dec 2021 16:14:39 +0000</pubDate>
      <link>https://dev.to/notmahnoor/the-formula-of-becoming-a-highly-effective-programmer-3p54</link>
      <guid>https://dev.to/notmahnoor/the-formula-of-becoming-a-highly-effective-programmer-3p54</guid>
      <description>&lt;p&gt;Programmers are often looked at like problem-solvers, sitting at their desks with their backs hunched, and upgrading their set of skills to reach solutions in specific programming languages. But is problem-solving the only thing that makes a good programmer? Maybe. Maybe not. Below is a list of things that are common in every effective programmer.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#being-more-receptive-than-defensive"&gt;
  &lt;/a&gt;
  Being more receptive than defensive
&lt;/h2&gt;

&lt;p&gt;As programmers, our code is our child, and if somebody criticizes even a little part of it, we get frustrated and defensive. We give in to vanity and think that our code is &lt;em&gt;perfect&lt;/em&gt;. But a good programmer takes that harsh criticism to construct something better than what he/she did before. And that’s true! Keeping yourself open to criticism may lead you to learn new things and make your code much, _much_refined.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JsxT9F9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbncl6gpcf9g84c3mh6k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JsxT9F9c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hbncl6gpcf9g84c3mh6k.gif" alt="Image description" width="430" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#taking-care-of-yourself"&gt;
  &lt;/a&gt;
  Taking care of yourself
&lt;/h2&gt;

&lt;p&gt;There is a system for everything in this universe. From the way you conduct business to the way you stay alive and functioning, everything has a system and different checkpoints to get to the goal. But if your system starts to fail, so does everything else. &lt;/p&gt;

&lt;p&gt;As programmers, we are glued to one or multiple screens throughout the day, working out solutions and trying to make the deadline, often forgetting to give a break to our mind and our body. With average screen time between 7 to 9 hours, we forget that our ‘screentime’ consists of sitting in the same position for hours, our brains glued to one thing only. This might not show that it’s taking a toll on our health, but it all becomes clear years down the line when we’re complaining about our health.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#to-combat-this-issue-you-can"&gt;
  &lt;/a&gt;
  To combat this issue, you can:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Take a 5-minute break in every hour you work, and if you somehow can’t, accumulate the minutes to take a break in the next hours. &lt;/li&gt;
&lt;li&gt;Get some vitamin D out in the sun in your break, and give yourself time to breathe and relax. Maybe play Halo Infinite or just stretch, depending on what you want to do. &lt;/li&gt;
&lt;li&gt;Hydrate yourself with a glass of water or juice. Take a bite of the chocolate bar you’re saving. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hT2NO9hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjzra0mh9cq8lna4dhtj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hT2NO9hq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjzra0mh9cq8lna4dhtj.gif" alt="Image description" width="410" height="250"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#knowing-that-you-need-help"&gt;
  &lt;/a&gt;
  Knowing that you need help
&lt;/h2&gt;

&lt;p&gt;Programmers are not gods. No one is. And if you’re stuck on a problem that is not letting you move forward, and if you’re wasting a lot of time trying to find a solution, you need to be able to acknowledge the fact that maybe asking for help would be much more effective. &lt;/p&gt;

&lt;p&gt;So instead of staying focused on one problem for hours, try asking a coworker or fellow developer for help. This will enhance your knowledge for when you arrive at the same kind of problem in the future, and will improve your communication skills. And sometimes when nobody is available to help you, you can divert your efforts and attention to some other task that is equally important. After some time, you’ll either find help or return to the problem with a different perspective. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ2QuRwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iz0icyduqg2ywd9r28a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KZ2QuRwp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9iz0icyduqg2ywd9r28a.gif" alt="Image description" width="500" height="281"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#saving-time"&gt;
  &lt;/a&gt;
  Saving Time
&lt;/h2&gt;

&lt;p&gt;Kind of related to the previous head, saving time is crucial for any programmer. Most of us have projects that we need to get done before we pass the deadline, and would absolutely spend our nights glued to our screens if we don’t finish it. So instead of letting your physical and mental health take the brunt, try using extensions like &lt;a href="https://marketplace.visualstudio.com/items?itemName=kiteco.kite"&gt;Kite&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=vsblox.blox"&gt;blox&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;Path Intellisense&lt;/a&gt;, and as many extensions as you can to save yourself mounds of precious time that you could invest in something more important. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OMne6W8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suqjwlrzci0dwxie7cp4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OMne6W8L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/suqjwlrzci0dwxie7cp4.gif" alt="Image description" width="500" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#not-being-a-showoff"&gt;
  &lt;/a&gt;
  Not being a show-off
&lt;/h2&gt;

&lt;p&gt;Sometimes a code is supposed to be very simple and easy, but is being made complex just for a programmer to prove that he/she can do it. I’ve come across so many codes that are usually very simple, but look like a thick jungle because of a programmer’s bloated ego that needs to be shown off and validated/applauded. &lt;/p&gt;

&lt;p&gt;So, &lt;em&gt;don’t&lt;/em&gt; be that. A good and effective programmer can be recognized in a bunch without needing to show off. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JRoKT_fH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdzuz86hes4hv8fb6dam.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JRoKT_fH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xdzuz86hes4hv8fb6dam.gif" alt="Image description" width="480" height="270"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion…
&lt;/h2&gt;

&lt;p&gt;Try and follow these pointers, and let me know if they help. And if there is something else you do other than these, please comment and help your fellow devs out!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 Articles every WebDev should read this week (#51)
</title>
      <author>martin krause</author>
      <pubDate>Mon, 27 Dec 2021 16:10:03 +0000</pubDate>
      <link>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-51-16c5</link>
      <guid>https://dev.to/martinkr/5-articles-every-webdev-should-read-this-week-51-16c5</guid>
      <description>&lt;p&gt;A curated list of the top five web development must-reads from last week. Don't miss out on the latest web development stories and insights. Read all about the cutting edge in web development, working in tech and the new tools and frameworks while learning a few new tricks.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#react-conf-2021-recap"&gt;
  &lt;/a&gt;
  React Conf 2021 Recap
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Last week we hosted our 6th React Conf. In previous years, we’ve used the React Conf stage to deliver industry changing announcements such as React Native and React Hooks. This year, we shared our multi-platform vision for React, starting with the release of React 18 and gradual adoption of concurrent features.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://reactjs.org/blog/2021/12/17/react-conf-2021-recap.html"&gt;https://reactjs.org/blog/2021/12/17/react-conf-2021-recap.html&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#improving-core-web-vitals-a-smashing-magazine-case-study"&gt;
  &lt;/a&gt;
  Improving Core Web Vitals, A Smashing Magazine Case Study
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;At Smashing, we’ve struggled with amber Core Web Vitals score for a while. Then after 6 months we finally managed to fix it. Here’s a little case study on how we detected and fixed the bottlenecks, and how we ended up with green scores, all the way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.smashingmagazine.com/2021/12/core-web-vitals-case-study-smashing-magazine/"&gt;https://www.smashingmagazine.com/2021/12/core-web-vitals-case-study-smashing-magazine/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-are-hyperlinks-blue"&gt;
  &lt;/a&gt;
  Why are hyperlinks blue?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The internet has ingrained itself into every aspect of our lives, but there’s one aspect of the digital world that I bet you take for granted. Did you ever notice that many links, specifically hyperlinks, are blue? When a co-worker casually asked me why links are blue, I was stumped.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://blog.mozilla.org/en/internet-culture/deep-dives/why-are-hyperlinks-blue/"&gt;https://blog.mozilla.org/en/internet-culture/deep-dives/why-are-hyperlinks-blue/&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#writing-clean-javascript-tests-with-the-basic-principles"&gt;
  &lt;/a&gt;
  Writing clean JavaScript tests with the BASIC principles
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Production code, the main code where the features live, might not be perfect. That’s a risk or a debt that teams manage in multiple ways. For testing code, the risk is much more dramatic — It can be abandoned altogether. Vanish, gone, not doing anything anymore. Hundreds of coding hours, meetings, and sweat can just get lost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://yonigoldberg.medium.com/fighting-javascript-tests-complexity-with-the-basic-principles-87b7622eac9a"&gt;https://yonigoldberg.medium.com/fighting-javascript-tests-complexity-with-the-basic-principles-87b7622eac9a&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#guidelines-for-choosing-a-nodejs-framework"&gt;
  &lt;/a&gt;
  Guidelines for choosing a Node.js framework
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;I often see the question "What’s the best Node.js framework?" crop up on message boards and social media. The replies tend to be full of strong opinions. Some developers will even get into arguments about it. If you’re trying to figure out the right framework for your project, none of this is going to be much help.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://simonplend.com/guidelines-for-choosing-a-node-js-framework/"&gt;https://simonplend.com/guidelines-for-choosing-a-node-js-framework/&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Follow me on &lt;a href="http://twitter.com/_martinkr"&gt;Twitter: @martinkr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@burntime"&gt;Alex Kulikov&lt;/a&gt; on &lt;a href="https://unsplash.com"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://modernfrontend.dev/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH97ToOx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://modernfrontend.dev/banner/banner_583-111.png" alt="Subscribe to the weekly modern frontend development newsletter" width="583" height="111"&gt;&lt;/a&gt;&lt;/p&gt;




</description>
      <category>webdev</category>
      <category>tutorial</category>
      <category>javascript</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
