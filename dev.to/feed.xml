<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Streaming Tweets with Go</title>
      <author>Alex Fallenstedt</author>
      <pubDate>Thu, 30 Dec 2021 20:29:58 +0000</pubDate>
      <link>https://dev.to/fallenstedt/streaming-tweets-with-go-92p</link>
      <guid>https://dev.to/fallenstedt/streaming-tweets-with-go-92p</guid>
      <description>&lt;p&gt;Building with free APIs is a great way to teach yourself new skills in languages you like. I’ve always found APIs as an underrated way to learn something new. Building with APIs brings challenges that force you to learn new parts of programming that video tutorials can not do.&lt;/p&gt;

&lt;p&gt;Twitter’s API’s filtered stream endpoint allows you to filter the real-time stream of public Tweets. You can tap into twitter discussions by filtering tweets for specific attributes. You can find the latest job postings, monitor weather events, or keep on top of trends.&lt;/p&gt;

&lt;p&gt;In this article I will discuss how to create twitter rules and manage a stream with my open source library &lt;a href="https://github.com/Fallenstedt/twitter-stream"&gt;&lt;code&gt;twitterstream&lt;/code&gt;&lt;/a&gt;. This library was built for my project &lt;a href="https://findtechjobs.io"&gt;findtechjobs&lt;/a&gt; so I could find the latest tech jobs posted on twitter.&lt;/p&gt;

&lt;p&gt;If you want a complete code example to get started, head over to the examples on &lt;a href="https://github.com/Fallenstedt/twitter-stream/tree/master/example"&gt;twitterstream&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-do-i-start"&gt;
  &lt;/a&gt;
  Where do I start?
&lt;/h2&gt;

&lt;p&gt;The first step is to create an app on &lt;a href="https://developer.twitter.com/"&gt;Twitter Developers&lt;/a&gt; and obtain a set of consumer keys. One you have an API key and an API secret key, you can generate an access token with &lt;code&gt;twitterstream&lt;/code&gt;&lt;br&gt;
Generate an Access Token&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;twitterstream&lt;/code&gt; to generate an access token. This access token will be used to authenticate all network requests going forward. In the code below, we make a network request to twitter’s &lt;a href="https://api.twitter.com/oauth2/token"&gt;oauth2/token endpoint&lt;/a&gt; with the The 'Basic' HTTP Authentication Scheme. Then we create an instance of &lt;code&gt;twitterstream&lt;/code&gt; with our access token.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;tok&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTokenGenerator&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetApiKeyAndSecret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"YOUR_KEY"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"YOUR_SECRET_KEY"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RequestBearerToken&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;// Create an instance of twitter api&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewTwitterStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tok&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AccessToken&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#set-up-streaming-rules"&gt;
  &lt;/a&gt;
  Set up Streaming Rules
&lt;/h2&gt;

&lt;p&gt;Streaming rules make your stream deliver relevant information. The rules match a variety of twitter attributes such as message keywords, hashtags, and URLs. Creating great rules is fundamental to having a successful twitter stream. It’s important to continue refining your rules as you stream so you can harvest relevant information.&lt;/p&gt;

&lt;p&gt;Let’s create a stream for software engineer job postings with &lt;code&gt;twitterstream&lt;/code&gt;. A valid job posting tweet should should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Posted in the english language&lt;/li&gt;
&lt;li&gt;Not a retweet&lt;/li&gt;
&lt;li&gt;Not a reply to another tweet&lt;/li&gt;
&lt;li&gt;Contain the word “hiring”&lt;/li&gt;
&lt;li&gt;And contain the words “software developer” or “software engineer”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;twitterstream&lt;/code&gt; package makes building rules easy. We can use a &lt;code&gt;NewRuleBuilder&lt;/code&gt; to create as many rules as the Twitter API allows for our consumer keys.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;rules&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRuleBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddRule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"lang:en -is:retweet -is:quote hiring (software developer OR software engineer)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"hiring software role"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
            &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rules&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first part is using &lt;code&gt;twitterstream&lt;/code&gt; to create a &lt;code&gt;NewRuleBuilder&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We pass in two arguments when we add our rule with &lt;code&gt;AddRule&lt;/code&gt;. The first is a long string with many operators. Successive operators with a space between them will result in boolean "AND" logic, meaning that Tweets will match only if both conditions are met. For example &lt;code&gt;cats dogs&lt;/code&gt; will match tweets that contain the words “cats” and “dogs”. The second argument for &lt;code&gt;AddRule&lt;/code&gt; is the tag label. This is a free-form text you can use to identify the rules that matched a specific Tweet in the streaming response. Tags can be the same across rules.&lt;/p&gt;

&lt;p&gt;Let’s focus on the first argument. Each operator does something unique:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first is the single &lt;code&gt;lang:en&lt;/code&gt; which is BCP 47 language identifier. This filters the stream for tweets posted in the English language. You can only use a single lang operator in a rule, and it must be used with a conjunction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then we exclude retweets with &lt;code&gt;-is:retweet&lt;/code&gt;. We use NOT logic (negation) by including a minus sign in front of our operator. The negation can be applied to words too. For example, &lt;code&gt;cat #meme -grumpy&lt;/code&gt; will match tweets with the word cat, #meme, and do not include the word “grumpy”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also exclude quote tweets with &lt;code&gt;-is:quote&lt;/code&gt;. Quote tweets are tweets with comments, and I’ve found this operator very useful. When I was building findtechjobs.io, I encountered a lot of people retweeting an article about automated hiring with their opinion. These quote tweets cluttered my dataset with unrelated job postings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I then narrow my stream of tweets to words that include &lt;code&gt;hiring&lt;/code&gt;. People who tweet about jobs would say “My team is hiring…”, or “StartupCo is hiring…”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally &lt;code&gt;(software developer OR software engineer)&lt;/code&gt;, is a grouping of operators combined with an OR logic. Tweets will match if the tweet contains either of these words.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After we build our rules, we create them with &lt;code&gt;api.Rules.Create&lt;/code&gt;. If you want to delete your rules, you can use &lt;code&gt;api.Rules.Delete&lt;/code&gt; with the ID of each rule you currently have. You can find your current rules with &lt;code&gt;api.Rules.Get&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can learn more about &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/integrate/build-a-rule"&gt;rule operators here&lt;/a&gt;. Additionally, the endpoint that creates the rules is &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/post-tweets-search-stream-rules"&gt;documented here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#set-the-unmarshal-hook"&gt;
  &lt;/a&gt;
  Set the Unmarshal Hook
&lt;/h2&gt;

&lt;p&gt;We need to create our own struct for our tweets so we can unmarshal the tweet well. Twitter’s Filtered Stream endpoint allows us to fetch additional information for each tweet (more on this later). To allow us to find this data easily, we need to create a struct that will represent our data model.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="n"&gt;StreamDataExample&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Text&lt;/span&gt;      &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"text"`&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;        &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;CreatedAt&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Time&lt;/span&gt; &lt;span class="s"&gt;`json:"created_at"`&lt;/span&gt;
        &lt;span class="n"&gt;AuthorID&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt;    &lt;span class="s"&gt;`json:"author_id"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"data"`&lt;/span&gt;
    &lt;span class="n"&gt;Includes&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Users&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;       &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;Name&lt;/span&gt;     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"name"`&lt;/span&gt;
        &lt;span class="n"&gt;Username&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"username"`&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"users"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"includes"`&lt;/span&gt;
    &lt;span class="n"&gt;MatchingRules&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ID&lt;/span&gt;  &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"id"`&lt;/span&gt;
        &lt;span class="n"&gt;Tag&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="s"&gt;`json:"tag"`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="s"&gt;`json:"matching_rules"`&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every tweet that is streamed is returned as a &lt;code&gt;[]bytes&lt;/code&gt; by default. We can turn our data into something usable by unmarshaling each tweet into the struct &lt;code&gt;StreamDataExample&lt;/code&gt;. It’s important to set an unmarshal hook with &lt;code&gt;SetUnmarshalHook&lt;/code&gt; so we can process &lt;code&gt;[]bytes&lt;/code&gt; in a goroutine safe way.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetUnmarshalHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Unmarshal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"failed to unmarshal bytes: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are uncertain what your data model will look like, you can always create a string from the slice of bytes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetUnmarshalHook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="kt"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#starting-a-stream"&gt;
  &lt;/a&gt;
  Starting a Stream
&lt;/h2&gt;

&lt;p&gt;After creating our streaming rules and unmarshal hook, we are ready to start streaming tweets.&lt;br&gt;
By default, twitter returns a limited amount of information about each tweet when we stream. We can request additional information on each tweet with a stream expansion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;    &lt;span class="n"&gt;streamExpansions&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;twitterstream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewStreamQueryParamsBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddExpansion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"author_id"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;AddTweetField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"created_at"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
        &lt;span class="n"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// StartStream will start the stream&lt;/span&gt;
    &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StartStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streamExpansions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We first create some stream expansions with a &lt;code&gt;NewStreamQueryParamsBuilder&lt;/code&gt;. This builder will create query parameters to start our stream with. Here, we are adding two additional piece of information to each tweet&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;AddExpansion("author_id")&lt;/code&gt; will request the author’s id for each tweet streamed. This is useful if you are keeping track of users who are tweeting.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;AddTweetField("created_at")&lt;/code&gt; will request the time the tweet was tweeted. This is useful if you need to sort tweets chronologically.
You can learn more about the available &lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/filtered-stream/api-reference/get-tweets-search-stream"&gt;stream expansions here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then we start the stream with our expansions using &lt;code&gt;api.StartStream&lt;/code&gt;. This method will start a long running GET request to twitter’s streaming endpoint. The request is parsed incrementally throughout the duration of the network request. If you are interested in learning more about how to consume streaming data from twitter, then you should read their documentation &lt;a href="https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data."&gt;Consuming Streaming Data&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consuming-the-stream"&gt;
  &lt;/a&gt;
  Consuming the Stream
&lt;/h2&gt;

&lt;p&gt;Each tweet that is processed in our long running GET request is sent to a go channel. We &lt;code&gt;range&lt;/code&gt; over this channel to process each tweet and check for errors from twitter. The stream will stop when we invoke &lt;code&gt;api.StopStream&lt;/code&gt;, then we skip the remaining part of the loop, return to the top and wait for a&lt;code&gt;close&lt;/code&gt; signal from the channel.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;   &lt;span class="c"&gt;// Start processing data from twitter after starting the stream&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="c"&gt;// Handle disconnections from twitter&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"got error from twitter: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="c"&gt;// Stop the stream and wait for the channel to close on the next iteration.&lt;/span&gt;
            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c"&gt;// Here I am printing out the text.&lt;/span&gt;
        &lt;span class="c"&gt;// You can send this off to a queue for processing.&lt;/span&gt;
        &lt;span class="c"&gt;// Or do your processing here in the loop&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Twitter’s servers attempt to hold the stream connection indefinitely. The error from twitter is made available in the stream. Disconnections can occur from several possible reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A streaming server is restarted on the Twitter side. This is usually related to a code deploy and should be generally expected and designed around.&lt;/li&gt;
&lt;li&gt;Your account exceeded your daily/monthly quota of Tweets.&lt;/li&gt;
&lt;li&gt;You have too many active redundant connections.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.twitter.com/en/docs/twitter-api/tweets/volume-streams/integrate/handling-disconnections"&gt;More disconnect reasons can be found here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#anticipating-disconnects-from-twitter"&gt;
  &lt;/a&gt;
  Anticipating Disconnects from Twitter
&lt;/h2&gt;

&lt;p&gt;It’s important to maintain the connection to Twitter as long as possible because missing relevant information in your stream can create poor datasets. It should be expected that disconnections will occur and reconnection logic be built to handle disconnections from twitter&lt;/p&gt;

&lt;p&gt;We can build reconnection logic using &lt;code&gt;twitterstream&lt;/code&gt;’s api and a &lt;code&gt;defer&lt;/code&gt; statement. &lt;a href="https://github.com/Fallenstedt/twitterstream/blob/master/example/stream_forever.go"&gt;A full example of handling reconnects can be found here&lt;/a&gt;. Below is a snippet&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// This will run forever&lt;/span&gt;
&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;initiateStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Starting Stream"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Start the stream&lt;/span&gt;
    &lt;span class="c"&gt;// And return the library's api&lt;/span&gt;
    &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;fetchTweets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// When the loop below ends, restart the stream defer initiateStream()&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;initateStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// Start processing data from twitter&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;range&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"got error from twitter: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StopStream&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;tweet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StreamDataExample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Stopped Stream"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After we have started the stream and before we start processing the tweets, we &lt;code&gt;defer&lt;/code&gt; the method itself. This will handle reconnections to twitter whenever the messages channel closes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h2&gt;

&lt;p&gt;I hope you find this library useful in streaming tweets from twitter. Building this library was a challenge, and I learned how Go’s concurrency model works. If you liked this post, follow me on &lt;a href="https://twitter.com/Fallenstedt"&gt;twitter&lt;/a&gt; as I document my journey in the software world.&lt;/p&gt;

</description>
      <category>go</category>
      <category>opensource</category>
      <category>twitter</category>
    </item>
    <item>
      <title>What a working day looks like as a (junior) developer</title>
      <author>𝕁𝕦𝕝𝕚𝕒 👩🏻‍💻</author>
      <pubDate>Thu, 30 Dec 2021 19:38:57 +0000</pubDate>
      <link>https://dev.to/yuridevat/what-a-working-day-looks-like-as-a-junior-developer-1j63</link>
      <guid>https://dev.to/yuridevat/what-a-working-day-looks-like-as-a-junior-developer-1j63</guid>
      <description>&lt;p&gt;Something I always wondered about on my path to becoming a developer was, what would it be like to work at a company? What does a typical day look like? I'm sure many of you ask yourselves these questions all the time, so I'd like to show you what my work day (at a large company) looks like.&lt;/p&gt;

&lt;p&gt;I got my first job in the technical field 3 months ago. I was very happy, and also very curious how it will be to work in a real company. And finally I would get to know it.&lt;/p&gt;

&lt;p&gt;Before I started working, my daily life looked like this: Wake up, go to the computer, read some articles that could be useful for one of my side projects, and then work my side projects. Of course, the hours I spent programming each day varied, some days I spent only 3 hours programming, other days I spent up to ten hours (especially when I was trying to fix a bug, you know how that feels 🤪).&lt;/p&gt;

&lt;p&gt;And the fascinating thing is that little has actually changed since I've had the job, although I now talk/write to people I'm working with on a project from time to time. Currently, I'm working remotely because of the pandemic, and that won't change much in the future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-initial-phase"&gt;
  &lt;/a&gt;
  The initial phase
&lt;/h2&gt;

&lt;p&gt;At first, I didn't want to work remotely. After being at home for so long, I was glad to have a reason to go outside again, to go to the company, to meet people, to talk. But after a few days, I realized how great the benefits are of working from home. (No wasting time making myself "pretty", no two-hour commutes, no fast food, no unproductive breaks). I can work between 6am and 10pm, on the basis of trust that I'm productive ~8 hours per day.&lt;/p&gt;

&lt;p&gt;In the beginning, I had to learn Angular 👀 and Java Spring Boot. Therefore, apart from the daily scrum meetings (which will be explained later), I was sort of on my own in learning and adapting these two languages. After two months, I started working on some internal projects we have to actively apply my knowledge. Also like my side projects, I program with Visual Studio Code, push my code (if it relates to a project) to GitLab from where I get my issues and assign them to me. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-a-project"&gt;
  &lt;/a&gt;
  Starting a project
&lt;/h2&gt;

&lt;p&gt;I work in a large company. We provide IT solutions for other companies, so each project is unique and each project needs its own team to apply for if you are interested in that project and want to work in that team. But the interviews are more about seeing if a member fits into the team, to harmonize with everyone, because for the time of the project this should not stand in the way of a Scrum team. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scrum"&gt;
  &lt;/a&gt;
  Scrum
&lt;/h2&gt;

&lt;p&gt;Scrum is a very good keyword here. We work with &lt;a href="https://www.scrum.org/"&gt;the Scrum framework&lt;/a&gt; (as do many other companies, especially in tech), so it's good to know about Scrum before applying for jobs. What does Scrum mean?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Scrum method is a framework for agile product development and agile project management. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every day, the developers on the team have a Daily Scrum Meeting of no more than 15 minutes to talk about, for example, what someone did yesterday, what someone is up to today, obstacles, successes, etc. This meeting takes place every day at the same time.&lt;/p&gt;

&lt;p&gt;Every two weeks we have a sprint planning meeting to discuss the topics (sprint backlog) that we are most likely to solve in the next 2 weeks out of all the open topics (product backlog). Each developer chooses the topics they want to work on.&lt;/p&gt;

&lt;p&gt;On each day, I work on my topic until it is done (meets the definition of done). The first thing I always do at the beginning of the day is to google for a solution to my problem. Yes, Googling 📲. &lt;/p&gt;

&lt;p&gt;It's like you read over and over again on the internet: Google was, is, and always will be your best friend when trying to solve a problem. So don't be afraid to use it, even when pair programming during an interview.&lt;/p&gt;

&lt;p&gt;Furthermore, I read articles about the language I'm programming in to improve my code, or watch tutorials about my issue on YouTube. So, I do the exact same things like I do when working on my side projects.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#projects"&gt;
  &lt;/a&gt;
  Projects
&lt;/h2&gt;

&lt;p&gt;When you work on a project, the requirements may change with each project. Some projects may require you to work on-site at the company, at a specific start and end time. The programming languages you work with may also vary. Also, the duration of a project can vary from 1 month to 2-3 years. This makes working in a company really interesting. I really like this way of working. It makes the experience exciting and fulfilling. &lt;/p&gt;

&lt;p&gt;🔜 My first project, which starts in January, will still take place remotely and my way of working will hardly differ from the way I've been working so far. I am really excited, but I'm also already excited to see what the next project will look like too.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Map9cAA0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.google.com/uc%3Fexport%3Ddownload%26id%3D166Ecq6uBl61U14OUlkHOHIBv2ArKoumJ" alt="Thank you" width="64" height="64"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for your reading and time. I really appreciate it!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>codenewbie</category>
      <category>devjournal</category>
    </item>
    <item>
      <title>CryptoPals Crypto Challenges Using Rust: Fixed XOR</title>
      <author>Naveen Sahu</author>
      <pubDate>Thu, 30 Dec 2021 19:29:37 +0000</pubDate>
      <link>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-fixed-xor-4e96</link>
      <guid>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-fixed-xor-4e96</guid>
      <description>&lt;p&gt;This is &lt;a href="https://cryptopals.com/sets/1/challenges/2"&gt;Challenge 2&lt;/a&gt; of &lt;a href="https://cryptopals.com"&gt;Cryptopals&lt;/a&gt; challenges implemented in Rust language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Given two hex encoded strings of similar length we have to return xor of it.&lt;br&gt;
&lt;a href="https://en.wikipedia.org/wiki/Exclusive_or"&gt;XOR (or, Exclusive OR)&lt;/a&gt; is a binary operation (like AND, OR) on bits. XOR gives true/1 as when the two inputs differ, otherwise false/0:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;|  A  |  B  |XOR(A^B)|
|-----|-----|--------|
|  0  |  0  |    0   |
|  0  |  1  |    1   |
|  1  |  0  |    1   |
|  1  |  1  |    0   |
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, theoretically you can convert hex to binary and xor them to get output, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;10110011 ^ 01101011 = 11011000
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To solve the challenge with Rust, we can make use of &lt;code&gt;hex&lt;/code&gt; crate to decode hex strings to bytes vec, zip the two vecs, then perform xor byte by byte to get XORed bytes. And finally encode xored bytes to hex:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use hex::{decode, encode};

pub fn fixed_xor(hex1: &amp;amp;str, hex2: &amp;amp;str) -&amp;gt; String {
    let bytes1 = decode(hex1).unwrap();
    let bytes2 = decode(hex2).unwrap();

    let xor_bytes: Vec&amp;lt;u8&amp;gt; = bytes1
        .iter()
        .zip(bytes2.iter())
        .map(|(&amp;amp;b1, &amp;amp;b2)| b1 ^ b2)
        .collect();
    encode(xor_bytes)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we're done.&lt;/p&gt;

&lt;p&gt;See the code on &lt;a href="https://github.com/theNvN/cryptopals-crypto-challenges/blob/master/src/set_1_basics/c2_fixed_xor.rs"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Find me on:&lt;br&gt;
Twitter - &lt;a href="https://twitter.com/heyNvN"&gt;@heyNvN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://naveeen.com"&gt;naveeen.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>rust</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>I Do Not Know Object Oriented Programming!</title>
      <author>Opeyemi Stephen</author>
      <pubDate>Thu, 30 Dec 2021 19:29:08 +0000</pubDate>
      <link>https://dev.to/resourcefulmind/i-do-not-know-object-oriented-programming-1bim</link>
      <guid>https://dev.to/resourcefulmind/i-do-not-know-object-oriented-programming-1bim</guid>
      <description>&lt;p&gt;If you are a beginner who is currently getting their butts whooped by JavaScript or swimming in tutorial hell, I'm quite sure you must have read the title of this article and given me an imaginary hug because you can also resonate. Truth is, I do not have a ready made blueprint to help you understand OOPs, but as I once read somewhere that the best way to learn is to teach...so here I am, Fun and Janae Monelle's "We Are Young" playing in the background, about to share my own personal notes about Object Oriented Programming. I hope this helps a newbie somewhere. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS: I would welcome contributions, resources and comments that would help other newbies. We can burn brighter than the sun if we all help each other.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So the first thing we all need to know is the conventional definition...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Object-oriented programming combines a group of data attributes with functions or methods into a unit called an "object. Multiple independent objects may also be instantiated—or represented—from the same class and interact with each other in complex ways.&lt;/em&gt;&lt;/strong&gt;" &lt;/p&gt;

&lt;p&gt;Typically, OOP is class-based, which means that a class defines the data attributes and functions as a blueprint for creating objects, which are instances of the class. &lt;/p&gt;

&lt;p&gt;I happen to love cars alot so my first simple example would be to consider a class representing a car. The "car" class will contain  attributes to represent information such as the car's name, model, number of wheels, color, etc. Maybe this would be more familiar;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let car = {
     name: "Mercedes Benz",
     model: "CLA 4DR Coupe", 
     numOfWheels: 4, 
     chassisNum: 0123456789, 
     color: "white"
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;I'd like to go on and talk about what everyone refers to as the 4 basics of Object Oriented Programming which would be Encapsulation, Abstraction, Inheritance and Polymorphism...but before I start throwing these words around, wouldn't it be better if we really understood how to use OOPs and then saw these 4 basics in action for ourselves?&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;We already successfully created our first class with their different properties and values. We can access the properties and subsequently, the values in our "car" object using the &lt;strong&gt;Dot Notation&lt;/strong&gt;. Take a look at the code below;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;console.log(car.model); //"CLA 4DR Coupe"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the code above, we used the &lt;strong&gt;dot notation&lt;/strong&gt; on the object named &lt;strong&gt;"car"&lt;/strong&gt; and then followed by the property &lt;strong&gt;"model"&lt;/strong&gt; to access the value which is &lt;strong&gt;"CLA 4DR Coupe"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cool right?&lt;/em&gt;  We might have private data in the class, such as "chassisNum" that should not be exposed to other objects in the program. By encapsulating this data member as a private variable in the class, outside code would not have direct access to it, and it would remain safe within that person’s object. &lt;/p&gt;

&lt;p&gt;In OOP, we encapsulate by binding the data and functions which operate on that data into a single unit, the class. &lt;/p&gt;

&lt;p&gt;By doing so, we can hide private details of a class from the outside world and only expose functionality that is important for interfacing with it. When a class does not allow calling code access to its private data directly, we say that it is well encapsulated. &lt;strong&gt;There there, you just understood Encapsulation.&lt;/strong&gt;&lt;/p&gt;




&lt;p&gt;It will be pointless to learn about OOPs without knowing what &lt;strong&gt;METHODS&lt;/strong&gt; are. &lt;strong&gt;Methods&lt;/strong&gt; are a special type of property that objects have. They are simply properties that are functions. They add a different behavior to an object. I like to think that they make objects a little more flexible in doing stuff. For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let car = {
  name: "Range Rover Evogue", 
  price: 70000, 
  describeCar: function() {
    return "That car speeding on the highway is a " + car.name + " and it costs " + car.price + " USD.";}
};

car.describeCar(); //"That car speeding on the highway is a Range Rover Evogue and it costs 70000 USD."
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The block of code above has a method &lt;code&gt;describeCar&lt;/code&gt; which is a function and returns a statement telling us the name and Price of the car.(BTW, I have no idea about the price of the Range Rover).&lt;br&gt;
Notice that the method accessed the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; property in the return statement using the &lt;code&gt;car.name&lt;/code&gt; and &lt;code&gt;car.price&lt;/code&gt;. Now think about the many awesome things you can do with Methods...sweet right? &lt;/p&gt;



&lt;p&gt;There is another way to access the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; properties though...yeah, you probably heard about it...the &lt;strong&gt;"this"&lt;/strong&gt; keyword (At this poin, you're probably like...who was behind naming these coding concepts, because what is literally "this" right? lol)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"this"&lt;/strong&gt; in my own opinion, which I would like to think is shared by others, exists to make code reusable and very much easier to read.&lt;/p&gt;

&lt;p&gt;In the last example, we had a method &lt;code&gt;describeCar&lt;/code&gt; which used &lt;code&gt;car.name&lt;/code&gt; and &lt;code&gt;car.price&lt;/code&gt; dot notation to access the values for the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; property within the return statement.&lt;br&gt;
Recall,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; describeCar: function() {
    return "That car speeding on the highway is a " + car.name + " and it costs " + car.price + " USD.";}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although, it is a very correct way of accessing the object &lt;em&gt;"car"&lt;/em&gt; 's property, have you ever asked yourself what happens when you have accessed this object and its properties on lines 235, 410, 720, 850, 1100, 1425, 1658, 1780 and 3800 of your codebase and for some reason, the variable name changes from &lt;code&gt;"car"&lt;/code&gt; to &lt;code&gt;"automobile"&lt;/code&gt; while working for a large company such as Mercedes?&lt;/p&gt;

&lt;p&gt;Your work gets extra stressful as you have to update all those lines of code which references the original name that was changed and we both know how stressful that can get. This is where the &lt;strong&gt;&lt;code&gt;this&lt;/code&gt;&lt;/strong&gt; keyword comes in. You can have your initial code in our last example re-written like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let car = {
  name: "Range Rover Evogue", 
  price: 70000, 
  describeCar: function() {
    return "That car speeding on the highway is a " + this.name + " and it costs " + this.price + " USD.";}
};

car.describeCar();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we have barely scratched the surface and &lt;code&gt;this&lt;/code&gt; is a very deep and sometimes complicated subject and the above is definitely not the only way it can be used. Here, we just used &lt;code&gt;this&lt;/code&gt; in referring to the object that the method &lt;code&gt;describeCar&lt;/code&gt; is associated with, which is &lt;code&gt;car&lt;/code&gt;. By virtue of this, if the object variable &lt;code&gt;car&lt;/code&gt; is changed to &lt;code&gt;automobile&lt;/code&gt; or even  &lt;code&gt;locomotive&lt;/code&gt;, it is not necessary to find all the references to &lt;code&gt;car&lt;/code&gt; in the code. There you go...easier and reusable across board. &lt;/p&gt;

&lt;p&gt;Now that we have got that out of the way, let's be civil engineers for a bit and talk about Constructor Functions(this is me trying to make a joke that's not funny btw)...&lt;/p&gt;




&lt;p&gt;Now, imagine that you are seeing the function below for the first time as a beginner...which is probably what's happening right now;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Truck() {
  this.name = "Ford Ranger 2018";
  this.color = "Black";
  this.price = 100000;
  this.numWheels = 4;
  this.yearOfProduction = 2018;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looks weird right? Because it did look weird to me when I looked at it for the first time ever too. Functions are supposed to return a statement or value or whatever else you read up yeah? It also looks like an object or even a method but methods ar always inside the object and this isn't how "normal" objects are written...Don't fret, &lt;strong&gt;this is a Constructor Function&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Constructors are functions that create new objects.&lt;/em&gt;&lt;/strong&gt; They define properties and behaviors that will belong to the new object. What this means is that like the example above, functions written that way will create a new object called &lt;strong&gt;"Truck"&lt;/strong&gt; and append the &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;numOfWheels&lt;/code&gt; and &lt;code&gt;yearOfProduction&lt;/code&gt; properties and their corresponding values to the object. The &lt;code&gt;this&lt;/code&gt; refers to the new object that has been created.&lt;/p&gt;

&lt;p&gt;Take note that the &lt;code&gt;Truck&lt;/code&gt; object was defined with a &lt;em&gt;capital letter&lt;/em&gt;. Constructors are defined this way to differentiate them from other functions that are not constructors and will not return values like other functions would. &lt;/p&gt;

&lt;p&gt;And as usual, a new problem will always arise from an existing one...what if we want to create a new object which will have the same properties as our initial &lt;code&gt;"Truck"&lt;/code&gt; constructor from the our previous example? We simply add the following line of code beneath the previous code block like so;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let fordTruck = new Truck();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt; operator will instruct JavaScript to create a new copy of the &lt;strong&gt;&lt;code&gt;Truck&lt;/code&gt;&lt;/strong&gt; object called &lt;strong&gt;&lt;code&gt;fordTruck&lt;/code&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Take note that if you do now include **&lt;code&gt;new&lt;/code&gt;&lt;/strong&gt;, you will not get the result as no new object will be created even if you troubleshoot and console.log from here to Bethlehem** &lt;/p&gt;

&lt;p&gt;So ultimately, if you type &lt;code&gt;fordTruck.name&lt;/code&gt; in your console, the result will give the value of our initial Truck's &lt;code&gt;this.name&lt;/code&gt; because &lt;code&gt;fordTruck&lt;/code&gt; now has all the properties of &lt;code&gt;Truck&lt;/code&gt;.&lt;/p&gt;




&lt;p&gt;Now you know what constructors do, but if you are the obsrvant genius I know you are, then you would notice that when we created the new constructor &lt;code&gt;fordTruck&lt;/code&gt;, it took the &lt;code&gt;name&lt;/code&gt; property along with the other properties such as &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;numOfWheels&lt;/code&gt; and yearOfProduction. We can keep changing the names as we go by if you want different values for each new &lt;code&gt;Truck&lt;/code&gt; but supposing you are in charge of keeping track of hundreds of thousands of trucks produced at the Ford Plant? &lt;/p&gt;

&lt;p&gt;You can change or easily create new instances of the Trucks by designing the initial &lt;code&gt;Truck&lt;/code&gt; constructor to accept whatever parameters might need to be changed like the name of the truck, the price, the color and still leave the other values to remain the same if you want. &lt;strong&gt;So we re-write the original constructors to accept arguments as shown below;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Truck(name, price, color) {
   this.name = name;
   this.color = color;
   this.price = price;
   this.numWheels = 4;
   this.yearOfProduction = 2018;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we can say;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;let fourWheel = new Truck("Ranger", 175000, "gray");&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you do this, you create a new instance of &lt;code&gt;Truck&lt;/code&gt; which will be named &lt;code&gt;fourWheel&lt;/code&gt; and will set the properties to the new properties of the new &lt;code&gt;fourWheel&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;With the above, the constructor function is now very flexible as it can accept parameters and we can define new properties for each truck when they are created. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Always keep in mind that constructor functions group objects together based on shared characteristics and behavior and define a blueprint that automates their creation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you want to check if the new object you created is an instance of the constructor, use the &lt;code&gt;instanceof&lt;/code&gt; operator.&lt;/p&gt;

&lt;p&gt;For instance, in our last example above, &lt;/p&gt;

&lt;p&gt;&lt;code&gt;fourWheel instanceof Truck;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It will return &lt;code&gt;true&lt;/code&gt; because the &lt;code&gt;fourWheel&lt;/code&gt; object was created using the &lt;code&gt;Truck&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;But if we say,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let saloonCar = {
   name: "Ford Focus", 
   color: "white", 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we check the same &lt;code&gt;saloonCar instanceof Truck;&lt;/code&gt;, it will return &lt;code&gt;false&lt;/code&gt; because &lt;code&gt;saloonCar&lt;/code&gt; was not created using the &lt;code&gt;Truck&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;Also, the &lt;code&gt;Truck&lt;/code&gt; constructor defines five properties (name, color, price, numOfWheels, yearOfProduction) which are defined directly inside it. These properties are called &lt;em&gt;"Own Properties"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let's assume we are setting up 3 new instances of &lt;code&gt;Truck&lt;/code&gt; called &lt;code&gt;firstCar&lt;/code&gt;, &lt;code&gt;secondCar&lt;/code&gt; and &lt;code&gt;thirdCar&lt;/code&gt; respectively, we would have something like this;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let firstCar = new Truck("edge", "red", 30000);
let secondCar = new Truck("broncos", "black", 120000);
let thirdCar = new Truck("focus", "blue", 65000);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The other two properties &lt;code&gt;numOfWheels&lt;/code&gt; and &lt;code&gt;yearOfProduction&lt;/code&gt; will remain unchanged as no new parameters were passed in for those. &lt;/p&gt;

&lt;p&gt;All 5 properties are referred to as &lt;strong&gt;Own Properties&lt;/strong&gt; because they are defined directly on the instance object &lt;code&gt;Truck&lt;/code&gt;. This means that &lt;code&gt;firstCar&lt;/code&gt;, &lt;code&gt;secondCar&lt;/code&gt; and &lt;code&gt;thirdCar&lt;/code&gt; all have their own separate copy of these properties and every other instance of &lt;code&gt;Truck&lt;/code&gt; will also have their own copy of these properties.&lt;/p&gt;

&lt;p&gt;What is the essence of all of this and what might we do with the Own Property you might ask...well we could push them to an empty array while writing our code like so;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let ownProps = [];
for(let property in secondCar) {
   if(secondCar.hasOwnProperty(property)) {
       ownProps.push(property);
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So that when we &lt;code&gt;console.log(ownProps)&lt;/code&gt;, it will print the different properties from &lt;code&gt;secondCar&lt;/code&gt; into the empty &lt;code&gt;ownProps&lt;/code&gt; array.&lt;/p&gt;




&lt;p&gt;If you take a close look at our code, you should definitely see that &lt;code&gt;numOfWheels&lt;/code&gt; has the same value for all instances of &lt;code&gt;Truck&lt;/code&gt;. In other words, it is sort of a duplicated variable. &lt;/p&gt;

&lt;p&gt;It is not much of a problem if you have only a couple of instances or say 5 instances of the original car object...but...you will likely be working at the Ford HQ and using your code to keep track of millions of 4-wheeelers which means millions of instances. &lt;/p&gt;

&lt;p&gt;In situations like the above-listed, a &lt;strong&gt;&lt;code&gt;prototype&lt;/code&gt;&lt;/strong&gt; comes in very handy. What does the prototype do you might ask? Simple..A &lt;strong&gt;prototype&lt;/strong&gt; shares a particular property amongst all instances of the original object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Truck.prototype.numOfWheels = 4;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now all instances of &lt;code&gt;Truck&lt;/code&gt; will have the &lt;code&gt;numOfWheels&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;prototype&lt;/code&gt; for &lt;code&gt;firstCar&lt;/code&gt; and &lt;code&gt;secondCar&lt;/code&gt; is part of the &lt;code&gt;Truck&lt;/code&gt; constructor as &lt;code&gt;Truck.prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In summary, when it comes to properties, own properties will always be defined directly on the object itself while prototype properties will be defined on the prototype.&lt;/p&gt;

&lt;p&gt;So what if we have to add more than one property to our prototype? You already know that would be very cumbersome of we had to do that one after another. A more efficient way would be to set the prototype to a new object that already contains the properties. We have this below;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Truck.prototype = {
   numOfWheels: 4, 
   sound: function() {
     console.log("Vroom! Vroom!!")
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then we want to add a &lt;code&gt;quality&lt;/code&gt; method to the prototype. All the properties can be added at once in this manner like so;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Truck.prototype = {
   numOfWheels: 4, 
   sound: function() {
     console.log("Vroom! Vroom!!")
   },  
   sound: quality() {
     console.log("It is a super fast " + this.name);
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NEVER FORGET&lt;/strong&gt; to always define the constructor property whenever a prototype is manually set to a new object. Why? Well the reason is quite simple, it is beacuse when you set the prototype manually, it will erase the constructor property and if you check which constructor function created the instance, the results will be false.&lt;/p&gt;

&lt;p&gt;Summarily, for a better understanding of the prototype chain, you need to always take note of the following;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All objects in JavaScript have a prototype(save for a few exceptions).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The prototype of an object is an object. If this confuses you, you can bet it confused me too. You should check out &lt;a href="https://javascript.info/search/?query=prototype&amp;amp;type=article"&gt;Javascript.info&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A prototype can also have its own prototype because a prototype is an object. For instance;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Car(name) {
  this.name = name;
}

typeof Car.prototype; //the result for this will be "object"

let bugatti = new Car("Veyron");
    bugatti.hasOwnProperty("name");
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the above, &lt;br&gt;
&lt;code&gt;Car&lt;/code&gt; = supertype for &lt;code&gt;bugatti&lt;/code&gt;&lt;br&gt;
&lt;code&gt;bugatti&lt;/code&gt; = subtype for &lt;code&gt;Car&lt;/code&gt;&lt;br&gt;
&lt;code&gt;Car&lt;/code&gt; = supertype for &lt;code&gt;bugatti&lt;/code&gt;&lt;br&gt;
Object is a supertype for both &lt;code&gt;Car&lt;/code&gt; and &lt;code&gt;bugatti&lt;/code&gt;&lt;br&gt;
Object is a supertype for all objects in JavaScript, therefore, any object can use the &lt;code&gt;hasOwnProperty&lt;/code&gt; method.&lt;/p&gt;



&lt;p&gt;There's another important principle to be observed before I take a pause on this is the principle of &lt;strong&gt;Inheritance&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Repeated code is usually a problem because any change in one place requires fixing the code in multiple placesbwhich would just give devs more work and make them more likely to make errors. Now let's say we have two constructor functions which I will name after two of the biggest artistes in Africa(just because I can and we don't have to always be boring);&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Wizkid.prototype = {
   constructor: Wizkid, 
   describe: function() {
      console.log("My name is " + this.name +  " and I always come late to my concerts in Nigeria");
  }
};

Davido.prototype = {
   constructor: Davido, 
   describe: function() {
      console.log("My name is " + this.name + " and I always come late to my concerts in Nigeria");
  }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the &lt;code&gt;describe&lt;/code&gt; method is repeated in two places and we can use what we call the &lt;strong&gt;DRY principle&lt;/strong&gt; (Don't Repeat Yourself) to refine this code by creating a supertype called &lt;code&gt;**Artistes**&lt;/code&gt; like so;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function Artiste() {};

Artiste.prototype = {
    constructor: Artiste, 
    describe: function() {
       console.log("My name is " + this.name + " and I always come late to my concerts in Nigeria");
   }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since you have the above supertype &lt;code&gt;Artiste&lt;/code&gt; which includes the &lt;code&gt;describe&lt;/code&gt; method, you can then remove the &lt;code&gt;describe&lt;/code&gt; method from &lt;code&gt;Wizkid&lt;/code&gt; and &lt;code&gt;Davido&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Wizkid.prototype = {
  constructor: Wizkid
};

Davido.prototype = {
  constructor: Davido
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There you go, you just successfully created a supertype called &lt;code&gt;Artiste&lt;/code&gt; that defined behaviors shared by all musicians/artistes.&lt;/p&gt;

&lt;p&gt;I will stop here for now...you can learn more about the basics of Object Oriented Programming as well as advanced concepts on &lt;a href="https://javascript.info/search/?query=object+oriented+programming&amp;amp;type=article"&gt;Javascript.info&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also chip in via the comments for other newbies to learn more as I have barely even scratched the surface. Godspeed and Happy New Year in advance to you and yours.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Top 7 Dev Tools for AI Startups</title>
      <author>Kelsey Foster</author>
      <pubDate>Thu, 30 Dec 2021 18:47:35 +0000</pubDate>
      <link>https://dev.to/kelseyefoster/top-7-dev-tools-for-ai-startups-4j6p</link>
      <guid>https://dev.to/kelseyefoster/top-7-dev-tools-for-ai-startups-4j6p</guid>
      <description>&lt;p&gt;There is no shortage of dev tools to play around with these days. While many offer invaluable time-saving and organizational advantages, it can be difficult to sift through all of the options to figure out what works best for you. &lt;/p&gt;

&lt;p&gt;As an &lt;a href="https://www.assemblyai.com/"&gt;AI startup&lt;/a&gt;, our Deep Learning and engineering teams have tried each of these tools as we work to optimize our &lt;a href="https://www.assemblyai.com/blog/the-top-free-speech-to-text-apis-and-open-source-engines/"&gt;Speech-to-Text API&lt;/a&gt;. To help you figure out which of the tools might suite your work best, we’ve created a short list of our go-to, and most valuable, dev tools–including Neovim, Bugsnag, Tailscale, Github’s Command Line Client, Comet-ml, Jupyter-notebook, and pandas. &lt;/p&gt;

&lt;p&gt;Here’s what our team had to say about each one:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-7-dev-tools-for-ai-startups"&gt;
  &lt;/a&gt;
  Top 7 Dev Tools for AI Startups
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#1-neovim"&gt;
  &lt;/a&gt;
  1. Neovim
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://neovim.io/"&gt;Neovim&lt;/a&gt; is a hyperextensible, Vim-based text editor which is fully compatible with Vim’s editing model and Vimscript v1. Neovim has strong defaults, one build-type and one command, a built-in terminal emulator, and modern terminal features like bracketed paste, focus events, and cursor styling. All these work together to make your daily work life easier.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-bugsnag"&gt;
  &lt;/a&gt;
  2. Bugsnag
&lt;/h2&gt;

&lt;p&gt;As an error monitoring and reporting tool, &lt;a href="https://www.bugsnag.com/"&gt;Bugsnag&lt;/a&gt; is invaluable for our research team. Basically, Bugsnag acts as your command center for both error monitoring and app stability. When you encounter an error, you can run end-to-end diagnostics to replicate it and determine the fix. Bugsnag’s UI is also intuitive and easy to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-tailscale"&gt;
  &lt;/a&gt;
  3. Tailscale
&lt;/h2&gt;

&lt;p&gt;Security is top priority for any startup, and &lt;a href="https://tailscale.com/"&gt;Tailscale&lt;/a&gt; makes it easy to achieve peace of mind. Top features of this zero-config VPN include support for SSO, multi-factor authentication, easy deauthorization when needed, a stable IP and auto-assigned domain, and an intuitive interface. Bottom line, Tailscale makes it infinitely easier for us to access protected resources like our databases. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-githubs-command-line-client"&gt;
  &lt;/a&gt;
  4. GitHub’s Command Line Client
&lt;/h2&gt;

&lt;p&gt;Our team loves using &lt;a href="https://github.com/cli/cli"&gt;Github’s Command Line Client&lt;/a&gt; for increased efficiency and time saving. The Command Line Client works by bringing pull requests, issues, and more right to the terminal next to where you’re already working, so you can see your entire GitHub workflow in one place. You can also call GitHub to script almost any action and set a custom alias for commands. It can install directly on Windows, Linux, or macOS, and is also available for repositories hosted on GitHub.com and GitHub Enterprise Server 2.20+.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-cometml"&gt;
  &lt;/a&gt;
  5. Comet-ml
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.comet.ml/site/"&gt;Comet-ml&lt;/a&gt; compares doing Machine Learning with its product to “building with legos” because it lets you customize the platform in a way that works best for you. We love using it because it lets you manage, visualize, and optimize your entire Machine Learning lifecycle. You can also easily compare experiments to help you better understand differences in how your models perform and even get alerts when something goes wrong or needs to be debugged. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-jupyternotebook"&gt;
  &lt;/a&gt;
  6. Jupyter-notebook
&lt;/h2&gt;

&lt;p&gt;As part of &lt;a href="https://jupyter.org/"&gt;Project Jupyter&lt;/a&gt;, Jupyter Notebook facilitates easy computational-document creation and sharing. We love that it offers multilingual support – including Python, Julia, R, and Scala – and lets you share notebooks via GitHub, email, or Dropbox. You can also integrate data from other data tools like pandas, scikit-learn, TensorFlow, Apache Spark, and more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-pandas"&gt;
  &lt;/a&gt;
  7. pandas
&lt;/h2&gt;

&lt;p&gt;Built on top of Python, &lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt; is an open source data analysis and manipulation tool, similar to NumPy. While it relies on NumPy arrays for much of its manipulation and computation, pandas makes it easier to visualize and explore data, helping our team make better sense of the large amounts of data we work with on a daily basis. &lt;/p&gt;

</description>
      <category>ai</category>
      <category>startup</category>
      <category>programming</category>
    </item>
    <item>
      <title>CryptoPals Crypto Challenges Using Rust: Convert hex to base64</title>
      <author>Naveen Sahu</author>
      <pubDate>Thu, 30 Dec 2021 18:41:33 +0000</pubDate>
      <link>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-convert-hex-to-base64-jkc</link>
      <guid>https://dev.to/thenvn/cryptopals-crypto-challenges-using-rust-convert-hex-to-base64-jkc</guid>
      <description>&lt;p&gt;This is the &lt;a href="https://cryptopals.com/sets/1/challenges/1"&gt;Challenge 1&lt;/a&gt; of &lt;a href="https://cryptopals.com/"&gt;CryptoPals&lt;/a&gt; challenges implemented using Rust language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#context"&gt;
  &lt;/a&gt;
  Context
&lt;/h2&gt;

&lt;p&gt;Quite simple, we're given a hex string &amp;amp; have to convert it into a base64 encoded format. Basically from one encoding to another.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hex-encoding"&gt;
  &lt;/a&gt;
  Hex Encoding
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Hexadecimal"&gt;Hex&lt;/a&gt; is a base 16 format using 16 symbols &lt;strong&gt;0-9&lt;/strong&gt; and &lt;strong&gt;A-F&lt;/strong&gt;. Each hexadecimal number (i.e. 0-9 &amp;amp; A-F) can be represented (or corresponds to) using 4 bits. Why 4 bits? Because, using 4 bits you can have 2^4 (=16) combinations. So, &lt;code&gt;0000 (binary) = 0 (hex)&lt;/code&gt;, &lt;code&gt;1111 (binary) = F (hex)&lt;/code&gt;. Consequently, two digits of hex need 4 bits. Hence, &lt;code&gt;0010 1101 (binary) = 2D&lt;/code&gt;. &lt;strong&gt;Note that in hex encoding there is no difference between small case letters &amp;amp; capital letters, they both mean same (unlike base64)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now, let's talk about converting an &lt;a href="https://en.wikipedia.org/wiki/ASCII"&gt;ASCII&lt;/a&gt; text to hex. Each ASCII character is 1 byte or 8 bits of size. So, each ASCII character would require 2 digits of hex to represent! So, &lt;strong&gt;Z&lt;/strong&gt; (in ASCII text) is &lt;strong&gt;5A&lt;/strong&gt; in hex, and &lt;strong&gt;0&lt;/strong&gt; (in ASCII text, not number!) is actually &lt;strong&gt;30&lt;/strong&gt; in hex format! You can learn more &lt;a href="https://www.binaryhexconverter.com/ascii-text-to-hex-converter"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#base64-encoding"&gt;
  &lt;/a&gt;
  Base64 Encoding
&lt;/h3&gt;

&lt;p&gt;Similarly, &lt;a href="https://en.wikipedia.org/wiki/Base64"&gt;Base64&lt;/a&gt; is base 64 (duh!) encoding using 64 symbols - &lt;strong&gt;0-9&lt;/strong&gt;, &lt;strong&gt;A-Z&lt;/strong&gt;, &lt;strong&gt;a-z&lt;/strong&gt;, &lt;strong&gt;+&lt;/strong&gt; and &lt;strong&gt;/&lt;/strong&gt;. You might also see &lt;strong&gt;=&lt;/strong&gt; chars appear at the end encoding output but &lt;strong&gt;=&lt;/strong&gt; in base64 is just a padding applied to output to normalize output length to be a multiple of 4. Using similar logic as hex encoding above, we can see that each base64 digit represents 6 bits of data (2^6 = 64).&lt;/p&gt;

&lt;p&gt;Theoretically, to convert hex to base64, we can first convert hex to binary to create a long string of bits (1s &amp;amp; 0s), divide bits into 6 bit chunks &amp;amp; then convert these 6 bit chunks to their corresponding base64 digits.&lt;/p&gt;

&lt;p&gt;However, since we're using Rust, we can simplify by using two nice crates for working with hex &amp;amp; base64 - &lt;code&gt;hex&lt;/code&gt; &amp;amp; &lt;code&gt;base64&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First we'd convert input hex string to raw bytes using &lt;code&gt;hex::decode()&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using hex;

let bytes = hex::decode(input_hex).unwrap();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Encode these bytes to base64 using &lt;code&gt;base64::encode()&lt;/code&gt;:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;using base64;

let output = base64::encode(bytes);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we have the base64 &lt;code&gt;output&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;We can encapsulate it into a nice function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use base64;
use hex;

pub fn convert_hex_to_base64(hex: &amp;amp;str) -&amp;gt; String {
    base64::encode(hex::decode(hex).unwrap())
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is it!&lt;/p&gt;

&lt;p&gt;See the code on &lt;a href="https://github.com/theNvN/cryptopals-crypto-challenges/blob/master/src/set_1_basics/c1_convert_hex_to_base64.rs"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Find me on:&lt;br&gt;
Twitter - &lt;a href="https://twitter.com/heyNvN"&gt;@heyNvN&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://naveeen.com"&gt;naveeen.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>rust</category>
      <category>cryptography</category>
    </item>
    <item>
      <title>How to Build a beautiful FAQ Accordion menu with Html, CSS and JavaScript</title>
      <author>Anjan Shomooder</author>
      <pubDate>Thu, 30 Dec 2021 18:33:05 +0000</pubDate>
      <link>https://dev.to/thatanjan/how-to-build-a-beautiful-faq-accordion-menu-with-html-css-and-javascript-2p68</link>
      <guid>https://dev.to/thatanjan/how-to-build-a-beautiful-faq-accordion-menu-with-html-css-and-javascript-2p68</guid>
      <description>&lt;p&gt;In this blog, you will learn how to build this beautiful Faq accordion menu for your website.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/thatanjan/embed/YzreRQL?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Html&lt;/li&gt;
&lt;li&gt;CSS&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  Html
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Cules Coding Faq&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"faq__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;lorem ipsum dolor sit amet&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./media/expand-button.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"answer__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                Consectetur rerum quidem vitae deleniti facere vitae reprehenderit
                doloremque, deleniti quo fugit? Id magni cupiditate maiores iure quam?
                Quisquam reprehenderit laboriosam veritatis soluta quibusdam! Quas eos ipsa
                soluta eaque earum corporis. Asperiores ipsa rerum labore voluptatibus vero
                Tempore id accusantium assumenda itaque aliquam praesentium Sapiente ipsum
                quos distinctio laboriosam consectetur Dignissimos aut magnam nam eius
                reprehenderit? Id eligendi magni nihil
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                Consectetur rerum quidem vitae deleniti facere vitae reprehenderit
                doloremque, deleniti quo fugit? Id magni cupiditate maiores iure quam?
                Quisquam reprehenderit laboriosam veritatis soluta quibusdam! Quas eos ipsa
                soluta eaque earum corporis. Asperiores ipsa rerum labore voluptatibus vero
                Tempore id accusantium assumenda itaque aliquam praesentium Sapiente ipsum
                quos distinctio laboriosam consectetur Dignissimos aut magnam nam eius
                reprehenderit? Id eligendi magni nihil
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"faq__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                ipsum dolor sit ametlorem ipsum dolor lorem ipsum
            &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./media/expand-button.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"answer__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                Consectetur rerum quidem vitae deleniti facere vitae reprehenderit
                doloremque, deleniti quo fugit? Id magni cupiditate maiores iure quam?
                Quisquam reprehenderit laboriosam veritatis soluta quibusdam! Quas eos ipsa
                soluta eaque earum corporis. Asperiores ipsa rerum labore voluptatibus vero
                Tempore id accusantium assumenda itaque aliquam praesentium Sapiente ipsum
                quos distinctio laboriosam consectetur Dignissimos aut magnam nam eius
                reprehenderit? Id eligendi magni nihil
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"faq__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;lorem ipsum dolor sit amet&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./media/expand-button.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"answer__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                Consectetur rerum quidem vitae deleniti facere vitae reprehenderit
                doloremque, deleniti quo fugit? Id magni cupiditate maiores iure quam?
                Quisquam reprehenderit laboriosam veritatis soluta quibusdam! Quas eos ipsa
                soluta eaque earum corporis. Asperiores ipsa rerum labore voluptatibus vero
                Tempore id accusantium assumenda itaque aliquam praesentium Sapiente ipsum
                quos distinctio laboriosam consectetur Dignissimos aut magnam nam eius
                reprehenderit? Id eligendi magni nihil
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"faq__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;lorem ipsum dolor sit amet&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./media/expand-button.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"answer__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                Consectetur rerum quidem vitae deleniti facere vitae reprehenderit
                doloremque, deleniti quo fugit? Id magni cupiditate maiores iure quam?
                Quisquam reprehenderit laboriosam veritatis soluta quibusdam! Quas eos ipsa
                soluta eaque earum corporis. Asperiores ipsa rerum labore voluptatibus vero
                Tempore id accusantium assumenda itaque aliquam praesentium Sapiente ipsum
                quos distinctio laboriosam consectetur Dignissimos aut magnam nam eius
                reprehenderit? Id eligendi magni nihil
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"faq__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h3&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"question__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;lorem ipsum dolor sit amet&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"close__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./media/expand-button.png"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"answer__section"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
                Consectetur rerum quidem vitae deleniti facere vitae reprehenderit
                doloremque, deleniti quo fugit? Id magni cupiditate maiores iure quam?
                Quisquam reprehenderit laboriosam veritatis soluta quibusdam! Quas eos ipsa
                soluta eaque earum corporis. Asperiores ipsa rerum labore voluptatibus vero
                Tempore id accusantium assumenda itaque aliquam praesentium Sapiente ipsum
                quos distinctio laboriosam consectetur Dignissimos aut magnam nam eius
                reprehenderit? Id eligendi magni nihil
            &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;faq__section&lt;/code&gt; is holding each question with its answer.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;question__header&lt;/code&gt; is the actual part that will be displayed.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;answer__section&lt;/code&gt; will display the answer and it will be hidden by default.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#css"&gt;
  &lt;/a&gt;
  CSS
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@import&lt;/span&gt; &lt;span class="sx"&gt;url('https://fonts.googleapis.com/css2?family=Lato:wght@700&amp;amp;family=Mohave:wght@700&amp;amp;family=Montserrat:wght@100;200;300;400;500;600;700&amp;amp;family=Nothing+You+Could+Do&amp;amp;display=swap')&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;letter-spacing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#272727&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Montserrat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow-x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.faq__section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.question__header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#ff4c00&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.question__title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;flex-grow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.close__section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt; &lt;span class="n"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.close__section&lt;/span&gt; &lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.faq__section.active&lt;/span&gt; &lt;span class="nc"&gt;.close__section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;180deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.answer__section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#171717&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;max-height&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;margin&lt;/span&gt; &lt;span class="m"&gt;0.2s&lt;/span&gt; &lt;span class="n"&gt;ease-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.answer__section&lt;/span&gt; &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.faq__section.active&lt;/span&gt; &lt;span class="nc"&gt;.answer__section&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.answer__section&lt;/code&gt; will be hidden by default. Its &lt;code&gt;max-height&lt;/code&gt; will be 0;&lt;/li&gt;
&lt;li&gt;If a section is expanded then a &lt;code&gt;active&lt;/code&gt; class will be attached to the &lt;code&gt;.faq__section&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;active&lt;/code&gt; class is present then &lt;code&gt;answer__section&lt;/code&gt; will be shown by making the &lt;code&gt;max-height: 700px&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;faqSections&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.faq__section&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;faqSections&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;faqSection&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;faqSection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;faqSection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Explanation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have selected all the Faq sections and looped over them.&lt;/li&gt;
&lt;li&gt;We attached the &lt;code&gt;click&lt;/code&gt; listener to every element and toggle the &lt;code&gt;active&lt;/code&gt; class on every click.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that's it. Now you have a beautiful FAQ section for your website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#shameless-plug"&gt;
  &lt;/a&gt;
  Shameless Plug
&lt;/h2&gt;

&lt;p&gt;I have made a video about how to re-create the SpaceX landing page with vanilla HTML, CSS and, JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/HkOcmKGm0zU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;You will learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Javascript intersection observer to add cool effects&lt;/li&gt;
&lt;li&gt;DOM manipulation&lt;/li&gt;
&lt;li&gt;Aligning elements with css positions.&lt;/li&gt;
&lt;li&gt;How to make responsive websites.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will be a great project to brush up your front end skills.&lt;/p&gt;

&lt;p&gt;If you are interested you can check the video.&lt;/p&gt;

&lt;p&gt;You can also demo the application form &lt;a href="https://thatanjan.github.io/spaceX-landing-page-clone-yt/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/m6IjYZA57es"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Please like and subscribe to &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt;. It motivates me to create more content like this.&lt;/p&gt;

&lt;p&gt;That's it for this blog. I have tried to explain things simply. If you get stuck, you can ask me questions.&lt;/p&gt;

&lt;p&gt;By the way, I am looking for a new opportunity in a company where I can provide great value with my skills. If you are a recruiter, looking for someone skilled in full stack web development and passionate about revolutionizing the world, feel free to contact me. Also, I am open to talking about any freelance project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About me
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#why-do-i-do-what-i-do"&gt;
  &lt;/a&gt;
  Why do I do what I do?
&lt;/h4&gt;

&lt;p&gt;The Internet has revolutionized our life. I want to make the internet more beautiful and useful.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-do-i-do"&gt;
  &lt;/a&gt;
  What do I do?
&lt;/h4&gt;

&lt;p&gt;I ended up being a full-stack software engineer.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-can-i-do"&gt;
  &lt;/a&gt;
  What can I do?
&lt;/h4&gt;

&lt;p&gt;I can develop complex full-stack web applications like social media applications or e-commerce sites. See more of my work from &lt;a href="https://www.thatanjan.me/projects"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#what-have-i-done"&gt;
  &lt;/a&gt;
  What have I done?
&lt;/h4&gt;

&lt;p&gt;I have developed a social media application called &lt;a href="https://con-fession.vercel.app/"&gt;Confession&lt;/a&gt;. The goal of this application is to help people overcome their imposter syndrome by sharing our failure stories.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#screenshot"&gt;
  &lt;/a&gt;
  Screenshot
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g3wyVLL9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/thatanjan/confession/master/screenshots/homepage.png" alt="Homepage" width="880" height="442"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/thatanjan/confession/blob/master/screenshots.md"&gt;More screenshots&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also love to share my knowledge. So, I run a youtube channel called &lt;a href="https://www.youtube.com/channel/UCBaGowNYTUsm3IDaHbLRMYw?sub_confirmation=1"&gt;Cules Coding&lt;/a&gt; where I teach people full-stack web development, data structure algorithms, and many more. So, Subscribe to Cules Coding so that you don't miss the cool stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#want-to-work-with-me"&gt;
  &lt;/a&gt;
  Want to work with me?
&lt;/h2&gt;

&lt;p&gt;I am looking for a team where I can show my ambition and passion and produce great value for them.&lt;br&gt;
Contact me through my email or any social media as &lt;a class="mentioned-user" href="https://dev.to/thatanjan"&gt;@thatanjan&lt;/a&gt;. I would be happy to have a touch with you.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contacts"&gt;
  &lt;/a&gt;
  Contacts
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Email: &lt;a href="mailto:thatanjan@gmail.com"&gt;thatanjan@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;linkedin: &lt;a href="https://linkedin.com/in/thatanjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;portfolio: &lt;a href="https://thatanjan.me/"&gt;anjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Github: &lt;a href="https://github.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (personal): &lt;a href="https://instagram.com/thatAnjan/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Instagram (youtube channel): &lt;a href="https://instagram.com/cules_coding/"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;twitter: &lt;a href="https://twitter.com/thatAnjan"&gt;@thatanjan&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Blogs you might want to read:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/setup-eslint-prettier-with-typescript-and-react"&gt;Eslint, prettier setup with TypeScript and react &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-client-side-rendering"&gt;What is Client-Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/what-is-server-side-rendering"&gt;What is Server Side Rendering?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/everything-you-need-to-know-about-tree-data-structure"&gt;Everything you need to know about tree data structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/13-reasons-why-you-should-use-Nextjs"&gt;13 reasons why you should use Nextjs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.culescoding.space/blog/beginners-guide-to-quantum-computers"&gt;Beginners guide to quantum computers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Videos might you might want to watch:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/s6J2Q2vOhf0"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rSa8sUC8m_4"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/0an2g0lq7LU"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/T-n0mrssDiw"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/kVjOEYKUXxE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>react</category>
      <category>nextjs</category>
      <category>css</category>
    </item>
    <item>
      <title>peviitor.ro - publicul țintă</title>
      <author>Boga Sebastian Nicolae</author>
      <pubDate>Thu, 30 Dec 2021 18:23:36 +0000</pubDate>
      <link>https://dev.to/sebiboga/peviitorro-publicul-tinta-2l89</link>
      <guid>https://dev.to/sebiboga/peviitorro-publicul-tinta-2l89</guid>
      <description>&lt;p&gt;&lt;code&gt;Care este publicul țintă?&lt;/code&gt; este una din cele mai importante întrebări atunci când pornești la drum în implementarea unui proiect nou.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#absolven%C8%9Bi-de-liceu"&gt;
  &lt;/a&gt;
  Absolvenți de liceu
&lt;/h4&gt;

&lt;p&gt;La terminarea unui ciclu liceal, foarte mulți tineri sunt în căutarea unui loc de muncă. Deoarece nu avem un loc in care să găsim toate locurile de muncă într-un singur loc, noi credem ca această categorie de persoane își vor găsi oportunitatea la noi pe motorul de căutare &lt;a href="https://peviitor.ro/"&gt;https://peviitor.ro/&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#absolven%C8%9Bii-de-facultate"&gt;
  &lt;/a&gt;
  Absolvenții de facultate
&lt;/h4&gt;

&lt;p&gt;La finalizarea unei facultăți, proaspeții absolvenți foști studenți își caută un loc de muncă. Deoarece peviitor.ro va integra absolut toate locurile de muncă intr-un singur loc, noi credem ca acest motor de căutare va fi foarte util acestei categorii de persoane.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#studen%C8%9Bii"&gt;
  &lt;/a&gt;
  Studenții
&lt;/h4&gt;

&lt;p&gt;Sunt facultăți care au in programa școlară cerințe că studenții sa urmeze stagii de practică in cadrul unei companii. Motorul de căutare peviitor.ro va agrega inclusiv aceste oportunități de tip stagii de practică oferite de către companii. &lt;/p&gt;

&lt;p&gt;Anumite companii în anumite momente ale anului își deschid poziții noi pentru începători și le numesc INTERNSHIP. Aceste programe de internship de foarte multe ori se incheie cu o angajare a persoanei care a urmat programul. Motorul de căutare peviitor.ro va agrega si aceste tipuri de locuri de muncă.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#oameni-de-carier%C4%83"&gt;
  &lt;/a&gt;
  Oameni de carieră
&lt;/h4&gt;

&lt;p&gt;Sunt un anumit segment de persoane care își doresc o carieră specifică. De multe ori o singură companie nu poate oferi pentru persoanele focusate pe carieră anumite poziții la care ei aspiră. Astfel, oamenii vor trebui să fie atenți la oportunitățile noi ce apar pe piața muncii. &lt;br&gt;
Oportunitățile nu apar exact in momentul in care omul își dorește altceva și atunci această împlinire a dorinței de avansare in carieră va implica si efortul de a monitorizata atent piața muncii.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cei-care-nu-se-mai-simt-aprecia%C8%9Bi"&gt;
  &lt;/a&gt;
  Cei care nu se mai simt apreciați
&lt;/h4&gt;

&lt;p&gt;În unele cazuri nu neapărat avansarea in carieră este factorul determinant în a-ți schimba locul de muncă ci simplu fapt ca nu ești apreciat in colectivul in care activezi.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cei-care-pot-mai-mult"&gt;
  &lt;/a&gt;
  Cei care pot mai mult
&lt;/h4&gt;

&lt;p&gt;Deși pare ciudat, sunt persoane care nu activează la adevăratul potențial. Sunt oameni care pot mai mult, dar "leaderii" nu le oferă șansa de a se afirma. &lt;br&gt;
Este un lucru firesc ca persoanele să își dorească sa activeze la adevăratul lor potențial. Astfel, peviitor.ro va fi cel mai util tool pentru aceet tip de persoane care își doresc mai mult, și care pot sa schimbe ceva in lume.&lt;br&gt;
Lucrând la maximul de potențial nu e doar un avantaj personal ci privind global, e singurul mod in care lumea se va schimba in mai bine.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#evaluarea-gre%C8%99it%C4%83-a-salariatului"&gt;
  &lt;/a&gt;
  Evaluarea greșită a salariatului
&lt;/h4&gt;

&lt;p&gt;De-a lungul timpului, cei cu experiență au observat că aceeași muncă prestată la o firmă aduce un salar de X lei iar dacă ar lucra la firma Y ar aduce un salar de Y lei.&lt;br&gt;
Nu contează doar ceea ce lucrezi ci contează si pentru cine lucrezi.&lt;br&gt;
Cei care urmăresc să își găsească un loc de muncă la o anumită firmă vor putea folosi motorul de cautare peviitor.ro pentru a-și indeplini acest vis. E nevoie doar de puțină perseverență și toate se vor rezolva favorabil.&lt;/p&gt;

&lt;p&gt;Am prezentat aici câteva detalii despre publicul țintă însă ne rezervăm dreptul de a va aduce mai multe informații pe parcursul derulării proiectului.&lt;br&gt;
Cu siguranță ați prins ideea că aveți doar de câștigat dacă veți opta să folosiți motorul de căutare pentru locuri de muncă peviitor.&lt;/p&gt;

&lt;p&gt;Întrebarea de la care pornim este: CE VREI SĂ TE FACI CÂND VEI FI MARE?&lt;/p&gt;

</description>
      <category>searchengine</category>
      <category>peviitor</category>
      <category>job</category>
      <category>locuridemunca</category>
    </item>
    <item>
      <title>JS in Kotlin/JS</title>
      <author>Martynas Petuška</author>
      <pubDate>Thu, 30 Dec 2021 18:14:39 +0000</pubDate>
      <link>https://dev.to/mpetuska/js-in-kotlinjs-c4g</link>
      <guid>https://dev.to/mpetuska/js-in-kotlinjs-c4g</guid>
      <description>&lt;p&gt;Kotlin/JS brings the full awesomness of Kotlin language to the JS ecosystem, providing great standard library, typesafety and lots of modern features not found in vanilla JS. &lt;/p&gt;

&lt;p&gt;However one of the biggest strenghts of the JS ecosystem is its massive collection of libraries ready for you to use. Kotlin/JS has full interop with JS code, however, just like TS, it demands external declarations to describe JS API surface. There are ways to shut Kotlin compiler up and proceed in a type-unsafe way (ehem, &lt;code&gt;dynamic&lt;/code&gt; type), however that beats the whole point of Kotlin as a typesafe language.&lt;/p&gt;

&lt;p&gt;Enter this article! Here we'll cover how Kotlin external declarations map to JS imports and how to write your own from scratch. Hopefully you'll learn some tips and tricks along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basics"&gt;
  &lt;/a&gt;
  Basics
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#js-module-mapping"&gt;
  &lt;/a&gt;
  JS Module Mapping
&lt;/h3&gt;

&lt;p&gt;To make your Kotlin code play nice with JS code, Kotlin stdlib provides few compiler-targeted annotations usable in tandem with &lt;code&gt;external&lt;/code&gt; keyword. Note that &lt;code&gt;external&lt;/code&gt; keyword is only required at the top-level declarations and nested declarations are implied to be &lt;code&gt;external&lt;/code&gt;. &lt;br&gt;
Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"module-name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;               &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nd"&gt;@JsNonModule&lt;/span&gt;                           &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;myExternalModule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;dynamic&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Tells the compiler that this declaration maps to JS module &lt;code&gt;module-name&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Tells the compiler that this declaration can also work with UMD resolver. Not needed when using CommonJS.&lt;/li&gt;
&lt;li&gt;Declares an &lt;code&gt;external&lt;/code&gt; value with &lt;code&gt;dynamic&lt;/code&gt; type. This is a reeference to external JS code we can now use from our Kotlin code! &lt;code&gt;dynamic&lt;/code&gt; type is an escape hatch, basically telling the compiler that the shape of this value can be whatever (just like in vanilla JS). We'll look into how to make that type-safe later on.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#entity-mapping"&gt;
  &lt;/a&gt;
  Entity Mapping
&lt;/h3&gt;

&lt;p&gt;So far we've only seen a top-level &lt;code&gt;value&lt;/code&gt; marked as external, however it does not stop there. Kotlin/JS supports &lt;code&gt;object&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;interface&lt;/code&gt;, &lt;code&gt;fun&lt;/code&gt; and even nested declarations for external scope modelling. Here's the recommended mapping between JS and Kotlin entities to use when writing your own declarations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[JS] fields and properties (declared with &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; keywords -&amp;gt; [Kotlin] &lt;code&gt;val&lt;/code&gt; or mutable &lt;code&gt;var&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[JS] functions and lambdas -&amp;gt; [Kotlin] &lt;code&gt;fun&lt;/code&gt; member functions or lambda &lt;code&gt;val&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[JS] &lt;code&gt;class&lt;/code&gt; -&amp;gt; [Kotlin] &lt;code&gt;class&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;[JS] anonymous object shapes (&lt;code&gt;{}&lt;/code&gt;) -&amp;gt; [Kotlin] &lt;code&gt;interface&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the above suggestion in mind, here's how all these entities in JS translate to Kotlin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;MyJSClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;myField&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;initField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;69&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initField&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;420&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myField&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;myImmutableProperty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;myField&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;myLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;42&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyJSClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;definedExternally&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;myField&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;myMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;definedExternally&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;myProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;myImmutableProperty&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

  &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyLambdaReturn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;myLambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;MyLambdaReturn&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the special &lt;code&gt;definedExternally&lt;/code&gt; value. It's a neat way to tell the compiler that an argument has a default value in JS without having to hard-code it in the Kotlin declarations as well. It can also be used to declare optional properties on external interfaces that you plan on constructing in Kotlin (to pass as arguments to other external entities). There's a slight limitation to this trick - only nullable types can have default implementations declared.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;MyJSType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;optionalImmutableValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;definedExternally&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;optionalMutableValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;definedExternally&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;definedExternally&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;myJsTypeInstance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MyJSType&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MyJSType&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Now we only need to override properties we want to set&lt;/span&gt;
  &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;optionalImmutableValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"noice"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#declaring-npm-packages"&gt;
  &lt;/a&gt;
  Declaring NPM packages
&lt;/h2&gt;

&lt;p&gt;Most of the time you'll need to work with NPM packages, which comes with a single entry-point declared in the &lt;code&gt;package.json&lt;/code&gt; and re-exports deeply nested moduled from a single module. &lt;/p&gt;

&lt;p&gt;To declare such packages in Kotlin, there are two strategies for you to use - &lt;code&gt;object&lt;/code&gt; and &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To showcase both, consider this JS module named &lt;code&gt;js-greeter&lt;/code&gt; example and see how it can be declared in Kotlin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;69&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;anonymousObjectValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;JSClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initialise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
  &lt;span class="nx"&gt;memberValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;420&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;defaultHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Default Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;helloLambda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Joe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defaultHello&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#npm-package-object"&gt;
  &lt;/a&gt;
  NPM Package Object
&lt;/h3&gt;

&lt;p&gt;When declaring an object as a container for an external NPM package, that object takes a role of the entire module. When using this strategy, the file can contain a mix of both, external and regular Kotlin declarations.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"js-greeter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;JSGreeter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

  &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;anonymous&lt;/span&gt;&lt;span class="nc"&gt;ObjectValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;memberValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;defaultHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;helloLambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;definedExternally&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

  &lt;span class="nd"&gt;@JsName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Overriding JS name mapping to `default` rather than `defaultExportedHello`&lt;/span&gt;
  &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;defaultExportedHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#npm-package-file"&gt;
  &lt;/a&gt;
  NPM Package File
&lt;/h3&gt;

&lt;p&gt;When declaring a file as a container for an external NPM package, that file takes a role of the entire module and declarations inside that file match 1:1 to the JS module file. When using this strategy, the file can only contain external declarations and mixing of regular Kotlin and external declarations is not allowed. Finally, since all declarations are no longer nested inside &lt;code&gt;external object&lt;/code&gt; and instead are top-level declarations, each of them must be marked as &lt;code&gt;external&lt;/code&gt; individually.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nc"&gt;JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"js-greeter"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;anonymous&lt;/span&gt;&lt;span class="nc"&gt;ObjectValue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JSClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;initialise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;memberValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Number&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;defaultHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;helloLambda&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;definedExternally&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;

&lt;span class="nd"&gt;@JsName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Overriding JS name mapping to `default` rather than `defaultExportedHello`&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;defaultExportedHello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#declaring-global-js-api"&gt;
  &lt;/a&gt;
  Declaring Global JS API
&lt;/h2&gt;

&lt;p&gt;Sometimes you might need to hook into some JS API that does not come from NPM but is provided by the runtime in the global scope. In such cases all you need is to declare the API shape anywhere in your project without any of the module annotations. Here's an example of how to get access to ES6 dynamic imports (note that the return &lt;code&gt;Promise&lt;/code&gt; type comes from WEB API declarations provided in Kotlin standard library)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;dynamic&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#declaring-nonjs-modules"&gt;
  &lt;/a&gt;
  Declaring non-JS modules
&lt;/h2&gt;

&lt;p&gt;JS development has evolved past JS-only projects and often uses various webpack loaders to "import" non-JS assets. This is possible in Kotlin/JS as well via the same strategies that we used to import JS modules. It's important to note that just like in JS, appropriate webpack loaders must be configured for such imports to work.&lt;/p&gt;

&lt;p&gt;Here are some exotic JS import examples and their equivalents in Kotlin.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;CSS&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-library/dist/css/index.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;SCSS&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-library/dist/scss/index.csss&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;JsonModule&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;my-library/package.json&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-library/dist/css/index.css"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;CSS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;dynamic&lt;/span&gt;

&lt;span class="nd"&gt;@JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-library/dist/scss/index.scss"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;SCSS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;dynamic&lt;/span&gt;

&lt;span class="nd"&gt;@JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-library/package.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;JsonModule&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;dynamic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#getting-rid-of-dynamic-type"&gt;
  &lt;/a&gt;
  Getting Rid of dynamic Type
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;dynamic&lt;/code&gt; type is very convenient and useful in places where you want to tie-up external API declarations chain, it discards all type-safety that Kotlin provides. In most of the cases you should aim to declare the shape of the type via an &lt;code&gt;external interface&lt;/code&gt; instead. While external interfaces can be nested inside your module declarations, it is not mandatory and they can live anywhere in your project because they're discarded during compilation and are not present at runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nd"&gt;@JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-library/package.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;packageJson&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;dynamic&lt;/span&gt;

&lt;span class="c1"&gt;// === VS ===&lt;/span&gt;

&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;PackageJson&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;private&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;
  &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;bundledDependencies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;@JsModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my-library/package.json"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;typedPackageJson&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;PackageJson&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They can also be used to reuse common traits between external declarations by making other external declarations (such as classes) implement such external interfaces.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;We've seen lots of options available to us when mapping Kotlin code to external JS code in order to maintain type safety and unlock a massive ocean of NPM libraries. Hopefully you found something useful in here. &lt;/p&gt;

&lt;p&gt;If I missed anything, let me know in the comments and I'll add it in to make this article as complete as possible. &lt;/p&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>kotlinjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>2021 in Review</title>
      <author>Dominik D</author>
      <pubDate>Thu, 30 Dec 2021 17:46:09 +0000</pubDate>
      <link>https://dev.to/tkdodo/2021-in-review-435e</link>
      <guid>https://dev.to/tkdodo/2021-in-review-435e</guid>
      <description>&lt;p&gt;Since I'm currently sitting at home on my couch, resting after my 3rd Covid-19 vaccine shot with not a lot else to do, I thought I'd reflect a bit on the year I've had and give a bit of an outlook of what's ahead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blogging"&gt;
  &lt;/a&gt;
  Blogging
&lt;/h2&gt;

&lt;p&gt;Not a lot has happened in the first five months of the year. I was getting more and more involved in open source, and I tried to blog regularly (about once every two or three weeks).&lt;/p&gt;

&lt;p&gt;There were two reasons why I started my blog last year: Because I thought it would be fun to set up (narrator: it was not), and because I wanted to have a permanent resource I could link people to. I've also made it a rule that if I see a concept / question / (anti-)pattern at least 3 times, I would blog about it.&lt;/p&gt;

&lt;p&gt;That was also the reason why I started my &lt;a href="https://tkdodo.eu/blog/practical-react-query"&gt;React Query related series of blog posts&lt;/a&gt;, which currently spans over 13 articles, as I have gotten a lot of questions around React Query.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-open-source"&gt;
  &lt;/a&gt;
  More Open Source
&lt;/h2&gt;

&lt;p&gt;2021 was definitely the year when I started to take open source seriously. I have contributed a little to open-source before, but the turning point came at around Mai 2021, when Tanner made me an official &lt;a href="https://react-query.tanstack.com/"&gt;React Query&lt;/a&gt; maintainer. Around the same time, I also became a maintainer for &lt;a href="https://remedajs.com/docs"&gt;remeda&lt;/a&gt;, my favourite TypeScript util library.&lt;/p&gt;

&lt;p&gt;With those new responsibilities, it became clear that I couldn't just continue like before. I was already overworked, and to be honest, open-source was a lot more fun than work at that time. I had cancelled almost all of my vacations due to Covid-19 and didn't feel fully happy.&lt;/p&gt;

&lt;p&gt;Being self-employed and catering to three different clients as a contractor, I made the decision to cancel one of my clients where I didn't feel my contributions were making much of a difference anymore, and introduced open-source-friday:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao3Ye5Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428810489157595139/lBT2YI9D_normal.jpg" alt="Dominik profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dominik
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tkdodo"&gt;@tkdodo&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Introducing: open-source-friday 🎉&lt;br&gt;&lt;br&gt;Open source work has taken up a good part of my daily routine now, which can be quite distracting. I will now try to bundle it with a fixed block each Friday. This will likely reduce my responsiveness, so please bear with me
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:58 PM - 12 Jul 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1414569849448194049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1414569849448194049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1414569849448194049" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;It might sound crazy to cancel a paid engagement to work for free on open-source instead, but it was definitely the right move for me. It gave me a bit of freedom to work on what I believe in, which can be much more fulfilling than a pay-check.&lt;/p&gt;

&lt;p&gt;Tanner also convinced me to set up &lt;a href="https://github.com/sponsors/tkdodo"&gt;GitHub sponsors&lt;/a&gt;, where currently 18 amazing people are sponsoring my open source work 💖.&lt;/p&gt;

&lt;p&gt;Oddly enough, being a React Query maintainer led to some amazing new consulting opportunities for me as well. I ❤️ React Query and React + TypeScript in general, and I also enjoy teaching, so I definitely feel very privileged that I got the opportunity to combine these aspects.&lt;/p&gt;

&lt;p&gt;Later that summer, my blog even became a part of the official React Query docs. I'm very happy that people believe my content is good enough to be "official-docs" material, and it has kept me motivated to write more articles:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao3Ye5Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428810489157595139/lBT2YI9D_normal.jpg" alt="Dominik profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dominik
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tkdodo"&gt;@tkdodo&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      I'm super proud to announce that my blog has made it as a community resource into the official react-query docs 🎊&lt;br&gt;You can now read an excerpt of all my RQ related articles here: &lt;a href="https://t.co/Ufmegdeyy9"&gt;react-query.tanstack.com/community/tkdo…&lt;/a&gt;&lt;br&gt;&lt;br&gt;and the docs also link to them from other places. Thank you &lt;a href="https://twitter.com/tannerlinsley"&gt;@tannerlinsley&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      20:49 PM - 29 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1432083106593480714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1432083106593480714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1432083106593480714" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#react-18"&gt;
  &lt;/a&gt;
  React 18
&lt;/h2&gt;

&lt;p&gt;For the second half of the year, I kept an eye on React 18, the Working group, and how some changes would affect me as a user of React as well as a library maintainer. My probably biggest "contribution" in terms of impact in 2021 happened when I asked an innocent looking question to &lt;a href="https://twitter.com/dai_shi"&gt;Dasishi Kato&lt;/a&gt;, author of the state manager &lt;a href="https://zustand.surge.sh/"&gt;zustand&lt;/a&gt;, on Twitter:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao3Ye5Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428810489157595139/lBT2YI9D_normal.jpg" alt="Dominik profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dominik
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tkdodo"&gt;@tkdodo&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Hmm, why are the zustand docs recommending to memoize selectors with useCallback &lt;a href="https://twitter.com/dai_shi"&gt;@dai_shi&lt;/a&gt; ? Especially with the example:&lt;br&gt;&lt;br&gt;const fruit = useStore(useCallback(state =&amp;gt; state.fruits[id], [id]))&lt;br&gt;&lt;br&gt;it really seems like a premature optimization, and ppl jump on it cause its in the docs
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      09:17 AM - 18 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1427922647401312257" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1427922647401312257" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1427922647401312257" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h3&gt;
  &lt;a href="#usemutablesource-gt-usesyncexternalstore"&gt;
  &lt;/a&gt;
  useMutableSource -&amp;gt; useSyncExternalStore
&lt;/h3&gt;

&lt;p&gt;React 18 was about to ship a hook called &lt;em&gt;useMutableSource&lt;/em&gt;, and it required input selectors to be referentially stable. I stumbled upon this when I reviewed a PR at work, where a co-worker of mine memoized all selectors to a zustand store with &lt;em&gt;useCallback&lt;/em&gt;, something like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;zustand&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;bears&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;increasePopulation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;bears&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bears&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})),&lt;/span&gt;
&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="c1"&gt;// usage:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bears&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bears&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]))&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;increasePopulation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;increasePopulation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Naturally, that got me thinking. Why would you memoize a selector that just returns a value from the state? That's not an expensive calculation, and &lt;em&gt;useCallback&lt;/em&gt; is just a performance optimization 🤔.&lt;/p&gt;

&lt;p&gt;The answer I got was surprising, as my co-worker said: The zustand docs recommend that!&lt;/p&gt;

&lt;p&gt;I looked it up, and yes, &lt;a href="https://github.com/pmndrs/zustand/blob/1242610103370a2a2729c1f5ab9b6720d24efb8e/readme.md#memoizing-selectors"&gt;it was really there&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is generally recommended to memoize selectors with useCallback. This will prevent unnecessary computations each render. It also allows React to optimize performance in concurrent mode.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;DaiShi's answer to my question why this was suggested was: Because it will be &lt;em&gt;required&lt;/em&gt; in React 18 to avoid infinite loops in concurrent mode.&lt;/p&gt;

&lt;p&gt;🤯&lt;/p&gt;

&lt;p&gt;After that, the discussion escalated a bit, as the redux team around &lt;a href="https://twitter.com/acemarke"&gt;Mark Erkison&lt;/a&gt; as well as react maintainers like &lt;a href="https://twitter.com/brian_d_vaughn"&gt;Brian Vaughn&lt;/a&gt; got pulled in as well. Eventually, the discussion moved towards the &lt;a href="https://github.com/reactwg/react-18/discussions/84"&gt;React 18 Working Group&lt;/a&gt;, which I was later also invited to, where the hook was renamed to &lt;em&gt;useSyncExternalStore&lt;/em&gt;, and the api was adjusted so that selector stability was no longer required.&lt;/p&gt;

&lt;p&gt;I'm glad my little tweet kicked off the discussion that led to this decision, which probably avoided massive breaking changes for many consumers. Just imagine having to memoize every inline selector in redux 😮. I do however regret the tone in which I voiced my concerns - I'm really sorry for that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-query-and-react-18"&gt;
  &lt;/a&gt;
  React Query and React 18
&lt;/h3&gt;

&lt;p&gt;When react-redux released &lt;a href="https://github.com/reduxjs/react-redux/releases/tag/v8.0.0-alpha.0"&gt;v8.0.0-alpha.0&lt;/a&gt; in early October, I decided it's time to take a stab at making React Query ready for concurrent features, which will be shipped in React 18. Similar to redux, React Query has an external store that manages the cache, which components need to subscribe to. If we keep doing that with our current approach (basically, with &lt;em&gt;useEffect&lt;/em&gt; and &lt;em&gt;useState&lt;/em&gt;), applications might suffer from an issue called &lt;em&gt;tearing&lt;/em&gt;, where parts of the ui might display outdated values.&lt;/p&gt;

&lt;p&gt;If that concept is unfamiliar to you, there is a great talk from Dasishi Kato at React Conf 2021: &lt;a href="https://www.youtube.com/watch?v=oPfSC5bQPR8&amp;amp;list=PLNG_1j3cPCaZZ7etkzWA7JfdmKWT0pMsa&amp;amp;t=3s"&gt;React 18 for External Store Libraries&lt;br&gt;
&lt;/a&gt; about this topic.&lt;/p&gt;

&lt;p&gt;To solve this issue, React 18 will ship with a new hook called &lt;a href="https://github.com/reactwg/react-18/discussions/86"&gt;useSyncExternalStore&lt;/a&gt; (yes, the one I mentioned above 😅), which libraries like React Query or redux need to adopt.&lt;/p&gt;

&lt;p&gt;Right now, we have a &lt;a href="https://github.com/tannerlinsley/react-query/pull/3064"&gt;draft PR&lt;/a&gt; that passes all tests against React 17 &lt;em&gt;and&lt;/em&gt; React 18. Depending on when React 18 will become stable, we might include this PR in our next major release.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#react-query-v4"&gt;
  &lt;/a&gt;
  React Query v4
&lt;/h2&gt;

&lt;p&gt;Speaking of React Query: at the end of October, we decided to work towards a new major version of the library, as some inconsistencies have piled up, and some issues couldn't be fixed unless we tackled them holistically with a new approach. We put our minds together and came up with a great new "Network Mode" feature to iron out these inconsistencies and to make React Query even better 🚀.&lt;/p&gt;

&lt;p&gt;Version 4 is now in &lt;a href="https://github.com/tannerlinsley/react-query/releases/tag/v4.0.0-alpha.1"&gt;alpha&lt;/a&gt;, and we are looking forward to making a stable release sometime early next year. I will also very likely write a dedicated blog post about v4 in the near future.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#public-speaking"&gt;
  &lt;/a&gt;
  Public Speaking
&lt;/h2&gt;

&lt;p&gt;At the end of the year, I got my first invitations to represent React Query at online Panel Discussions. As I've never done anything like that before, I was really, really nervous. Some people say this will get better over time, some say it doesn't 🤷‍♂️. Anyways, I don't like watching myself on those 🙈, but here are the links in case you missed it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lg7X9wUBwWk"&gt;GraphQL Client-Side Libraries Panel Discussion - GraphQL Galaxy 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=7LMsR30p1xM"&gt;State of React | December 2021&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#2021-in-numbers"&gt;
  &lt;/a&gt;
  2021 in numbers
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#the-blog"&gt;
  &lt;/a&gt;
  The blog
&lt;/h3&gt;

&lt;p&gt;For my blog, I only have comparable metrics for the last 3 months, because I switched hosting provider and later analytics provider during the year. I am now with &lt;a href="https://www.netlify.com/"&gt;netlify&lt;/a&gt; and I'm using &lt;a href="https://plausible.io/"&gt;plausible.io&lt;/a&gt; for analytics, and I'm supper happy with both.&lt;/p&gt;

&lt;p&gt;For that time period, I can see a steady stream of about &lt;strong&gt;20k&lt;/strong&gt; visitors and &lt;strong&gt;35k&lt;/strong&gt; page views per month, which is huge for my perspective, and definitely more than I would've ever thought would happen to my little blog.&lt;/p&gt;

&lt;p&gt;From what I can tell, most people come to my blog from Google (about 50% traffic!) and from the React Query docs (another 20%). The top 6 articles in terms of page views are also all from the React Query series:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0DtPyTZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15rwgzbsmqlywldthi9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0DtPyTZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/15rwgzbsmqlywldthi9i.png" alt="metrics" width="880" height="366"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also tried to blog regularly - about once every two to three weeks. I've written a total of 21 articles, and November was the only month without a blog post (mainly because I was working on React Query v4 instead).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#twitter"&gt;
  &lt;/a&gt;
  Twitter
&lt;/h3&gt;

&lt;p&gt;This year, I've grown my twitter friends by about &lt;strong&gt;3500%&lt;/strong&gt; 😮. Of course, that number becomes less impressive if you consider that I started the year with under 100 followers, as percentages are high when the bar is low. I'm still pretty proud of it though, as I seek to provide valuable content for the community. I try not to give random TypeScript tips that you can easily find by going to google, or explain how &lt;em&gt;Array.map&lt;/em&gt; works in nice pictures. I think there are enough people on Twitter doing that already. Also, I'm &lt;em&gt;really&lt;/em&gt; not in it for the followers. I think there is a sweet spot for Twitter that is right between where you feel like you're shouting into the void (&amp;lt; 1k) vs. where your notifications are becoming unbearable (apparently &amp;gt; 10k, but I can't tell yet). I'm right in there, and it feels perfect at the moment 😊.&lt;/p&gt;

&lt;p&gt;The tweet that got the most impressions this year (&lt;strong&gt;74k&lt;/strong&gt;) was one I've quickly written on my phone after answering a certain question for the Nth time - which also lead to me writing &lt;a href="https://tkdodo.eu/blog/react-query-as-a-state-manager"&gt;React Query as a State Manager&lt;/a&gt; - arguably one of my best received articles:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ao3Ye5Sn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1428810489157595139/lBT2YI9D_normal.jpg" alt="Dominik profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Dominik
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/tkdodo"&gt;@tkdodo&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Okay apparently it’s not obvious to everybody that you DO NOT need to copy data from react-query anywhere else (context, redux,…) to access it everywhere. I will have to write a blog post about it I guess (and maybe update the docs?)…
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:43 PM - 15 Aug 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1426902315429212162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1426902315429212162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1426902315429212162" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#2022-and-beyond"&gt;
  &lt;/a&gt;
  2022 and beyond
&lt;/h2&gt;

&lt;p&gt;I'm quite excited for what lies ahead. With React 18 and React Query v4 around the corner, the ecosystem just keeps getting better and better, which is to everyone's advantage.&lt;/p&gt;

&lt;p&gt;For 2022, I &lt;em&gt;really&lt;/em&gt; want to rewrite my blog, and go away from &lt;a href="https://www.gatsbyjs.com/"&gt;gatsby&lt;/a&gt; towards either &lt;a href="https://nextjs.org/"&gt;next.js&lt;/a&gt; or &lt;a href="https://remix.run/"&gt;remix.run&lt;/a&gt; - or whichever framework will be all the rage next year. I don't want to do this because I'm unsatisfied with gatsby (I'm not), but more so for the technical challenge and to keep up-to-date with the latest developments on how to build stuff.&lt;/p&gt;

&lt;p&gt;So let me know in the comments below ⬇️ (or reach out to me on &lt;a href="https://twitter.com/tkdodo"&gt;twitter&lt;/a&gt;) what you think I should be choosing and why. I really hope I find the time to get around to it 😀.&lt;/p&gt;

&lt;p&gt;With that, all that is left for me to say is merry Christmas 🎄 (if you are celebrating it), a happy new year 🎊, and I hope you say safe and healthy ⛑. I will be taking about two weeks time off to hopefully come back refreshed next year.&lt;/p&gt;

</description>
      <category>react</category>
      <category>opensource</category>
      <category>webdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>CI vs CD - where the magic happens</title>
      <author>Andrei Dascalu</author>
      <pubDate>Thu, 30 Dec 2021 17:42:24 +0000</pubDate>
      <link>https://dev.to/andreidascalu/ci-vs-cd-where-the-magic-happens-1aoa</link>
      <guid>https://dev.to/andreidascalu/ci-vs-cd-where-the-magic-happens-1aoa</guid>
      <description>&lt;p&gt;Continuous Integration and Continuous Deployment are centerpieces of modern software development. They're well known concepts. A bit too well known, I'd say, in the sense that they're so ubiquitously used that few spend much time thinking about what they mean.&lt;/p&gt;

&lt;p&gt;Here we'll try to formulate (and nuance a bit) the key concepts that sit behind each of them, what makes them different and what makes them work together.&lt;/p&gt;

&lt;p&gt;Continuous Integration is a product of extreme programming (a lot of the things we take for granted today come from the days of good ol' XP). The gist of CI is that &lt;strong&gt;developers shouldn't sit on the code they wrote, instead the code should be integrated with the project and other developers' code as soon as possible&lt;/strong&gt; so that the team can ensure everything still behaves as intended and bugs can be rooted out ASAP.&lt;/p&gt;

&lt;p&gt;For that purpose, Continuous Integration relies on the following (these are not hard rules, nor are they necessarily agreed as such but instead they are a compilation of advice given over time by XP practitioners).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a repository: it's easy to forget that version control hasn't always been around and even when it came to be, there were things before Git (just watch Linus Torvalds famous Google presentation on Git - many used plain tarball archives to integrate code). However, it's important to consider that the ability to branch is an enemy of CI. The goal is to integrate. That is, according to Martin Fowler, that developers should merge code often and branch only when really necessary.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;self-testing: each piece of code should be able to stand on its own. THis means developers should test before integrating (whether automatically or manually, doesn't matter).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;automated integration: since integrations must be done often, there must be a process in places to ensure code quality and integrity in an automated way, that is able to run continuously as well as on demand. Unit tests, static code analysis, integration tests and so on must happen often.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;speed: since the process above must take place often, it must be fast. In a nutshell, it should scale as the project grows, as the quantity and complexity of the code grows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fixes must come with unit tests: a bug means that something escaped the system, therefore a fix should bring the required tests up to speed (whether it means fixing an existing one and/or adding tests)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;transparency: tests and their results must be accessible and clear to everyone. This means that manual test plans must be shared and known across the team, the results of test runs must be made public - same goes for automated tests.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the initial proponents of CI included automated delivery in the process. Yes, some time ago CI also meant what we today call CD - Continuous Delivery, in that CD was a step in CI.&lt;/p&gt;

&lt;p&gt;Today, we think of CD as a domain of its own. This is natural given the complexity of the systems to deliver. We rarely deliver one piece of software but rather an ensemble made from frontend(s), backends, APIs, maybe content management tools, often working together. It has become a domain of its own, that's governed by some principles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the item(s) to deliver must have gone through CI process: that is, the quality of the item(s) to delivered must be ensured before it comes up for delivery.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the configuration comes from a secure place: when we develop, we generally keep our configuration together within the environment we work in. However, this is insecure and unfit for a production environment where we must ensure that access to secret configuration item is as restricted as possible and only available to the automated delivery process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;data integrity: while individual services may be stateless, applications as a whole rarely are. In that case, any delivery must ensure that data integrity is not affected, that any schema changes happen securely in a way that won't affect the running application and that failures result in graceful rollbacks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no downtime: today we have many ways to ensure that deliveries come with little to no downtime. This in itself poses challenges (particularly with respect to data integrity).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;monitoring: the process doesn't end with a deployment. A successful delivery isn't one that doesn't have errors along the way but one that ensure the application is running as expected. This means tracking of metrics that showcase expected behaviour (eg: no increased error rate, no new errors, maybe less latency if a performance update was done, etc) in each layer of the application (backend, frontend, data).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>programming</category>
      <category>devops</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Advanced typescript for React developers - discriminated unions</title>
      <author>Nadia Makarevich</author>
      <pubDate>Thu, 30 Dec 2021 17:32:26 +0000</pubDate>
      <link>https://dev.to/adevnadia/advanced-typescript-for-react-developers-discriminated-unions-28ec</link>
      <guid>https://dev.to/adevnadia/advanced-typescript-for-react-developers-discriminated-unions-28ec</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJCB21EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryfut2mrsz4broie0etj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJCB21EU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ryfut2mrsz4broie0etj.png" alt="Image description" width="500" height="320"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello, my fellow React developers who are in the process of learning advanced typescript patterns! Did you know that typescript has something that is called “discriminated unions”? That name triggers all sorts of saviour reflexes against discrimination in me, but it actually is a pretty cool and useful feature that doesn’t need to be saved. Even better, it is super useful for something that we already perfected in the previous advanced typescript article: &lt;a href="https://www.developerway.com/posts/advanced-typescript-for-react-developers-part-3"&gt;exhaustiveness checking and narrowing of types.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let’s jump right in, shall we? And to make it easier, we again will start from the &lt;a href="https://codesandbox.io/s/distracted-noether-lxere?file=/src/tabs.tsx"&gt;previous code examples&lt;/a&gt; and improve them along the way. This time we’re going to build multi-select capabilities into our generic select component and implement a data provider to fetch the products from a REST endpoint.&lt;/p&gt;

&lt;p&gt;But first, let’s improve some completely unrelated code, just to get a sense of what discriminated union actually is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discriminated-unions-beginning"&gt;
  &lt;/a&gt;
  Discriminated unions - beginning
&lt;/h2&gt;

&lt;p&gt;Remember our function that was generating text labels for different data types?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type DataTypes = Book | Movie | Laptop | Phone | string;

const formatLabel = (value: DataTypes) =&amp;gt; {
  if (isBook(value)) return `${value.title}: ${value.author}`;
  if (isMovie(value)) return `${value.title}: ${value.releaseDate}`;
  if (isLaptop(value)) return value.model;
  if (isPhone(value)) return `${value.model}: ${value.manufacture}`;

  return valueShouldBeString(value);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It looks pretty enough, although in functions &lt;code&gt;isBook&lt;/code&gt; or &lt;code&gt;isMovie&lt;/code&gt; we have to do quite a lot of calculation to determine which type is where. &lt;code&gt;isMovie&lt;/code&gt;, for example, looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const isMovie = (value: DataTypes): value is Movie =&amp;gt; {
  return (
    typeof value !== "string" &amp;amp;&amp;amp;
    "id" in value &amp;amp;&amp;amp;
    "releaseDate" in value &amp;amp;&amp;amp;
    "title" in value
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We had to do it because for our example we wrote types in a way that there is no reliable way to easily identify which is which: all the properties are strings, all of them have &lt;code&gt;id&lt;/code&gt;, two of them have &lt;code&gt;releaseDate&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type Book = {
  id: string;
  title: string;
  author: string;
};

export type Movie = {
  id: string;
  title: string;
  releaseDate: string;
};

... // all the other data types
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That makes those functions quite prone to error and hard to read and extend. It doesn’t have to be that way though, this is one of the rarest things in life where we have absolute control. What we can do to improve the situation drastically is to introduce a new unique common property for every data type. Something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--78gH9jOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1abd77hqpmhzq6p4bp7c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--78gH9jOc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1abd77hqpmhzq6p4bp7c.png" alt="Image description" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would be what is called a &lt;em&gt;discriminant&lt;/em&gt; property. Those who are privileged enough to get their data from a graphql endpoint will likely have &lt;code&gt;__typename&lt;/code&gt; already in their data. The rest would have to have some sort of normalization function that adds the correct value manually when the data is received from the external source.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const books: Book[] = [
  {
    __typename: "book", // add this to our json data here!
    id: "1",
    title: "Good omens",
    author: "Terry Pratchett &amp;amp; Neil Gaiman"
  },
  ///...
];
// all the rest of the data with
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, if we move &lt;code&gt;string&lt;/code&gt; type away from &lt;code&gt;DataTypes&lt;/code&gt;, it will turn into what is called &lt;strong&gt;“discriminated union”&lt;/strong&gt; - a union of types, all of which have a common property with some unique value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type DataTypes = Book | Movie | Laptop | Phone;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best part is that typescript can do narrowing of types easily when it deals with discriminated unions. And our &lt;code&gt;isSomething&lt;/code&gt;-based implementation can be simplified into this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export type DataTypes = Book | Movie | Laptop | Phone;

const formatLabel = (value: DataTypes | string) =&amp;gt; {
  if (typeof value === "string") return value;
  if (value.__typename === "book") return `${value.title}: ${value.author}`;
  if (value.__typename === "movie") return `${value.title}: ${value.releaseDate}`;
  if (value.__typename === "laptop") return value.model;
  if (value.__typename === "phone") return `${value.model}: ${value.manufacture}`;

  return "";
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All the isSomething functions are gone, which not only simplifies the implementation but also makes it slightly more performant since we reduced the number of checks we’re doing in every &lt;code&gt;formatLabel&lt;/code&gt; function call.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/discriminated-unions-example-1-nlcyr?file=/src/tabs.tsx"&gt;See the full example here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discriminated-unions-when-fetching-data"&gt;
  &lt;/a&gt;
  Discriminated unions when fetching data
&lt;/h2&gt;

&lt;p&gt;One of the most useful applications of those types of unions is various mutually exclusive states and conditions. And the most typical one is the “loading/error/data” pattern that can be seen in its various forms everywhere where data from an external source needs to be fetched.&lt;/p&gt;

&lt;p&gt;First, let's start with implementing a “data provider” for our books: a simple fetch that gets data from a REST endpoint, handlers “loading” and “error” states, and puts the data into React context for all other components to use. We can pretty much just copy the example from &lt;a href="https://reactjs.org/docs/faq-ajax.html"&gt;React documentation&lt;/a&gt;, with a few modifications.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type State = {
  loading?: boolean;
  error?: any;
  data?: Book[];
};

const Context = React.createContext&amp;lt;State | undefined&amp;gt;(undefined);

export const BooksProvider = ({ children }: { children: ReactNode }) =&amp;gt; {
  const [loading, setLoading] = useState&amp;lt;boolean&amp;gt;(false);
  const [error, setError] = useState&amp;lt;any&amp;gt;(undefined);
  const [data, setData] = useState&amp;lt;Book[]&amp;gt;();

  useEffect(() =&amp;gt; {
    setLoading(true);

    // just some random rest endpoint
    fetch('https://raw.githubusercontent.com/mledoze/countries/master/countries.json')
      .then((response) =&amp;gt; {
        if (response.status === 200) {
          // in real life of course it would be the json data from the response
          // hardcoding books just to simplify the example since books are already typed
          setData(books);
          setLoading(false);
        } else {
          setLoading(false);
          setError(response.statusText);
        }
      })
      .catch((e) =&amp;gt; {
        setLoading(false);
        setError(e);
      });
  }, []);

  return (
    &amp;lt;Context.Provider
      value={{
        error,
        data,
        loading,
      }}
    &amp;gt;
      {children}
    &amp;lt;/Context.Provider&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now, after adding the provider somewhere at the top of the app, we can use the fetched data everywhere in the app without triggering additional re-fetching, and do something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const SomeComponent = () =&amp;gt; {
  const data = useBooks();

  if (!data?.data) return &amp;lt;&amp;gt;No data fetched&amp;lt;/&amp;gt;;
  if (data.loading) return &amp;lt;&amp;gt;Spinner&amp;lt;/&amp;gt;;
  if (data.error !== undefined) return &amp;lt;&amp;gt;Something bad happened!&amp;lt;/&amp;gt;;

  return &amp;lt;GenericSelect&amp;lt;Book&amp;gt; values={data.data} ... /&amp;gt;
}

export default () =&amp;gt; {
  return (
    &amp;lt;BooksProvider&amp;gt;
      &amp;lt;SomeComponent /&amp;gt;
    &amp;lt;/BooksProvider&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Although technically this example would work, it’s far from optimal, especially from the types perspective. Everything is optional and available to everything else even if it doesn’t make sense: you can access &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;data&lt;/code&gt; property when loading is set to true for example, and the type system will not prevent it. On top of that, the state is split into three independent &lt;code&gt;useState&lt;/code&gt;, which makes it very easy to make a mistake and forget one of the states or set it to a wrong value in the flow of the function. Imagine if I forget to do &lt;code&gt;setLoading(false)&lt;/code&gt; or mistakenly do &lt;code&gt;setLoading(true)&lt;/code&gt; when I receive the data: the overall state of the provider will be &lt;code&gt;loading&lt;/code&gt; and &lt;code&gt;data received&lt;/code&gt; at the same time , the type system will not stop it, and the customer-facing UI will be a total mess.&lt;/p&gt;

&lt;p&gt;Luckily, both of those problems can be easily solved if we apply the knowledge of how discriminated unions and type narrowing works. First of all, we have four distinct mutually exclusive states in which our data provider can be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;initial state, when nothing has happened yet. Neither &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;loading&lt;/code&gt; exist here&lt;/li&gt;
&lt;li&gt;loading state, where the provider started the data fetching, but haven’t received anything yet. Neither &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;error&lt;/code&gt; exist here&lt;/li&gt;
&lt;li&gt;success state, when data is successfully received. &lt;code&gt;Error&lt;/code&gt; doesn’t exist here&lt;/li&gt;
&lt;li&gt;error state, when the fetch resulted in error. &lt;code&gt;Data&lt;/code&gt; doesn’t exist here.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we describe this in a form of types, it will be this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type PendingState = {
  status: 'pending';
};

type LoadingState = {
  status: 'loading';
};

type SuccessState = {
  status: 'success';
  data: Book[];
};

type ErrorState = {
  status: 'error';
  error: any;
};

type State = PendingState | LoadingState | SuccessState | ErrorState;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;type State&lt;/code&gt; is our classic discriminated union, with &lt;code&gt;status&lt;/code&gt; being the discriminant property: it exists in every type and always has a unique value.&lt;/p&gt;

&lt;p&gt;And now we can initialize our context provider with the default state value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const defaultValue: PendingState = { status: 'pending' };
const Context = React.createContext&amp;lt;State&amp;gt;(defaultValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;use only one &lt;code&gt;setState&lt;/code&gt; instead of three independent ones&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const [state, setState] = useState&amp;lt;State&amp;gt;(defaultValue);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and refactor &lt;code&gt;useEffect&lt;/code&gt; function to the new system&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qyvAcg2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdfon0fqolux75uab1ir.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qyvAcg2B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gdfon0fqolux75uab1ir.png" alt="Image description" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now possibilities of mistakes are minimised:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when I do &lt;code&gt;setState({ status: 'loading' });&lt;/code&gt;, typescript will not allow to set neither &lt;code&gt;data&lt;/code&gt; nor &lt;code&gt;error&lt;/code&gt; there&lt;/li&gt;
&lt;li&gt;if I try to do just &lt;code&gt;setState({ status: 'success' });&lt;/code&gt;, typescript will fail, since it expects to find Books in the mandatory &lt;code&gt;data&lt;/code&gt; field for the success state&lt;/li&gt;
&lt;li&gt;same story with &lt;code&gt;setState({ status: 'error' });&lt;/code&gt; - typescript will fail here since it expects the mandatory &lt;code&gt;error&lt;/code&gt; field in the error state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it gets even better, since on the consumer side typescript will also be able to distinguish between those states and prevent unintentional use of properties in the wrong places:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const SomeComponent = () =&amp;gt; {
  const data = useBooks();

  if (data.status === 'pending') {
    // if I try to access data.error or data.data typescript will fail
    // since pending state only has "status" property
    return &amp;lt;&amp;gt;Waiting for the data to fetch&amp;lt;/&amp;gt;;
  }

  if (data.status === 'loading') {
    // if I try to access data.error or data.data typescript will fail
    // since loading state only has "status" property
    return &amp;lt;&amp;gt;Spinner&amp;lt;/&amp;gt;;
  }

  if (data.status === 'error') {
    // data.error will be available here since error state has it as mandatory property
    return &amp;lt;&amp;gt;Something bad happened!&amp;lt;/&amp;gt;;
  }

  // we eliminated all other statuses other than "success" at this point
  // so here data will always be type of "success" and we'll be able to access data.data freely
  return &amp;lt;GenericSelect&amp;lt;Book&amp;gt; values={data.data} ... /&amp;gt;
}

export default () =&amp;gt; {
  return (
    &amp;lt;BooksProvider&amp;gt;
      &amp;lt;SomeComponent /&amp;gt;
    &amp;lt;/BooksProvider&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/discriminated-unions-example-2-4bfqj?file=/src/books.tsx"&gt;See the full example here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#discriminated-unions-in-components-props"&gt;
  &lt;/a&gt;
  Discriminated unions in components props
&lt;/h2&gt;

&lt;p&gt;And last but not least, example of the usefulness of discriminated unions is components props. Those are especially useful when your component has some boolean props that control some of its behaviour or appearance, although the pattern would work with any literal type. Imagine, for example, that we want to extend our &lt;code&gt;GenericSelect&lt;/code&gt; component to support also multi-select functionality.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  formatLabel: (value: TValue) =&amp;gt; string;
  onChange: (value: TValue) =&amp;gt; void;
  values: Readonly&amp;lt;TValue[]&amp;gt;;
};

export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(
  props: GenericSelectProps&amp;lt;TValue&amp;gt;
) =&amp;gt; {
  const { values, onChange, formatLabel } = props;

  const onSelectChange = (e) =&amp;gt; {
    const val = values.find(
      (value) =&amp;gt; getStringFromValue(value) === e.target.value
    );

    if (val) onChange(val);
  };

  return (
    &amp;lt;select onChange={onSelectChange}&amp;gt;
      {values.map((value) =&amp;gt; (
        &amp;lt;option
          key={getStringFromValue(value)}
          value={getStringFromValue(value)}
        &amp;gt;
          {formatLabel(value)}
        &amp;lt;/option&amp;gt;
      ))}
    &amp;lt;/select&amp;gt;
  );
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Typically what people do in this situation is they introduce &lt;code&gt;isMulti: boolean&lt;/code&gt; property and then adjust implementation accordingly. In our case, we’d need to: add &lt;code&gt;isMulti&lt;/code&gt; to the component props, adjust &lt;code&gt;onChange&lt;/code&gt; callback types to accept multiple values, pass &lt;code&gt;multiple&lt;/code&gt; prop to the select itself, introduce internal state to hold selected values for the multi-select variation, adjust the &lt;code&gt;onSelectChange&lt;/code&gt; handler to support multi-select variation, filter out selected values from the rendered options and render them on top of the select instead with &lt;code&gt;onDelete&lt;/code&gt; handler attached.&lt;/p&gt;

&lt;p&gt;After all those manipulations, our &lt;code&gt;GenericSelect&lt;/code&gt; props would looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  isMulti: boolean;
  onChange: (value: TValue | TValue[]) =&amp;gt; void;
  ..// the rest are the same
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the full working code is &lt;a href="https://codesandbox.io/s/discriminated-unions-example-3-2wrkd?file=/src/select.tsx"&gt;available in this codesandbox.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And again the same story: although from the first glance this looks like a good solution, there is one big flaw in it: when consumers of the select would want to use &lt;code&gt;onChange&lt;/code&gt; callback, typescript would not know what &lt;em&gt;exactly&lt;/em&gt; is in the value. There is no connection from its perspective between &lt;code&gt;isMulti&lt;/code&gt; prop and &lt;code&gt;onChange&lt;/code&gt; value, and value’s type will always be &lt;code&gt;TValue | TValue[]&lt;/code&gt; regardless of &lt;code&gt;isMulti&lt;/code&gt; property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const select = (
  &amp;lt;GenericSelect&amp;lt;Book&amp;gt;
    // I can't log "value.title" here, typescript will fail
    // property "title" doesn't exist on type "Book[]""
    // even if I know for sure that this is a single select
    // and the type will always be just "Book"
    onChange={(value) =&amp;gt; console.info(value.title)}
    isMulti={false}
    ...
  /&amp;gt;
);

const multiSelect = (
  &amp;lt;GenericSelect&amp;lt;Book&amp;gt;
    // I can't iterate on the value here, typescript will fail
    // property "map" doesn't exist on type "Book"
    // even if I know for sure that this is a multi select
    // and the type will always be "Book[]"
    onChange={(value) =&amp;gt; value.map(v =&amp;gt; console.info(v))}
    isMulti={true}
    ...
  /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Luckily, this is easily fixable by turning &lt;code&gt;GenericSelectProps&lt;/code&gt; into discriminated union with &lt;code&gt;isMulti&lt;/code&gt; as the discriminant:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;type GenericSelectProps&amp;lt;TValue&amp;gt; = {
  formatLabel: (value: TValue) =&amp;gt; string;
  values: Readonly&amp;lt;TValue[]&amp;gt;;
};

interface SingleSelectProps&amp;lt;TValue&amp;gt; extends GenericSelectProps&amp;lt;TValue&amp;gt; {
  isMulti: false; // false, not boolean. For single select component this is always false
  onChange: (value: TValue) =&amp;gt; void;
}

interface MultiSelectProps&amp;lt;TValue&amp;gt; extends GenericSelectProps&amp;lt;TValue&amp;gt; {
  isMulti: true; // true, not boolean. For multi select component this is always true
  onChange: (value: TValue[]) =&amp;gt; void;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and passing those properties to the select component as a union:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const GenericSelect = &amp;lt;TValue extends Base&amp;gt;(
  props: SingleSelectProps&amp;lt;TValue&amp;gt; | MultiSelectProps&amp;lt;TValue&amp;gt;
) =&amp;gt; {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the perfect world that would be enough for everything to work. Unfortunately, in our reality there is another small adjustment needed: when we spread props, typescript loses that types link for some reason. In order for the code to actually work we basically need to get rid of this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const { isMulti, onChange } = props;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and always use &lt;code&gt;props.isMulti&lt;/code&gt; and &lt;code&gt;props.onChange&lt;/code&gt; in the code instead. I.e. it should be something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (props.isMulti) {
    props.onChange([...selectedValues, val]);
  if (val) props.onChange(val);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with those modifications generic select will be perfectly usable in both of its variations and types will be perfect&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const select = (
  &amp;lt;GenericSelect&amp;lt;Book&amp;gt;
    // now it will work perfectly!
    onChange={(value) =&amp;gt; console.info(value.title)}
    isMulti={false}
    ...
  /&amp;gt;
);

const multiSelect = (
  &amp;lt;GenericSelect&amp;lt;Book&amp;gt;
    // now it will work perfectly!
    onChange={(value) =&amp;gt; value.map(v =&amp;gt; console.info(v))}
    isMulti={true}
    ...
  /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://codesandbox.io/s/discriminated-unions-example-4-hkk1e?file=/src/select.tsx"&gt;See the fully working example here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is all for today, hope you’re now able to discriminate unions like a pro and have the big urge to refactor all your code asap. I know I do 😊 😅.&lt;/p&gt;

&lt;p&gt;Happy New year and see y’all in 2022 🎉&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
