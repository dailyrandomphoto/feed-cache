<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>FLiP Stack Weekly #4</title>
      <author>Timothy Spann</author>
      <pubDate>Mon, 22 Nov 2021 14:17:20 +0000</pubDate>
      <link>https://dev.to/tspannhw/flip-stack-weekly-4-1bcf</link>
      <guid>https://dev.to/tspannhw/flip-stack-weekly-4-1bcf</guid>
      <description>&lt;p&gt;&lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6868551393196740608/"&gt;Week4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/newsletters/flip-stack-weekly-6861715928728576000/"&gt;Subscribe&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Como transformar seu React APP em um PWA em poucos minutos</title>
      <author>Deric Parra</author>
      <pubDate>Mon, 22 Nov 2021 14:05:54 +0000</pubDate>
      <link>https://dev.to/deko/como-transformar-seu-react-app-em-um-pwa-em-poucos-minutos-59o7</link>
      <guid>https://dev.to/deko/como-transformar-seu-react-app-em-um-pwa-em-poucos-minutos-59o7</guid>
      <description>&lt;p&gt;Progressive Web Apps ou somente PWAs, nos dão novos recursos com características nativas para os sites, consumindo menos dados e sem a necessidade de instalação.&lt;/p&gt;

&lt;p&gt;Os React Apps precisam de apenas 2 características para serem PWAs, um servicerWorker, que é um script que o navegador executa em segundo plano, separado da WebPage o que possibilita alguns recursos, como uso offline. &lt;br&gt;
E também um arquivo na pasta publica, como nome do aplicativo, pagina inicial e ícones, sendo esse arquivo o &lt;code&gt;manifest.json.&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#1-raw-manifestjson-endraw-"&gt;
  &lt;/a&gt;
  1 &lt;code&gt;manifest.json&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;o &lt;code&gt;manifest.json&lt;/code&gt; vai na pasta public.&lt;/p&gt;

&lt;p&gt;A maioria das informações são auto explicativas, e voce pode gerar automaticamente em alguns sites como o &lt;a href="https://app-manifest.firebaseapp.com/"&gt;App Manifest Generator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Segue um exemplo&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "short_name": "WebPage",
    "name": "Minha WebPage",
    "icons": [
        {
            "src": "favicon.ico",
            "sizes": "64x64 32x32 24x24 16x16",
            "type": "imagem/icone-x"
        },
        {
            "src": "logoPequeno.png",
            "type": "image/png",
            "sizes": "192x192"
        },
        {
            "src": "logoGrande.png",
            "type": "image/png",
            "sizes": "512x512"
        }
    ],
    "start_url": ".",
    "display": "standalone",
    "theme_color": "#000000",
    "background_color": "#ffffff"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-raw-servicerworkerjs-endraw-"&gt;
  &lt;/a&gt;
  2 &lt;code&gt;servicerWorker.js&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Para ter uma base vá para &lt;a href="https://github.com/cra-template/pwa/tree/master/packages/cra-template-pwa."&gt;Modelo de Service Worker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Copie os arquivos &lt;code&gt;service-worker.js&lt;/code&gt; e o &lt;code&gt;serviceWorkerRegistration.js&lt;/code&gt; e cole na pasta &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Então no topo seu index.js, importe o service worker resgistration, assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import * as serviceWorkerRegistration from './serviceWorkerRegistration';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Após o import, adicione no final do seu &lt;code&gt;index.js&lt;/code&gt; o seguinte código para optar por um aplicativo "offline-first"&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;serviceWorkerRegistration.register();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pronto, seu CRA agora é uma PWA.&lt;/p&gt;

&lt;p&gt;Caso voce esteja começando um projeto novo, voce pode cria-lo ja com o template usando o comando &lt;code&gt;npx create-react-app app-name --template cra-template-pwa&lt;/code&gt;, ou se voce for usar o typescript &lt;code&gt;npx create-react-app app-name --template cra-template-pwa-typescript&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://create-react-app.dev/docs/making-a-progressive-web-app/"&gt;Para se aprofundar mais em PWAs&lt;/a&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Deploying Elixir eBook</title>
      <author>Miguel Cobá</author>
      <pubDate>Mon, 22 Nov 2021 14:03:19 +0000</pubDate>
      <link>https://dev.to/miguelcoba/deploying-elixir-ebook-36n</link>
      <guid>https://dev.to/miguelcoba/deploying-elixir-ebook-36n</guid>
      <description>&lt;p&gt;I have compiled all the articles in the "Deploying Elixir" series in a handy eBook:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All together in a single place&lt;/li&gt;
&lt;li&gt;Nicely formatted&lt;/li&gt;
&lt;li&gt;Searchable&lt;/li&gt;
&lt;li&gt;With improved wording&lt;/li&gt;
&lt;li&gt;With better source code highlight&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But I have also added a &lt;em&gt;NEW, NEVER PUBLISHED BEFORE, BONUS&lt;/em&gt; chapter about deploying to heroku.&lt;/p&gt;

&lt;p&gt;And the best part:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IT IS FREE TO DOWNLOAD!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QcXdeSbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqo2j1poioem37btdg9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QcXdeSbg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sqo2j1poioem37btdg9v.png" alt="Deploying Elixir book cover" width="880" height="811"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#download-it-now"&gt;
  &lt;/a&gt;
  &lt;a href="https://store.miguelcoba.com/l/deployingelixir"&gt;Download it now&lt;/a&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;I'm &lt;a href="https://miguelcoba.com"&gt;Miguel Cobá&lt;/a&gt;. Follow me on &lt;a href="https://twitter.com/MiguelCoba_"&gt;Twitter&lt;/a&gt;, subscribe to my &lt;a href="https://newsletter.miguelcoba.com"&gt;newsletter&lt;/a&gt;, or read all my &lt;a href="https://blog.miguelcoba.com"&gt;articles&lt;/a&gt; to learn more info about Elixir, Elm, Web Development, or writing eBooks.&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@rishikeshs?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Rishikesh Sreehari&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/ebook?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>elixir</category>
      <category>book</category>
      <category>deploying</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Go Basics: Variables</title>
      <author>Abhinav Pandey</author>
      <pubDate>Mon, 22 Nov 2021 13:42:36 +0000</pubDate>
      <link>https://dev.to/abh1navv/go-basics-variables-14o0</link>
      <guid>https://dev.to/abh1navv/go-basics-variables-14o0</guid>
      <description>&lt;p&gt;In the last article, I gave a small introduction to programming with Go, where we saw the tiniest possible programs and the general syntax. &lt;/p&gt;

&lt;p&gt;Continuing on the syntax, let's take a look at some more syntax and understand how variables are declared in Go.&lt;/p&gt;

&lt;p&gt;If you're completely new to Go, please check out the previous article:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/abh1navv" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KGrqn2zx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DoVdWWG3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/440730/f0fc3149-bd2f-4450-99bb-39bdc8c95824.jpg" alt="abh1navv"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/abh1navv/getting-started-with-go-54pm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with Go&lt;/h2&gt;
      &lt;h3&gt;Abhinav Pandey ・ Nov 20 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#codenewbie&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#variables"&gt;
  &lt;/a&gt;
  Variables
&lt;/h2&gt;

&lt;p&gt;Variables are declared using the &lt;code&gt;var&lt;/code&gt; keyword and are used to store values.&lt;/p&gt;

&lt;p&gt;The following is an example of a variable declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The variable &lt;code&gt;name&lt;/code&gt; is of type &lt;code&gt;string&lt;/code&gt; and is assigned the value &lt;code&gt;John&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also declare multiple variables at once.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also declare variables with a type but without an initial value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can also declare multiple variables with a type but without an initial value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or multiple variables of the same type in a single line.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;occupation&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;occupation&lt;/code&gt; are of type &lt;code&gt;string&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;** Shorthand declaration of variables **&lt;/p&gt;

&lt;p&gt;You can also use the &lt;code&gt;:=&lt;/code&gt; operator to declare and assign a variable at the same time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"John"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that the &lt;code&gt;:=&lt;/code&gt; operator is only valid in short variable declarations. You cannot use it outside function bodies.&lt;br&gt;
When using the &lt;code&gt;:=&lt;/code&gt; operator, the variable is declared with the type of the right-hand side expression. The &lt;code&gt;var&lt;/code&gt; keyword is also not required.&lt;/p&gt;

&lt;p&gt;** Implicit type declaration **&lt;br&gt;
You can also declare a variable without specifying its type. In this case, the type is inferred from the initial value or a function call.&lt;br&gt;
For example, the following code declares a variable &lt;code&gt;age&lt;/code&gt; of type &lt;code&gt;int&lt;/code&gt; and assigns the value &lt;code&gt;30&lt;/code&gt; to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="m"&gt;30&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or using a function call.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;getAge&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also works for shorthand declarations.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#constants"&gt;
  &lt;/a&gt;
  Constants
&lt;/h2&gt;

&lt;p&gt;Constants are declared using the &lt;code&gt;const&lt;/code&gt; keyword. They are used to store values that cannot be changed.&lt;br&gt;
For example, the following code declares a constant &lt;code&gt;PI&lt;/code&gt; and assigns the value &lt;code&gt;3.14&lt;/code&gt; to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;PI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;3.14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Constants can also have implicit type declarations as in the above example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They cannot be declared using the &lt;code&gt;:=&lt;/code&gt; operator.&lt;/li&gt;
&lt;li&gt;They cannot be declared without an initial value.&lt;/li&gt;
&lt;li&gt;They cannot accept a function call as an initial value.&lt;/li&gt;
&lt;li&gt;The type of a constant may not be explicitly declared.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;Thanks for reading.&lt;br&gt;
This should give you an idea of how variables are declared in Go and how the syntax compares to other programming languages. &lt;/p&gt;

&lt;p&gt;Stay tuned for more on Go.&lt;/p&gt;

&lt;p&gt;If you want to connect with me, you can find me on Twitter &lt;a href="https://twitter.com/abh1navv"&gt;@abh1navv&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>go</category>
      <category>programming</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Build an escrow contract on the Ethereum blockchain with Solidity and Replit</title>
      <author>RitzaCo</author>
      <pubDate>Mon, 22 Nov 2021 13:39:57 +0000</pubDate>
      <link>https://dev.to/ritza/build-an-escrow-contract-on-the-ethereum-blockchain-with-solidity-and-replit-5175</link>
      <guid>https://dev.to/ritza/build-an-escrow-contract-on-the-ethereum-blockchain-with-solidity-and-replit-5175</guid>
      <description>&lt;p&gt;Since Satoshi Nakamoto released the first version of Bitcoin in early 2009, digital currencies and blockchain technology have been the site of frenzied innovation, excitement and speculation. In addition to Bitcoin itself, hundreds of competing and complementary blockchains and currencies have come and gone. In this tutorial, we will be looking at Ethereum, the second most popular and widely used cryptocurrency after Bitcoin.&lt;/p&gt;

&lt;p&gt;Ethereum's main innovation is to provide a Turing complete environment for on-chain computation, which means we can run code on the blockchain. This opens up an immense field of possibilities for creating decentralized finance (DeFi) platforms, which can act as open alternatives to traditional financial services such as loans, investment, insurance and the sale of artworks.&lt;/p&gt;

&lt;p&gt;In this tutorial, we will be building a simple escrow smart contract, which will include deploying our own &lt;a href="https://en.wikipedia.org/wiki/Non-fungible_token"&gt;non-fungible token&lt;/a&gt; (NFT). By the end of this tutorial, you will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have experience with developing Ethereum smart contracts using the Solidity programming language.&lt;/li&gt;
&lt;li&gt;Know the basics of deploying contracts to a blockchain and interacting with them.&lt;/li&gt;
&lt;li&gt;Have an understanding of some of the key considerations for secure blockchain development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;We need two things to get started with this project: a Solidity repl and a browser wallet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#solidity-repl"&gt;
  &lt;/a&gt;
  Solidity repl
&lt;/h3&gt;

&lt;p&gt;Sign in to &lt;a href="https://replit.com/"&gt;Replit&lt;/a&gt; or &lt;a href="https://replit.com/signup"&gt;create an account&lt;/a&gt; if you haven't already. Once logged in, create a Solidity starter repl.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---gxHLo0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/solidity-starter-repl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---gxHLo0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/solidity-starter-repl.png" alt="Create a solidity repl" width="880" height="456"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Solidity starter repl works a little differently from other repls you may have used in the past. Rather than running our repl every time we want to test out a new piece of code, we can run our repl once, to start it up, and it will automatically reload when changes are made to our Solidity code in &lt;code&gt;contract.sol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The Solidity starter repl comes with a friendly web interface, built using the &lt;a href="https://web3js.readthedocs.io/en/v1.5.2/"&gt;web3 Ethereum JavaScript API&lt;/a&gt;, which we will use to deploy and interact with our contracts. We will deploy to Replit's testnet, a custom version of the Ethereum blockchain managed by Replit and optimised for testing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#browser-wallet"&gt;
  &lt;/a&gt;
  Browser wallet
&lt;/h3&gt;

&lt;p&gt;We will need a browser-based web3 wallet to interact with the Replit testnet and our deployed contracts. MetaMask is a popular and feature-rich wallet implemented as a WebExtension. You can install it from &lt;a href="https://metamask.io/download.html"&gt;MetaMask's download page&lt;/a&gt;. Make sure you're using a supported browser -- either Chrome, Firefox, Brave or Edge.&lt;/p&gt;

&lt;p&gt;Once you've installed MetaMask, follow the prompts to create a wallet and sign in. MetaMask will give you a 12-word &lt;em&gt;secret recovery phrase&lt;/em&gt; -- this is your wallet's private key, and must be kept safe and secret. If you lose this phrase, you will not be able to access your wallet, and if someone else finds it, they will.&lt;/p&gt;

&lt;p&gt;If you're already using MetaMask, we recommend creating a new account for testing with Replit. You can do this from the account menu, which appears when you click on the account avatar in the top right corner of MetaMask interface.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction-to-smart-contract-development"&gt;
  &lt;/a&gt;
  Introduction to smart contract development
&lt;/h2&gt;

&lt;p&gt;Now that we've got our repl and wallet set up, we can start developing. We will be writing contracts, which are the basic building blocks of Ethereum programs. An individual contract can have state variables and functions, and can inherit from multiple other contracts. Contracts in Solidity are equivalent to classes in a language like Python or Java.&lt;/p&gt;

&lt;p&gt;Contracts on Ethereum and Ethereum-based networks (such as the Replit testnet and Binance Chain) are compiled to bytecode which runs on the &lt;a href="https://ethereum.org/en/developers/docs/evm/"&gt;Ethereum Virtual Machine&lt;/a&gt; (EVM). This is similar to how Java code compiles to bytecode for the JVM.&lt;/p&gt;

&lt;p&gt;A list of opcodes for EVM is provided &lt;a href="https://ethervm.io/"&gt;here&lt;/a&gt;. Many of the opcodes dealing with arithmetic and logical operations should be familiar if you've worked with any kind of assembly before. The EVM also has opcodes for blockchain-specific operations, such as getting information about the current block or chain.&lt;/p&gt;

&lt;p&gt;An additional consideration, unique to blockchain development, is that each opcode has an associated price (&lt;a href="https://docs.google.com/spreadsheets/d/1n6mRqkBz3iWcOlRem_mO09GtSKEKrAsfO7Frgx18pNU/edit#gid=0"&gt;listed here&lt;/a&gt;). Users of smart contracts pay a fee (known as &lt;a href="https://www.investopedia.com/terms/g/gas-ethereum.asp"&gt;gas&lt;/a&gt;) to invoke state-changing functions. This fee is determined by the opcodes used, and so it is in the interest of developers to keep their code as simple as possible.&lt;/p&gt;

&lt;p&gt;Solidity, which we will be using below, is the most popular language for developing smart contracts on Ethereum. Alternatives such as &lt;a href="https://vyper.readthedocs.io/en/stable/"&gt;Vyper&lt;/a&gt; exist, but are not as widely used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escrow-protocol-design"&gt;
  &lt;/a&gt;
  Escrow protocol design
&lt;/h2&gt;

&lt;p&gt;Before we jump into the code, let's make sure we have a plan for what we're going to build.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://www.investopedia.com/terms/e/escrow.asp"&gt;escrow&lt;/a&gt; is a contractual agreement in which a third party receives money from one party and pays it to another party after a certain condition has been met. In traditional finance, this third party needs to be a trusted individual or organization, such as a bank, but in DeFi, it can be a smart contract.&lt;/p&gt;

&lt;p&gt;We will build a simple escrow protocol that holds funds until a specified duration has passed. This could be used to give a friend some Ethereum for their birthday, or to save money for a specific occasion.&lt;/p&gt;

&lt;p&gt;Our escrow protocol will consist of two contracts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;Escrow&lt;/code&gt;, which will provide the end-user interface for escrowing and redeeming funds. This contract will also store all of the escrowed funds.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;EscrowNFT&lt;/code&gt;, which will store the details of individual escrows as NFTs. This will allow users to transfer immature escrows between one another.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the most famous use of NFTs involves buying and selling artworks and other collectibles on marketplaces like &lt;a href="https://opensea.io/"&gt;OpenSea&lt;/a&gt;, we can use them for all kinds of other purposes, such as to represent escrows.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escrow-nft"&gt;
  &lt;/a&gt;
  Escrow NFT
&lt;/h2&gt;

&lt;p&gt;Let's start coding with the EscrowNFT contract. Open &lt;code&gt;contract.sol&lt;/code&gt;, delete the file's contents, and add the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="c1"&gt;// SPDX-License-Identifier: MIT
&lt;/span&gt;&lt;span class="k"&gt;pragma&lt;/span&gt; &lt;span class="n"&gt;solidity&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/access/Ownable.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;EscrowNFT&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;ERC721Burnable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Ownable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;tokenCounter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// NFT data
&lt;/span&gt;    &lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;mapping&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"EscrowNFT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"ESCRW"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line of our contract is the &lt;a href="https://docs.soliditylang.org/en/v0.6.8/layout-of-source-files.html#spdx-license-identifier"&gt;license identifier&lt;/a&gt;. Smart contracts are usually open source, and reuse of other projects' code is common in DeFi, so it's a good idea to include a license that indicates how you would like others to use (or not use) your code. Supported licenses are listed &lt;a href="https://spdx.org/licenses/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next line, we define the version of Solidity we're using (in this case, any version newer than &lt;a href="https://docs.soliditylang.org/en/v0.8.2/"&gt;0.8.2&lt;/a&gt; up to 0.9.0). Solidity is an evolving language and often introduces breaking changes, so our code may not compile under older or newer versions of the language.&lt;/p&gt;

&lt;p&gt;Following the &lt;code&gt;pragma&lt;/code&gt; statement, we import some contracts from the &lt;a href="https://openzeppelin.com/contracts/"&gt;OpenZeppelin contract library&lt;/a&gt;. This library includes inheritable base contracts for a wide variety of common smart contract development needs, including base implementations of Ethereum token standards.&lt;/p&gt;

&lt;p&gt;The Ethereum token standard for NFTs is &lt;a href="https://ethereum.org/en/developers/docs/standards/tokens/erc-721/"&gt;ERC-721&lt;/a&gt;. Rather than implementing it ourselves, we can import and use OpenZeppelin's version. Note that while OpenZeppelin has a &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol"&gt;base &lt;code&gt;ERC721&lt;/code&gt; contract&lt;/a&gt;, we will use a couple of extensions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Burnable.sol"&gt;&lt;code&gt;ERC721Burnable&lt;/code&gt;&lt;/a&gt;, which will allow us to destroy NFTs that have been redeemed.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol"&gt;&lt;code&gt;ERC721Enumerable&lt;/code&gt;&lt;/a&gt;, which will allow us to list which NFTs belong to which owners.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both of these extension contracts inherit from &lt;code&gt;ERC721&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We also use OpenZeppelin's &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol"&gt;&lt;code&gt;Ownable&lt;/code&gt;&lt;/a&gt; contract, which will allow us to enforce access control on sensitive functionality.&lt;/p&gt;

&lt;p&gt;As Solidity supports &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#inheritance"&gt;multiple inheritance&lt;/a&gt;, the contract definition line uses all of our imports:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;contract EscrowNFT is ERC721Burnable, ERC721Enumerable, Ownable {
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the contract body, we define a few state variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;tokenCounter&lt;/code&gt;: this will provide us with unique, incrementing IDs for tokens as they are minted.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt;: these &lt;a href="https://docs.soliditylang.org/en/v0.8.2/types.html#mapping-types"&gt;mappings&lt;/a&gt; will store data for each token we mint.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note the use of &lt;a href="https://docs.soliditylang.org/en/v0.8.2/types.html#integers"&gt;&lt;code&gt;uint256&lt;/code&gt;&lt;/a&gt; as the type for these values: because most of the values we deal with in Solidity programs are monetary, we use unsigned integers to avoid storing negative numbers. In versions of Solidity prior to 0.8.0, this sometimes led to dangerous &lt;a href="https://dasp.co/#item-3"&gt;overflows&lt;/a&gt;, but &lt;a href="https://docs.soliditylang.org/en/v0.8.0/080-breaking-changes.html"&gt;overflow protection is now built into the language&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We do not need to initialize any of these variables, as Solidity will automatically set uninitialized variables to 0.&lt;/p&gt;

&lt;p&gt;The final part of the code we added above is the &lt;code&gt;constructor()&lt;/code&gt; method, which calls &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L44"&gt;a parent constructor&lt;/a&gt; to define our NFT's name and symbol/stock ticker.&lt;/p&gt;

&lt;p&gt;Now we need to define a mint function, so that we can create NFTs. We'll start with the function definition, which we will add just below the body of &lt;code&gt;constructor()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We're defining a function named &lt;code&gt;mint&lt;/code&gt; which takes three arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;address _recipient&lt;/code&gt;: The &lt;a href="https://docs.soliditylang.org/en/v0.8.2/types.html#address"&gt;address&lt;/a&gt; we will send the NFT to. This can be a user's wallet or another contract.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uint256 _amount&lt;/code&gt;: The amount of Ether escrowed by this NFT.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uint256 _matureTime&lt;/code&gt;: The time (represented as a &lt;a href="https://www.unixtimestamp.com/"&gt;Unix Timestamp&lt;/a&gt;) at which the NFT's funds will be redeemable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This function will return a single &lt;code&gt;uint256&lt;/code&gt; -- the numeric ID of the minted NFT.&lt;/p&gt;

&lt;p&gt;This is a &lt;code&gt;public&lt;/code&gt; function, which means it can be called by both external users and by other functions in this contract, or any contracts that inherit from it. Solidity provides granular function and variable visibility options, which are &lt;a href="https://bitsofco.de/solidity-function-visibility-explained/"&gt;explained here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;code&gt;onlyOwner&lt;/code&gt; refers to a &lt;a href="https://docs.soliditylang.org/en/v0.8.9/contracts.html#function-modifiers"&gt;modifier&lt;/a&gt; defined in &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol#L42"&gt;&lt;code&gt;Ownable&lt;/code&gt;&lt;/a&gt;. Modifiers are generally used to restrict functions for purposes of access control or state logic. This modifier will ensure that only the owner of the NFT contract is allowed to mint NFTs.&lt;/p&gt;

&lt;p&gt;Now that we've read and understood the function definition, let's add the function body:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;_mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// set values
&lt;/span&gt;        &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// increment counter
&lt;/span&gt;        &lt;span class="n"&gt;tokenCounter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tokenCounter&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// return ID
&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we use &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/ERC721.sol#L280"&gt;&lt;code&gt;ERC721&lt;/code&gt;'s internal &lt;code&gt;_mint()&lt;/code&gt; function&lt;/a&gt; to mint a new token to the recipient with the current value of &lt;code&gt;tokenCounter&lt;/code&gt; as its ID. We then set the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; mappings for our new token. Finally, we increment &lt;code&gt;tokenCounter&lt;/code&gt; and return the ID of our token.&lt;/p&gt;

&lt;p&gt;Next, we need to make a function that will return the details of a given token. Add the following code below the body of the &lt;code&gt;mint()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;tokenDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"EscrowNFT: Query for nonexistent token"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We declare this as a &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#view-functions"&gt;&lt;code&gt;view&lt;/code&gt; function&lt;/a&gt;. This declaration asserts that the function does not modify state, and thus its invocation does not need to be recorded on-chain. This means it will be callable for free.&lt;/p&gt;

&lt;p&gt;Our function body starts with a &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#view-functions"&gt;&lt;code&gt;require&lt;/code&gt; statement&lt;/a&gt;. This is an error-handling function in Solidity: if the condition in the first argument is not met, the current transaction will revert (undoing all previous actions) and the error message in the second argument will be displayed.&lt;/p&gt;

&lt;p&gt;If invoked with an existing token ID, this function will return two &lt;code&gt;uint256&lt;/code&gt; values, the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; for that ID. Note the syntax for &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#returning-multiple-values"&gt;multiple return&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We're almost done with our NFT contract! Before we move on, we need to add a few boilerplate functions. Add the following code below the body of your &lt;code&gt;tokenDetails()&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_beforeTokenTransfer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;internal&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;supportsInterface&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bytes4&lt;/span&gt; &lt;span class="n"&gt;_interfaceId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;virtual&lt;/span&gt; &lt;span class="k"&gt;override&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ERC721&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ERC721Enumerable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our first function will return the contract's address. This will make it easier to work with in the Replit web interface.&lt;/p&gt;

&lt;p&gt;The last two functions resolve ambiguities introduced by Solidity's multiple inheritance. Because we're using two different ERC-721 extensions, the base &lt;code&gt;ERC721&lt;/code&gt; contract is inherited twice with different functions added and overridden. To resolve the compiler's confusion, we specify that the versions of &lt;code&gt;_beforeTokenTransfer()&lt;/code&gt; and &lt;code&gt;supportsInterface()&lt;/code&gt; provided by &lt;code&gt;ERC721Enumerable&lt;/code&gt; should be preferred.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#escrow-contract"&gt;
  &lt;/a&gt;
  Escrow contract
&lt;/h2&gt;

&lt;p&gt;Now we need to create our Escrow contract, which will act as an interface for creating and redeeming escrows. Add the following &lt;code&gt;contract&lt;/code&gt; block to the bottom of &lt;code&gt;contract.sol&lt;/code&gt;, below the &lt;code&gt;EscrowNFT&lt;/code&gt; contract:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;&lt;span class="k"&gt;contract&lt;/span&gt; &lt;span class="n"&gt;Escrow&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Ownable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="n"&gt;EscrowNFT&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Escrowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_matureTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Redeemed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;event&lt;/span&gt; &lt;span class="n"&gt;Initialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_escrowNft&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This contract inherits from &lt;code&gt;Ownable&lt;/code&gt;. We define two state variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;escrowNFT&lt;/code&gt;: This is the instance of the &lt;code&gt;EscrowNFT&lt;/code&gt; contract that our &lt;code&gt;Escrow&lt;/code&gt; contract will use.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;initialized&lt;/code&gt;: This variable will help us to implement the &lt;a href="https://soliditydeveloper.com/design-pattern-solidity-initialize-contract-after-deployment"&gt;initializable design pattern&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also define a number of &lt;a href="https://docs.soliditylang.org/en/v0.8.2/contracts.html#events"&gt;events&lt;/a&gt;. Events provide a user-friendly form of logging on the blockchain and are commonly used by dApps (decentralized apps -- i.e. web frontends for smart contracts). It's considered best practice to emit events whenever a state change is made, so we've defined events for our contract's three state-changing actions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creation of escrow NFTs.&lt;/li&gt;
&lt;li&gt;Redeeming of escrowed funds.&lt;/li&gt;
&lt;li&gt;Initialization of the contract.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's implement initialization now. Add the following code below your event definitions:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;modifier&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Contract is not yet initialized"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_escrowNftAddress&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="n"&gt;onlyOwner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;initialized&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Contract already initialized."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;escrowNFT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EscrowNFT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_escrowNftAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;initialized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Initialized&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_escrowNftAddress&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we define a custom modifier, &lt;code&gt;isInitialized&lt;/code&gt;, which will revert if &lt;code&gt;initialized&lt;/code&gt; is false. If &lt;code&gt;initialized&lt;/code&gt; is true, the function we apply this modifier to will execute at &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we define our &lt;code&gt;initialize()&lt;/code&gt; function, which takes a single argument: the address of the &lt;code&gt;EscrowNFT&lt;/code&gt; contract to use. We've given this function &lt;code&gt;external&lt;/code&gt; visibility, so it can only be called by an external user, and applied the &lt;code&gt;onlyOwner&lt;/code&gt; modifier, so only the contract's owner can initialize it.&lt;/p&gt;

&lt;p&gt;In the function body, we ensure that the contract is not already initialized, and then we initialize our &lt;code&gt;escrowNFT&lt;/code&gt; state variable, set  &lt;code&gt;initialized&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, and emit an event.&lt;/p&gt;

&lt;p&gt;Now we need a function that allows us to create escrow NFTs. Add the following code below the &lt;code&gt;initialize&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;escrowEth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt; &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="k"&gt;payable&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_recipient&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s"&gt;"Cannot escrow to zero address."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Cannot escrow 0 ETH."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;_duration&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Escrowed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;_recipient&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our &lt;code&gt;escrowEth&lt;/code&gt; function is &lt;code&gt;payable&lt;/code&gt;, which means it can receive Ether, and it uses the &lt;code&gt;isInitialized&lt;/code&gt; modifier. It takes a recipient address and an escrow duration, specified in seconds.&lt;/p&gt;

&lt;p&gt;In the function body, we ensure that the recipient is not the zero address, to prevent users from accidentally minting NFTs without specifying the receiver, and that the amount of Ether to be escrowed (accessible from &lt;a href="https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties"&gt;&lt;code&gt;msg.value&lt;/code&gt;&lt;/a&gt;) is greater than zero.&lt;/p&gt;

&lt;p&gt;We then set the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; values for our NFT, using &lt;a href="https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties"&gt;&lt;code&gt;block.timestamp&lt;/code&gt;&lt;/a&gt; to get the current time (approximately). These values are provided to &lt;code&gt;escrowNFT.mint&lt;/code&gt;, which will mint our NFT to the specified recipient.&lt;/p&gt;

&lt;p&gt;Finally, we emit an event, using &lt;a href="https://docs.soliditylang.org/en/v0.8.2/units-and-global-variables.html#block-and-transaction-properties"&gt;&lt;code&gt;msg.sender&lt;/code&gt;&lt;/a&gt; to retrieve the address of the user who called the function.&lt;/p&gt;

&lt;p&gt;Now that we can create escrow NFTs, we need a way for the recipient to redeem the funds in a matured NFT. Let's create a function for that now, below the definition of our &lt;code&gt;escrowEth&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;redeemEthFromEscrow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ownerOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Must own token to claim underlying Eth"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matureTime&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Escrow period not expired."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;burn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Transfer failed."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Redeemed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our redemption function first checks whether &lt;code&gt;msg.sender&lt;/code&gt; is the owner of the token, to prevent users from attempting to redeem tokens they don't own. It then retrieves the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; for the specified token ID, and checks whether the &lt;code&gt;matureTime&lt;/code&gt; has passed.&lt;/p&gt;

&lt;p&gt;If the token is owned by &lt;code&gt;msg.sender&lt;/code&gt; and its &lt;code&gt;matureTime&lt;/code&gt; has passed, it is burned using the &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Burnable.sol#L21"&gt;&lt;code&gt;burn()&lt;/code&gt; function from ERC721Burnable&lt;/a&gt;. This destroys the token, ensuring that it cannot be redeemed again.&lt;/p&gt;

&lt;p&gt;Once the token is destroyed, we transfer its underlying Ether to &lt;code&gt;msg.sender&lt;/code&gt;. As the creator of the escrow NFT originally paid this amount of Ether into the contract, it should still be available. There are a few different ways of sending Ether in Solidity -- &lt;a href="https://solidity-by-example.org/sending-ether/"&gt;using &lt;code&gt;call&lt;/code&gt; is the best one&lt;/a&gt;. &lt;code&gt;call&lt;/code&gt; returns two values, but we only want the first one, so we leave out the second variable declaration in our multiple return syntax.&lt;/p&gt;

&lt;p&gt;If the Ether transfer fails, we revert, undoing the destruction of the token. Otherwise we emit an event to record the escrow redemption.&lt;/p&gt;

&lt;p&gt;Our contract now does the main things it needs to, but we can make some improvements. For example, rather than requiring users to specify the ID of the token they want to redeem, we can create a function that redeems all matured tokens in their possession. Let's do this now, by adding a new function beneath the definition of &lt;code&gt;redeemEthFromEscrow&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;redeemAllAvailableEth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;external&lt;/span&gt; &lt;span class="n"&gt;isInitialized&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;nftBalance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balanceOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nftBalance&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"No escrow NFTs to redeem."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;totalAmount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;nftBalance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;tokenId&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenOfOwnerByIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint256&lt;/span&gt; &lt;span class="n"&gt;matureTime&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tokenDetails&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matureTime&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;escrowNFT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;burn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokenId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;totalAmount&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;amount&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalAmount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"No Ether to redeem."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;call&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;totalAmount&lt;/span&gt;&lt;span class="p"&gt;}(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="nb"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Transfer failed."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;emit&lt;/span&gt; &lt;span class="n"&gt;Redeemed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalAmount&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We start by querying &lt;code&gt;escrowNFT.balanceOf()&lt;/code&gt; to find out the number of escrow NFT tokens &lt;code&gt;msg.sender&lt;/code&gt; owns. If they own none, we revert.&lt;/p&gt;

&lt;p&gt;We then create a variable named &lt;code&gt;totalAmount&lt;/code&gt; and loop through the user's NFTs. We can get the ID for each one using &lt;a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/ERC721Enumerable.sol#L37"&gt;&lt;code&gt;tokenOfOwnerByIndex&lt;/code&gt;&lt;/a&gt;, a function defined in &lt;code&gt;ERC721Enumerable&lt;/code&gt;. We then retrieve the &lt;code&gt;amount&lt;/code&gt; and &lt;code&gt;matureTime&lt;/code&gt; for the token using &lt;code&gt;escrowNFT.tokenDetails()&lt;/code&gt;. If a given token's &lt;code&gt;matureTime&lt;/code&gt; has passed, we burn it and add its value to &lt;code&gt;totalAmount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once the for loop has completed, we check whether &lt;code&gt;totalAmount&lt;/code&gt; is greater than zero, and revert if it isn't. We then send the &lt;code&gt;totalAmount&lt;/code&gt; in Ether to &lt;code&gt;msg.sender&lt;/code&gt;. At this point, you may wonder why we didn't just loop through the user's NFTs and called &lt;code&gt;redeem&lt;/code&gt; on each one, to avoid repeating code. While this would make our code simpler to read, it would lead to a lot of extra checks and transfers, which would make this function more expensive for users to call. When developing smart contracts, keeping the cost of each function invocation to a minimum is paramount.&lt;/p&gt;

&lt;p&gt;Let's add one more function before we deploy our contracts. You should recognize &lt;code&gt;contractAddress()&lt;/code&gt; from &lt;code&gt;EscrowNFT&lt;/code&gt; above. Add it below the definition of &lt;code&gt;redeemAllAvailableEth()&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight solidity"&gt;&lt;code&gt;    &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;contractAddress&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;view&lt;/span&gt; &lt;span class="k"&gt;returns&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;address&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And with that, our code is complete!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-our-protocol"&gt;
  &lt;/a&gt;
  Testing our protocol
&lt;/h2&gt;

&lt;p&gt;Now that we've written our contracts, it's time to deploy them to the Replit testnet and test them out. We'll use our repl's web interface to do this. &lt;/p&gt;

&lt;p&gt;First, run your repl. Once all of the dependencies are installed, you should see the Replit Ethereum web interface in your repl's browser. It looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OZo2sRYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/replit-eth-web.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OZo2sRYN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/replit-eth-web.png" alt="Replit Ethereum web interface" width="880" height="380"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect your MetaMask wallet to the web interface and switch to the Replit testnet. Then click the link to get 1 ETH for testing. Wait until 1 ETH shows up in your wallet balance on the top right of the page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wvi76zbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/switch-to-test.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wvi76zbV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/switch-to-test.png" alt="Switch to test" width="880" height="200"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--miQ8RQa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/get-one.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--miQ8RQa6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/get-one.png" alt="Get one Ether" width="880" height="99"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now you can deploy your contracts. Select "Escrow" from the drop-down box and click &lt;strong&gt;Deploy&lt;/strong&gt;. Approve the MetaMask pop-up that appears. Then do the same with "EscrowNFT".&lt;/p&gt;

&lt;p&gt;Once both of these contracts have been deployed, they will show up as expandable boxes below the drop-down box. Expand both and take a look at all the different functions available.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hzpcrBEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/deployed-contracts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hzpcrBEW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://docs.replit.com/images/tutorials/33-escrow-solidity/deployed-contracts.png" alt="Deployed contracts" width="880" height="626"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we can use either of these contracts, we need to do some setup. First, let's initialize &lt;code&gt;Escrow&lt;/code&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;EscrowNFT&lt;/code&gt;, run the view function &lt;code&gt;contractAddress&lt;/code&gt;. Click on the output to copy it to your clipboard.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;Escrow&lt;/code&gt;, find the &lt;code&gt;initialize&lt;/code&gt; function. Paste the contents of your clipboard into the value for &lt;code&gt;_escrowNftAddress&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;initialize&lt;/code&gt; function and confirm the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Our &lt;code&gt;Escrow&lt;/code&gt; contract is now initialized and linked to &lt;code&gt;EscrowNFT&lt;/code&gt;. But before we can use it, there's an additional complication. You'll recall that we added the &lt;code&gt;onlyOwner&lt;/code&gt; modifier to the &lt;code&gt;mint()&lt;/code&gt; function in &lt;code&gt;EscrowNFT&lt;/code&gt;. When a contract that inherits from &lt;code&gt;Ownable&lt;/code&gt; is deployed, its owner is set to the address that deployed it, which will be your wallet address. But we need it to be owned by &lt;code&gt;Escrow&lt;/code&gt; so that &lt;code&gt;escrowEth()&lt;/code&gt; can call &lt;code&gt;mint()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;code&gt;Ownable&lt;/code&gt; provides functionality for transferring ownership, so we can transfer &lt;code&gt;EscrowNFT&lt;/code&gt; to &lt;code&gt;Escrow&lt;/code&gt; in the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;Escrow&lt;/code&gt;, run the view function &lt;code&gt;contractAddress&lt;/code&gt;. Click on the output to copy it to your clipboard.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;EscrowNFT&lt;/code&gt;, find the &lt;code&gt;transferOwnership&lt;/code&gt; function. Paste the contents of your clipboard into the value for &lt;code&gt;newOwner&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;transferOwnership&lt;/code&gt; function and confirm the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now &lt;code&gt;Escrow&lt;/code&gt; owns &lt;code&gt;EscrowNFT&lt;/code&gt; and our system will work. Let's test it out by doing the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Find the &lt;code&gt;escrowEth&lt;/code&gt; function in &lt;code&gt;Escrow&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Specify your own address, a short duration and a small amount of Ether.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;escrowEth&lt;/code&gt; function and approve the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you attempt to claim your escrowed Ether using either of the redemption functions in &lt;code&gt;Escrow&lt;/code&gt; before the duration has passed, the transaction should fail with the expected error message. However, if you wait for the duration to pass and then call either of the redemption functions, the transaction will fail for a different reason.&lt;/p&gt;

&lt;p&gt;Both redemption functions call &lt;code&gt;EscrowNFT&lt;/code&gt;'s &lt;code&gt;burn()&lt;/code&gt; function to burn tokens. This is an access-controlled function, available only to the token owner and addresses approved by the token owner. If this weren't the case, anyone could burn any token just by calling the function.&lt;/p&gt;

&lt;p&gt;To allow &lt;code&gt;Escrow&lt;/code&gt; to burn our NFT, we need to give it approval. We can do this in the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;EscrowNFT&lt;/code&gt;, find the &lt;code&gt;setApprovalForAll&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;Copy the address from &lt;code&gt;Escrow&lt;/code&gt;'s &lt;code&gt;contractAddress&lt;/code&gt; function output.&lt;/li&gt;
&lt;li&gt;Paste in the address as the value for &lt;code&gt;operator&lt;/code&gt; and specify &lt;code&gt;true&lt;/code&gt; as the value for &lt;code&gt;approved&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run the &lt;code&gt;setApprovalForAll&lt;/code&gt; function and confirm the MetaMask pop-up that appears.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once approval is set, you should be able to successfully redeem the escrowed Ether from your mature tokens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#security-and-trust-considerations-for-smart-contract-development"&gt;
  &lt;/a&gt;
  Security and trust considerations for smart contract development
&lt;/h2&gt;

&lt;p&gt;We've written our escrow system as a way to learn about Solidity development and interacting with smart contracts on the blockchain. To facilitate these outcomes, our contracts make use of a design that is partially insecure and would not be recommended in practice.&lt;/p&gt;

&lt;p&gt;A key part of earning user trust as a smart contract developer is to ensure that you have minimal control over the contracts you deploy. That's why, for example, we designed the &lt;code&gt;initialize()&lt;/code&gt; function in &lt;code&gt;Escrow&lt;/code&gt; to only be callable once. If a contract has a large number of privileged functions that make significant changes to its state and behavior, there is a risk that the owner -- or a hacker who manages to compromise the owner's wallet -- will use these functions to steal user funds.&lt;/p&gt;

&lt;p&gt;An unscrupulous developer could create a malicious version of our escrow protocol by doing the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;After deploying &lt;code&gt;EscrowNFT&lt;/code&gt; but before transferring its ownership, they could call &lt;code&gt;mint()&lt;/code&gt; to create an Escrow token with an amount of 100.&lt;/li&gt;
&lt;li&gt;They could then transfer &lt;code&gt;EscrowNFT&lt;/code&gt;'s ownership to &lt;code&gt;Escrow&lt;/code&gt;, and wait for users to start paying Ether to &lt;code&gt;Escrow&lt;/code&gt; in order to create tokens.&lt;/li&gt;
&lt;li&gt;Once &lt;code&gt;Escrow&lt;/code&gt; had a balance of 100 Ether or more, the developer could redeem their token, successfully stealing all user funds.&lt;/li&gt;
&lt;li&gt;Redemption of any subsequent escrow tokens would fail, as the &lt;code&gt;Escrow&lt;/code&gt; contract would contain insufficient funds.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While the evidence of all of this happening would be visible on the blockchain, through events, users may not want or easily be able to look at that information before using the protocol.&lt;/p&gt;

&lt;p&gt;Another, less serious, consideration is that &lt;code&gt;block.timestamp&lt;/code&gt; is not always accurate. As this value is derived from when Ethereum miners report it, &lt;a href="https://dasp.co/#item-8"&gt;it can be manipulated slightly&lt;/a&gt;. This will have a negligible effect on escrow periods of multiple days, weeks or months, but could affect very short escrow periods quite significantly.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h2&gt;

&lt;p&gt;Now that you've got your feet wet with Solidity development, here are some ideas for further development:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modify the architecture of the protocol to make it impossible to create a malicious version in the manner described above.&lt;/li&gt;
&lt;li&gt;Create a view function in &lt;code&gt;Escrow&lt;/code&gt; that tells the user how much Ether is available for redemption.&lt;/li&gt;
&lt;li&gt;Determine whether the user has approved &lt;code&gt;Escrow&lt;/code&gt; before attempting to burn tokens. Add a nice error message if they haven't.&lt;/li&gt;
&lt;li&gt;Create an &lt;a href="https://www.investopedia.com/news/what-erc20-and-what-does-it-mean-ethereum/"&gt;ERC-20&lt;/a&gt; token and allow users to escrow it instead of Ether.&lt;/li&gt;
&lt;li&gt;See if you can rewrite any of the contract functions to use less gas.&lt;/li&gt;
&lt;/ul&gt;

</description>
    </item>
    <item>
      <title>SvelteKit Tooling:  7 Tools to Streamline you CI Workflow</title>
      <author>Rodney Lab</author>
      <pubDate>Mon, 22 Nov 2021 13:37:38 +0000</pubDate>
      <link>https://dev.to/askrodney/sveltekit-tooling-7-tools-to-streamline-you-ci-workflow-305h</link>
      <guid>https://dev.to/askrodney/sveltekit-tooling-7-tools-to-streamline-you-ci-workflow-305h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-putting-your-continuous-integration-process-on-skates"&gt;
  &lt;/a&gt;
  🚀 SvelteKit Tooling: Putting your Continuous Integration Process on Skates
&lt;/h2&gt;

&lt;p&gt;Adding SvelteKit tooling to your continuous integration (CI) process can help you work more efficiently as well as keep your code base more consistent. This is useful when you need to hand your project over to a client, or even get assistance from colleagues or external sources. We look at some tools you might consider adding to your CI process in this article.  We cover checking your code follows best practices, that it has consistent styling as well as how you can create consistent commit messages. I hope you are able to apply at least a couple of the aspects covered to your regular SvelteKit development process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%96%A5-vs-code-extensions"&gt;
  &lt;/a&gt;
  🖥 VS Code Extensions
&lt;/h2&gt;

&lt;p&gt;Since &lt;a href="https://insights.stackoverflow.com/survey/2021/#most-popular-technologies-new-collab-tools-prof"&gt;70% of professional developers use Visual Studio Code&lt;/a&gt;, let's take a quick look at some extensions you might want to add to your SvelteKit workflow before we get on to the main tooling items. Although the tools we look at later are mostly standalone tools, you will get additional benefits when working with VSCode if you add the corresponding extension. We will look at the dot files as we go along.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint"&gt;&lt;strong&gt;ESLint&lt;/strong&gt;&lt;/a&gt; — working in conjunction with the main ESList package (see below), this will highlight errors in your code, often helping you realise early that you mistyped a variable name or forgot to import or install a package.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode"&gt;&lt;strong&gt;Prettier&lt;/strong&gt;&lt;/a&gt; — prettier is probably the best known code formatter. Rather than argue over&lt;br&gt;
whether or not to use it, I think the argument has shifted to whether it should be used to enforce&lt;br&gt;
tab or space indenting — I'm not getting into that one!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint"&gt;&lt;strong&gt;stylelint&lt;/strong&gt;&lt;/a&gt; — this will flag up accessibility as well as CSS code style issues in VSCode.  I run stylelint before committing code, but it's nice to have errors highlighted in the editor so you can fix them individually as they crop up. That is rather than having to tackle a stack of them just before you commit at the end of a long session.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=svelte.svelte-vscode"&gt;&lt;strong&gt;SvelteCode&lt;/strong&gt;&lt;/a&gt; — official Svelte VSCode extension adds syntax highlighting for your Svelte code.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#base-vscode-configuration"&gt;
  &lt;/a&gt;
  Base VSCode Configuration
&lt;/h3&gt;

&lt;p&gt;Everyone has their own favourite VSCode settings. Personally I prefer a light-touch approach, so hopefully this might be used as a starting point for anyone. You can set these globally, though typically I add a config file to each project (at &lt;code&gt;.vscode/settings&lt;/code&gt; in the project folder) so I can tweak settings based on what the project uses.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.formatOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"editor.codeActionsOnSave"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"source.organizeImports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;    
  &lt;/span&gt;&lt;span class="nl"&gt;"[markdown]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrap"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"bounded"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.wordWrapColumn"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.quickSuggestions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"[svelte]"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"editor.defaultFormatter"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte.svelte-vscode"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;formatOnSave&lt;/code&gt; is my most loved setting! I have mixed feelings about &lt;code&gt;organizeImports&lt;/code&gt; and omit it on most projects — it can get a touch annoying when it removes imports which you still need. You can run organise imports manually using the Shift + Alt + O key combination. The markdown options make your content a little easier to read in the editor (you might prefer 100 or 120 character lines instead of 80). I have had a couple of Svelte projects where formatting stopped working and found adding the last setting fixes this. As I say this is just a base and you will probably have your own favourites. I'm keen to hear what I am missing (remember I prefer a minimalist approach though)!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-1-pnpm"&gt;
  &lt;/a&gt;
  🔥 SvelteKit Tooling: 1. pnpm
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pnpm&lt;/code&gt; is a packet management tool like &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;. I like to look at it as a more modern imagination of a package manager. The main selling points are speed and efficiency. When you install packages in your project, &lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; will download the package and save it to a &lt;code&gt;node_modules&lt;/code&gt; folder in your project. These folders can get huge and you have to scan though old projects deleting them whenever your machine starts running low on free disk space. In contrast &lt;code&gt;pnpm&lt;/code&gt; creates a central repository for packages on your machine and just adds a link from the &lt;code&gt;node_modules&lt;/code&gt; folder of your project to the particular package in the the central repo.&lt;/p&gt;

&lt;p&gt;The two main advantages of the central local repo approach (which &lt;code&gt;pnpm&lt;/code&gt; follows) are that it is quicker to start up new projects as many of the packages you need to install will already be on your machine. Then, on top, you save on disk space. In the screenshot below, you see in the last long line 142 packages were reused in this particular case. That's 142 packages that did not need to be freshly downloaded. You will also see the output is a little more terse and cleanly formatted than with other tools.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U2PJAnvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxd530gqcwo283cuahe3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U2PJAnvp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oxd530gqcwo283cuahe3.png" alt="SvelteKit Tooling:  p n p m install command screenshot.  Result shows an ouput line recording 142 reused packages and only 2 downloaded" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You need a one-off install to get &lt;code&gt;pnpm&lt;/code&gt; running on your machine. After that, it accepts commands similar to the ones you will be using to with &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;. If you already have &lt;code&gt;npm&lt;/code&gt; on your machine just run this command to install &lt;code&gt;pnpm&lt;/code&gt; globally:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i &lt;span class="nt"&gt;-g&lt;/span&gt; pnpm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To check for updates for &lt;code&gt;pnpm&lt;/code&gt; and other global packages, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm outdated &lt;span class="nt"&gt;-g&lt;/span&gt;
pnpm add &lt;span class="nt"&gt;-g&lt;/span&gt; outdated-package-one outdated-package-two
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-2-prettier"&gt;
  &lt;/a&gt;
  🧑🏽 SvelteKit Tooling: 2. Prettier
&lt;/h2&gt;

&lt;p&gt;You can automatically add prettier to a new skeleton Svelte project form the init tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm init svelte@next sveltekit-tooling &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nv"&gt;$_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VTtRNiNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o58y8efarwqspn3a7w1z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VTtRNiNw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o58y8efarwqspn3a7w1z.png" alt="SvelteKit Tooling:  Prettier screenshot shows output from pnpm init svelte command with Skeleton project, Yes to E S Lint and yes to Prettier answers" width="880" height="560"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The default prettier script installed into &lt;code&gt;package.json&lt;/code&gt; uses the &lt;code&gt;.gitignore&lt;/code&gt; file to decide which files to ignore for formatting. I like to commit the &lt;code&gt;pnpm-lock.yaml&lt;/code&gt; file but am not too bothered about how it is formatted so go update the script and add a &lt;code&gt;.prettierignore&lt;/code&gt; file to my project root folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.svelte-kit/**
static/**
build/**
functions/**
node_modules/**
pnpm-lock.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sveltekit-tooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice I add a &lt;code&gt;prettier:check&lt;/code&gt; script too! I use this for a final check before committing, even though I set &lt;code&gt;formatOnSave&lt;/code&gt; in VSCode.&lt;/p&gt;

&lt;p&gt;If you prefer tabs to spaces, ignore the rest of this paragraph! By the way I'm not saying spaces are better than tabs, just letting you know how to switch if you don't want to go with the default, just saying! Here's my &lt;code&gt;.prettierrc&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useTabs"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"arrowParens"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"always"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"singleQuote"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"trailingComma"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"all"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"printWidth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use default filenames here for the the ignore and config file so we don't need to specify them explicitly in the scripts.&lt;/p&gt;

&lt;p&gt;For completeness, here is a typical &lt;code&gt;.gitignore&lt;/code&gt; file for one of my SvelteKit projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# SvelteKit Files
build/
functions/
/.svelte-kit

# Dependency directories
node_modules/
/package

# Optional eslint cache
.eslintcache

# dotenv environment variable files
.env*
!.env.EXAMPLE

# Mac files
.DS_Store

# Local Netlify folder
.netlify
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While we're slightly off topic and since this does not fit neatly anywhere else, it is worth adding a &lt;code&gt;.nvmrc&lt;/code&gt; file to new SvelteKit projects. This sets the node version when your host builds the project. Not setting it can result it builds failing as some hosts use an older node version by default.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;14
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-3-eslint"&gt;
  &lt;/a&gt;
  👀 SvelteKit Tooling: 3. ESLint
&lt;/h2&gt;

&lt;p&gt;ESLint is a well-know JavaScript linting tool. There are various rules you can set though the defaults set by the Svelte init tool do work quite well. If you have set up your project using another method you can run the ESLint setup tool to get you going:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; eslint
./node_modules/.bin/eslint &lt;span class="nt"&gt;--init&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the &lt;code&gt;.eslint.cjs&lt;/code&gt; file that I go with (default for JavaScript skeleton project from init tool):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;eslint:recommended&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;prettier&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="na"&gt;overrides&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt; &lt;span class="na"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*.svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="na"&gt;processor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte3/svelte3&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}],&lt;/span&gt;
    &lt;span class="na"&gt;parserOptions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;sourceType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;ecmaVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;browser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;es2017&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here's the &lt;code&gt;lint&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; script I typically use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sveltekit-tooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-4-sveltecheck"&gt;
  &lt;/a&gt;
  😇 SvelteKit Tooling: 4. svelte-check
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/sveltejs/language-tools/tree/master/packages/svelte-check"&gt;svelte-check&lt;/a&gt; is a handy tool for finding TypeScript errors in your code, though I also like to use it on JavaScript projects. You might find it spits out a lot of errors. If you are just starting out, you will not understand all of them or know which ones are safe to ignore. In this case, if your code works, just fix the accessibility errors and tackle the others one by one as you gain more experience.&lt;/p&gt;

&lt;p&gt;Anyway to set it up run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; svelte-check
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then add a script to &lt;code&gt;package.json&lt;/code&gt; to run it when you need to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"sveltekit-tooling"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"dev"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit dev"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit build"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"preview"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-kit preview"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"format"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --write --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"prettier:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --check --plugin-search-dir=. ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lint"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"prettier --ignore-path .gitignore --check --plugin-search-dir=. . &amp;amp;&amp;amp; eslint --ignore-path .gitignore ."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"svelte:check"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"svelte-check --fail-on-warnings"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can set a stricter &lt;code&gt;--fail-on-hints&lt;/code&gt; flag as an alternative.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-5-stylelint"&gt;
  &lt;/a&gt;
  💄 SvelteKit Tooling: 5. stylelint
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;stylelint&lt;/code&gt; is great for checking accessibility issues in your CSS code.  You can also use it to prevent colour drift and to keep your code more maintainable.  As an example, setting a rule for no named colours will flag up an error if add something like &lt;code&gt;border-color: red&lt;/code&gt; for debugging and forget to remove it. More likely though, you might set a hex or HSL value while fixing or setting something up instead of using a named variable like &lt;code&gt;--theme-colour&lt;/code&gt;.  When you later need to tweak the theme colour, the manually added hex value will persist creating inconsistencies in the site.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;stylelint&lt;/code&gt; is one way to fix this problem.  Another, if you're a TypeScript fan is to be super strict and use vanilla-extract with contracts.  For stylelint there's a whole video on vanilla CSS linting in SvelteKit.  Also follow that link for another video which looks at SCSS linting in SvelteKit.&lt;/p&gt;

&lt;p&gt;I add this script to &lt;code&gt;package.json&lt;/code&gt; for vanilla CSS projects:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"lint:css"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stylelint &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;src/**/*.{css,svelte}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;this is the SCSS alternative:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"lint:scss"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stylelint &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;src/**/*.{css,scss,svelte}&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%EF%B8%8F-sveltekit-tooling-6-precommit"&gt;
  &lt;/a&gt;
  ⛔️ SvelteKit Tooling: 6. precommit
&lt;/h2&gt;

&lt;p&gt;When working in a team, your colleagues will probably appreciate consistent and concise commit messages.  There is a whole &lt;a href="https://www.conventionalcommits.org/en/v1.0.0/"&gt;system for commit message etiquette named conventional commits&lt;/a&gt;.  That is just one option and you might prefer one of the other various options.  With conventional commits, your commit messages take a particular format.   In this example our commit type is &lt;code&gt;refactor&lt;/code&gt; (we could also choose fix, style or feature among others).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;refactor(services/narcissus-api): 🏄🏽‍♂️ add Supabase client 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Following the type of commit in brackets we have a description for the part of the project affected. Then the commit message itself.  The emoji is not required!  If you want to try out conventional commits, &lt;a href="https://github.com/commitizen-tools/commitizen"&gt;you might like the commitizen command line tool&lt;/a&gt;. As well as holding your hand as you write commit messages, it can handle version bumping and generate changelogs for you.  We won't go into details here, but definitely try it on a new side project to see if it suits you.&lt;/p&gt;

&lt;p&gt;I like to include the &lt;code&gt;commitlint&lt;/code&gt; tool in all my SvelteKit projects to enforce the conventional commit syntax.  If you want to try it, install a couple of packages and then add the config file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-g&lt;/span&gt; commitlint
pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; @commitlint/config-conventional
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create a &lt;code&gt;commitlint.config.cjs&lt;/code&gt; file in your project's root folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;extends&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@commitlint/config-conventional&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because SvelteKit uses ES modules by default, it is important that the file extension is &lt;code&gt;.cjs&lt;/code&gt; rather than &lt;code&gt;.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To test it out run a command form the terminal like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'nonsense non-valid commit message'&lt;/span&gt; | pnpx commitlint
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is asking &lt;code&gt;commitlint&lt;/code&gt; to consider &lt;code&gt;nonsense non-valid commit message&lt;/code&gt; to be a commit message and to check it for us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZY9zr7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu2p65f5o4766vd9r7ve.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0ZY9zr7P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wu2p65f5o4766vd9r7ve.png" alt="SvelteKit Tooling:  Commitlint screenshot show output from commitlint lint with non-valid commit message. Response says subject mustnot be empty and type must not be empty" width="880" height="562"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will see how to integrate &lt;code&gt;commitlint&lt;/code&gt; into the continuous integration process next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-7-husky"&gt;
  &lt;/a&gt;
  🏋🏽 SvelteKit Tooling: 7. Husky
&lt;/h2&gt;

&lt;p&gt;Husky pulls together a few of the other tools we have already seen.  Essentially it runs git hooks locally, before committing your code.  If you have ever pushed code to an upstream repo only to realise you forgot to format it or didn't save a file with an error in it before committing Husky will get your back.  So, as an example, you can make sure you pass &lt;code&gt;svelte-check&lt;/code&gt; and a host of other things before pushing to your remote repo.  Here's my setup but you can go to town and add a whole lot more.&lt;/p&gt;

&lt;p&gt;To get going install Husky as a dev dependency:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm add &lt;span class="nt"&gt;-D&lt;/span&gt; husky
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next you can add config files to run at different stages in the continuous integration process:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpx &lt;span class="nt"&gt;--no-install&lt;/span&gt; commitlint &lt;span class="nt"&gt;--edit&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm run prettier:check &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; pnpm run lint:css
&lt;span class="c"&gt;#pnpm run prettier:check &amp;amp;&amp;amp; pnpm run lint:scss # scss alternative&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpm run svelte:check
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally install your Husky configuration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pnpx husky &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-what-we-learned"&gt;
  &lt;/a&gt;
  🙌🏽 SvelteKit Tooling: What we Learned
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;In this post we looked at&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;how tooling can be used to streamline the continuous integration process,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;configuration of seven continuous integration tools to work with SvelteKit,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;how Husky can be used ultimately to enforce all of the coding conventions and rules created by other tools.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I do hope there is at least one thing in this article which you can use in your work or a side project. I'm keen to hear what tools you use in your own process and any further recommendations you might have. Drop a comment below with your thoughts.&lt;/p&gt;

&lt;p&gt;You can see an &lt;a href="https://github.com/rodneylab/sveltekit-tooling"&gt;example project with all of this set up on the Rodney Lab Git Hub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sveltekit-tooling-feedback"&gt;
  &lt;/a&gt;
  🙏🏽 SvelteKit Tooling: Feedback
&lt;/h2&gt;

&lt;p&gt;Have you found the post useful? Would you prefer to see posts on another topic instead? Get in touch with ideas for new posts. Also if you like my writing style, get in touch if I can write some posts for your company site on a consultancy basis. Read on to find ways to get in touch, further below. If you want to support posts similar to this one and can spare a few dollars, euros or pounds, please &lt;a href="https://rodneylab.com/giving/"&gt;consider supporting me through Buy me a Coffee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, feel free to share the post on your social media accounts for all your followers who will find it useful. As well as leaving a comment below, you can get in touch via &lt;a href="https://twitter.com/messages/compose?recipient_id=1323579817258831875"&gt;@askRodney&lt;/a&gt; on Twitter and also &lt;a href="https://t.me/askRodney"&gt;askRodney on Telegram&lt;/a&gt;. Also, see &lt;a href="https://rodneylab.com/contact"&gt;further ways to get in touch with Rodney Lab&lt;/a&gt;. I post regularly on &lt;a href="https://rodneylab.com/tags/sveltekit/"&gt;SvelteKit&lt;/a&gt; as well as other topics. Also &lt;a href="https://rodneylab.com/about/#newsletter"&gt;subscribe to the newsletter to keep up-to-date&lt;/a&gt; with our latest projects.&lt;/p&gt;

</description>
      <category>svelte</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>ci</category>
    </item>
    <item>
      <title>Building the perfect automated workflows for  Blockchain's development</title>
      <author>Martin Pham</author>
      <pubDate>Mon, 22 Nov 2021 13:36:10 +0000</pubDate>
      <link>https://dev.to/martinpham/building-the-perfect-automated-workflows-blockchains-development-4p61</link>
      <guid>https://dev.to/martinpham/building-the-perfect-automated-workflows-blockchains-development-4p61</guid>
      <description>&lt;h3&gt;
  &lt;a href="#build-workflow-for-blockchains-development"&gt;
  &lt;/a&gt;
  Build workflow for Blockchain's development
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;TLDR: We were having a bad time with Blockchain smartcontract's development, and fortunately we had found solutions to save our asses. We'd like to share it with you, so maybe it could be useful to you also.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#blockchain-is-fun"&gt;Welcome to the Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#problems-with-our-developmentdeployment"&gt;Problems with our development/deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-upgradable-smartcontracts-with-openzeppelin"&gt;Writing Upgradable smartcontracts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#automatic-deployment-with-github-actions-and-workflows"&gt;Automatic deployment to the blockchains&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#memorize-truffles-migration-process"&gt;Problem with the Truffle's migration process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#yaml-file-or-link-to-code"&gt;Our completed workflows&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#blockchain-is-fun"&gt;
  &lt;/a&gt;
  Blockchain is fun!
&lt;/h3&gt;

&lt;p&gt;It's a huge public database (chain of data blocks), which is being shared across many computers. Everyone can query data inside it, or add a new record by sending transactions. Everything is stored historically, so you can trace the changes easily.&lt;br&gt;
With ethereum chains, it's even funnier with SmartContract - a program that runs on chains. Developers can write and compile a program, and upload it into the chain. Then everyone can run it to read its data, update its data with transactions, or even use it to run another program. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tips&lt;/strong&gt;: You can use this tool &lt;a href="https://contract.mph.am/"&gt;Smartcontract UI&lt;/a&gt; to interact with smartcontracts easily.&lt;/p&gt;

&lt;p&gt;We were working on many projects based on blockchains, mainly in decentralized finance. Many of them are programs (written with Solidity) that involve managing users' account balance, allowing users to trade their assets, or to stake their assets to the liquidity pools and gain interests. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#problems-with-our-developmentdeployment"&gt;
  &lt;/a&gt;
  Problems with our development/deployment
&lt;/h3&gt;

&lt;p&gt;However, we were usually facing a big problem: Smartcontracts in ethereum chains are immutable. It means once you deployed it on the chain, there is no way to change it. It works just like a contract we have in real life: you surely won't change the contract's contents once you signed it, if you want to, you'd need to have another contract. Same in ethereum chains, if we make changes in the contract code, we'd need to deploy it again to a new smartcontract.&lt;/p&gt;

&lt;p&gt;And since a smartcontract has its data, when we deployed to a new smartcontract, we'd need to migrate all data from the old contract to the new one, while keeping support on both contracts until all users moved to the new contract.&lt;/p&gt;

&lt;p&gt;Another problem we were having is the contract's deployment. After finishing the code and passing all tests on the local environment, we rely on someone to deploy it to the test chains so we can test its communication with other contracts. And since the contract's address will be changed each deployment, it's a really big pain for us to update all the addresses on each deployment. &lt;/p&gt;

&lt;p&gt;After the contract's deployment, we have another problem with the interaction with our contracts. We provide ABIs (Application Binary Interface) to other people, so they can use them to interact with our contracts. It's also needed for our team to write applications that interact with contracts, so we'll need to keep them always updated with our deployed contracts.&lt;/p&gt;

&lt;p&gt;SmartContract's development is fun, but its deployment was a pain for us for a long time.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#writing-upgradable-smartcontracts-with-openzeppelin"&gt;
  &lt;/a&gt;
  Writing Upgradable smartcontracts with OpenZeppelin
&lt;/h3&gt;

&lt;p&gt;We've decided to improve our deployment process. Thanks to &lt;a href="https://openzeppelin.com/"&gt;OpenZeppelin&lt;/a&gt;, we're now able to upgrade our contracts smoothly. &lt;br&gt;
When we deploy the contract on the first time, OpenZeppelin will create a Proxy Contract, points it to our actual contract, and finally, it deploys all contracts. Later, every time we make changes to the contract's code, OpenZeppelin will deploy it, and points the Proxy Contract to the newly deployed contract, keeping the old contract's state. Now we don't have to worry about the migration between contract's deployments. Our users and devs always connect with the Proxy Contract address, which points to the latest deployed contract.&lt;br&gt;
It was a good change, that helped us during the release process. However, we were still having other problems with the deployment: We'd still need someone to build the contracts and deploy them to the chains. It requires access to our deployer's wallet, and we cannot give the wallet access to everyone in the team.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#automatic-deployment-with-github-actions-and-workflows"&gt;
  &lt;/a&gt;
  Automatic deployment with Github Actions and Workflows
&lt;/h3&gt;

&lt;p&gt;After many tries, we finally integrate our build &amp;amp; deployment process with Github workflows. We also added some tweaks (like caching dependencies for faster build in future, configuring Truffle environment correctly, having wallet's private key in Github's secret,..)&lt;br&gt;
Our deployment is automatic now! Every time we merge features into a development branch, a workflow will be triggered to build the contracts and upload them into the test blockchain. And when they are ready for production, we just need to tag the version. Github will deploy the contracts into the production blockchain.&lt;br&gt;
We also release the contract's built artifact to Github release page every time we release the contracts to production, along with the prerelease of the contract's ABI on each push to the development branches. In this way, our users and devs can always update the contract's ABI quickly and easily.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2HP1-0Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HP1-0Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png" alt="Screenshot" width="880" height="583"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#memorize-truffles-migration-process"&gt;
  &lt;/a&gt;
  Memorize Truffle's migration process
&lt;/h3&gt;

&lt;p&gt;Everything seems OK, but actually, we're still missing a piece: We use &lt;strong&gt;&lt;a href="https://github.com/actions/cache"&gt;actions/cache@v2&lt;/a&gt;&lt;/strong&gt; to cache the Truffle's build. So in the next deployment, we can continue the migration without doing it from the beginning.&lt;br&gt;
However, the cache will be removed after some inactivity time, and when it's removed, or if there is some problem in the cache (cause of a wrongly configured deployment), our migration process will be restarted from the beginning. Therefore, all the proxy contracts will be changed. We will need to notice our users and devs, and migrate all contract's state.&lt;br&gt;
Again, we had to try other approaches, and finally, we found a solution: Saving the Truffle's build on a deployed branch. So for each deployment, instead of taking the previous build from the cache, we will pull it from the deployed branch, and continue with it. It has some more advantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Truffle's build will be there always&lt;/li&gt;
&lt;li&gt;We can inspect the Truffle's build if there was any problem with the deployment&lt;/li&gt;
&lt;li&gt;We can also customize the deployed branch to give more informations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B-jonWI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-jonWI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png" alt="Screenshot" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#submission-category-diy-deployments"&gt;
  &lt;/a&gt;
  Submission Category: DIY Deployments
&lt;/h3&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ActionsHackathon21"&gt;
        ActionsHackathon21
      &lt;/a&gt; / &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain"&gt;
        deploy-upgradable-smartcontract-to-blockchain
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Deploy upgradable smartcontracts to blockchain
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Build documentations&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;This project follows the DEV.to &lt;a href="https://dev.to/devteam/join-us-for-the-2021-github-actions-hackathon-on-dev-4hn4" rel="nofollow"&gt;#ActionsHackathon21&lt;/a&gt; hackathon.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Use GitHub Actions and Workflows to build and deploy upgradable smartcontracts into the ethereum blockchains. After its deployment, the contract's ABI will be released, and the artifacts will be saved into a deployed branch.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/testnet.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AauglCxZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/testnet.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2HP1-0Do--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/mainnet.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check the complete workflow here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deploy contracts to testnet on each push on development branches (&lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain.github/workflows/migrate-to-testnet.yml"&gt;migrate-to-testnet.yml&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Deploy contracts to mainnet on each push on tag (&lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain.github/workflows/migrate-to-mainnet.yml"&gt;migrate-to-mainnet.yml&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B-jonWI1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/deployed.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Actions used&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout@v2&lt;/a&gt;&lt;/strong&gt; To checkout the source code from the repository&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/actions/cache"&gt;actions/cache@v2&lt;/a&gt;&lt;/strong&gt; To cache the dependencies, allow us to re use them for future builds&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://github.com/marvinpinto/action-automatic-releases"&gt;marvinpinto/action-automatic-releases@latest&lt;/a&gt;&lt;/strong&gt; To release your build to Github Release page&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/release.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVVTqy-p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/release.png" alt="Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Configurations&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;You can config the branch postfix which holds the development's artifacts with the &lt;code&gt;DEPLOY_BRANCH_POSTFIX&lt;/code&gt; variable.&lt;/li&gt;
&lt;li&gt;You can also configure the development branches which you want to deploy to testnet, with &lt;code&gt;branches&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;To config the blockchain you want to deploy to, use…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;README: &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/README.md"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/README.md&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Workflow file (development): &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-testnet.yml"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-testnet.yml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Workflow file (release): &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-mainnet.yml"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/.github/workflows/migrate-to-mainnet.yml&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;License: &lt;a href="https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/COPYING"&gt;https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/blob/main/COPYING&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can config the branch postfix which holds the development's artifacts with the &lt;code&gt;DEPLOY_BRANCH_POSTFIX&lt;/code&gt; variable. &lt;/li&gt;
&lt;li&gt;You can also configure the development branches which you want to deploy to testnet, with &lt;code&gt;branches&lt;/code&gt; key.&lt;/li&gt;
&lt;li&gt;To config the blockchain you want to deploy to, use the &lt;code&gt;WALLET_SECRET&lt;/code&gt; , &lt;code&gt;RPC&lt;/code&gt;, &lt;code&gt;NETWORK_ID&lt;/code&gt; and &lt;code&gt;CONFIRMATIONS&lt;/code&gt; variables
&lt;strong&gt;Important!&lt;/strong&gt; You should store the wallet secret in GitHub's secret (&lt;strong&gt;Settings&lt;/strong&gt; &amp;gt; &lt;strong&gt;Secrets&lt;/strong&gt;). On this project, I stored as &lt;code&gt;DEV_WALLET_SECRET&lt;/code&gt; and &lt;code&gt;PROD_WALLET_SECRET&lt;/code&gt; secrets&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpadO24e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/secret.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpadO24e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ActionsHackathon21/deploy-upgradable-smartcontract-to-blockchain/raw/main/docs/secret.png" alt="Screenshot" width="880" height="521"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flows"&gt;
  &lt;/a&gt;
  Flows
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;a href="https://github.com/actions/checkout"&gt;actions/checkout@v2&lt;/a&gt;&lt;/strong&gt; to checkout source code from the repository&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;a href="https://github.com/actions/setup-node"&gt;actions/setup-node@v2&lt;/a&gt;&lt;/strong&gt; to setup nodejs&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;a href="https://github.com/actions/cache"&gt;actions/cache@v2&lt;/a&gt;&lt;/strong&gt; to cache dependencies&lt;/li&gt;
&lt;li&gt;Install build dependencies (&lt;code&gt;yarn&lt;/code&gt;, &lt;code&gt;node-gyp&lt;/code&gt;, &lt;code&gt;node-gyp-build&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Install dependencies from &lt;code&gt;yarn.lock&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Synchronize previous built artifacts from the deployment branch&lt;/li&gt;
&lt;li&gt;Build and Migrate smartcontracts&lt;/li&gt;
&lt;li&gt;Push new built artifacts into the deployment branch&lt;/li&gt;
&lt;li&gt;Release smartcontracts' JSON (including ABI)&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>actionshackathon21</category>
      <category>blockchain</category>
      <category>ethereum</category>
      <category>smartcontract</category>
    </item>
    <item>
      <title>Como criar uma Lista de Controle de Acesso (ACL) personalizada no Magento 2</title>
      <author>Lucas Teixeira dos Santos Santana</author>
      <pubDate>Mon, 22 Nov 2021 13:35:50 +0000</pubDate>
      <link>https://dev.to/santanaluc94/como-criar-uma-lista-de-controle-de-acesso-acl-personalizada-no-magento-2-5gok</link>
      <guid>https://dev.to/santanaluc94/como-criar-uma-lista-de-controle-de-acesso-acl-personalizada-no-magento-2-5gok</guid>
      <description>&lt;h2&gt;
  &lt;a href="#contextualizando"&gt;
  &lt;/a&gt;
  Contextualizando
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#o-que-%C3%A9-uma-lista-de-controle-de-acesso"&gt;
  &lt;/a&gt;
  O que é uma lista de controle de acesso?
&lt;/h3&gt;

&lt;p&gt;O &lt;em&gt;Access Control List&lt;/em&gt; (Controle de Lista de Acessos) ou ACL são regras que permitem um administrador limitar as permissões de um usuário para autenticação, permitindo o dono da loja refinar as funções para cada papel de usuário.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#papeis-de-usu%C3%A1rio"&gt;
  &lt;/a&gt;
  Papeis de usuário
&lt;/h3&gt;

&lt;p&gt;As listas de recursos do ACL estão na área do administrador do Magento e são visíveis assim que acessar o caminho &lt;code&gt;System -&amp;gt; Permissions -&amp;gt; User Roles&lt;/code&gt;. Neste recurso é possível visualizar uma lista em forma de árvore de todos os recursos disponíveis, onde os recursos filhos ficam dentro dos recursos pais.&lt;br&gt;
É possível criar papeis de usuários e selecionar os recursos que cada papel poderá ter acesso, cada usuário ficará limitado aos recursos selecionados do seu papel.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#c%C3%B3digo-para-criar-o-acl"&gt;
  &lt;/a&gt;
  Código para criar o ACL
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#aclxml"&gt;
  &lt;/a&gt;
  acl.xml
&lt;/h3&gt;

&lt;p&gt;Para a criação de novos papéis de usuário no Magento é necessário criar um arquivo chamado &lt;code&gt;acl.xml&lt;/code&gt; que deve seguir a estrutura de pasta &lt;code&gt;\{Vendor}\{Module}\etc\acl.xml&lt;/code&gt;. Todo recurso deve iniciar tendo o recurso &lt;code&gt;Magento_Backend::admin&lt;/code&gt; como raiz, caso não seja filho de outro recurso.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Atributo&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;Define o identificador único que é utilizado na guia.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;title&lt;/td&gt;
&lt;td&gt;Texto que será exibido na barra de menu.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sortOrder&lt;/td&gt;
&lt;td&gt;Define a ordem de classificação dos recursos. A ordem é determinada por números crescente, então números menores aparecerão primeiro.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;config&lt;/span&gt; &lt;span class="na"&gt;xmlns:xsi=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2001/XMLSchema-instance"&lt;/span&gt; &lt;span class="na"&gt;xsi:noNamespaceSchemaLocation=&lt;/span&gt;&lt;span class="s"&gt;"urn:magento:framework:Acl/etc/acl.xsd"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;acl&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Magento_Backend::admin"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"{Vendor}_{Module}::{parentResourceId}"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"{Parent Title}"&lt;/span&gt; &lt;span class="na"&gt;sortOrder=&lt;/span&gt;&lt;span class="s"&gt;"{integer}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"{Vendor}_{Module}::{featureResourceId}"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"{Feature Title}"&lt;/span&gt; &lt;span class="na"&gt;sortOrder=&lt;/span&gt;&lt;span class="s"&gt;"{integer}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"{Vendor}_{Module}::{firstChildResourceId}"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"{First Child Title}"&lt;/span&gt; &lt;span class="na"&gt;sortOrder=&lt;/span&gt;&lt;span class="s"&gt;"{integer}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"{Vendor}_{Module}::{secondChildResourceId}"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"{Second Child Title}"&lt;/span&gt; &lt;span class="na"&gt;sortOrder=&lt;/span&gt;&lt;span class="s"&gt;"{integer}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;resource&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"{Vendor}_{Module}::{firstGrandchildResourceId}"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"{First Grandchild Title}"&lt;/span&gt; &lt;span class="na"&gt;sortOrder=&lt;/span&gt;&lt;span class="s"&gt;"{integer}"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/acl&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/config&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finalizando"&gt;
  &lt;/a&gt;
  Finalizando
&lt;/h2&gt;

&lt;p&gt;Valores entre chaves (&lt;code&gt;{test}&lt;/code&gt;) devem ser alterados na implementação do código.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#habilitando-as-altera%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  Habilitando as alterações
&lt;/h3&gt;

&lt;p&gt;Execute o comando PHP para limpar todos os caches de armazenamento em cache do processos.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php bin/magento cache:clean
php bin/magento flush
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#diret%C3%B3rios-e-arquivos"&gt;
  &lt;/a&gt;
  Diretórios e Arquivos
&lt;/h3&gt;

&lt;p&gt;Segue a a lista de diretórios e arquivos que devem ser criados.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;- app/
  - code/
    - {Vendor}/
        - {Module}/
          - etc/
            - acl.xml
            - module.xml
          - registration.php
          - composer.json

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>php</category>
      <category>magento2</category>
      <category>tutorial</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Build Your New Uber for X App that is Too Competitive in the Existing Market
</title>
      <author>Johnmarison</author>
      <pubDate>Mon, 22 Nov 2021 13:28:59 +0000</pubDate>
      <link>https://dev.to/johnmarison2/build-your-new-uber-for-x-app-that-is-too-competitive-in-the-existing-market-19b1</link>
      <guid>https://dev.to/johnmarison2/build-your-new-uber-for-x-app-that-is-too-competitive-in-the-existing-market-19b1</guid>
      <description>&lt;p&gt;On-demand multi-services apps today got so popular among people all over the world. The convenient platform allows the customers to book various services online with a single log-on solution. Considering the particular on-demand sector’s heavy growth in the market, many entrepreneurs are showing their willingness to invest in the achievable business area. Uber for X in recent days is certainly their most suggested development source. &lt;/p&gt;

&lt;p&gt;Following, let’s discuss how you could effectively build a new Uber for X app that is so competitive in the development business for rivals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Do Business People Mostly Search Uber for X?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Adaptability is one of the core reasons for Uber for X development solution, which is commonly searched by entrepreneurs nowadays. Also, it has all the latest updates in its default app features and options. It completely covers the client’s new mobile app. As a result, they can cost-effectively develop their new business app so advanced to the latest market.&lt;/p&gt;

&lt;p&gt;Such options right from app-building to business operation online assist the entrepreneurs to get a huge return of investment in a very short period. And also, they can smartly sustain the achieving business progress with frequent demand facing updates in the future. The full customization makes it completely easy to execute any future modulations of the launched app focusing on demands. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most Suggest Techstack in the Development Segment&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As app development is the main concept for the on-demand multi-services business startup, concentrating on it is very important for us as developers. In it, the right selection of powerful tech stacks offers several enhancements in the business. Here is the most suggested tech stack to choose for the Uber for X app development from experts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Android SDK&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A bunch of development tools and libraries available in the software development kit smartly assist you to build your new Uber for X app smoothly in the project. By virtue of the SDK having all the necessary tools as default, components of the development segment like building, debugging, and packaging become speedy in the progress.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Golang&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Golang is a statically typed programming language. Because it could be used for multiple purposes like development, cloud computing, data science, etc., It makes your complete task so simple at the end. Above all, the language has some unique advantages like quicker execution, comprehensive tools, and scalability.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GraphQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GraphQL, the most renowned query language in the development community, is the most suggested tech stack by experts today. It has advantages with faster communication API, no more over fetching and under fetching problems, following a hierarchical structure, code-sharing, introspective, etc. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MongoDB&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As a vast requirement of the multi-services business operation online, the document-oriented NoSQL database could be used for high-volume data storage and transaction purposes smartly.  It is advantaged with high performance, adaptability, and scalability on whether the project took from your client as a big or small scale investment idea.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swift&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The programming language introduced by Apple Inc. assists you to develop your native Uber for X app as so effective to the contemporary market square. Utilizing the open-source, you can create new multi-services apps fast as per your client’s requirements on the services. Swift also ensures the safety, scalability, and compatibility of the overall business operational functionality. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advanced Strategies to Apply on the Development for An Increased Productivity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above all, it is really important to create your new multi-services app for businesses with some proven strategic metrics. Therefore, applying some tactical solutions as mentioned in the following helps both of you and your clients to have a gainful business atmosphere in all aspects. Also, your brand gets huge visibility among customers in the competitive development market square.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A Perfect Market Analysis&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Analyzing the existing on-demand multi-services marketplace’s recent enhancements always helps you to make the new app get the latest modulation updates for launching. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frequent Enhancement on Application&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Offer the space to clients to make any further enhancements if needed after successful app launching. Through which, the users get reliability on services with regular upgrade sources in time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client-centric Option&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is really crucial in the Uber for X app development market that provides entrepreneurs with a full customizing solution. Let them change anything from the default multi-services app interface and design.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Increased User-friendliness in Design&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remember to add in-app features like quick signing up with social media credentials, Geolocation, push notifications, section categorizing, and multi-payment mode to make the app user-friendly on usage.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Seamless Functionality&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Develop the ready-made app which is capable of providing seamless functionality in on-demand multi-services business online. Hence, between heavy user traffic, the app operation would be standard always.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Supporting with Expert&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And, offering your full expertise app development plan and chosen business model related support and guidance to the entrepreneurs assist them to sketch their actual business plan even more mighty.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Startup Development Solutions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Enable some popular in-app customer gaining and retaining solutions like coupon code, promo code distributing, referral links, and premium membership as default. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Reliability Increasing Features&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Above all, tightening the data security always increases users' reliability. So, build your mobile app concerning that. Make all the transferring and transaction data happening via your new app highly secured by end-to-end encrypted format conversion.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mobile app development on business startups at present is highly evolved due to digital platform impact among customers. In which, the on-demand multi-services business gets a notable market value compared to others. As a result, it motivates energetic entrepreneurs of today to invest in the successful on-demand marketplace online.&lt;/p&gt;

&lt;p&gt;Of them, &lt;a href="https://www.spotnrides.com/uber-for-x-ondemand-multi-services-app"&gt;Uber for X&lt;/a&gt;is their most recommended app development option focusing on the discussed advantages. Considering it, your new business app creation concerning the contemporary market demands assists your brand get high visibility among entrepreneurs/clients.&lt;/p&gt;

</description>
      <category>androidsdk</category>
      <category>swift</category>
      <category>graphql</category>
      <category>mongodb</category>
    </item>
    <item>
      <title>10 Amazing Website For Startups</title>
      <author>Rohan Kiratsata</author>
      <pubDate>Mon, 22 Nov 2021 13:20:57 +0000</pubDate>
      <link>https://dev.to/rohankiratsata/10-amazing-website-for-startups-4h41</link>
      <guid>https://dev.to/rohankiratsata/10-amazing-website-for-startups-4h41</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-a-junior-vc"&gt;1. A Junior VC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-startup-graveyard"&gt;2. Startup Graveyard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-ideas-ai"&gt;3. Ideas AI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-startup-school"&gt;5. Startup School&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#6-startup-launch-list"&gt;6. Startup Launch List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#7-startup-books"&gt;7. Startup Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#8-billion-dollar-pitch-decks"&gt;8. Billion Dollar Pitch Decks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#9-startup-stash"&gt;9. Startup Stash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#10-read-something-great"&gt;10. Read Something Great&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus-books"&gt;BONUS Books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-a-junior-vc"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://ajuniorvc.com/startup-concepts/"&gt;A Junior VC&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O3xyeJtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5fau7exogegrpm1enxz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O3xyeJtO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c5fau7exogegrpm1enxz.PNG" alt="A Junior VC" width="880" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Startup concepts explained in a comic book format. Concepts like NFTs, Pitchbook, Raising Funds, etc. in comic book format with real-life examples. Worth Checking Out!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-startup-graveyard"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://startupgraveyard.io"&gt;Startup Graveyard&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YrZzJGQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rsxis41h4amk4sj46mj.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YrZzJGQI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rsxis41h4amk4sj46mj.PNG" alt="Srtup Graveyard" width="880" height="391"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;List of Failed Startups.&lt;/strong&gt; Amazing resource for beginners and entrepreneurs to avoid same mistakes as other failed startups did. Great site to learn a lot.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-ideas-ai"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://ideasai.net"&gt;Ideas AI&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PXucvv_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wncoozsgnsxawnwojjkc.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PXucvv_M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wncoozsgnsxawnwojjkc.PNG" alt="AI Idea" width="845" height="321"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AI generated startup ideas. It uses Open AI GPT-3 Model. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-startup-school"&gt;
  &lt;/a&gt;
  5. &lt;a href="https://www.startupschool.org/"&gt;Startup School&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1q8MTM7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31w5543tih9on0z5rl24.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1q8MTM7k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/31w5543tih9on0z5rl24.PNG" alt="School" width="852" height="678"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A free online program to teach you how to start a company by Y combinator.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-startup-launch-list"&gt;
  &lt;/a&gt;
  6. &lt;a href="https://startuplaunchlist.com/"&gt;Startup Launch List&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5z3wfbWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp9gqeej2btoq2b645ea.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5z3wfbWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yp9gqeej2btoq2b645ea.PNG" alt="Launch List" width="880" height="210"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Articles to read before launching a startup. Amazing resource to learn about launching startup.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-startup-books"&gt;
  &lt;/a&gt;
  7. &lt;a href="https://startupbooks.io/"&gt;Startup Books&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h79YYaR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftnazb68tejxvu4a1jvq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h79YYaR0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ftnazb68tejxvu4a1jvq.PNG" alt="Books" width="871" height="307"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A curated list of book for your startup journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-billion-dollar-pitch-decks"&gt;
  &lt;/a&gt;
  8. &lt;a href="https://www.billiondollarpitchdecks.com/"&gt;Billion Dollar Pitch Decks&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FrOlVNGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/habch734v629kndpkjsz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FrOlVNGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/habch734v629kndpkjsz.PNG" alt="Pitch DEck" width="880" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pitch Deck of popular startups before they were famous.&lt;br&gt;
In case you don't know What is &lt;strong&gt;Pitch Deck&lt;/strong&gt;.&lt;br&gt;
Pitch Deck is a presentation which gives overview of your startup idea to investors.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-startup-stash"&gt;
  &lt;/a&gt;
  9. &lt;a href="https://startupstash.com/"&gt;Startup Stash&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d1jTX4lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8dqpidav9ern6uk910w.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d1jTX4lp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v8dqpidav9ern6uk910w.PNG" alt="Startup Stash" width="880" height="198"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Startup Stash&lt;/strong&gt; is a curated directory of resources and tools to help you build your startup. It includes 400 products in 40 categories, like for example: Idea Generation, Early users, Marketing, Raising Capital and Customer support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-read-something-great"&gt;
  &lt;/a&gt;
  10. &lt;a href="https://www.readsomethinggreat.com/"&gt;Read Something Great&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GwBYf4qV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v93zw0m4x9pgg9i4ewod.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GwBYf4qV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v93zw0m4x9pgg9i4ewod.PNG" alt="Read Great" width="848" height="258"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Timeless Articles from belly of internet. Site contains manually curated amazing articles.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-bonus-read-books"&gt;
  &lt;/a&gt;
  11. BONUS : &lt;a href="https://www.goodreads.com/"&gt;Read Books&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Read Books. Best way to learn about startup and gain knowledge. My personal recommendations are "48 Hour Startup" and "Lean Startup". Must read.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>website</category>
      <category>career</category>
      <category>discuss</category>
    </item>
    <item>
      <title>A technical tale of NodeSecure - Chapter 1</title>
      <author>Thomas.G</author>
      <pubDate>Mon, 22 Nov 2021 13:20:10 +0000</pubDate>
      <link>https://dev.to/fraxken/a-technical-tale-of-nodesecure-chapter-1-2mm8</link>
      <guid>https://dev.to/fraxken/a-technical-tale-of-nodesecure-chapter-1-2mm8</guid>
      <description>&lt;p&gt;Hello 👋&lt;/p&gt;

&lt;p&gt;I have been working on the &lt;a href="https://github.com/NodeSecure"&gt;NodeSecure&lt;/a&gt; project for almost three years now 😵. I have personally come a long way... At the beginning I didn't know much about the field in which I started 🐤.&lt;/p&gt;

&lt;p&gt;That's why I thought that writing articles about &lt;em&gt;"some"&lt;/em&gt; of the technical difficulties and the tools I used could be valuable 🚀.&lt;/p&gt;

&lt;p&gt;I will try to make articles that focus on one aspect 🎯. Let's get started 💃.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fetching-the-dependency-tree"&gt;
  &lt;/a&gt;
  🔍 Fetching the dependency tree
&lt;/h2&gt;

&lt;p&gt;One of the first challenges I had to solve was how to get the dependency tree and all the information attached to the packages.&lt;/p&gt;

&lt;p&gt;My first instinct was to work with &lt;a href="https://github.com/npm/registry/blob/master/docs/REGISTRY-API.md"&gt;the public API of the npm registry&lt;/a&gt;.&lt;br&gt;
This sounds like a very good idea, but you will soon run into a set of problems (cache, private registry etc..).&lt;/p&gt;

&lt;p&gt;What I wanted to do has already been implemented in the package named &lt;a href="https://github.com/npm/pacote#readme"&gt;pacote&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://github.com/npm/arborist#readme"&gt;Arborist&lt;/a&gt; did not exist yet. I will come back to this in a future article. The first versions of NodeSecure did not support the analysis of a local project anyway.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#pacote"&gt;
  &lt;/a&gt;
  Pacote
&lt;/h3&gt;

&lt;p&gt;As its README suggests, Pacote is a library that allows you to retrieve various data for a given package. To be more precise:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;A package manifest&lt;/strong&gt; (&lt;em&gt;A manifest is similar to a package.json file. However, it has a few pieces of extra metadata, and sometimes lacks metadata that is inessential to package installation.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A packument&lt;/strong&gt; (&lt;em&gt;A packument is the top-level package document that lists the set of manifests for available versions for a package.&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;A tarball&lt;/strong&gt; (&lt;em&gt;The archive containing the package itself with the published files&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These terms are really important and are explained in the pacote README.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There is a package with the type definitions &lt;a href="https://github.com/npm/types"&gt;@npm/types&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the &lt;a href="https://github.com/NodeSecure/scanner"&gt;NodeSecure/scanner&lt;/a&gt; these methods are used at different stages of the analysis. When we browse the dependency tree for example we use the &lt;code&gt;manifest()&lt;/code&gt; method with the range version (or &lt;strong&gt;specifier&lt;/strong&gt;) of the package.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pacote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;gitURL&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;NPM_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getLocalRegistryURL&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;homedir&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/.npm`&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The library allows you to manage a whole set of things quite quickly without too much difficulty 💪.&lt;/p&gt;

&lt;p&gt;Note that in the above code &lt;strong&gt;there is a notion of Git URL&lt;/strong&gt; 👀.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dependency-resolution"&gt;
  &lt;/a&gt;
  🔬 Dependency resolution
&lt;/h3&gt;

&lt;p&gt;You are probably used to see &lt;a href="https://semver.org/lang/fr/"&gt;SemVer&lt;/a&gt; versions or ranges within your package.json. Quite similar to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@nodesecure/flags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^2.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@nodesecure/fs-walk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@nodesecure/i18n"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.2.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@nodesecure/js-x-ray"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^4.1.2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"@nodesecure/npm-registry-sdk"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"^1.3.0"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But there are many other ways to install/link a dependency within a package.json 😲:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#urls-as-dependencies"&gt;URL to a tarball archive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#git-urls-as-dependencies"&gt;Git URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#github-urls"&gt;GitHub URLs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#local-paths"&gt;Local Paths&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the advantages of pacote is that it handles most of these resolutions for you 😎. I discovered all this while working on the subject (because I had never dealt with those types of resolutions).&lt;/p&gt;

&lt;p&gt;If you want to be able to spot them here is a regular expression:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;([&lt;/span&gt;&lt;span class="sr"&gt;a-zA-Z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+:|git&lt;/span&gt;&lt;span class="se"&gt;\+&lt;/span&gt;&lt;span class="sr"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\.\\)&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Version with custom resolution&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This also explains why in NodeSecure we have a "&lt;a href="https://github.com/NodeSecure/flags/blob/main/FLAGS.md"&gt;hasCustomResolver&lt;/a&gt;" flag allowing quick identification of packages using resolutions to dependencies that diverge from the usual.&lt;/p&gt;

&lt;p&gt;Pacote also exposes a &lt;code&gt;resolve()&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pacote&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pacote&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tarURL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pacote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@slimio/is@^1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It resolve a specifier like &lt;code&gt;foo@latest&lt;/code&gt; or &lt;code&gt;github:user/project&lt;/code&gt; all the way to a tarball url, tarball file, or git repo with commit hash.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#download-and-extract-tarball"&gt;
  &lt;/a&gt;
  📦 Download and extract tarball
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/NodeSecure/scanner/blob/master/src/tarball.js#L49"&gt;One of the steps&lt;/a&gt; is to retrieve the package on the local system to be able to analyze it and retrieve a set of information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isGit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt;
  &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;gitUrl&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pacote&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;NPM_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;registry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getLocalRegistryURL&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
  &lt;span class="na"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;homedir&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;&lt;span class="s2"&gt;/.npm`&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The package will be extracted into a temporary directory generated when the scanner is launched.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; see &lt;a href="https://nodejs.org/api/fs.html#fspromisesmkdtempprefix-options"&gt;fs.mkdtemp&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once the extraction is finished, we will retrieve the information we need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Files, extensions, size on disk etc..&lt;/li&gt;
&lt;li&gt;Execute &lt;a href="https://github.com/NodeSecure/js-x-ray"&gt;NodeSecure/JS-X-Ray&lt;/a&gt; on each JavaScript files.&lt;/li&gt;
&lt;li&gt;Fetch licenses and retrieve their SPDX conformance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will dig deeper into the steps of static code analysis in a future article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#it-cant-be-that-simple"&gt;
  &lt;/a&gt;
  😈 It can't be that simple
&lt;/h3&gt;

&lt;p&gt;In all this there are things quite complex to manage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Same packages but with different "range" of versions 🎭.&lt;/li&gt;
&lt;li&gt;Ensure the integrity of the links (relations) between packages.&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;The first one&lt;/strong&gt; is hard because most of the time we are dealing with SemVer range and not with the EXACT version of the package. There is quite a bit of connection here with how npm handles conflict during installation (also &lt;a href="https://github.com/npm/npm-pick-manifest"&gt;how npm algorithms pick the right manifest&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;I think I probably still lack some vision and experience on the subject. The current code is probably quite heavy too.&lt;/p&gt;

&lt;p&gt;Today the &lt;code&gt;cwd&lt;/code&gt; API of the Scanner use Arborist. For the &lt;code&gt;from&lt;/code&gt; API i would like to avoid having to deal with a packument.&lt;/p&gt;




&lt;p&gt;For &lt;strong&gt;the second one&lt;/strong&gt; it is mainly a problem with the behaviour of the walker that will browse asynchronously the tree. We must therefore avoid that a package already analyzed is taken into account again. The problem with this is that we will be missing relationship links between some packages in the tree.&lt;/p&gt;

&lt;p&gt;The current scanner solves the problem by going through all the dependencies one last time to create the missing link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dependencies&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verStr&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;versions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;verDescriptor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;descriptor&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;verStr&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fullName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;@&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;verStr&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usedDeps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;exclude&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fullName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;usedDeps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;usedBy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;usedDeps&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;deps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;usedBy&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;version&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;verDescriptor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;usedBy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;usedBy&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  ✨ Conclusion
&lt;/h2&gt;

&lt;p&gt;That's it for this article where we have explored a little bit the difficulties around going through the dependency tree.&lt;/p&gt;

&lt;p&gt;If you like the concept don't hesitate to like and share.&lt;/p&gt;

&lt;p&gt;🙏 Thanks for reading and see you soon for a new article.&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>security</category>
    </item>
    <item>
      <title>How to run Nginx and PHP in Docker</title>
      <author>Chris Texe</author>
      <pubDate>Mon, 22 Nov 2021 13:16:02 +0000</pubDate>
      <link>https://dev.to/texe/how-to-run-nginx-and-php-in-docker-5eoi</link>
      <guid>https://dev.to/texe/how-to-run-nginx-and-php-in-docker-5eoi</guid>
      <description>&lt;p&gt;Today we will try to run nginx web server with PHP 7.4 in Docker. We will use Docker, because we will not install any software on our host system. You should have installed on your system Docker and Docker-compose. If you don’t know how to install Docker and Docker-compose see my previous article &lt;a href="https://varlock.net/how-to-install-docker-in-linux-mint-and-ubuntu/"&gt;How to install Docker in Linux Mint and Ubuntu&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All files you need to run Nginx and PHP are on my &lt;a href="https://github.com/texe/nginxphp"&gt;Github&lt;/a&gt;. Let’s get start!&lt;/p&gt;

&lt;p&gt;First we need to clone repository and create network:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;git clone https://github.com/texe/nginxphp
&lt;span class="nb"&gt;cd &lt;/span&gt;nginxphp
docker network create labnet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Why we create network?. It’s a very good question. In our case we do it, because we want have a situation where all our containers will be visible by each other. For instance, imagine we have  four containers with four services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;phpMyAdmin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we want:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nginx be able to see PHP server&lt;/li&gt;
&lt;li&gt;PHP server should see MySQL server&lt;/li&gt;
&lt;li&gt;phpMyAdmin should see MySQL server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to do it we create a virtual network and every service in this virtual network will be able to see other services. That’s why we have to create a new network in docker environment.&lt;/p&gt;

&lt;p&gt;Now we have to build our image and we will do it by this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Docker will is starting building an image and downloading all needed files. It can take some time. How much? It depends on your internet connection. Let’s take a look for details.&lt;/p&gt;

&lt;p&gt;Docker checks docker-compose.yml file and and see that we want to build new image described in config/dockerfile. Let’s see what is in this file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="c"&gt;# 1 Set master image&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; php:7.4-fpm-alpine&lt;/span&gt;

&lt;span class="c"&gt;# 2 Set working directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /var/www/html&lt;/span&gt;

&lt;span class="c"&gt;# 3 Install Additional dependencies&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;apk update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add &lt;span class="nt"&gt;--no-cache&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;build-base shadow vim curl &lt;span class="se"&gt;\
&lt;/span&gt;php7 &lt;span class="se"&gt;\
&lt;/span&gt;php7-fpm &lt;span class="se"&gt;\
&lt;/span&gt;php7-common &lt;span class="se"&gt;\
&lt;/span&gt;php7-pdo &lt;span class="se"&gt;\
&lt;/span&gt;php7-pdo_mysql &lt;span class="se"&gt;\
&lt;/span&gt;php7-mysqli &lt;span class="se"&gt;\
&lt;/span&gt;php7-mcrypt &lt;span class="se"&gt;\
&lt;/span&gt;php7-mbstring &lt;span class="se"&gt;\
&lt;/span&gt;php7-xml &lt;span class="se"&gt;\
&lt;/span&gt;php7-openssl &lt;span class="se"&gt;\
&lt;/span&gt;php7-json &lt;span class="se"&gt;\
&lt;/span&gt;php7-phar &lt;span class="se"&gt;\
&lt;/span&gt;php7-zip &lt;span class="se"&gt;\
&lt;/span&gt;php7-gd &lt;span class="se"&gt;\
&lt;/span&gt;php7-dom &lt;span class="se"&gt;\
&lt;/span&gt;php7-session &lt;span class="se"&gt;\
&lt;/span&gt;php7-zlib

&lt;span class="c"&gt;# 4 Add and Enable PHP-PDO Extenstions&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-install pdo pdo_mysql mysqli
&lt;span class="k"&gt;RUN &lt;/span&gt;docker-php-ext-enable pdo_mysql

&lt;span class="c"&gt;# 5 Install PHP Composer&lt;/span&gt;
&lt;span class="c"&gt;#RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer&lt;/span&gt;

&lt;span class="c"&gt;# 6 Remove Cache&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class="k"&gt;*&lt;/span&gt;

&lt;span class="c"&gt;# 7 Add UID '1000' to www-data&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;usermod &lt;span class="nt"&gt;-u&lt;/span&gt; 1000 www-data

&lt;span class="c"&gt;# 8 Copy existing application directory permissions&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --chown=www-data:www-data . /var/www/html&lt;/span&gt;

&lt;span class="c"&gt;# 9 Change current user to www&lt;/span&gt;
&lt;span class="k"&gt;USER&lt;/span&gt;&lt;span class="s"&gt; www-data&lt;/span&gt;

&lt;span class="c"&gt;# 10 Expose port 9000 and start php-fpm server&lt;/span&gt;
&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 9000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["php-fpm"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I numbered all comment lines and now explain what every line do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;This is a base image. I choose official PHP image based on Alpine Linux (php:7.4-fpm-alpine). It is very light and fast distribution. I always take Alpine if it’s possible because images based on Ubuntu are much bigger than Alpine.&lt;/li&gt;
&lt;li&gt;Setting here working directory. Nothing to explain in this place…&lt;/li&gt;
&lt;li&gt;Update software repositories and install PHP with extensions.&lt;/li&gt;
&lt;li&gt;We add and enable database drivers. In this case we add PDO, PDO MySQL and Mysqli (it can be necessary for WordPress).&lt;/li&gt;
&lt;li&gt;Here we can install Composer. I commented this line because I don’t want to install Composer at this moment. But if you want to use Composer you can uncomment this line.&lt;/li&gt;
&lt;li&gt;Remove cache in order to save disk quota.&lt;/li&gt;
&lt;li&gt;Add UUID 1000 to user www-data (Nginx user).&lt;/li&gt;
&lt;li&gt;Set directory permissions to directory with PHP files. We give access to every user with UUID 1000.&lt;/li&gt;
&lt;li&gt;Change current user to www-data. It’s a user which can operate on our php files.&lt;/li&gt;
&lt;li&gt;We expose our service to port 9000 and run php-fpm server.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now let’s look to docker-compose.yml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;3'&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="c1"&gt;#PHP App&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config/dockerfile&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;christexe/php:7.4-fpm-alpine&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;php_app&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
    &lt;span class="na"&gt;tty&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;SERVICE_NAME&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
      &lt;span class="na"&gt;SERVICE_TAGS&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dev&lt;/span&gt;
    &lt;span class="na"&gt;working_dir&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/var/www/html&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./code/:/var/www/html&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./config/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;labnet&lt;/span&gt;

  &lt;span class="c1"&gt;#Nginx Service&lt;/span&gt;
  &lt;span class="na"&gt;nginx&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx:alpine&lt;/span&gt;
    &lt;span class="na"&gt;container_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;nginx&lt;/span&gt;
    &lt;span class="na"&gt;restart&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;unless-stopped&lt;/span&gt;
    &lt;span class="na"&gt;tty&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;80:80"&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./code/:/var/www/html&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;./config/conf.d/:/etc/nginx/conf.d/&lt;/span&gt;
    &lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;labnet&lt;/span&gt;

&lt;span class="c1"&gt;#Docker Networks&lt;/span&gt;
&lt;span class="na"&gt;networks&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;labnet&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; 
    &lt;span class="na"&gt;external&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;labnet&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does mean every line?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="c1"&gt;#PHP App&lt;/span&gt;
  &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config/dockerfile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that we create first service “app”. We will build a new image. The new image will be based on dockerfile (in “config” directory). As I wrote above, Docker parses every line in docker-compose.yml, search dockerfile and build new image.&lt;/p&gt;

&lt;p&gt;The name of the new image will be: &lt;code&gt;christexe/php:7.4-fpm-alpine&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The name of container will be: &lt;code&gt;container_name: php_app&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;restart: unless-stopped&lt;/code&gt; means that our PHP container always will start after operating system boot, &lt;strong&gt;unless you stop it&lt;/strong&gt;. If you manually stop this container, after rebooting hos system, the container will not start automatically.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tty: true&lt;/code&gt; means that we want to get access to console (tty) in our PHP server. It can be useful when you need to get in container.&lt;/p&gt;

&lt;p&gt;Any &lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;CMD&lt;/code&gt;, &lt;code&gt;ADD&lt;/code&gt;, &lt;code&gt;COPY&lt;/code&gt;, or &lt;code&gt;ENTRYPOINT&lt;/code&gt; command will be executed in the specified working directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;volumes: - ./code/:/var/www/html - ./config/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We map directory &lt;code&gt;code&lt;/code&gt; to &lt;code&gt;/var/www/html in our container&lt;/code&gt;. We will put in this directory all php files (index.php etc.).&lt;/p&gt;

&lt;p&gt;file &lt;code&gt;uploads.ini&lt;/code&gt; to &lt;code&gt;/usr/local/etc/php/conf.d/uploads.ini&lt;/code&gt; This is vasic PH configuration file. In this file we allow to uploads and limit upload file size.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;networks: - labnet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We assign our container to &lt;code&gt;labnet&lt;/code&gt; network (explained above).&lt;/p&gt;

&lt;p&gt;In the nginx service we repeat most of docker parameters. We added there:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ports: - "80:80"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We forward port 80 in our host machine to port 80 in our container with nginx. The second different thing volumes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;volumes: - ./code/:/var/www/html - ./config/conf.d/:/etc/nginx/conf.d/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We repeat mapping directory &lt;code&gt;code&lt;/code&gt; to &lt;code&gt;/var/www/html&lt;/code&gt; – this is default directory where nginx search html files. We also map directory &lt;code&gt;config/conf.d&lt;/code&gt; to &lt;code&gt;/etc/nginx/conf.d/&lt;/code&gt;. This is default directory where nginx search site configuration files. In this directory we have &lt;code&gt;site.conf&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight nginx"&gt;&lt;code&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;VB-Mint20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Log files for Debug&lt;/span&gt;
&lt;span class="kn"&gt;error_log&lt;/span&gt;  &lt;span class="n"&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="n"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;# Laravel web root directory&lt;/span&gt;
&lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="n"&gt;/var/www/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.php&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt;&lt;span class="n"&gt;/&lt;/span&gt; &lt;span class="n"&gt;/index.php?&lt;/span&gt;&lt;span class="nv"&gt;$query_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Nginx Pass requests to PHP-FPM&lt;/span&gt;
&lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;\.php$&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;fastcgi_split_path_info&lt;/span&gt; &lt;span class="s"&gt;^(.+&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="s"&gt;.php)(/.+)&lt;/span&gt;$&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;fastcgi_pass&lt;/span&gt; &lt;span class="nf"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;fastcgi_index&lt;/span&gt; &lt;span class="s"&gt;index.php&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;fastcgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;fastcgi_param&lt;/span&gt; &lt;span class="s"&gt;SCRIPT_FILENAME&lt;/span&gt; &lt;span class="nv"&gt;$document_root$fastcgi_script_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;fastcgi_param&lt;/span&gt; &lt;span class="s"&gt;PATH_INFO&lt;/span&gt; &lt;span class="nv"&gt;$fastcgi_path_info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="mi"&gt;256M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see nginx is listening on port 80, looking for index.php/index.html and the last section (Nginx Pass requests to PHP-FPM) connect PHP with NGINX. In this section we show what NGINX  should do with php files. The last line in this section client_max_body_size 256M; is not required but this line allow upload big files (256 MB) to server via web browser.&lt;/p&gt;

&lt;p&gt;That’s all! You have a dockerized web server with PHP. Open your browser and type localhost in your address bar:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A0WHCPv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://varlock.net/wp-content/uploads/sites/1/phpinfo.min_.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A0WHCPv4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://varlock.net/wp-content/uploads/sites/1/phpinfo.min_.png" alt="phpinfo();" width="880" height="811"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus!
&lt;/h2&gt;

&lt;p&gt;If you don’t want to build your own image, you can download it from &lt;a href="https://hub.docker.com/r/christexe/php/tags"&gt;DockerHub&lt;/a&gt;. But warning! You should delete these lines from docker-compose.yml file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
      &lt;span class="na"&gt;dockerfile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;config/dockerfile&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After removing above lines, when you start container (docker-compose  up) Docker will pull the image automatically from Docker Hub. The  dockerfile is of course unnecessary in this case.&lt;/p&gt;

&lt;p&gt;All you read in this article you can watch on my video:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rtl0liw05qo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>docker</category>
      <category>php</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
