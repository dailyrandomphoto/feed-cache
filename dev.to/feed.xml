<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Introducing PartiQL For DynamoDB</title>
      <author>Harinder Seera</author>
      <pubDate>Mon, 14 Jun 2021 05:00:46 +0000</pubDate>
      <link>https://dev.to/aws-builders/introducing-partiql-option-for-dynamodb-1j9g</link>
      <guid>https://dev.to/aws-builders/introducing-partiql-option-for-dynamodb-1j9g</guid>
      <description>&lt;p&gt;AWS DynamoDB is a fully managed NoSQL database. I have been working with it for couple of years. One of the frustrating thing with it is that it did not have SQL statement-like capability to interact with tables, not until now.&lt;/p&gt;

&lt;p&gt;In late 2019, AWS introduced a query language called PartiQL. And recently it was announced that DynamoDB will now support PartiQL. The PartiQL editor option is currently only available in the new DynamoDB console. If you want to use it, you will need to switch from the old console.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7wTDjy3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10n83wj4yn8o7r0ffq35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7wTDjy3J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10n83wj4yn8o7r0ffq35.png" alt="option"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PartiQL is a SQL-compatible query language that makes it easy to efficiently query data in DynamoDB using DML statements select, insert, update, and delete. This is huge for DynamoDB users because of the following reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can use well-known language to start using DynamoDB. You don't need to know DynamoDB query language.&lt;/li&gt;
&lt;li&gt;You now have a choice on how you choose to interact with DynamoDB. You can use PartiQL if you don't like to deal with FilterExpressions. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are some example of using PartiQL to query DynamoDB table.&lt;/p&gt;

&lt;p&gt;1: For given id, return item detail.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT * FROM "rssfeed" WHERE "id" = 'https://www.centralbanking.com/central-banks/monetary-policy/communication/4391106/powell-treads-cautious-line-in-jackson-hole-remarks' and guidislink=false`
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YejyMVLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7wwowtn6yxiqsicmk8r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YejyMVLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7wwowtn6yxiqsicmk8r.png" alt="Full detail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2: For given id, only return summary and title information&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT summary, title FROM "rssfeed" WHERE "id" = 'https://www.centralbanking.com/central-banks/monetary-policy/communication/4391106/powell-treads-cautious-line-in-jackson-hole-remarks' and guidislink=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eh30TnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ddahujzrlzbuwwjd1go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2Eh30TnY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ddahujzrlzbuwwjd1go.png" alt="Selected fields"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that internally the SELECT SQL statement will be converted to Scan or Query operation depending on the WHERE clause.&lt;/p&gt;

&lt;p&gt;I have a feeling in the future PartiQL will address my other frustration with DynamoDB. That is you can not delete all the items in the table without needing to drop &amp;amp; recreating the table. This can be a time-consuming activity.&lt;/p&gt;

&lt;p&gt;For now, I am just happy to have PartiQL in my arsenal when working with DynamoDB.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h5&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://partiql.org/tutorial.html"&gt;PartiQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/opensource/announcing-partiql-one-query-language-for-all-your-data/"&gt;PartiQL AWS Annoucement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ql-reference.html"&gt;PartiQL AWS Developer Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;p&gt;If you enjoyed this article feel free to share on social media 🙂&lt;/p&gt;

&lt;p&gt;Say Hello on: &lt;a href="https://www.linkedin.com/in/hpseera/"&gt;Linkedin&lt;/a&gt; | &lt;a href="https://twitter.com/harinderseera"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Github repo: &lt;a href="https://github.com/hseera"&gt;hseera&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>dynamodb</category>
      <category>database</category>
      <category>data</category>
    </item>
    <item>
      <title>How to get a Developer Internship </title>
      <author>Krowser Web Services </author>
      <pubDate>Mon, 14 Jun 2021 03:45:20 +0000</pubDate>
      <link>https://dev.to/krowser/how-to-get-a-developer-internship-4c8c</link>
      <guid>https://dev.to/krowser/how-to-get-a-developer-internship-4c8c</guid>
      <description>&lt;p&gt;So you've decided that you want to do an internship. Congratulations! It's a big step and will give you valuable experience. Don't worry if you don't have any experience: there are many reasons why someone would hire an intern, even if they don't have previous experience (e.g., the startup is new, or the team wants to teach someone highly motivated).&lt;/p&gt;

&lt;p&gt;The first thing is to decide what kind of company you want to work for. There are two main kinds of companies where interns work: well-established small startups and large established companies. The latter often have more money and resources, so they can be much more fun and exciting places to work, but they also require a more formal dress code and a lot more bureaucracy (even though this varies by department).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find Companies That Offer Software Developer Internships&lt;/strong&gt;&lt;br&gt;
The next step is to find companies that are hiring. It seems like a no-brainer, but you'd be surprised how many developers apply to random companies without doing any research beforehand. Spend some time looking for potential employers and try to figure out if it's the kind of company you want to work for.&lt;/p&gt;

&lt;p&gt;Once you've found some companies that fit your criteria, it's time to look at their job listings. Some of them will advertise an internship position, but many don't even though they are willing to hire new graduates. So how do you find out if a company is offering internships?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here are a few ways:&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;Use LinkedIn (or another professional network)&lt;/strong&gt; and look around at the profiles of people who work at the company. You can see what kind of work they do there and whether they mention working as an intern before getting hired full-time. If so, this means the company doesn't mind taking on interns and may be willing to offer you one too.&lt;/p&gt;

&lt;p&gt;Another option would be to reach out directly to someone you know or have interacted with in the past who works for that company. They will most likely let you know about any openings there if they can because it's good PR for them!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Look for information on CrunchBase about each startup/company and read through every profile page carefully.&lt;/strong&gt; Some startups might not advertise their internship opportunities directly, but they might have mentioned it somewhere in the business model's description or why they're raising funding. It's worth checking out!&lt;/p&gt;

&lt;p&gt;Sometimes companies give away internships during hackathons, meetups, or conferences where developers get together to build cool stuff over a weekend. Keep an eye out for these events!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Twitter is another place where people often post about opportunities such as internships.&lt;/strong&gt; If you find one that looks interesting, try reaching out directly to see if there are any openings there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Check out job listing websites like The Muse or WeWorkRemotely.&lt;/strong&gt; You can search by location, keywords (technology used by the company), compensation, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't be afraid to apply even if they do not have any internships posted&lt;/strong&gt;&lt;br&gt;
It is often true that many software engineering internships get taken up before they are publicly announced. Google is especially notorious for this. However, many other organizations follow the same pattern. Even though these companies may not currently accept interns, there is no harm in applying anyway!&lt;/p&gt;

&lt;p&gt;It also helps you build up your portfolio when you can show that you have applied to such prestigious organizations that may not accept interns.&lt;/p&gt;

&lt;p&gt;Also, remember that small startups accept interns too! Sometimes, it's easier to land an internship at a small startup because of how much more flexible they are than larger corporations, which tend to adhere strictly to their application deadlines and process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't look at the big companies only&lt;/strong&gt;&lt;br&gt;
There are other companies out there, and many offer software developers great opportunities. These little-known companies may not be as well known as Google or Facebook, but they can still provide a great place to work and will likely offer you more responsibility than an internship at a big company.&lt;/p&gt;

&lt;p&gt;If you want to gain experience working on a product that has the potential to change the world, then applying for internships at these smaller companies may be your best bet.&lt;/p&gt;

&lt;p&gt;Spend some time to identify the target companies and then create a list of relevant information about each one of them:&lt;/p&gt;

&lt;p&gt;A solid piece of advice is to research and document each target company's information before sending applications. Many companies provide different types of information depending on what kind of position they are seeking (i.e., software engineer intern vs. software engineer full-time).&lt;/p&gt;

&lt;p&gt;Once you found a company that seems interesting, make sure you understand what they do (you may even want to try using their product), research the team and founders, and prepare answers to common questions like "Why are you interested in working here?" or "What experience do you have with our product?"&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be creative with your application materials&lt;/strong&gt;&lt;br&gt;
Applying for an internship at a big tech company can be overwhelming because there is so much competition out there and so many people who want to work there. To stand out from the crowd, make sure that what you have in your application package is unique and exciting, not just from the technical perspective but also from a story perspective.&lt;/p&gt;

&lt;p&gt;For example, suppose you're applying at Google or Facebook and tell them about how much research you did in school-related to a specific project they are working on now. In that case, they might find this intriguing and choose to give you an interview.&lt;/p&gt;

&lt;p&gt;However, suppose all of your stories involve activities from when you were 12 years old (e.g., building websites for your parents' business). In that case, it is unlikely that any of these companies will take notice of your application – even if those experiences were technically impressive at the time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Build something impressive&lt;/strong&gt;&lt;br&gt;
Another way to make yourself stand out from the crowd is by building a project or creating something extraordinary that shows your skills as a software developer. &lt;/p&gt;

&lt;p&gt;Learning new technology is always good, but more importantly, having a passion and curiosity for technology will help separate yourself from other candidates when applying for jobs.&lt;/p&gt;

&lt;p&gt;Ensure your GitHub profile is active and filled with projects that demonstrate your skills no matter what language(s) you use. Even if this isn't required by most employers yet, putting together some cool projects will set you apart from other applicants as well as show potential employers that you're interested in developing software more than just getting paid by 9-5 every day!&lt;/p&gt;

&lt;p&gt;Join communities like Reddit (/r/webdev), Quora, Stack Overflow (developer tag), etc. and keep up-to-date with industry trends so that when interviewing with hiring managers, others may hear about your enthusiasm towards developing software products that could potentially convince them into making an offer!&lt;/p&gt;

&lt;p&gt;If you have built an impressive project before arriving into college, don't forget to include it in your application package – this will also help differentiate yourself from other applicants trying to land an internship at one of these tech titans.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be yourself&lt;/strong&gt;&lt;br&gt;
You want to make sure you embrace who you are throughout the interview process to leave a lasting impression on potential employers (and hopefully get them interested in talking to you).&lt;/p&gt;

&lt;p&gt;Showing off your personality is something that can help set you apart from all of those other candidates who are competing for the same position. But also keep in mind that your interviewer has seen hundreds if not thousands of applications already, so try not to take it personally if they do not seem excited about your application at first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;&lt;br&gt;
Although it's quite challenging to get an internship as a software developer, you can certainly achieve this goal if you are passionate about programming and have good coding skills.&lt;/p&gt;

&lt;p&gt;Keep in mind that persistence is key when searching for an internship. It may take several attempts before you find a suitable one.  In addition to networking with people who work at potential companies, I also advise you to keep your resume up-to-date by regularly practising coding exercises or building apps on your own time.&lt;/p&gt;

&lt;p&gt;Also, keep learning new technologies and frameworks so that you can demonstrate how much better prepared you are than other candidates when the time comes to apply for an internship position.&lt;/p&gt;

&lt;p&gt;I recommend doing an internship at a big company after your first year of college because it will give you a good feel for how things work in the industry before jumping into the startup world, which has its own set of challenges and benefits.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>28 Websites paying to write Technical Articles</title>
      <author>codinglists-dev</author>
      <pubDate>Mon, 14 Jun 2021 03:03:04 +0000</pubDate>
      <link>https://dev.to/codinglistsdev/28-websites-paying-to-write-technical-articles-4a31</link>
      <guid>https://dev.to/codinglistsdev/28-websites-paying-to-write-technical-articles-4a31</guid>
      <description>&lt;p&gt;With the world depending on the web for data, there are numerous chances to bring in cash as an technical essayist on the web. Technical articles, for example, realities and information about a specialized subject or rules on programming improvement are looked for by understudies and engineers both. &lt;/p&gt;

&lt;p&gt;Technical information has the best worth among the present experts. With such countless progressions going on in programming/versatile advancement regions, an ever increasing number of individuals have begun to seek after this field. You can utilize your insight to compose and distribute accommodating instructional exercises. How great is it that you will really be remunerated for your commitments.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#clubhouseio"&gt;
  &lt;/a&gt;
  &lt;a href="https://clubhouse.io/clubhouse-write-earn-give-program/"&gt;Clubhouse.io&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300 - $600&lt;/p&gt;

&lt;p&gt;The clubhouse is a collaborative. It offers helpful ways for your group to cooperate. &lt;/p&gt;

&lt;p&gt;Their author program-"Write, Earn, Give program". They acknowledge general classes of articles composed for designers and programmers. You can even compose fun posts with respect to the programming scene on their program.&lt;/p&gt;

&lt;p&gt;You can also write on Career guidance, leadership and some more non programming stuff. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#twilio"&gt;
  &lt;/a&gt;
  &lt;a href="https://go.twilio.com/twilio-voices/"&gt;Twilio&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $500                              &lt;/p&gt;

&lt;p&gt;Technical tutorials with code. They give APIs. They anticipate specialized instructional exercises with code. It is ideal to include their APIs in your instructional exercises. It expands your likeliness to get acknowledged.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vonage"&gt;
  &lt;/a&gt;
  &lt;a href="https://learn.vonage.com/spotlight/"&gt;Vonage&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $500&lt;br&gt;&lt;br&gt;
They're a bit different. They are specially looking for more advance articles on using their APIs. Nothing on general or leadership or beginner focused article. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#digitalocean"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.digitalocean.com/community/pages/write-for-digitalocean"&gt;DigitalOcean&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300&lt;/p&gt;

&lt;p&gt;Each month, they focus on a few specific topic areas, and they are looking for authors who understand those topics well.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#deepsource"&gt;
  &lt;/a&gt;
  &lt;a href="https://deepsource.io/tech-writer/"&gt;Deepsource&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $150&lt;/p&gt;

&lt;p&gt;DeepSource is looking for technical writers who can write content in the form of blogposts and articles on topics related to the following topics: code quality, code review, static analysis, software engineering best practices, etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#draft"&gt;
  &lt;/a&gt;
  &lt;a href="https://draft.dev/write"&gt;Draft&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $100 - $400         &lt;/p&gt;

&lt;p&gt;They are really a specialized substance creation organization. They for the most part compose for programming new businesses. &lt;/p&gt;

&lt;p&gt;Also, they are inviting you to compose with them. They acknowledge specialized articles dismissing any determinations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#strapi"&gt;
  &lt;/a&gt;
  &lt;a href="https://strapi.io/write-for-the-community"&gt;Strapi&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $100 - $200&lt;/p&gt;

&lt;p&gt;They are looking for articles on Jamstack tutorials, deep-dives, and reviews that make other developer's life easier. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#honeybadger"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.honeybadger.io/blog/write-for-us/"&gt;Honeybadger&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $500&lt;/p&gt;

&lt;p&gt;They are looking for in-depth blog posts on Ruby, PHP, or JavaScript. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#csstricks"&gt;
  &lt;/a&gt;
  &lt;a href="https://css-tricks.com/guest-posting/"&gt;CSS-tricks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $250&lt;/p&gt;

&lt;p&gt;You can literally write anything realted to Development, Designing and fun stuff. Visit &lt;a href="https://www.notion.so/csstricks/Article-Ideas-0224d13de0b4421dadc667dddf512fc6"&gt;here&lt;/a&gt; and you can see all the amazing topics you can write on. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adeva"&gt;
  &lt;/a&gt;
  &lt;a href="https://adevait.com/write-for-us"&gt;Adeva&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $200&lt;/p&gt;

&lt;p&gt;&lt;a href="https://airtable.com/shrJmhz5QqOEPlz6V/tbl6raX4GplJhnt4a"&gt;Here&lt;/a&gt; is the link to the topics they are looking for currently. They have pretty cool list of article topics. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#takeshape"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.takeshape.io/jobs/contributing-writer/"&gt;TakeShape&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300 &lt;/p&gt;

&lt;p&gt;Articles on Web Development, JAMStack, React or Using takeshape with other apps. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auth0"&gt;
  &lt;/a&gt;
  &lt;a href="https://auth0.com/apollo-program"&gt;Auth0&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $450&lt;/p&gt;

&lt;p&gt;You can write technical articles on lot of different frameworks, programming languages, and modern development techniques. &lt;code&gt;Electron&lt;/code&gt;, &lt;code&gt;Java&lt;/code&gt;, &lt;code&gt;.NET&lt;/code&gt;, &lt;code&gt;Python&lt;/code&gt; or &lt;code&gt;Mobile&lt;/code&gt; etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#archtype"&gt;
  &lt;/a&gt;
  &lt;a href="https://arctype.com/blog/contribute/"&gt;Archtype&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $150&lt;/p&gt;

&lt;p&gt;They're looking for article on SQL, Databases, Analysis, Dashboards or Advice for developers&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typingdna"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.typingdna.com/guest-author-program#get-started"&gt;TypingDNA&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $500&lt;/p&gt;

&lt;p&gt;There aren’t any strict requirements for topics. You just need to be relevant, creative and technical. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#logrocket"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.logrocket.com/become-a-logrocket-guest-author-7d970eb673f9/"&gt;LogRocket&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $350&lt;/p&gt;

&lt;p&gt;They're mainly looking for tutorials on&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React, Redux, Vue.js, webpack, Wasm, MobX, GraphQL, JavaScript, etc.&lt;/li&gt;
&lt;li&gt;Frontend development best practices&lt;/li&gt;
&lt;li&gt;Product/UI/UX design&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cubejs"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.notion.so/Cube-js-Guest-Authors-8ddd5046be9048d9869410b60d4a2b98"&gt;CubeJS&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300&lt;/p&gt;

&lt;p&gt;They are looking for technical articles that has the potential to reach a audience. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hasura"&gt;
  &lt;/a&gt;
  &lt;a href="https://blog.hasura.io/the-hasura-technical-writer-program/"&gt;Hasura&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300&lt;/p&gt;

&lt;p&gt;The Hasura Technical Writer program is a way for you to support the Hasura GraphQL Engine or GraphQL in general by writing technical content, and get paid for doing so! &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tutsplus"&gt;
  &lt;/a&gt;
  &lt;a href="https://code.tutsplus.com/articles/call-for-authors-write-for-tuts--cms-22034"&gt;TutsPlus&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $100 - $700 ($700 and more for high quality articles, $100 for quick tutorial and $250 regular size articles)&lt;/p&gt;

&lt;p&gt;You can write on PHP, Ruby, server-side JavaScript, HTML5, CSS3, document-based database systems, and everything in between. No matter what you're familiar with be it in your day-to-day, your hobby work, or both, we're likely looking to run it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linode"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.linode.com/lp/write-for-linode/"&gt;Linode&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300(minimum)&lt;/p&gt;

&lt;p&gt;Linode’s library is a long-running and popular resource for developers, engineers, and others.&lt;br&gt;
Linode's library is hosted on GitHub, and by contributing to the library, you'll be adding to your portfolio on GitHub. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#circleci"&gt;
  &lt;/a&gt;
  &lt;a href="https://circleci.com/blog/guest-writer-program/"&gt;CircleCI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300&lt;/p&gt;

&lt;p&gt;There are many amazing topics you can write one. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#geeksforgeeks"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.geeksforgeeks.org/freelance-technical-content-writing/"&gt;GeeksForGeeks&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $50 - $150&lt;/p&gt;

&lt;p&gt;GeeksforGeeks introduces freelance technical content writing for the professionals who have taken a break from their career for any reasons.&lt;/p&gt;

&lt;p&gt;There are various topics you can write on including C++, SQL, Java, Design, Animation and manyy things. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adamtheautomator"&gt;
  &lt;/a&gt;
  &lt;a href="https://adamtheautomator.com/friends/"&gt;AdamTheAutomator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $500&lt;/p&gt;

&lt;p&gt;They are looking for articles related to Devops and Sysadmins that are long form. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tutorialspoint"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.tutorialspoint.com/about/tutorials_writing.htm"&gt;TutorialsPoint&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $100 - $500&lt;/p&gt;

&lt;p&gt;You can write on many topics. They have a huge list of topics. Non-coding + Programming.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fauna"&gt;
  &lt;/a&gt;
  &lt;a href="https://fauna.com/blog/write-with-fauna"&gt;Fauna&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $150 - $500&lt;/p&gt;

&lt;p&gt;If you are building modern applications using JavaScript frameworks and languages such as Java/Python/Go etc., combining components such as microservices, serverless functions, 3rd party APIs, GraphQL etc., with Fauna, the “Write with Fauna” program is a way for you to contribute to the community by writing technical content, and getting paid for doing so.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#neptuneai"&gt;
  &lt;/a&gt;
  &lt;a href="https://neptune.ai/write-for-us"&gt;NeptuneAI&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $50 - $500 (see their payout structure)&lt;/p&gt;

&lt;p&gt;Interested in writing technical articles for Data Scientists and Machine Learning practitioners, then NeptuneAI is the best place to show your writing skills. You can write on various topics such as Building models, Computer Vision, Hyperparameter tuning. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wphub"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.wphub.com/write-for-us/"&gt;WPhub&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $100 - $200&lt;/p&gt;

&lt;p&gt;WPHUB has evolved from a site that reviewed WordPress themes and plugins to a content oriented site that wrote about the coming and goings of all things WordPress. You can write about WordPress tutorials. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smashing-magazine"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.smashingmagazine.com/write-for-us/"&gt;Smashing Magazine&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $50 - $500&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rancger"&gt;
  &lt;/a&gt;
  &lt;a href="https://rancher.com/writing-program/roles/writer/"&gt;Rancger&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Pays: $300&lt;/p&gt;

&lt;p&gt;They're looking for guest authors who who are familiar with containers, DevOps, Kubernetes, and related technology(no necessary).  &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;It requires some investment to develop any independent composing business and the hardest part is beginning. Regardless of whether you're attempting to bring in additional cash or you need to make a full-time pay to help your family, getting paid to write technical articles needs to begin some place.&lt;/p&gt;

&lt;p&gt;Utilize the destinations above and get your work distributed. As you work through the rundown, you'll acquire important associations and you'll get paid to distribute content, which you can use as tests to discover much more lucrative customers in the innovation specialty. In addition, many top innovation organizations read the destinations found previously.&lt;/p&gt;

&lt;p&gt;They will see your name and need to employ you for their own substance! Obviously, similarly as with any specialty, you need to follow the rules put out by each and every site. Ensure you submit incredible work in the arrangement they like and you'll get paid to compose innovation articles as you submit to an ever increasing number of sites. It begins with only one and you can't get to a $5,000 each month pay without getting paid for that first article.&lt;/p&gt;

&lt;p&gt;Perhaps the innovation specialty is only one of the specialties you need to bring in cash composing on the web with. I've gathered a MASSIVE rundown of sites prepared to pay you to compose for them.&lt;/p&gt;

&lt;p&gt;If you're interested in adding something here, just comment it with the link🚀&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>Quick Introduction to using in C++</title>
      <author>Aastha Gupta</author>
      <pubDate>Mon, 14 Jun 2021 02:47:47 +0000</pubDate>
      <link>https://dev.to/guptaaastha/quick-introduction-to-using-in-c-4n73</link>
      <guid>https://dev.to/guptaaastha/quick-introduction-to-using-in-c-4n73</guid>
      <description>&lt;p&gt;If you've ever written a c++ code snippet, I predict that you've seen this particular line :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and thought to yourself, 'what does &lt;code&gt;using&lt;/code&gt; mean?'&lt;/p&gt;

&lt;p&gt;&lt;code&gt;using&lt;/code&gt; is a &lt;code&gt;keyword&lt;/code&gt; in C++ which is applicable in the following cases:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bring-all-members-from-the-namespace-into%E2%80%8B-the-current-scope"&gt;
  &lt;/a&gt;
  Bring all members from the namespace into​ the current scope.
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;using&lt;/code&gt; directive allows all the names in a namespace to be used without the namespace-name as an explicit qualifier.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// brings all namespace names in the current scope&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;my_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// std::string can now be referred as string throughout the scope&lt;/span&gt;

&lt;span class="n"&gt;OR&lt;/span&gt;

&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;my_string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="c1"&gt;// string is now recognized, &lt;/span&gt;
&lt;span class="c1"&gt;// however, will have to be addressed as std::string &lt;/span&gt;
&lt;span class="c1"&gt;// wherever required&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So now you know what &lt;code&gt;using&lt;/code&gt; does in :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It brings &lt;code&gt;namespace&lt;/code&gt; std in scope which makes it handy to use names in std without the explicit prefix &lt;code&gt;std::&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If a local variable has the same name as a &lt;code&gt;namespace&lt;/code&gt; variable, the &lt;code&gt;namespace&lt;/code&gt; variable is hidden. It is, therefore, a good practice to not bring &lt;em&gt;complete namespaces&lt;/em&gt; in scope in long code files to avoid such cases where an intuitive identifier name has to be dropped 🙁 because same name exists in the &lt;code&gt;namespace&lt;/code&gt; brought in scope by &lt;code&gt;using&lt;/code&gt;. A workaround is to bring a specific name from a namespace in scope as:&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bring-a-base-class-method-%E2%80%8Bor-variable-into-the-current-class-scope"&gt;
  &lt;/a&gt;
  Bring a base class method ​or variable into the current class’ scope.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BaseClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;public:&lt;/span&gt;
      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Hi there, I am Base"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DerivedClass&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nl"&gt;public:&lt;/span&gt;
      &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
      &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Hi, "&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="c1"&gt;// Instead of recursing, the greet() method&lt;/span&gt;
         &lt;span class="c1"&gt;// of the base class is called.&lt;/span&gt;
         &lt;span class="n"&gt;sayHi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-type-aliases"&gt;
  &lt;/a&gt;
  Create type aliases
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;typename&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;MyName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MyVector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MyAlloc&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;MyName&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// sample usage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;ios_base&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmtflags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// identical to &lt;/span&gt;
&lt;span class="c1"&gt;// typedef std::ios_base::fmtflags flags;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;typedef&lt;/code&gt; already exists in the C++ language which makes one wonder, why &lt;code&gt;using&lt;/code&gt; was introduced to create type aliases. This is a valid question and an interesting one. There are a few interesting facts associated with &lt;code&gt;typedef&lt;/code&gt; and &lt;code&gt;using&lt;/code&gt; type aliases declarations which I will cover in my next post, stay tuned 😄.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are more caveats to &lt;code&gt;using&lt;/code&gt; but are not covered here because this is a quick introduction, and also because of how rarely they are encountered. I encourage you to read more about &lt;code&gt;using&lt;/code&gt; &lt;a href="https://en.cppreference.com/w/cpp/keyword/using"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for giving this article a read and I'll see you in the next one 😄&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>using</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Sneaking into Docker</title>
      <author>Sewvandi Promodya Wickramasinghe</author>
      <pubDate>Mon, 14 Jun 2021 02:36:00 +0000</pubDate>
      <link>https://dev.to/sewvandiii/sneaking-into-docker-1cda</link>
      <guid>https://dev.to/sewvandiii/sneaking-into-docker-1cda</guid>
      <description>&lt;p&gt;The virtual machine has long been the grab standard for cloud infrastructure because of its many benefits. What if there was a more lightweight, cost-effective, and scalable option to a virtual machine?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; 🐳 is just like that.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--syGRfDl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v22zrkyqgssc4ovqgw3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--syGRfDl1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4v22zrkyqgssc4ovqgw3.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-virtual-machine"&gt;
  &lt;/a&gt;
  What is a Virtual Machine?
&lt;/h2&gt;

&lt;p&gt;A virtual machine is a system which acts exactly like a computer. Following the virtualization of the hardware, each virtual machine need its own operating system.&lt;/p&gt;

&lt;p&gt;VMs have several advantages&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the same computer, multiple OS environments can exist in isolation from one another&lt;/li&gt;
&lt;li&gt;Easy maintenance&lt;/li&gt;
&lt;li&gt;Availability&lt;/li&gt;
&lt;li&gt;Rich with resources&lt;/li&gt;
&lt;li&gt;Cloud service providers like AWS, DigitalOcean, Google, Azure etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What limitations do VMs have?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Less efficiency because they access hardware indirectly&lt;/li&gt;
&lt;li&gt;You'll require more resources as you operate more VMs&lt;/li&gt;
&lt;li&gt;Performance may be low when several virtual machines are operating on the same host&lt;/li&gt;
&lt;li&gt;Portability is restricted&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Containers&lt;/strong&gt; are a solution to the challenge of getting software to run effectively when it is transferred from one computing environment to another.&lt;/p&gt;

&lt;p&gt;Containers are commonly used for web, applications, caching services, and small databases.&lt;/p&gt;

&lt;p&gt;Docker is a container-based solution for creating distributed applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-docker"&gt;
  &lt;/a&gt;
  What is Docker?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGdqtRYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v54o2mqbi08rhhorhu9i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGdqtRYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v54o2mqbi08rhhorhu9i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Docker is an open platform enabling programs to be developed, shipped and executed. Docker allows you to separate your applications for speedy delivery of software from your infrastructure. With Docker, it's the same way you can manage your infrastructure.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-docker"&gt;
  &lt;/a&gt;
  Why do we need Docker?
&lt;/h2&gt;

&lt;p&gt;Sometimes you can't set your app on a friend's computer and can't run several programs on the same port.&lt;/p&gt;

&lt;p&gt;Docker offers tools and a platform to manage the container lifecycle.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The container is the unit that distributes and tests your application&lt;/li&gt;
&lt;li&gt;Deploy your application without a problem on any server&lt;/li&gt;
&lt;li&gt;Containers are great for continuous integration and continuous delivery (CI/CD) workflows&lt;/li&gt;
&lt;li&gt;Lightweight and fast&lt;/li&gt;
&lt;li&gt;The container-based technology from Docker enables extremely portable workloads.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#docker-architecture"&gt;
  &lt;/a&gt;
  Docker architecture
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--54vY1y7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxysy4wik4ouelapn8q6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--54vY1y7u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xxysy4wik4ouelapn8q6.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dockerfile"&gt;
  &lt;/a&gt;
  Dockerfile
&lt;/h3&gt;

&lt;p&gt;A Dockerfile is a text file that contains all of the commands that a user may use to create an image from the command line. Users may establish an automated build using docker build that performs numerous command-line commands in a row.&lt;/p&gt;

&lt;p&gt;Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:14-alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; /app

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package.json yarn.lock ./&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 4000&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn build

&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "yarn", "start" ]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h3&gt;

&lt;p&gt;An image is a read-only template for building a Docker container. An image is frequently based on another image, with some added modifications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#containers"&gt;
  &lt;/a&gt;
  Containers
&lt;/h3&gt;

&lt;p&gt;A container is a runnable image instance. The Docker API or CLI may be used to create, start, stop, move, or delete containers. You may attach storage to a container, link it to one or more networks, or even create a new image based on its existing state.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#registry"&gt;
  &lt;/a&gt;
  Registry
&lt;/h3&gt;

&lt;p&gt;A Docker registry stores Docker images.🐳 &lt;br&gt;
Docker Hub is a public registry that anybody may access, and Docker is set up by default to seek for images on Docker Hub. You may even set up your own personal registry.&lt;/p&gt;

&lt;p&gt;When you use,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker pull NAME[:TAG]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker run NAME[:TAG] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;commands, the required images are pulled from your configured registry. &lt;/p&gt;

&lt;p&gt;When you use,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker push NAME[:TAG] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;command, your image is pushed to your configured registry.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#engine"&gt;
  &lt;/a&gt;
  Engine
&lt;/h3&gt;

&lt;p&gt;Docker Engine is an open source containerization engine that may be used to develop and containerize applications.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-few-of-key-commands-to-remember"&gt;
  &lt;/a&gt;
  A few of key commands to remember
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;List images&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker image ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;List containers&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker container ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Build from Dockerfile&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker build -t &amp;lt;name&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Run a container from image&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker run &amp;lt;tag name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybeP7KrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fsp7crovy3exw9hswcu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybeP7KrU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4fsp7crovy3exw9hswcu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>cloud</category>
      <category>container</category>
    </item>
    <item>
      <title>25 Git commands I use daily and you should know</title>
      <author>devdefinitive</author>
      <pubDate>Mon, 14 Jun 2021 02:05:04 +0000</pubDate>
      <link>https://dev.to/devdefinitive/25-git-commands-i-use-daily-and-you-should-know-1kj5</link>
      <guid>https://dev.to/devdefinitive/25-git-commands-i-use-daily-and-you-should-know-1kj5</guid>
      <description>&lt;p&gt;Git is a significant piece of day by day programming and is normally utilized in the product business. Since you can utilize many commands, dominating Git needs time. Yet, a few commands are all the more generally utilized. So I will share the most helpful Git commands in this post that each engineer should know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-version-control-system"&gt;
  &lt;/a&gt;
  What is Version Control System
&lt;/h3&gt;

&lt;p&gt;The version control system is frameworks that permit us to add to and oversee various deliveries and phases of a product item without really keeping different documents or folders. They additionally make improvement inside a group more sensible and to a lesser degree a torment as designers don't need to exchange folders, but instead, speak with a solitary source where every one of the progressions is going on and everything is saved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-git"&gt;
  &lt;/a&gt;
  What is Git?
&lt;/h3&gt;

&lt;p&gt;Git is the most usually utilized VCS. Git tracks the progressions you make to documents, so you have a record of what has been done, and you can return to explicit adaptations should you at any point need to. Git likewise makes cooperation simpler, permitting changes by numerous individuals to all be converted into one source.&lt;/p&gt;




&lt;p&gt;Now let's talk about some of the useful Git commands you should know. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;git add .&lt;/code&gt;: adds all the files &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit&lt;/code&gt;: records the file permanently&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config&lt;/code&gt;: it controls set for the local save project/file&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git help&lt;/code&gt;: displays all the necessary information about git commands&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git status&lt;/code&gt;: gives all the information about the current branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git log&lt;/code&gt;: get to know about the previous commits&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git diff&lt;/code&gt;:  runs a diff work on Git information sources. These information sources can be submits, branches, records and then some&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git reset --hard&lt;/code&gt;: deletes all your uncommited changes | dangerous command lol&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git remote add &amp;lt;url or address&amp;gt;&lt;/code&gt;: to add a new remote address&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git remove rm&lt;/code&gt;: to remove file form Git repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git push -u origin master&lt;/code&gt;: for pushing local files to github&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git branch&lt;/code&gt;: the tip of a progression of submits—it is anything but a holder for submits.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git checkout&lt;/code&gt;: allows you to explore between the branches made by git branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git tag&lt;/code&gt;: tags are utilized to check a submit stage as important&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git fetch&lt;/code&gt;: this command advises your local git to recover the most recent meta-information data from the first&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git rebase&lt;/code&gt;: you can take every one of the progressions that were submitted on one branch and replay them on an alternate branch.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git config -global color.ui true&lt;/code&gt;: see different color on different outputs&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git init&lt;/code&gt;:creates a new git repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git commit -m "New file Readme.md"&lt;/code&gt;: saves your changes in the local repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git show&lt;/code&gt;: that is utilized to see extended subtleties on Git items like masses, trees, labels, and submits.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git merge&lt;/code&gt;: allows you to take the autonomous lines of improvement made by git branch and coordinate them into a solitary branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git pull &amp;lt;repo link&amp;gt;&lt;/code&gt;: to download the folder from the remote repository&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git stash save&lt;/code&gt;: stores modified tracked files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;git stash drop&lt;/code&gt;: discards most recent stashed files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;mkdir project1&lt;/code&gt;: create new folder project1&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;So these are the most supportive git commands I find in my regular programming. There are a few additional things to find out about Git, I will clarify them in a different post.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>github</category>
      <category>git</category>
    </item>
    <item>
      <title>IT Toolbox: Lessons from Star Wars: Do you work for Darth Sidius?</title>
      <author>The Sharp Ninja</author>
      <pubDate>Mon, 14 Jun 2021 01:14:45 +0000</pubDate>
      <link>https://dev.to/sharpninja/it-toolbox-lessons-from-star-wars-do-you-work-for-darth-sidius-38gd</link>
      <guid>https://dev.to/sharpninja/it-toolbox-lessons-from-star-wars-do-you-work-for-darth-sidius-38gd</guid>
      <description>&lt;p&gt;The transformation of Anikan Skywalker to Darth Vader can be summed up to office politics. Anikan is a superstar, and as such he's attracted attention, both good and bad, from people of power and influence in his workplace. This happens to all superstars, regardless of their profession. Superstars are given the most difficult tasks, and often they have to go off and do them alone or with a minimal team that simply are along for the ride to ensure that the superstar doesn't get bogged down by ancillary problems. Let the superstar deal with the hard stuff and the capable sidekicks can keep the peace and create the environment in which the superstar flourishes. But eventually the superstar must make hard choices that affect everyone. Politics must be played to get the resources necessary to get the job done. The future must also be accounted for, so some sacrifices today will seem worthwile in the future. But the devil is in the details. Playing politics requires gaining the eyes and ears of someone of influence. If that person is a follower of the Dark Side, then you may not know it until you're at the pivotal point of following or loosing the help you so desperately need to keep from failing. Dogma. Hyperbole. Exaggeration. Maybe, but most melodrama is rooted in reality. We all know Lucas loves technology and that he trusts it more than humans to do thing. He's obviously very political as well, and so his blending of politics, conflict and technology seems so completely normal for almost any person working in IT. As with all melodramas, there's an underriding moral that drives the whole thing, and in the case of Star Wars that moral is that even the greatest superstars can become what they hate most while trying to serve those they love. Be careful of offers that are too perfect since the cost of perfection is too high. Another theme from Star Wars and the fall of Anikan Skywalker comes from his jealousy of not being given his due respect and title out of fear and doubt from those who fear superstars instead of embracing them. If the Jedi Council gives him the title of Master Jedi, when that is obviously what he is, then does Darth Sidius have any chance of convincing the frustrated superstar that he should turn to the Dark Side? There's a warning in here to middle management about glass ceilings and trying to force the same old promotion path on people of all talent levels. Just because something hasn't been done before doesn't mean it shouldn't be done. Letting the enemy steal your superstars can be a very, very dangerous thing to do, so if you have to be a bit creative to keep your superstars happy then it may be the wise thing to do. If you haven't seen Star Wars III: Revenge of the Sith, I &lt;strong&gt;highly&lt;/strong&gt; recommend that you do so. This movie should be required viewing for anyone in political science or business management since so many of the events and characters can be found in almost any organization. It's simply a perfect melodrama of the reality of the times we live in, and there's lessons to be learned about the other side regardless of your political leanings.&lt;/p&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;p&gt;Feel free to elaborate or relate in the comments area below. If you've seen the movie and work for practically any organization you've probably seen or participated in such power struggles, so please share!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;The opinions expressed in this blog are not necessarily those of my employer.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://dev.to/sharpninja/it-toolbox-should-open-source-software-be-regulated-2kik"&gt;Should Open Source Software be Regulated?&lt;/a&gt; &amp;lt;== Previously | Next Up ==&amp;gt; &lt;a href="https://dev.to/sharpninja/it-toolbox-the-importance-of-repeatable-processes-4fap"&gt;The Importance of Repeatable Processes&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copyright"&gt;
  &lt;/a&gt;
  Copyright
&lt;/h3&gt;

&lt;p&gt;These articles are owned and copyrighted by IT Toolbox as I was a paid writer in their employ.  Please do not copy them.  If you cite them, please cite the originals.&lt;/p&gt;

</description>
      <category>opinion</category>
      <category>discuss</category>
      <category>career</category>
    </item>
    <item>
      <title>Java Garbage Collecting</title>
      <author>Josh</author>
      <pubDate>Mon, 14 Jun 2021 00:20:13 +0000</pubDate>
      <link>https://dev.to/jryther/java-garbage-collecting-4098</link>
      <guid>https://dev.to/jryther/java-garbage-collecting-4098</guid>
      <description>&lt;p&gt;Hello everyone, for today’s post I am going to discuss garbage collecting for Java.  For those that don’t know, garbage collecting is the process of clearing up memory in the application at runtime.  As objects are created over the life cycle of the program they will eventually take up too much space.  In programming languages like C or C++ programmers will have to manage memory on their own.  Java is different in that it handles it in house and will delete object that are no longer referenced automatically in the JVM.&lt;/p&gt;

&lt;p&gt;Each JVM can implement its own form of garbage collecting as long as the type chosen meets the requirements of the JVM.  The most common garbage collector is Hotspot by Oracle.  Hotspot uses a generational garbage collector method that categorizes objects by the number of collections cycles it has lived through.  Hotspot’s philosophy is that most objects are short lived and in order to increase efficiency most passes of the garbage collector should just look at newer objects since they are most likely to be deleted. Looking at the graphic below, Hotspot breaks up the memory heap into sections called the young generation, old generation, and permanent generation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02BzlhKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9a6wsi4x5awa6ne7gsco.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02BzlhKq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9a6wsi4x5awa6ne7gsco.PNG" alt="HotspotHeapStructure"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The young generation consists of the eden, S0, and S1 blocks.  Eden is where new objects are stored.  They are frequently deleted in this phase since many are no longer used each collection cycle.  Objects that live past the first cycle move into S0 or S1 depending on which one is the survivor block for the rotation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NlByS8Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywdf69so114lghw5epvl.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NlByS8Ng--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywdf69so114lghw5epvl.PNG" alt="ObjectAging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Objects already in one of the survivor blocks move between them together with each rotation they survive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4B_z2PA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceoet7cixyf8vhkwdk24.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4B_z2PA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ceoet7cixyf8vhkwdk24.PNG" alt="AdditionalAging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If an object has aged a specific threshold of cycles it then moves on to the tenured block.  Minor garbage collecting cycles of the young generation do not pass over this part of the heap.  Eventually, a major garbage collection event will occur which will clean up and compact this space as well.&lt;/p&gt;

&lt;p&gt;The permanent generation is used to contain metadata and is populated by the JVM at runtime.  This data labels and describes the classes and methods used by the program.  Java standard libraries are also stored in this section.  Classes here can be removed during a full garbage collection if the JVM determines they are no longer needed and space is required for other classes.&lt;/p&gt;

&lt;p&gt;Sources:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Altvater, A. (2017, May 11). What is Java Garbage Collection? Best Practices, Tutorials &amp;amp; More. Stackify. &lt;a href="https://stackify.com/what-is-java-garbage-collection/#:%7E:text=Java%20garbage%20collection%20is%20the,Machine%2C%20or%20JVM%20for%20short.&amp;amp;text=The%20garbage%20collector%20finds%20these,them%20to%20free%20up%20memory"&gt;https://stackify.com/what-is-java-garbage-collection/#:~:text=Java%20garbage%20collection%20is%20the,Machine%2C%20or%20JVM%20for%20short.&amp;amp;text=The%20garbage%20collector%20finds%20these,them%20to%20free%20up%20memory&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Oracle. (n.d.). Java Garbage Collection Basics. &lt;a href="https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html"&gt;https://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>beginners</category>
      <category>java</category>
      <category>memory</category>
    </item>
    <item>
      <title>My Vue Experience after 3 projects in 18 months </title>
      <author>crisarji</author>
      <pubDate>Sun, 13 Jun 2021 23:52:08 +0000</pubDate>
      <link>https://dev.to/crisarji/my-vue-experience-after-3-projects-in-18-months-456c</link>
      <guid>https://dev.to/crisarji/my-vue-experience-after-3-projects-in-18-months-456c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-vue-experience-after-3-projects-in-18-months"&gt;
  &lt;/a&gt;
  My Vue Experience after 3 projects in 18 months
&lt;/h2&gt;

&lt;p&gt;Hello developer pal!, glad to see you here.&lt;/p&gt;

&lt;p&gt;In this post, I'll share my experience after 3 projects written/maintained in Vue 2.* during the last 18 months.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-topics"&gt;
  &lt;/a&gt;
  Show Me The Topics
&lt;/h2&gt;

&lt;p&gt;The topics to be focused on are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Agile Methodology and frameworks used&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Design Systems&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Infrastructure&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Backend&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;State Management&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Frontend&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: This post comes from my own experience during this lapse, not saying this is the best way to go, nor the worst, any contribution is more than welcome in the threads below!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#agile-methodology-and-frameworks-used"&gt;
  &lt;/a&gt;
  Agile Methodology and Frameworks used
&lt;/h2&gt;

&lt;p&gt;Are you familiar with &lt;a href="https://www.agilealliance.org/agile-essentials/"&gt;Agile Software Development&lt;/a&gt;?, cause I really am right now!, I really like this simple sentence as a summary:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Agile is the ability to create and respond to change. It is a way of dealing with, and ultimately succeeding in, an uncertain and turbulent environment.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Source: &lt;a href="https://www.agilealliance.org/agile101/"&gt;What is Agile?&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nice, simple, straight to the point, isn't it?, during the last year and a half my teams passed over 3 different of its frameworks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/scrum"&gt;Scrum&lt;/a&gt;: from my perspective, the most interesting, this framework allowed our &lt;a href="https://www.visual-paradigm.com/scrum/what-is-cross-functional-team-in-agile/"&gt;cross functional team&lt;/a&gt; to interact as a whole, splitting the work up in 2-weeks sprints, and constantly adjusting the business requirements, it is a quite nice experience!, highly recommended.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/kanban"&gt;Kanban&lt;/a&gt;: my second favorite from top to bottom, a good option when the work to be done does not follow the same path, for instance working on different repos at the same time(MonoRepos, MFEs, Legacy Systems)l; when this happens perhaps &lt;em&gt;Scrum&lt;/em&gt; is not enough cause the time-frames.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.agilealliance.org/glossary/xp"&gt;Extreme Programming (XP)&lt;/a&gt;: required for an MVP one of my teams had, from my experience, the most risky one since you dynamically change requirements and some heavy lifting could magically appear/disappear down the road, highly not-recommended unless it is "Extreme"-ly necessary(pun intended), and please be "Extreme"-ly cautious(pun intended X2).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In case you want to read about the &lt;code&gt;Agile Manifesto&lt;/code&gt;(the corner stone of the methodology) you can do it right &lt;a href="http://agilemanifesto.org/principles.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#design-system"&gt;
  &lt;/a&gt;
  Design System
&lt;/h2&gt;

&lt;p&gt;I learned that after defining the &lt;a href="#agile-methodology-and-frameworks-used"&gt;Methodology&lt;/a&gt;, it is good to have a robust &lt;code&gt;Design System&lt;/code&gt;, you have 2 options: reuse an existing one or create one custom from scratch, either way the benefits are amazing!, when present it covers up 3 different areas:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; &lt;code&gt;UI/UX&lt;/code&gt; does not repeat itself&lt;/li&gt;
&lt;li&gt; &lt;code&gt;WebDev&lt;/code&gt; has one-and-only-one source of truth&lt;/li&gt;
&lt;li&gt; &lt;code&gt;QA&lt;/code&gt; can evacuate questions on its own&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In case you want to have some existing guide lines, &lt;a href="https://designerup.co/blog/10-best-design-systems-and-how-to-learn-and-steal-from-them/"&gt;here&lt;/a&gt; you can find a list of available resources on the wild.&lt;/p&gt;

&lt;p&gt;In the teams I was working on, those where custom, a recipe for success was:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://storybook.js.org/"&gt;StoryBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A great strategy that we found was to create &lt;code&gt;Vue&lt;/code&gt; components using &lt;code&gt;Tailwind&lt;/code&gt; and creating its respectives stories on &lt;code&gt;Storybook&lt;/code&gt;; I can say this is a great approach cause you can define your &lt;code&gt;Design System&lt;/code&gt; in &lt;code&gt;Storybook&lt;/code&gt; itself, and publish this to an accessible page for all your team members(under a VPN is even more secure), so it is available for everybody, they can see the components running in an isolated scope before even implementing it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#infrastructure"&gt;
  &lt;/a&gt;
  Infrastructure
&lt;/h2&gt;

&lt;p&gt;Oh right, we had the &lt;a href="#agile-methodology-and-frameworks-used"&gt;Methodology&lt;/a&gt; and the &lt;a href="#design-system"&gt;Design System&lt;/a&gt; then what?&lt;/p&gt;

&lt;p&gt;I learned that here it comes the &lt;code&gt;Infrastructure&lt;/code&gt;, well the approaches we had the opportunity to work with where &lt;a href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt;, &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; and &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For experience, in big projects, &lt;code&gt;Jenkins&lt;/code&gt; is a great way to go, among all its pros, you can set it up for running on your behalf the &lt;em&gt;unit testing&lt;/em&gt; and &lt;em&gt;end-to-end&lt;/em&gt; testing before deploying!, in case of failure you are notified and a fix can be included.&lt;/p&gt;

&lt;p&gt;In small projects, or side projects, you can use the &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; + &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt; approach; &lt;code&gt;GitHub&lt;/code&gt; already has some built-in options for setting up &lt;code&gt;ymls&lt;/code&gt; and help you with &lt;em&gt;Merge Requests&lt;/em&gt; and &lt;em&gt;Deployments&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: &lt;a href="https://travis-ci.org/"&gt;TravisCI&lt;/a&gt; gives you 10,000 builds for free with your sign up, for small projects, proof of concepts or side projects it is a great deal!.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h2&gt;

&lt;p&gt;Also I learned for these projects, that a &lt;code&gt;Backend&lt;/code&gt; on &lt;a href="https://nodejs.org/en/docs/"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://firebase.google.com/docs"&gt;Firebase&lt;/a&gt; is easily handle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://nodejs.org/en/docs/"&gt;NodeJS&lt;/a&gt; + &lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; give you the chance to handle the routing for &lt;em&gt;CRUD&lt;/em&gt; operations, it is easy to handle the &lt;em&gt;request/responses&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs"&gt;Firebase&lt;/a&gt; is ready to go as soon as you import it in your &lt;a href="https://vuejs.org/"&gt;Vue&lt;/a&gt; project; with a few lines of code you are able to do a lot!; Authentication, Storage, Realtime DB, a whole bunch of options are available for you.&lt;/p&gt;

&lt;p&gt;I wrote non-canonical series related to some Firebase features if you want to check them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#state-management"&gt;
  &lt;/a&gt;
  State Management
&lt;/h2&gt;

&lt;p&gt;I learned about &lt;a href="https://vuejs.org/"&gt;VueJS&lt;/a&gt; + &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt;. I'm used to Rxjs, NgRx but Vuex is from my experience the easiest; with a little of knowledge you are able to start creating on your own, the separation of concerns through modules, and the way to reference then is crystal clear:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;store/
   ├── index.js
   └── modules/
       ├── module1.store.js
       ├── module2.store.js
       ├── module3.store.js
       ├── module4.store.js
       └── module5.store.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Referencing the modules in the &lt;code&gt;index.js&lt;/code&gt; make them importable through out your project, this includes &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;Getters&lt;/code&gt;, &lt;code&gt;Mutations&lt;/code&gt;, &lt;code&gt;Actions&lt;/code&gt;; a new module is just the addition of a new entry in the &lt;code&gt;index.js&lt;/code&gt;, a deprecated module is the removal of that entry(conditions may apply).&lt;/p&gt;

&lt;p&gt;I also learned that you can &lt;code&gt;namespace&lt;/code&gt; the modules!, then you can differentiate the elements by module instead of having dozens of lines with no context(trust me, with several modules this is amazing for debugging purposes, scalability and visual sake).&lt;/p&gt;

&lt;p&gt;A clear example can be found below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapGetters&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mapMutations&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing root properties&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing getters&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapGetters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;property&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing non-root properties&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;property&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nested&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;property&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;

  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing actions&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapActions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myAction&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
    &lt;span class="c1"&gt;// Accessing mutations&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;mapMutations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_module&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;myMutation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It doesn't matter how small or how big is your project, it will be ready to scale, you can read here a bit more about &lt;a href="https://vuex.vuejs.org/"&gt;Vuex&lt;/a&gt; and &lt;a href="https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects"&gt;Namespaces&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h2&gt;

&lt;p&gt;I learned that &lt;code&gt;Vue&lt;/code&gt; has a smaller learning curve than &lt;code&gt;Angular&lt;/code&gt;, and it is very similar to &lt;code&gt;React&lt;/code&gt;(&lt;em&gt;Note&lt;/em&gt;: assuming you have a strong base of Javascript, otherwise the curve is high on either of them).&lt;/p&gt;

&lt;p&gt;As a dev who was mostly involved in &lt;code&gt;Angular&lt;/code&gt; projects, understanding the core concepts and starting to be productive was easier than expected; I really think that the other way around must be harder, cause &lt;code&gt;Angular&lt;/code&gt; has its own world.&lt;/p&gt;

&lt;p&gt;Also learned about some core concepts that made my development faster and easier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vuedose.tips/how-to-structure-a-vue-js-app-using-atomic-design-and-tailwindcss/"&gt;Atomic Design Pattern&lt;/a&gt;: structure your folders as =&amp;gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Atoms&lt;/em&gt;: these are basic components, dummy ones; could be buttons, inputs, dropdowns, any imagiable component small enough to be functional and testable&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Molecules&lt;/em&gt;: a group of &lt;em&gt;Atoms&lt;/em&gt;, at this level just a little logic included, it should not include communication with you state(if possible)&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Organisms&lt;/em&gt;: mixture!, can have &lt;em&gt;Atoms&lt;/em&gt; and &lt;em&gt;Molecules&lt;/em&gt;, at this tier communication with you &lt;em&gt;State&lt;/em&gt; can be allowed; Mappers, Getters, here are accepted&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Templates&lt;/em&gt;: here you add together the aforementioned structures&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Pages&lt;/em&gt;: every page you add is an instance that can be accessed from your routing strategy
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://router.vuejs.org/guide/advanced/lazy-loading.html"&gt;Vue Lazy Routing&lt;/a&gt;: it is trivially easy to lazy load the route components; after defining your &lt;em&gt;routerOptions&lt;/em&gt; in 5 lines of code it is set and done.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routerOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Home&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Auth&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;routerOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="cm"&gt;/* webpackChunkName: "{{route.component}}" */&lt;/span&gt; &lt;span class="s2"&gt;`../views/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;route&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.vue`&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vue-test-utils.vuejs.org/"&gt;Vue Test Utils&lt;/a&gt;: &lt;code&gt;Vue&lt;/code&gt; has its own utils for testing purposes, and it is quite easy to understand and use, let me show the most simple sample I found:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;slot&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/slot&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;expect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;chai&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@vue/test-utils&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;BaseModal&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/atoms/BaseModal.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BaseModal&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Template&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;existence of the element&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;should exist 'modal' element&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wrapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;shallowMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BaseModal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[data-test='modal']&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()).&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://vuejs.org/v2/guide/components-registration.html"&gt;Global Registration of Components&lt;/a&gt;: There are components widely used, these are candidates to be registered globally so they can be referenced without importing them.
An easy way to accomplished this is creating a &lt;code&gt;_globals.js&lt;/code&gt; file and fill it in with:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Globally register all base components for convenience, because they&lt;/span&gt;
&lt;span class="c1"&gt;// will be used very frequently. Components are registered using the&lt;/span&gt;
&lt;span class="c1"&gt;// PascalCased version of their file name.&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// https://webpack.js.org/guides/dependency-management/#require-context&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;requireComponent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;// Look for files in the current directory&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./atoms&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Do not look in subdirectories&lt;/span&gt;
  &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// Only include .vue files&lt;/span&gt;
  &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[\w&lt;/span&gt;&lt;span class="sr"&gt;-&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;+&lt;/span&gt;&lt;span class="se"&gt;\.&lt;/span&gt;&lt;span class="sr"&gt;vue$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// For each matching file name...&lt;/span&gt;
&lt;span class="nx"&gt;requireComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the component config&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requireComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// Get the PascalCase version of the component name&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;componentName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fileName&lt;/span&gt;
    &lt;span class="c1"&gt;// Remove the "./" from the beginning&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^&lt;/span&gt;&lt;span class="se"&gt;\.\/&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;// Remove the file extension from the end&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\.\w&lt;/span&gt;&lt;span class="sr"&gt;+$/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;component&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;componentName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;componentConfig&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that, just import that file in &lt;em&gt;main.js&lt;/em&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/_globals&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Some other good practices can be found:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learnvue.co/2020/01/12-vuejs-best-practices-for-pro-developers/"&gt;Syntax and Logic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.telerik.com/blogs/10-good-practices-building-maintaining-large-vuejs-projects"&gt;Slots use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.bitsrc.io/4-best-practices-for-large-scale-vue-js-projects-9a533450bdb2"&gt;Large Scale Vue.js Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;As shown above, I had a long way during the last 18 months, I'm giving my two cents in here in the way I understood the concepts, and what I think were the best practices applied; maybe you could have a better way to do it, let's discuss in a thread below!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vue</category>
      <category>github</category>
    </item>
    <item>
      <title>Como eu migrei um projeto em PHP puro para Laravel</title>
      <author>Tadeu Barbosa</author>
      <pubDate>Sun, 13 Jun 2021 23:00:32 +0000</pubDate>
      <link>https://dev.to/tadeubarbosa/como-eu-migrei-um-projeto-em-php-puro-para-laravel-606</link>
      <guid>https://dev.to/tadeubarbosa/como-eu-migrei-um-projeto-em-php-puro-para-laravel-606</guid>
      <description>&lt;p&gt;&lt;em&gt;Photo by &lt;a href="https://www.pexels.com/@somyadinkar?utm_content=attributionCopyText&amp;amp;utm_medium=referral&amp;amp;utm_source=pexels"&gt;Somya Dinkar&lt;/a&gt; from [Pexels]&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bem, a primeira coisa é que Laravel é escrito em PHP, portanto as mudanças são mais na forma de organização ou estrutura do Laravel do que qualquer outra coisa.&lt;/p&gt;

&lt;p&gt;Programar é algo tão belo! Certo dia vi uma pergunta no twitter &lt;em&gt;mais ou menos assim&lt;/em&gt;: "você continuaria programando mesmo que isso não te rendesse grana?!". A minha resposta na hora foi: Com certeza! Conheci programação por volta de 2010--2011 no Ensino Médio, em um curso básico de HTML, no momento que percebi a grandeza disso tudo (e olha que era somente HTML), eu me apaixonei! ❤ &lt;/p&gt;

&lt;p&gt;Por ter uma certa curiosidade de como as coisas funcionam, sempre me dediquei a "criar" coisas que já existiam. No início mantinha uma fixação imensa por criar uma rede social do zero, inclusive quando finalizei o meu curso de HTML na escola, precisava criar uma página web demostrando os meus conhecimentos. A primeira coisa que me veio em mente foi criar uma rede social, vocês já devem imaginar que tentativa falha, não é mesmo? kk Sabia somente HTML, e bem básico, mas achei que poderia criar uma rede social. Acabei entregando três arquivos: pagina-inicial-vermelha.htm, pagina-inicial-verde.html, pagina-inicial-blue.html. Sim! Dentro de cada body eu coloquei o atributo: &lt;em&gt;bgcolor="blue"&lt;/em&gt;. Nem sei se existe esse atributo mais!&lt;/p&gt;

&lt;p&gt;Chega de falar de mim, vamos pro código!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LV_u_DK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANLO0xphqDazXXEj-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LV_u_DK0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/800/0%2ANLO0xphqDazXXEj-.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#motivos"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Motivos&lt;/strong&gt;
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Nem todo sistema precisa de um framework!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vamos deixar isso bem claro! A minha intenção aqui, principalmente se você é um iniciante, não é dizer que todo sistema que você for desenvolver vai precisar de um framework. Porém, contudo, todavia, há momentos em que utilizar um framework vai te poupar tempo. E, meus amigos: Tempo é dinheiro!&lt;/p&gt;

&lt;p&gt;Digamos que você e sua equipe criaram um framework próprio a uns anos atrás, ou até mesmo você chegou depois que já haviam criado tal código. E agora as coisas estão ficando tão complicadas que você passa horas tentando dar manutenção ou encaixar um feature nova nesse código antigo. Fizeram uma reunião e decidiram migrar todo o código para um framework bastante conhecido pelo mundo PHP: Laravel. E é aqui que esse post entra!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#vamos-partir-do%C2%A0in%C3%ADcio"&gt;
  &lt;/a&gt;
  Vamos partir do início
&lt;/h4&gt;

&lt;p&gt;A primeira coisa que você precisa fazer é baixar o &lt;a href="https://github.com/laravel/laravel"&gt;código do Laravel&lt;/a&gt;. Feito isso, copie todos os diretórios do seu projeto para esse novo. Fique atendo para diretórios e arquivos com o mesmo nome!&lt;/p&gt;

&lt;p&gt;Se, por exemplo, vocês utilizam o composer (se não, o trabalho vai ser bem maior), copie as configurações do seu projeto para o composer.json do laravel. &lt;/p&gt;

&lt;p&gt;Lembre-se das estruturas dos diretórios! Controllers dentro de: &lt;em&gt;app/Http/Controllers&lt;/em&gt;, das models: &lt;em&gt;app/Models&lt;/em&gt;. Utilize os comandos: &lt;em&gt;php artisan make:controller HomeController&lt;/em&gt; e &lt;em&gt;php artisan make:model NovoModel&lt;/em&gt; para gerar as novas classes. Uma coisa que vai te ajudar bastante nesse momento é o comando: "Substituir em arquivos". No PHP Storm: é &lt;em&gt;Ctrl + Shift + R&lt;/em&gt;, e vscode: &lt;em&gt;Ctrl + Shift + H&lt;/em&gt; (no Ubuntu, pelo menos).&lt;/p&gt;

&lt;p&gt;Ok, vamos para as views. Suponhamos que as suas views estejam todas organizadas e separadas em diretórios, e ainda mais, que utilizava alguma forma de template aonde o arquivo de template principal (aonde fica o html, body, navbar etc), está separado do conteúdo da página. Vai ser beeem mais fácil para fazer a migração! Crie um arquivo PHP com o seguinte conteúdo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;// pegue todos os arquivos .php dentro do diretório views&lt;/span&gt;
&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;glob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'path/views/*.php'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$files&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// altere a extensão de .php para .blade.php&lt;/span&gt;
  &lt;span class="nv"&gt;$newFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;preg_replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/\.php$/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'.blade.php'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$newFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;//&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;file_get_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// adicione um espaçamento de quatro linhas a cada início de linha&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"    "&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;array_unshift&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"@extends('layouts.app')&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"@section('content')"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;array_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"@endsection&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// adiciona dados do layout do laravel&lt;/span&gt;
  &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$newFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Com isso os arquivos das views estão configurados! Caso os seus arquivos estejam diferentes, você pode adaptar o script acima. Lembre-se de compartilhar nos comentários, com isso poderá ajudar a outras pessoas!&lt;/p&gt;

&lt;p&gt;Migramos os controllers e views, e agora talvez seja a hora mais chatinha: migrar o banco de dados! Pra criar os arquivos talvez você possa testar este código:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="nv"&gt;$dbname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'username'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PDO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mysql:host=localhost;dbname='&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ucwords'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Create&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Table"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' AND TABLE_SCHEMA='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetchAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;?php&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Database\Migrations\Migration&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Database\Schema\Blueprint&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Support\Facades\Schema;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"class &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; extends Migration&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;{\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    public function up()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        Schema::create('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;', function (Blueprint &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table) {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"            &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table-&amp;gt;id();&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DATA_TYPE'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="s1"&gt;'varchar'&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'string'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="s1"&gt;'int'&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="s1"&gt;'integer'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$columnName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'COLUMN_NAME'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"            &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table-&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$type&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$columnName&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;');&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"            &lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;table-&amp;gt;timestamp();&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        });&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    }&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    public function down()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        Schema::dropIfExists('&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;');&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y_m_d_His'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"database/migrations/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$date&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_create_&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_table.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Esse código vai gerar pelo menos a base de uma migration, você só precisa fazer as devidas modificações.&lt;/p&gt;

&lt;p&gt;Por fim, talvez você também precise gerar seeds:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="nv"&gt;$dbname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'dbname'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PDO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'mysql:host=localhost;dbname='&lt;/span&gt;&lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$password&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_SCHEMA='&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$dbname&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$tables&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ucwords'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;explode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'_'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="nv"&gt;$class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;Seeder"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$dbh&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;prepare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"SELECT * FROM &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;fetchAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="no"&gt;PDO&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FETCH_ASSOC&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;array_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
        &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$column&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;$key&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$key&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' =&amp;gt; '&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nv"&gt;$values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"            [&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$values&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;implode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;",&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="c1"&gt;//&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;lt;?php&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"namespace Database\Seeders;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Database\Seeder;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"use Illuminate\Support\Facades\DB;&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"class &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; extends Seeder&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;{\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    public function run()&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;    {\n"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        DB::table('clientes_tipos')-&amp;gt;insert([&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$columns&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"        ]);&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"    }&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="mf"&gt;.&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y_m_d_His'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nv"&gt;$filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"database/seeders/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nv"&gt;$class&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.php"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;file_put_contents&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$content&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$dbh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;É isso! Espero ter ajudado! Até a próxima!&lt;/p&gt;

</description>
      <category>php</category>
      <category>braziliandevs</category>
      <category>portugues</category>
    </item>
    <item>
      <title>WWDC 2021: State of the Union Recap</title>
      <author>Joseph Maurer</author>
      <pubDate>Sun, 13 Jun 2021 22:53:56 +0000</pubDate>
      <link>https://dev.to/mwrpwr/wwdc-2021-state-of-the-union-recap-1adc</link>
      <guid>https://dev.to/mwrpwr/wwdc-2021-state-of-the-union-recap-1adc</guid>
      <description>&lt;p&gt;
Here’s a quick recap of Apple’s State of the Union at WWDC (World Wide Developer Confrence 2021). You can find the &lt;a href="https://developer.apple.com/videos/play/wwdc2021/102/?time=2036"&gt;full video here&lt;/a&gt;.
&lt;/p&gt;


  
Your browser does not support the video tag.



&lt;h2&gt;XCode Build&lt;/h2&gt;

&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KB9YXBBO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0d2h1765otfujio9z7h.png" alt="alt_text" title="image_tooltip"&gt;

 

&lt;p&gt;
A new continuous integration and delivery service built right into Xcode and hosted in the cloud, Xcode Build is Apple’s take on simplifying the process of building an app while helping you focus on what’s important. It helps you offload your builds, test, and code signing for distribution. It publishes your result right back into Xcode’s report navigator so you never have to switch context out of where you are building your app. 
&lt;/p&gt;

&lt;p&gt;
One cool feature is that you can have the build notify you when it completes and publish it to your Slack or any other service. There is also a public API that you can dive into for grabbing information about your builds. I can see how building apps this way is way more integrated and convenient. This actually seems like a fun way to write tests for your app!
&lt;/p&gt;

&lt;p&gt;
Code reviews also look to make massive improvements on commenting and reviewing code. The new views allow you to select between multiple ways to see what code has changed, and even view comments as you are fixing any potential bugs. Anyone who does code reviews how confusing it can get when there are multiple revisions and files removed or added to a pull request. 
&lt;/p&gt;


&lt;h2&gt;Swift Concurrency Support&lt;/h2&gt;


&lt;p&gt;
Most developers and engineers are used to the idea of writing concurrent code as it’s such a vital part of making fast and responsive code. 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;a href="https://developer.apple.com/videos/play/wwdc2021-102/?time=1209"&gt;Concurrency enables your apps to perform multiple tasks at the same time, which helps your apps stay responsive to user input while doing work in the background, like a weather app fetching forecast data while the user selects a city.&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
The problem? Swift never had native support for concurrent code, so it was unnecessarily difficult to write good concurrent code. Apple’s new approach to this is &lt;strong&gt;Structured Concurrency&lt;/strong&gt;. Actors are an industry standard and are vital to safe concurrent programming. 
&lt;/p&gt;

&lt;blockquote&gt;
&lt;a href="https://developer.apple.com/videos/play/wwdc2021-102/?time=1483"&gt;Conceptually, an actor is an object that protects its own state by only providing mutually exclusive access. This completely eliminates concurrent access and the low-level data races that come with it. &lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Actors’ are now a first class citizen in Swift and have a much simpler declaration:
&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F3n6FJUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x29vjw5swqvo40hn01xd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F3n6FJUm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x29vjw5swqvo40hn01xd.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 

&lt;/p&gt;

&lt;p&gt;
Another benefit is MainActor, which lets you decorate a function to always run on the main thread. This is vital for API calls that are needed for the UI.
&lt;/p&gt;

&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--03djmYTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vket45ofwyu1gd9qunvw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--03djmYTR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vket45ofwyu1gd9qunvw.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;


&lt;h2&gt;Swift Playgrounds&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7X6GsG3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1usqhckjjdwl88fkn5r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7X6GsG3N--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v1usqhckjjdwl88fkn5r.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 
&lt;/p&gt;

&lt;p&gt;
This year, Swift playgrounds 4 allows you to work on your ideas wherever you go. It allows you to switch between Playgrounds and Xcode. Once you have created an app, you can even publish your app to TestFlight right from the Playgrounds app. 
&lt;/p&gt;


&lt;h2&gt;VR and AR Kits&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I9d55oxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l1bqcsnu0jfy4j1papb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I9d55oxi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4l1bqcsnu0jfy4j1papb.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;
 

&lt;/p&gt;

&lt;p&gt;
You can now add cool effects to your AR objects with Custom metal shaders and dynamic textures. You can see these effects in the Birthday Cake demo with confetti falling around the object.
&lt;/p&gt;


&lt;h2&gt;Metal Improvements&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v0bi6tKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp17f09ljn1edukc5r30.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v0bi6tKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dp17f09ljn1edukc5r30.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;
One thing that stood out to me as a Game Engineer is that you can now have more control over the display refresh rate. Especially if you are developing games that are going to run on the IPad Pro with ProMotion or on Macs that are connected to high end monitors, having control over the refresh rate can be useful for making your game look like it’s running smoothly!
&lt;/p&gt;

&lt;p&gt;
Game controller support is also easier to add now, with haptic support. You can add a new on screen controller with only a few lines of code. 
&lt;/p&gt;


&lt;h2&gt;Notifications&lt;/h2&gt;


&lt;p&gt;

&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RDKtFfRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkyhks52rdqbb2zrqcvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RDKtFfRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jkyhks52rdqbb2zrqcvh.png" alt="alt_text" title="image_tooltip"&gt;&lt;/a&gt;

&lt;/p&gt;

&lt;p&gt;
iOS is now changing how notifications work and at what level they are delivered. Focus allows the user to select what types of notifications are delivered. There are now 4 levels of notifications: Low, Active, Time Sensitive, and Urgent. Notifications summary allows users to get a brief overview of what was delivered with some marks of relevance. 
&lt;/p&gt;




&lt;p&gt;
There was lots more covered, but those are the highlights that stuck out to me. &lt;strong&gt;Let me know what you found interesting in the comments below!&lt;/strong&gt;
&lt;/p&gt;

</description>
      <category>swift</category>
      <category>wwdc</category>
      <category>news</category>
      <category>ios</category>
    </item>
    <item>
      <title>How Did I build My First React Package</title>
      <author>Ziad Adeela</author>
      <pubDate>Sun, 13 Jun 2021 21:17:17 +0000</pubDate>
      <link>https://dev.to/ziadadeela/how-did-i-build-my-first-react-package-3f3l</link>
      <guid>https://dev.to/ziadadeela/how-did-i-build-my-first-react-package-3f3l</guid>
      <description>&lt;h2&gt;
  &lt;a href="#motivation"&gt;
  &lt;/a&gt;
  Motivation
&lt;/h2&gt;

&lt;p&gt;There are a lot of use cases that require the concept of repetition or recurring. A basic example for that is recurring events.&lt;/p&gt;

&lt;p&gt;A highly customizable component that you can plug into your project to have the recurring logic in no time is quite needed for such cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#development-process"&gt;
  &lt;/a&gt;
  Development Process
&lt;/h2&gt;

&lt;p&gt;At first, I didn't have the full picture of how my component will look like, what will be the end result, what are the internal components, or how can I make it as customizable as possible. Since recurring logic is mostly used with calendar events, The first step I did is checking existing behavior in different well-known calendars such as Google Calendar and Outlook Calendar. After that, I was able to imagine the main parts of my component, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Start Date&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Frequency&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ending Condition&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;if it's all day or with Start and End Time.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#make-it-work-make-it-better-ideology"&gt;
  &lt;/a&gt;
  "Make it work, Make it better" Ideology
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#make-it-work"&gt;
  &lt;/a&gt;
  Make it work
&lt;/h4&gt;

&lt;p&gt;When I started the development process, I had one big react component that contains all the logic of the main parts I mentioned. I built the general structure from UI perspective with some stylings here and there until I got the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVtNLGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7caz239lwfq752x6fee0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVtNLGSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7caz239lwfq752x6fee0.png" alt="React Recurrence general structure."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The next step was defining my recurrence object and the type of each internal field. And here it came the blessings of typescript. At first, I had some difficulties dealing with it, but then, I realized how helpful it is.&lt;/p&gt;

&lt;p&gt;After that, I defined the click/change events for each input I had in the component in order to correctly fill the recurrence object fields.&lt;/p&gt;

&lt;p&gt;So I got a working component! (but really, not a one I can be proud of yet, nor a customizable one. 😏)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#make-it-better"&gt;
  &lt;/a&gt;
  Make it better
&lt;/h4&gt;

&lt;p&gt;The most challenging part during the component development is the continuous thoughts of how can I make it better. Making a component better is by making it cleaner as code along with a cleaner logical separation into sub-components.&lt;br&gt;
More importantly, make it as customizable as possible by thinking of other use cases that the consumers or the users of your component will face  while using it. Of course, adding some unit tests is another strength to make sure nothing breaks when any refactor is done in any part of the component.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Component Separation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following GIF sums up the process of separating the large component I started with, into  sub components. Each sub-component represents the main parts I mentioned earlier since each part is a separated logic and can live inside its own component.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JXwDrlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8uphi36p4df0hhzbhy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JXwDrlM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ws8uphi36p4df0hhzbhy.gif" alt="Internal Components"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://reactjs.org/docs/context.html"&gt;React Context&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After doing the components separation, I first used the tradition way in react for passing the data between the children which is using props. But then, I realized that the result was a tree of components and some props needed to be passed into deeper children. Here, React Context came into play.&lt;/p&gt;

&lt;p&gt;The first advantage I had from using Context is that the recurrence object is shared between the sub-components and no need to pass each field as a prop. &lt;/p&gt;

&lt;p&gt;Another advantage was giving the consumer the flexibility of structuring the sub-components according to their needs. As a result of this, the component can be used in either the default structure:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;
  &lt;span class="na"&gt;recurrence&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;recurrence&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRecurrenceChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Or in a custom one:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;
  &lt;span class="na"&gt;recurrence&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;recurrence&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
  &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;handleRecurrenceChange&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;
      &lt;span class="na"&gt;container&lt;/span&gt;
      &lt;span class="na"&gt;direction&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'column'&lt;/span&gt;
      &lt;span class="na"&gt;justify&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'center'&lt;/span&gt;
      &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'center'&lt;/span&gt;
      &lt;span class="na"&gt;spacing&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;StartDateSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FrequencySelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;EndingConditionSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt; &lt;span class="na"&gt;item&lt;/span&gt; &lt;span class="na"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;TimeSelector&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Recurrence&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;




&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Styling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://material-ui.com/styles/basics/"&gt;Material UI styling&lt;/a&gt; solution was the choice to build a dynamic UI for the component.&lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://storybook.js.org/"&gt;Storybook&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Storybook helped a lot in representing the different states of the recurrence component along with the subcomponents in an isolated way. &lt;/p&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Unit Tests Using &lt;a href="https://jestjs.io/docs/tutorial-react"&gt;Jest&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unit tests helped me a lot when I reached the refactor part to make my component better. I wanted to make sure that no change will affect the logic of the component. &lt;/p&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#useful-tools"&gt;
  &lt;/a&gt;
  Useful Tools
&lt;/h2&gt;

&lt;p&gt;The following tools made my life easier while developing the component and publishing it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/transitive-bullshit/create-react-library"&gt;create-react-library&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This package helps a lot when creating a new react library since it saves you from all the boilerplate code and the setup needed. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/sindresorhus/np"&gt;np&lt;/a&gt;&lt;br&gt;
This package makes your life easier when dealing with publishing and releasing your component to NPM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;A live demo for the component can be found &lt;a href="https://ziadadeela.github.io/react-recurrence/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  Github Repository
&lt;/h2&gt;

&lt;p&gt;Feel free to review the component to give any technical feedback or drop any suggestions on how to make it even more customizable. You can find it &lt;a href="https://github.com/ziadadeela/react-recurrence"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-help"&gt;
  &lt;/a&gt;
  Get Help
&lt;/h2&gt;

&lt;p&gt;A great source for getting help around the library or the tool you're using is its community. Most of the times you will find people to help you when you're stuck or to take their opinion in some cases to make sure you're following the best practice of the tool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.reactiflux.com/"&gt;Reactiflux&lt;/a&gt;&lt;/strong&gt; helped a lot in React, Context, and Jest for some of the cases I faced in react-recurrence. Same thing regarding &lt;a href="https://storybook.js.org/community"&gt;Storybook&lt;/a&gt; community.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>recurrence</category>
    </item>
  </channel>
</rss>
