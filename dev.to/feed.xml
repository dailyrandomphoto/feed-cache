<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What you missed at GitHub Universe, the latest feature announcements</title>
      <author>Michelle Mannering</author>
      <pubDate>Fri, 29 Oct 2021 02:40:27 +0000</pubDate>
      <link>https://dev.to/github/what-you-missed-at-github-universe-the-latest-feature-announcements-190l</link>
      <guid>https://dev.to/github/what-you-missed-at-github-universe-the-latest-feature-announcements-190l</guid>
      <description>&lt;p&gt;GitHub Universe has been our flagship event for announcing and launching new products. Since last year's GitHub Universe, we've shipped more than 20,000 improvements! That's a lot of cool new features for developers, open source communities, students, and enterprise teams.&lt;/p&gt;

&lt;p&gt;At this year's Universe, we highlighted some of these major features which have recently shipped, as well as launched new products, and announced new things coming.&lt;/p&gt;

&lt;p&gt;If you missed the stream (or were just too awed by Nat's amazing keynote), here's everything you missed from GitHub Universe 2021.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/etMvd9IKPH4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;To make things easy to follow, here's all the sweet new features, in the order they appeared in the keynote. See if you can spot each one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#codespaces"&gt;
  &lt;/a&gt;
  Codespaces
&lt;/h2&gt;

&lt;p&gt;Since launching &lt;a href="https://github.com/features/codespaces"&gt;Codespaces&lt;/a&gt;, people have loved this feature. Being able to create an entire developer environment from anywhere in the world, is just pure awesome. The biggest kicker for developers, is you can spin up a Codespace in seconds. No more waiting for dev computers, credentials, access, or authentication. You can code from anywhere, anytime.&lt;/p&gt;

&lt;p&gt;Codespaces now features &lt;strong&gt;REST API support&lt;/strong&gt; which is in public beta. There's also the new &lt;strong&gt;devcontainer feature composition&lt;/strong&gt;. This is available now in beta too.&lt;/p&gt;

&lt;p&gt;One of the newest additions to Codespaces is in the support for the &lt;strong&gt;GitHub CLI&lt;/strong&gt; directly from Codespaces. If you're yet to try out Codespaces, go and check this out. It's available for Team and Enterprise Cloud plans.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e0967PRy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FCtu4oJUcAMm3cG.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--HsXy4zaH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1093646089255702528/i-PRZsOj_normal.jpg" alt="Cory Wilkerson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Cory Wilkerson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @corywilkerson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🚢&lt;a href="https://twitter.com/github"&gt;@github&lt;/a&gt; Codespaces + cli. Codespaces from your home in the terminal. ssh and make something great! 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:36 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453385231264714756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453385231264714756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453385231264714756" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#copilot"&gt;
  &lt;/a&gt;
  Copilot
&lt;/h2&gt;

&lt;p&gt;Probably one of the most exciting things GitHub launched this year was GitHub Copilot. &lt;a href="https://copilot.github.com/"&gt;Copilot&lt;/a&gt; is your AI pair programmer who can suggest lines of code, or whole functions, in your editor.&lt;/p&gt;

&lt;p&gt;If you're yet to try out Copilot, keep an eye on your inbox. We just &lt;strong&gt;expanded the technical preview&lt;/strong&gt; to more GitHub users. There's also &lt;strong&gt;support for Neovim and JetBrains&lt;/strong&gt;. We're adding new languages too, so this is something you definitely want to keep an eye on.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hoi6vVm4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCt4FzqWUAcJrrV.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      GitHub Copilot Technical Preview is available now for developers on the &lt;a href="https://twitter.com/jetbrains"&gt;@jetbrains&lt;/a&gt; IntelliJ platform of editors including &lt;a href="https://twitter.com/intellijidea"&gt;@intellijidea&lt;/a&gt; and &lt;a href="https://twitter.com/pycharm"&gt;@pycharm&lt;/a&gt; &lt;a href="https://t.co/1FZjsv4NoJ"&gt;plugins.jetbrains.com/plugin/17718-g…&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:45 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453387348692119558" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453387348692119558" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453387348692119558" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#new-github-issues"&gt;
  &lt;/a&gt;
  New GitHub Issues
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/features/issues"&gt;new GitHub Issues&lt;/a&gt; is your ultimate tool for developer project planning and productivity. With the new Issues, you can create task lists, and break them down into more issues. The new project board functionality allows you to track relationships, add custom fields, and visualise projects the way you want.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/64xO030aneI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;At Universe, we announced on Day 1 that the new Issues would be &lt;strong&gt;expanding to public beta&lt;/strong&gt;. Now everyone can try out issue forms, task tracking, and new project workflows. We also announced cumulative flow diagram would be coming soon.&lt;/p&gt;

&lt;p&gt;So don't wait any longer. Jump in and start using the new GitHub Issues. If you'd like to give feedback on this feature, you can &lt;a href="https://github.com/github/feedback/discussions/categories/issues-feedback"&gt;do so over on the GitHub Discussions&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-enterprise-32"&gt;
  &lt;/a&gt;
  GitHub Enterprise 3.2
&lt;/h2&gt;

&lt;p&gt;If you're working for a company, you'll love the new GitHub Enterprise features. We just launched GitHub Enterprise 3.2 with over 70 new features!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ruby support for CodeQL&lt;/strong&gt; is now coming in public beta, and secret scanning is now available to all GitHub Enterprise users. There's also the new &lt;strong&gt;security center&lt;/strong&gt; we just launched in beta. This allows you to better manage your secrets, tokens, and credentials. Check out more &lt;a href="https://github.com/enterprise"&gt;about GitHub Enterprise on the website&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h2&gt;

&lt;p&gt;Developers love GitHub Actions, and there are now over 10,400 Actions on the &lt;a href="https://github.com/marketplace?type=actions"&gt;GitHub Marketplace&lt;/a&gt; 😮 The &lt;strong&gt;workflow visualiser&lt;/strong&gt; we launched earlier in the year, has helped developers better manage their workflows. You can also manage workflows better, with improvements to &lt;strong&gt;reusable workflows&lt;/strong&gt;, and a &lt;strong&gt;new auto-scaling functionality&lt;/strong&gt; for self-hosted runners.&lt;/p&gt;

&lt;p&gt;Now, there's also support for &lt;strong&gt;secure cloud deployment with OpenID Connect&lt;/strong&gt;. This is available in public beta.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-discussions"&gt;
  &lt;/a&gt;
  GitHub Discussions
&lt;/h2&gt;

&lt;p&gt;Communities have been loving GitHub Discussions. Now, GitHub Discussions is open to everyone. All communities can take advantage of &lt;strong&gt;labels&lt;/strong&gt;, and the new &lt;strong&gt;announcements&lt;/strong&gt; categories. Keep an eye on &lt;a href="https://docs.github.com/en/discussions"&gt;Discussions&lt;/a&gt;, as Discussion &lt;strong&gt;Polls&lt;/strong&gt; are coming, as well as &lt;strong&gt;insights&lt;/strong&gt; to track the health and growth of your community.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8ty3aTxfqRg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#releases-galore"&gt;
  &lt;/a&gt;
  Releases Galore
&lt;/h2&gt;

&lt;p&gt;One of the tough things about maintaining a project, is the release notes. Some projects don't bother with them, as they are a lot of work, while others projects forget to include fixes or enhancements. Now, you can &lt;strong&gt;auto-generate release notes&lt;/strong&gt;, making sure your community is up to date on the latest project changes.&lt;/p&gt;

&lt;p&gt;When you generate these notes, maintainers can &lt;strong&gt;credit their communities&lt;/strong&gt; with shout-outs for individual contributors. Releases Galore (or auto-generated release notes), is now available to everyone!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#papercuts"&gt;
  &lt;/a&gt;
  Papercuts
&lt;/h2&gt;

&lt;p&gt;There's a few smaller features which we launched throughout the year to help make the lives of developers easier. As Nat said "on their own, they're small. But, when you add them all up, they really make a big difference."&lt;/p&gt;

&lt;p&gt;Users can easily navigate large markdown files with a down drop &lt;strong&gt;table of contents&lt;/strong&gt;. There are also buttons on code blocks to quickly &lt;strong&gt;copy a chunk of code&lt;/strong&gt;. If you're viewing a raw file, you can &lt;strong&gt;copy raw contents&lt;/strong&gt; with the click of a button.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vWZOHsirqNY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you haven't tried out the new &lt;strong&gt;fetch&lt;/strong&gt; button yet, give this a shot. We released this earlier in the year and it's been a huge hit. I know I've had a much easier time fetching the upstream on my repos.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PR Auto-merge&lt;/strong&gt; was also added early in the year, so you can automatically merge a PR once all the checks are passed. A new feature coming soon is &lt;strong&gt;merge queue&lt;/strong&gt;. This will allow users to queue and batch PRs.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M6OshENu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/tweet_video_thumb/FCt9OAvVUAknYm4.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--F26Oc0ef--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1677873294/image_normal.jpg" alt="Nat Friedman profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Nat Friedman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @natfriedman
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Queue your PR to merge and let the queue worry about the rest. No more broken builds after merge. 🥳 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      16:15 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453394825269571591" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453394825269571591" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453394825269571591" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#command-palette"&gt;
  &lt;/a&gt;
  Command Palette
&lt;/h2&gt;

&lt;p&gt;We've made it even easier to navigate the GitHub web using your keyboard. The new command palette allows you to jump to an org, repo, file, issue, PR, Discussion, or execute commands. Now you don't have any reason to use the mouse! Next time you're on GitHub, hit CMD+K (for Mac users) or CTRL+K (for Windows users), to open up the command palette.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0pfSfoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FCt5pV9XsAIEQbP.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WtqGx4H6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1414990564408262661/r6YemvF9_normal.jpg" alt="GitHub profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        GitHub
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @github
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      You can now use the cmd-k / ctrl-k keyboard shortcut to navigate around GitHub without taking your hands off the keyboard. &lt;a href="https://t.co/H31sg6BdRl"&gt;githubuniverse.com&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      15:52 PM - 27 Oct 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1453389061478043652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1453389061478043652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1453389061478043652" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#github-universe"&gt;
  &lt;/a&gt;
  GitHub Universe
&lt;/h2&gt;

&lt;p&gt;Well that's it for GitHub Universe 2021. There's now over 73 million developers using GitHub, over 4 million orgs on GitHub, and over 200 million repos.&lt;/p&gt;

&lt;p&gt;We hope all these features create a seamless developer experience for you. As Nat said in his keynote closing, "the developer is at the center of everything we do [...] we believe deeply in the power of developers to create a better future with the software they build."&lt;/p&gt;

&lt;p&gt;He tells all developers, no matter where they are in their journey to "keep learning and keep building amazing things, we'll handle the rest." These features are designed for you, to go out and do amazing things. You can read more about them on the &lt;a href="https://github.blog/2021-10-27-everything-new-from-universe-2021/"&gt;GitHub blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you'd like to rewatch all the awesome-ness from GitHub Universe 2021, head to YouTube to view all the action from &lt;a href="https://youtu.be/t7owQr243JY"&gt;Day 1&lt;/a&gt; and &lt;a href="https://youtu.be/kMtlI01zJVk"&gt;Day 2&lt;/a&gt;. And as always, if you have feedback, you can leave your comments, suggestions, and ideas in the &lt;a href="https://github.com/github/feedback/discussions"&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>github</category>
      <category>product</category>
      <category>devops</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Discuss: When is the right stage to move from JavaScript to a JavaScript framework like React or Angular ?</title>
      <author>Cess</author>
      <pubDate>Fri, 29 Oct 2021 00:34:18 +0000</pubDate>
      <link>https://dev.to/cesscode/discuss-when-is-the-right-stage-to-move-from-javascript-to-a-javascript-framework-like-react-or-angular--22n2</link>
      <guid>https://dev.to/cesscode/discuss-when-is-the-right-stage-to-move-from-javascript-to-a-javascript-framework-like-react-or-angular--22n2</guid>
      <description>&lt;p&gt;Hello Everyone 👋🏾&lt;/p&gt;

&lt;p&gt;Quick question&lt;/p&gt;

&lt;p&gt;At what point do you get to when learning JavaScript and you say Yes I know enough now. Let me move to React or any other JavaScript framework ???&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>discuss</category>
      <category>programming</category>
    </item>
    <item>
      <title>Binary Data Transfer on Azure Functions via OpenAPI</title>
      <author>Justin Yoo</author>
      <pubDate>Fri, 29 Oct 2021 00:00:29 +0000</pubDate>
      <link>https://dev.to/azure/binary-data-transfer-on-azure-functions-via-openapi-5c0i</link>
      <guid>https://dev.to/azure/binary-data-transfer-on-azure-functions-via-openapi-5c0i</guid>
      <description>&lt;p&gt;Since the &lt;a href="https://www.nuget.org/packages/Microsoft.Azure.WebJobs.Extensions.OpenApi"&gt;latest version (0.9.0-preview)&lt;/a&gt; of the &lt;a href="https://aka.ms/azfunc-openapi"&gt;OpenAPI extension&lt;/a&gt; for &lt;a href="https://docs.microsoft.com/azure/azure-functions/functions-overview?WT.mc_id=dotnet-47576-juyoo"&gt;Azure Functions&lt;/a&gt; was released, it supports the byte array types. With this support, you can now define the binary data type like image files onto the OpenAPI document. Throughout this post, I'm going to discuss how to declare the binary data and transfer it through the Azure Functions OpenAPI extension.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You can download the sample app code from the GitHub repository below:&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/devkimchi"&gt;
        devkimchi
      &lt;/a&gt; / &lt;a href="https://github.com/devkimchi/azure-functions-binary-data-via-swagger-ui"&gt;
        azure-functions-binary-data-via-swagger-ui
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This provides a sample app to show how to handle binary data through Swagger UI on Azure Functions
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Azure Functions Binary Data Transfer via Swagger UI&lt;/h1&gt;
&lt;p&gt;This provides a sample app to show how to transfer binary data through Swagger UI on Azure Functions.&lt;/p&gt;
&lt;h2&gt;
Related Read&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;한국어: TBD&lt;/li&gt;
&lt;li&gt;English: TBD&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/devkimchi/azure-functions-binary-data-via-swagger-ui"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#binary-data-transfer-with-raw-textplain-endraw-content-type"&gt;
  &lt;/a&gt;
  Binary Data Transfer with &lt;code&gt;text/plain&lt;/code&gt; Content Type
&lt;/h2&gt;

&lt;p&gt;Let's look at the function below. It directly passes the based64 encoded string to Azure Function app through the request payload. It would be best to assume that the binary data has already been converted to a base64 string. The function defines the content type of &lt;code&gt;text/plain&lt;/code&gt; and data type of &lt;code&gt;byte[]&lt;/code&gt; &lt;em&gt;(line #7)&lt;/em&gt;. For the response payload, it defines the content type of &lt;code&gt;image/png&lt;/code&gt; and data type of &lt;code&gt;byte[]&lt;/code&gt; &lt;em&gt;(line #9)&lt;/em&gt;. As the actual data you are passing is the base64 encoded string, all you need to do is to convert the encoded string into byte array &lt;em&gt;(line #15-21)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The OpenAPI document about this part looks like below (omitted unrelated lines for brevity). First, the request payload is defined as &lt;code&gt;text/plain&lt;/code&gt;, with the data type of &lt;code&gt;string&lt;/code&gt; and format of &lt;code&gt;binary&lt;/code&gt; &lt;em&gt;(line #7-10)&lt;/em&gt;. Next, the response payload is also defined as &lt;code&gt;image/png&lt;/code&gt;, with the data type of string and format of &lt;code&gt;binary&lt;/code&gt; &lt;em&gt;(line #16-19)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Once you run the function app on your local machine, it looks like below. The image data is transferred correctly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kOAPkhQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-01.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kOAPkhQx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-01.png" alt="Byte Array"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#binary-data-transfer-with-raw-multipartformdata-endraw-content-type"&gt;
  &lt;/a&gt;
  Binary Data Transfer with &lt;code&gt;multipart/form-data&lt;/code&gt; Content Type
&lt;/h2&gt;

&lt;p&gt;Let's transfer both binary data and text data through the &lt;code&gt;multipart/form-data&lt;/code&gt; content type. This content type is the most typical way to transfer binary data through API. The request payload declares the content type of &lt;code&gt;multipart/form-data&lt;/code&gt; and data type of &lt;code&gt;MultiPartFormDataModel&lt;/code&gt; &lt;em&gt;(line #7)&lt;/em&gt;. &lt;code&gt;MultiPartFormDataModel&lt;/code&gt; is a DTO that contains the &lt;code&gt;Image&lt;/code&gt; property with the byte array type &lt;em&gt;(line #34)&lt;/em&gt;. When you send a POST request to the API endpoint, because you use the &lt;code&gt;multipart/form-data&lt;/code&gt; content type, the image data should be retrieved from &lt;code&gt;req.Form.Files[0]&lt;/code&gt;, and you need to convert it to the byte array &lt;em&gt;(line #15-23)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The OpenAPI document related to this part looks like below (omitted unrelated lines for brevity). The request payload has a reference to the object &lt;em&gt;(line #9)&lt;/em&gt;, and the object has a property of &lt;code&gt;image&lt;/code&gt;, with the data type of &lt;code&gt;string&lt;/code&gt; and format of &lt;code&gt;binary&lt;/code&gt; &lt;em&gt;(line #31-33)&lt;/em&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Run the function app and see how it's going. Your image data has been transferred successfully through the &lt;code&gt;multipart/form-data&lt;/code&gt; content type.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e9x506ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-02.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e9x506ni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://sa0blogs.blob.core.windows.net/devkimchi/2021/10/transmitting-binary-data-via-openapi-on-azure-functions-02.png" alt="Multi-Part Form-Data"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;So far, we've walked through how to define binary data through Azure Functions OpenAPI extension and run it on Swagger UI. Since this feature was one of the long-waited ones, I'm hoping everyone can make use of this feature in many places.&lt;/p&gt;

</description>
      <category>azure</category>
      <category>azurefunctions</category>
      <category>openapi</category>
      <category>binarydata</category>
    </item>
    <item>
      <title>How Next.js 12 improved Material-UI app compile by 8X</title>
      <author>Kyle Hoskins</author>
      <pubDate>Thu, 28 Oct 2021 23:53:38 +0000</pubDate>
      <link>https://dev.to/kyleapex/how-nextjs-12-improved-material-ui-app-compile-by-8x-47nf</link>
      <guid>https://dev.to/kyleapex/how-nextjs-12-improved-material-ui-app-compile-by-8x-47nf</guid>
      <description>&lt;p&gt;Some are calling &lt;a href="https://nextjs.org/blog/next-12"&gt;Next.js 12&lt;/a&gt; the "biggest step forward yet."   &lt;strong&gt;&lt;em&gt;Especially&lt;/em&gt;&lt;/strong&gt; Rust fans.  &lt;/p&gt;

&lt;p&gt;Next.js 12's new Rust compiler features ~3x faster refresh locally and ~5x faster builds, &lt;strong&gt;but that's not the feature that helped me most&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The unsung hero of the release for me was...&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compiled-module-count"&gt;
  &lt;/a&gt;
  Compiled module count!
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Next.js now outputs Fast Refresh timing in the console for both client and server compilation, including the number of modules and files compiled.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2XNnKrhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz8tabreo4snzf32yl2y.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2XNnKrhf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oz8tabreo4snzf32yl2y.jpg" alt="Image description" width="880" height="218"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10000-modules-faint-"&gt;
  &lt;/a&gt;
  10,000 Modules * faint *
&lt;/h2&gt;

&lt;p&gt;10,000 is great if we're talking about &lt;em&gt;Outliers&lt;/em&gt; 📚, but downright scary 😱 when we're talking about modules.&lt;/p&gt;

&lt;p&gt;My application uses &lt;a href="https://mui.com/"&gt;Material-UI&lt;/a&gt;, but is pretty small, so what happened?!&lt;/p&gt;

&lt;p&gt;Take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Menu from '@mui/icons-material/Menu';
import ChevronRight from '@mui/icons-material/ChevronRight';
import Save from '@mui/icons-material/Save';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;versus:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { Menu, ChevronRight, Save} from '@mui/icons-material';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The shorter one sure looks prettier, and VSCode even suggests importing from @mui/icons-material first, but don't fall for it!&lt;/p&gt;

&lt;p&gt;How does it impact the compile time?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// importing from @mui/icons-material
event - compiled successfully in 5.1s (10013 modules)

// importing from @mui/icons-material/ChevronRight
event - compiled successfully in 615ms (1024 modules)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As a first time Next.js user, I did not have a project to compare against to recognize that my compile times were slow until the new module count logging feature.&lt;/p&gt;

&lt;p&gt;If you use Material-UI, be sure to replace any instances of direct imports from &lt;code&gt;@mui/material&lt;/code&gt; or &lt;code&gt;@mui/styles&lt;/code&gt; as you will be compiling ALL the modules from the entire packages. Watch out for &lt;a href="https://basarat.gitbook.io/typescript/main-1/barrel"&gt;barrel files&lt;/a&gt; too!&lt;/p&gt;

&lt;p&gt;With 1,000 modules remaining, I still have some improvements to make, but I figured I'd share for any others who may experience the same shock!  &lt;strong&gt;How many modules does your Next.js application have?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;P.S. Thanks for reading my first DEV article!&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>javascript</category>
      <category>performance</category>
    </item>
    <item>
      <title>tsParticles 1.37.0 Released</title>
      <author>Matteo Bruni</author>
      <pubDate>Thu, 28 Oct 2021 23:45:28 +0000</pubDate>
      <link>https://dev.to/matteobruni/tsparticles-1370-released-5enp</link>
      <guid>https://dev.to/matteobruni/tsparticles-1370-released-5enp</guid>
      <description>&lt;h1&gt;
  &lt;a href="#tsparticles-1370-changelog"&gt;
  &lt;/a&gt;
  tsParticles 1.37.0 Changelog
&lt;/h1&gt;

&lt;p&gt;last post was 1.34.0 so every missing version will be detailed&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1341"&gt;
  &lt;/a&gt;
  1.34.1
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed themes and emitters interoperability, themes were not loaded correctly when the window is resized.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1350"&gt;
  &lt;/a&gt;
  1.35.0
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#internal-updates"&gt;
  &lt;/a&gt;
  Internal updates
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Split some polygon-mask files, nothing affecting output&lt;/li&gt;
&lt;li&gt;Updated code to work with TypeScript 4.4 (except angular and svelte for now)&lt;/li&gt;
&lt;li&gt;Moved some code out from particle constructor to updaters&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added roll mode to use only horizontal, vertical or both rolling&lt;/li&gt;
&lt;li&gt;Added auto options to theme default to change theme automatically&lt;/li&gt;
&lt;li&gt;Created a custom pathseg for now with some removed types in TypeScript 4.4, sent PR to the &lt;a href="https://github.com/progers/pathseg/pull/32"&gt;original project&lt;/a&gt; to add them in the polyfill. It's nomore required when using PolygonMask since is dynamically imported if needed&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1351"&gt;
  &lt;/a&gt;
  1.35.1
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed issue #2241 &lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1352"&gt;
  &lt;/a&gt;
  1.35.2
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added try catch in the pathseg polyfill to avoid crashes when server side (fixes #2264)&lt;/li&gt;
&lt;li&gt;Improved &lt;code&gt;isSsr&lt;/code&gt; utility&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#1353"&gt;
  &lt;/a&gt;
  1.35.3
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Removed &lt;code&gt;id&lt;/code&gt; constraint on &lt;code&gt;tsParticles.load/set&lt;/code&gt; methods, a random one will be generated if not specified.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;

&lt;p&gt;The following syntax is now valid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;tsParticles&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="cm"&gt;/* options */&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#1360"&gt;
  &lt;/a&gt;
  1.36.0
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Fixed missing file in cdnjs&lt;/li&gt;
&lt;li&gt;Fixed lazy loading of custom pathseg polyfill&lt;/li&gt;
&lt;li&gt;Fixed issue with responsive not refreshing when changing options &lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#1370"&gt;
  &lt;/a&gt;
  1.37.0
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#bug-fixes"&gt;
  &lt;/a&gt;
  Bug Fixes
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Refreshing all tsParticles instances when adding a plugin, fixes an issue with polygon mask and chrome&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#new-features"&gt;
  &lt;/a&gt;
  New Features
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Added responsive mode (canvas or screen) from dev branch, closes #2358&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#features-changed"&gt;
  &lt;/a&gt;
  Features Changed
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;FullScreen mode is now active by default with a z index of &lt;code&gt;0&lt;/code&gt;, and the interactivity mode is &lt;code&gt;"window"&lt;/code&gt; so everything still works as expected.&lt;/li&gt;
&lt;/ul&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/matteobruni"&gt;
        matteobruni
      &lt;/a&gt; / &lt;a href="https://github.com/matteobruni/tsparticles"&gt;
        tsparticles
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      tsParticles - Easily create highly customizable particles animations and use them as animated backgrounds for your website. Ready to use components available for React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Solid, Riot and Web Components.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://particles.js.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/58f22f0a546d5d7f34b4668dc842ac91b3a4cf9a5de72346559b7d15b13e587e/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f62616e6e6572322e706e67" alt="banner"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
tsParticles - TypeScript Particles&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;A lightweight TypeScript library for creating particles. Dependency free (*), browser ready and compatible with
React.js, Vue.js (2.x and 3.x), Angular, Svelte, jQuery, Preact, Inferno, Riot.js, Solid.js, and Web Components&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://openbase.com/js/tsparticles?utm_source=embedded&amp;amp;utm_medium=badge&amp;amp;utm_campaign=rate-badge" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/303db015a31c411aee869f57d55a44a53cd2f5380d0de5ee8abecb337a9452a6/68747470733a2f2f6261646765732e6f70656e626173652e636f6d2f6a732f726174696e672f74737061727469636c65732e737667" alt="Rate on Openbase"&gt;&lt;/a&gt; &lt;a href="https://www.jsdelivr.com/package/npm/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8c64088d02effc095dd7386325d216ce6d6bd46513a88ed2274e0ec4e6d876cf/68747470733a2f2f646174612e6a7364656c6976722e636f6d2f76312f7061636b6167652f6e706d2f74737061727469636c65732f62616467653f7374796c653d726f756e646564" alt="jsDelivr"&gt;&lt;/a&gt; &lt;a href="https://cdnjs.com/libraries/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e9e5a7a72f7cbc65eedd0e4d7431e4d4762c472ad4a66b6648a8e74c2b6be331/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f74737061727469636c6573" alt="Cdnjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e18baafcedd7efbbd13d6e2b1cf738c07ea898383c946e6e7b16400f813d70cb/68747470733a2f2f62616467652e667572792e696f2f6a732f74737061727469636c65732e737667" alt="npmjs"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bc16ec38506bbab6f6b729850ad28fd94a5643f1633b4356647033c3aa3fe102/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f74737061727469636c6573" alt="npm"&gt;&lt;/a&gt; &lt;a href="https://lerna.js.org/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3bc63f921dd60bac6d91aa900ef570c928b2aa4c2124ed23647e8fe9d2232853/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6d61696e7461696e6564253230776974682d6c65726e612d6363303066662e737667" alt="lerna"&gt;&lt;/a&gt; &lt;a href="https://www.codefactor.io/repository/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ce969771f1502f57861fe8ce7c787c209c50ef17c2e19f35cb1de0c960eba94a/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f6d617474656f6272756e692f74737061727469636c65732f6261646765" alt="CodeFactor"&gt;&lt;/a&gt; &lt;a href="https://www.codacy.com/manual/ar3s/tsparticles?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=matteobruni/tsparticles&amp;amp;utm_campaign=Badge_Grade" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8f96d4d0dccc9c7491f3ed07af70a808b0fd4d2e4d863a1f7bb9e51e10ae526e/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6239383361616633343631613463343862316532656563636531666631643734" alt="Codacy Badge"&gt;&lt;/a&gt; &lt;a href="https://gitpod.io/#https://github.com/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/daadb4894128d1e19b72d80236f5959f1f2b47f9fe081373f3246131f0189f6c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f476974706f642d72656164792d2d746f2d2d636f64652d626c75653f6c6f676f3d676974706f64" alt="Gitpod Ready-to-Code"&gt;&lt;/a&gt; &lt;a href="https://repl.it/github/matteobruni/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/64adf1bd83058aa64f848245f74bef77cd7cc2a3f36343ac44d6d0c39cc41bc3/68747470733a2f2f7265706c2e69742f62616467652f6769746875622f6d617474656f6272756e692f74737061727469636c6573" alt="Run on Repl.it"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://join.slack.com/t/tsparticles/shared_invite/enQtOTcxNTQxNjQ4NzkxLWE2MTZhZWExMWRmOWI5MTMxNjczOGE1Yjk0MjViYjdkYTUzODM3OTc5MGQ5MjFlODc4MzE0N2Q1OWQxZDc1YzI" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/ee2eed4d8159b570eef394a484f574d3bd038f6c64ad92ca0db286045486edcb/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f736c61636b2e706e67" alt="Slack"&gt;&lt;/a&gt; &lt;a href="https://discord.gg/hACwv45Hme" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/7c4f4ed816c2b77d7c2e15df3876cafa1cf89a896afb04633a1b6e28a81c5036/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f646973636f72642e706e67" alt="Discord"&gt;&lt;/a&gt; &lt;a href="https://t.me/tsparticles" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/309cad18f9a2090efdb147ac71064a969b826c3f4e9387f0a8d8e36e70133a80/68747470733a2f2f7061727469636c65732e6a732e6f72672f696d616765732f74656c656772616d2e706e67" alt="Telegram"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.producthunt.com/posts/tsparticles?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-tsparticles%22" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e86b7f51a0224618fe45aad99bff3e02ed8a5838691f244bf1df0e94454dafe2/68747470733a2f2f6170692e70726f6475637468756e742e636f6d2f776964676574732f656d6265642d696d6167652f76312f66656174757265642e7376673f706f73745f69643d313836313133267468656d653d6c69676874" alt="tsParticles Product Hunt"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Do-you-want-to-use-it-on-your-website"&gt;Use for your website&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Library-installation"&gt;Library installation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Official-components-for-some-of-the-most-used-frameworks"&gt;Official components for some of the most used frameworks&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Angular"&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Inferno"&gt;Inferno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#jQuery"&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Preact"&gt;Preact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#ReactJS"&gt;ReactJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Svelte"&gt;Svelte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-2x"&gt;VueJS 2.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#VueJS-3x"&gt;VueJS 3.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#WordPress"&gt;WordPress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Templates-and-Resources"&gt;Templates and Resources&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Demo--Generator"&gt;Demo / Generator&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Characters-as-particles"&gt;Characters as particles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Mouse-hover-connections"&gt;Mouse hover connections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Polygon-mask"&gt;Polygon mask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Animated-stars"&gt;Animated stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Nyan-cat-flying-on-scrolling-stars"&gt;Nyan cat flying on scrolling stars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Background-Mask-particles"&gt;Background Mask particles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#Migrating-from-Particlesjs"&gt;Migrating from Particles.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/matteobruni/tsparticles#PluginsCustomizations"&gt;Plugins/Customizations&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Do you want to use it on your website?&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Documentation and Development references &lt;a href="https://particles.js.org/docs/" rel="nofollow"&gt;here&lt;/a&gt; 📖&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This library is available on the two most popular CDNs and it's easy and ready to use, if you were using particles.js
it's even easier&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You'll find the
instructions &lt;a href="https://github.com/matteobruni/tsparticles/blob/main/README.md#library-installation"&gt;below&lt;/a&gt;, with all the
links you need, and &lt;em&gt;don't be scared by &lt;/em&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/matteobruni/tsparticles"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



</description>
      <category>showdev</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>How to do pull request reviews</title>
      <author>Mage</author>
      <pubDate>Thu, 28 Oct 2021 23:40:17 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-to-do-pull-request-reviews-mm6</link>
      <guid>https://dev.to/mage_ai/how-to-do-pull-request-reviews-mm6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Having a process, even a simple one, for creating, reviewing, and merging PRs (pull requests) for all of your repositories is a necessity when working with a team. It makes the software development process more efficient because all team members know the requirements for getting code pushed to production and they can collaborate effectively to make it happen.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Code repository hosting service&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Branching&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating the PR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reviewing the PR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Merging the PR&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#code-repository-hosting-service"&gt;
  &lt;/a&gt;
  Code repository hosting service
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#github-versus-bitbucket"&gt;
  &lt;/a&gt;
  Github versus Bitbucket
&lt;/h3&gt;

&lt;p&gt;Two of the most popular services for hosting teams’ code repositories are &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; and &lt;a href="https://bitbucket.org/product/"&gt;Bitbucket&lt;/a&gt;. Check the &lt;a href="https://github.com/features"&gt;features&lt;/a&gt; and &lt;a href="https://www.atlassian.com/software/bitbucket/pricing"&gt;pricing&lt;/a&gt; for Github and the features and pricing for Bitbucket to see which one is more suitable for your team. If your team is already immersed in the &lt;a href="https://www.atlassian.com/"&gt;Atlassian&lt;/a&gt; ecosystem (e.g. using &lt;a href="https://www.atlassian.com/software/jira"&gt;Jira&lt;/a&gt; for their project management software and &lt;a href="https://www.atlassian.com/software/confluence"&gt;Confluence&lt;/a&gt; for their documentation), it makes sense to also use Bitbucket because it integrates well with Jira.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-we-use-at-mage"&gt;
  &lt;/a&gt;
  What we use at Mage
&lt;/h3&gt;

&lt;p&gt;We use Github to host our repositories. It’s hands down the most popular hosting service used by developers and easy to onboard new team members since they are probably already familiar with it. The Github Team pricing plan is sufficient for a team of less than 10 developers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#branching"&gt;
  &lt;/a&gt;
  Branching
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Mage’s branch-naming convention (without brackets): &lt;code&gt;[initials_or_team_name] — [your_branch_title_snake_case]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prefix commit messages with your initials in brackets: &lt;code&gt;[initials]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git checkout -b [initials_or_team_name] — [your_branch_title_snake_case]
$ git checkout -b jk — new_sign_up_flow
&amp;lt; make some code changes &amp;gt;
$ git add .
$ git commit -m ‘[initials] &amp;lt;title of your changes&amp;gt;’
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#creating-the-pr"&gt;
  &lt;/a&gt;
  Creating the PR
&lt;/h2&gt;

&lt;p&gt;These are the requirements for team members creating new PRs:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Add at least one reviewer (adding multiple reviewers may not be allowed in Github’s &lt;a href="https://github.com/pricing"&gt;free tier&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Assign yourself and anyone else who worked on the PR as assignees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include a brief summary of what was done. This could be bullet points.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include screenshots of the new features if applicable (e.g. adding a feature to the UI on the frontend).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Include sample API request payloads if applicable. It will be easier for the reviewer to check that the payload is formed correctly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mention any tests that were added or performed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prefix the title of the PR with your initials (e.g. &lt;code&gt;[jk]&lt;/code&gt;) so that the initials appear in the commit message in the main branch’s commit history after the current branch is merged.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#reviewing-the-pr"&gt;
  &lt;/a&gt;
  Reviewing the PR
&lt;/h2&gt;

&lt;p&gt;The reviewer goes through the changes and makes any comments as needed. There may also be some non-blocking comments (e.g. minor comments that don’t require any fixes) that the assignee should be aware of but don’t require further action. Then the assignee addresses all of the comments and informs the reviewer that the PR is ready for a follow-up review. Once the PR is ready to be merged to the &lt;code&gt;main&lt;/code&gt; branch, the reviewer approves the PR.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LJ-WoIRR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/27m05cp9yu75lmxi6yro.gif" alt="Image description" width="396" height="300"&gt;&lt;em&gt;Ready to ship that code. (Source: Giphy)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#merging-the-pr"&gt;
  &lt;/a&gt;
  Merging the PR
&lt;/h2&gt;

&lt;p&gt;An approval from a reviewer is required before being able to merge the PR. Github can be configured so that an assignee cannot actually merge the PR without that approval (the merge button will be disabled).&lt;/p&gt;

&lt;p&gt;Before merging the PR to the main branch, there should be no conflicts with it, and all tests as part of the &lt;a href="https://www.mage.ai/blog/cdci-automating-build-and-deploy-process"&gt;CI/CD pipeline&lt;/a&gt; should be passing on the current branch. We’ve written a separate &lt;a href="https://www.mage.ai/blog/cdci-automating-build-and-deploy-process"&gt;blog post&lt;/a&gt; on how we set up our CI/CD pipeline.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/about-merge-methods-on-github"&gt;3 ways&lt;/a&gt; to merge a branch in Github:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Merge commit — All commits from the current branch are added to the base branch, and the PR is merged using the &lt;code&gt;— no-ff&lt;/code&gt; &lt;a href="https://git-scm.com/docs/git-merge#_fast_forward_merge"&gt;option&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Squash and merge — The PR’s commits are squashed into a single commit, and the PR is merged into the base branch using the &lt;a href="https://git-scm.com/docs/git-merge#_fast_forward_merge"&gt;fast-forward option&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rebase and merge — All commits from the current branch are added onto the base branch individually, and the PR is merged using the &lt;a href="https://git-scm.com/docs/git-merge#_fast_forward_merge"&gt;fast-forward option&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We use the “squash and merge” method for merging the current branch into the &lt;code&gt;main&lt;/code&gt; branch. This can be configured to be required in the Github repository &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/configuring-commit-squashing-for-pull-requests"&gt;settings&lt;/a&gt;. We prefer to squash commits because it keeps the &lt;code&gt;main&lt;/code&gt; branch’s commit history cleaner and easier to read.&lt;/p&gt;

&lt;p&gt;After the current branch is merged into &lt;code&gt;main&lt;/code&gt;, delete the current branch. This can be done automatically in &lt;a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-the-automatic-deletion-of-branches"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>pr</category>
      <category>pullrequest</category>
      <category>github</category>
      <category>bitbucket</category>
    </item>
    <item>
      <title>🎬Awesome CSS Button Hover Effects Using HTML &amp; CSS✨
</title>
      <author>Robson Muniz</author>
      <pubDate>Thu, 28 Oct 2021 22:49:23 +0000</pubDate>
      <link>https://dev.to/robsonmuniz16/awesome-css-button-hover-effects-using-html-css-52p8</link>
      <guid>https://dev.to/robsonmuniz16/awesome-css-button-hover-effects-using-html-css-52p8</guid>
      <description>&lt;p&gt;Lets create from from scratch, step-by-step an “Awesome CSS Button Hover Effects Using HTML &amp;amp; CSS” using just HTML and CSS!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/IjQEn7g5mdQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>List of Emmet keyboard shortcuts for quickly generating HTML</title>
      <author>Kingsley Ubah</author>
      <pubDate>Thu, 28 Oct 2021 22:12:54 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/list-of-emmet-keyboard-shortcuts-for-quickly-generating-html-38ll</link>
      <guid>https://dev.to/ubahthebuilder/list-of-emmet-keyboard-shortcuts-for-quickly-generating-html-38ll</guid>
      <description>&lt;p&gt;Like many others, I started my coding journey with Notepad. Few days ago, I tried building a basic HTML page using my NotePad text editor. It took me over 10 minutes to get everything set up.&lt;/p&gt;

&lt;p&gt;This made me realize just how useful Emmet is. Emmet is arguably one of the best extensions for web developers, productivity-wise.&lt;/p&gt;

&lt;p&gt;Though I am not quite sure of NotePad, other popular code editors like VSCode and Atom all have their own Emmet plugins which can be installed from respective marketplaces.&lt;/p&gt;

&lt;p&gt;With the Emmet plugin installed on your text editor , you can quickly generate HTML code by using a couple of predefined keyboard shortcuts, saving you a lot of time in development.&lt;/p&gt;

&lt;p&gt;You can generate a huge tree of HTML markup with along with their attributes on the fly.  Emmet uses conventional CSS selectors to structure HTML and define attributes.&lt;/p&gt;

&lt;p&gt;Below are some of my go-to shortcuts for quickly generating HTML.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#generate-boilerplate-for-html"&gt;
  &lt;/a&gt;
  Generate boilerplate for HTML
&lt;/h3&gt;

&lt;p&gt;Key: &lt;code&gt;!&lt;/code&gt;+&lt;code&gt;tab&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;Imagine if you had to type out the boilerplate markup for every HTML document you created. That's an exhausting task.&lt;/p&gt;

&lt;p&gt;With Emmet, you can create the structure of your document with just two keys:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OyulXsn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635348970058/IDWGvbAr4X.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OyulXsn9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635348970058/IDWGvbAr4X.gif" alt="Generate HTML boilerplate" width="600" height="312"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-opening-and-closing-tags-with-some-key-attributes"&gt;
  &lt;/a&gt;
  Create opening and closing tags (with some key attributes)
&lt;/h3&gt;

&lt;p&gt;Key: &lt;code&gt;&amp;lt;tagname&amp;gt;&lt;/code&gt; + &lt;code&gt;tab&lt;/code&gt; or &lt;code&gt;enter&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can simultaneously create the opening and closing tags of any HTML element. &lt;/p&gt;

&lt;p&gt;In addition, Emmet abbreviations automatically expands a list of related tags (with their attributes)  as you start typing the tag name:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eOYRT7fX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412612882/10W37gaUW.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eOYRT7fX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412612882/10W37gaUW.gif" alt="Emmet abbreviation" width="600" height="363"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-html-tag-with-two-or-more-of-the-same-attributes"&gt;
  &lt;/a&gt;
  Create a HTML tag with two or more of the same attributes
&lt;/h3&gt;

&lt;p&gt;You can specify two values to the same HTML property. For example, you can set two class names on the same element using the class CSS selector (.), like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PQLxQavw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413452002/yhC6o97KkO.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PQLxQavw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413452002/yhC6o97KkO.gif" alt="Same class names" width="600" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-a-html-element-with-different-attribute-types"&gt;
  &lt;/a&gt;
  Create a HTML element with different attribute types
&lt;/h3&gt;

&lt;p&gt;You can specify two different types of attributes on the same tag. For example, you can specify a class attribute and an id attribute on a &lt;code&gt;div&lt;/code&gt; tag by combining &lt;code&gt;.classname&lt;/code&gt; + &lt;code&gt;#id-name&lt;/code&gt; , like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x3lsyP0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412807030/13AwnmHUY.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x3lsyP0A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635412807030/13AwnmHUY.gif" alt="HTML element with different attributes" width="600" height="297"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-nested-tags"&gt;
  &lt;/a&gt;
  Create nested tags
&lt;/h3&gt;

&lt;p&gt;You can create a tree of nested tags with Emmet. To nest a tag, simply precede the child with the greater than symbol (&amp;gt;):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PCB5bSRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413353822/Upe6tzA3u.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PCB5bSRD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413353822/Upe6tzA3u.gif" alt="simplenesting.gif" width="586" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#nest-different-tags-with-different-classnames"&gt;
  &lt;/a&gt;
  Nest different tags with different classnames
&lt;/h3&gt;

&lt;p&gt;You cannot just nest the same kind of element with same attribute, but also nest different tags with different attributes. In the second markup, we nest an image with an &lt;code&gt;id&lt;/code&gt; inside of a &lt;code&gt;div&lt;/code&gt; with a &lt;code&gt;class&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yfxo_CKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413662637/8c65Jnc6a.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yfxo_CKR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413662637/8c65Jnc6a.gif" alt="diff attributes" width="600" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiply-children-html-tags"&gt;
  &lt;/a&gt;
  Multiply children HTML tags
&lt;/h3&gt;

&lt;p&gt;You can multiply a specific type of tag to a specified number, using the multiplication symbol (*). For example, we can create multiple list items inside of an unordered list:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I4t_ljaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414079927/h4HR5p1s7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I4t_ljaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414079927/h4HR5p1s7.gif" alt="multiply children tags" width="470" height="302"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-autoincrementing-attribute-value"&gt;
  &lt;/a&gt;
  Create auto-incrementing attribute value
&lt;/h3&gt;

&lt;p&gt;Another awesome thing we can do with Emmet is to auto-increment an attribute on a list of HTML children tags:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A3WqBmvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414348298/8Ps3A9Way.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A3WqBmvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414348298/8Ps3A9Way.gif" alt="Auto increment atributes" width="558" height="338"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#complex-nesting-of-html-tags"&gt;
  &lt;/a&gt;
  Complex nesting of HTML tags
&lt;/h3&gt;

&lt;p&gt;You can create a complex nesting structure in just a single line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hz1O-cS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413924643/fBfWna_Ge.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hz1O-cS---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635413924643/fBfWna_Ge.gif" alt="complex nesting" width="600" height="350"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-sibling-elements-on-same-level"&gt;
  &lt;/a&gt;
  Create sibling elements (on same level)
&lt;/h3&gt;

&lt;p&gt;You can create two or more sibling HTML tags (adjacent to each other) using the plus symbol (+):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nHYpnUcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414509018/X-oKiGjd2.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nHYpnUcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635414509018/X-oKiGjd2.gif" alt="sibling elements" width="476" height="231"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;The Emmet plug-in is an indispensable tool for web developers. The tool helps you create simple and complex HTML markup structure with a couple of pre-defined keyboard shortcuts.&lt;/p&gt;

&lt;p&gt;Did I miss out any keyboard shortcut? Please let me know in the comments.&lt;/p&gt;

</description>
      <category>html</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>October: Forem Twitch Events Roundup 👾</title>
      <author>Christina Gorton</author>
      <pubDate>Thu, 28 Oct 2021 20:26:59 +0000</pubDate>
      <link>https://dev.to/devteam/october-forem-twitch-events-roundup-4em9</link>
      <guid>https://dev.to/devteam/october-forem-twitch-events-roundup-4em9</guid>
      <description>&lt;p&gt;In October, Nick Taylor and I kicked off Hacktoberfest. We were also joined by 4 awesome guests throughout the month who taught us about GitHub actions, Terraform, DivOps, Framer Motion and more! This is a round up of all the wonderful guests who joined us.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dev-hacktoberfest-kickoff"&gt;
  &lt;/a&gt;
  DEV Hacktoberfest Kick-off
&lt;/h2&gt;

&lt;p&gt;If you are interested in contributing to open source, Nick and I chatted about &lt;a href="https://github.com/forem/forem/issues"&gt;open issues&lt;/a&gt; in Forem, how to get started contributing, and how you can use GitPod for your development environment. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/8w1AXyIWiks"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-brian-douglas"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Brian Douglas
&lt;/h2&gt;

&lt;p&gt;Brian Douglas , Director of Developer Advocacy at GitHub, joined us to talk about Open Sauced and the GitHub features it leverages, GitHub Actions and packages, project tables, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/d1KCS6C4Rus"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to Follow Brian:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/saucedopen"&gt;Open Sauced&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/bdougieYO"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bdougie.live/"&gt;Personal Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-learn-terraform-with-andrew-brown"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday: Learn Terraform with Andrew Brown
&lt;/h2&gt;

&lt;p&gt;Andrew Brown taught us how to use Terraform with AWS. We talked about resources, providers, modules, and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wHWzxGD_cRk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;For Andrew's full Terraform course check out their article/video on &lt;a href="https://www.freecodecamp.org/news/hashicorp-terraform-associate-certification-study-course-pass-the-exam-with-this-free-12-hour-course/"&gt;FreeCodeCamp&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Andrew:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/andrewbrown"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/andrew-wc-brown/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/andrewbrown"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-jonathan-creamer"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Jonathan Creamer
&lt;/h2&gt;

&lt;p&gt;Jonathan Creamer, Senior Engineer at Microsoft, joined us to chat about mono repos, npm workspaces, DivOps and more.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Waw_SZPT_VI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Jonathan:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jcreamer898"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jonathancreamer.com/announcing-div-ops/"&gt;DivOps Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#walkthrough-wednesday-with-will-johnson"&gt;
  &lt;/a&gt;
  Walkthrough Wednesday with Will Johnson
&lt;/h2&gt;

&lt;p&gt;Will Johnson joined us to chat about DevRel, Auth0, Framer Motion, content creation, their new course, and RenderATL .&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wZdYhsLqdLE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Places to follow Will:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/willjohnsonio"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://motion.williamjohnson.dev/"&gt;Framer Motion Course&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks to all our viewers who joined the streams and chatted with us this month! &lt;/p&gt;

&lt;p&gt;Be sure to follow the &lt;a href="https://www.twitch.tv/thepracticaldev"&gt;ThePracticalDev Twitch&lt;/a&gt; channel to be notified when future streams begin and check out all the great guests we have joining us every Wednesday this month. &lt;/p&gt;

&lt;p&gt;Be sure to join us next week as we chat with &lt;a href="https://twitter.com/5t3ph"&gt;Stephanie Eckles&lt;/a&gt; about CSS, Front-end development and more. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We will be winding down streams toward the end of the year as we take vacations and enjoy the holidays. But we will be back at the beginning of 2022!&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>opensource</category>
      <category>meta</category>
      <category>twitch</category>
    </item>
    <item>
      <title>Desplegando Bot de Telegram a AWS ECS con AWS Copilot [paso a paso] para principiantes</title>
      <author>Christian Prado Ciokler</author>
      <pubDate>Thu, 28 Oct 2021 20:18:47 +0000</pubDate>
      <link>https://dev.to/chrisciokler/desplegando-bot-de-telegram-a-aws-ecs-con-aws-copilot-paso-a-paso-para-principiantes-2lld</link>
      <guid>https://dev.to/chrisciokler/desplegando-bot-de-telegram-a-aws-ecs-con-aws-copilot-paso-a-paso-para-principiantes-2lld</guid>
      <description>&lt;p&gt;Copilot es una herramienta joven para crear e implementar servicios en contenedores sin manejar todos los problemas de configuración de ECS, EC2 y Fargate. Tal vez haya una mejor manera de implementar este tipo de proyecto, pero esta es una mas, quizás a alguien le resulte de útil.&lt;/p&gt;

&lt;p&gt;🙏 Espero que les sea de ayuda 👍 este articulo, así que vamos al grano. 🚀&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tabla-de-contenido"&gt;
  &lt;/a&gt;
  Tabla de contenido &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#stack"&gt;El Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#node"&gt;Instalando Node&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#aws"&gt;Instalando AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#copilot"&gt;Instalando Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#docker"&gt;Instalando Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#project"&gt;Configurando el proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bot"&gt;Creando el bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#coding"&gt;Escribiendo código&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#testing"&gt;Probando el código&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dockerfile"&gt;Configurando dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy"&gt;Desplegando a ECS con Copilot Cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#refactoring"&gt;Refactorizando y actualizando&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusions"&gt;The End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#el-stack-pointup"&gt;
  &lt;/a&gt;
  El Stack &lt;a href="#table"&gt;☝️&lt;/a&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Para este proyecto vamos a utilizar las siguientes herramientas, no se preocupen si no saben cómo utilizarlas, le dejo los enlaces de la documentación a continuación. De todos modos, esta es una guía paso a paso hasta el final.&lt;/p&gt;

&lt;p&gt;OS: Windows -debe funcionar con otros sistemas-&lt;br&gt;
Node &lt;a href="https://nodejs.org/es/docs/"&gt;docs&lt;/a&gt; &lt;a href="https://nodejs.org/es/download/"&gt;Instalación&lt;/a&gt;&lt;br&gt;
AWS CLI v2 &lt;a href="https://docs.aws.amazon.com/cli/index.html"&gt;docs&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;Instalación&lt;/a&gt;&lt;br&gt;
Copilot Cli &lt;a href="https://aws.github.io/copilot-cli/docs/overview/"&gt;docs&lt;/a&gt; &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;Instalación&lt;/a&gt;&lt;br&gt;
Docker &lt;a href="https://docs.docker.com/"&gt;docs&lt;/a&gt; &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Instalación&lt;/a&gt;&lt;br&gt;
Telegraf &lt;a href="https://telegraf.js.org/"&gt;docs&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/telegraf"&gt;Instalación&lt;/a&gt;&lt;br&gt;
Binance API &lt;a href="https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md"&gt;docs&lt;/a&gt;&lt;br&gt;
Axios &lt;a href="https://axios-http.com/docs/intro"&gt;docs&lt;/a&gt;&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-node-pointup"&gt;
  &lt;/a&gt;
  Instalando Node &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Primero, instalamos Node, no hay mucho que decir al respecto, solo sigan este enlace &lt;a href="https://nodejs.org/es/download/"&gt;aquí&lt;/a&gt; para descargar Node y el instalador los guiará a través del proceso. En el momento en que se crea esta publicación, estamos usando la versión 16.11.0.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-aws-cli-pointup"&gt;
  &lt;/a&gt;
  Instalando AWS CLI &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;En primer lugar, debemos tener una cuenta de AWS, por lo que si no la tienen pueden crear una &lt;a href="https://aws.amazon.com/resources/create-account/"&gt;aquí&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Una vez creada la cuenta instalamos &lt;a href="https://docs.aws.amazon.com/es_es/cli/latest/userguide/install-cliv2.html"&gt;AWS CLI v2&lt;/a&gt; y revisamos si funciona con el comando &lt;strong&gt;aws help&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Con todo en orden, el siguiente paso es configurar las credenciales de AWS. Entonces necesitamos crear claves de acceso para un usuario de IAM.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Inicie sesión en la Consola de administración de AWS y abra la consola de IAM &lt;a href="https://console.aws.amazon.com/iam/"&gt;aquí&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En el panel de navegación, escoge &lt;strong&gt;Users&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Elija el nombre del usuario cuyas claves de acceso desea crear y luego selecciona &lt;strong&gt;Security credentials&lt;/strong&gt; .&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;En la sección &lt;strong&gt;Access keys&lt;/strong&gt; , selecciona &lt;strong&gt;Create access key&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para ver el nuevo par de claves de acceso, elija &lt;strong&gt;Show&lt;/strong&gt; . No tendrá acceso a la clave secreta nuevamente después de que se cierre este cuadro de diálogo. Sus credenciales se verán así:&lt;br&gt;
Access key ID: AKIAIOSFODNN7EXAMPLE&lt;br&gt;
Secret access key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Para descargar el par de claves, selecciona &lt;strong&gt;Download .csv file&lt;/strong&gt;. Guarde las llaves en un lugar seguro. No tendrá acceso a la clave secreta nuevamente después de que se cierre este cuadro de diálogo.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mantenga las claves confidenciales para proteger su cuenta de AWS y nunca las envíe por correo electrónico. No las comparta fuera de su organización, incluso si una consulta parece provenir de AWS o Amazon.com. Nadie que represente legítimamente a Amazon jamás le pedirá su clave secreta.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Después de descargar el archivo .csv, elija &lt;strong&gt;Close&lt;/strong&gt;. Cuando crea una clave de acceso, el par de claves está activo de forma predeterminada y puede usar el par de inmediato.&lt;br&gt;
Para agregar las credenciales a la AWS CLI escribimos el comando &lt;strong&gt;aws configure --profile myprofilename&lt;/strong&gt; en la terminal y seguimos los pasos.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Access Key ID [None]: AKIAI44QH8DHBEXAMPLE &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AWS Secret Access Key [None]: je7MtGbClwBF/EXAMPLEKEY &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default region name [None]: us-east-1 &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Default output format [None]: json&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Eso es todo, ¡haz configurado con éxito AWS CLI!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Instalando Copilot Cli  &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Las instrucciones para la instalación están &lt;a href="https://aws.github.io/copilot-cli/docs/getting-started/install/"&gt;aquí&lt;/a&gt;, una vez que haya terminado escriba &lt;strong&gt;copilot --help&lt;/strong&gt; en su terminal si todo funciona como se supone,! Felicidades, tu pc es más inteligente que la mía, si tuviste un error no te preocupes yo tuve el mismo problema. Así es como puede solucionarlo.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Recuerde esta solución fue probada en el sistema operativo Windows.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Busque los archivos instalados y elimínelos, copilot.exe, copilot.asc y ecs-cli.asc.&lt;/li&gt;
&lt;li&gt;Vuelva a instalarlos usando la terminal como administrador pero en esta carpeta.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.exe' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\copilot.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe.asc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Invoke-WebRequest -OutFile 'C:\Program Files\Amazon\Copilot\ecs-cli.asc' https://github.com/aws/copilot-cli/releases/latest/download/copilot-windows.exe&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Presione &lt;strong&gt;Win + R&lt;/strong&gt; y escriba esto &lt;strong&gt;rundll32.exe sysdm.cpl, EditEnvironmentVariables&lt;/strong&gt;, se abrirá su panel de variables de entorno.&lt;/li&gt;
&lt;li&gt;Vaya a las variables del sistema, seleccione path y haga clic en editar, agregue una nueva ruta &lt;strong&gt;C:\Program Files\Amazon\Copilot&lt;/strong&gt; o la ruta donde está el archivo copilot.exe.&lt;/li&gt;
&lt;li&gt;Guarde los cambios y reinicie.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Escribe el comando &lt;strong&gt;copilot --help&lt;/strong&gt; en tu terminal y debería funcionar.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#instalando-docker-pointup"&gt;
  &lt;/a&gt;
  Instalando Docker &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Descargue Docker &lt;a href="https://www.docker.com/products/docker-desktop"&gt;aquí&lt;/a&gt; y siga las instrucciones.&lt;/p&gt;

&lt;p&gt;Antes de instalar el backend de Docker Desktop WSL 2, debe completar los siguientes pasos:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Instale Windows 10, versión 1903 o superior, o Windows 11.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Habilite la función WSL 2 en Windows. Para obtener instrucciones detalladas, consulte &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install"&gt;la documentación de Microsoft&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Descargue e instale &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#step-4---download-the-linux-kernel-update%20-package"&gt;el paquete de actualización del kernel de Linux&lt;/a&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#configurando-el-proyecto-pointup"&gt;
  &lt;/a&gt;
  Configurando el proyecto &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Crea una carpeta y dale un nombre de tu elección, el mío será crypto-bot-app, abre tu carpeta en tu IDE y escribe &lt;strong&gt;npm init -y&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Agrega los paquetes. Escribe en la terminal &lt;strong&gt;npm i telegraf axios&lt;/strong&gt;&lt;br&gt;
¡¡¡Todo listo!!!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#creando-el-bot-pointup"&gt;
  &lt;/a&gt;
  Creando el bot &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abra su aplicación de Telegram y busque el &lt;a href="https://t.me/botfather"&gt;BotFather&lt;/a&gt; e inicie el bot.&lt;/li&gt;
&lt;li&gt;Escribe el comando /newbot y dale un nombre, el mío será crypto-bot y el nombre de usuario crptobot&lt;/li&gt;
&lt;li&gt;Debería recibir un token como este 2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4, guárdelo para más tarde.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;¡Creaste tu primer bot !! ¡¡Felicitaciones !!, ahora vamos a agregarle código.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#escribiendo-c%C3%B3digo-pointup"&gt;
  &lt;/a&gt;
  Escribiendo código &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Cree un archivo index.js en la carpeta del proyecto donde vamos a poner este código.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="c1"&gt;// START-----------------------------------------------&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// COMMANDS===============================================================&lt;/span&gt;
&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#probando-el-c%C3%B3digo-pointup"&gt;
  &lt;/a&gt;
  Probando el código &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Antes de correr el bot, agreguemos el siguiente fragmento de código a nuestro package.json.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt; &lt;/span&gt; &lt;span class="err"&gt;  &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;start&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;node index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;//here&lt;/span&gt;
&lt;span class="err"&gt;  &lt;/span&gt;  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;  &lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora ejecute el comando &lt;strong&gt;npm start&lt;/strong&gt;, vaya a telegram, abra su bot y escriba &lt;strong&gt;/start&lt;/strong&gt; o &lt;strong&gt;/price btc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Una vez que reciba la respuesta esperada, podemos continuar este viaje.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#configurando-dockerfile-pointup"&gt;
  &lt;/a&gt;
  Configurando dockerfile &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Crea un archivo en el directorio de su proyecto y asígnele el nombre &lt;strong&gt;Dockerfile&lt;/strong&gt;, agregue este código de configuración.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM node:16.9.1

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 80

CMD ["npm","start"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Además, cree un archivo con el nombre .dockerignore y agregue este:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;copilot
node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#desplegando-a-ecs-con-copilot-cli-pointup"&gt;
  &lt;/a&gt;
  Desplegando a ECS con Copilot Cli &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ahora que tenemos el dockerfile configurado correctamente, vamos a subir el bot en ECS para que funcione 24 horas al día, 7 días a la semana.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Escriba el comando &lt;strong&gt;copilot init&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Nombre de la aplicación, crypto-bot-app.&lt;/li&gt;
&lt;li&gt;Elegimos la carga de trabajo, en mi caso Backend Service.&lt;/li&gt;
&lt;li&gt;Nombre el servicio de backend como bot-main-service.&lt;/li&gt;
&lt;li&gt;Despliegue la aplicación con el comando &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;




&lt;h3&gt;
  &lt;a href="#refactorizando-y-actualizando-pointup"&gt;
  &lt;/a&gt;
  Refactorizando y actualizando &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;En este punto, podemos hacer una refactorización para optimizar nuestro código. Primero, crearemos una carpeta "src" con un archivo javascript llamado "bot-functions.js" y agregaremos este código.&lt;/p&gt;

&lt;p&gt;bot-functions.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hi &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;first_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I still under development but you can use me to get the latest price of a cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`For example to know the price of an specific crypto write the command /price and the symbol of the cryptocurrency`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/price btc`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/price &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.binance.com/api/v3/ticker/price?symbol=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;USDT`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;price&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; USDT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Some error occurred in your request, please try again&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;luego vaya a index.js y realice algunos cambios.&lt;/p&gt;

&lt;p&gt;index.js&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;telegraf&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./src/bot-functions.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Telegraf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2098237194:AAH9QoFokuBOn0IqES0IGJdJ_AR-tySMOX4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//your token&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;command&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Price&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PRICE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;functions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getCryptocurrencyPrice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;launch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ahora probamos que todo está funcionando correctamente, agregamos los cambios con el comando &lt;strong&gt;copilot app deploy&lt;/strong&gt;.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#the-end-pointup"&gt;
  &lt;/a&gt;
  The End &lt;a href="#table"&gt;☝️&lt;/a&gt;&lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Ten en cuenta que este es un proyecto de desarrollo con fines educativos, en el mundo real debe almacenar tokens e información importante en variables del entorno, y todas las buenas prácticas que el trabajo exige. Si te gusto, dale un pulgar arriba: +1: y compártelo.&lt;/p&gt;

&lt;p&gt;hasta la próxima publicación ...&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Pentest/networking project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Thu, 28 Oct 2021 19:58:56 +0000</pubDate>
      <link>https://dev.to/medpaf/pentestnetworking-project-22ha</link>
      <guid>https://dev.to/medpaf/pentestnetworking-project-22ha</guid>
      <description>&lt;p&gt;MedSec is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;/p&gt;

&lt;p&gt;Currently, this script can perform a good variety of tasks such as ifconfig, ping, traceroute, port scans (including SYN, TCP, UDP, ACK, comprehensive scan, host discovery (scan for up devices on a local network), MAC address detection (get MAC address of a host IP on a local network), banner grabbing, DNS checks (with geolocation information), WHOIS, subdomain enumeration, vulnerability reconnaissance, packet sniffing, MAC spoofing, IP spoofing, SYN flooding, deauth attack and brute-force attack (beta).&lt;/p&gt;

&lt;p&gt;Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;/p&gt;

&lt;p&gt;If you want to become a contributor, make a pull request or issue.&lt;/p&gt;

&lt;p&gt;Waiting for your feedback. Kudos&lt;/p&gt;

&lt;p&gt;Link to the repository: &lt;a href="https://github.com/medpaf/medsec"&gt;https://github.com/medpaf/medsec&lt;/a&gt;&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>python</category>
      <category>cybersecurity</category>
      <category>security</category>
    </item>
    <item>
      <title>JavaScript References</title>
      <author>Dubymar Tollinchi</author>
      <pubDate>Thu, 28 Oct 2021 19:36:42 +0000</pubDate>
      <link>https://dev.to/dubymarjtr/javascript-references-1k7g</link>
      <guid>https://dev.to/dubymarjtr/javascript-references-1k7g</guid>
      <description>&lt;p&gt;A few years back when I was studying Electronic Engineering, one of the requisites was Programming I, II, and III. &lt;strong&gt;C++&lt;/strong&gt; was the first programming language I learned, and I must say it was the reason I chose my current career (I realized I hated dealing with hardware). One of my professors was an old lady that used to teach in the classroom writing code on the board, instead of using a computer. Although I thought it was a waste of time, writing things down several times helped me understand the core concepts. &lt;/p&gt;

&lt;p&gt;I remember a class when she explained &lt;strong&gt;references&lt;/strong&gt;, and how every piece of data has a place in memory. At first, it was quite difficult to understand, but finally, she used the word "&lt;strong&gt;pointer&lt;/strong&gt;". Ok, I know what a pointer is and I can picture it (kind of like an arrow, I will say), now what? Well, let's say we have a variable &lt;em&gt;named&lt;/em&gt; &lt;code&gt;myFavCar&lt;/code&gt; that stores a &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;"Ferrari"&lt;/code&gt;. This piece of data is stored in someplace in the computer's memory, and it can be accessed by using its name, which is &lt;strong&gt;pointing&lt;/strong&gt; to that place in memory. So, whenever we want to display the value of a variable, the function &lt;code&gt;console.log&lt;/code&gt; uses the variable name as an argument and gets the data from where is stored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFavCar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ferrari&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFavCar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints "Ferrari"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primitives-vs-objects"&gt;
  &lt;/a&gt;
  Primitives vs. Objects
&lt;/h2&gt;

&lt;p&gt;If we want to reassign that value to "Lamborghini" instead, we should start talking about &lt;em&gt;immutability&lt;/em&gt;, and how primitives (&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Null&lt;/code&gt;, and &lt;code&gt;Undefined&lt;/code&gt;) and &lt;strong&gt;immutable&lt;/strong&gt; and how &lt;code&gt;Objects&lt;/code&gt; (pretty much everything else in JS) &lt;em&gt;can&lt;/em&gt; be modified. Since we are using a &lt;code&gt;String&lt;/code&gt; variable, is not like Lamborghini will override &lt;del&gt;Ferrari&lt;/del&gt;. We can't modify a &lt;code&gt;String&lt;/code&gt;, so what is going to happen is that myFavCar now will be pointing to &lt;strong&gt;another&lt;/strong&gt; place in memory where this new value is stored.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;myFavCar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ferrari&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="nx"&gt;myFavCar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lamborghini&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFavCar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints "Lamborghini"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes a lot of sense when I think about String methods returning a new String instead of modifying the current String value. That's why if we want to keep that new value, we have to store it in a new variable (&lt;em&gt;aka&lt;/em&gt;, pointer to a new place in memory).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;there&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;text2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints "Hi there"&lt;/span&gt;

&lt;span class="c1"&gt;// this does not modify text1 or text2 values&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-does-mutation-work"&gt;
  &lt;/a&gt;
  How does mutation work?
&lt;/h3&gt;

&lt;p&gt;A &lt;strong&gt;mutation&lt;/strong&gt; is something that we want to avoid at all costs, and that means making sure none of our functions change their arguments or anything outside of them. This kind of function is called &lt;strong&gt;pure function&lt;/strong&gt; (I learned that today!). Whenever we pass an object as an argument for a function, that function can modify the object that's outside of the scope. A way to avoid this kind of mutation is to use the spread operator (&lt;code&gt;...&lt;/code&gt;) and save a copy of the object and modify and return that copy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;dob&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2/13/1987&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;address&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;123 Park Ave&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="na"&gt;subscriptionAct&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;updateInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// create a variable that stores a copy of the object&lt;/span&gt;
   &lt;span class="c1"&gt;// this will be a NEW object&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;customerUpdated&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// modifies the copy&lt;/span&gt;
   &lt;span class="nx"&gt;customerUpdated&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscriptionAct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;customerUpdated&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// the function will return a new object&lt;/span&gt;
&lt;span class="c1"&gt;// we save it in a variable&lt;/span&gt;
&lt;span class="nx"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;updateInfo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Without the spread operator, &lt;code&gt;customerUpdated&lt;/code&gt; will point to the customer object. So pretty much we will have customer and customerUpdated pointing at the &lt;strong&gt;same&lt;/strong&gt; object. This is called &lt;em&gt;copy by reference&lt;/em&gt;, and it means that if we modify either one, it will affect both of them. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Copy by value&lt;/em&gt; can be done with primitives, since they can't be modified, they just create a new place in memory to store that new value (even if it's a copy).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;b&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints "hello"&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// prints "b"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case, &lt;code&gt;a&lt;/code&gt; copies the value that's stored in &lt;code&gt;b&lt;/code&gt;, which in this case is a String. After reassigning &lt;code&gt;b&lt;/code&gt; a new value, we can notice that &lt;code&gt;a&lt;/code&gt; didn't change. That's because it copied just the value, but does not reference that address where &lt;code&gt;b&lt;/code&gt; is pointing at.&lt;/p&gt;

&lt;p&gt;Understanding these concepts was difficult and very confusing at the beginning, but after a few years of programming in different languages, I was able to understand, being a crucial part of data structures and algorithms. I used this &lt;a href="https://daveceddia.com/javascript-references/"&gt;article&lt;/a&gt; as a reference for writing this post, which helped me understand these concepts even more. &lt;/p&gt;

</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
