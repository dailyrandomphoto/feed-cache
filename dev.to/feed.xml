<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Requests and Connections like LinkedIn - How to Implement These Model Relationships in a Rails App</title>
      <author>nicklevenson</author>
      <pubDate>Thu, 03 Jun 2021 20:15:25 +0000</pubDate>
      <link>https://dev.to/nicklevenson/requests-and-connections-like-linkedin-how-to-implement-these-model-relationships-in-a-rails-app-59on</link>
      <guid>https://dev.to/nicklevenson/requests-and-connections-like-linkedin-how-to-implement-these-model-relationships-in-a-rails-app-59on</guid>
      <description>&lt;p&gt;As part of a large project I have been working on, I wanted to allow users to request and accept connections from other users. Very similar to the way LinkedIn works, users could ask others to get connected and be connected with those users if the request was accepted. This proved to be a challenging, but fun exercise in model relationships in a Rails application. There are plenty of other ways to do this, but this is what worked well for me. &lt;/p&gt;

&lt;p&gt;First and foremost we needed a User class. We also know we would need a class for a Request, as well as a class for a Connection - it's important to keep these as individual models in order to separate concerns. We will be customizing our associations with these models using the Rails association methods of :class_name and :foreign_key. These are important because they allow us to customize our relationships in a way for this whole thing to work. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request Model&lt;/strong&gt;&lt;br&gt;
First let's build out our request model since that functionality will precede the connection model. This model is relatively simple and will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Request &amp;lt; ApplicationRecord
  belongs_to :requestor, class_name: :User
  belongs_to :receiver, class_name: :User
end

create_table "requests", force: :cascade do |t|
    t.integer "requestor_id"
    t.integer "receiver_id"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically, we are telling Rails that the Request class belongs to TWO users - one is the requestor and one is the receiver of the request. This is why in our migration we specify their ids as we would with any belongs_to relationship. The only difference is that the User classes that this request belongs to are ALIASED to specify who the requestor is and receiver (as opposed to saying belongs_to :user - this would only allow us to have the request belong to a singular user with no alias). &lt;/p&gt;

&lt;p&gt;Now, in our User model we can specify this Request association. We essentially want to tell Rails that a User has many Requests, but with the caveat that this User is labelled as a Receiver or a Requestor. Similar to before, we will add alias names here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; has_many :connection_requests_as_requestor,
    foreign_key: :requestor_id,
    class_name: :Request

  has_many :connection_requests_as_receiver, 
    foreign_key: :receiver_id, 
    class_name: :Request
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Like before, we are specifying two has_many relationships where the User has many Requests as a Receiver, and has many Requests as a Requestor. We need to tell Rails what foreign key to associate this User with in the Request instance, which is why we specify &lt;code&gt;foreign_key&lt;/code&gt; in each of these associations. We could then call something like &lt;code&gt;user.connection_requests_as_requestor&lt;/code&gt; which would return to us a list of requests where the requestor is the user. That request would also contain the id of whoever the receiver was.&lt;/p&gt;

&lt;p&gt;We could then write two instance methods on the User class to gather incoming connection requests or pending (outgoing) connection requests. These would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def incoming_pending_requests
    User.where(id: self.connection_requests_as_receiver.map{|request|request.requestor_id})
  end

  def outgoing_pending_requests
    User.where(id: self.connection_requests_as_receiver.map{|request|request.receiver_id})
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The incoming_pending_requests methods will return a list of Users who have requested to connect with the current user. The outgoing_pending_requests method will return a list of users that the current user has requested to connect with. You can imagine what a method to request a connection would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def request_connection(other_user_id)
  Request.create(requestor_id: self.id, receiver_id: other_user_id)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Connections&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now that we have our requests figured out. Let's move on to the connections model. This model functions very similarly to the Request model in that we will be using Alias names and foreign keys to allow the Connection instance to belong_to two distinct users.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Connection &amp;lt; ApplicationRecord
  belongs_to :connection_a, class_name: :User
  belongs_to :connection_b, class_name: :User
end

create_table "connections", force: :cascade do |t|
  t.integer "connection_a_id"
  t.integer "connection_b_id"
  t.datetime "created_at", precision: 6, null: false
  t.datetime "updated_at", precision: 6, null: false
end

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Almost identical to the Request class, out Connection model holds the foreign key to two separate Users (connection_a and connection_b) that it belongs to. That way, in our User class we can specify:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class User &amp;lt; ApplicationRecord
...
  has_many :a_connected_users, foreign_key: :connection_a_id, class_name: :Connection
  has_many :b_connected_users, foreign_key: :connection_b_id, class_name: :Connection

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means that a User has many connected Users where the user is connection a, and there are many connected Users where the user is connection b. Calling either of these association on the user will return an Active Record association containing a list of Connections where the current user is either a or b. So we should now write a method to accept an incoming request.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  def accept_incoming_connection(requesting_user_id)
    request = Request.find_by(requestor_id: requesting_user_id, receiver_id: self.id)
    requested_user = User.find(requesting_user_id)
    if request
      Connection.find_or_create_by(connection_a_id: self.id, connection_b_id: requesting_user_id)
      request.destroy
    end
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Basically we are finding a request based on whoever has requested to connect with this current user. If there is a request, we then create a connection between the two users and destroy the request. It's that simple! Then to get a list of a user's connected users we write the method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; def connected_users
    connections = Connection.where("connection_a_id = ? OR connection_b_id = ?", self.id, self.id)
    User.where(id: connections.map{|c| c.connection_a_id != self.id ? c.connection_a_id : c.connection_b_id})
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we are getting a list of connections where the connection_a_id or connection_b_id is the current user. We then get an AR association of users who were included in these connections and who are not the current user. &lt;/p&gt;

&lt;p&gt;And that's all! We have successfully implemented a Connected Users relationship similar to something like LinkedIn. I hope you've enjoyed this article and feel free to leave comments or questions. &lt;/p&gt;

</description>
      <category>ruby</category>
      <category>rails</category>
      <category>database</category>
      <category>associations</category>
    </item>
    <item>
      <title>What No One Told You About Z-Index</title>
      <author>Rithik Samanthula</author>
      <pubDate>Thu, 03 Jun 2021 19:33:06 +0000</pubDate>
      <link>https://dev.to/code2rithik/what-no-one-told-you-about-z-index-30hj</link>
      <guid>https://dev.to/code2rithik/what-no-one-told-you-about-z-index-30hj</guid>
      <description>&lt;p&gt;The problem with z-index is that very few people understand how it really works. It’s not that hard to understand, but it if you’ve never taken the time to read its specification, there are almost certainly really important aspects that you’re completely unaware of.&lt;/p&gt;

&lt;p&gt;Don’t believe me? Well, see if you can solve this problem:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;In the following HTML you have three &lt;code&gt;div&lt;/code&gt; elements, and each &lt;code&gt;div&lt;/code&gt;, contains a single &lt;code&gt;span&lt;/code&gt; element. &lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;span&lt;/code&gt; is given a background color — red, green, and blue respectively. &lt;/p&gt;

&lt;p&gt;Each &lt;code&gt;span&lt;/code&gt; is also positioned absolutely near the top left of the document, slightly overlapping the other &lt;code&gt;span&lt;/code&gt; elements so you can see which ones are stacked in front of which. &lt;/p&gt;

&lt;p&gt;The first &lt;code&gt;span&lt;/code&gt; has a z-index value of 1, while the other two do not have any z-index set.&lt;/p&gt;

&lt;p&gt;Here’s what the HTML and basic CSS look like. I’ve also included a visual demo (via Codepen) with the full CSS below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Red&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Green&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blue&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.green&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.blue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.green&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.blue&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;blue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/code2rithik/embed/oNZqZPw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Here’s the challenge: try to see if you can make the red &lt;code&gt;span&lt;/code&gt; element stack behind the blue and green &lt;code&gt;span&lt;/code&gt; elements without breaking any of the following rules:&lt;/p&gt;


&lt;li&gt;Do not alter the HTML markup in any way.&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Do not add/change the z-index property of any element&lt;/li&gt;
&lt;br&gt;
&lt;li&gt;Do not add/change the position property of any element&lt;/li&gt; &lt;br&gt;

&lt;p&gt;To see if you can figure it out, click the edit on Codepen link above and play around with it for a bit. If you’ve succeeded, it should look like the example below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVS5ofmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcqc6rh26vyhhjpj0q7o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVS5ofmW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fcqc6rh26vyhhjpj0q7o.png" alt="Z-Index Solution"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;The solution is to add an opacity value less than 1 to the first &lt;/p&gt; (the parent of the red &lt;span&gt;). Here is the CSS that was added to the image above:&lt;br&gt;&lt;br&gt;

&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nd"&gt;:first-child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;.99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;If you’re scratching your head right now in shock and disbelief that opacity would have any effect on which elements are stacked in front of which, welcome to the club. &lt;/p&gt;

&lt;p&gt;I was similarly shocked when I first stumbled upon this issue.&lt;/p&gt;

&lt;p&gt;Hopefully the rest of this article will make things a little more clear.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#stacking-order"&gt;
  &lt;/a&gt;
  Stacking Order
&lt;/h2&gt;

&lt;p&gt;Z-index seems so simple: elements with a higher z-index are stacked in front of elements with a lower z-index, right? &lt;/p&gt;

&lt;p&gt;Well, actually, no. This is part of the problem with z-index. It appears so simple, so most developers don’t take the time to read the rules, so that seems to be the problem.&lt;/p&gt;

&lt;p&gt;Every element in an HTML document can be either in front of or behind every other element in the document. &lt;/p&gt;

&lt;p&gt;This is known as the stacking order. The rules to determine this order are pretty clearly defined in the spec, but as I’ve already stated, they’re not fully understood by most developers.&lt;/p&gt;

&lt;p&gt;When the z-index and position properties aren’t involved, the rules are pretty simple: basically, the stacking order is the same as the order of appearance in the HTML. &lt;/p&gt;

&lt;p&gt;(OK, it’s actually a little more complicated than that, but as long as you’re not using negative margins to overlap inline elements, you probably won’t encounter the edge cases.)&lt;/p&gt;

&lt;p&gt;When z-index is involved, things get a little trickier. At first it’s natural to assume elements with higher z-index values are in front of elements with lower z-index values, and any element with a z-index is in front of any element without a z-index, but it’s not that simple. &lt;/p&gt;

&lt;p&gt;First of all, z-index only works on positioned elements. If you try to set a z-index on an element with no position specified, it will do nothing. &lt;/p&gt;

&lt;p&gt;Secondly, z-index values can create stacking contexts, and now suddenly what seemed simple just got a lot more complicated.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#stacking-order-within-the-same-stacking-context"&gt;
  &lt;/a&gt;
  Stacking Order Within the Same Stacking Context
&lt;/h2&gt;

&lt;p&gt;Here are the basic rules to determine stacking order within a single stacking context (from back to front):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The stacking context’s root element.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Positioned elements (and their children) with negative z-index values (higher values are stacked in front of lower values; elements with the same value are stacked according to appearance in the HTML)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Non-positioned elements (ordered by appearance in the HTML)&lt;br&gt;
Positioned elements (and their children) with a z-index value of auto (ordered by appearance in the HTML)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Positioned elements (and their children) with positive z-index values (higher values are stacked in front of lower values; elements with the same value are stacked according to appearance in the HTML)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Getting back to the original problem, I’ve recreated the HTML structure adding comments within each tag indicating its place in the stacking order. This order is assuming the original CSS.&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 1 --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 6 --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 2 --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 4 --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 3 --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 5 --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;When we add the opacity rule to the first &lt;code&gt;div&lt;/code&gt;, the stacking order changes like so:&lt;br&gt;
&lt;/p&gt;

&lt;pre class="highlight html"&gt;&lt;code&gt; &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 1 --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 1.1 --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 2 --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"green"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 4 --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 3 --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"blue"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="c"&gt;&amp;lt;!-- 5 --&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;span.red used to be 6 but it’s changed to 1.1. I’ve used dot notation to show that a new stacking context was formed and span.red is now the first element within that new context.&lt;/p&gt;

&lt;p&gt;Hopefully it’s now a little more clear why the red box moved behind the other boxes. &lt;/p&gt;

&lt;p&gt;The original example contained only two stacking contexts, the root one and the one formed on span.red. When we added opacity to the parent element of span.red we formed a third stacking context and, as a result, the z-index value on span.red only applied within that new context. &lt;/p&gt;

&lt;p&gt;Because the first &lt;code&gt;div&lt;/code&gt; (the one we applied opacity to) and its sibling elements do not have position or z-index values set, their stacking order is determined by their source order in the HTML, which means the first &lt;code&gt;div&lt;/code&gt;, and all the elements contained within its stacking context, are rendered behind the second and third &lt;code&gt;div&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;Thank You and....&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#keep-coding-yall"&gt;
  &lt;/a&gt;
  Keep Coding Y'All 👨🏻‍💻
&lt;/h1&gt;

&lt;/span&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Random OSS Projects - Mongita, Charts.css, NocoDB, BlitzJS</title>
      <author>Sm0ke</author>
      <pubDate>Thu, 03 Jun 2021 19:29:30 +0000</pubDate>
      <link>https://dev.to/sm0ke/random-oss-projects-mongita-charts-css-nocodb-blitzjs-al2</link>
      <guid>https://dev.to/sm0ke/random-oss-projects-mongita-charts-css-nocodb-blitzjs-al2</guid>
      <description>&lt;p&gt;Hello Coders, &lt;/p&gt;

&lt;p&gt;From time to time, unrelated to my daily work, I just browse different platforms or Github for nice and innovative projects. All projects mentioned by this article are &lt;strong&gt;open-source&lt;/strong&gt;, actively supported with at least one innovative element (IMO). &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; - Content provided by &lt;strong&gt;&lt;a href="https://appseed.us/"&gt;App Generator&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://chartscss.org/"&gt;Charts.css&lt;/a&gt; - CSS visualization framework (no JS)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/scottrogowski/mongita"&gt;Mongita&lt;/a&gt; - lightweight embedded document database&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://blitzjs.com/"&gt;BlitzJS&lt;/a&gt; - MVC React Framework built on top of NextJS&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.nocodb.com/"&gt;NocoDB&lt;/a&gt; - turns any database into a smart spreadsheet&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#charts-css"&gt;
  &lt;/a&gt;
  Charts CSS
&lt;/h2&gt;

&lt;p&gt;Charts.css is a modern CSS framework. It uses CSS utility classes to style HTML elements as charts. The nice part of this library is that no JS is required to render the charts. All the information is edited in the HTML and the library showcase the chart using only CSS. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://chartscss.org/"&gt;Charts.css&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://chartscss.org/"&gt;Bar Chart Sample&lt;/a&gt; - official docs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5g1IIQ6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5nexvw2b636qf0zhi5u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5g1IIQ6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5nexvw2b636qf0zhi5u.png" alt="Open-source product - Charts.css"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongita"&gt;
  &lt;/a&gt;
  Mongita
&lt;/h2&gt;

&lt;p&gt;Mongita is a lightweight embedded document database that implements a commonly-used subset of the MongoDB/PyMongo interface. Mongita differs from MongoDB in that instead of being a server, Mongita is a self-contained Python library. Mongita can be configured to store its documents either on disk or in memory.&lt;/p&gt;

&lt;p&gt;According to the benchmark published on project README, Mongita scores better than MongoDB in all metrics: &lt;code&gt;bulk insert&lt;/code&gt;, &lt;code&gt;get all docs&lt;/code&gt;, &lt;code&gt;get by ID.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/scottrogowski/mongita"&gt;Mongita&lt;/a&gt; - product repo
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qfD4NTAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqe6hi5o7xi3qxcq1b6x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qfD4NTAa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oqe6hi5o7xi3qxcq1b6x.png" alt="Mongita vs MongoDB Benchmark"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blitz-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://blitzjs.com/"&gt;Blitz JS&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;As mentioned in the HOMEpage, &lt;em&gt;Blitz is a batteries-included framework that's inspired by Ruby on Rails, is built on Next.js, and features a "Zero-API" data layer abstraction that eliminates the need for REST/GraphQL&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;The product comes with a few enhancements on top of NextJS (which is already a great product):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Data Layer&lt;/strong&gt; - the need of an API is removed: At build time, Blitz automatically inserts an API call that runs the server code on the server&lt;/li&gt;
&lt;li&gt;Built-in Authentication, Authorization and 3rd party auth supported via Passport.js&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Qb4DOw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtfyn82pa3m0kwjbf6nb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Qb4DOw6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jtfyn82pa3m0kwjbf6nb.png" alt="Open-source product - Blitz JS"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#nocodb"&gt;
  &lt;/a&gt;
  NocoDB
&lt;/h2&gt;

&lt;p&gt;NocoDB is an open source #NoCode platform that turns any database into a smart spreadsheet. &lt;em&gt;Smart&lt;/em&gt; means collaborative edit with fine grained Access Control and password protected views. &lt;/p&gt;

&lt;p&gt;Other features: automatic build of API and GraphQL services, Kanban Dashboards, Page Customization with DYI Builder. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.nocodb.com/"&gt;NocoDB&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/nocodb/nocodb"&gt;NocoDB&lt;/a&gt; - Github repo ~11k Stars&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i1AtjRF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dqhy5zsmse8bw5uwey6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i1AtjRF8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3dqhy5zsmse8bw5uwey6.png" alt="Open-source product - Blitz JS."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt;, For more resources please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/react-dashboards-open-source-apps-1c7j"&gt;React Dashboards&lt;/a&gt; - a curated list published on Dev.to&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://dev.to/sm0ke/next-js-templates-a-curated-list-56fo"&gt;NextJS Templates&lt;/a&gt; - free &amp;amp; commercial products&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://appseed.us/admin-dashboards/open-source"&gt;Open-source Dashboards&lt;/a&gt; - provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Monitor PostgreSQL Performance Using a Database Health Dashboard</title>
      <author>Arctype Team</author>
      <pubDate>Thu, 03 Jun 2021 18:51:38 +0000</pubDate>
      <link>https://dev.to/arctype/monitor-postgresql-performance-using-a-database-health-dashboard-16ji</link>
      <guid>https://dev.to/arctype/monitor-postgresql-performance-using-a-database-health-dashboard-16ji</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K8d7Yn3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1750/2021/06/alexander-sinn-KgLtFCgfC28-unsplash--1-.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K8d7Yn3i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/size/w1750/2021/06/alexander-sinn-KgLtFCgfC28-unsplash--1-.jpg" alt="heart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-monitor-postgresql-database-health"&gt;
  &lt;/a&gt;
  Why Monitor PostgreSQL Database Health?
&lt;/h2&gt;

&lt;p&gt;Just like monitoring our applications, it is very much necessary to monitor our database system. We want to monitor things substantially more granular than system-level processes—things such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How many queries actually make use of the index?&lt;/li&gt;
&lt;li&gt;How effective is the database cache?&lt;/li&gt;
&lt;li&gt;The number of open connections.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on. &lt;/p&gt;

&lt;p&gt;Hardware metrics are essential, but can only get us so far, and will not help us make concrete decisions—like which queries to optimize and how we are using our database in general. Since PostgreSQL is an open-source database, it offers a lot of insights for free without having to rely on costly tools. Most of the metrics we are going to track are available by default since they are required for the &lt;a href="https://dev.to/blog/postgresql-query-plan-anatomy/"&gt;query planner&lt;/a&gt;, but there are other critical areas for which we have to enable certain extensions/contrib modules that ship along with PostgreSQL. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introduction-to-the-arctype-tool"&gt;
  &lt;/a&gt;
  Introduction to the Arctype Tool
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://arctype.com/"&gt;Arctype&lt;/a&gt; is a very neat database tool that can be used not just as an SQL editor but also as a platform upon which complex dashboards can be both custom-built and shared around with developers/users. To understand its true power, we are going to consider a practical use case—monitoring a PostgreSQL database health.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started-with-arctype-dashboards"&gt;
  &lt;/a&gt;
  Getting Started with Arctype Dashboards
&lt;/h2&gt;

&lt;p&gt;To get ourselves familiar with the dashboard capabilities we are going to build a very simple dashboard with just three components. The Arctype dashboard is built right into the Arctype tool itself. To access the functionality, just click on &lt;code&gt;Dashboards&lt;/code&gt; button as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bs3mW9AS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_1-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bs3mW9AS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_1-1.png" alt="Dashboard Creation"&gt;&lt;/a&gt;&lt;br&gt;
Click on the plus icon and create a dashboard named - &lt;code&gt;Postgres Health Monitoring&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4QVPZYer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4QVPZYer--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_2.png" alt="Create Dashboard with Name"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--g56M-9_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--g56M-9_w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_3.png" alt="Dashboard Naming Pane"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that the dashboard is created, let's create some components.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-list-of-postgresql-tables-from-informationschema"&gt;
  &lt;/a&gt;
  Creating a List of PostgreSQL Tables from Information_Schema
&lt;/h3&gt;

&lt;p&gt;Adding a table component/chart component is covered in one of &lt;a href="https://dev.to/blog/analytics-dashboard-django/#creating-a-dashboard-for-your-database"&gt;our previous articles&lt;/a&gt;. Drag and drop the &lt;code&gt;Table&lt;/code&gt; into the empty dashboard pane. Next, we will use a simple query that talks to the underlying database (PostgreSQL) and gets all of the tables with their schemas present excluding the &lt;code&gt;information_schema&lt;/code&gt; and the system tables.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  table_schema, table_name
FROM
  information_schema.tables
WHERE
  table_schema &amp;lt;&amp;gt; 'information_schema'
  AND table_name NOT LIKE 'pg_%'
ORDER BY
  table_schema,
  table_name;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#visualizing-row-counts-of-tables-in-a-database-schema"&gt;
  &lt;/a&gt;
  Visualizing Row Counts of Tables in a Database Schema
&lt;/h3&gt;

&lt;p&gt;Let's add a Chart component (similar to table) next to our table component which uses the below query:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  relname as table_name,
  reltuples as rows
FROM
  pg_class C
  LEFT JOIN pg_namespace N ON (N.oid = C .relnamespace)
WHERE
  nspname NOT IN ('pg_catalog', 'information_schema')
  AND relkind = 'r'
ORDER BY
  reltuples DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This query simply counts the records for all the tables in our databases. In the right pane, select &lt;code&gt;table_name&lt;/code&gt; for X-Axis, and &lt;code&gt;rows&lt;/code&gt; for Y-Axis.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-images-to-an-arctype-dashboard"&gt;
  &lt;/a&gt;
  Adding Images to an Arctype Dashboard
&lt;/h3&gt;

&lt;p&gt;After adding the table and chart, let's add an image to our dashboard from the &lt;a href="https://www.postgresql.org/media/img/about/press/elephant.png"&gt;PostgreSQL website&lt;/a&gt; along with a text field for explanation.  After adding all of the above steps, our dashboard will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_8EJpEfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_5-2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_8EJpEfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_5-2.png" alt="Dashboard Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, you should have a decent feel for dashboards, so now, let's build a real health dashboard and see how it can help us visualize our database health.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#identifying-critical-areas-in-the-postgresql-database"&gt;
  &lt;/a&gt;
  Identifying Critical Areas in the PostgreSQL Database
&lt;/h2&gt;

&lt;p&gt;PostgreSQL has a lot of areas upon which we can focus in order to understand the database's health. In the below sections, we will see a handful of them and demonstrate how you can use Arctype to visualize them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#querying-to-check-postgresql-open-connections"&gt;
  &lt;/a&gt;
  Querying to Check PostgreSQL Open Connections
&lt;/h3&gt;

&lt;p&gt;It is always a good idea to monitor how many open connections are currently present in our database cluster. We can get this from the &lt;code&gt;pg_stat_activity&lt;/code&gt; table:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  COUNT(*) as connections,
  backend_type
FROM
  pg_stat_activity
GROUP BY
  backend_type
ORDER BY
  connections DESC
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
  &lt;a href="#determining-the-size-of-a-postgresql-database"&gt;
  &lt;/a&gt;
  Determining the Size of a PostgreSQL Database
&lt;/h3&gt;

&lt;p&gt;As our database expands over time, it is important to keep the database size in check. We can get a list of databases and their respective sizes using the below query:&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  datname as database_name,
  pg_database_size(datname)/1024/1024 as size
FROM
  pg_database
WHERE
  datistemplate = false;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;We could use the &lt;code&gt;pg_size_pretty&lt;/code&gt; instead of calculating the MB directly, but we want to plot this as a bar chart to see and compare the sizes. Keeping tabs on individual database sizes helps us to get an overall picture. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: These sizes can vary from disk size since PostgreSQL does a lot of compression behind the scenes.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calculating-database-cachehit-ratios-in-postgresq"&gt;
  &lt;/a&gt;
  Calculating Database Cache-Hit Ratios in PostgreSQ
&lt;/h3&gt;

&lt;p&gt;Any relational database/operational database serves most of its traffic from its cache. If that's not happening, we definitely need to look into it. The PostgreSQL cache area is known as &lt;a href="https://www.postgresql.org/docs/current/runtime-config-resource.html"&gt;&lt;code&gt;shared_buffers&lt;/code&gt;&lt;/a&gt;, which acts as the database layer cache on top of the cache provided by the operating system. We can use the below query to understand the cache hit ratio:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  sum(heap_blks_read) as reads,
  sum(heap_blks_hit) as hits,
  ROUND(
    sum(heap_blks_hit) / (sum(heap_blks_hit) + sum(heap_blks_read)),
    4
  ) as hit_ratio
FROM
  pg_statio_user_tables;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;From the &lt;a href="https://dev.to/blog/postgresql-query-plan-anatomy/#what-are-buffers-and-caches-in-a-database"&gt;query plan blog&lt;/a&gt;, there are a couple of tuples that are coming from heap read and heap hits. The &lt;code&gt;pg_statio_user_tables&lt;/code&gt; has the information regarding this. In the above query, we are simply getting the values of hits and reads (coming from the disk) and calculating the ratio rounded off to four digits. It is important to note that in a healthy production database, this ratio should come to around 97+ or close to it—97% of the hits are coming from the cache.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scanning-for-unused-indexes"&gt;
  &lt;/a&gt;
  Scanning for Unused Indexes
&lt;/h3&gt;

&lt;p&gt;The statistics collector in PostgreSQL records which indexes were accessed how frequently. We can construct a query from one of the statistics tables called &lt;code&gt;pg_stat_all_indexes&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  COUNT(*) as count,
  relname as table_name
FROM
  pg_stat_all_indexes
WHERE
  idx_scan = 0
  and schemaname = 'public'
GROUP BY
  table_name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This kind of gives us an indication of tables that have the greatest number of unused indexes. The &lt;code&gt;idx_scan=0&lt;/code&gt; gives us the indexes that were never used even once. We can customize this value depending on our database traffic pattern.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inspecting-postgresql-database-caches"&gt;
  &lt;/a&gt;
  Inspecting PostgreSQL Database Caches
&lt;/h3&gt;

&lt;p&gt;In order to get more insight out of our cache, we need to enable another contrib module called &lt;a href="https://www.postgresql.org/docs/current/pgbuffercache.html"&gt;&lt;code&gt;pg_buffercache&lt;/code&gt;&lt;/a&gt;. After enabling it and running a few queries we can now inspect the cache:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  c .relname AS entity_name,
  count(*) AS buffers
FROM
  pg_buffercache b
  INNER JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c .oid)
  AND b.reldatabase IN (
    0,
    (
      SELECT
        oid
      FROM
        pg_database
      WHERE
        datname = current_database()
    )
  )
WHERE
  c .relname NOT LIKE 'pg_%'
GROUP BY
  c .relname
ORDER BY
  2 DESC;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;This query was taken from the &lt;a href="https://www.postgresql.org/docs/current/pgbuffercache.html"&gt;official documentation&lt;/a&gt; and then modified a little bit. It shows how many pages in  &lt;code&gt;shared_buffers&lt;/code&gt;  are occupied by different tables and indexes. You can assume pages as a metric directly proportional to the number of rows—the larger table being queried, the more pages get moved to the cache. This can also mean that some tables can be moved to an application cache or a fast key-value store, such as Redis, for faster querying—and to free up the database cache for indexes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#monitoring-average-postgres-query-performance"&gt;
  &lt;/a&gt;
  Monitoring Average Postgres Query Performance
&lt;/h3&gt;

&lt;p&gt;For this part, we need to enable the &lt;a href="https://www.postgresql.org/docs/current/pgstatstatements.html"&gt;&lt;code&gt;pg_stat_statements&lt;/code&gt;&lt;/a&gt; extension. It is a built-in extension/contrib module, and in some cloud providers, it is enabled by default. If not, it can be easily enabled using the &lt;code&gt;shared_preload_libraries&lt;/code&gt;. This extension helps us capture a ton of information regarding query performance. Using this extension, we are going to build a query that outputs the query performance based on the number of rows the query has scanned: &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SELECT
  mean_time as "timing in ms",
  rows
FROM
  pg_stat_statements
ORDER BY
  mean_time DESC
LIMIT
  100;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;Limiting the rows and doing the &lt;code&gt;order by&lt;/code&gt; gives us the top 100 most consumed queries and the &lt;code&gt;rows&lt;/code&gt; column indicates the &lt;em&gt;total number of rows retrieved or affected by the statement&lt;/em&gt;. We can also get the top 10 worst queries by running time using the above table. This can be used as an alternative for slow log analysis, as this is more real-time. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-dashboard-with-postgresql-metrics"&gt;
  &lt;/a&gt;
  Building a Dashboard with PostgreSQL Metrics
&lt;/h2&gt;

&lt;p&gt;If we combine all of the queries in the mentioned chart types, it should look like a proper analytics dashboard that can be easily visualized/consumed: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d8AMZxNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d8AMZxNa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_7.png" alt="PG Health Dashboard Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The mapping for each of the components is shown in the table below.  Arctype is not limited to the below charts and has an incredibly feature-rich platform upon which we can represent our visualization.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Open Connections&lt;/td&gt;
&lt;td&gt;Pie Chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cache Hit Ratio&lt;/td&gt;
&lt;td&gt;Normal Table&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unused Indexes&lt;/td&gt;
&lt;td&gt;Bar Chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Database Size&lt;/td&gt;
&lt;td&gt;Bar Chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shared Buffers&lt;/td&gt;
&lt;td&gt;Bar Chart&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Query Response Times&lt;/td&gt;
&lt;td&gt;Scatter Chart&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Each widget here has its own description and the graphs have details on what is present in X-Axis and Y-Axis. It is important that the dashboard is self-explanatory, after all, a picture is worth a thousand words. These charts might look different depending upon the underlying data. They can be expanded and reduced by simply dragging their borders while in edit mode, which can be very useful if the dataset is larger—charts can overflow.&lt;/p&gt;

&lt;p&gt;The above dashboard was created in an example database that I had used before. Let's create the dashboard over a more realistic database such as the &lt;code&gt;Covid DB&lt;/code&gt; one that comes inbuilt with Arctype (available during the Signup flow). Since the dataset is huge, I have created the dashboard in two parts:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UqtMYBl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_14.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UqtMYBl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_14.png" alt="PG Health Dashboard Preview 1"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oO3Q2NVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_15.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oO3Q2NVM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_15.png" alt="PG Health Dashboard Preview 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As we have more data points, the dashboard looks a lot richer and more meaningful. The goal is not to be a "silver bullet" solution, but rather to provide some perspective as to potential areas of focus for an operational database. There are a lot of tools out there that offer different functionalities, but at the end of the day, I believe database developers should know their databases in more depth.   What's better than a tool that easily lets us translate queries into really nice charts and graphs with almost no learning overhead?  Answer: probably not much.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#insights-and-intelligence-from-the-health-dashboard"&gt;
  &lt;/a&gt;
  Insights and Intelligence from the Health Dashboard
&lt;/h2&gt;

&lt;p&gt;This dashboard allows us to monitor the database in real-time and helps us to more fully understand some features which are unique to PostgreSQL. In doing database optimizations, it is always a rule that "you cannot improve what you cannot measure," and this dashboard solves the first (yet often overlooked) step, which is actually measuring things. The &lt;code&gt;Covid DB&lt;/code&gt; demo database has a 99% cache hit rate, which means that almost all of the traffic is served from the cache (shared_buffers) and will respond very quickly. This is one good sign of a well-optimized database.&lt;/p&gt;

&lt;p&gt;Monitoring our database during peak traffic times will give us a lot of insight into which areas can be improved and how to measure this improvement. Some of the ways in which we can improve database performance based upon these metrics are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using a client-side/server-side connection pool.&lt;/li&gt;
&lt;li&gt;Code optimizations to release connections back to the pool/close the connection once the work is done. &lt;/li&gt;
&lt;li&gt;Doing proper database modeling and splitting the traffic between different clusters.&lt;/li&gt;
&lt;li&gt;Increasing the size of the shared buffers to accommodate more data/indexes in memory. &lt;/li&gt;
&lt;li&gt;Optimizing poorly written queries by either adding an index or re-writing them entirely.&lt;/li&gt;
&lt;li&gt;Removing unused indexes to speed up writes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whatever we have seen so far is only the tip of the iceberg. Database maintenance and improvement is an art of its own, and one which truly takes several years of hands-on experience. But is always important to use a toolchain that is friendly, cost-effective, and can help us achieve our goal easily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keeping-the-dashboard-uptodate"&gt;
  &lt;/a&gt;
  Keeping the Dashboard Up-to-Date
&lt;/h2&gt;

&lt;p&gt;After building it, it is important to keep the dashboard up-to-date. This can be done using various ways depending on our needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#manually-refreshing-arctype-dashboards"&gt;
  &lt;/a&gt;
  Manually Refreshing Arctype Dashboards
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c6cvoiy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_8-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c6cvoiy1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_8-1.png" alt="Refresh Whole Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At the top right beside the Edit Mode button, there is a reload button, which we can click to reload the entire dashboard.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#automatically-refreshing-the-entire-dashboard"&gt;
  &lt;/a&gt;
  Automatically Refreshing the Entire Dashboard
&lt;/h3&gt;

&lt;p&gt;We can also configure the whole dashboard to be refreshed periodically. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZieJ7WYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZieJ7WYI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_9.png" alt="Refresh Rate"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#refreshing-individual-components-automatically"&gt;
  &lt;/a&gt;
  Refreshing Individual Components Automatically
&lt;/h3&gt;

&lt;p&gt;By clicking on an individual component and clicking on &lt;code&gt;Advanced&lt;/code&gt;, we can configure the component in question to be refreshed at specified and automated intervals.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1iPSc3lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1iPSc3lW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_10.png" alt="Refresh Individual Component"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can choose what kind of refresh type we want, but keep in mind that the queries to monitor the database itself may be resource-intensive and can therefore degrade performance. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sharing-the-dashboard-and-closing-thoughts"&gt;
  &lt;/a&gt;
  Sharing the Dashboard (and Closing Thoughts)
&lt;/h2&gt;

&lt;p&gt;Another very important feature that is missing amongst many database tools, but one that is present in Arctype, is the ability to share dashboards.&lt;/p&gt;

&lt;p&gt;By clicking the &lt;code&gt;Share&lt;/code&gt; button on the right top screen in the dashboard viewer, we get various options to share.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sharing-an-arctype-workspace-via-email"&gt;
  &lt;/a&gt;
  Sharing an Arctype Workspace via Email
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NMak3N3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_11.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NMak3N3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_11.png" alt="Dashboard Sharing via Email"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This would invite the user to be part of the workspace. For more advanced controls, check out the &lt;a href="https://docs.arctype.com/ogranizations/create-a-new-organization"&gt;teams functionality&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#linking-to-your-workspace"&gt;
  &lt;/a&gt;
  Linking to Your Workspace
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rpr-Yk2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_12.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rpr-Yk2---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_12.png" alt="Dashboard Share via Link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the same as above, except that anyone with the link can join the workspace.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-public-readonly-link"&gt;
  &lt;/a&gt;
  Creating a Public Read-Only Link
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m2264a4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_13.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m2264a4o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://arctype.com/blog/content/images/2021/05/Arctype_Dashboard_13.png" alt="Dashboard Share via Public Link"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will send a read-only link that can be viewed in the browser as well. This can be very handy for sharing dashboards with different (perhaps non-technical) stakeholders on a team.&lt;/p&gt;

&lt;p&gt;Note: You cannot share a locally-hosted database (or any affiliated dashboards)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;These dashboards are incredibly useful when:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Running a performance test.&lt;/li&gt;
&lt;li&gt;Monitoring a live database for a specified period.&lt;/li&gt;
&lt;li&gt;General database monitoring.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fine-grained control provided by Arctype makes this dashboard easily shareable across colleagues, teams, and even to the general internet. Go ahead and download Arctype if you haven't already, and start creating these dashboards—knowing database health and monitoring them should no longer be limited to certain tools or people!&lt;/p&gt;

</description>
      <category>schema</category>
      <category>postgres</category>
      <category>data</category>
      <category>guide</category>
    </item>
    <item>
      <title>The First Gaming blog here in dev community</title>
      <author>tirth-uhiha-dev</author>
      <pubDate>Thu, 03 Jun 2021 18:50:25 +0000</pubDate>
      <link>https://dev.to/tirthuhihadev/the-first-gaming-blog-in-dev-community-5boc</link>
      <guid>https://dev.to/tirthuhihadev/the-first-gaming-blog-in-dev-community-5boc</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XlJm_7Xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn81oc9lz8zy8c4csah.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XlJm_7Xi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6pn81oc9lz8zy8c4csah.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#heythere"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Hey&lt;/strong&gt;,&lt;strong&gt;There&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;Tired Hardworking Devs its me tirth, the one and only gaming blogger on dev from nowonwards i will posting valorant, fortnite , and pubg etc. blogs here on dev community so do follow me for more if play one of these games adios!!.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>gratitude</category>
      <category>devjournal</category>
      <category>vscode</category>
    </item>
    <item>
      <title>Run PHPUnit tests automatically before pushing code in Laravel</title>
      <author>Ariel Mejia</author>
      <pubDate>Thu, 03 Jun 2021 18:49:13 +0000</pubDate>
      <link>https://dev.to/arielmejiadev/run-phpunit-tests-automatically-before-pushing-code-in-laravel-1kod</link>
      <guid>https://dev.to/arielmejiadev/run-phpunit-tests-automatically-before-pushing-code-in-laravel-1kod</guid>
      <description>&lt;h2&gt;
  &lt;a href="#install-husky"&gt;
  &lt;/a&gt;
  Install Husky
&lt;/h2&gt;

&lt;p&gt;Husky is an excellent tool to automate hooks, in this post we are running phpunit tests before pushing code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install husky@4 --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-all-laravel-tests-after-pushing-code"&gt;
  &lt;/a&gt;
  Run all laravel tests after pushing code:
&lt;/h2&gt;

&lt;p&gt;On package.json file add this code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pre-push"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"php artisan test"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#go-further"&gt;
  &lt;/a&gt;
  Go further
&lt;/h2&gt;

&lt;p&gt;Husky also allows to add hooks before adding a commit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-pre-commit-hooks"&gt;
  &lt;/a&gt;
  Add pre commit hooks
&lt;/h2&gt;

&lt;p&gt;If you want to learn how to install and configure &lt;code&gt;PHPInsights&lt;/code&gt; or any other package for static analyze the links for posts are at the end of the post.&lt;/p&gt;

&lt;p&gt;You can run any package or custom command, in this case I will add a artisan command from &lt;code&gt;PHPInsights&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"php artisan insights -v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pre-push"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"php artisan test"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#adding-more-than-one-raw-precommit-endraw-hook"&gt;
  &lt;/a&gt;
  Adding more than one &lt;code&gt;pre-commit&lt;/code&gt; hook
&lt;/h2&gt;

&lt;p&gt;You can configure Husky to add more than one command on any hook by adding "&amp;amp;&amp;amp;" between every command.&lt;/p&gt;

&lt;p&gt;In this case it would be configure to run &lt;code&gt;PHPInsights&lt;/code&gt; and &lt;code&gt;PHPCSFixer&lt;/code&gt;, but you can run any package or custom command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"husky"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"hooks"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pre-commit"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"php artisan insights -v &amp;amp;&amp;amp; vendor/bin/php-cs-fixer fix"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"pre-push"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"php artisan test"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That is all for this post, thanks for reading.&lt;/p&gt;

</description>
      <category>php</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Key Steps To Building A Great Small Business Website</title>
      <author>Krowser Web Services </author>
      <pubDate>Thu, 03 Jun 2021 18:47:46 +0000</pubDate>
      <link>https://dev.to/krowser/key-steps-to-building-a-great-small-business-website-nn7</link>
      <guid>https://dev.to/krowser/key-steps-to-building-a-great-small-business-website-nn7</guid>
      <description>&lt;p&gt;Whether you are a freelance developer, own a launderette, or have another type of small business, a great website is necessary for your company’s success. &lt;/p&gt;

&lt;p&gt;If you are looking to build a new startup website or make your current site more productive, here are the key steps to getting started and helping your small business website compete effectively in the online marketplace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Obtain a good domain name&lt;/strong&gt;&lt;br&gt;
Your domain name, also known as your website address, is often the entry point to your site. It is important that it makes a good impression for usability purposes, as well as for search engine optimization (SEO).&lt;/p&gt;

&lt;p&gt;Here are some tips for coming up with an optimal domain name:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make it easy to spell. Try not to use slang, made up, or extremely esoteric words.&lt;/li&gt;
&lt;li&gt;Keep it as short as possible. The shorter it is, the easier it is to remember and type correctly.&lt;/li&gt;
&lt;li&gt;Use the proper domain extension. Try to always make it a .com domain name (as opposed to .net, .co, etc.) unless it is more appropriate to use another extension, such as .gov, .edu, or .org.&lt;/li&gt;
&lt;li&gt;Avoid numbers and hyphens. They are hard to remember and less elegant and memorable than word-only domain names, and may be misunderstood when vocalizing the domain name.&lt;/li&gt;
&lt;li&gt;Make the address broad to facilitate future growth. For example, Amazon.com is a much broader website address than BooksOnline.com and allows Amazon to sell pretty much every type of consumer good instead of books only, as was its original purpose.&lt;/li&gt;
&lt;li&gt;Ensure it is memorable. With so many websites on the internet, it is important that your website name is catchy so people will remember how to access it in the future.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Purchase secure, scalable website hosting with good tech support&lt;/strong&gt;&lt;br&gt;
A website host (or sometimes referred to as a website hosting provider) is a company that offers the technology and services necessary for a website to be viewed on the internet. You connect your domain name to your hosting provider so that when users visit your website address, they are shown your website that you store on your hosting account.&lt;/p&gt;

&lt;p&gt;Hosting services can cost anywhere between $2 to $100+ per month, depending on the kind of technology and support you choose. You can usually get a discount if you purchase a yearly plan as opposed to a monthly plan.&lt;/p&gt;

&lt;p&gt;Here are some guidelines for choosing a good website hosting plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Although you can get a “shared server” hosting plan for as little as $2 per month, I would typically advise against this. Shared hosting means you are sharing a server and its resources with other customers, which can make the performance of your site suffer. Also, if one of the other websites on your shared server is hacked, it is possible for your website to also be infected.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A “dedicated server” hosting plan is the most expensive option—cost can range from around $100 to $2,000 per month—but it would make your website perform the most optimally. Having a dedicated server plan means that the physical server machine is entirely dedicated to your site; therefore, all the resources are yours and it is more secure than a shared hosting plan, as long as the technology is optimal. However, it is much more expensive than what most small businesses usually are willing to pay. Once you have a very high-performing site, this may be what you need, but it is overkill for most early stage and small businesses.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The compromise I typically recommend is a “virtual private server” (VPS) hosting plan which offers the best of both worlds. The cost ranges from around $20 to $50 per month, which is affordable for the hosting services you will receive. A VPS is one machine that is partitioned to act as multiple machines, which gives it a similar affordability to shared hosting, with similar security and performance potential as a dedicated server hosting plan.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure your hosting company has phone and/or chat support so you can be helped quickly if you have a problem. Email support can often take too long and become frustrating when a problem needs to be resolved immediately. Phone support is best, but chatting works well, too.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There needs to be an easy to use server interface like cPanel to access your server. You do not want to have to use terminal commands to view your server contents and make changes, unless you can afford to hire a professional server administrator to help you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check to see what kind of server security is in place on the server you are considering. You will want to be able to access your server via Secure File Transfer Protocol (SFTP). There should be daily backups being made of your server contents. There should also be an easy, one or two-click method to install Secure Sockets Layer (SSL) certificates. Make sure the hosting company performs regular security maintenance. Ideally your hosting company has a published security protocol you can review so you know how they keep their servers safe.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some popular website hosting companies include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GoDaddy&lt;/li&gt;
&lt;li&gt;DreamHost&lt;/li&gt;
&lt;li&gt;Bluehost&lt;/li&gt;
&lt;li&gt;InMotion&lt;/li&gt;
&lt;li&gt;SiteGround&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Prominently display a clear description of your business&lt;/strong&gt;&lt;br&gt;
It is important to let people know who you are and what you do right away so they don’t feel confused when they visit your small business website. Make sure your main homepage banner (also known as a “hero image”) and subsequent banners are visual representations of your services, and also that you have an introductory text blurb near the top of the page that describes who you are and what you do.&lt;/p&gt;

&lt;p&gt;Additionally, make sure both your main and footer navigation menus have “About Us” page links easily accessible so people can click them and read more about your business in depth.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Implement the best content management system&lt;/strong&gt;&lt;br&gt;
A content management system (CMS) is a software program or application that is used to create and manage digital content. A good CMS will help you maintain your site, and you don’t need much technical knowledge to use it. You should choose a CMS that is designed for your unique needs; different systems are used for different reasons, such as user-friendliness, extensibility, and budget.&lt;/p&gt;

&lt;p&gt;The following are some popular systems with descriptions of their strengths and weaknesses.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WordPress:&lt;/strong&gt; WordPress is the world’s most popular CMS. It has a vast, active support community and many useful plugins to extend the functionality of your site. (And if you cannot find a plugin that does what you want, it is easy to find a WordPress developer who can make one for you!) WordPress is also free and relatively simple to install. Most website developers are familiar with it so it is not hard to find an individual or agency that can work on your site. I normally recommend that small businesses use WordPress to create their websites, due to its flexibility and extensibility.&lt;br&gt;
It must be noted, however, that WordPress’s biggest weakness is security—because it is so popular, hackers target it the most. Your WordPress site needs to be regularly maintained and secured so it is not hacked. Also, it is difficult to secure every single third-party plugin, so keeping your WordPress site secure must be an ongoing commitment through various best practices (checking to see if your plugins have been updated within the past few months, making sure it is a plugin provided in the official WordPress repository, deleting unused plugins immediately, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Drupal:&lt;/strong&gt; Drupal is another popular CMS. It offers many of the same benefits as WordPress, including flexibility, ease of use, and a large support community. Notably it is a more secure CMS than WordPress (safer from malicious activity); however, it doesn’t have as many plugin or theme options, which makes it less extensible. For many years, the White House website (Whitehouse.gov) was run with Drupal, but has since switched to WordPress, which it still uses today.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Joomla!:&lt;/strong&gt; Another popular CMS is Joomla! Out of the box, it has better SEO, security, and multilingual capabilities than WordPress; however, with the help of a few plugins, WordPress surpasses Joomla!’s capabilities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Squarespace:&lt;/strong&gt; Squarespace is a service you subscribe to monthly or annually that makes website and blog creation an easy “drag and drop” experience. It includes website design, development, software maintenance, metrics, domain name with annual purchase, SSL security, 24/7 support, and unlimited bandwidth and storage hosting all in one package. It is especially suitable for creatives and provides you with top-notch design templates. If you are on a tight budget, need a simple and beautiful site, but cannot afford a website designer, this is a great service for you.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is a much smaller learning curve with Squarespace than with WordPress, Drupal, and Joomla!, but it doesn’t have nearly as many extensibility options. However, if you have little or no technical knowledge and are looking for a quick and easy way to put up a website, Squarespace is an excellent option for you.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Wix:&lt;/strong&gt; Wix is very similar to Squarespace, but it is a bit more user-friendly. It offers a monthly, but not annual, subscription and includes similar features. Wix is also a drag-and-drop builder—you can freely drag and drop elements anywhere on the page; in comparison, Squarespace is more structured in where you can drag and drop on the page. The learning curve to using Wix is even shorter than Squarespace, so if you need to publish a site quickly, this may be your best option.
Wix has a lot more templates than Squarespace to choose from, but once you choose a template, you must stick with it or be forced to completely rebuild your site. With Squarespace, you can change your template anytime without having to rebuild the entire site. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Choose a good e-commerce platform&lt;/strong&gt;&lt;br&gt;
If you plan on selling goods and/or services through your website, you will need the right technology to do so. (If you do not currently sell anything, you may want to consider doing so since e-commerce could potentially increase your profits.) If you decide to allow users to financially transact with you online, you will need to choose the right platform for your business model.&lt;/p&gt;

&lt;p&gt;Here are some popular small business e-commerce platforms:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;WooCommerce:&lt;/strong&gt; WooCommerce is one of the world’s most popular e-commerce platforms—it can turn your WordPress website into an online store. Like WordPress, there are many plugins available, and it attaches to WordPress, which makes it extremely flexible. There are many free and premium themes pre-built for WooCommerce. (As a rule, it is better to use a premium theme from a reputable developer because it will offer better security and support.) If you are not tech-savvy, you will most likely need a WordPress developer to help you set it up and use it. WooCommerce also offers a very high amount of capabilities and scalability that your small business might need.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shopify:&lt;/strong&gt; Shopify is a cloud based e-commerce platform that allows you to create and customize an online store, and to manage products, inventory, payments, and shipping. It is not a WordPress extension like WooCommerce—it is a standalone platform that is hosted on the Shopify server—so if you have a main website, your e-commerce site would technically be separate from that. You can link to your Shopify account from your regular website built with WordPress, Drupal, Wix, etc., unless your main website has a Shopify integration plugin.&lt;br&gt;
Features include unlimited products, unlimited bandwidth, fraud analysis, discount codes, reports, and much more. The key benefits of Shopify are that you do not need a developer to set up a store, and everything on the backend is already set up for you when you subscribe. The downside is you do not have as much control or flexibility over your store as you would with WooCommerce.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shopify Plus:&lt;/strong&gt; Shopify Plus is Shopify, but with a higher level of customization, more staff accounts, and international e-commerce options. It also has a higher level of support. However, all of this obviously comes with a higher subscription cost, and it still does not have all the flexibility and customization abilities as WooCommerce.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Business Squarespace:&lt;/strong&gt; Squarespace has an e-commerce subscription option, so if you chose Squarespace to build your site and have very simple e-commerce needs, you can choose this route. Business Squarespace charges a transaction fee, but this can be bypassed by upgrading your subscription to a basic online store. It includes a free domain, SSL security, SEO, abandoned cart recovery, discounts, real-time carrier shipping, and more. However, it has been noted it is not as user-friendly as Shopify. And like Shopify, it is simply not as flexible as WooCommerce.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Wix:&lt;/strong&gt; Wix actually has a Shopify extension which is very user friendly. You will have to upgrade your Wix account and subscribe to Shopify in order to use it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;GoDaddy Online Store:&lt;/strong&gt; GoDaddy has a relatively new e-commerce standalone subscription platform that is relatively easy to set up and use. Very little technical knowledge is required to launch your shop with GoDaddy Online Store. The templates are simple and clean, and somewhat customizable. Features include marketing and SEO tools, social media integration, appointment booking, SSL security, rapid page loading, and more.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Create an interesting, memorable, and engaging website user interface&lt;/strong&gt;&lt;br&gt;
Make sure your small business website interface leaves a positive impression that drives results. You can do so by implementing the following suggestions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use beautiful graphics and easy-to-read fonts.&lt;/li&gt;
&lt;li&gt;Make sure your graphics are compressed and optimized for fast loading. If your website is slow, search engines like Google will penalize your ranking.&lt;/li&gt;
&lt;li&gt;Research the competition to see how they have designed and optimized their websites; implement similar components that will work for your small business website.&lt;/li&gt;
&lt;li&gt;Research your target audience to see what they want from your site and make it easy for them to accomplish it.&lt;/li&gt;
&lt;li&gt;Stay consistently on brand throughout your website design.&lt;/li&gt;
&lt;li&gt;Design an intuitive navigation system which allows users to get to the pages they need quickly.&lt;/li&gt;
&lt;li&gt;Publish easily accessible contact information.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Incorporate obvious call-to-actions (especially “buy now” buttons).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create pages that are standard for small business websites, such as: &lt;br&gt;
*Home&lt;br&gt;
*About us&lt;br&gt;
*Products/Services (with descriptions and visually appealing images)&lt;br&gt;
*Sitemap (for SEO purposes)&lt;br&gt;
*Management team&lt;br&gt;
*Contact us&lt;br&gt;
*Terms of use (the online contract governing how users can use your site)&lt;br&gt;
*Privacy policy&lt;br&gt;
*Additional pages relevant to your specific small business&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Optimize your small business website for search engines&lt;/strong&gt;&lt;br&gt;
SEO is a set of practices you apply to your website to ensure search engines index and rank your website appropriately and then show it to search engine users. Once your website is “crawled” by search engines, it competes with websites that have similar content. The better your website design and content is, the higher your site will show up on search engine result pages.&lt;/p&gt;

&lt;p&gt;SEO mainly includes the following practices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Keyword research and implementation&lt;/li&gt;
&lt;li&gt;Optimal website code&lt;/li&gt;
&lt;li&gt;Fast loading speed&lt;/li&gt;
&lt;li&gt;Being secure and having an SSL certificate installed; SSL is the standard security technology that ensures data passed between web servers and browsers remains private&lt;/li&gt;
&lt;li&gt;Having a mobile-friendly site&lt;/li&gt;
&lt;li&gt;Existence of high-quality backlinks (links on external websites with related content) that lead to your site&lt;/li&gt;
&lt;li&gt;Having lots of positive reviews online (Google, Yelp, Facebook, etc.)&lt;/li&gt;
&lt;li&gt;Using internal links throughout your site to keep people clicking and reading&lt;/li&gt;
&lt;li&gt;Using social media to link to your site (LinkedIn, Twitter, Facebook, Pinterest, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SEO is an extremely important ongoing process that can mean the difference between showing up on the first page of search engine results pages (resulting in large amounts of free traffic to your website) or page 300 (resulting in no traffic).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regularly create and publish quality content&lt;/strong&gt;&lt;br&gt;
Both content quantity and freshness are important to search engines, so it’s important that you create a plan to publish quality articles and/or blog posts on your site and on external sites that link to your site. If you want to rank highly in search engine results and encourage people to return to your site again and again, you will have to update your website with new and relevant content as frequently as possible.&lt;/p&gt;

&lt;p&gt;In addition to static page content and articles, a great form of content to post on your website is testimonials. Asking for testimonials from your customers and then publishing them on your website is a great way to post fresh, high-quality content on your site that makes your small business more attractive.&lt;/p&gt;

&lt;p&gt;Make sure your content uses an appropriate, on-brand tone that people will enjoy reading.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Install webmaster tools&lt;/strong&gt;&lt;br&gt;
Make use of vital data to help you analyze traffic and site performance by installing Google Analytics and Google Search Console (both preferably via Google Tag Manager), and Bing Webmaster Tools. These tools can be used to track the following types of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Daily, weekly, and monthly visitors to your site&lt;/li&gt;
&lt;li&gt;Number of views on each page of your site&lt;/li&gt;
&lt;li&gt;“Bounce rate”—the percentage of users who come to your site and leave after having only viewed one page (Google algorithms give higher rankings to websites that have a low bounce rate, on the theory that visitors are spending more time on the site and find it valuable.)&lt;/li&gt;
&lt;li&gt;Average time spent on site by visitors&lt;/li&gt;
&lt;li&gt;Crawl errors on your site (errors that the search engines found on your site in crawling its content)&lt;/li&gt;
&lt;li&gt;Broken links on the site
Keywords that lead users to your site&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Implement a website maintenance plan&lt;/strong&gt;&lt;br&gt;
A website shouldn’t be created and then allowed to grow stale. In order to have a successful website that ranks well in search engines and doesn’t get hacked, you need to make sure it is properly maintained.&lt;/p&gt;

&lt;p&gt;Here are some tips to create a small business website maintenance plan:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check Webmaster Tools data at least once a month and have any vital errors emailed to you in real time.&lt;/li&gt;
&lt;li&gt;Use traffic data to learn more about your audience so you can better cater to them.&lt;/li&gt;
&lt;li&gt;Use performance data to optimize and fix warnings and errors.
Make sure all software is always up to date.&lt;/li&gt;
&lt;li&gt;Run security scans so you know your website is clean of malware and hasn’t been hacked.&lt;/li&gt;
&lt;li&gt;Use “split testing” to see if certain variations of your website help performance; for example, if you are selling a product, you might have two versions of a particular landing page with different images and wording—the split testing allows you to see which version has a higher conversion rate&lt;/li&gt;
&lt;li&gt;Allow website users to provide you with feedback about your site.&lt;/li&gt;
&lt;li&gt;Continue to check out your competition from time to time to see what they are doing with their online presence and see if what they’ve done can work for you as well.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
As you can tell after reading this article, creating a great small business website may not be as simple as you first thought. However, if you follow the steps set forth in this article, your small business will have an excellent chance at succeeding in the online marketplace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Forbes&lt;/li&gt;
&lt;li&gt;AllBusiness&lt;/li&gt;
&lt;li&gt;Shopify blog&lt;/li&gt;
&lt;li&gt;Wix Blog&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>javascript</category>
      <category>html</category>
    </item>
    <item>
      <title>Why Every Developer Should Build Their Own Blog</title>
      <author>Braydon Coyer</author>
      <pubDate>Thu, 03 Jun 2021 18:38:07 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/why-every-developer-should-build-their-own-blog-ceg</link>
      <guid>https://dev.to/braydoncoyer/why-every-developer-should-build-their-own-blog-ceg</guid>
      <description>&lt;p&gt;If you’re a web developer applying for a job, you’re placed in a unique position. Job applications require a resume, yes, but they may also ask for your portfolio or personal website, giving you an opportunity to impress with your own slice of the internet and display past projects and experience.&lt;/p&gt;

&lt;p&gt;Someone approached me last month and asked me what personal project they should work on (as a new developer) and put on their portfolio. Instead of suggesting the age-old todo application, I took some time to really think about this question. And I have an answer.&lt;/p&gt;

&lt;p&gt;While a lot of work can go into creating your portfolio itself, &lt;strong&gt;I believe that building your own blog is one of the best projects you can show to potential employers.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-projects-to-your-portfolio-that-span-many-verticals"&gt;
  &lt;/a&gt;
  Add projects to your portfolio that span many verticals
&lt;/h3&gt;

&lt;p&gt;When considering projects to list on your portfolio, select items to showcase that touch a variety of topics directly related to your ideal role. This is appealing to your potential employers - they have tangible evidence of your credibility with those topics, languages or frameworks.&lt;/p&gt;

&lt;p&gt;While there isn’t anything wrong with the traditional todo application (and may be the best beginner project for some fresh developers), it usually remains simple enough to fit on one page and cover straightforward topics like basic state management and user interaction.&lt;/p&gt;

&lt;p&gt;If you’re a developer building your own blog, here is a list of topics you’d have to cover at a bare minimum to get a basic system operational:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data storage for articles, pictures and more&lt;/li&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Image optimization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Take it a step further, and things get a bit more complex:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sorting and filtering articles&lt;/li&gt;
&lt;li&gt;Social sharing images&lt;/li&gt;
&lt;li&gt;Share articles to social media outlets&lt;/li&gt;
&lt;li&gt;Code syntax highlighting for snippets&lt;/li&gt;
&lt;li&gt;Article read time&lt;/li&gt;
&lt;li&gt;Individual article view count&lt;/li&gt;
&lt;li&gt;Heading anchor links&lt;/li&gt;
&lt;li&gt;Dynamic slug creation&lt;/li&gt;
&lt;li&gt;Dynamic page creation&lt;/li&gt;
&lt;li&gt;Experience using a CMS&lt;/li&gt;
&lt;li&gt;Migrating to statically generated pages for blazing fast speeds&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While not exhaustive, these lists help get the idea across that building your own blog is a bit more complex (and impressive) than building a todo application. Potential employers (especially those who have a technical background) understand the amount of time and effort it takes to build your own blog, and allows them to ask specific implementation questions as part of your interview.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-benefit-of-having-your-own-slice-of-the-internet"&gt;
  &lt;/a&gt;
  The benefit of having your own slice of the internet
&lt;/h3&gt;

&lt;p&gt;Having your own custom blog (or portfolio) serves as a creative outlet and digital playground.&lt;/p&gt;

&lt;p&gt;Want to test out a new UI library? There’s nothing stopping you. Want to add some crazy animations to articles? Go ahead! There’s no limit to what you can do with something as generic as a blog! And remember — potential employers have tangible proof of your experience building out a robust system.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#best-custom-developer-blogs"&gt;
  &lt;/a&gt;
  Best custom developer blogs
&lt;/h3&gt;

&lt;p&gt;Here’s a list of some my favorite creative blogs that I’ve compiled to kickstart your creativity.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.joshwcomeau.com/"&gt;Josh Comeau&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://una.im/archive/"&gt;Una Kravets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aboutmonica.com/writing"&gt;Monica Powell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://telmo.is/"&gt;Telmo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-about-blogging-platforms"&gt;
  &lt;/a&gt;
  What about blogging platforms?
&lt;/h3&gt;

&lt;p&gt;I’m not against the various blogging platforms available for developers. In fact, if you don’t have the time to build your own custom blog, I highly recommend you create a blog over on &lt;a href="https://hashnode.com/@braydoncoyer/joinme"&gt;Hashnode&lt;/a&gt;; it’s easy to set up and you can connect it to your own domain within a matter of minutes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;What are some projects that you would recommend developers showcase on their portfolio?&lt;/p&gt;

&lt;p&gt;Hit me up &lt;a href="https://twitter.com/BraydonCoyer"&gt;on Twitter&lt;/a&gt; and let me know!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you enjoyed this article, consider &lt;a href="https://braydoncoyer.dev/newsletter"&gt;signing up for my developer newsletter!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>webdev</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Linux Basic Part-00</title>
      <author>ShadowAryan</author>
      <pubDate>Thu, 03 Jun 2021 18:28:59 +0000</pubDate>
      <link>https://dev.to/shadow_aryan/linux-basic-part-00-476n</link>
      <guid>https://dev.to/shadow_aryan/linux-basic-part-00-476n</guid>
      <description>&lt;p&gt;I am using &lt;em&gt;Kali linux&lt;/em&gt; through out the whole &lt;strong&gt;Blog Series of Linux Basic Command&lt;/strong&gt; to demostrate you the linux basic command. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;ls&lt;/strong&gt; Command

&lt;ul&gt;
&lt;li&gt;ls means listing.&lt;/li&gt;
&lt;li&gt;This command list the files and folders in the current directory.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vzooB_hP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3m0sfq5j2cbboayzre6d.jpg" alt="Screenshot 2021-06-03 230502"&gt;
&lt;/li&gt;
&lt;li&gt;you can also use (&lt;strong&gt;-l&lt;/strong&gt;) flag in ls to see the list of files and folders with, at what time they are created , permission that given to them, etc.
i.e- ls -l
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwX3Ufyb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s7yhwcof7jtxixdrb2tf.png" alt="Screenshot 2021-06-03 230525"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.&lt;strong&gt;pwd&lt;/strong&gt; Command&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to view the current directory you are working in.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PTVe0f9z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a0us6vpo2qbs5fmy34yi.png" alt="Screenshot 2021-06-03 230605"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3.&lt;strong&gt;clear&lt;/strong&gt; Command&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;clear everything on the terminal.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3elRz06Z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lvcxlr5p8fmds9rg6gja.png" alt="Screenshot 2021-06-03 230629"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4.&lt;strong&gt;exit&lt;/strong&gt; Command&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;this command is used to close the terminal.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NQ7zC4U9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/harmvamwhpk8hj943szn.png" alt="Screenshot 2021-06-03 230324"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are having any problem in understanding the commands you can watch the video through the link that is given below:-&lt;br&gt;
&lt;a href="https://www.youtube.com"&gt;linux basic part- 00&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope you like the 00 part of blog series of linux basic command blog.&lt;/p&gt;

&lt;p&gt;Part 01 - &lt;a href=""&gt;Link basic part - 01&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>linuxbasic</category>
      <category>kalilinux</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>The AWS Community Builders Program - What it is and how to apply.</title>
      <author>Fon Nkwenti</author>
      <pubDate>Thu, 03 Jun 2021 18:26:45 +0000</pubDate>
      <link>https://dev.to/aws-builders/the-aws-community-builders-program-what-it-is-and-how-to-apply-159l</link>
      <guid>https://dev.to/aws-builders/the-aws-community-builders-program-what-it-is-and-how-to-apply-159l</guid>
      <description>&lt;p&gt;I was recently accepted into the AWS Community Builder's program, so I shared my excitement and gratitude on social media, which naturally led to congratulatory messages in response. Some people actually thought I had landed a new position at AWS. I must admit, living in Cameroon and working for a company like AWS would be a good thing, but sorry, I'm not on Amazon's payroll (yet 🤫). &lt;br&gt;
In this post, I want to share with you what the AWS Community Builders program is all about, who can apply, and the advertised benefits of joining the program. &lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-is-the-aws-community-builders-program"&gt;
  &lt;/a&gt;
  So what is the AWS community Builders program?
&lt;/h2&gt;

&lt;p&gt;The AWS Community Builders program offers technical resources, mentorship, and networking opportunities to AWS enthusiasts and emerging thought leaders who are passionate about sharing knowledge and connecting with the technical community.&lt;br&gt;
The program isn't a lifetime achievement. It runs in 12-month intervals for each member, but if you feel you need to acquire more skills, say in another topic, you can re-apply to remain in the program.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-benefits-of-the-program"&gt;
  &lt;/a&gt;
  What are the benefits of the program?
&lt;/h2&gt;

&lt;p&gt;When you sign the NDA and join the program, you will eventually receive;&lt;br&gt;
Access to AWS product teams and information about new services and features.&lt;br&gt;
Mentorship from AWS subject matter experts on a variety of topics, including content creation, community building, and securing speaking engagements&lt;br&gt;
AWS Promotional Credits and other helpful resources to support content creation and community-based work&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-can-apply"&gt;
  &lt;/a&gt;
  Who can apply?
&lt;/h2&gt;

&lt;p&gt;I know it sounds like you need to be quite skilled before applying for the program. After seeing what other builders were contributing on Twitter and LinkedIn, I personally felt like I wasn't yet ready for it. Although you must be 18 years of age or older, you must keep in mind that there are no single specific criteria for being accepted. However, your application will be reviewed for evidence and accuracy of technical content, such as blog posts, open-source contributions, community organization efforts, online knowledge sharing, etc. Community organization efforts, such as hosting AWS User Groups, Meetups and other events, are also reviewed. In my case, I started my &lt;a href="https://fonnkwenti.hashnode.dev/"&gt;blog&lt;/a&gt; in December 2020 and organized the first &lt;a href="https://www.meetup.com/awsugdouala/"&gt;AWS user group in Douala&lt;/a&gt; in January before applying for the program.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-topics-and-how-many-are-there"&gt;
  &lt;/a&gt;
  What are Topics, and how many are there?
&lt;/h2&gt;

&lt;p&gt;You would be asked to choose a topic when applying for the program. Topics are simply categories that cover specific technology areas. I think it is a brilliant idea because otherwise, it would be challenging to navigate the breadth of AWS services. I chose the Networking and Content Delivery Topic, which is lead by &lt;a href="https://www.linkedin.com/in/michael-y-9907a9114/"&gt;Michael Yitayew&lt;/a&gt;. The other topics include Containers, Data (databases, analytics, and BI), Developer Tools, Front-End Web and Mobile, Game Tech, Graviton/Arm Development, Management and Governance + Migration, Machine Learning, Security &amp;amp; Identity, Serverless, and Storage. You can join any of the topics you may be interested in.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you are an AWS enthusiast, you create content, build software or organize events around AWS services, then you should definitely apply to join the program. You will find a lot of opportunities to connect to and learn from like-minded people. &lt;br&gt;
Now that you know what the program is and the benefits of being accepted, I hope you have had enough reason to apply and join me and the others. We would love to network with you.&lt;br&gt;
New applications will be open in Q3. Add your name to the &lt;a href="https://pages.awscloud.com/aws-community-builders-program-waitlist.html"&gt;waiting list&lt;/a&gt; and be notified when the next opportunity to apply opens later in 2021.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#useful-links"&gt;
  &lt;/a&gt;
  Useful Links
&lt;/h2&gt;

&lt;p&gt;AWS Community Builder landing page &lt;br&gt;
👇🏽 &lt;br&gt;
&lt;a href="https://aws.amazon.com/developer/community/community-builders/"&gt;https://aws.amazon.com/developer/community/community-builders/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Add your email to get notified when the next opportunity to apply opens up &lt;br&gt;
👇🏽 &lt;br&gt;
&lt;a href="https://pages.awscloud.com/aws-community-builders-program-waitlist.html"&gt;https://pages.awscloud.com/aws-community-builders-program-waitlist.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you want to have an idea on what you would fill in the online application, here is an apt post by my fellow community builder &lt;a href="https://dev.to/aditmodi"&gt;Adit Modi&lt;/a&gt;; &lt;br&gt;
👇🏽&lt;br&gt;
&lt;a href="https://dev.to/aws-builders/aws-community-builders-program-how-to-apply-get-accepted-tips-tricks-4cn2builders/aws-community-builders-program-how-to-apply-get-accepted-tips-tricks-4cn2"&gt;https://dev.to/aws-builders/aws-community-builders-program-how-to-apply-get-accepted-tips-tricks-4cn2builders/aws-community-builders-program-how-to-apply-get-accepted-tips-tricks-4cn2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all other public announcements, follow 👉🏽 &lt;a href="https://www.linkedin.com/in/jasonrobertdunn/"&gt;Jason Dunn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>awscommunity</category>
    </item>
    <item>
      <title>Let's extract some juice - getting 90+ in Google Insights tool</title>
      <author>Przemyslaw Michalak</author>
      <pubDate>Thu, 03 Jun 2021 18:22:28 +0000</pubDate>
      <link>https://dev.to/przemek/let-s-extract-some-juice-getting-90-in-google-insights-tool-6kk</link>
      <guid>https://dev.to/przemek/let-s-extract-some-juice-getting-90-in-google-insights-tool-6kk</guid>
      <description>&lt;p&gt;Hi everyone. This article is an addition to the one I wrote previously, which can be found &lt;a href="https://dev.to/przemek/front-end-studio-powered-by-solidjs-e5o"&gt;here&lt;/a&gt;. To make it short, I developed the first front-end Studio that uses HTML, CSS, and plain JS to create reactive web apps and allows to export code to JSX powered by &lt;a href="http://solidjs.com/"&gt;SolidJS&lt;/a&gt;. Today, I want to show you how exported code looks, works and performs outside of the Studio. You can watch the video showcasing everything from this blog just here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/embed/FCJtIY2DeHk%20feature=player_embedded&amp;amp;v=performanceofexportedcode"&gt;&lt;br&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eD-7jXK6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08ani0eifyjlrl7d0pdd.png" alt="GlueCodes Studio"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#example-code"&gt;
  &lt;/a&gt;
  Example code
&lt;/h1&gt;

&lt;p&gt;I used our website as an example code exported from the Studio. The reason is simple. You can always confirm everything you will see on YouTube or read in this blog.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJRJdaTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9c4tak0x6g0aq9m4490.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJRJdaTV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9c4tak0x6g0aq9m4490.png" alt="website"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#html-to-jsx"&gt;
  &lt;/a&gt;
  HTML to JSX
&lt;/h1&gt;

&lt;p&gt;As I mentioned before in order to develop reactive web apps in GlueCodes Studio all you need to know is HTML, CSS and plain JS. The tool will take care of the rest by generating code to JSX. We are constantly improving the exported code to make it easier to read and scale outside of the Studio if necessary. So you can still deliver web apps to your clients who want to scale project later on without our tool.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nq6kyXnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnebcm8bxvw3gd0b22wr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nq6kyXnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rnebcm8bxvw3gd0b22wr.png" alt="html to jsx"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-fast-is-the-end-product"&gt;
  &lt;/a&gt;
  How fast is the end product?
&lt;/h1&gt;

&lt;p&gt;Short answer - extremely. Obviously, still, a lot depends on the developer that is using the Studio exactly the same way as it would while using React or Angular. But Studio makes creating fast web apps significantly easier in a shorter amount of time. The exported code is not only well organised and can be minified, but you can also generate prerenders that will be displayed on the end user screen before JavaScript will be downloaded and injected to the browser. Our website, for example, scores around 80% on mobile in Google Insights and the tool points images (their size and format) as the main problem. We score over 95% on desktop devices. So I think that is a pretty 'decent' score for a tool that is still in Beta.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_CYlDhKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5alrqky36r9cmcnxi6ed.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_CYlDhKI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5alrqky36r9cmcnxi6ed.jpg" alt="Insights"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can try out the Studio for free here:&lt;br&gt;
&lt;a href="https://www.glue.codes"&gt;https://www.glue.codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And subscribe to our channel on YT:&lt;br&gt;
&lt;a href="https://www.youtube.com/channel/UCDtO8rCRAYyzM6pRXy39__A"&gt;https://www.youtube.com/channel/UCDtO8rCRAYyzM6pRXy39__A&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>solidjs</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Learn to code using FreeCodeCamp Especially If You Do Not Have 24/7 Internet Access</title>
      <author>Opeyemi Stephen</author>
      <pubDate>Thu, 03 Jun 2021 18:19:37 +0000</pubDate>
      <link>https://dev.to/resourcefulmind/learn-to-code-using-freecodecamp-especially-if-you-do-not-have-24-7-internet-access-101e</link>
      <guid>https://dev.to/resourcefulmind/learn-to-code-using-freecodecamp-especially-if-you-do-not-have-24-7-internet-access-101e</guid>
      <description>&lt;p&gt;My previous post was supposed to be a rant...a way of releasing my pent-up anger and frustration at the system and the very scarce resources it was swallowing, with little returns and immense presure all because I wanted to make a difference. The reception and similar experiences I read in the comments section is a source of motivation I will never take for granted. &lt;/p&gt;

&lt;p&gt;I am working with a few people to build solutions which would help the average developer and while that would take some level of planning, implementation and even donations, I thought of other non-monetary(if there's a word like that) ways of helping newbies.&lt;/p&gt;

&lt;p&gt;So...lots of research, a bout of serious typhoid fever, speaking with awesome developers including Jay, Trevor and Sebastian and my laptop getting spoilt by a power surge on the very day I wanted to POST this later, I was able to come up with this...now ask yourself...&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HOW WOULD YOU LIKE TO BE ABLE TO USE FREECODECAMP AND ITS AMAZING LEARNING RESOURCES AND CERTIFICATIONS WITHOUT THE INTERNET?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Awesome yeah? Check out FreeCodeCamp here &lt;a href="https://www.freecodecamp.org"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You're probably thinking this is hard and it might take a long time to set up, well it isn't. You should be done in an hour or less.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Preliminary Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First you need to have a working computer/laptop.(Thankfully I was able to get this post compiled before mine got spoilt).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You would also need initial internet connectivity.(This is so you can download the necessary FreeCodeCamp files from GitHub).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Lastly, you would need a resilience like no other. This is because it is one thing to download and set this up and it's a whole different thing to actually PUT THESE RESOURCES TO USE AND LEARN. Do not procastinate, start learning!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#first-step-setting-up-your-database-on-your-local-machine"&gt;
  &lt;/a&gt;
  First Step: Setting Up Your Database On Your Local Machine
&lt;/h2&gt;

&lt;p&gt;We will be making use of a document-oriented database called MongoDB. To learn more about MongoDB and why it is used, i have a helpful article here &lt;a href="https://www.dotnettricks.com/learn/mongodb/what-is-mongodb-and-why-to-use-it"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go on and install MongoDB. You can find the necessary documentation to install on all supported Operating Systems here &lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.mongodb.com/manual/installation/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be using Windows 10 so kindly follow the steps below if you use windows 10 as well.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Download&lt;/strong&gt; the latest version(mine was 4.4.6) at &lt;a href="https://www.mongodb.com/try/download/community"&gt;Link&lt;/a&gt; (make sure to select "On-Premises MongooDB locally" and on the right-hand side select "msi" as Package. Learn more about "msi" here &lt;a href="https://whatis.techtarget.com/fileformat/MSI-Installer-package-Microsoft-Windows"&gt;Link&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AZZpRj07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufoityrfmwchz1ukz02r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AZZpRj07--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ufoityrfmwchz1ukz02r.png" alt="The user interface of the MongoDB download page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;After the Download is complete, navigate to your file location and install.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When you get to the prompt that says &lt;strong&gt;"Custom SetUp"&lt;/strong&gt;, make sure all features are selected and the "Server" is set to &lt;strong&gt;"install on the local hard drive, C:".&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w-ysdoVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcnrk52scwcz9ico7ews.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w-ysdoVN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jcnrk52scwcz9ico7ews.png" alt="Custom Setup"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click &lt;em&gt;"Next"&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should be in &lt;strong&gt;"Service Configuration"&lt;/strong&gt; now. &lt;em&gt;Unselect&lt;/em&gt; the checkbox which says &lt;strong&gt;"Install MongoDB as a service"&lt;/strong&gt;. We are doing this so MongoDB doesn't use up all your computer's memory and we will only run it before starting up FreeCodeCamp. You are not Google or Netflix my friend, winks. Click &lt;em&gt;"Next"&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--umzFDLmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo3hcgrcb5wk8rjo7jxn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--umzFDLmO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wo3hcgrcb5wk8rjo7jxn.png" alt="Service Configuration"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Keep Clicking &lt;em&gt;"Next"&lt;/em&gt; to complete the rest of the installation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#second-step-setting-up-nodejs-and-npm"&gt;
  &lt;/a&gt;
  Second Step:  Setting Up Node.js and NPM
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Node.js&lt;/strong&gt; is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NPM&lt;/strong&gt; stands for Node Package Manager and is always installed with Node.js&lt;/p&gt;

&lt;p&gt;To learn more about NPM, you can check this resource &lt;a href="https://www.w3schools.com/whatis/whatis_npm.asp"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To learn more about node.js, you can check this resource &lt;a href="https://www.w3schools.com/nodejs/nodejs_intro.asp"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Download and install node.js by clicking &lt;a href="https://nodejs.org/"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make sure to download the recommended msi version (14.17.0 LTS).&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When this prompt below comes up, &lt;strong&gt;select the checkbox&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sn_kkjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxzmasfy0tiqklu3yiji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7Sn_kkjj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jxzmasfy0tiqklu3yiji.png" alt="Select the Check Box To Download Other Dependencies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will enable your system to also install additional packages and dependencies when you need them and build stuff on FreeCodeCamp as well. Chocolately, Python and other packages will also be  installed with this step&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#third-step-cloning-freecodecamp-from-github"&gt;
  &lt;/a&gt;
  Third Step: Cloning FreeCodeCamp From GitHub
&lt;/h2&gt;

&lt;p&gt;First thing to do is to install Git using your computer's package manager.&lt;/p&gt;

&lt;p&gt;You can type &lt;code&gt;"choco install git"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you still do not know how, you can install normally here &lt;a href="https://git-scm.com/download/win"&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open a new folder titled "FreeCodeCamp" on your computer.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then Open your terminal or Windows Powershell and follow the following sub-steps;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using &lt;code&gt;"cd"&lt;/code&gt; and &lt;code&gt;"ls"&lt;/code&gt; commands, navigate to the FreeCodeCamp folder(directory) which you opened in 1.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone FreeCodeCamp and its necessary accompanying files using git by typing the following command in your Powershell or Terminal&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;git clone --depth=1 https://github.com/freeCodeCamp/freeCodeCamp&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fourth-step-setup-and-install-freecodecamp-on-your-local-machine"&gt;
  &lt;/a&gt;
  Fourth Step: SetUp and Install FreeCodeCamp On Your Local Machine
&lt;/h2&gt;

&lt;p&gt;Use &lt;code&gt;"cd"&lt;/code&gt; to navigate into the FreeCodeCamp directory you just cloned and then type the command below to begin installation(might take a while but you've already come this far so be patient my friend)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;"npm ci"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DO NOT CLOSE THIS POWERSHELL/TERMINAL WINDOW YET&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fifth-step-starting-up-the-mongodb-database"&gt;
  &lt;/a&gt;
  Fifth Step: Starting Up The MongoDB Database
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;You will need to always start the service in 2 below before you can run FreeCodeCamp everytime so you can do well to note it down somewhere.&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open up a new window in your terminal or Powershell while waiting for the installation in the Fourth Step above.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can start up the MongoDB database by following the steps below:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Windows Users: Navigate as seen below and then type in the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"C:\Program Files\MongoDB\Server\3.6\bin\mongod.exe" --dbpath=/path/to/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Linux Users: Navigate as seen below and then type in the command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mongod --dbpath=/path/to/freeCodeCamp
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;DO NOT CLOSE THIS POWERSHELL/TERMINAL WINDOW YET&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sixth-step-seeding-the-mongodb-database"&gt;
  &lt;/a&gt;
  Sixth Step: Seeding the MongoDB Database
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Remember the installation in Step 4? It should be completed by now. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go back to that Powershell or Terminal window and then type in the command below just once;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;"npm run seed"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note: In subsequent times, you do not have to run the above command again because your would have already been initialized.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7th-step-start-freecodecamp"&gt;
  &lt;/a&gt;
  7th Step: Start FreeCodeCamp
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Go back to the Powershell terminal in the Sixth Step.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Run this command to start FreeCodeCamp&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;"npm run develop"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It might take an awful lot of time but as long as you have a stable internet connection, trust the process and let the building sun its full course. it took about 8 minutes on my end.&lt;/p&gt;

&lt;p&gt;How do i know it's done? You should see this line&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;success Building development bundle - 497.330s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#step-8"&gt;
  &lt;/a&gt;
  Step 8:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Open up your preferred browser and type in [Link}(&lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click &lt;strong&gt;"Get Started Now, It's Free!"&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You should see &lt;strong&gt;" Welcome back, development user".&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Congratulations, you can access all the courses now without the internet. Your progress will be saved in the MongoDB commands run in Step 5.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Question:&lt;/strong&gt; What I want to start FreeCodeCamp later, do i need to go through all the steps again? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Of course not, next time you can do so without the internet by following the instructions on Step 5 and 8 in two different terminals/powershells.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;May The Stars Align For You Fellow Dev....Major shoutouts to every resource I previously read and a few blogs that already did something like this. I hope this helps us all.&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>career</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
