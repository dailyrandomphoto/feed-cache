<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Public Solving: Let it snow</title>
      <author>Chris Bongers</author>
      <pubDate>Wed, 29 Dec 2021 07:16:46 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/public-solving-let-it-snow-29ik</link>
      <guid>https://dev.to/dailydevtips1/public-solving-let-it-snow-29ik</guid>
      <description>&lt;p&gt;Today the elves asked us to make some snow animations!&lt;br&gt;
This is a pretty exciting task as we have to get out our creative hats.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/devadvent/puzzle-19"&gt;You can find the complete puzzle here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So far I've done some &lt;a href="https://daily-dev-tips.com/posts/happy-birthday-confetti-animation/"&gt;confetti in CSS&lt;/a&gt;, and an &lt;a href="https://daily-dev-tips.com/posts/css-animated-snake/"&gt;animated snake&lt;/a&gt;.&lt;br&gt;
Today we can add animated snow to the list.&lt;/p&gt;

&lt;p&gt;We are free to make it in any way we want.&lt;/p&gt;

&lt;p&gt;My results looks like this:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/rebelchris/embed/gOGRzJq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thinking-about-a-solution"&gt;
  &lt;/a&gt;
  Thinking about a solution
&lt;/h2&gt;

&lt;p&gt;I'm right away thinking in the lines of the CSS confetti I made, where we repeat 50 divs and use CSS to randomize some elements of every snowflake.&lt;/p&gt;

&lt;p&gt;The things I want to randomize:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Size of the snowflake&lt;/li&gt;
&lt;li&gt;Position left to right on the screen&lt;/li&gt;
&lt;li&gt;Animation speed and delay&lt;/li&gt;
&lt;li&gt;Falling animation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This would be the easiest to use SASS, which isn't mentioned as a no-go, so we'll be implementing that.&lt;/p&gt;

&lt;p&gt;For the creation of 50 divs, we could use &lt;code&gt;pug&lt;/code&gt;, but I inject them through JavaScript.&lt;/p&gt;

&lt;p&gt;Let me guide you through this process step by step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-animated-snow-in-javascript"&gt;
  &lt;/a&gt;
  Making animated snow in JavaScript
&lt;/h2&gt;

&lt;p&gt;First, we need to add our 50 divs into the main container.&lt;br&gt;
This main container already exists and looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"snow"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can fetch this element in our provided JavaScript file by using the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snowContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.snow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll need to create a loop that runs 50 times and adds a new element into this one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;snowFlake&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;snowFlake&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;snowflake&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;snowContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;snowFlake&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This &lt;code&gt;forEach&lt;/code&gt; hack is a simple way to generate x looped lines.&lt;br&gt;
We then use the &lt;code&gt;createElement&lt;/code&gt; function to create a new div and add the &lt;code&gt;snowflake&lt;/code&gt; class.&lt;br&gt;
After which, we add out to our container element.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#enable-scss-in-vite"&gt;
  &lt;/a&gt;
  Enable SCSS in Vite
&lt;/h3&gt;

&lt;p&gt;Now that we have these 50 divs in the viewport, we need to change the default CSS import to work with SASS files.&lt;/p&gt;

&lt;p&gt;Luckily for us, Vite already supports this out of the box. We just need to install the preprocessor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-D&lt;/span&gt; sass
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we can change our file from &lt;code&gt;style.css&lt;/code&gt; to &lt;code&gt;style.scss&lt;/code&gt;.&lt;br&gt;
And modify the import in the &lt;code&gt;main.js&lt;/code&gt; to look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./style.scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Right, we can now leverage the massive powers of SCSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#styling-the-snowflake-elements"&gt;
  &lt;/a&gt;
  Styling the snowflake elements
&lt;/h3&gt;

&lt;p&gt;There are some elements to our snowflake that never really change.&lt;br&gt;
We can style those in a general fashion.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.snowflake&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-5vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This sets a basic viewport-based snowflake.&lt;br&gt;
It will start outside of the viewport on the negative top side.&lt;/p&gt;

&lt;p&gt;Then we want to create a loop to add our differences to each individual snowflake.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@for&lt;/span&gt; &lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="n"&gt;through&lt;/span&gt; &lt;span class="m"&gt;50&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.snowflake&lt;/span&gt;&lt;span class="nd"&gt;:nth-child&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;--size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;left&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(100)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;animation&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;snowfall&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;10&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="err"&gt;random(10)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;linear&lt;/span&gt; &lt;span class="nt"&gt;infinite&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="nt"&gt;animation-delay&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(15)&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we loop 50 times, and for each of the snowflake, we set the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Random size: between &lt;code&gt;0.1vw&lt;/code&gt; and &lt;code&gt;1vw&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The left position 0-100% of the viewport width&lt;/li&gt;
&lt;li&gt;The animation time and a custom delay, so they don't all fall at the same time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The animation looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we get the random flakes falling down, but they fall straight down, so maybe we should add a slight offset to mix things up.&lt;/p&gt;

&lt;p&gt;To achieve this, we need a horizontal start and endpoint.&lt;br&gt;
This should be a random number based on a percentage of the viewport's width.&lt;br&gt;
As we don't want the snowflakes to fall across the whole screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;--horizontal-start&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(20)&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;--horizontal-end&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;random(20)&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nt"&gt;vw&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And then, we can modify our animation to start and end on these values.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;snowfall&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--horizontal-start&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate3d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--horizontal-end&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;110vh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it, my version of CSS-based animated snow ❄️.&lt;/p&gt;

&lt;p&gt;I would be delighted to see other people's snow animations, as some are wizards with CSS 👀.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
    </item>
    <item>
      <title>PHP deployment to SSH server using Github action and bash script</title>
      <author>es404020</author>
      <pubDate>Wed, 29 Dec 2021 07:04:15 +0000</pubDate>
      <link>https://dev.to/es404020/php-deployment-to-ssh-server-using-github-action-and-bash-script-58e</link>
      <guid>https://dev.to/es404020/php-deployment-to-ssh-server-using-github-action-and-bash-script-58e</guid>
      <description>&lt;p&gt;In this tutorial we would lean how to deploy our PHP code to a remote server using github action .&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1.
&lt;/h2&gt;

&lt;p&gt;ssh into remote server by &lt;/p&gt;

&lt;p&gt;for Windows users use Power shell, while Mac users use Terminal.&lt;/p&gt;

&lt;p&gt;yyyy : username&lt;br&gt;
xxxx.xxxx.xxxx : Remote IP address&lt;br&gt;
-p :Reference to a port&lt;br&gt;
ZZZZ: port number &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;In the root directory on your linux server create a bash file and write into by using &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;br&gt;
touch phpdeploy.sh &amp;amp;&amp;amp; vi phpdeploy.sh&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;To start typing on the vi editor type press the "a" key and input the following&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;echo "Deploying changes..."


cd /var/www/html

DIR="ECOMM"

if [ -d "$DIR" ]; then

  cd DIR
  echo "Pull update "
  git  pull 
fi

else 
 echo "Clone repo"
 git clone 
 https://username:password@github.com/username/projectname.git


fi

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To exit insert mode on vi editor press escape key followed by shift column and type wq(save and quite).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-4"&gt;
  &lt;/a&gt;
  Step 4
&lt;/h2&gt;

&lt;p&gt;This is our final step, this involves creating our .github/main.yaml file in the root of our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name:project name
on:
  push:
    branches: main
jobs:
  build-and-deploy:
    name: Build and deploy next site
    runs-on: ubuntu-latest
    steps:
        - name: copy file via ssh key
        uses: appleboy/scp-action@master
        env:
          HOST:  XXXXXXX
          PORT:  XXXXX
          USERNAME:  XXXXX
          PASSWORD: XXXXXX
          command_timeout: 100m
          script: sh phpdeploy.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For every time your code is merger to "main" branch  the yaml file above would execute.Thanks for reading.&lt;/p&gt;

</description>
      <category>php</category>
      <category>github</category>
      <category>devops</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Why I'm excited about web3.0</title>
      <author>Eda</author>
      <pubDate>Wed, 29 Dec 2021 06:59:04 +0000</pubDate>
      <link>https://dev.to/edatweets_/why-im-excited-about-web30-1i94</link>
      <guid>https://dev.to/edatweets_/why-im-excited-about-web30-1i94</guid>
      <description>&lt;p&gt;You may have heard of web3. It made quite the buzz this year; it seems like people either love it or hate it. Honestly, I didn't know what web3 was until I somehow ended up in the web3 world itself. I didn't even know that the traditional tech world, which I am in, is called the web2 world (ps: no one calls it web2 there).&lt;/p&gt;

&lt;p&gt;After months of experimenting, learning and building in the web3 world, I decided it's time to explain how I see web3, why I'm excited about it, alongside some of the challenges.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-background"&gt;
  &lt;/a&gt;
  The background
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-even-is-web1-and-web2"&gt;
  &lt;/a&gt;
  What even is web1 and web2?
&lt;/h2&gt;

&lt;p&gt;To understand web3, we first need to understand the evolution of the web. The web has evolved a lot since it got into our lives: web1, web2 and web3 as terms to describe the different eras.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Web1&lt;/strong&gt; is the first web era, also known as the &lt;strong&gt;read-only web&lt;/strong&gt;. Web1 roughly covers the years between 1990-2005. During this period, users were mainly consumers of the technology—an era when static websites were a thing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then came &lt;strong&gt;web2&lt;/strong&gt;. Web2, the &lt;strong&gt;read-write web&lt;/strong&gt;, started around 2005 and is mainly used today. The web became a place where anyone can create content. It became a new collaborative and interactive environment. Social media has been a significant catalyst for web2. It's never been easier to upload a cat photo to Instagram, celebrate birthdays from Facebook and chat via Facetime.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, it went from only super shady coders doing something on web1 to making it so easy that now everyone can easily use web2. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Here's a great intro video for the eras of the web by Whiteboard Crypto -&lt;a href="https://www.youtube.com/watch?v=nHhAEkG1y2U&amp;amp;ab_channel=WhiteboardCrypto"&gt;What is Web 3.0? (Explained with Animations)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-issues-with-web2"&gt;
  &lt;/a&gt;
  What are the issues with web2?
&lt;/h2&gt;

&lt;p&gt;Web2 is &lt;strong&gt;highly centralized&lt;/strong&gt;. In web2, large companies own servers that provide messaging, searching, storing etc. These companies have complete control and ownership over the services they provide.&lt;/p&gt;

&lt;p&gt;You need to agree to the terms and services to use the platforms. This makes sense as the companies pay to operate these servers and provide you with certain services. That been said, with every term and condition agreement, we &lt;strong&gt;give the ownership and control of our data&lt;/strong&gt;. Companies use this data to monetize their platform; it's fair to say that many large companies solely exist to collect data. Not to get into many buzzwords, but this is also called the &lt;a href="https://en.wikipedia.org/wiki/Data_economy"&gt;&lt;strong&gt;data economy&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Aside from the issues with companies using and selling our data, these entities are the &lt;strong&gt;primary targets for hackers&lt;/strong&gt;. Cyberattacks and data breaches are inevitable when there is a single point of failure.&lt;/p&gt;

&lt;p&gt;Last but not least is the &lt;strong&gt;control that the centralized cooperations&lt;/strong&gt; have. They can change the product and the features anytime, affecting others using their platforms. Companies also have the power to censor and block any account.&lt;/p&gt;

&lt;p&gt;In this environment, we see web3 emerging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-get-into-web3"&gt;
  &lt;/a&gt;
  How did I get into web3?
&lt;/h2&gt;

&lt;p&gt;Before moving on to what web3 is, I want to explain how I ended up here. Because quite honestly, it wasn't due to the issues in the web2 world. I got in as an investor (sounds cooler than just saying money), but I saw all the prices going up and tried to give it a go. You can read more about how I got into web3 in this &lt;a href="https://eda.hashnode.dev/my-web3-journey-day-50-of-100daysofweb3"&gt;post&lt;/a&gt;. In short, after getting in for the money, I fell in love with the technology and community. I started to learn, build, contribute, and that's how my web3 journey started.&lt;/p&gt;

&lt;p&gt;The way I see it is that there are these problems in web2, but there's no denying that it's a working system and has great benefits. The disadvantages feel like something most people accept without diving deep when using web2 platforms. People love to use Instagram, TikTok, Google, Twitter etc. I did too, but &lt;strong&gt;once I learned that an alternative exists, I started to dig deeper and ask interesting questions; that was a turning point for me.&lt;/strong&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#web3"&gt;
  &lt;/a&gt;
  Web3
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#what-is-web3"&gt;
  &lt;/a&gt;
  What is web3?
&lt;/h2&gt;

&lt;p&gt;Web3 is mainly described as &lt;strong&gt;the decentralized web&lt;/strong&gt;; it's still a term under construction.&lt;/p&gt;

&lt;p&gt;Here is a more detailed definition that I enjoyed from &lt;a href="https://www.psl.com/feed-posts/web3-engineer-take"&gt;this article&lt;/a&gt; by Dave Peck &amp;amp; the PSL Team:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Web3” is the name* given to a suite of peer-to-peer technologies — particularly blockchains and distributed filesystems (like IPFS)— that are used to build modern “decentralized apps”, or dApps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Essentially it's &lt;strong&gt;a group of technologies that are all decentralized and used to create decentralized applications.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;This means that in web3, there isn't any single company in control but instead individual contributors that own and control the underlying technology stack. So basically, now service providers and users become the same person. Decentralization takes away the power from a single entity.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-would-anyone-want-to-become-a-service-provider"&gt;
  &lt;/a&gt;
  Why would anyone want to become a service provider?
&lt;/h2&gt;

&lt;p&gt;Now, this is where &lt;strong&gt;cryptocurrencies&lt;/strong&gt; come into play.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cryptocurrencies are the economic incentives given to network contributors&lt;/strong&gt; (aka service providers). Each contributor provides resources to the network and gets rewarded in cryptocurrencies. Anyone can become a service provider, like you and me. &lt;/p&gt;

&lt;p&gt;Consumers pay with cryptocurrencies to use the services. So it's a &lt;strong&gt;different economic relationship from the traditional web world that we know&lt;/strong&gt;. &lt;em&gt;For example, in web2, a user might pay AWS or Microsoft for cloud services; in web3, the money goes to the network participants.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;There is value for both the creator and the consumer of the network. &lt;strong&gt;It's a relationship based on the protocol rules without any entity in between.&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-this-blockchain-thing"&gt;
  &lt;/a&gt;
  What about this "blockchain" thing?
&lt;/h2&gt;

&lt;p&gt;Today we mainly see the use of &lt;strong&gt;decentralized blockchain technology&lt;/strong&gt; for building web3. &lt;/p&gt;

&lt;p&gt;Now two important notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A blockchain does not have to be decentralized. I mostly see people take decentralization when they refer to blockchain technology. However, blockchain does not imply decentralization.&lt;/li&gt;
&lt;li&gt;Web3 does not have to use blockchain technology. In the context of Ethereum, that is the technology used. However, keep in mind that web3 and blockchain are not the same things.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, &lt;strong&gt;blockchain is a shared ledger&lt;/strong&gt; where each transaction is recorded and shared between the participants. Instead of having a central location for information, the information is shared among multiple computers on the network.  &lt;/p&gt;

&lt;p&gt;There are different layers to the web3 technology stack—which we will not cover in this post. Instead, here's a great &lt;a href="https://edgeandnode.com/blog/defining-the-web3-stack"&gt;post&lt;/a&gt; by Nader that I'd highly recommend if you'd like to dive deeper into the tech stack. &lt;/p&gt;

&lt;p&gt;Essentially, in web3, there isn't any person or marketplace in the middle, but instead, &lt;strong&gt;there are protocols governed by network contributors which have economic incentives to participate.&lt;/strong&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-am-i-excited-about-web3"&gt;
  &lt;/a&gt;
  Why am I excited about web3?
&lt;/h2&gt;

&lt;p&gt;Here are what I'm most excited for:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Individual ownership and control&lt;/strong&gt;: people can own and control what they create on web3. For example, you can have your self-sovereign identity without relying on any identity provider or you could create a blog post on a user-owned blogging platform where the content is yours.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://academy.binance.com/en/glossary/trustless"&gt;&lt;strong&gt;Trustless&lt;/strong&gt;&lt;/a&gt;: the web2 world is based on trust. We trust the centralized cooperations to provide services and give them control over our data. It's a single point of control and thus trust, which creates a massive power imbalance. Instead, in web3, there are protocols that the users can directly interact with; there isn't any marketplace in between. Users do not need to trust anyone in the middle to utilize the services.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Open and Global Ecosystem&lt;/strong&gt;:  The services and protocol are global and available to everyone regardless of location, age, sex etc. Every single contributor has a specific economic incentive to participate. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Boost of Innovation&lt;/strong&gt;: advertising is the dominant revenue model for the web that we know of today. Much time and energy is spent on advertising and learning the consumer better to show them the correct clothing item or even certain news. Alongside this, the boundaries of the web2 world are in some ways defined and limited. In web3, there is much room to explore and experiment, it raises many interesting questions, and people can try new things. I'm amazed when I hear about what some projects are trying to do. &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you may be asking why I did not mention decentralization here. The reason being is that these properties are only possible with decentralization, so it's not the goal itself but the core component to get there. &lt;/p&gt;

&lt;p&gt;The more people contribute, the more decentralized the underlying technology becomes. Recall that this technology is very new, so we yet need to understand the degree of decentralization and how to distribute cryptocurrencies in the best way. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-the-cons-of-web3"&gt;
  &lt;/a&gt;
  What about the cons of web3?
&lt;/h2&gt;

&lt;p&gt;Here are some of the challenges I see for web3:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Regulations&lt;/strong&gt;: there's no regulatory clarity. Most of the space is experimental without any guidelines. This creates an uncertain environment for everyone participating.
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Language&lt;/strong&gt;: There seems to be an invisible barrier of entry; at least, that was the case in my experience. There are too many new terminology and abbreviations. Alongside these, the false and overly-optimistic information make it complicated to understand. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Monetary Incentives&lt;/strong&gt;: Custodial wallets are growing faster than non-custodial; more people seem to be interested in the money than the tech. This does not speak well on the promise of decentralization. Additionally, there are "maxi's" (people who only like their coins and tokens, hate all the others), which creates a lot of intense discussions in the space. It's hard to tell if people believe in a particular tech or if it's their monetary incentives.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;The Narrative&lt;/strong&gt;: there are a lot of opposing views on crypto. I constantly find myself explaining why I'm interested in the technology and then get the response: "but bitcoin is used for illegal activities". It takes time to change this, and we need concrete killer-use cases to do so. &lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;Centralized platforms have been the standard for so long that it is hard to imagine otherwise. However, there's no denying the issues of web2. Web3 is reshaping the web, redesigning at its core, and I'm super excited to see what it will bring!&lt;/p&gt;

&lt;p&gt;This post is my take on web3, and I'm sure there's more to learn as we see web3 evolving. &lt;/p&gt;

&lt;p&gt;Thanks for reading! If you have any questions or comments, drop them below or reach out to me from &lt;a href="https://twitter.com/edatweets_"&gt;Twitter&lt;/a&gt;. I'd love to hear from you!&lt;/p&gt;

</description>
      <category>web3</category>
      <category>beginners</category>
      <category>blockchain</category>
      <category>ethereum</category>
    </item>
    <item>
      <title>My New Python library</title>
      <author>Prince Verma</author>
      <pubDate>Wed, 29 Dec 2021 06:46:38 +0000</pubDate>
      <link>https://dev.to/vermaprince123/my-new-python-library-12h6</link>
      <guid>https://dev.to/vermaprince123/my-new-python-library-12h6</guid>
      <description>&lt;p&gt;Check it out my new library :- Share your views&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvamI2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2f4s098r1jf40d0slhz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7zvamI2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2f4s098r1jf40d0slhz.PNG" alt="Image description" width="880" height="379"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>productivity</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to choose a MongoDB shard key</title>
      <author>ChunTing Wu</author>
      <pubDate>Wed, 29 Dec 2021 06:40:36 +0000</pubDate>
      <link>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</link>
      <guid>https://dev.to/lazypro/how-to-choose-a-mongodb-shard-key-3c7d</guid>
      <description>&lt;p&gt;In this article, I will show you what is the ideal pattern of a MongoDB shard key. Although there is a good page on the &lt;a href="https://docs.mongodb.com/manual/core/sharding-choose-a-shard-key/"&gt;MongoDB official manual&lt;/a&gt;, it still not provides a formula to choose a shard key.&lt;/p&gt;

&lt;p&gt;TL;DR&lt;/p&gt;

&lt;p&gt;The formula is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I will explain the reason in the following sections.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#user-scenario"&gt;
  &lt;/a&gt;
  User Scenario
&lt;/h2&gt;

&lt;p&gt;In order to well-describe the formula, I will use an example to illustrate the scenario. There is a collection within application logs, and the format is like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"4df16cf0-2699-410f-a07e-ca0bc3d3e153"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"level"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"high"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"msg"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Database crash"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each log has the same template, &lt;code&gt;id&lt;/code&gt; is a &lt;code&gt;UUID&lt;/code&gt;, &lt;code&gt;ts&lt;/code&gt; is an epoch, and both &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;level&lt;/code&gt; are a finite enumeration. I will leverage the terminologies in the official manual to explain some incorrect designs.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#low-cardinality-shard-key"&gt;
  &lt;/a&gt;
  Low Cardinality Shard Key
&lt;/h2&gt;

&lt;p&gt;From the mentioned example, we usually choose &lt;code&gt;type&lt;/code&gt; at first sight. Because, we always use &lt;code&gt;type&lt;/code&gt; to identify the logging scope. However, if we choose the &lt;code&gt;type&lt;/code&gt; as the shard key, it must encounter a hot-spot problem. Hot-spot problem means there is a shard size much larger than others. For example, there are 3 shards corresponding to 3 types of logs, app, web and admin, the most popular user is on app. Therefore, the shard size with app log will be very large. Furthermore, due to the low-cardinality shard key, the shards cannot be rebalanced anymore.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ascending-shard-key"&gt;
  &lt;/a&gt;
  Ascending Shard Key
&lt;/h2&gt;

&lt;p&gt;Alright, if &lt;code&gt;type&lt;/code&gt; cannot be the shard key, how about &lt;code&gt;ts&lt;/code&gt;? We always search for the most recently logs, and &lt;code&gt;ts&lt;/code&gt; are fully uniform distributed, it should be a proper choice. Actually, no. When the shard key is an ascending data, it works at the very first time. Nevertheless, it will result in a performance impact soon. The reason is &lt;code&gt;ts&lt;/code&gt; is always ascending, so the data will always insert into the last shard. The last shard will be rebalanced frequently. Worst of all, the query pattern used to search from the last shard as well, i.e. the search will often be the rebalance period.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random-shard-key"&gt;
  &lt;/a&gt;
  Random Shard Key
&lt;/h2&gt;

&lt;p&gt;Based on the previous sections, we know &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;ts&lt;/code&gt; all are not good shard key candidates. Thus, we can use &lt;code&gt;id&lt;/code&gt; as the shard key, so that we can spread the data evenly without frequent changes. This approach will work fine when the data set is limited. After the data set becomes huge, the overhead of rebalance will be very high. Because the data is random, MongoDB has to random access the data while rebalancing. On the other hand, if the data is ascending, MongoDB can retrieve the data chunks via the sequential access.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h2&gt;

&lt;p&gt;A good MongoDB shard key should be like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;{coarselyAscending : 1, search : 1}&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In order to prevent the random access, we choose the coarsely ascending data be the former. This pick also won't meet the problem of frequently rebalancing. And we put a search pattern on the latter to ensure the related data can be located at the same shard as much as possible. In our example, I will not only choose the shard key but also redesign our search pattern. The &lt;code&gt;ts&lt;/code&gt; is fine to address the log at the specific time; however, it is a bit inefficient for a time range query like from 3 month ago til now. Hence, I will add one more key, &lt;code&gt;month&lt;/code&gt;, in the document, so we therefore can leverage the MongoDB date type and make a proper shard key. The collection will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;4df16cf0-2699-410f-a07e-ca0bc3d3e153&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;level&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;high&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1635132899&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database crash&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;month&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// only month&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And, the shard key is &lt;code&gt;{month: 1, type: 1}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The key point here is we use &lt;code&gt;month&lt;/code&gt; instead of &lt;code&gt;ts&lt;/code&gt; to avoid frequently rebalaning. The &lt;code&gt;month&lt;/code&gt; is not made just for the shard key; on the contrary, we also use it for our search pattern. Instead of calculating the relationship between timestamp and the date, we can use &lt;code&gt;getMonth&lt;/code&gt; to find results faster. For instance,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setMonth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getMonth&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//1 month ago&lt;/span&gt;
&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;month&lt;/span&gt;&lt;span class="p"&gt;:{&lt;/span&gt;&lt;span class="na"&gt;$gte&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To sum up, this article provides the concepts of designing MongoDB shard key. You might not have a coarsely ascending data so, but you can refer to the concepts and find out a proper key design for your applications.&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>distributedsystems</category>
      <category>bigdata</category>
    </item>
    <item>
      <title>OOP in Python </title>
      <author>Md Shahriyar Al Mustakim Mitul</author>
      <pubDate>Wed, 29 Dec 2021 06:39:03 +0000</pubDate>
      <link>https://dev.to/mitul3737/oop-in-python-562k</link>
      <guid>https://dev.to/mitul3737/oop-in-python-562k</guid>
      <description>&lt;p&gt;Requirement: List, Dictionary , Function etc&lt;/p&gt;

&lt;p&gt;So, OOP is basically programming with Object&lt;br&gt;
So, What is Object? To know this, you have to know what is Class? &lt;br&gt;
Okay , do know about string? Let's see what are there in the directory of string&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print(dir(str))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'removeprefix', 'removesuffix', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;so, what are they? There are methods under "str" class&lt;br&gt;
for example: upper is a method and &lt;strong&gt;doc&lt;/strong&gt; is a private method&lt;br&gt;
and method is mainly function within a class . Nothing else!&lt;/p&gt;

&lt;p&gt;So , you have a little knowledge of "class" now&lt;/p&gt;

&lt;p&gt;Let's create a class named example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example:
    print("Congratulations! you have created your first class")

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Congratulations! you have created your first class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now we will create method within the class and remember that, while you create the method, you will have to give "self" parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example:
    def hello_world(self):
        print("Created 1st method")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now the question is that what is self? this self is basically to differ from other class . But to know about this, you need to know what is object. You may consider object/instance as a child of a class. Let's create a class:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def hello_world(self):
        print("Created 1st method")


object=example1()# created an object
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use the class, you just need  to create an object with the class name and you can then use all the method and variable within the class. Let's create an object and use it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
      def hello_world(self):
          print("Hello world")

      def details(self):
          print("We are learning OOP")

object1=example1()
object1.details()#using details method

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;We are learning OOP
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have created an object and used details method of the class through the object&lt;/p&gt;

&lt;p&gt;Now let's assume , you want to give some input and then work depending on those input, you can use &lt;strong&gt;init&lt;/strong&gt; method for that . Basically &lt;strong&gt;init&lt;/strong&gt; method is made to do must things of a class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self):
        print("Hey! used the __init__ method")

    def hello_world(self):
          print("Hello world")

    def details(self):
          print("We are learning OOP")

object1=example1()


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Hey! used the __init__ method
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, look here we created an object but did not call any method , still this is printed . The reason is that, we have added that under &lt;strong&gt;init&lt;/strong&gt; . so these sort of things are done using &lt;strong&gt;init&lt;/strong&gt;&lt;br&gt;
.&lt;/p&gt;

&lt;p&gt;Now, let's take some input while creating an object and use them .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self,name, country):

        self.variable_1=name
        self.variable_2=country
        print(self.variable_1)
        print(self.variable_2)

object1=example1("Mitul", 'Bangladesh')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here, while creating the object we are taking 2 values. Name and country name. and then look def &lt;strong&gt;init&lt;/strong&gt;(self,name, country) here, we have set 3 parameter. self,name and country . Self is a must but other 2 are taken for 2 input we will take while creating an object.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self,name, country):

        self.variable_1=name
        self.variable_2=country
        print(self.variable_1)
        print(self.variable_2)
        print("-----------")

object1=example1("Mitul", 'Bangladesh')
object2=example1('Karim', "India")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now , you can see that we have 2 objects now and we can use as many time as we want providing name and country &lt;br&gt;
Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mitul
Bangladesh
-----------
Karim
India
-----------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can again provide default values for variables within &lt;strong&gt;init&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class example1:
    def __init__(self,name, country="default"):

        self.variable_1=name
        self.variable_2=country
        print(self.variable_1)
        print(self.variable_2)
        print("-----------")

object1=example1("Mitul")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Mitul
default
-----------
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's know more about self using 2 class&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#class 1
class Hospital:
    def __init__(self,name):
           self.name=name
           self.d_dict={}
           self.p_dict={}
           self.d_count=0
           self.p_count=0

    def addDoctor(self,var):
        self.d_dict[var.d_id]=[var.d_name,var.d_spe]
        self.d_count+=1


    def getDoctorByID(self,val):
        if val in self.d_dict.keys():
            return f"Doctor's ID:{val}\nName:{self.d_dict[val][0]}\nSpeciality:{self.d_dict[val][1]}"


    def allDoctors(self):
        print("All Doctors")
        print(f"Number of Doctors: {self.d_count}")
        print(self.d_dict)

#class 2
class Doctor:
    def __init__(self,id,occ,name,spe):
        self.d_id=id
        self.d_occ=occ
        self.d_name=name
        self.d_spe=spe



h = Hospital("Evercare")# created an object with hospital name and Hospital class
d1 = Doctor("1d","Doctor", "Samar Kumar", "Neurologist") #created an object with Doctor class and with id, occupation , name , speciality 
h.addDoctor(d1) #used a method of Hospital class . Notice h is not an object under Doctor class but addDoctor is under the class Doctor. So, we are basically using a method called addDoctor with an object not created from his own class

print(h.getDoctorByID("1d"))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Doctor's ID:1d
Name:Samar Kumar
Speciality:Neurologist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, don't think about the code. Here we created "h" object through Hospital class and "d1" through Doctor class . so we used "getDoctorById" method  through the object "h" and here into the code, while we used this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    def addDoctor(self,var):
        self.d_dict[var.d_id]=[var.d_name,var.d_spe]
        self.d_count+=1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;if you check the line self.d_dict[var.d_id]=[var.d_name,var.d_spe] here, var refers to object of other class or in a word this is of a different class but self refers here things of only Hospital class. so , self here differs between 2 class . &lt;/p&gt;

&lt;p&gt;So, stay cool. Don't need to panic if you don't realize anything.&lt;/p&gt;

&lt;p&gt;Let's learn things gradually to master OOP&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Public, Protected &amp;amp; Private Variable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Public variable : It can be used outside the class and in other class too&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    numberOfWheels=4

class Bmw(Car):
    def __init__(self):
        print("Inside the BMW Class",self.numberOfWheels)

car=Car()
print(car.numberOfWheels)#used outside of the class
bmw=Bmw()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;4
Inside the BMW Class 4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Protected Variable: This variable can be used in other class and also outside of the class but you need to use "_" to create this sort of variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    _color = "Black" #proteced variable

class Bmw(Car):
    def __init__(self):
        print("Inside the BMW Class",self._color)#used within a different class

car=Car()
print(car._color)#used outside of the class
bmw=Bmw()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Black
Inside the BMW Class Black
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Private Variable: You cannot use Private variable outside a class but use it within a class . Don't forget to use "__" before the variable&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    __yearOfManufacture = 2017

    def Private_key(self):
        print("Private attribute yearOfManufacture: ",car.__yearOfManufacture)  # private variable only works with its own class


car=Car()
car.Private_key()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Private attribute yearOfManufacture:  2017
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Example using all of the variables&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#Public=membername
#Protected=_memberName
#Private=__memberName
class Car:
    numberOfWheels=4
    _color="Black"
    __yearOfManufacture=2017

    def Private_key(self):
        print("Private attribute yearOfManufacture: ", car.__yearOfManufacture) #private variable only works with its own class


class Bmw(Car):
    def __init__(self):
        print("Protected attribute color",self._color)#By using Inheritence we got Car class's variable

car=Car()
print("Public attribute numberOfWheels",car.numberOfWheels)
bmw=Bmw() # while we create this object . things under it's __init__ will be printed
car.Private_key()

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Public attribute numberOfWheels 4
Protected attribute color Black
Private attribute yearOfManufacture:  2017
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Class variable &amp;amp; Instance Variable&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instance Variable: Instance variable is variable dealing with the instance/object . You can change it's value outside of the class. You can access Instance variable by &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Book():

    def __init__(self):
        self.x = 100  # instance variable

    def display(self):
        print(self.x)


b = Book()
print(b.x)  # printing instance variable

b.x=101 #changing the value of x
print(b.x)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;100
101
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Class Variable: Class Variable is valid for the class and can be called with its &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Book():
    x = 5  # class variable
    y=6

    def __init__(self):
        self.x = 100  # instance variable

    def display(self):
        print(self.x)


b = Book()
print("class variable",Book.x)  # printing class variable
print("instance variable",b.x)  # printing instance variable
print("class variable",Book.y)

#changng the class variable changes the value for class and instance
Book.y=7
print("class variable",Book.y)
print("instance variable",b.y)

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class variable 5
instance variable 100
class variable 6
class variable 7
instance variable 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Instance method, Class method ,Static method&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Instance method: Instance method is method which can be used for instance/object .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():

    def __init__(self,x):
        self._x=x

    def method1(self):#instance method
        print(self._x)


value=MyClass(100)
value.method1()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;100
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Class method: class method can be used by the class and you have to create @classmethod to create a class method and it can be accessed through  . Again, you have to set cls as parameter of the class method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():
    a=5

    #class method
    @classmethod
    def method2(cls): #cls refers to class object
        print(cls.a)

MyClass.method2()#calling class method (prints 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But,if you don't want to use "cls", you can use your desired parameter name&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():
    a=5


    #class method
    @classmethod
    def method2(class_method): #cls refers to class object
        print(class_method.a)


MyClass.method2()#calling class method (prints 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;5
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Static Method: Static method does not have any must parameter like self or cls . It just works like a random function we used to make&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MyClass():

    @staticmethod
    def method3(m,n): #takes 2 value
        return m+n #returns their sum

object=MyClass()
print(object.method3(10,20))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;30
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;property method&lt;/strong&gt;&lt;br&gt;
To get value from a method, you may set it as a property method using @property before the method name . You can access the property method using  . Don't use () at the end of the method name .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self, x, y):
        self._x = x
        self._y = y

    @property  # to get any value using this method written  as   object.method or, p.value not like p.value()
    def value(self): #property method
        return self._x


p = Product(23, 24)
print(p.value) # you cannot use p.value()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;23
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again you can set value of the property  method by using &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self, x, y):
        self._x = x
        self._y = y



    @property  # to get any value using this method written  as   object.method or, p.value not like p.value()
    def value(self):
        return self._x

    @value.setter  # to set  value
    def value(self, val):
        self._x=val


p = Product(23, 24)
print(p.value)

p.value=100
print("After setting the new value, it is now",p.value)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;23
After setting the new value, it is now 100

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To delete a value from property method, you can use &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self, x, y):
        self._x = x
        self._y = y



    @property  # to get any value using this method written  a variable ex: object.method or, p.value not like p.value()
    def value(self):
        return self._x

    @value.setter  # to set a function to assign value
    def value(self, val):
        self._x = val

    # while we delete a value,this method will be applied ex: del p.value
    @value.deleter
    def value(self):
        print('Value  deleted')


p = Product(12, 24)
print("Property object has the 1st value",p.value)
#to delete the value use del and then objectname.variable name
del p.value
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Property object has the 1st value 12
Value  deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Dispatch method&lt;/strong&gt;&lt;br&gt;
Dispatch method is used to work with specific thing . for example if you want to work with 3 integers or 3 float or float and an integer, you can create a custom method. &lt;br&gt;
Note: Don't forget to install multipledispatch package &lt;/p&gt;

&lt;p&gt;for example to work with 3 integers, you can use  and then your desired method with 4 parameters including self .&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@dispatch(int,int,int)#working for 3 integers
    def product(self,a,b,c):
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's check a code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from multipledispatch import dispatch
class my_calculator():

    @dispatch(int,int)#when we have 2 input, it will work
    def product(self,a,b):
        print("Product of 2 integers : ",a*b)

    @dispatch(int,int,int)#working for 3 integers
    def product(self,a,b,c):
        print("Product of 3 integers : ",a*b)
    @dispatch(float,float,float)#working for 3 floats
    def product(self,a,b,c):
        print("Product of 3 floats : ",a*b*c)
    @dispatch(float,int)#working for a int and a float
    def product(self,c,d):
        print("Product of 1 float and 1 integer : ",c*d)
c1=my_calculator()
c1.product(4,5)
c1.product(4,7,6)
c1.product(4.0,5.0,3.0)
c1.product(4.0,3)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Product of 2 integers :  20
Product of 3 integers :  28
Product of 3 floats :  60.0
Product of 1 float and 1 integer :  12.0
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Magic Method&lt;/strong&gt;&lt;br&gt;
Magic method starts with __ and ends with __&lt;/p&gt;

&lt;p&gt;Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Fraction:
    def __init__(self,nr,dr=1):
        self.nr=nr
        self.dr=dr
        if self.dr&amp;lt;0:
            self.nr*=-1
            self.dr*=-1
        self.__reduce__()

    def show(self):
        print(f'{self.nr}/{self.dr}')



    def __str__(self):
         return f'{self.nr}/{self.dr}'

    def __repr__(self):
         return f'Fraction({self.nr}/{self.dr})'

    def __add__(self, other):#magic method __method__
        if isinstance(other,int):
            other=Fraction(other)
        f=Fraction(self.nr*other.dr+other.nr*self.dr)
        f.__reduce__()
        return f
    def __radd__(self, other):#reverse add
        return self.__add__(other)


    def __sub__(self, other):
        if isinstance(other,int):
            other=Fraction(other)
        f=Fraction(self.nr*other.dr-other.nr*self.dr)
        f.__reduce__()
        return f

    def __mult__(self,other):
        if isinstance(other,int):
            other=Fraction(other)
        f=Fraction(self.nr*other.nr,self.dr*other.dr)
        f.__reduce__()
        return f
    def __eq__(self,other):
        return (self.nr*other.dr)==(self.dr*other.nr)

    def __lt__(self, other):
          return (self.nr*other.dr)&amp;lt;(self.dr*other.nr)

    def __le__(self, other):
          return (self.nr*other.dr)&amp;lt;=(self.dr*other.nr)

    def __reduce__(self):
        h=Fraction.hcf(self.nr,self.dr)
        if h==0:
            return
        self.nr//=h
        self.dr//=h
    @staticmethod
    def something():   pass

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Protected method  , Private method&lt;/strong&gt;&lt;br&gt;
You can use protected method outside of the class but cannot use private method outside of the method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Product:
    def __init__(self):
        self.data1=10
        self._data2=20 #protected variable
    def methodA(self):
        pass
    def _methodB(self): #pprotected  method
        print("Hello to protected method")
    def __methodC(self):#private method
        print("Hola")


p=Product()
print(dir(p)) #You can see additionally _data2', '_methodB', 'data1', 'methodA'
print(p._data2) #accessing the protected variable
p._methodB() #calling the proteced method

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['_Product__methodC', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_data2', '_methodB', 'data1', 'methodA']
20
Hello to protected method
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Operator Overloading&lt;/strong&gt;&lt;br&gt;
To set specific rules for a specific operator, we use operator overloading . For example, &lt;strong&gt;add&lt;/strong&gt; is used for "+" &lt;br&gt;
Check out this link: &lt;a href="https://www.geeksforgeeks.org/operator-overloading-in-python/"&gt;https://www.geeksforgeeks.org/operator-overloading-in-python/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we want to add 2 different object one has 1 and 6 and other has 9 and 3, we will use operator overloading to do so&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def __str__(self): #if asked to print string type
        return "({0},{1})".format(self.x, self.y)

    def __add__(self, other): #works for + opetator
        x = self.x + self.y
        y = other.x + other.y
        return Point(x, y)


p1 = Point(1, 6)#worked for self
p2 = Point(9, 3)#other
print("P1 has 1st value",p1.x)
print("P1 has 2nd value", p1.y)
print("P2 has 1st value",p2.x)
print("P2 has 2nd value", p2.y)
print("Summation of p1+p2 is",p1+p2)#as p1 is first so self is for p1 and p2 gets others


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To realize it in a better way,use Thonny IDE from this link (&lt;a href="https://thonny.org/"&gt;https://thonny.org/&lt;/a&gt;) and paste this code and debug . You can see how the code is proceeding&lt;br&gt;
Ouput:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;P1 has 1st value 1
P1 has 2nd value 6
P2 has 1st value 9
P2 has 2nd value 3
Summation of p1+p2 is (7,12)

Process finished with exit code 0

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Polymorphism&lt;/strong&gt;&lt;br&gt;
There might be method of same name but to use them depending on their class, we use it like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Car:
    def start(self):
        print('Engine started')
    def move(self):
        print('Car is running')

    def stop(self):
        print('Brales applied')

class Clock:
    def move(self):
        print('Tick Tick Tick')

    def stop(self):
        print('Clock needles stopped')

class Person:
    def move(self):
        print('Person walking')
    def stop(self):
        print('Taking rest')
    def talk(self):
        print('Hello')


car=Car()
clock=Clock()
person=Person()

#this method will run with which instance you call it
def do_something(x):
    x.move()
    x.stop()


# calling with car instance
do_something(car) #car is an object of Car class

#calling with clock instance
do_something(clock) # clock is an object of Clock class

#calling with person instance
do_something(person) #person is an object of Person class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Car is running
Brales applied
Tick Tick Tick
Clock needles stopped
Person walking
Taking rest
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Inheritance&lt;/strong&gt;&lt;br&gt;
Let's assume that your college has CSE , BBA department . They have few things in common. All of them have student ID card, they are from he same college . So,, while you want to take all the information of BBA student or CSE student , you can do one thing. You can create a class names Student which works for common purposes and you can create 2 different class which will work with other extra information like BBA Students with have marketing classes where CSE Students will have Labs. So, to work with this code , we can use inheritance . So, while creating BBA Student class , we will use the "Student" class in the peremeter to mean inheritance&lt;br&gt;
Note: Here "Student": class will be called parent class and "BBA Student " class will be student class&lt;/p&gt;

&lt;p&gt;Again , to use something from the parent class, you will have to use &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Student:
    def __init__(self, name='Just a student', dept='nothing'):
        self.__name = name
        self.__department = dept

    def set_department(self, dept):
        self.__department = dept

    def get_name(self):
        return self.__name

    def set_name(self, name):
        self.__name = name

    def __str__(self):
        return f"Name: {self.__name} \nDepartment: {self.__department}\n"



# write your code here
class BBA_Student(Student):
    def __init__(self, name="default", department="BBA"):
        super().__init__(name, department)#used Student class's __init__ method
        print("I am a BBA Students . We do marketing courses")

class CSE_Student(Student):
    def __init__(self,name="default",department="CSE"):
        super().__init__(name,department)#used Student class's __init__ method
        print("I am a CSE Student and I have a lots of lab to complete")

print(BBA_Student('Karim Ali'))#using BBA_Student class inherited Student class
print(CSE_Student('Mitul'))# using CSE_Student class inherited Student class
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;I am a BBA Students . We do marketing courses
Name: Karim Ali 
Department: BBA

I am a CSE Student and I have a lots of lab to complete
Name: Mitul 
Department: CSE

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>oop</category>
      <category>python</category>
    </item>
    <item>
      <title>Stop using Array.map() everywhere 🥵</title>
      <author>Suprabha</author>
      <pubDate>Wed, 29 Dec 2021 06:38:59 +0000</pubDate>
      <link>https://dev.to/suprabhasupi/stop-using-arraymap-everywhere-57lf</link>
      <guid>https://dev.to/suprabhasupi/stop-using-arraymap-everywhere-57lf</guid>
      <description>&lt;p&gt;&lt;span&gt;M&lt;/span&gt;ost of the time I used to see the snippet like this 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet, we are adding &lt;code&gt;fruits&lt;/code&gt; text to the DOM in &lt;code&gt;main&lt;/code&gt; ID.&lt;br&gt;
It seems there is no issue in the above snippet, Though there is one major issue, which we will be going see today.&lt;/p&gt;

&lt;p&gt;Let's understand the issue by definition of &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;map()&lt;/code&gt; method creates a new array populated with the results of calling a provided function on every element in the calling array.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [3, 4, 5, 6]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Using &lt;code&gt;map()&lt;/code&gt; method means returning a new collection of an array.&lt;/p&gt;

&lt;p&gt;As discussed, &lt;code&gt;map()&lt;/code&gt; method always returns a new array, so if you don’t have any use of a new array then never use &lt;code&gt;map()&lt;/code&gt; method.&lt;br&gt;
When you just need to iterate through an array, I will always recommend using other array methods like &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;for..of&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;u&gt;example:&lt;/u&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cherry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#why-do-we-care-about-it"&gt;
  &lt;/a&gt;
  Why do we care about it? 🙄
&lt;/h3&gt;

&lt;p&gt;As we know, &lt;code&gt;map()&lt;/code&gt; method always returns an array. If you just need to update DOM then storing those elements into memory form doesn't add any point.&lt;br&gt;
Of course, for a small chunk of numbers nothing is going to happen, however, if we take a larger number here then it affects the performance side as it will store the value in memory which will be redundant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary-%E2%85%80"&gt;
  &lt;/a&gt;
  Summary  ⅀
&lt;/h3&gt;

&lt;p&gt;Stop using &lt;code&gt;map()&lt;/code&gt; method, if you just need to iterate through an array. &lt;br&gt;
Start using &lt;code&gt;forEach&lt;/code&gt; or &lt;code&gt;for...of&lt;/code&gt; method, if you want to iterate through an array.&lt;/p&gt;

&lt;p&gt;Thanks for reading the article ❤️&lt;br&gt;
Hope this post will be useful!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/suprabhasupi"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aDe0OdcG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/4t25pJE.png" alt="Buy Me A Coffee" width="300" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;
        🌟 &lt;a href="https://twitter.com/suprabhasupi"&gt; Twitter&lt;/a&gt;
      &lt;/td&gt;
      &lt;td&gt;
        📚 &lt;a href="https://gum.co/css-pseudo-class-elements"&gt; Ebooks&lt;/a&gt;
      &lt;/td&gt;
&lt;td&gt;
        🌟 &lt;a href="https://www.instagram.com/suprabhasupi/"&gt; Instagram&lt;/a&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Pardus 21'de tümü-rakam kullanıcı sorunu çözümü</title>
      <author>Ali Orhun Akkirman</author>
      <pubDate>Wed, 29 Dec 2021 06:30:36 +0000</pubDate>
      <link>https://dev.to/aciklab/pardus-21de-tumu-rakam-kullanici-sorunu-cozumu-4n4d</link>
      <guid>https://dev.to/aciklab/pardus-21de-tumu-rakam-kullanici-sorunu-cozumu-4n4d</guid>
      <description>&lt;p&gt;Güncel GNU/Linux işletim sistemlerinde (Örneğin Pardus 21.x veya RHEL 8.x), all-numeric (tümü-rakam) kullanıcı adlarında oluşan problemlerden dolayı özellikle systemd servisindeki güncelleştirmeler sonucunda tümü-rakam kullanıcı oluşturulması engellenmiştir ve bir şekilde oluşturulması durumunda çeşitli işlevselliklerde &lt;a href="https://access.redhat.com/solutions/3103631"&gt;hatalar&lt;/a&gt; oluşmaktadır.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sorunun-belirlenmesi"&gt;
  &lt;/a&gt;
  Sorunun belirlenmesi
&lt;/h2&gt;

&lt;p&gt;Sorun en temel olarak sistemde kullanıcı eklenirken oluşmaktadır. "--force-badname" olarak kullanıcı eklense bile systemd üzerindeki bazı servislerde problem oluşmaya devam etmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;adduser: Please enter a username matching the regular expression configured
via the NAME_REGEX configuration variable.  Use the `--force-badname'
option to relax this check or reconfigure NAME_REGEX.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#domain-ortamlar%C4%B1nda-sorunun-%C3%A7%C3%B6z%C3%BCm%C3%BC"&gt;
  &lt;/a&gt;
  Domain ortamlarında sorunun çözümü
&lt;/h2&gt;

&lt;p&gt;Sorun, tümü-rakam kullanıcı isminden dolayı olduğu için sistemin sağlıklı çalışabilmesi için kullanıcı ismi manipülasyonu gerekmektedir. Kurumsal ortamda kullanıcı ismi olarak &lt;code&gt;12345678911@aciklab.lab&lt;/code&gt; şeklinde bir isim ile problem çözülmektedir. &lt;/p&gt;

&lt;p&gt;Tabi ki bu süreç için daha öncesinde sistemin SSSD ile entegre olacak şekilde domaine alınmış olması gerekmektedir.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sssdconf-kullan%C4%B1m%C4%B1-ile-kullan%C4%B1c%C4%B1-ad%C4%B1-manip%C3%BClasyonu"&gt;
  &lt;/a&gt;
  sssd.conf kullanımı ile kullanıcı adı manipülasyonu
&lt;/h3&gt;

&lt;p&gt;Giriş yapacak kullanıcı isimleri için [domain/aciklab.lab] sekmesi altında aşağıdaki parametrenin eklenmesi gerekmektedir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use_fully_qualified_names = True
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bu satırın eklenmesi sonrasında servisin yenilenmesi gerekecektir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo systemctl restart sssd
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCvoi4OR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0hw1lcoji9czupqid25.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCvoi4OR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0hw1lcoji9czupqid25.png" alt="Image description" width="880" height="459"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lightdm-%C3%BCzerinden-kullan%C4%B1c%C4%B1-ad%C4%B1-ile-giri%C5%9F-yapmak"&gt;
  &lt;/a&gt;
  lightdm üzerinden kullanıcı adı ile giriş yapmak
&lt;/h3&gt;

&lt;p&gt;Varsayılan lightdm ayarlarında daha önce giriş yapılmamış bilgisayarlarda kullanıcı girişi sırasında sadece &lt;code&gt;12345678911&lt;/code&gt; kullanıcı adı yerine &lt;code&gt;12345678911@aciklab.lab&lt;/code&gt; kullanıcı adı ile giriş yapılması gerekmektedir. İlk giriş yaptıktan sonra tekrardan uzun isim yazmak gerekmemektedir. Bunun için &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt; içerisinde aşağıdaki satırın &lt;code&gt;true&lt;/code&gt; olmadığı netleşmelidir.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;greeter-hide-users=false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxbMj_Za--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwfx6zc2bdv3evwgo6pt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZxbMj_Za--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vwfx6zc2bdv3evwgo6pt.png" alt="Image description" width="674" height="361"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>linux</category>
      <category>posix</category>
      <category>systemd</category>
      <category>username</category>
    </item>
    <item>
      <title>10 Small Projects To Practice Html And CSS</title>
      <author>the webdev guy</author>
      <pubDate>Wed, 29 Dec 2021 06:22:26 +0000</pubDate>
      <link>https://dev.to/the_webdev_guy/10-small-projects-to-practice-html-and-css-42km</link>
      <guid>https://dev.to/the_webdev_guy/10-small-projects-to-practice-html-and-css-42km</guid>
      <description>&lt;p&gt;Html and CSS are the basic building blocks in front end development. Having a good command in both of them can help to be a great front end developer. Practicing different Project can help you to learn and grow. &lt;br&gt;
These are 10 Projects with attached tutorial.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-build-animated-and-creative-our-teams-section"&gt;
  &lt;/a&gt;
  1. Build Animated and Creative Our Teams Section
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o03MpPrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rig28gtm5djtveew1z4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o03MpPrT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8rig28gtm5djtveew1z4.png" alt="Project Image" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href=""&gt;https://www.youtube.com/watch?v=T0RBuU_jclU&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-about-us-section"&gt;
  &lt;/a&gt;
  2. About Us Section
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S4q5Js0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsw6wv7pgra31mri6p3n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S4q5Js0y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nsw6wv7pgra31mri6p3n.png" alt="About Us Image" width="727" height="286"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link -&lt;a href=""&gt;https://youtu.be/cWHWJyHunD0&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-accordion-create-faq-section"&gt;
  &lt;/a&gt;
  3. Accordion - Create FAQ Section
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TRVlFp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19b1lkiujryh5joqb5bn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TRVlFp3D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/19b1lkiujryh5joqb5bn.png" alt="Accordion the webdev guy" width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href=""&gt;https://youtu.be/JnYVgNe_Bx0&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-course-enrollment-card"&gt;
  &lt;/a&gt;
  4. Course Enrollment Card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xhvXILOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vcvk0wakjxutrc3dsxz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xhvXILOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vcvk0wakjxutrc3dsxz.png" alt="Course Enrollment the webdev guy" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href="https://youtu.be/uMccYWjLMh8"&gt;https://youtu.be/uMccYWjLMh8&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-newsletter-subscription-form"&gt;
  &lt;/a&gt;
  5. Newsletter Subscription Form
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bLkdiFr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5nebdznwhyl6dw80maq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bLkdiFr9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e5nebdznwhyl6dw80maq.png" alt="Newsletter Subscription the webdev guy" width="880" height="410"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href=""&gt;https://youtu.be/K90-ihhUZRc&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-portfolio-card"&gt;
  &lt;/a&gt;
  6. Portfolio Card
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FWTfl_Ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4w4xolfnm7osyjne1rw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FWTfl_Ua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e4w4xolfnm7osyjne1rw.png" alt="Portfolio Card the webdev guy" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href=""&gt;https://youtu.be/5KdgpMr0CmU&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-preview-components"&gt;
  &lt;/a&gt;
  7. Preview Components
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mNbuwFhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c68e9jf33e9wt6m4mdme.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mNbuwFhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c68e9jf33e9wt6m4mdme.png" alt="Preview Components the webdev guy" width="880" height="443"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href=""&gt;https://youtu.be/-YcERQVI1Lw&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-pricing-cards-for-website"&gt;
  &lt;/a&gt;
  8. Pricing Cards For Website
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1HfXU2To--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0m3o4p6l6j4d1rgydlt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1HfXU2To--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t0m3o4p6l6j4d1rgydlt.png" alt="Price Cards the webdev guy" width="880" height="377"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href=""&gt;https://youtu.be/plT52cddvGA&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-our-skills-section"&gt;
  &lt;/a&gt;
  9. Our Skills Section
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--282GcA7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ir4xpst2bv5ffclftfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--282GcA7I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ir4xpst2bv5ffclftfg.png" alt="Our Skills the webdev guy" width="880" height="376"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href=""&gt;https://youtu.be/Pu2yIVpHp5I&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-event-registration"&gt;
  &lt;/a&gt;
  10. Event Registration
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gteAxLzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay8yj2dshbh7g0imc3ms.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gteAxLzH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ay8yj2dshbh7g0imc3ms.png" alt="Event Registration the webdev guy" width="860" height="421"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tutorial Link - &lt;a href="https://youtu.be/_E4--gQ1lRg"&gt;https://youtu.be/_E4--gQ1lRg&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Blockchain Fundamentals, Cryptocurrencies and Open Source</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:09:57 +0000</pubDate>
      <link>https://dev.to/siddharth2016/blockchain-fundamentals-cryptocurrencies-and-open-source-2235</link>
      <guid>https://dev.to/siddharth2016/blockchain-fundamentals-cryptocurrencies-and-open-source-2235</guid>
      <description>&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;This article is divided into 4 sections, 1&lt;sup&gt;st&lt;/sup&gt; section is about blockchain fundamentals, 2&lt;sup&gt;nd&lt;/sup&gt; section deals with the key features of building a blockchain mobile app, 3&lt;sup&gt;rd&lt;/sup&gt; section dives into cryptocurrency wallets available for us to use and 4&lt;sup&gt;th&lt;/sup&gt; section outlines how the opensource is driving the blockchain revolution.&lt;/p&gt;

&lt;p&gt;You can jump onto any section you like to read, the order of reading these sections are not related.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#blockchain-fundamentals"&gt;
  &lt;/a&gt;
  Blockchain Fundamentals
&lt;/h2&gt;

&lt;p&gt;Blockchain technology is a constantly evolving, secure and shared record-keeping system in which each user has a copy of the data, which can only be modified if all parties involved in a transaction agree. This section examines the fundamentals of blockchain technology.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-blockchain-transaction"&gt;
  &lt;/a&gt;
  A Blockchain Transaction
&lt;/h3&gt;

&lt;p&gt;To understand the fundamentals of the blockchain, we need to understand how a transaction can be added to the existing blockchain. This can be done by going through a few important steps, as illustrated in the below figure.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rXfGZrE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427151158/95A8tJwIo.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rXfGZrE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427151158/95A8tJwIo.jpeg" alt="fig1.jpeg" width="666" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Assume that user 1 wants to send X amount of digital bitcoins to user 2. User 1 then initiates the transaction.&lt;/li&gt;
&lt;li&gt;A transaction is initiated by user 1's node by first making it and then digitally signing it with its private key. A transaction in a blockchain can reflect a range of actions.&lt;/li&gt;
&lt;li&gt;A peer-to-peer (P2P) network broadcasts the desired transaction to each individual computer (or node).&lt;/li&gt;
&lt;li&gt;Individual nodes receive the request and attempt to validate the transaction using cryptographic techniques. The miner node is the final node in the validation chain. These miner nodes are compensated in Bitcoin.&lt;/li&gt;
&lt;li&gt;The verified blocks are now added to the blockchain network. Hashing is used to connect these nodes.&lt;/li&gt;
&lt;li&gt;The approved transactions are then recorded in a public ledger. Transactions are completed and the ledger is updated after the block is added to an existing chain.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#cryptography-techniques-used-in-blockchain"&gt;
  &lt;/a&gt;
  Cryptography Techniques Used in Blockchain
&lt;/h3&gt;

&lt;p&gt;Hashing, public-private key mechanisms, and digital signatures are the key cryptographic techniques used by the blockchain community. In this case, a hash feature is implemented to offer each user the opportunity to view the blockchain in its entirety. Blockchain characteristically uses the SHA-256 hashing algorithm. Public-private key pairs are used to gain access to the information and allow transactions. Digital signatures are also used for multi-signature contracts and digital wallets on the blockchain, as well as to ratify transactions by signing them securely (offline).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-of-a-blockchain-network"&gt;
  &lt;/a&gt;
  Working of A Blockchain Network
&lt;/h3&gt;

&lt;p&gt;In a blockchain network, each node holds a complete copy of the distributed ledger. The four fields of a block in this network are the block number, the data field, the hash value, and the nonce. Miners adjust the value of nonce to make it a suitable number for hashing the value of a block. A nonce is a random whole number that is a 32-bit (4-byte) field that is changed by miners to make it an acceptable number for hashing the value of a block. In addition, the chain of blocks is generated by applying the hash of the previous block to the current block. The previous block's hash is stored in the field prior.&lt;/p&gt;

&lt;p&gt;Four zeros are used to begin the hash value. This determines whether or not a block is valid. Each new hash value is created by combining the old hash value, the new transaction block, and a nonce. The hash cash difficulty factor is determined by the number of leading zeroes required in the hash output. The difficulty is tweaked so that block production stays consistent at about one block per ten minutes. The more difficult it is to alter the blockchain, the tougher it is to overwrite the blockchain and double-spend coins.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;Blockchain technology is widely accepted by a variety of businesses. It has opened up a plethora of opportunities in the areas of healthcare, finance, accountancy and the online marketplace. The adoption of blockchain technology is expected to grow manifold in the coming years, offering quite a wide range of jobs for young aspirants.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#basics-of-building-a-blockchain-app"&gt;
  &lt;/a&gt;
  Basics of Building a Blockchain App
&lt;/h2&gt;

&lt;p&gt;A blockchain stores data in such a way that it is almost impossible to alter or hack it. In this section, we will go through the key features of the blockchain, look at blockchain development platforms, and view the steps in the blockchain mobile app development process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#some-blockchain-apps"&gt;
  &lt;/a&gt;
  Some Blockchain Apps
&lt;/h3&gt;

&lt;p&gt;While blockchain development began with cryptocurrencies, it is no longer limited to them. Blockchain applications have now gone beyond cryptocurrency and into a variety of other sectors. As we all know, the main benefit of blockchain technology is that it ensures maximum data transparency and security, helping businesses and organisations save a significant amount of money on standard security methods.&lt;/p&gt;

&lt;p&gt;The following are some useful blockchain apps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Filament:&lt;/strong&gt; This is an excellent example of a blockchain-based IoT app that uses blockchain data ledger systems to manage data processed by software and microchip hardware. Several linked devices can communicate information over the blockchain and keep in sync with the help of the app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. KYC-chain:&lt;/strong&gt; For many firms, completing Know Your Customer (KYC) documentation is a must. This simple and effective blockchain-based program streamlines the entire process of handling client documentation across administrative and criminal databases in many nations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. BurstIQ:&lt;/strong&gt; BurstIQ is healthcare software that uses Big Data and blockchain technology to allow patients and doctors to share and collaborate on vital medical information.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#development-platforms"&gt;
  &lt;/a&gt;
  Development Platforms
&lt;/h3&gt;

&lt;p&gt;There are more than two dozen blockchain development platforms. A few of them are described below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Multichain:&lt;/strong&gt; With this powerful platform, developers can create and deploy private blockchains that can be used by a variety of businesses.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Hyperledger:&lt;/strong&gt; This distributed ledger technology is used to govern the connected ecosystem of things and supply chains. This advanced blockchain platform has received a lot of acclaims.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Ethereum:&lt;/strong&gt; A versatile opensource blockchain technology, Ethereum is commonly used for decentralised apps, smart contracts and initial coin offerings (ICOs).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. EOS:&lt;/strong&gt; The EOS platform’s goal is to create a reliable smart contract function. It’s also appropriate for modern businesses’ need for highly scalable and decentralised storage and hosting.&lt;/p&gt;

&lt;p&gt;Blockchain systems are available in a wide range of sizes and shapes. Determining which platform is better and more suitable for one's application needs might be confusing. The solution is contingent on the desired capabilities and use-cases.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing the most appropriate platform:&lt;/strong&gt; The key to your project’s success lies in determining the platform’s character. Platforms based on cryptocurrencies as well as those based on smart contracts are available.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decide whether you need smart contracts or not:&lt;/strong&gt; You need to determine if your app needs smart contracts or not.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selecting the consensus protocol:&lt;/strong&gt; The consensus protocol ensures that every new block added to the blockchain is the only version of the truth that all nodes in the blockchain agree on, such as proof of stake, proof of work, proof of elapsed time, and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Choosing the cryptocurrency:&lt;/strong&gt; Another challenge is determining whether or not a cryptocurrency is required.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selecting between a public and private network:&lt;/strong&gt; Based on the requirement, you need to decide whether a public or a private network is needed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#process-of-blockchain-mobile-app-development"&gt;
  &lt;/a&gt;
  Process of Blockchain Mobile App Development
&lt;/h3&gt;

&lt;p&gt;There are mainly five stages in the blockchain app development process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Identify the problem that the blockchain is required to solve:&lt;/strong&gt; To begin, thoroughly examine the problem description and create a full report on it. Consider whether you need to create a new app from scratch or if you can just integrate the blockchain into an existing one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Select the best platform for the app:&lt;/strong&gt; Select the most appropriate platform for your project. Determine if you need a smart contract app or a crypto-transaction app, as well as the type of network and consensus protocol you'll need.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Requirement analysis:&lt;/strong&gt; Begin by doing the requirement analysis and evaluating the app idea’s requirements. Do more brainstorming around the idea and, if possible, fine-tune it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Create a blueprint of the idea:&lt;/strong&gt; Try to develop the proof of concept that will put the entire app concept into a visual structure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Development of the application:&lt;/strong&gt; Develop the application employing best practices. Ensure to build a robust blockchain app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;We’ve covered the basics of blockchain in this essay — its main characteristics, as well as several development platforms and stages for developing blockchain applications. If you find the subject interesting, you can delve deeper into it. There are a variety of resources available on the Internet.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#cryptocurrency-wallets"&gt;
  &lt;/a&gt;
  Cryptocurrency Wallets
&lt;/h2&gt;

&lt;p&gt;Cryptocurrencies are getting entrenched in the global financial system slowly and steadily, with certain companies using these to pay their employees too. Hesitancy with respect to their use is slowly ebbing, and you may run the risk of being behind the times if you don’t stay updated on the latest trends in this domain. This section lists the exchanges and wallets you should be aware of in case you want to buy or trade-in cryptocurrencies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#trends-in-cryptocurrencies"&gt;
  &lt;/a&gt;
  Trends in Cryptocurrencies
&lt;/h3&gt;

&lt;p&gt;Due to the high potential for profit, cryptocurrency trading is considered extremely lucrative, particularly among the younger population. Traditional stock market trading has a lot of restrictions and rules. There are no such limitations in the case of cryptocurrencies, and big profits can be produced immediately. The 'crypto market,' in which 'crypto users' trade various types of cryptocurrencies, is also known as the cryptocurrency industry.&lt;/p&gt;

&lt;p&gt;The price of a BitCoin (BTC) was less than one US dollar around 10 years back when it was launched. Today, its price is more than US$ 30,000. A few months ago, its price touched around US$ 60,000, proving it is a very attractive form of investment.&lt;/p&gt;

&lt;p&gt;The market capitalisation of cryptocurrencies is around 338 million US dollars, with 13,951 BitCoin ATMs located in different parts of the world, as per a report from Statista.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wallets-and-exchanges"&gt;
  &lt;/a&gt;
  Wallets and Exchanges
&lt;/h3&gt;

&lt;p&gt;Currently, there are a number of exchanges in the world that offer platforms and wallets for buying and trading cryptocurrencies. These include Web-based environments as well as apps for Android, iPhone and other mobile phone platforms. Crypto users can buy and sell different currencies that are legal tender around the world with ease on these sites.&lt;/p&gt;

&lt;p&gt;The major worldwide crypto exchanges in the world that provide wallets and Web platforms for cryptocurrency trading are listed in the below figure. In crypto exchanges, pairings refer to the pairs of cryptocurrencies that are used to buy and sell such coins.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgARcKSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427259763/bIN_-rYI3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgARcKSv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427259763/bIN_-rYI3.png" alt="fig2.png" width="880" height="451"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the crypto world, there are two types of exchanges and wallets — centralised and decentralised.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CYI_FVp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427269884/Ao3ACLUK-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CYI_FVp---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427269884/Ao3ACLUK-.jpeg" alt="fig3.jpeg" width="600" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#centralized-exchanges"&gt;
  &lt;/a&gt;
  Centralized Exchanges
&lt;/h4&gt;

&lt;p&gt;The centralised exchanges and wallets are owned by companies or corporate giants, which record the complete Know Your Customer (KYC) details either through video KYC or paper-based KYC. Users can open accounts in these centralised exchanges and then trade in any cryptocurrency.&lt;/p&gt;

&lt;p&gt;The below figure lists some centralized exchanges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3FBfMAa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427285675/PKkGxWZiT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3FBfMAa_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427285675/PKkGxWZiT.png" alt="fig4.png" width="880" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#decentralized-exchanges"&gt;
  &lt;/a&gt;
  Decentralized Exchanges
&lt;/h4&gt;

&lt;p&gt;Decentralised exchanges are platforms on which the account is opened directly without any intermediate company, and trading is done directly by the crypto users.&lt;/p&gt;

&lt;p&gt;The below figure lists some decentralized exchanges.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xIZX-ZeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427313694/LmhcxQcF-.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xIZX-ZeC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1640427313694/LmhcxQcF-.png" alt="fig5.png" width="880" height="746"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;The jury is out on the use of cryptocurrencies because these are sometimes used to circumvent the national money transfer system. Some governments prohibit their use in order to prevent money laundering.&lt;/p&gt;

&lt;p&gt;In order to incorporate the maximum benefits and features into a real-world scenario, the use of cryptocurrencies in any country demands legislation and procedures. The benefits to society and the corporate sector might be substantial if cryptocurrencies are used for real-time applications and e-governance.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#open-source-blockchain-revolution"&gt;
  &lt;/a&gt;
  Open Source Blockchain Revolution
&lt;/h2&gt;

&lt;p&gt;Blockchain is a disruptive technology that is changing the world in a variety of ways. Cryptocurrencies are the most obvious example. This section compares and contrasts this technique with opensource, another revolutionary technology that has transformed software development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blockchain-characteristics"&gt;
  &lt;/a&gt;
  Blockchain Characteristics
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Immutability:&lt;/strong&gt; A hallmark feature of blockchain is that it is incorruptible. Data once saved in a block cannot be changed without breaking the chain.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decentralisation:&lt;/strong&gt; Blockchain does not require a central authority to maintain the ledger. All nodes in the network have a copy of the ledger that gets updated with every transaction.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced security:&lt;/strong&gt; Decentralisation and consensus mechanisms built into blockchain make it highly secure, as every transaction has to be verified with ‘proof of work’.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Distributed:&lt;/strong&gt; The blockchain ledger is not a singular entity in the hands of a few; instead it is a shared entity that is accessible and maintained by everyone in the network.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Transparency:&lt;/strong&gt; Every addition to the blockchain requires consensus from all nodes in the peer-to-peer network. This makes every transaction transparent and public.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#open-source-characteristics"&gt;
  &lt;/a&gt;
  Open Source Characteristics
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Transparency:&lt;/strong&gt; The founding principle of open source is to make the source code of the project public. This enhances the transparency of the project, as every detail that goes into its development can be freely accessed by anyone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced security:&lt;/strong&gt; Finding security loopholes in the software is way easier when the code is non-proprietary and is publicly available. This naturally enhances the security of the software or, at the very least, can help raise public awareness about the potential security-related pitfalls.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collaboration:&lt;/strong&gt; The primary purpose of open source software is to encourage other developers to collaborate and contribute to the development of the software. This makes open source development, by nature, a community experience.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Modifiability:&lt;/strong&gt; Open source software can be modified and re-distributed to solve different problems. This is the case with Linux, as its modified ‘distributions’ are used in various different gadgets and computers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decentralisation:&lt;/strong&gt; One can argue that open source software is not inherently decentralised as making changes to the main project still requires the approval of the project moderator(s) and the owner(s). But if perceived from a different angle, given that the source code can be modified and re-distributed under proper licensing, this gives the developer the autonomy to use the software as and how desired thus making the process decentralised.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#convergent-evolution"&gt;
  &lt;/a&gt;
  Convergent Evolution
&lt;/h3&gt;

&lt;p&gt;Opensource software and blockchain are two independent technologies with different themes and strategies for addressing different problems. When we compare the attributes of blockchain to open source, however, we discover certain similarities.&lt;/p&gt;

&lt;p&gt;In evolutionary biology, the term 'convergent evolution' refers to the occurrence in which animals from distinct time periods or epochs acquire similar characteristics. This can be seen in molecular biology, animal morphology, and even plant morphology. This holds true for technical breakthroughs as well. We produce new technologies every day to address a wide range of problems; nonetheless, there are underlying patterns in the motivations that drive the creation of these technologies.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#winding-up"&gt;
  &lt;/a&gt;
  Winding Up
&lt;/h3&gt;

&lt;p&gt;Blockchain is new, but open source technology has been around for a long time. In my perspective, the rise of open source technology has had a direct impact on the birth of blockchain. Both technologies are focused on transferring power from a small number of people to a big number of people. Both strive to increase product security and transparency while also promoting fairness and collaboration. While the applications of open source and blockchain are diverse, the motives for their creation are similar. It is safe to assume that open source and blockchain share many characteristics in common and are hence the product of technological convergence.&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>cryptocurrency</category>
      <category>opensource</category>
      <category>web3</category>
    </item>
    <item>
      <title>Big Data Open Source Frameworks</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:08:46 +0000</pubDate>
      <link>https://dev.to/siddharth2016/big-data-open-source-frameworks-3app</link>
      <guid>https://dev.to/siddharth2016/big-data-open-source-frameworks-3app</guid>
      <description>&lt;p&gt;Big Data is a term used to define large scale data sets that are too complex to be manipulated with basic DBMS. Handling Big Data requires sophisticated hardware and software technologies.&lt;/p&gt;

&lt;p&gt;Just as open-source has been the primary reason for the Big Data revolution, so has it been at the forefront of developing tools to counter the challenges that we face with the data. And while there are hundreds of popular open-source projects that are focused on Big Data management, in this article, we shall focus on the top three that caught my attention.&lt;/p&gt;

&lt;p&gt;We shall discuss the Hadoop framework, the Spark analytics engine and the Kafka framework.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#is-big-data-hard-to-handle"&gt;
  &lt;/a&gt;
  Is Big Data Hard To Handle?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Almost 90% of the Big Data we produce today is unstructured and there are no predefined models that it adheres to. And there is no quick and easy way to access and analyse unstructured data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not only is Big Data unstructured, but it is also extremely complex. This means traversing through it requires advanced algorithms that are being run on top of grade-A machinery and not everyone can afford that.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have multiple sources from which we accrue data and there are no clean ways to integrate disparate data from so many sources.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With Big Data comes big mistakes. Storing massive and complex data in a secure manner is a really daunting challenge. It is also the need of the hour. Since the beginning of the pandemic, more people are stuck at home with their computers than ever before and cybercrime and data theft have gone up by 400%.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#open-source-softwares"&gt;
  &lt;/a&gt;
  Open Source Softwares
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#hadoop"&gt;
  &lt;/a&gt;
  Hadoop
&lt;/h4&gt;

&lt;p&gt;Developed by the Apache Foundation, Hadoop is a framework for Big Data management. It uses distributed systems architecture, which has the ability to store and easily access vast amounts of data.&lt;/p&gt;

&lt;p&gt;While there are many different types of Big Data management solution software, what makes Hadoop stands out are 3 components, HDFS, MapReduce and YARN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HDFS (Hadoop Distributed File System)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Hadoop Distributed File System (HDFS) is a powerful and dynamic tool that is efficient at handling Big Data. HDFS breaks down Big Data into blocks and the default size of each block is 128MB. This makes accessing data simple, as the HDFS only has to access the specific block of data that the user is searching for. HDFS is a resilient framework, thanks to its replication methodology. To maintain the accessibility of the data even when one of the distributed system blocks is down, HDFS replicates that block data in a three-fold fashion making it robust to avoid failures or inconsistency.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MapReduce&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Storing and accessing Big Data, with all its complications and difficulties, is still the easy part. The real fun begins when we try to process Big Data. MapReduce is exactly what it sounds like, it maps the data followed by reducing it. MapReduce takes the data as input and splits it into different parts. It then maps each individual component within each part. Then the data is shuffled and sorted into clusters of homogenous data. The data is then reduced by integrating homogenous data and assigning IDs, which give the smaller final output.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;YARN (Yet Another Resource Negotiator)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A Hadoop environment is constrained to the number of resources it has, namely, CPUs, memory units, storage space, etc. But since Hadoop is designed to be able to run multiple processes at the same time, a mechanism for allocating resources is necessary to make sure there are no deadlocks and every task is accomplished in its desired time period. Now, YARN comes into play, when a job requires the resources to run, the application manager sends a request to the node manager to allocate the physical resources. The node manager then sends the resources to the resource manager, which assigns the physical resource to the client process.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#spark"&gt;
  &lt;/a&gt;
  Spark
&lt;/h4&gt;

&lt;p&gt;While HDFS, MapReduce and YARN are the three major defining components of Hadoop, the Hadoop ecosystem has more tools to offer when it comes to Big Data processing, one such tool is Apache Spark. Spark is one of the few tools in the industry that combines Big Data analytics tools with Machine Learning and AI. Spark is 100 times faster than MapReduce in processing data. Spark computations are done in memory itself, it has the ability to perform both batch processing real-time processing of data. Spark is also comparatively lightweight as most of it is written in &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Following are the Spark components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spark Core&lt;/li&gt;
&lt;li&gt;Spark SQL&lt;/li&gt;
&lt;li&gt;Spark Streaming&lt;/li&gt;
&lt;li&gt;Spark MLib&lt;/li&gt;
&lt;li&gt;Spark GraphX&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#kafka"&gt;
  &lt;/a&gt;
  Kafka
&lt;/h4&gt;

&lt;p&gt;Apache Kafka is a framework implementation of a software bus using stream processing. If you break down an information transaction on the Internet, it's essentially nothing but an exchange of information between 2 systems which we sometimes call producers and consumers. Each transaction can be thought of as integration between producer and consumer. In order to simplify complex integrations, Kafka acts as a broker between producer and consumer, which can be well integrated with Hadoop and Spark.&lt;/p&gt;

&lt;p&gt;Kafka consists of Brokers and a Zookeeper.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Broker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A broker is a Kafka server that runs in a Kafka cluster. Each broker divides a unique transaction between the producer and consumer into a topic. Now, these topics within the broker are used to consume and broadcast the messages in an asynchronous fashion.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Zookeeper&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In order to define topics and keep a metadata record of all the topics defined in the cluster, Kafka uses Zookeeper which is a replicated distributed log with a file system API built on top. It keeps a record of all the topics within all the nodes and also keeps track of which nodes are down and which are up and running.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-to-go-from-here"&gt;
  &lt;/a&gt;
  Where To Go From Here?
&lt;/h3&gt;

&lt;p&gt;The tools and frameworks discussed in this article are a high-level overview of the innovation and efforts taking place in the Big Data management industry. There are many more open source tools and frameworks that can be learned and used for Big Data management.&lt;/p&gt;

&lt;p&gt;Google all the available resources and check which fits your Big Data management need to the point and become a Big Data Engineer one step at a time.&lt;/p&gt;

&lt;p&gt;Books to check out more on Big Data Engineering:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3DbHhYN"&gt;Big Data Simplified&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3phG2CF"&gt;Big Data Analytics, Introduction to Hadoop, Spark, and Machine-Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3rvFcoE"&gt;Big Data and Analytics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>python</category>
      <category>bigdata</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Scala Vs Python Syntax Cheat Sheet</title>
      <author>Siddharth Chandra</author>
      <pubDate>Wed, 29 Dec 2021 06:06:48 +0000</pubDate>
      <link>https://dev.to/siddharth2016/scala-vs-python-syntax-cheat-sheet-3d26</link>
      <guid>https://dev.to/siddharth2016/scala-vs-python-syntax-cheat-sheet-3d26</guid>
      <description>&lt;p&gt;There are about 8 million Python developers around the world and it's also the top programming language people want to learn, but why is that? Why not any other language but Python? Let me tell you, Python offers a lean learning curve, with just 2-3 days of hands-on Python anyone can start developing applications (they might not be technically sound software initially), it's syntax is one of the easiest to learn due to its plain english like code, it offers flexibility from both domains either object-oriented or functional programming (not so much FP, but it has its benefits) and it is used in almost every field of software engineering.&lt;/p&gt;

&lt;p&gt;The only drawback people face when working with Python is related to its speed of executing programs. But is there any other programming language as easy to understand and to get started to work with? Yep, there is, Scala comes to the rescue!&lt;/p&gt;

&lt;p&gt;Python faces speed issues mainly due to its interpreted nature, whereas Scala is a compiled language that offers dynamic typing as well (close to 90%), many new features in Python like pattern matching are already present in Scala since the beginning, there are awesome syntactic sugars in Scala that allows us to write even less code when compared to Python and also Scala being a functional programming language does not shy away from object-oriented programming as it is run over JVM.&lt;/p&gt;

&lt;p&gt;When it comes to the syntax of these programming languages, there are a lot of similar patterns and some differences as well, but overall they both offer a lean learning curve with endless opportunities in the software engineering world.&lt;/p&gt;

&lt;p&gt;So, let's discuss those similarities and differences in the form of a cheat sheet, which not only helps in refreshing some concepts from Python/Scala but also acts as a guide to learn Python or Scala for someone coming from the Scala or Python background respectively.&lt;/p&gt;

&lt;p&gt;This will be a to-the-point kind of article, with little to no explanation but with necessary links wherever needed.&lt;/p&gt;

&lt;p&gt;So, let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-import"&gt;
  &lt;/a&gt;
  How To Import?
&lt;/h3&gt;

&lt;p&gt;In Python importing a library can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# OR
&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math.pow&lt;/span&gt;

&lt;span class="c1"&gt;# OR
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;

&lt;span class="c1"&gt;# OR
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;squareRoot&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala importing a library can look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math._&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math.BigInt&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;BigInt&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;BigDecimal&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scala.math.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;BigInt&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;BInt&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-declare-variables"&gt;
  &lt;/a&gt;
  How To Declare Variables?
&lt;/h3&gt;

&lt;p&gt;Python offers dynamic typing so you don't need to declare variables beforehand like in C/C++, but you can just type out the variables and use them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;some_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Scala also offers dynamic typing to some extent and infer that type during compile time:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;some_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;  &lt;span class="c1"&gt;// infers it as Int type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-define-conditionals"&gt;
  &lt;/a&gt;
  How To Define Conditionals?
&lt;/h3&gt;

&lt;p&gt;In Python and Scala defining conditionals are more or less similar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Odd"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Zero"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Even"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Odd"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Zero"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Even"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The important thing to note in conditionals is that in Python conditionals are referred to as statements whereas in Scala these are expressions that evaluates to something or nothing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-define-loops"&gt;
  &lt;/a&gt;
  How To Define Loops?
&lt;/h3&gt;

&lt;p&gt;In Python a simple for-loop would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The same for-loop in Scala would look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;until&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;   &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The difference in their respective working behind the scenes, in Scala, is the use of conjunction of &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt; methods whereas in Python it is simple iteration.&lt;/p&gt;

&lt;p&gt;There is a &lt;code&gt;while&lt;/code&gt; loop in Scala, but let's not discuss that, while coding in Scala it is not encouraged to use &lt;code&gt;while&lt;/code&gt; loops.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://stackoverflow.com/questions/49552915/why-are-while-loops-not-recommended-in-scala#:~:text=The%20scala%20style%20checker%20says,%2Ddev.html%23org_scalastyle_scalariform_WhileChecker."&gt;Why are while loops not recommended in Scala?&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-write-methods"&gt;
  &lt;/a&gt;
  How To Write Methods?
&lt;/h3&gt;

&lt;p&gt;In Python, we can simply use the &lt;code&gt;def&lt;/code&gt; keyword to define functions, which are similar to methods in Scala.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_method&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# do something here
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala we can define a method like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;someMethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// do something here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To define functions in Scala, we can use &lt;code&gt;Function&lt;/code&gt; objects or their respective syntactic sugars. To know more about functions and functional programming in Scala, do check &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-3-hep"&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-define-classes-and-objects"&gt;
  &lt;/a&gt;
  How To Define Classes and Objects?
&lt;/h3&gt;

&lt;p&gt;In Python, we can define a class using the &lt;code&gt;class&lt;/code&gt; keyword, the same keyword can be used to define a class in Scala.&lt;/p&gt;

&lt;p&gt;Whereas objects in Scala are singleton instances and similar to what we call static class in other programming languages.&lt;/p&gt;

&lt;p&gt;A class however in Scala can be instantiated using the &lt;code&gt;new&lt;/code&gt; keyword, whereas in Python calling the class directly creates an instance for that.&lt;/p&gt;

&lt;p&gt;In Python:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# do something here
&lt;/span&gt;
&lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Student&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;# creates an instance of class Student
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Scala:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;

&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;student&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;     &lt;span class="c1"&gt;// creates an instance of class Student&lt;/span&gt;

&lt;span class="c1"&gt;// use Object keyword for singleton objects&lt;/span&gt;

&lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;

&lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="n"&gt;aParticularStudent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To know more about classes and objects in Scala, I recommend checking out &lt;a href="https://dev.to/siddharth2016/scala-for-beginners-crash-course-part-2-39bj"&gt;this&lt;/a&gt; article.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#miscellaneous"&gt;
  &lt;/a&gt;
  Miscellaneous
&lt;/h3&gt;

&lt;p&gt;Scala offers 2 more advantages over Python, namely &lt;strong&gt;traits&lt;/strong&gt; and &lt;strong&gt;tail recursion&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Python does not offer tail recursive capabilities to its functions and suffers from stack overflow errors whenever functional programming goes wrong. To know more about why python does not offer tail recursion, you can read &lt;a href="https://neopythonic.blogspot.com/2009/04/tail-recursion-elimination.html"&gt;this&lt;/a&gt; article. However, there is a work-around as described in &lt;a href="https://chrispenner.ca/posts/python-tail-recursion"&gt;this&lt;/a&gt; article using decorators.&lt;/p&gt;

&lt;p&gt;Similarly, Python does not have concepts like traits. A trait is used to describe the quality of a class, whereas in Python you would have to do multiple inheritances to get certain qualities or have to define certain methods within the class definition. Trait allows loose coupling.&lt;/p&gt;

&lt;p&gt;How to define a trait in Scala?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;SomeQuality&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Student&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;SomeQuality&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#wrap-up"&gt;
  &lt;/a&gt;
  Wrap Up
&lt;/h3&gt;

&lt;p&gt;Well, that wraps up this simple Scala Vs Python syntax cheat sheet.&lt;/p&gt;

&lt;p&gt;What else would you add to this cheat sheet? Please let me know in the comments!&lt;/p&gt;

&lt;p&gt;If you are looking to sharpen your coding skills in Python or Scala, then do consider buying these awesome books that go in-depth to let you understand the semantics of the language.&lt;/p&gt;

&lt;p&gt;For Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3k4sVmN"&gt;Python - The Bible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3959lR9"&gt;Python - The Complete Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3hxhjqJ"&gt;Automate The Boring Stuff With Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3AcJgvc"&gt;Python Basics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Scala:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3C4rZ8a"&gt;Scala For The Impatient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3tAluXH"&gt;Scala Programming Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3hnZYAw"&gt;Functional Programming in Scala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amzn.to/3k66Lk1"&gt;Programming Scala&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure to follow me to get regular updates or subscribe so that you never miss my upcoming articles, ranging from &lt;a href="https://dev.toseries/python"&gt;Python&lt;/a&gt; to &lt;a href="https://dev.toseries/computer-vision"&gt;Computer Vision&lt;/a&gt; to &lt;a href="https://dev.toseries/scala"&gt;Scala&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Just starting your Open Source Journey? Don't forget to check &lt;a href="https://github.com/siddharth2016/hello-open-source"&gt;Hello Open Source&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to showcase your Python project or just out there to explore? Check &lt;a href="https://github.com/siddharth2016/awesome-python-repos"&gt;Awesome Python Repos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to make a simple and awesome game from scratch? Check out &lt;a href="https://github.com/siddharth2016/PongPong"&gt;PongPong&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Want to &lt;code&gt;++&lt;/code&gt; your GitHub Profile README? Check out &lt;a href="https://github.com/marketplace/actions/quote-readme"&gt;Quote - README&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Till next time!&lt;/p&gt;

&lt;p&gt;Namaste 🙏&lt;/p&gt;

</description>
      <category>scala</category>
      <category>bigdata</category>
      <category>opensource</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
