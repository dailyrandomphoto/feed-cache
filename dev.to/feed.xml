<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>C++ vocabulary for beginners.</title>
      <author>Calin Baenen</author>
      <pubDate>Sun, 07 Nov 2021 21:51:39 +0000</pubDate>
      <link>https://dev.to/baenencalin/c-vocabulary-for-beginners-4nlj</link>
      <guid>https://dev.to/baenencalin/c-vocabulary-for-beginners-4nlj</guid>
      <description>&lt;p&gt;When I first joined C++, I was confused about some terminology, but now that I've looked it up, I understand now.&lt;br&gt;
I'm here to share my wisdom in the form of a compilation of phrases I've learned.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-lvalue-endraw-and-raw-rvalue-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;lvalue&lt;/code&gt; and &lt;code&gt;rvalue&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;An lvalue, or properly cased, "LValue", stands for "Left Value". Same with "RValue"; it means "Right Value".&lt;br&gt;
A left value is any bit of code that can go on the left side of an expression, and is strictly limited to only being that left-hand of the expression.&lt;br&gt;
Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `x` is an lvalue, and `10` is an rvalue.&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `y` lvalue, `20` rvalue.&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// `y` is an lvalue, `y+x` is an rvalue.&lt;/span&gt;
&lt;span class="c1"&gt;// `y+x` is an rvalue because you can't do&lt;/span&gt;
&lt;span class="c1"&gt;// `int x+y = value`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#-raw-reference-endraw-raw-lvalue-reference-endraw-and-raw-rvalue-reference-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;reference&lt;/code&gt;, &lt;code&gt;lvalue reference&lt;/code&gt;, and &lt;code&gt;rvalue reference&lt;/code&gt;.
&lt;/h2&gt;

&lt;p&gt;A reference is a tool that's used to pass a variable (or its value) around.&lt;br&gt;
Consider the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;updateYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2006&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;updateYear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Prints `2021`.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;They're basically similar to pointers (&lt;code&gt;T* name&lt;/code&gt;), except they're dereferenced when applicable, and are ensured never to be a &lt;code&gt;null&lt;/code&gt;-like value.&lt;br&gt;&lt;br&gt;
What's an lvalue reference? - Well, it's not hard to explain, it's what you you &lt;strong&gt;just&lt;/strong&gt; witnessed.&lt;br&gt;
Reference usually refers to any reference, it's not specific, but before &lt;a href="https://en.cppreference.com/w/cpp/language/reference"&gt;rvalues were added to C++ (in C++11)&lt;/a&gt;, "reference" referred to the only kind of references that existed, lvalue references.  &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#copy-constructor"&gt;
  &lt;/a&gt;
  Copy constructor.
&lt;/h2&gt;

&lt;p&gt;It's exactly what it sounds like, a constructor that copies.&lt;br&gt;&lt;br&gt;
What does it copy? Another instance of the same type.&lt;br&gt;
It creates a new instance of a type using an old instance.&lt;br&gt;&lt;br&gt;
Here's an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The following constructor is a "copy constructor"&lt;/span&gt;
    &lt;span class="c1"&gt;// because it takes an argument of type `Point`,&lt;/span&gt;
    &lt;span class="c1"&gt;// which is the same type as the class it's in.&lt;/span&gt;
    &lt;span class="c1"&gt;// (NOTE: Copying data from `p` isn't a requirement&lt;/span&gt;
    &lt;span class="c1"&gt;//        for a copy-constructor, but doing otherwise&lt;/span&gt;
    &lt;span class="c1"&gt;//        defeats the purpose of having `p`.)&lt;/span&gt;
    &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Point&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// I'm not using a member-initializer list to&lt;/span&gt;
        &lt;span class="c1"&gt;// be beginner friendly.&lt;/span&gt;
        &lt;span class="c1"&gt;// More people know `this.name`/`this-&amp;gt;name` syntax.&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>cpp</category>
      <category>beginners</category>
      <category>programming</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>I Spoke to A Handful of Aspiring Devs- Here's What I Found</title>
      <author>Tatiana</author>
      <pubDate>Sun, 07 Nov 2021 21:50:13 +0000</pubDate>
      <link>https://dev.to/tatianacodes/i-spoke-to-a-handful-of-aspiring-devs-heres-what-i-found-dhc</link>
      <guid>https://dev.to/tatianacodes/i-spoke-to-a-handful-of-aspiring-devs-heres-what-i-found-dhc</guid>
      <description>&lt;p&gt;As a self taught software engineer and maintainer of a large open source programming curriculum, a major passion of mine is giving back and helping other folks break into tech as programmers. While much of my day is spent assisting people with programming questions on Discord, I've started holding virtual "coffee chats" and have spoken to a handful of aspiring software developers looking to break into programming roles over the last week and a half. I find that having a face to face, one on one interaction allows me to gain a better picture of what these non-traditional developers are working with and aspiring towards compared to text based interactions. &lt;/p&gt;

&lt;p&gt;Many of these individuals have gone the bootcamp route, but haven't yet clinched a role after graduating some months ago. Others are just starting out on the self-taught track and are looking for the right motivation and path to take. Despite being at different points in their journey, I found that there were some standout roadblocks or misconceptions that were shared amongst these soon-to-be engineers.&lt;/p&gt;

&lt;p&gt;Here are a few areas of focus that I would like to share with you all that I'm seeing amongst those I have consulted with. While I am not a career coach or recruiter, I know what worked for me, and what absolutely did not. And interestingly enough, nearly all of the below items were things I found myself doing (or not doing) at some point in my journey that ended up being things that didn't work out for me, so these coffee chats often felt like looking in a mirror at myself from about two years ago.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#always-have-something-in-flight"&gt;
  &lt;/a&gt;
  Always Have Something In Flight 🛫
&lt;/h2&gt;

&lt;p&gt;Most of the folks I spoke to had not programmed since the end of their bootcamps or courses, some of which ended months ago!  As folks coming from a non-traditional background, we have a TON to prove compared to CS-degree'd folks. An amazing way to prove ourselves is to work on personal projects to show our skills and that we care about improving on our craft. This keeps your Github looking active and your skills sharp. If you're into working out, you know that your gains begin to atrophy if you go hard for a few months, then stay away from the gym for even just a few weeks. Your brain and programming is the same! Don't let your skills atrophy! "Dreams don't work unless you do."&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-limit-yourself-to-junior-listings"&gt;
  &lt;/a&gt;
  Don't Limit Yourself to "Junior" Listings 💼
&lt;/h1&gt;

&lt;p&gt;Another commonality I saw with those who were in the job search phase who weren't having much luck was that they often limited the job search to roles that EXPLICITLY ask for 0-1 years of experience, or use the word "Junior" in their titling. It's entirely possible to nab a job that asks for more than a year of experience, or doesn't specifically use the word "junior". Don't self-select yourself out of the running, let the recruiters do that- that's their job. The worst that can happen is you get a "no". In my own experience, every position I ended up interviewing for asked for 2-3 YOE. Titling can vary by organization (mine, for example, uses Software Engineer I to denote more junior engineers, but never actually uses the term "Junior" in any titles), so you may needlessly be missing some roles geared towards or open to those without experience. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#see-it-through-dont-jump-around"&gt;
  &lt;/a&gt;
  See It Through, Don't Jump Around 📍
&lt;/h1&gt;

&lt;p&gt;While I completely understand the urge to collect courses like Pokémon cards, I saw that folks were trying to juggle tons of courses and resources at once. They often heard that they "needed" to learn something else, or they needed to know even more in addition to what they were already trying to learn. They also frequently worried about not knowing enough to get a job. &lt;a href="https://dev.to/tatianacodes/hot-take-you-dont-need-to-learn-everything-at-once-90"&gt;Splitting attention like this can be detrimental if you don't see something through to the point where you become proficient.&lt;/a&gt; Pick something and stick to it- see things through. I struggled a ton with hopping around to different courses and never really got GREAT and had something to show for it until I saw something through. Start one. Finish one. Rinse and repeat.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#find-your-lane"&gt;
  &lt;/a&gt;
  Find Your Lane 🚦
&lt;/h2&gt;

&lt;p&gt;The final item here is something I identified after speaking with developers who were often towards the early stages of learning. More than a handful were interested in more than a handful of specialties! It's awesome to have varying interests, especially given that programming is such a broad field. But again, splitting that attention is going to slow you down. Do a significant amount of research (but be careful to not fall to &lt;a href="https://en.wikipedia.org/wiki/Analysis_paralysis"&gt;analysis paralysis&lt;/a&gt;) and pick your "lane", or speciality. That might be data analytics. That might be cloud development. That might be full stack web development. But you will find it very tough to have it all and while casting the widest net may seem like an easy way to get a job, ultimately being an expert at one specialization is going to be much more realistic in achieving your goals.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;We are all walking our own unique path, and my journey may look different from your journey, which may look different from someone else's journey. Although we are all unique, there are some evergreen items we can all work on in order to get to our desired destination in the most efficient manner, and get out of our own way of being successful! &lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Highlight active menu item with scrollspy hook ⚛</title>
      <author>Rafał Goławski</author>
      <pubDate>Sun, 07 Nov 2021 21:33:51 +0000</pubDate>
      <link>https://dev.to/rgolawski/highlight-active-menu-item-with-scrollspy-hook-1gpp</link>
      <guid>https://dev.to/rgolawski/highlight-active-menu-item-with-scrollspy-hook-1gpp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-scrollspy"&gt;
  &lt;/a&gt;
  What is scrollspy?
&lt;/h2&gt;

&lt;p&gt;Scrollspy is a mechanism that highlights an active menu item based on current scroll position to indicate which section is currently visible in the viewport. It's available in Bootstrap (&lt;a href="https://getbootstrap.com/docs/5.1/components/scrollspy/"&gt;see the docs&lt;/a&gt;), but right now let's implement it from scratch using React and TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-me-the-code"&gt;
  &lt;/a&gt;
  Show me the code
&lt;/h2&gt;

&lt;p&gt;Before we start, let's add some helper functions that we will use for computations in our hook. Also, this way we keep logic separated and make our code look cleaner.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Restrict value to be between the range [0, value]&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;clamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Check if number is between two values&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isBetween&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;floor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;floor&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once we're ready with helpers, we can jump to the hook code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;useScrollspy&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;activeId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setActiveId&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useLayoutEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;scroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pageYOffset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ids&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;rect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;top&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;scroll&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;scroll&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(({&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isBetween&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;scroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;top&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

      &lt;span class="nx"&gt;setActiveId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;position&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;resize&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ids&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;activeId&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see this hook takes two arguments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ids&lt;/code&gt; - the list of sections IDs that we want to spy&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;offset&lt;/code&gt; - optional, offset from page top, by default set to &lt;code&gt;0&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically, all it does is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Calculating the top and bottom positions of spied sections&lt;/li&gt;
&lt;li&gt;Checking if current scroll position is between these two values&lt;/li&gt;
&lt;li&gt;Returning &lt;code&gt;id&lt;/code&gt; of section which is currently in the viewport&lt;/li&gt;
&lt;li&gt;Repeating the whole process on each scroll and resize event (since content height might change on window resize)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Also, notice that in this case instead of &lt;code&gt;useEffect&lt;/code&gt; we're using &lt;code&gt;useLayoutEffect&lt;/code&gt;, since it's better for DOM measurements. If you want to know more about differences between these two, I encourage you to read this great &lt;a href="https://kentcdodds.com/blog/useeffect-vs-uselayouteffect"&gt;article&lt;/a&gt; by Kent C. Dodds.&lt;/p&gt;

&lt;p&gt;The code should be self-explanatory, but if any part of it is unclear, let me know in the comments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;To see &lt;code&gt;useScrollspy&lt;/code&gt; in action, check out &lt;code&gt;App&lt;/code&gt; component in the sandbox below 👇&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://codesandbox.io/embed/usescrollspy-2d9jg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thanks for reading! 👋&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Automatically display your latest posts on your GitHub Profile README</title>
      <author>Bobby Iliev</author>
      <pubDate>Sun, 07 Nov 2021 21:02:35 +0000</pubDate>
      <link>https://dev.to/bobbyiliev/automatically-display-your-latest-posts-on-your-github-profile-readme-119f</link>
      <guid>https://dev.to/bobbyiliev/automatically-display-your-latest-posts-on-your-github-profile-readme-119f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;By creating a repository with the same name as your GitHub username (eg. &lt;code&gt;bobbyiliev/bobbyiliev&lt;/code&gt;) you actually create a special repository. Its README.md will appear on your public profile.&lt;/p&gt;

&lt;p&gt;In this post I will show you how to automatically display your latest posts on your GitHub Profile README.md file like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brDWS15_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/d6LPDZw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brDWS15_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/d6LPDZw.png" alt="" width="880" height="402"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We will be using a GitHub action provided by  &lt;a href="https://github.com/gautamkrishnar"&gt;Gautam krishna R&lt;/a&gt; called &lt;code&gt;blog-post-workflow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#prerequisits"&gt;
  &lt;/a&gt;
  Prerequisits
&lt;/h1&gt;

&lt;p&gt;Before you get started you would need the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A GitHub account and a GitHub public profile repository. If you do not have one yet, you can follow the steps on how to create it here: &lt;a href="https://devdojo.com/kritika-pattalam/create-a-github-profile-readmemd-with-widgets"&gt;Create a GitHub Profile README.md with widgets&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;You would also need a blog with an RSS feed. If you already have a DevDojo account or a DEV account you should be all set!&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#cloning-your-repository"&gt;
  &lt;/a&gt;
  Cloning your repository
&lt;/h1&gt;

&lt;p&gt;In order to set that you we will be using GitHub actions in order to automate the process.&lt;/p&gt;

&lt;p&gt;The first thing that you would need to do is to clone your repository locally. To do so, visit your profile repo, click on the &lt;code&gt;Code&lt;/code&gt; button and copy the link:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtPku034--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6wtZ0ys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtPku034--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/6wtZ0ys.png" alt="" width="505" height="342"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then head over to your Git terminal and clone the repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/bobbyiliev/bobbyiliev.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After that &lt;code&gt;cd&lt;/code&gt; into the cloned repo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd bobbyiliev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Make sure to change &lt;code&gt;bobbyiliev&lt;/code&gt; with your actual username&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#github-actions"&gt;
  &lt;/a&gt;
  GitHub Actions
&lt;/h1&gt;

&lt;p&gt;Once we have the project cloned locally, we need to create a &lt;code&gt;.github&lt;/code&gt; folder and a &lt;code&gt;workflows&lt;/code&gt; folder inside of it, we can use the &lt;code&gt;mkdir&lt;/code&gt; command to do so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir -p .github/workflows
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once the &lt;code&gt;.github/workflows&lt;/code&gt;, create a &lt;code&gt;.yaml&lt;/code&gt; file with the name of the website that you will be using to import your posts from. For example, I will do this with DevDojo, so the name of the file would be &lt;code&gt;devdojo.yaml&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch .github/workflows/devdojo.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With your favourite text editor, open the file and add the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: Latest DevDojo blog post workflow
on:
  schedule:
    # Runs every day
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-readme-with-blog:
    name: Update this repo's README with latest blog posts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gautamkrishnar/blog-post-workflow@master
        with:
          comment_tag_name: "DEVDOJO"
          feed_list: "https://devdojo.com/feed/bobbyiliev"
          commit_message: "Update devdojo.com blog posts"
          gh_token: ${{ secrets.GITHUB_TOKEN }}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Important: you need to change the &lt;code&gt;feed_list&lt;/code&gt; value with the URL to your RSS feed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my case I am using DevDojo, so my RSS feed is &lt;code&gt;https://devdojo.com/feed/bobbyiliev&lt;/code&gt;. For Dev.to it would be &lt;code&gt;https://dev.to/feed/bobbyiliev&lt;/code&gt; and for other providers it might be different.&lt;/p&gt;

&lt;p&gt;As you can see under the steps section we are using a GitHub action provided by  &lt;a href="https://github.com/gautamkrishnar"&gt;Gautam krishna R&lt;/a&gt; called &lt;code&gt;blog-post-workflow&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cron: '0 0 * * *'&lt;/code&gt; specifies that the action will run every day at midnight.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#update-your-readmemd-file"&gt;
  &lt;/a&gt;
  Update your README.md file
&lt;/h1&gt;

&lt;p&gt;Once you have the GitHub workflow in place, you need to also update your &lt;code&gt;README.md&lt;/code&gt; file and add the following in the section where you want your posts to be displayed at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# 📖 Latest Blog posts
&amp;lt;!-- DEVDOJO:START --&amp;gt;
&amp;lt;!-- DEVDOJO:END --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The part before the &lt;code&gt;START&lt;/code&gt; and &lt;code&gt;END&lt;/code&gt; keywords needs to match exactly with the &lt;code&gt;comment_tag_name&lt;/code&gt; value from the YAML file above.&lt;/p&gt;

&lt;p&gt;Once you make the changes, save the file, commit it and push the changes to GitHub:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stage the files:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Commit your changes:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git commit -m "Add DevDojo blog-post-workflow"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Push your changes to GitHub:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push origin main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that your README.md profile will be updated every day at midnight.&lt;/p&gt;

&lt;p&gt;To manually execute the workflow, go to Actions -&amp;gt; click on the Workflow -&amp;gt; and from the dropdown choose &lt;code&gt;Run Workflow&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wmlCiNQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ejLnivh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wmlCiNQo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://imgur.com/ejLnivh.png" alt="" width="880" height="292"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will take a few seconds to run and it will update your README.md file with your latest posts!&lt;/p&gt;

&lt;p&gt;As an example you could take a look at my workflows here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/bobbyiliev/tree/main/.github/workflows"&gt;GitHub Workflows Example&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If you like this GitHub action, make sure to star it on GitHub here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gautamkrishnar/blog-post-workflow"&gt;Blog post workflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hope that you find this useful! If you want to learn more about Git and GitHub check out this free eBook here:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/bobbyiliev/introduction-to-git-and-github-ebook"&gt;💡 Introduction to Git and GitHub&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>writing</category>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>Frontend Challenge #4, Profile card component</title>
      <author>JC Smiley</author>
      <pubDate>Sun, 07 Nov 2021 20:04:47 +0000</pubDate>
      <link>https://dev.to/jcsmileyjr/frontend-challenge-4-profile-card-component-46b9</link>
      <guid>https://dev.to/jcsmileyjr/frontend-challenge-4-profile-card-component-46b9</guid>
      <description>&lt;p&gt;This is a brief description of the forth frontend project I've completed from Frontend Mentors, Profile Card component. &lt;a href="https://www.frontendmentor.io/"&gt;Frontend Mentors&lt;/a&gt; is a online platform that provide front-end challenges that include professional web designs. You can play with the solution &lt;a href="https://jcsmileyjr.github.io/Profile-card-component/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;The first objective is to get a general idea of the layout situation in mobile view and figure out what I don't know how to do. I start by styling the body HTML tag to center the content. Then create a container with the textual content (no styling) and images. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Iq60tjkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7z74zw6lh4fenmw0ya7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Iq60tjkD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7z74zw6lh4fenmw0ya7.PNG" alt="rough draft of design with little styling" width="298" height="411"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;From the offset, the biggest challenge would be getting the image to float on top of the line and be screen size responsive. My solution was to give the parent container a relative position style. The child container with the image received the absolute position and a specific top alignment number. This had the desired affect of floating the image on top of the line. The image was center with flexbox in the parent container.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFtnrZKo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7oer646106fpbrdwq91z.PNG" alt="Absolute and relative positioning code" width="415" height="346"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#final-outcome"&gt;
  &lt;/a&gt;
  Final Outcome
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VJCSP40b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4n09qvcdmc9k1czasm7.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VJCSP40b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t4n09qvcdmc9k1czasm7.PNG" alt="final version of design to be built" width="375" height="425"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I learned
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;That a mixture of position absolute and relative to a parent and child elements will align elements on the web page outside of the normal flow.&lt;/li&gt;
&lt;li&gt;To use CSS variables for global styles&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#resources-used"&gt;
  &lt;/a&gt;
  Resources used
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/difference-between-types-of-css-variables/"&gt;Quick recap about CSS Variables&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading"&gt;
  &lt;/a&gt;
  Thank you for reading!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to connect with me on &lt;a href="https://twitter.com/JCSmiley4"&gt;Twitter&lt;/a&gt; or &lt;a href="https://www.linkedin.com/in/jcsmileyjr/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can find the completed code &lt;a href="https://github.com/jcsmileyjr/Profile-card-component"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>challenge</category>
    </item>
    <item>
      <title>What is Bootstrap?</title>
      <author>Charity Parks</author>
      <pubDate>Sun, 07 Nov 2021 19:59:46 +0000</pubDate>
      <link>https://dev.to/charityparks/what-is-bootstrap-4420</link>
      <guid>https://dev.to/charityparks/what-is-bootstrap-4420</guid>
      <description>&lt;p&gt;Imagine wanting to create a weekly news webpage. You want to write new content each week. You want it to look consistent from week to week. Once you have your first week coded and full of your weeks content, wouldn't it be nice to just have to put the next weeks content in without having to redo the entire webpage? Also, working smarter not harder is key. So how can you accomplish this? Bootstrap to the rescue!&lt;/p&gt;

&lt;p&gt;Bootstrap is a free toolkit and was created by Twitter developers to allow users to create quick and consistent webpages with ease. Its a collection of prewritten code for you to use. Prior to Bootstrap, developers would have to create common webpage features over and over again just hoping they could make it consistent with what came before. With Bootstrap you can have consistency with your fonts, font size, colors, and more. Bootstrap is one of the most popular tools in creating webpages! You can use it with HTML, CSS and JavaScript code to design layouts for your content.&lt;/p&gt;

&lt;p&gt;To learn more and to get started with Bootstrap, go to: &lt;a href="https://getbootstrap.com/"&gt;https://getbootstrap.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding!&lt;/p&gt;

</description>
      <category>twitter</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting started with Supabase.io(firebase Alt) on flutter </title>
      <author>victor</author>
      <pubDate>Sun, 07 Nov 2021 19:42:16 +0000</pubDate>
      <link>https://dev.to/segun_codes/getting-started-with-supabaseiofirebase-alt-on-flutter-29p</link>
      <guid>https://dev.to/segun_codes/getting-started-with-supabaseiofirebase-alt-on-flutter-29p</guid>
      <description>&lt;p&gt;Supabase.io is an open-source backend as a service(BASS) that allows seamless integration of backend services into your application without the need for complex structure. supabase.io is a fast-growing alternative to Firebase and they have similar features which include database service, authentication service, storage service, and coming soon cloud functions. &lt;br&gt;
Supabase.io has seamless integration with flutter application with fast integration of its core features. So in this article, we'll work through how to set up supabase.io in your flutter project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting started
&lt;/h2&gt;

&lt;p&gt;firstly we have to create a new project in app.supabase.io then enter the project details and wait for the project to launch. &lt;br&gt;
Next, we are going to set up the database schema. We can use the "User Management Starter" quickstart in the SQL Editor.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the "SQL" section.&lt;/li&gt;
&lt;li&gt;Click "User Management Starter".&lt;/li&gt;
&lt;li&gt;Click "Run".
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aCZD2p3T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/ogabike-app.appspot.com/o/uploads%252FGroup%2520432.png%3Falt%3Dmedia%26token%3Dc6dc3d76-2b9c-454c-b9da-bd11158ea9ca" alt="image" width="880" height="190"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Then you've created some database tables, you are ready to insert data using the auto-generated API. We just need to get the URL and anon key from the API settings. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the "Settings" section.&lt;/li&gt;
&lt;li&gt;Click "API" in the sidebar.&lt;/li&gt;
&lt;li&gt;Find your API URL on this page.&lt;/li&gt;
&lt;li&gt;Find your "anon" key on this page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDOKCRtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/ogabike-app.appspot.com/o/uploads%252FGroup%2520433.png%3Falt%3Dmedia%26token%3De28911be-f53e-4744-ac5b-b846b52c0f1c" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDOKCRtE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://firebasestorage.googleapis.com/v0/b/ogabike-app.appspot.com/o/uploads%252FGroup%2520433.png%3Falt%3Dmedia%26token%3De28911be-f53e-4744-ac5b-b846b52c0f1c" alt="image" width="880" height="388"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: your API URL and "anon" key would use when initializing supabase inside your project.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-your-app"&gt;
  &lt;/a&gt;
  Setting Your App.
&lt;/h2&gt;

&lt;p&gt;After creating your fultter app, you will have to install the supabase_flutter dependency,&lt;br&gt;
Run the following command in your terminal to get the newest version of supabase_flutter to your project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter pub add supabase_flutter
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter pub get
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to install the dependencies.&lt;/p&gt;

&lt;p&gt;Now that we have the dependencies installed let's set up deep links so users who have logged in via magic link or OAuth can come back to the app. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the "Authentication" section.&lt;/li&gt;
&lt;li&gt;Click "Settings" in the sidebar.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;io.supabase.flutterquickstart://login-callback/&lt;/code&gt; in the Additional Redirect URLs input field.&lt;/li&gt;
&lt;li&gt;Hit save.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--38lOsRPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/docs/assets/images/deeplink-setting-ecf3609d951e83e5ca3c214b44dafcf0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--38lOsRPT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://supabase.io/docs/assets/images/deeplink-setting-ecf3609d951e83e5ca3c214b44dafcf0.png" alt="image" width="880" height="184"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This happened in the supabase end now we also have to add for android and ios.&lt;br&gt;
For android: locate your AndroidManifest.xml file in android/app/src/main/AndroidManifest.xml to add an intent-filter to enable deep linking&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;manifest ...&amp;gt;
  &amp;lt;!-- ... other tags --&amp;gt;
  &amp;lt;application ...&amp;gt;
    &amp;lt;activity ...&amp;gt;
      &amp;lt;!-- ... other tags --&amp;gt;

      &amp;lt;!-- Add this intent-filter for Deep Links --&amp;gt;
      &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name="android.intent.action.VIEW" /&amp;gt;
        &amp;lt;category android:name="android.intent.category.DEFAULT" /&amp;gt;
        &amp;lt;category android:name="android.intent.category.BROWSABLE" /&amp;gt;
        &amp;lt;!-- Accepts URIs that begin with YOUR_SCHEME://YOUR_HOST --&amp;gt;
        &amp;lt;data
          android:scheme="io.supabase.flutterquickstart"
          android:host="login-callback" /&amp;gt;
      &amp;lt;/intent-filter&amp;gt;

    &amp;lt;/activity&amp;gt;
  &amp;lt;/application&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For Ios: add CFBundleURLTypes to enable deep linking in ios/Runner/Info.plis&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;!-- ... other tags --&amp;gt;
&amp;lt;plist&amp;gt;
&amp;lt;dict&amp;gt;
  &amp;lt;!-- ... other tags --&amp;gt;

  &amp;lt;!-- Add this array for Deep Links --&amp;gt;
  &amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;
  &amp;lt;array&amp;gt;
    &amp;lt;dict&amp;gt;
      &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;
      &amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;
      &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;
      &amp;lt;array&amp;gt;
        &amp;lt;string&amp;gt;io.supabase.flutterquickstart&amp;lt;/string&amp;gt;
      &amp;lt;/array&amp;gt;
    &amp;lt;/dict&amp;gt;
  &amp;lt;/array&amp;gt;
  &amp;lt;!-- ... other tags --&amp;gt;
&amp;lt;/dict&amp;gt;
&amp;lt;/plist&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the deep linking, we have to initialize supabase before ranApp() in main.dart to enable use it in our project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Future&amp;lt;void&amp;gt; main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    url: '[YOUR_SUPABASE_URL]',
    anonKey: '[YOUR_SUPABASE_ANON_KEY]',
  );
  runApp(MyApp());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With this, you are all set to start building your project with supabase.io. so the next step is to set up the authentication with supabase.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>superbase</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Having fun with pendulums in ThreeJs</title>
      <author>NordicBeaver</author>
      <pubDate>Sun, 07 Nov 2021 19:36:56 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/having-fun-with-pendulums-in-threejs-31hc</link>
      <guid>https://dev.to/nordicbeaver/having-fun-with-pendulums-in-threejs-31hc</guid>
      <description>&lt;p&gt;I was messing around with &lt;strong&gt;ThreeJs&lt;/strong&gt; and got an idea of a simple but interesting animation. Here is the video of how I turned it into reality.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/43WXC0rPKcE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you just want to see the end result, go ahead and click &lt;a href="https://threejspendulums.nordicbeaver.io/"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>threejs</category>
    </item>
    <item>
      <title>Functional Programming in JS: 0x07 - Advanced Topics and Pitfalls</title>
      <author>Muhammad Ahmad</author>
      <pubDate>Sun, 07 Nov 2021 19:27:56 +0000</pubDate>
      <link>https://dev.to/0xf10yd/functional-programming-in-js-0x07-advanced-topics-and-pitfalls-3ep2</link>
      <guid>https://dev.to/0xf10yd/functional-programming-in-js-0x07-advanced-topics-and-pitfalls-3ep2</guid>
      <description>&lt;p&gt;JavaScript has been called the “assembly language of the web”. The analogy (it isn’t perfect, but which analogy is?) draws from the fact that &lt;strong&gt;JavaScipt&lt;/strong&gt; is often a target for compilation, namely from &lt;strong&gt;Clojure&lt;/strong&gt; and &lt;strong&gt;CoffeeScript&lt;/strong&gt;, but also from many other sources such as &lt;strong&gt;pyjamas&lt;/strong&gt; (python to JS) and Google Web Kit (Java to JS).&lt;/p&gt;

&lt;p&gt;But the analogy also references the foolish idea that JavaScript is as expressive and lowlevel as x86 assembly. Perhaps this notion stems from the fact that JavaScript has been bashed for its design flaws and oversights ever since it was first shipped with Netscape back in 1995. It was developed and released in a hurry, before it could be fully developed.&lt;/p&gt;

&lt;p&gt;And because of that, some questionable design choices made its way into JavaScript, the language that soon became the de-facto scripting language of the web. Semicolons were a big mistake. So were its ambiguous methods for defining functions. Is it &lt;code&gt;var foo = function();&lt;/code&gt; or &lt;code&gt;function foo();&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Functional programming is an excellent way to side-step some of these mistakes. &lt;/p&gt;

&lt;p&gt;By focusing on the fact that JavaScript is truly a functional language, it becomes clear that, in the preceding example about the different ways to declare a function, it’s best to declare functions as variables. And that semicolons are mostly just syntactic sugar to make JavaScript appear more C-like.&lt;/p&gt;

&lt;p&gt;But always remember the language you are working with. JavaScript, like any other language, has its pitfalls. And, when programming in a style that often skirts the bleeding edge of what’s possible, those minor stumbles can become non recoverable gotchas. Some of these gotchas include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;li&gt;Variable scope and closures&lt;/li&gt;
&lt;li&gt;Function declarations vs. function expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, these issues can be overcome with a little attention.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#recursion-revisited"&gt;
  &lt;/a&gt;
  Recursion, revisited!
&lt;/h2&gt;

&lt;p&gt;Recursion is very important to functional programming in any language. Many functional languages go so far as to require recursion for iteration by not providing for and while loop statements; this is only possible when tail-call elimination is guaranteed by the language, which is not the case for JavaScript. A quick primer on recursion was given in [0x03 (&lt;a href="https://dev.to/0xf10yd/fp-in-js-0x03-37bm"&gt;https://dev.to/0xf10yd/fp-in-js-0x03-37bm&lt;/a&gt;). But in this section, we’ll dig deeper into exactly how recursion works in JavaScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tail-recursion"&gt;
  &lt;/a&gt;
  Tail recursion
&lt;/h3&gt;

&lt;p&gt;JavaScript’s routine for handling recursion is known as tail recursion, a stack-based implementation of recursion. This means that, for every recursive call, there is a new frame in the stack.&lt;/p&gt;

&lt;p&gt;To illustrate the problems that can arise from this method, let’s use the classic recursive algorithm for factorials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// base case&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// recursive case&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The algorithm will call itself n times to get the answer. It’s literally computing &lt;code&gt;(1 x 1 x 2 x 3 x … x N)&lt;/code&gt;. That means the time complexity is O(n).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;O(n)&lt;/code&gt;, pronounced “big oh to the n”, means that the complexity of the algorithm will grow at a rate of n as the size of the input grows, which is leaner growth. &lt;code&gt;O(n2)&lt;/code&gt; is exponential growth, &lt;code&gt;O(log(n))&lt;/code&gt; is logarithmic growth, and so on. This notation can be used for time complexity as well as space complexity. &lt;/p&gt;

&lt;p&gt;But, because a new frame in the memory stack is allocated for each iteration, the space complexity is also O(n). This is a problem. This means that memory will be consumed at such a rate the memory limit will be exceeded far too easily. On my setup, &lt;code&gt;factorial(23456)&lt;/code&gt; returns &lt;code&gt;Uncaught Error: RangeError: Maximum call stack size exceeded&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While calculating the factorial of 23,456 is a frivolous endeavor, you can be assured that many problems that are solved with recursion will grow to that size without too much trouble. Consider the case of data trees. The tree could be anything: search applications, file systems, routing tables, and so on. Below is a very simple implementation of the tree traversal function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;traverse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// whatever work needs to be done&lt;/span&gt;
    &lt;span class="nx"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;childern&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// many recursive calls&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With just two children per node, both time complexity and space complexity, (in the worst case, where the entire tree must be traversed to find the answer), would be O(n2) because there would be two recursive calls each. With many children per node, the complexity would be O(nm) where m is the number of children. And recursion is the preferred algorithm for tree traversal; a while loop would be much more complex and would require the maintenance of a stack.&lt;/p&gt;

&lt;p&gt;Exponential growth like this would mean that it would not take a very large tree to throw a &lt;code&gt;RangeError exception&lt;/code&gt;. There must be a better way.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-tailcall-elimination"&gt;
  &lt;/a&gt;
  The Tail-call elimination
&lt;/h3&gt;

&lt;p&gt;We need a way to eliminate the allocation of new stack frames for every recursive call. This is known as tail-call elimination.&lt;/p&gt;

&lt;p&gt;With tail-call elimination, when a function returns the result of calling itself, the language doesn’t actually perform another function call. It turns the whole thing into a loop for you.&lt;/p&gt;

&lt;p&gt;OK, so how do we do this? With lazy evaluation. If we could rewrite it to fold over a lazy sequence, such that the function returns a value or it returns the result of calling another function without doing anything with that result, then new stack frames don’t need to be allocated.&lt;/p&gt;

&lt;p&gt;To put it in “tail recursion form”, the factorial function would have to be rewritten such that the inner procedure fact calls itself last in the control flow, as shown in the following code snippet:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;factorial&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;_fact&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// base case&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// recursive case&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;_fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;Instead of having the result produced by the first function in the recursion tail (like in &lt;code&gt;n * factorial(n-1)&lt;/code&gt;), the result is computed going down the recursion tail (with the call to &lt;code&gt;_fact(r*n, n-1))&lt;/code&gt; and is produced by the last function in this tail (with &lt;code&gt;return r;&lt;/code&gt;). &lt;/p&gt;

&lt;p&gt;The computation goes only one way down, not on its way up. It’s relatively easy to process it as an iteration for the interpreter.&lt;/p&gt;

&lt;p&gt;However, tail-call elimination does not work in JavaScript. Put the above code into your favorite JavaScript engine and &lt;code&gt;factorial(24567)&lt;/code&gt; still returns &lt;code&gt;Uncaught Error: RangeError: Maximum call stack size exceeded exception&lt;/code&gt;. Tail-call elimination islisted as a new feature included in ECMAScript 6.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>functional</category>
      <category>codequality</category>
      <category>programming</category>
    </item>
    <item>
      <title>javaScript and hacking</title>
      <author>Muhammad Muhktar Musa</author>
      <pubDate>Sun, 07 Nov 2021 19:21:44 +0000</pubDate>
      <link>https://dev.to/mcube25/javascript-and-hacking-3410</link>
      <guid>https://dev.to/mcube25/javascript-and-hacking-3410</guid>
      <description>&lt;h4&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  introduction
&lt;/h4&gt;

&lt;p&gt;javaScript is most well-known as the scripting language for Web pages, and it allows developers do things. It allows the developer to talk to servers, make things dance arround the page, change when clicked on. It is used for form validation and handling of all kinds of things like single page applications. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-we-should-look-at-javascript"&gt;
  &lt;/a&gt;
  why we should look at javascript.
&lt;/h4&gt;

&lt;p&gt;We want to look at javascript so that we can have an idea of what can we do to leverage javascript to find vulnerabilities, tools we can use, how to find the tools, how do we start these tools, how to understand what's going on and how to expliot what's going on.&lt;br&gt;
 A place to start is to take a look at a website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMNxEBfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccawt13toi2vxkt1inla.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMNxEBfi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ccawt13toi2vxkt1inla.png" alt="Image description" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the most useful and probably most underrated hacker tools that there is at all is the browser devtools. To open devtools while your browser is on the viewport use the following command&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
Mac
open whatever panel used last:  Command + Option + I
open console panel: Comand + Option + I
Open element panel: Command + Shift + C

Windows
open whatever panel used last:  Control + Shift + I
open console panel: Control + Shift + j
Open element panel: Control + Shift + C
*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The browser devtools is not really meant for developers but it is super useful to hackers. For example if  we go to the network tab, click on it and reload the tab. We can see all the request that is being loaded on the page and they can be filtered to just the javascript files. All by just one click. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Kgv1oFG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r49d81fvg5jumhnici6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kgv1oFG_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5r49d81fvg5jumhnici6.png" alt="Image description" width="880" height="446"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can right click on any of these files and open it up in a source folder&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ0T5Qcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/748cabv9uprl7s3s1l2c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQ0T5Qcy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/748cabv9uprl7s3s1l2c.png" alt="Image description" width="880" height="413"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;we can see a single long line of code that doesn't make a whole lot of sense. But we can prettify this code to make sense to us by using the curly buttons in the source folder&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5hxPsp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5a4h61924zvbg1k3qn7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5hxPsp4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h5a4h61924zvbg1k3qn7.jpg" alt="Image description" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do that and you get a much nicer format of the javascript. There is a of reasons why we want to read this script. Some of the reasons are like we want to know what is going on on the page or search for some information that may be hanging around like API keys or keywords. On the network files, also related to the javascript is the &lt;code&gt;xhr&lt;/code&gt; . &lt;code&gt;xhr&lt;/code&gt; is xml http request. It a name that came to be known as &lt;code&gt;AJAX&lt;/code&gt; or fetching remote files with javascript. These request are request that where made by javascript. &lt;br&gt;
  we can check the initiator of the request by using the initiator tab and pretifying the code&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OdMCoW6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byh3cye2rna99lo8vv8v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OdMCoW6l--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/byh3cye2rna99lo8vv8v.jpg" alt="Image description" width="880" height="436"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The line of code is the one that initiated this call. When this is done you can see that there are API calls being made. You can use this knowledge to check for more API calls.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--odfLIF1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xxo2zawj0ou7387smq2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--odfLIF1Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xxo2zawj0ou7387smq2.jpg" alt="Image description" width="880" height="416"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Headers can also be checked for. From the header tap we see there is a API call being made to a URL.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cNJaLn0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zogl9ur2kbelx37knld3.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cNJaLn0B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zogl9ur2kbelx37knld3.jpg" alt="Image description" width="880" height="414"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The dev tools also give a search functionality. We can search for the API calls there and we get a pretty quick response.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LqAOdDV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqz1hq990st2kv9g48rl.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LqAOdDV2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rqz1hq990st2kv9g48rl.jpg" alt="Image description" width="880" height="417"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;click on the result and it is going to take you to the source folder. prettify your code and you can read around the javascript and say ok well we are doing this or that here. One way the devtools can be really useful is performing static analysis and checking for vulnerabilities with the javascript itself.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>The art of letting go</title>
      <author>xamhans</author>
      <pubDate>Sun, 07 Nov 2021 19:11:41 +0000</pubDate>
      <link>https://dev.to/xamhans/the-art-of-letting-go-2f6e</link>
      <guid>https://dev.to/xamhans/the-art-of-letting-go-2f6e</guid>
      <description>&lt;p&gt;Are you a developer? And have you ever used your skills to make a SaaS or an App, hoping to become rich with it, or at least to make a nice passive income? &lt;br&gt;
Have you spent so much time in programming despite your "normal" work, that you felt like, I am that close to making it, I just need this or that feature for my SaaS / App.&lt;/p&gt;

&lt;p&gt;Have you ever wondered, why nobody uses your SaaS / App, after all this hard work (looking out the window, not understanding the world)?  You read so many articles about other people on indie hackers making XXXX money in MRR. Why the hell you can not make it either? &lt;/p&gt;

&lt;p&gt;Well Hello then, this was me.&lt;/p&gt;

&lt;p&gt;I failed two times, with two different SaaS, and here is what I learned.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don't make something &lt;strong&gt;&lt;em&gt;just&lt;/em&gt;&lt;/strong&gt; for the money, choose a project where you can identify yourself. If you are interested in what do you do, you will be good at it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't spend &lt;strong&gt;all&lt;/strong&gt; your spare time on building your side project. If you have passion for it and you want to make it, that's great no doubt, but please, don't forget to live. Spent also time with people you love, that empower you and use this energy for your side hustle.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You coded your side hustle, and figured out something that is really cool? Share your knowledge with the community &lt;strong&gt;without expectations&lt;/strong&gt; and you will be surprised what people will give you in return.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You have a cool idea and your validation process is to ask your mom and maybe some friends. Do all say that your idea is soo good? You are so excited and started programming, exactly knowing what to do next. &lt;strong&gt;STOP&lt;/strong&gt;. Just because it solves a problem for you, it doesn't mean it is suitable for other people too. Go out and speak with real people and verify if you are going in the right direction. I can really recommend these two books, The &lt;a href="https://www.amazon.de/dp/B094YNJMRV/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1"&gt;Embedded Entrepreneur&lt;/a&gt; by   Arvid Kahl and the &lt;a href="https://www.amazon.de/Mom-Test-customers-business-everyone-ebook/dp/B01H4G2J1U/ref=sr_1_1?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;keywords=Mom%20Test&amp;amp;qid=1636307838&amp;amp;s=digital-text&amp;amp;sr=1-1"&gt;MOM Test&lt;/a&gt; by   Rob Fitzpatrick. Do yourself a favor and spend the same amount of time for idea validation as implementation, also after launching.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can't do everything on your own, really. You cant maintain a SaaS and also do a good SEO, that's impossible. Go and get you some freelancers that are not that expensive, maybe on Fiverr. Focus on that what you like doing :)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Treat yourself well. You are not a machine, you will not more productive if you work 12 hours a day. Sleep is very important for your productivity, so use it and sleep well and enough! One problem that haunts me to this day is, that my thoughts are always on the side hustle. I found out that meditation helps very well for me, so I set up a reminder every 2 hours to train my mindfulness and tell myself, that problems can wait till tomorrow :)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You have time. Don't chase one side project after another. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Failures are important, so fail often and fail early. I hope you can get something out of my failures.&lt;/p&gt;

&lt;p&gt;Thank you for reading&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>sideprojects</category>
    </item>
    <item>
      <title>5 ways to reverse a string in Python</title>
      <author>Saiyam Jain</author>
      <pubDate>Sun, 07 Nov 2021 19:10:30 +0000</pubDate>
      <link>https://dev.to/cybersaiyam/5-ways-to-reverse-a-string-in-python-4go8</link>
      <guid>https://dev.to/cybersaiyam/5-ways-to-reverse-a-string-in-python-4go8</guid>
      <description>&lt;p&gt;Hello everyone, in this post I will provide you 5 different ways to reverse a string using python programming.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1"&gt;
  &lt;/a&gt;
  1
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#using-slicing"&gt;
  &lt;/a&gt;
  Using Slicing
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def StrRev(string):
    string = string[::-1]
    return string

s = input("Enter a string: ")

print (StrRev(s))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2"&gt;
  &lt;/a&gt;
  2
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#using-reversed-function"&gt;
  &lt;/a&gt;
  Using Reversed Function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def StrRev(string):
    string = "".join(reversed(string))
    return string

s = input("Enter a string: ")
print (StrRev(s))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3"&gt;
  &lt;/a&gt;
  3
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#using-loop"&gt;
  &lt;/a&gt;
  Using Loop
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def StrRev(s):
  strg = ""
  for i in s:
    strg = i + strg
  return strg

s = input("Enter a string: ")
print (StrRev(s))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4"&gt;
  &lt;/a&gt;
  4
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#using-recursive-function"&gt;
  &lt;/a&gt;
  Using Recursive function
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def StrRev(s):
    if len(s) == 0:
        return s
    else:
        return StrRev(s[1:]) + s[0]

s = input("Enter a string: ")
print(StrRev(s))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5"&gt;
  &lt;/a&gt;
  5
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#using-stack-operations"&gt;
  &lt;/a&gt;
  Using Stack Operations
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;def StackCreate():
    stack=[]
    return stack


def isEmpty(stack):
    if len(stack) == 0:
        return true


def push(stack,item):
    stack.append(item)

def pop(stack):
    if isEmpty(stack): return
    return stack.pop()


def StrRev(string):
    n = len(string)


    stack = StackCreate()

    for i in range(0,n,1):
        push(stack,string[i])

    string=""

    for i in range(0,n,1):
        string+=pop(stack)

    return string

s = input("Enter a string: ")
print (StrRev(s))

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>programming</category>
    </item>
  </channel>
</rss>
