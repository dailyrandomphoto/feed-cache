<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>MongoDB $weeklyUpdate (September 20, 2021): Latest MongoDB Tutorials, Events, Podcasts, &amp; Streams!</title>
      <author>Adrienne Tacke</author>
      <pubDate>Mon, 20 Sep 2021 16:54:00 +0000</pubDate>
      <link>https://dev.to/mongodb/mongodb-weeklyupdate-september-20-2021-latest-mongodb-tutorials-events-podcasts-streams-3nn9</link>
      <guid>https://dev.to/mongodb/mongodb-weeklyupdate-september-20-2021-latest-mongodb-tutorials-events-podcasts-streams-3nn9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hi-everyone"&gt;
  &lt;/a&gt;
  üëã Hi everyone!
&lt;/h2&gt;

&lt;p&gt;Welcome to MongoDB $weeklyUpdate! &lt;/p&gt;

&lt;p&gt;Here, you'll find the latest developer tutorials, upcoming official MongoDB events, and get a heads up on our latest Twitch streams and podcast, curated by &lt;a href="https://twitter.com/AdrienneTacke"&gt;Adrienne Tacke&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#freshest-tutorials-on-devhub"&gt;
  &lt;/a&gt;
  üéì Freshest Tutorials on &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Want to find the latest MongoDB tutorials and articles created for developers, by developers? Look no further than our &lt;a href="https://developer.mongodb.com/"&gt;DevHub&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#startactivityforresult-is-deprecated-"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/article/realm-startactivityforresult-registerForActivityResult-deprecated-android-kotlin/"&gt;StartActivityForResult is deprecated !!&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.mongodb.com/developer/author/mohit-sharma/"&gt;Mohit Sharma&lt;/a&gt; &lt;br&gt;
Learn the benefits and usage of registerForActivityResult for Android in Kotlin.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#build-offlinefirst-mobile-apps-by-caching-api-results-in-realm"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.mongodb.com/developer/how-to/realm-api-cache/"&gt;Build Offline-First Mobile Apps by Caching API Results in Realm&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://twitter.com/andrewmorgan"&gt;Andrew Morgan&lt;/a&gt; &lt;br&gt;
This article shows how the RCurrency mobile app fetches exchange rate data from a public API, and then caches it in Realm for always-on, local access.&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#official-mongodb-events"&gt;
  &lt;/a&gt;
  üìÖ Official MongoDB &lt;a href="https://live.mongodb.com/events/#/calendar"&gt;Events&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Attend an official MongoDB event near you (virtual for now)! Chat with MongoDB experts, learn something new, meet other developers, and win some swag!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sep 23 (4:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-mongodb-global-virtual-community-presents-6-things-lauren-learned-while-modeling-data-in-mongodb/"&gt;6 Things Lauren Learned While Modeling Data in MongoDB&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sep 29 (3:00 PM GMT | Global) - &lt;a href="https://live.mongodb.com/events/details/mongodb-dach-virtual-community-presents-mongodb-atlas-mit-ansible-automatisieren/"&gt;MongoDB Atlas mit Ansible automatisieren&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#mongodb-on-twitch-amp-youtube"&gt;
  &lt;/a&gt;
  üì∫ MongoDB on &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; &amp;amp; &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;We stream tech tutorials, live coding, and talk to members of our community via &lt;a href="https://www.twitch.tv/mongodb"&gt;Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;YouTube&lt;/a&gt;. Sometimes, we even stream twice a week! Be sure to &lt;a href="https://www.twitch.tv/mongodb"&gt;follow us on Twitch&lt;/a&gt; and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; to be notified of every stream!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Latest Stream&lt;/em&gt;&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/wdmPTVzRBfs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;üçø &lt;a href="https://www.twitch.tv/mongodb"&gt;Follow us&lt;/a&gt; on Twitch and &lt;a href="https://www.youtube.com/channel/UCK_m2976Yvbx-TyDLw7n1WA"&gt;subscribe to our YouTube channel&lt;/a&gt; so you never miss a stream!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#%F0%9F%8E%99-last-word-on-the-mongodb-podcast"&gt;
  &lt;/a&gt;
  üéô Last Word on the &lt;a href="https://mongodb.libsyn.com/"&gt;MongoDB Podcast&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Latest Episode&lt;/em&gt;&lt;br&gt;
&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/2q8YcXNkmhuRAMtfWDBlnV"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Catch up on past episodes&lt;/em&gt;:&lt;br&gt;
Ep. 76 - &lt;a href="https://open.spotify.com/episode/38kyw8xdKmm9n7ewHjYLBg?si=gwkcKALOQbmw1JgpvAYmDQ&amp;amp;dl_branch=1"&gt;The Role of a MongoDB Consulting Engineer with Eric Reid&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 75 - &lt;a href="https://open.spotify.com/episode/4IZ115BTG83rW3ErdGxgOp?si=fKEIXOV1SIOUeRWsUzMEhw&amp;amp;dl_branch=1"&gt;Speaking at Your Next Tech Conference with Sven Peters&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Ep. 74 - &lt;a href="https://open.spotify.com/episode/2tSRNf6OxZVlElawGyxPVk?si=nGcokX2nQZ-7pZ-ZxOwT5A&amp;amp;dl_branch=1"&gt;Thinking Diagnostically with Danny Hatcher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Not listening on Spotify? We got you! We're most likely on your favorite podcast network, including &lt;a href="https://podcasts.apple.com/us/podcast/the-mongodb-podcast/id1500452446"&gt;Apple Podcasts&lt;/a&gt;, &lt;a href="https://player.fm/series/the-mongodb-podcast"&gt;PlayerFM&lt;/a&gt;, &lt;a href="https://podtail.com/en/podcast/the-mongodb-podcast/"&gt;Podtail&lt;/a&gt;, and &lt;a href="https://www.listennotes.com/podcasts/the-mongodb-podcast-mongodb-0g6fUKMDN_y/"&gt;Listen Notes&lt;/a&gt; üòä)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mongodb-devrel-around-the-interwebz"&gt;
  &lt;/a&gt;
  üåç MongoDB DevRel around the Interwebz
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Watch our team do their thang at various conferences, meetups, and podcasts around the world (virtually, for now). Also, find external articles and guest posts from our DevRel team here!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#upcoming-conferences"&gt;
  &lt;/a&gt;
  üìÖ Upcoming Conferences
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Sep 28 - &lt;a href="https://paris.serverlessdays.io/en/"&gt;ServerlessDays Paris&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d6JMGxm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9uZaONUUAMkOOv%3Fformat%3Djpg%26name%3Dmedium" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d6JMGxm0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E9uZaONUUAMkOOv%3Fformat%3Djpg%26name%3Dmedium" alt="Speaker announcement card for Adrienne Tacke at ServerlessDays Paris. Happening on September 28, 2021. Talk title: Serverless Socializing: How I Built a Quick Multi-Player Serverless Game"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sep 29 - &lt;a href="https://www.devopsworld.com/home"&gt;DevOps World (Online)&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Adrienne will be joining remotely to give her popular "Multi-Cloud Magic" talk!&lt;/p&gt;




&lt;p&gt;üí° These $weeklyUpdates are always posted to the &lt;a href="https://www.mongodb.com/community/forums/"&gt;MongoDB Community Forums&lt;/a&gt; &lt;em&gt;first&lt;/em&gt;! &lt;a href="https://account.mongodb.com/account/register"&gt;Sign up&lt;/a&gt; today to always get first dibs on these $weeklyUpdates and other MongoDB announcements, interact with the MongoDB community, and help others solve MongoDB related issues!&lt;/p&gt;

</description>
      <category>mongodb</category>
      <category>database</category>
      <category>programming</category>
      <category>mobile</category>
    </item>
    <item>
      <title>5 Ways to Stay Focused While Coding</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Mon, 20 Sep 2021 16:47:21 +0000</pubDate>
      <link>https://dev.to/unitybuddy/5-ways-to-stay-focused-while-coding-32hg</link>
      <guid>https://dev.to/unitybuddy/5-ways-to-stay-focused-while-coding-32hg</guid>
      <description>&lt;p&gt;Hello, buddies! Of course, coding is NOT hard but, if you can't keep your focus on coding, it would be hard. And the amount of coding some programmers need to do, it is common to not be able to get back into it or continue doing it for a long time. This can be the reason for a spaghetti code.&lt;/p&gt;

&lt;p&gt;So here are some of the ways that you can use to keep your focus while coding :)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-use-pomodoro-technique"&gt;
  &lt;/a&gt;
  1. Use Pomodoro Technique
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VchHez6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153209244/5PzRa6VHG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VchHez6X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153209244/5PzRa6VHG.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
I have mentioned this before too. The Pomodoro technique is a time-management methodology designed to give you bouts of uninterrupted focus for about 20-30 minutes at a time. Followed by some rest periods in between so that you don't completely lose it. &lt;/p&gt;

&lt;p&gt;Just play around with the technique and see how your body and mind react to it. Because sometimes even just a day of constant focus can make the difference in our week and completely shift our work mindset around.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-listen-to-music-when-you-code"&gt;
  &lt;/a&gt;
  2. Listen To Music When You Code
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uxEVyu_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153245977/flfmxBl-v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uxEVyu_H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153245977/flfmxBl-v.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Music is a great way to keep your focus on almost anything(not for everyoneüòâ). There are lots of focus-based playlists and mixes on YouTube spread across various genres and styles. Find out what works for you and stick to it. To keep in focus, I recommend listening to calming and instrumental music. Listening to heavy metal music can make your code a spaghetti...&lt;/p&gt;

&lt;p&gt;While many find it difficult to focus when music is on, instrumental music like Piano functions to the contrary for many. It functions instead as background music, reinforcing your feedback loop and keeping you in the code for a long time. &lt;/p&gt;

&lt;p&gt;Related : - &lt;a href="https://thenursewhocoded.hashnode.dev/5-music-albums-to-listen-to-while-coding"&gt;5 music albums to listen to while coding&lt;/a&gt; By @&lt;a href="https://dev.to@Wolfwood"&gt;Gabriel RomayMachado (he/him)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/why-you-should-listen-to-music-while-coding"&gt;Why You Should Listen To Music While Coding? üéß&lt;/a&gt; By BuddyüòÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-eat-for-the-task-at-hand"&gt;
  &lt;/a&gt;
  3. Eat for the task at hand
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X7cgAoBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153486409/CWGe2-B4A.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X7cgAoBL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153486409/CWGe2-B4A.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Our brain needs fuel to work, as does our car, our phone, our house and pretty much everything that man has created that works in a mechanized way. So eat for the situation at hand. Everyone is different, and at different metabolic rates and such, so I can't tell you what to eat exactly. But I can say that you should eat foods that don't make you sleepy afterward. Sure, sometimes those meals are satisfying and the nap afterward feels pretty fantastic. But you aren't going to build that next big space company while napping on your coding chair.üòÇüòÇ&lt;/p&gt;

&lt;p&gt;Of course, coffee is a good thing but don't drink more than 1 Mug-fulls a day. It can harm your mid-night nap. Recently I realized that a Teacup can do the task of coffee too. The best thing is, Tea doesn't harm your health like coffee!üçµ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-practice-meditation"&gt;
  &lt;/a&gt;
  4. Practice Meditation
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YEtGfuo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153555281/GlC9Gw9s7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YEtGfuo7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153555281/GlC9Gw9s7.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Studies show that even a short meditation session of about 20 minutes per day increases the capability of performing cognitive tasks. Meditation helps the practice of not only focusing the mind but also being a part of the moment and observing one‚Äôs train of thought without controlling it. &lt;/p&gt;

&lt;p&gt;Even though I can't stay in the same place for a long time without doing anything, I can stay meditating. In our country(Sri Lanka), meditating is done by almost every person so I don't miss it üòú&lt;/p&gt;

&lt;p&gt;Related: &lt;a href="https://blog.andreizgirvaci.com/how-meditation-improved-my-productivity-as-a-developer"&gt;How meditation improved my productivity as a Developer&lt;/a&gt; By @&lt;a href="https://dev.to@andrei-zgirvaci"&gt;Andrei Zgirvaci&lt;/a&gt; &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: You may fall in a beautiful nap while meditating so be careful!üí§&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#5-reward-yourself"&gt;
  &lt;/a&gt;
  5. Reward yourself
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HEYN9lT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153564192/cv_XPlJxM7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HEYN9lT5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625153564192/cv_XPlJxM7.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
I saved this one for last because it is the hardest to follow for some reason. But you need to reward yourself after having accomplished a milestone in your work. Something that says 'Good job' to yourself and that you can look forward to on your next focus session. That's where that pair-programming or teamwork worth much. Whenever you have done a task your mates cheer you! As I take my team as an example my mates cheer me before the work, while doing the work and after completing the work!üí™&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8TELxSNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625151103416/gzfUxaz5uh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8TELxSNz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1625151103416/gzfUxaz5uh.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
'Duck' is a nicknameüòú&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you feel saying 'Good Luck' for yourself, get a gift. It can be food, Games, Hangouts, Shot On iPhone, or anything that you love. For me, it would be a dark chocolate bar that I loveüç´üç´&lt;/p&gt;

&lt;p&gt;So, buddies, that's for now. Make sure you've focused when coding or debugging or anything to make it Not Hard! Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/5-ways-to-stay-focused-while-coding"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;

</description>
      <category>programming</category>
      <category>tips</category>
      <category>beginners</category>
      <category>focus</category>
    </item>
    <item>
      <title>Five things to know before learning JMeter</title>
      <author>NaveenKumar Namachivayam ‚ö°</author>
      <pubDate>Mon, 20 Sep 2021 16:27:13 +0000</pubDate>
      <link>https://dev.to/qainsights/five-things-to-know-before-learning-jmeter-4o1d</link>
      <guid>https://dev.to/qainsights/five-things-to-know-before-learning-jmeter-4o1d</guid>
      <description>&lt;p&gt;If you are reading this blog post, most probably you are planning or already planned or just getting started with Apache JMeter. Learning any performance testing tool could be challenging. Sometimes the technical documentation looks abstract, and the learning curve could be steep. In this blog post, I am going to list out five things to know before learning JMeter.&lt;/p&gt;

&lt;h2&gt;1. JMeter is not a browser&lt;/h2&gt;

&lt;p&gt;If you consider almost any performance testing tool, it will not execute JavaScript. HTML, CSS, and JavaScript are the essential components for any web page/app. If your application has JavaScript functions embedded in the page, JMeter will not execute that.&lt;/p&gt;

&lt;p&gt;e.g. &lt;a href="https://www.perftractor.xyz/calc.html" rel="noreferrer noopener"&gt;PerfTractor calculator&lt;/a&gt; app built using pure JavaScript on the web page doesn't send any network calls to the backend server.&lt;/p&gt;

&lt;p&gt;On the other hand, Random.org will send the inputs to the backend, then it will display the results.&lt;/p&gt;

&lt;p&gt;Here is the HTTP request for random number generation between 33 and 100: https://www.random.org/integers/?num=1&amp;amp;min=33&amp;amp;max=100&amp;amp;col=1&amp;amp;base=10&amp;amp;format=plain&amp;amp;rnd=new&lt;/p&gt;

&lt;p&gt;If you are not able to record a few actions using JMeter, it could probably be a JavaScript snippet. Hit Developer tools and debug to confirm.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtube.com/playlist?list=PLJ9A48W0kpRIjLkZ32Do9yDZXnnm7_uj_"&gt;https://youtube.com/playlist?list=PLJ9A48W0kpRIjLkZ32Do9yDZXnnm7_uj_&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;2. Use CLI mode for testing&lt;/h2&gt;

&lt;p&gt;JMeter has two modes: CLI and Non-CLI. CLI stands for Command Line Interface, alternatively you could call it &lt;em&gt;headless&lt;/em&gt;. CLI mode doesn't have any user interface. But Non-CLI mode has a user interface where you can point-and-click and interact with the JMeter.&lt;/p&gt;

&lt;p&gt;Non-CLI mode should be used for recording, scripting, and smoke testing. This mode utilizes more resources (CPU and memory).&lt;/p&gt;

&lt;p&gt;CLI mode must be used for load testing, stress testing, and other forms of performance testing as well as for CI/CD pipelines. This mode doesn't eat up more resources as there is no user interface to load and render. &lt;/p&gt;

&lt;p&gt;But if you have designed your test plan poorly, pretty soon you may end up in Out of Memory error. &lt;/p&gt;

&lt;p&gt;Listeners, Assertions, and unnecessary elements in your plan are resource hungry. You must optimize the test plan before starting your test.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dP1jhXo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/QAInsights/Testing-Jokes-Memes/master/memes/JMeter-Waiting.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dP1jhXo0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/QAInsights/Testing-Jokes-Memes/master/memes/JMeter-Waiting.jpeg" alt="Five things to know before learning JMeter"&gt;&lt;/a&gt;Five things to know before learning JMeter&lt;/p&gt;

&lt;h2&gt;3. Power up using JMeter Plugins&lt;/h2&gt;

&lt;p&gt;The core elements of JMeter help you to build the test plan effectively. But in a few instances, you may need to go beyond the core elements.&lt;/p&gt;

&lt;p&gt;Suppose, if you want to design a custom workload model for stress testing, then you can achieve it using JMeter Plugins.&lt;/p&gt;

&lt;p&gt;There are 100+ plugins are available via Plugin Manager. Choose wisely and install the relevant plugins which are essential for your test plan.&lt;/p&gt;

&lt;p&gt;JMeter Plugins saves time, and expedites the process of designing, execution, debuggin, and result analysis.&lt;/p&gt;

&lt;h2&gt;4. Learn Groovy&lt;/h2&gt;

&lt;p&gt;JMeter core features help us to record, enhance, and execute the test plan. What if you have custom business requirements to accomplish? Well, you could try JMeter plugins or functions. But, what if the plugins or functions do not meet your requirements. Enter JSR223 elements.&lt;/p&gt;

&lt;p&gt;The JSR223 element helps you to write custom requirements in Java, JavaScript, Beansheel, Groovy and more. Out of all the languages, I recommend to implement your custom code using the Groovy language.&lt;/p&gt;

&lt;p&gt;Groovy is easy to learn, simple to write. If you are stuck, search engine is your friend. Using log.info statement, you can debug, or you could use the IntelliJ IDE.&lt;/p&gt;

&lt;p&gt;If you have a Java code, you can easily execute it in Groovy. Better performance than the Beanshell sampler. &lt;/p&gt;

&lt;h2&gt;5. Distribute your load&lt;/h2&gt;

&lt;p&gt;I often get this question: &lt;em&gt;How many JMeter threads I can run on my laptop?&lt;/em&gt; The answer is &lt;em&gt;I don't know&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;It depends on too many variables: Operating System specification, system configuration, Java version, JVM settings, JMeter test plan design, number of requests, and so on.&lt;/p&gt;

&lt;p&gt;Running the test from one machine induces a bottleneck eventually. Meaning, you cannot increase the resources of your system such as memory, CPU, disk, network after reaching the max limits. &lt;/p&gt;

&lt;p&gt;Enter &lt;em&gt;scaling&lt;/em&gt;. If you want to inject more load, you need a 'n' number of smaller instances, or one huge instance. I would go with the smaller instances. Because, there is no limit to scale. &lt;/p&gt;

&lt;p&gt;Even pricing wise, sometimes smaller instances could save you the budget. &lt;/p&gt;

&lt;p&gt;JMeter comes with a remote distributed load testing framework where you can set a master-worker model to run high volume tests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/WSDMLAEksz4"&gt;https://youtu.be/WSDMLAEksz4&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;There could be many things to know before you get started with JMeter. I have listed what I feel is important to know for beginners. If you think, I missed any important note, please add them in the comment.&lt;/p&gt;

</description>
      <category>testing</category>
      <category>performance</category>
      <category>webperf</category>
      <category>tooling</category>
    </item>
    <item>
      <title>5 Awesome Websites to Download Free Vector Illustrations</title>
      <author>Kingsley Ubah</author>
      <pubDate>Mon, 20 Sep 2021 16:15:25 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/5-awesome-websites-to-download-free-vector-illustrations-3c6j</link>
      <guid>https://dev.to/ubahthebuilder/5-awesome-websites-to-download-free-vector-illustrations-3c6j</guid>
      <description>&lt;p&gt;Are you looking for illustrations or vector graphics for your next project? &lt;/p&gt;

&lt;p&gt;Well then, Great!&lt;/p&gt;

&lt;p&gt;I am going to share the five useful websites I go to for free pre-made illustrations. Most of the illustrations are free, while some packs are not.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#undraw"&gt;
  &lt;/a&gt;
  Undraw
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--blJyhlJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152197046/1T3AU5rI9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--blJyhlJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152197046/1T3AU5rI9.png" alt="undraw homepage"&gt;&lt;/a&gt; - UnDraw&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://undraw.co/illustrations"&gt;Undraw &lt;/a&gt; holds one of the largest collection of vector-based illustrations on the web.&lt;/p&gt;

&lt;p&gt;You can also use the in-built color filter (placed on the top right corner) to match the colour of all all illustrations to your brands color. You can also search for specific illustrations.&lt;/p&gt;

&lt;p&gt;Images can be downloaded either as an svg or png (for blog posts). They are also completely free to download. &lt;/p&gt;

&lt;p&gt;Since they are vector graphics, they can easily be adjusted and scaled.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#drawkit"&gt;
  &lt;/a&gt;
  Drawkit
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qqsftYkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152531167/jz_LJKLIZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qqsftYkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152531167/jz_LJKLIZ.png" alt="drawkit homepage"&gt;&lt;/a&gt; - Drawkit&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://drawkit.io/"&gt;DrawKit &lt;/a&gt; offers a beautiful collection of vector illustration packs. Some of the packs are free to download but most of them are paid.&lt;/p&gt;

&lt;p&gt;Illustrations can be downloaded in png and svg formats.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#icon8"&gt;
  &lt;/a&gt;
  Icon8
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5kTsbRLj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152806550/59cqYuG3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5kTsbRLj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152806550/59cqYuG3a.png" alt="icon8 homepage"&gt;&lt;/a&gt; - Ouch! by Icon8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://icons8.com/illustrations"&gt;Icon8 &lt;/a&gt; not only provides us with a huge collection of vector icons, but vector-based illustrations as well (Ouch!).  Illustrations are grouped into categories and we can search for any type of vector illustration using the search bar.&lt;/p&gt;

&lt;p&gt;There are also three plans for downloading icons from icons8. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--naWpT_c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152672793/AQv67y8ER.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--naWpT_c8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152672793/AQv67y8ER.png" alt="download plans"&gt;&lt;/a&gt; - Download plans&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can also edit Icons8 illustrations inside of the mega creator&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yn-oqLjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152625664/zHLRFSCaW.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yn-oqLjA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152625664/zHLRFSCaW.png" alt="mega creator"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#flaticon"&gt;
  &lt;/a&gt;
  Flaticon
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpgwsQue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152948171/68fVMGh2E.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZpgwsQue--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632152948171/68fVMGh2E.png" alt="Flaticon homepage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.flaticon.com/"&gt;Flaticon &lt;/a&gt; offers a huge collection of small and big vector icons and illustrations. They also allow you to download the png fomat for free and in any size you want. However, to download the icons as an svg file, you will have to become a premium member.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lucaszadam"&gt;
  &lt;/a&gt;
  Lucaszadam
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cPM5svhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632153284092/hzJzzH2y2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cPM5svhy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632153284092/hzJzzH2y2.png" alt="lucaszadam.png"&gt;&lt;/a&gt; - Lucas Zadam&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This platform is owned a individual. &lt;a href="https://lukaszadam.com/"&gt;Lucas Zadam&lt;/a&gt; is a web designer and illustrator. This site contains a huge collection of vector based illustrations which is Free for commercial and personal use under the CC0 license (MIT license). No attribution required as well!&lt;/p&gt;

&lt;p&gt;All illustrations will be downloaded as a package from a gumroad page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thats-it"&gt;
  &lt;/a&gt;
  That's it!
&lt;/h3&gt;

&lt;p&gt;Illustrations add meaning and beauty to your web pages. When next you are building a landing page, you can spice up the design by downloading and using some vector illustrations from those sites.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#join-my-fresh-newsletter"&gt;
  &lt;/a&gt;
  JOIN MY FRESH NEWSLETTER
&lt;/h3&gt;

&lt;p&gt;Get empowered as a web developer. Join my newsletter and receive weekly tips on learning web development and monetizing your skills. Subscribe  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;here&lt;/a&gt; .&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>8 common mistakes when using AWS ECS to manage containers</title>
      <author>Taavi Rehem√§gi</author>
      <pubDate>Mon, 20 Sep 2021 16:01:08 +0000</pubDate>
      <link>https://dev.to/dashbird/8-common-mistakes-when-using-aws-ecs-to-manage-containers-1i0f</link>
      <guid>https://dev.to/dashbird/8-common-mistakes-when-using-aws-ecs-to-manage-containers-1i0f</guid>
      <description>&lt;p&gt;In this article, we'll discuss the potential pitfalls that we came across when configuring ECS task definitions. While considering this AWS-specific container management platform, we'll also examine some general best practices for working with containers in production.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-wrong-logging-configuration"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Wrong logging configuration&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Containers are ephemeral in nature. Once a container finishes execution, the only way to detect whether our job ran successfully or not is to*&lt;em&gt;¬†look at the logs&lt;/em&gt;*.&lt;/p&gt;

&lt;p&gt;Docker has a mechanism called¬†&lt;strong&gt;log driver&lt;/strong&gt;¬†that collects containers' stdout and stderr outputs and forwards those to a specified location. If you choose the¬†&lt;em&gt;awslogs&lt;/em&gt;¬†log driver, this location will be Amazon CloudWatch. But there are other options to choose from.¬†&lt;/p&gt;

&lt;p&gt;For example, the¬†&lt;em&gt;splunk&lt;/em&gt;¬†log driver allows us to use Splunk instead of CloudWatch. Once that's configured in a task definition, all container logs for that task will be continuously¬†&lt;strong&gt;forwarded to that logging service&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In the default ECS task definition using¬†&lt;em&gt;awslogs&lt;/em&gt;¬†as the log driver, you can select the option¬†&lt;strong&gt;"Auto-configure CloudWatch Logs"&lt;/strong&gt;. It is recommended to choose this option, as shown in the image below.¬†&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lIFbfyQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/MMarw_wdt1TZ4rcOrdoN8lFccCvLTNL1g3fWpTpzYXu3Cjd17Z3Uu0io_sXsGdHP2imjvgyN2IWcMw0LI3nkD6LCFjTFmPdCHIweSxqRxfAlllUeJGEaZYXKumtiRloEb9j2NPY-%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lIFbfyQG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/MMarw_wdt1TZ4rcOrdoN8lFccCvLTNL1g3fWpTpzYXu3Cjd17Z3Uu0io_sXsGdHP2imjvgyN2IWcMw0LI3nkD6LCFjTFmPdCHIweSxqRxfAlllUeJGEaZYXKumtiRloEb9j2NPY-%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Task Definition configuration in the AWS management console‚Ää---‚Ääimage by the author&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The alternative to that is¬†&lt;strong&gt;creating the log group manually&lt;/strong&gt;, which can be accomplished in a single AWS CLI command:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Woc4UXGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/c4TQt3ml9W5nV04TOHwQg-JoVpUZ7CBQ0u7uI3dh8PMw3E_0Tx5GJG50TF9zmFjLw2Ke6kkSFVLvsgaUW3gTRNmpMG9_ElP18iMil6esWA9BmYC_D8bKPQBumHZVVyqPQxgF2-F9%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Woc4UXGF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/c4TQt3ml9W5nV04TOHwQg-JoVpUZ7CBQ0u7uI3dh8PMw3E_0Tx5GJG50TF9zmFjLw2Ke6kkSFVLvsgaUW3gTRNmpMG9_ElP18iMil6esWA9BmYC_D8bKPQBumHZVVyqPQxgF2-F9%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you don't set it up properly (&lt;em&gt;i.e., selecting awslogs but without ensuring the log group exists or gets created&lt;/em&gt;), your ECS task will fail because it won't be able to push container logs to CloudWatch.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-failing-to-enable-autoassign-public-ip%C2%A0"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Failing to enable "Auto-assign public IP"¬†&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Another common source of potential problems is the¬†&lt;strong&gt;network configuration&lt;/strong&gt;¬†in the "run task" API. Imagine that you configured your task definition and you now want to start the container(s). The "Run Task" wizard in the AWS management console has the option "Auto-assign public IP", as shown in the image below.¬†&lt;/p&gt;

&lt;p&gt;If you select ENABLED, your container will receive a public IP, and therefore, will be able to send requests over the Internet. If you don't enable that, ECS won't be able to pull the container image from a container image registry, such as AWS ECR or DockerHub.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gkoBR8GO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/1dUpW3NZ6OpqSvBFcMsRQXey72scLCbSHrwlkLLL1uMHlEfqoevLL3GEcF3RA7-rPxTpGvH85e1zwn5YFjQbOTa5XyM1RlU3_IF26EicHbws7Jnxsz9AMfz6-oaRFjYB2W_Q5HKp%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gkoBR8GO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/1dUpW3NZ6OpqSvBFcMsRQXey72scLCbSHrwlkLLL1uMHlEfqoevLL3GEcF3RA7-rPxTpGvH85e1zwn5YFjQbOTa5XyM1RlU3_IF26EicHbws7Jnxsz9AMfz6-oaRFjYB2W_Q5HKp%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Run Task configuration in the AWS management console‚Ää---‚Ääimage by the author&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you use AWS CLI to run a task, you can set that option in the¬†&lt;code&gt;awsvpcConfiguration="{...,assignPublicIp=ENABLED}"&lt;/code&gt;, for example:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YVHrikGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3WTAp8AGNQbv3kkvddWx2Az9FoV8ndq_YkLV0QZD5gxLIkc5YKnbkdCxHKAVuOBUATrNjzFFCjKzbknJclcpL43tlq5Yrhs0k21loIqhqYZEtx9Vt76lqVjnSha1otJ_7L2WELj3%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YVHrikGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/3WTAp8AGNQbv3kkvddWx2Az9FoV8ndq_YkLV0QZD5gxLIkc5YKnbkdCxHKAVuOBUATrNjzFFCjKzbknJclcpL43tlq5Yrhs0k21loIqhqYZEtx9Vt76lqVjnSha1otJ_7L2WELj3%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-storing-credentials-in-plain-text-in-the-ecs-task-definition"&gt;
  &lt;/a&gt;
  &lt;strong&gt;3. Storing credentials in plain text in the ECS task definition&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is common to pass sensitive information to the containers as environment variables defined as plain text in the task definition. The problem with this approach is that anybody who has access to the management console, or to the¬†&lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTaskDefinition.html"&gt;DescribeTaskDefinition&lt;/a&gt;¬†or¬†&lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DescribeTasks.html"&gt;DescribeTasks&lt;/a&gt;¬†API calls, will be able to view those credentials.&lt;/p&gt;

&lt;p&gt;To solve this problem, AWS suggests passing sensitive data to ECS tasks by referencing the secret ARN from¬†&lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"&gt;AWS Systems Manager Parameter Store&lt;/a&gt;¬†or&lt;a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html"&gt;¬†AWS Secrets Manager&lt;/a&gt;¬†in the environment variables. Let's see how to do that and how NOT to do that.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't define your passwords in plain text as Value:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OymKd8Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/cq2SUhsXdOm9PnIYWqhZdzcHfwQn1mARdIfscFk7gEhikpEEIE-_F51MNcBjDt_AsoOaTVxsqG43Bn5Idbd2meqYGGwo1nMkuUsSAfvGaqUxKudVsmt23D7TQlHIAkgS2-ZTkuY1%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OymKd8Yh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/cq2SUhsXdOm9PnIYWqhZdzcHfwQn1mARdIfscFk7gEhikpEEIE-_F51MNcBjDt_AsoOaTVxsqG43Bn5Idbd2meqYGGwo1nMkuUsSAfvGaqUxKudVsmt23D7TQlHIAkgS2-ZTkuY1%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead, apply one of those two options:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-using%C2%A0aws-systems-manager-parameter-store"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. Using¬†&lt;/strong&gt;&lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"&gt;AWS Systems Manager Parameter Store&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--isCsgedh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0O-4LEKa7tuqOZ148WG7ZwoyvznmuUZCwkrtZXGauhmv4cO1VDV6Rt1pWlUIuBOQ47J-qqKcspZxUxddo10-do-bkia6zjORupPQ5JKUSm7MLtLY9izHaz2Hqq6ogAyf9-aFAcR7%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--isCsgedh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0O-4LEKa7tuqOZ148WG7ZwoyvznmuUZCwkrtZXGauhmv4cO1VDV6Rt1pWlUIuBOQ47J-qqKcspZxUxddo10-do-bkia6zjORupPQ5JKUSm7MLtLY9izHaz2Hqq6ogAyf9-aFAcR7%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that instead of Value, we now select ValueFrom from the dropdown.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dXCL_QBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/ofwuE5UjZ_O7UTNluhCVKAzPoHSmbLjWmSodCs6qeYBAhL736s617e1xIzrB149n9GEK9hzlUlkqAn3c5ky4m5jSw_N3qpGY4Q3HSLRgRT2k2-G7flyPNv0uIlV8KbSQPOjDjX0I%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dXCL_QBX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/ofwuE5UjZ_O7UTNluhCVKAzPoHSmbLjWmSodCs6qeYBAhL736s617e1xIzrB149n9GEK9hzlUlkqAn3c5ky4m5jSw_N3qpGY4Q3HSLRgRT2k2-G7flyPNv0uIlV8KbSQPOjDjX0I%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same applied to a JSON-based task definition looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aZwVsb4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/nvVx_syU5tZ8iS8gNrTsVOP-WKKDx54xpYxJ_d9hcbuPfXTUwAguQrZUuWnNQucWW2U6vIPwg9r7xdS0lAu8k34xk7NXqluUdGrO4REOlRG100-BL6VYKvYjJAcjK6Y4yc497qh2%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aZwVsb4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/nvVx_syU5tZ8iS8gNrTsVOP-WKKDx54xpYxJ_d9hcbuPfXTUwAguQrZUuWnNQucWW2U6vIPwg9r7xdS0lAu8k34xk7NXqluUdGrO4REOlRG100-BL6VYKvYjJAcjK6Y4yc497qh2%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-using%C2%A0aws-secrets-manager"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. Using¬†&lt;/strong&gt;&lt;a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html"&gt;AWS Secrets Manager&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Re-LJWp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/0vdljWwGs-4jT4_Phlu6YpiEgiYTvrM44tTpFWJnDZquZr4f57q6cEUBdHqD_5Cj3Hs57ahpWwD0LIbHBB3_pbI6deS8hBDD8Fo6X8W2np6n2NEr8MA7oXBXLXYI0NMNnMnbU28v%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Re-LJWp8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/0vdljWwGs-4jT4_Phlu6YpiEgiYTvrM44tTpFWJnDZquZr4f57q6cEUBdHqD_5Cj3Hs57ahpWwD0LIbHBB3_pbI6deS8hBDD8Fo6X8W2np6n2NEr8MA7oXBXLXYI0NMNnMnbU28v%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SF97Bj_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Vlcxqfwke792DtYfjHyg8PgugBH-YuhvYaJAkKBxRGQktILIpXeNe-8--dLpD0ZuLJZstJ0PoUBIg9BcJaaoKpc9GdbgMdxY4KnNaMu-fADkmVBIF-xjg5GynYq5ZWNxmXCnhIdI%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SF97Bj_s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh6.googleusercontent.com/Vlcxqfwke792DtYfjHyg8PgugBH-YuhvYaJAkKBxRGQktILIpXeNe-8--dLpD0ZuLJZstJ0PoUBIg9BcJaaoKpc9GdbgMdxY4KnNaMu-fADkmVBIF-xjg5GynYq5ZWNxmXCnhIdI%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The same applied to a JSON-based task definition (same as above, only the¬†&lt;code&gt;valueFrom&lt;/code&gt;¬†changed) looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--USy1_MCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/n99_nhTSZhUbQkRFHWisdwkME-bEEK_WQSLA3luCsmU50E7tXrlEBrcMUYZ4hArirdDhBKB9fpgkpkelRjNnN6JRXqwtNj2QvREOIV7XQBHV7qWa4ehQe5jG0OwX5STpMBvnvpgm%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--USy1_MCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/n99_nhTSZhUbQkRFHWisdwkME-bEEK_WQSLA3luCsmU50E7tXrlEBrcMUYZ4hArirdDhBKB9fpgkpkelRjNnN6JRXqwtNj2QvREOIV7XQBHV7qWa4ehQe5jG0OwX5STpMBvnvpgm%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-difference-between%C2%A0aws-systems-manager-parameter-store%C2%A0and%C2%A0aws-secrets-manager"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What's the difference between¬†&lt;/strong&gt;&lt;a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html"&gt;AWS Systems Manager Parameter Store&lt;/a&gt;&lt;strong&gt;¬†and¬†&lt;/strong&gt;&lt;a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html"&gt;AWS Secrets Manager&lt;/a&gt;&lt;strong&gt;?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;While Secrets Manager is designed exclusively to handle secrets,¬†&lt;strong&gt;Parameter Store&lt;/strong&gt;¬†is a much more¬†&lt;strong&gt;general&lt;/strong&gt;¬†service for storing configuration data, parameters, and also secrets‚Ää---‚Ääall of those can be stored either as plain text or as encrypted data.¬†&lt;/p&gt;

&lt;p&gt;In contrast, the more¬†&lt;strong&gt;specialized Secrets Manager¬†&lt;/strong&gt;includes additional capabilities to share secrets across AWS accounts, generate random passwords, automatically rotate and encrypt them, and return them after decryption to applications over a secured channel using HTTPS with TLS.¬†&lt;/p&gt;

&lt;p&gt;When it comes to the¬†&lt;strong&gt;price&lt;/strong&gt;, AWS SecretsManager is more expensive‚Ää---‚Ääat the time of writing, you pay around 40 cents per stored credential per month, plus an additional tiny fee per 10,000 API calls.¬†&lt;/p&gt;

&lt;p&gt;With Parameter Store, you can store up to 10,000 credentials for free, and once you reach more than 10,000 of them in your AWS account (&lt;em&gt;that would be impressive!&lt;/em&gt;), you are charged 5 cents per secret.¬†&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-using-the-same-iam-task-role-for-all-tasks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;4. Using the same IAM task role for all tasks&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;There are two essential IAM roles that you need to understand to work with AWS ECS. AWS differentiates between a¬†&lt;strong&gt;task execution role&lt;/strong&gt;, which is a general role that grants permissions to start the¬†&lt;strong&gt;containers&lt;/strong&gt;¬†defined in a task, and a¬†&lt;strong&gt;task role&lt;/strong&gt;¬†that grants permissions to the actual¬†&lt;strong&gt;application&lt;/strong&gt;¬†once the container is started. Let's dive deeper into what both roles entail.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-execution-role"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Task Execution Role&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This role is not used by the task itself. Instead, it is used by the ECS agent and container runtime environment to prepare the containers to run. If you use the AWS management console, you can choose to let AWS create this role automatically for you. Alternatively, you can create it yourself, but then you need to make sure that the AWS-managed policy called AmazonECSTaskExecutionRolePolicy gets attached to this role. This policy grants permissions to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  pull the container image from Amazon ECR,&lt;/li&gt;
&lt;li&gt;  manage the logs for the task, i.e. to create a new CloudWatch*&lt;em&gt;¬†log stream&lt;/em&gt;&lt;em&gt;¬†within a specified¬†&lt;/em&gt;&lt;em&gt;log group&lt;/em&gt;*, and to push container logs to this stream during the task run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, if you use any secrets in your task definition, you need to attach another policy to the task execution role. Here is how this policy could look like‚Ää---‚Äänote that this example allows secrets from both, Parameter Store and Secrets Manager, and you typically would need only one of those:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--neaWy5iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/rJGE-dVtgdUWRaoUYGgsibsYSM1gCSLAPPnRRa0_wGjltgFod-h_tKRfjw8li1ldvE5c25jXw3cUPs2SI-WhLiB3K-HWce98XZM2KXw-8-zCP4OcA8Q16oVLbIF-5ge8kKw6b1_A%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--neaWy5iw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh3.googleusercontent.com/rJGE-dVtgdUWRaoUYGgsibsYSM1gCSLAPPnRRa0_wGjltgFod-h_tKRfjw8li1ldvE5c25jXw3cUPs2SI-WhLiB3K-HWce98XZM2KXw-8-zCP4OcA8Q16oVLbIF-5ge8kKw6b1_A%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above role grants permission to access all secrets from ECS ("Resource": "*"). For production, you can build it in a more granular way to only allow access to a specific secret ARN.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-would-you-use-secrets-in-a-task-definition"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why would you use secrets in a task definition?&lt;/strong&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt; To set the credential to an external logging service such as Splunk,&lt;/li&gt;
&lt;li&gt; To avoid storing secrets in plain text as environment variables, as described in the previous section.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both use cases for using secrets in a task definition are shown in the following example task definition:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#task-role"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Task Role&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;In contrast to the task execution role, the task role grants additional AWS permissions required by your application once the container is started. This is only relevant if your container needs access to other AWS resources, such as S3 or DynamoDB.¬†&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#why-is-it-suboptimal-to-use-the-same-iam-task-role-for-multiple-tasks"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why is it suboptimal to use the same IAM task role for multiple tasks?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;It's a security best practice to follow the¬†&lt;strong&gt;least privilege principle&lt;/strong&gt;¬†so that each application has only the bare minimum permissions it really needs. At the same time, having a separate IAM role for each type of project or task makes it*&lt;em&gt;¬†easy to change&lt;/em&gt;*‚Ää---‚Ääif your specific ECS task no longer uses DynamoDB, but rather a relational database, you can make this permission change on the task role of that task without affecting other ECS tasks. If you would be using the same role for multiple tasks, you would likely end up with a task role that has way more permissions than required.&lt;/p&gt;

&lt;p&gt;It's considered good practice to define the¬†&lt;strong&gt;task role&lt;/strong&gt;¬†as a regular part of every project, to version control its definition, and allow it to be created automatically by leveraging a CI/CD pipeline.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-container-images-and-ecs-tasks-configured-in-different-aws-regions"&gt;
  &lt;/a&gt;
  &lt;strong&gt;5. Container images and ECS tasks configured in different AWS regions&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;You can reduce the latency in your ECS task execution if you choose to store the container images in the same region as your ECS tasks. This reduces the image download times because the pull operation doesn't have to leave your VPC. This means that it can be potentially faster for your ECS task to pull the image from ECR in your AWS region than from Dockerhub.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-using-too-big-base-images"&gt;
  &lt;/a&gt;
  &lt;strong&gt;6. Using too big base images&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Big container images are expensive. Container registries such as ECR are billed per GB storage per month. With smaller images, you not only save costs but also allow faster start times of containers, since smaller images can be pulled much quicker. Also, bigger container images may have some services and features you don't even need for production.¬†&lt;/p&gt;

&lt;p&gt;Consider Python container images. The default base images contain many system libraries and binaries including C and C++. Those images are great for local development since they contain everything you may need, but they are likely overkill for a production application.¬†&lt;/p&gt;

&lt;p&gt;A good practice for building containers that are intended to run on ECS Fargate is to start with a¬†&lt;strong&gt;slim&lt;/strong&gt;¬†version of the image and gradually install all dependencies you need.¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-are-small-images-essential-when-using-ecs-fargate"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why are small images essential when using ECS Fargate?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When you run your containers always on the same server, your Docker image layers are cached and the size doesn't matter that much. But Fargate is a serverless stateless service‚Ää---‚Ääyour entire image gets pulled from the registry every time your ECS task runs with no caching.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-not-allocating-enough-cpu-and-memory"&gt;
  &lt;/a&gt;
  &lt;strong&gt;7. Not allocating enough CPU and memory&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;One way of mitigating the problem of large container images is allocating more CPU and memory resources to your ECS tasks. When a task has more compute resources allocated to it, even a larger container image can be potentially pulled and executed faster.¬†¬†&lt;/p&gt;

&lt;p&gt;How can you find out whether you leverage enough resources? You can have a look at¬†&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;‚Ää---‚Ääa serverless observability platform that automatically pulls CloudWatch logs and helps you gain insights into the health of your serverless resources. It visualizes the memory and CPU usage levels and you can configure alerts based on specific thresholds.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--usBUIoWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lGTCuJagxiU-ITJeV9Zta2f0PEfIA5_cmTHuKY38OuzffHsyGdNZqdyJN-xzc0QgTNPHw0dtGw6WGwES-SX1Z1ptfztnk2c787P1h5A3VAe-kAFbsvJolYxw9IIYg2c2wzhIpZji%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--usBUIoWN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh5.googleusercontent.com/lGTCuJagxiU-ITJeV9Zta2f0PEfIA5_cmTHuKY38OuzffHsyGdNZqdyJN-xzc0QgTNPHw0dtGw6WGwES-SX1Z1ptfztnk2c787P1h5A3VAe-kAFbsvJolYxw9IIYg2c2wzhIpZji%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;ECS service memory tracking‚Ää---‚Ääimage courtesy of¬†&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D34J7Wk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/09/1_MmNlrbLFP4zTjBhUshDg0Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D34J7Wk_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dashbird.io/wp-content/uploads/2021/09/1_MmNlrbLFP4zTjBhUshDg0Q.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/"&gt;&lt;/a&gt;&lt;em&gt;&lt;a href="https://dashbird.io/serverless-well-architected-reports/"&gt;Well-architected lens&lt;/a&gt;¬†dashboard‚Ää---‚Ääimage courtesy of¬†&lt;a href="https://dashbird.io/"&gt;Dashbird&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-running-containers-as-a-root-user"&gt;
  &lt;/a&gt;
  &lt;strong&gt;8. Running containers as a root user&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;By default, when you create a Dockerfile and you don't include a specific USER, then your container will run as root. Even though Docker restricts what root can do by attaching fewer capabilities than those of a host's root user, it's still dangerous if such a container gets compromised. Adding a USER directive limits the surface area and is considered a security best practice. Here is how you could define it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9PDJGXcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0EeacYEz9VFNx88NLl8J9lY8Qd4227S9OEjrnd0vF--lJV2HlEGx1l7qnmn4jDuvujzjYEWj6MMxGTGdFicNW0ZsDthDIlcyiAmA6YDbbvLwPOLckglqfZXuE3u1Fy2YXaEKBYAc%3Ds0" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9PDJGXcU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://lh4.googleusercontent.com/0EeacYEz9VFNx88NLl8J9lY8Qd4227S9OEjrnd0vF--lJV2HlEGx1l7qnmn4jDuvujzjYEWj6MMxGTGdFicNW0ZsDthDIlcyiAmA6YDbbvLwPOLckglqfZXuE3u1Fy2YXaEKBYAc%3Ds0" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;This article investigated the common pitfalls when using AWS ECS. We looked at logging and networking and securely passing secrets to the containers. Then, we discussed the differences between task execution role and task role, and how to use them with ECS tasks. Finally, we examined some general best practices when working with containers.¬†&lt;/p&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/amazon-ecs-vs-lambda/"&gt;AWS ECS vs AWS Lambda comparison&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/log-based-monitoring-for-aws-lambda/"&gt;Log-based monitoring for AWS Lambda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://dashbird.io/blog/aws-secrets-manager-python/"&gt;How to manage credentials in Python using AWS Secrets Manager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Resources:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://docs.aws.amazon.com/AmazonECS/latest/bestpracticesguide/intro.html"&gt;AWS ECS Best Practices&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://aws.amazon.com/premiumsupport/knowledge-center/ecs-data-security-container-task/"&gt;How can I pass secrets or sensitive information securely to containers in an Amazon ECS task?&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.youtube.com/watch?v=ltrV-Qmh3oY"&gt;Keynote: Running with Scissors‚Ää---‚ÄäLiz Rice, Technology Evangelist, Aqua Security&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>serverless</category>
      <category>docker</category>
      <category>devops</category>
    </item>
    <item>
      <title>üèÑ‚Äç‚ôÇÔ∏è Insomnia: Quick &amp; easy API development and testing</title>
      <author>Vic Sh√≥stak</author>
      <pubDate>Mon, 20 Sep 2021 15:53:26 +0000</pubDate>
      <link>https://dev.to/koddr/insomnia-quick-easy-api-development-and-testing-3jk9</link>
      <guid>https://dev.to/koddr/insomnia-quick-easy-api-development-and-testing-3jk9</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello, DEV World! üë©‚Äçüíªüë®‚Äçüíª &lt;/p&gt;

&lt;p&gt;In this article, I'm going to tell you some useful techniques for developing and testing APIs in Insomnia, so you can start applying them to your work every day.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è If this is the first time you've heard about &lt;strong&gt;Insomnia&lt;/strong&gt;, I'll give you a quick reference. So, &lt;a href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt; is an open-source, cross-platform API Client for GraphQL, REST, and gRPC. Available for Mac, Windows, and Linux.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  üìù Table of contents
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#postman-vs-insomnia"&gt;Postman VS Insomnia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-environment-variables"&gt;Use environment variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-data-from-other-responses"&gt;Use data from other responses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#use-timeline-tab-for-the-research-of-request"&gt;Use timeline tab for the research of request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#troubleshooting"&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#postman-vs-insomnia"&gt;
  &lt;/a&gt;
  Postman VS Insomnia
&lt;/h2&gt;

&lt;p&gt;In fact, there is no ‚Äúconfrontation‚Äù between these two wonderful tools, sorry!&lt;/p&gt;

&lt;p&gt;Everyone chooses what is closer and more comfortable to her/him for everyday tasks. I will just give my reasons why, &lt;em&gt;for me personally&lt;/em&gt;, Insomnia is a much &lt;em&gt;better&lt;/em&gt; performing API client than &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ü§ó Please note: This is just my opinion, if you are satisfied with Postman, then I am truly happy for your choice.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Pros of Insomnia&lt;/strong&gt; (&lt;em&gt;against Postman&lt;/em&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application speed;&lt;/li&gt;
&lt;li&gt;User-friendly interface of the application;&lt;/li&gt;
&lt;li&gt;Functionality to use dynamic data from the responses of one API request in the scenarios of another request (within the same collection);&lt;/li&gt;
&lt;li&gt;Ability to customize the usual ‚ÄúIDE-like‚Äù fonts;&lt;/li&gt;
&lt;li&gt;Many great plugins from the community that extend the capabilities of the main application;&lt;/li&gt;
&lt;li&gt;A variety of excellent design themes (by the way, the ‚ÄúOne Dark‚Äù theme used in the screenshots of this article);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons of Insomnia&lt;/strong&gt; (&lt;em&gt;against Postman&lt;/em&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Slightly more aggressive paid subscription model (every day, a small banner will appear in the bottom-right corner of the app screen urging you to upgrade to a paid plan);&lt;/li&gt;
&lt;li&gt;Not so great possibilities for organizing multi nested API collections (there is only separation by different folders);&lt;/li&gt;
&lt;li&gt;Probably not as ‚Äúpixel perfect‚Äù design as we would like (this can be seen in the app settings);&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-environment-variables"&gt;
  &lt;/a&gt;
  Use environment variables
&lt;/h2&gt;

&lt;p&gt;One of the most important things about designing, developing, and testing a REST API is the ability to quickly see the results in different environments.&lt;/p&gt;

&lt;p&gt;Insomnia copes with this task, in my opinion, better than all analogues. Go to &lt;strong&gt;Manage Environments&lt;/strong&gt; section, create a new &lt;strong&gt;Sub Environment&lt;/strong&gt;, or add everything to the global ones. The notation for creating variables is simply JSON, which you can use for structures for variables of any nesting! &lt;/p&gt;

&lt;p&gt;You can also add a color to help you quickly identify the right environment from the list (&lt;em&gt;especially when you have a lot of them&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_P6eeClm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ho799goqpoxnr6go7clz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_P6eeClm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ho799goqpoxnr6go7clz.png" alt="Env vars 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They are now available in a handy switch in the upper-left corner of the main application screen. To call the environment variable, start writing &lt;code&gt;_.&lt;/code&gt; (the underscore with a dot) in the right place. Insomnia will tell you which variables are available for the selected environment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVeW9o26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kjsyjzj6ayykc35l5wt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVeW9o26--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kjsyjzj6ayykc35l5wt.png" alt="Env vars 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In my example from the screenshot, I've these variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"base_urls"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"v1"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;                              &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;version&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"auth"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://127.0.0.1:5000/v1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;auth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"api"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"http://127.0.0.1:5000/v1"&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;api&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;server&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;‚òùÔ∏è Don't be confused by the fact that both of my servers have the same local address &lt;code&gt;http://127.0.0.1:5000/v1&lt;/code&gt;! Since I work with microservices, it's easiest to test them locally on the same address and port. On production, of course, they'll have radically different addresses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If I want to put the base URL for my auth server in the query, I just say:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;_.base_urls.v1.auth
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And voil√†! üòâ According to my rough observation, this operation alone serves to perfectly increase the speed of the REST API developing.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-data-from-other-responses"&gt;
  &lt;/a&gt;
  Use data from other responses
&lt;/h2&gt;

&lt;p&gt;The next very cool thing in Insomnia is the built-in function of transferring the received data from the body of one API response to the request of another. It's probably not clear in this explanation, let me explain it with a simple example.&lt;/p&gt;

&lt;p&gt;If you have a closed part of the API methods, which are available only after passing the &lt;a href="https://jwt.io/"&gt;JWT&lt;/a&gt; check, you may encounter a problem when testing. &lt;/p&gt;

&lt;p&gt;And you will always need to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Authenticate the user to generate a valid JWT;&lt;/li&gt;
&lt;li&gt;Copy this JWT into another API method;&lt;/li&gt;
&lt;li&gt;Make a request;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Isn't that too much to do? ü§î Thanks to Insomnia, we can shorten this process!&lt;/p&gt;

&lt;p&gt;First, let's decide from which response body we want to take the token. In my case, it is the method that is available on the &lt;code&gt;/v1/user/login&lt;/code&gt; endpoint. If authorization is successful, a response will be returned that contains the following:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ldPdZghJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vapwp3es5xpoy8kpnufn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ldPdZghJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vapwp3es5xpoy8kpnufn.png" alt="Data from response 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Good! Now we have to define the place where we will insert this token. I have a private method in my test project to change the user's attributes, located on the &lt;code&gt;/v1/user/update/attrs&lt;/code&gt; endpoint. That's where we will use the received token.&lt;/p&gt;

&lt;p&gt;Go to the authorization settings, choose the auth type, and in the field with the value enter the word ‚Äúbody‚Äù. Insomnia will offer many options for placeholders, choose ‚ÄúResponse ‚áæ Body Attribute‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9sUIsivI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36yg669pb65lrt0w8cql.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sUIsivI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36yg669pb65lrt0w8cql.png" alt="Data from response 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next, select the desired settings from where to get the data (specify the endpoint where the user authorized) and enter the path to the data in this notation (in the ‚ÄúFilter‚Äù field):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;.jwt.token
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thereafter, Insomnia should show the data that it will insert:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EWRnqGza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cacx7v06mkur3cngxlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EWRnqGza--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0cacx7v06mkur3cngxlv.png" alt="data from response 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it! ü§© Now all you have to do is authorize, and the received JWT will be inserted automatically to this endpoint.&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-timeline-tab-for-the-research-of-request"&gt;
  &lt;/a&gt;
  Use timeline tab for the research of request
&lt;/h2&gt;

&lt;p&gt;Another of Insomnia's coolest features is the full timeline view of the request: what was sent, with what headers, what came in response, and how long. &lt;/p&gt;

&lt;p&gt;In my daily work, I often use this opportunity. Because it's great for figuring out where something might have gone wrong:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3lGtgiHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivf2r5ls60bklcpg8np5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3lGtgiHo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivf2r5ls60bklcpg8np5.png" alt="Timeline"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#troubleshooting"&gt;
  &lt;/a&gt;
  Troubleshooting
&lt;/h2&gt;

&lt;p&gt;Every so often, when you test the API locally, requests for which must be authorized via a header with JWT (and it‚Äôs updated must be via a cookie with a refresh token), you may get an error: &lt;code&gt;refresh token not provided&lt;/code&gt; (although it's in Insomnia cookie settings).&lt;/p&gt;

&lt;p&gt;This happens because you use &lt;code&gt;Secure&lt;/code&gt; cookie to store the refresh token, but you send a local request without HTTPS (i.e., not secure).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ü§ì Read more about why this happens in &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#security"&gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To be able to work with such endpoints, just turn off &lt;code&gt;Secure&lt;/code&gt; in the cookie settings, like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dNL0tuJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf9v3vpuv4xwvv0ksv0j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dNL0tuJo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cf9v3vpuv4xwvv0ksv0j.png" alt="secure cookies"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="#toc"&gt;‚Üë Table of contents&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#photos-and-videos-by"&gt;
  &lt;/a&gt;
  Photos and videos by
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Insomnia authors feat. Vic Sh√≥stak&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ps"&gt;
  &lt;/a&gt;
  P.S.
&lt;/h2&gt;

&lt;p&gt;If you want more articles like this on this blog, then post a comment below and subscribe to me. Thanks! üòò&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>tutorial</category>
      <category>testing</category>
      <category>showdev</category>
    </item>
    <item>
      <title>.NET 6 is HERE! 5 Features that will blow your mind ü§Ø</title>
      <author>Dotnetsafer</author>
      <pubDate>Mon, 20 Sep 2021 15:18:54 +0000</pubDate>
      <link>https://dev.to/dotnetsafer/net-6-is-here-5-features-that-will-blow-your-mind-4hde</link>
      <guid>https://dev.to/dotnetsafer/net-6-is-here-5-features-that-will-blow-your-mind-4hde</guid>
      <description>&lt;p&gt;After so many months of speculation, leaks, and previews, Microsoft &lt;strong&gt;officially releases&lt;/strong&gt; .NET 6 RC1. This is the first of the 2 versions that ‚Äúgo live‚Äù and are supported in production.&lt;/p&gt;

&lt;p&gt;This release brings many new features, both new features and performance and optimization improvements. We are going to see &lt;strong&gt;The 5 Most Important .NET 6 Features.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#profileguided-optimization-pgo"&gt;
  &lt;/a&gt;
  ‚ö°Profile-guided optimization (PGO)
&lt;/h2&gt;

&lt;p&gt;Profile-guided optimization (PGO) is one of the &lt;strong&gt;most important&lt;/strong&gt; capabilities for the vast majority of development platforms that exist today. This novelty is based on assuming that the code that is executed at the beginning is (often) uniform, which can lead &lt;strong&gt;to a much better performance&lt;/strong&gt; if it is exploited.&lt;/p&gt;

&lt;p&gt;The number of PGO possibilities is enormous, the most important of which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reduce the size&lt;/strong&gt; of the final compiled file, compiling low-use code with lower quality.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Compile the startup&lt;/strong&gt; code with higher quality (unlike the previous function).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Achieve greater productivity&lt;/strong&gt; since the .NET PGO system has been rebuilt from scratch to offer a much greater benefit.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That rebuild is because PGO has been used in .NET for 20 years and from the beginning, that system was very difficult to use (apart from being proprietary). This has been &lt;strong&gt;the main reason&lt;/strong&gt; why almost Microsoft team don‚Äôt used it despite the great benefit it generated. (This change has been primarily initiated by the new Crossgen2 technology).&lt;/p&gt;

&lt;p&gt;The main reasons to enable PGO are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;simple integration&lt;/strong&gt; of PGO data in the application and the construction flow of the library itself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;tools to process the PGO data&lt;/strong&gt; in different ways (transformed and differentiated).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;‚Äúfriendly text‚Äù format&lt;/strong&gt; for source control for PGO data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PGO &lt;strong&gt;data collection tools&lt;/strong&gt; in applications, both in production and in test environments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#dynamic-pgo"&gt;
  &lt;/a&gt;
  üí•Dynamic PGO
&lt;/h2&gt;

&lt;p&gt;Microsoft describes the new Dynamic PGO feature as the mirror image of the static PGO system I just described. Where the static PGO integrates with Crossgen2, but in this case, the &lt;strong&gt;dynamic PGO integrates with RyuJIT.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unlike the Static PGO (which requires separate training and use of special tools), the Dynamic PGO is automatic. Just use the running application to collect the necessary data. Another difference is that while the Static PGO data is stored, the Dynamic PGO data is lost at the end of the application execution (Microsoft compares Dynamic PGO with a &lt;strong&gt;JIT tracing&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Right now Dynamic PGO is available and enabled with the following environment variables:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="n"&gt;DOTNET_TieredPGO&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;DOTNET_TC_QuickJitForLoops&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The main utilities of Dynamic PGO are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The ability to &lt;strong&gt;transform an interface method call&lt;/strong&gt; into a non-virtual call, which leads to a significant performance increase.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;strong&gt;combination of Crossgen2 and Dynamic PGO&lt;/strong&gt;, with which we can learn to compile methods sparsely depending on the use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Crossgen2‚Äôs ability to communicate&lt;/strong&gt; (through some weighting) which methods are more likely to benefit from higher compilation levels at runtime.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#crossgen2"&gt;
  &lt;/a&gt;
  üî•Crossgen2
&lt;/h2&gt;

&lt;p&gt;As we have already talked a bit about Crossgen2, it is a big step forward for early build for the platform. The most important feature is that the goal of Crossgen2 is &lt;strong&gt;to be a standalone compiler.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To understand this we are going to go to Crossgen1, which was simply a separate compilation of the runtime with only the necessary components to allow the generation of code. That approach that was given at the time generated many problems.&lt;/p&gt;

&lt;p&gt;Today, Crossgen generates R2R code for all methods in an assembly (this includes the SDK and runtime). The problem with this is that it is a waste, since most likely more than half of them would be better left at runtime.&lt;/p&gt;

&lt;p&gt;To go back in time, in .NET Core 3.0 it was used to remove about &lt;strong&gt;10MB&lt;/strong&gt; from the Linux runtime distribution. Now Microsoft will try to identify much &lt;strong&gt;more than 10MB in .NET 7.&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#controlflow-enforcement-technology-cet"&gt;
  &lt;/a&gt;
  ‚ú®Control-flow Enforcement Technology (CET)
&lt;/h2&gt;

&lt;p&gt;This Intel technology is a security feature available on most newer processors, both from Intel and AMD. Adds hardware features that protect against the most common types of flow control hijack attacks.&lt;/p&gt;

&lt;p&gt;With CET shadow stacks, the operating system and processor &lt;strong&gt;can trace the control flow calls&lt;/strong&gt; and returns in a thread in the shadow stack in addition to the data stack, and thus be able to detect unintended changes in the flow of control. . The shadow stack is protected from memory accesses by application code and helps defend against attacks involving return-oriented programming &lt;strong&gt;(ROP).&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#http3"&gt;
  &lt;/a&gt;
  üèÖHTTP/3
&lt;/h2&gt;

&lt;p&gt;This is the new version of HTTP. It brings many new features and performance features compared to previous versions of HTTP by using the new connection protocol: &lt;strong&gt;QUIC.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;QUIC uses UDP and &lt;strong&gt;has integrated TLS&lt;/strong&gt;, this allows to establish connections much faster. Unlike TPC, QUIC connections are independent of IP address, this allows mobile clients to move between mobile data and Wi-Fi networks maintaining the same logical connection and thus &lt;strong&gt;be able to continue with long downloads.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Of course, .NET 6 &lt;strong&gt;doesn‚Äôt include&lt;/strong&gt; support for HTTP/3 for macOS, mainly due to the lack of a TLS API that is compatible with QUIC.&lt;br&gt;
.NET 6 Conclusion&lt;/p&gt;

&lt;p&gt;The news and features of .NET 6 are many, most of them have not been fully exploited and we will have to wait for Microsoft to discuss them in depth in the not too distant future.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Microsoft says:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;‚ÄúIt‚Äôs inspiring to see the new features in .NET 6 that will lay the foundation for what‚Äôs coming next. These are big-bet features that will push the platform forward in both obvious and non-obvious ways.‚Äù&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;If you liked this article, don‚Äôt forget to FOLLOW US, so that you can be one of the first to read what‚Äôs new in .NET.&lt;/p&gt;

&lt;p&gt;And if you are reading this, it means that you belong to the &lt;strong&gt;1% of the people&lt;/strong&gt; who read the articles UNTIL THE END, tell me how many coffees ‚òï you need per day to continue programming, if I see many coffees ‚òï I will not feel alone and &lt;strong&gt;you will make my day!!!&lt;/strong&gt; üòÉüëç&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nTBUsnr6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/vog34yj.gif" alt="a"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>netcore</category>
      <category>csharp</category>
      <category>dotnet6</category>
    </item>
    <item>
      <title>¬øC√≥mo rayos funciona el hook useRef en React? üßê</title>
      <author>dux</author>
      <pubDate>Mon, 20 Sep 2021 15:17:29 +0000</pubDate>
      <link>https://dev.to/duxtech/como-rayos-funciona-el-hook-useref-en-react-2lah</link>
      <guid>https://dev.to/duxtech/como-rayos-funciona-el-hook-useref-en-react-2lah</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;En pleno 2021 la gran mayor√≠a de los desarrollos hechos en react usan &lt;strong&gt;hooks&lt;/strong&gt;, los primeros, m√°s b√°sicos y los que pr√°cticamente usaras en el 100% de tus desarrollos sin lugar a dudas son &lt;code&gt;useState&lt;/code&gt; y &lt;code&gt;useEffect&lt;/code&gt;; pero muchos dev olvidan que hay otros hooks bastante interesantes, menos conocidos, pero igual de importantes para aplicarlos a casos de uso espec√≠ficos, uno de ellos obviamente es &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Tratemos de comprender las bases de este hook, como funciona, y sobre todo lo m√°s importante a mi criterio: cuando usarlo.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sintaxis"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Sintaxis&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Se lo debe importar como cualquier otro hook.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Su declaraci√≥n es sencilla:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;variableDeReferencia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valorInicial&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Por ejemplo:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inputRef&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;La constante &lt;code&gt;inputRef&lt;/code&gt; almacena una referencia al DOM que no tiene valor inicial.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para poder enlazar nuestra referencia, por ejemplo, a un input, se usa la propiedad &lt;code&gt;ref&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;ref=&lt;/span&gt;&lt;span class="s"&gt;{inputRef}&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Ahora nuestra variable &lt;code&gt;inputRef&lt;/code&gt; tiene una referencia directa al input, gracias a la propiedad &lt;code&gt;ref&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ahora bien, si imprimimos por consola el contenido de la variable &lt;code&gt;inputRef&lt;/code&gt; veremos que nos regresa un objeto con la propiedad &lt;code&gt;current&lt;/code&gt; y dentro de ella la &lt;strong&gt;referencia&lt;/strong&gt; al input, dicha referencia tiene en su interior todas las propiedades que pueden ser usadas en un input de tipo text, como por ejemplo: &lt;code&gt;className&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;placeholder&lt;/code&gt;, entre otras.&lt;/p&gt;

&lt;p&gt;En este punto ya podemos manipular de manera directa dicho input.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#-raw-useref-endraw-casos-de-uso"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;code&gt;useRef()&lt;/code&gt; casos de uso&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Este hook puede usarse en 2 casos espec√≠ficos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Acceder al DOM de manera directa&lt;/strong&gt;
Cuando necesitamos acceder a un elemento HTML del DOM, en vanilla js har√≠amos algo como esto:
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"mi-input"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#mi-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// o tambi√©n esto:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;mi-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Este c√≥digo es correcto pero cuando de proyectos grandes se trata esta sintaxis ser√° muy complicada de mantener, por ellos y por muchos motivos m√°s existen librer√≠as como react que nos ayudan a manipular el DOM de una manera un poco m√°s abstracta. Por ello existe el hook &lt;code&gt;useState&lt;/code&gt; que permite crear variables de estado para poder usar el Virtual DOM de react.&lt;/p&gt;

&lt;p&gt;Ahora bien, &lt;code&gt;useRef&lt;/code&gt; accede a elementos del DOM de manera directa, sin aprovechar las bondades que nos da react, entonces, ¬øpor que quisi√©ramos hacer algo as√≠? ¬øNo tiene mucho sentido verdad? Por ahora qu√©date con este peque√±o concepto, con los ejemplos podr√°s comprender mejor.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ejemplo-1"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ejemplo #1&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Despu√©s de esta extensa pero necesaria intro, veremos un poco de c√≥digo, enlazaremos un input a una referencia e imprimimos el valor del input por consola.&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-2gegju?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#ejemplo-2"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ejemplo #2&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Al tener un formulario, podemos darle &lt;code&gt;focus&lt;/code&gt; automatico al primer input cuando la p√°gina se renderiza por primera vez:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-nthwba?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Puedes probar recargando la p√°gina, siempre el primer input tendr√° el foco por defecto.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#ejemplo-3"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ejemplo #3&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Podemos a√±adir una clase CSS a un elemento del DOM apretando un bot√≥n:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-dnxyxr?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTA:&lt;/strong&gt; Considere estos primeros ejemplos como ejemplos de papel o de juguete, no se deber√≠a usar el hook de esta manera, solo son ejemplos para ilustrar y comprender c√≥mo funciona &lt;code&gt;useRef&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Crear una variable mutable persistente entre renders&lt;/strong&gt;
Este punto es el caso de uso m√°s realista para usar &lt;code&gt;useRef&lt;/code&gt;, los ejemplos anteriores podr√≠an ser resueltos de otra manera sin necesidad de importar y usar &lt;code&gt;useRef&lt;/code&gt;, ahora veremos ejemplos donde su uso es necesario.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#ejemplo-4"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Ejemplo #4&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Al hacer una llamada una AP es posible que intentemos renderizar componentes condicionalmente, por ejemplo:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-fdm2s4?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;En &lt;code&gt;&amp;lt;App /&amp;gt;&lt;/code&gt; renderizamos condicionalmente el componente &lt;code&gt;&amp;lt;Users /&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt; hace una llamada a la API &lt;a href="https://jsonplaceholder.typicode.com/users"&gt;JSON placeholder&lt;/a&gt; para obtener 10 usuarios de prueba y pintarlos en pantalla cuando le damos al bot√≥n &lt;code&gt;Mostrar / Ocultar&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Solo para el ejemplo simulamos que la respuesta de la API ser√° de 4 segundos (lo que es una barbaridad de tiempo)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Imaginemos que le damos click al bot√≥n, empieza a correr los 4 segundos establecidos, pero antes de que concluya y podemos ver los usuarios en pantalla, le volvemos a dar al bot√≥n,el programa seguir√° funcionando pero nos aparecer√° un horrible error en la consola:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;En cristiano este error mas o menos nos dice que intentamos actualizar el estado de un componente desmontado, y no da una pista: usar la funci√≥n de limpieza que el hook &lt;code&gt;useEffect&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Ahora bien, podemos resolver esto usando un &lt;code&gt;useRef&lt;/code&gt; para mantener la referencia del componente y solo realizar actualizaciones de estado cuando este se encuentre montado en la aplicaci√≥n.&lt;/p&gt;

&lt;p&gt;La soluci√≥n se la puede ver a continuaci√≥n:&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://stackblitz.com/edit/react-fdx2wv?embed=1&amp;amp;&amp;amp;" width="100%" height="500"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Intentaremos explicar un poco:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Creamos una variable de referencia &lt;code&gt;isMountedRef&lt;/code&gt; que empieza como &lt;code&gt;true&lt;/code&gt;, esta variable representar√° al componente &lt;code&gt;&amp;lt;Users /&amp;gt;&lt;/code&gt; cuando est√© montado.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ahora en el &lt;code&gt;useEffect&lt;/code&gt; usamos un &lt;code&gt;return&lt;/code&gt; para &lt;strong&gt;MUTAR&lt;/strong&gt;&lt;br&gt;
el objeto y cambiar el valor a &lt;code&gt;false&lt;/code&gt;, osea, componente &lt;code&gt;&amp;lt;Users /&amp;gt;&lt;/code&gt; cuando est√© desmontado.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ahora con un if, solo haremos la petici√≥n con &lt;code&gt;getUsers&lt;/code&gt; cuando &lt;code&gt;isMountedRef&lt;/code&gt; sea &lt;code&gt;true&lt;/code&gt;, dicho en otras palabras, s√≥lo cuando el componente est√© montado.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De esta manera puedes hacer peticiones a API's un poco m√°s seguras y confiables para evitar problemas con el servidor cuando estemos en producci√≥n.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#referencias"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Referencias&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/D2ElJVzriCk"&gt;
&lt;/iframe&gt;
&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/4K4yaFGcoFE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://acortar.link/JHlfEK"&gt;https://acortar.link/JHlfEK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#conclusiones"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusiones&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;useRef&lt;/code&gt; es un hook que permite la manipulaci√≥n directa de elementos del DOM.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useRef&lt;/code&gt; no usa el virtual DOM de react.&lt;/li&gt;
&lt;li&gt;Para enlazar &lt;code&gt;useRef&lt;/code&gt; a un elemento HTML, dicho elemento debe tener la propiedad &lt;code&gt;ref&lt;/code&gt; con el valor de la variable de referencia.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;useRef&lt;/code&gt; siempre regresa un objeto mutable con una √∫nica propiedad &lt;code&gt;current&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Puedes usar un &lt;code&gt;useRef&lt;/code&gt; para hacer peticiones a API's de una manera m√°s controlada, y no siempre dependiendo del servidor en producci√≥n.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Quiza puede ser de tu inter√©s:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/3-metodos-muy-utiles-para-objetos-en-javascript-1lk8" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;3 m√©todos muy √∫tiles para objetos en Javascript&lt;/h2&gt;
      &lt;h3&gt;dux „Éª May 21 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spanish&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/react-usestate-para-dummies-analogia-ccm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;React: state para dummies con una analog√≠a simple &lt;/h2&gt;
      &lt;h3&gt;dux „Éª May 17 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spanish&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/7-editores-de-codigo-en-la-nube-para-frontends-3343" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 editores de c√≥digo en la nube para frontends&lt;/h2&gt;
      &lt;h3&gt;dux „Éª May 4 „Éª 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spanish&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/duxtech" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hjv7Wnd8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--40XPhqX3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/391281/fe9f8985-2f7e-4614-af22-73b275663b9a.jpg" alt="duxtech"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/duxtech/10-trucos-y-optimizaciones-de-codigo-con-javascript-para-2021-3759" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;10 trucos y optimizaciones de c√≥digo con JavaScript para 2021üòé &lt;/h2&gt;
      &lt;h3&gt;dux „Éª Mar 29 „Éª 9 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#frontend&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#spanish&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i3bJqLK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/110IlProGBQgs8/giphy.gif%3Fcid%3Decf05e47peevju0t7c3kwyoyi7593pbvm6c7prriy5eecfju%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3bJqLK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/110IlProGBQgs8/giphy.gif%3Fcid%3Decf05e47peevju0t7c3kwyoyi7593pbvm6c7prriy5eecfju%26rid%3Dgiphy.gif%26ct%3Dg" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>spanish</category>
    </item>
    <item>
      <title>How to Unit Test an HTTP Service in Angular</title>
      <author>Braydon Coyer</author>
      <pubDate>Mon, 20 Sep 2021 15:00:46 +0000</pubDate>
      <link>https://dev.to/braydoncoyer/how-to-unit-test-an-http-service-in-angular-38pa</link>
      <guid>https://dev.to/braydoncoyer/how-to-unit-test-an-http-service-in-angular-38pa</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally published on my &lt;a href="https://braydoncoyer.dev/blog/how-to-unit-test-an-http-service-in-angular/"&gt;personal blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We now understand the importance of testing in isolation and I want to shift our focus to testing an HTTP Service. By the time we wrap up this addition to the series, not only will you understand how to write valuable tests, but you'll also understand &lt;em&gt;what&lt;/em&gt; to test - something I feel a lot of newcomers to unit testing struggle to wrap their minds around.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you haven't read parts one and two, I encourage you to come back to this article after reviewing the foundational concepts laid out in those posts.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#understanding-the-setup"&gt;
  &lt;/a&gt;
  Understanding the setup
&lt;/h2&gt;

&lt;p&gt;For the purposes of this article, I've created a new Angular application and bootstrapped a &lt;a href="https://github.com/typicode/json-server"&gt;json-server&lt;/a&gt; into the project so we can make API requests and complement our learning process. By default, this API is running on &lt;code&gt;localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you'd like to follow along, feel free to clone down &lt;a href="https://github.com/braydoncoyer/angular-service-test-http"&gt;this repo&lt;/a&gt; before continuing! I've created a &lt;code&gt;starting&lt;/code&gt; branch that has everything you need to follow along!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#altering-the-karmaconfig-with-chromeheadless"&gt;
  &lt;/a&gt;
  Altering the karma.config with ChromeHeadless
&lt;/h2&gt;

&lt;p&gt;When you run &lt;code&gt;ng test&lt;/code&gt; in a new Angular project, the Karma report will be opened in a new Chrome tab. I prefer to have my test results shown in the terminal. To make this change, alter the &lt;code&gt;browsers&lt;/code&gt; property in your &lt;code&gt;karma.config.js&lt;/code&gt; file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="p"&gt;...&lt;/span&gt;
    &lt;span class="na"&gt;browsers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ChomeHeadless&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-angular-http-service-we-will-be-unit-testing"&gt;
  &lt;/a&gt;
  The Angular HTTP Service We Will Be Unit Testing
&lt;/h2&gt;

&lt;p&gt;I have created a very simplistic HTTP service with all of the CRUD operations. Take a look below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;BooksService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost:3000/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="nx"&gt;httpOptions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;HttpHeaders&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpClient&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

  &lt;span class="nx"&gt;getAllBooks&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(`$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/books`)
      .pipe(catchError(this.handleError&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="err"&gt;[]&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;('getAllBooks', [])));
  }

  getBookById(id: number): Observable&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(`$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/books/$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;`)
      .pipe(catchError(this.handleError&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(`getBookById id=$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;`)));
  }

  updateBook(book: Book): Observable&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;any&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/books`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`updateBook`&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;

  addBook(book: Book): Observable&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/books`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;httpOptions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;pipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;catchError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleError&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Book&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`addBook`&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;

  deleteBook(book: Book): Observable&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;http&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(`$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/books/$&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;`, this.httpOptions)
      .pipe(catchError(this.handleError&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Book&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(`deleteBook`)));
  }

  private handleError&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;(operation = 'operation', result?: T) &lt;span class="si"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; failed: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nx"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="si"&gt;}&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you feel uncomfortable with any of these functions and what they are doing or the various operators in play, &lt;a href="https://angular.io/tutorial/toh-pt6#get-heroes-with-httpclient"&gt;read the official Angular documentation about creating HTTP services&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have defined the URL here in the service, but ideally, this would be sourced from an environment variable defined in your project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-do-i-need-to-unit-test"&gt;
  &lt;/a&gt;
  What Do I Need to Unit Test?
&lt;/h2&gt;

&lt;p&gt;With this basic Service in play, now is a good time to address the elephant in the room. What should you test in this class? There's a total of five functions, each making an API call to our json-server backend. &lt;/p&gt;

&lt;p&gt;All functions we create, whether that's in a Component or Service, should have supporting test cases. &lt;/p&gt;

&lt;p&gt;To help identify what to test, let's briefly turn our attention to a simple metaphor from a previous article I wrote called &lt;a href="https://braydoncoyer.dev/blog/the-gumball-machine-how-to-quickly-identify-unit-test-cases/"&gt;The Gumball Machine: How To Quickly Identify Unit Test Cases&lt;/a&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-gumball-machine"&gt;
  &lt;/a&gt;
  The Gumball Machine
&lt;/h3&gt;

&lt;p&gt;How does a gumball machine work? There are three major events:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Put a quarter in the machine&lt;/li&gt;
&lt;li&gt;Turn the handle&lt;/li&gt;
&lt;li&gt;A gumball comes rolling out&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--89MhygmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1627173346975-58de4e5ec98d%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1950%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--89MhygmA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1627173346975-58de4e5ec98d%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1950%26q%3D80" alt="https://images.unsplash.com/photo-1627173346975-58de4e5ec98d?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1950&amp;amp;q=80"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Think of functions as a gumball machine and follow the three steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Put the quarter in the machine (pass arguments to the function, if necessary)&lt;/li&gt;
&lt;li&gt;Turn the handle (execute the code under test ‚Äî the function itself)&lt;/li&gt;
&lt;li&gt;A gumball comes rolling out (verify the behavior - the function returns the expected data)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I find it's helpful to scan the function and write down the various logic branches and the possible values that can be returned. These notes become an outline for writing unit tests for that function.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#identifying-what-to-test-in-an-angular-http-service"&gt;
  &lt;/a&gt;
  Identifying What to Test in an Angular HTTP Service
&lt;/h3&gt;

&lt;p&gt;Take a second and give the Service above a once-over. Scan though the functions and determine the input and output. Is there anything else that would be beneficial for us to check? Create a testing outline and then continue reading.&lt;/p&gt;

&lt;p&gt;Done?&lt;/p&gt;

&lt;p&gt;Here's what I came up with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Check that the functions return appropriate data (array of Books or a single Book)&lt;/li&gt;
&lt;li&gt;Check that the expected API endpoint was called with the appropriate request method&lt;/li&gt;
&lt;li&gt;If an error occurs, check to make sure that the &lt;code&gt;handleError&lt;/code&gt; function was called with the appropriate argument(s). &lt;em&gt;NOTE: I won't be focussing on this test case in this article.&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#adding-the-httpclienttestingmodule-to-our-angular-unit-test-file"&gt;
  &lt;/a&gt;
  Adding the HttpClientTestingModule to our Angular Unit Test File
&lt;/h2&gt;

&lt;p&gt;Running the tests at this point produces an error. Can you guess why?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;Chrome Headless 92.0.4515.159 &lt;span class="o"&gt;(&lt;/span&gt;Mac OS 10.15.7&lt;span class="o"&gt;)&lt;/span&gt; BooksService should be created FAILED
        NullInjectorError: R3InjectorError&lt;span class="o"&gt;(&lt;/span&gt;DynamicTestModule&lt;span class="o"&gt;)[&lt;/span&gt;BooksService -&amp;gt; HttpClient -&amp;gt; HttpClient]: 
          NullInjectorError: No provider &lt;span class="k"&gt;for &lt;/span&gt;HttpClient!
        error properties: Object&lt;span class="o"&gt;({&lt;/span&gt; ngTempTokenPath: null, ngTokenPath: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s1"&gt;'BooksService'&lt;/span&gt;, &lt;span class="s1"&gt;'HttpClient'&lt;/span&gt;, &lt;span class="s1"&gt;'HttpClient'&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;})&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The error message actually gives us a hint. We aren't testing this Service in isolation - is has an injected dependency: the HTTP Client. In order for the default test to pass in the Service, we need to bring in the &lt;code&gt;HttpClientTestingModule&lt;/code&gt; - a module that provides all of the tools that we need to properly test Angular HTTP Services.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;import &lt;span class="o"&gt;{&lt;/span&gt; HttpClientTestingModule &lt;span class="o"&gt;}&lt;/span&gt; from &lt;span class="s1"&gt;'@angular/common/http/testing'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
...

beforeEach&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    TestBed.configureTestingModule&lt;span class="o"&gt;({&lt;/span&gt;
      imports: &lt;span class="o"&gt;[&lt;/span&gt;HttpClientTestingModule]
    &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    service &lt;span class="o"&gt;=&lt;/span&gt; TestBed.inject&lt;span class="o"&gt;(&lt;/span&gt;BooksService&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;})&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The test should pass now. Great!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is possible to test HTTP services without using the &lt;code&gt;HTTPClientTestingModule&lt;/code&gt; by mocking out various dependencies, but for the sake of simplicity, this tutorial will only demonstrate solutions with the module Angular provides.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#unit-testing-pattern-arrangeactassert"&gt;
  &lt;/a&gt;
  Unit Testing Pattern: Arrange-Act-Assert
&lt;/h2&gt;

&lt;p&gt;When writing unit tests, I like to follow the Arrange-Act-Assert (the 3 A's) pattern to help structure my test cases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Arrange - set up the test case. Does the test require any special preparation? Use this step to get the code under test (the Service function) in a place where we can make our assertions. There will be times when there isn't anything to Arrange. That's fine - continue on to the next step.&lt;/li&gt;
&lt;li&gt;Act - execute the code under test. In order for us to determine the expected behavior of software, we need to run the code under test. Pass any necessary arguments to the code under test in order to achieve the expected behavior.&lt;/li&gt;
&lt;li&gt;Assert - verify expected outcomes. This is the step that actually controls whether your test passes or fails. &lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#writing-an-angular-unit-test-for-the-getallbooks-function"&gt;
  &lt;/a&gt;
  Writing an Angular Unit Test for the getAllBooks Function
&lt;/h2&gt;

&lt;p&gt;Let's focus on the first piece of code in the HTTP service - the &lt;code&gt;getAllBooks&lt;/code&gt; function. It doesn't take any function arguments and is expected to return an array of Books. &lt;/p&gt;

&lt;p&gt;With this in mind, let's create a new test and add the following test logic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;HttpClientTestingModule&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;HttpTestingController&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@angular/common/http/testing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mockBookArray&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/mocks/mockBooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;BooksService&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;BooksService&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="na"&gt;httpController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HttpTestingController&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost:3000/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

      &lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;configureTestingModule&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;imports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HttpClientTestingModule&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BooksService&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;httpController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;TestBed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HttpTestingController&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should call getAllBooks and return an array of Books&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="c1"&gt;// 1&lt;/span&gt;
          &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAllBooks&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//2&lt;/span&gt;
          &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockBookArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="c1"&gt;//3&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;httpController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
          &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/books`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

            &lt;span class="c1"&gt;//4&lt;/span&gt;
        &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockBookArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This may look like a lot and be confusing, so let me break it down.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I call the code under test - the &lt;code&gt;getAllBooks&lt;/code&gt; function. This is part of the Act step in the Arrange-Act-Assert pattern.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I make sure the data coming back from the function is an array of Books, which I've mocked out and brought into this test file. This satisfies the Assert step in the Arrange-Act-Assert pattern. You may be thinking that this looks funny; why do we need to subscribe to the &lt;code&gt;getAllBooks&lt;/code&gt; function? The function returns an Observable, so the only way to check the data that is being returned is to subscribe to the Observable and make the assertion inside.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We set up and utilize the &lt;code&gt;HttpTestingController&lt;/code&gt; for multiple reasons, but here we're using it to specify the URL that we expect the Service function to hit, as well as the request method to be used. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We also use the &lt;code&gt;HttpTestingController&lt;/code&gt; to flush (send) data through the stream. At first glance this sort of seems to go against the normal testing pattern where you'd specify the data to be returned &lt;em&gt;before&lt;/em&gt; the assertion statement. However, because we must subscribe to the &lt;code&gt;getAllBooks&lt;/code&gt; function, we flush the data after we're listening for that Observable to emit the value.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To be even more clear, when the flush statement is executed, it sends the &lt;code&gt;mockBookArray&lt;/code&gt; data through the stream,  the subscribe block resolves and our assertion then takes place. &lt;/p&gt;

&lt;p&gt;At this point, if you run the test, you should get a passing checkmark. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you'd like access to the mock data I'm using in these examples, check out my GitHub repo under the &lt;code&gt;completed_test&lt;/code&gt; branch.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-unit-test-for-the-getbookbyid-function"&gt;
  &lt;/a&gt;
  Writing a Unit Test for the getBookById Function
&lt;/h2&gt;

&lt;p&gt;This function is similar to the first. Can you come up with test criteria?&lt;/p&gt;

&lt;p&gt;Here's how I'm testing this function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;mockBook1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;mockBookArray&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;src/mocks/mockBooks&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should call getBookById and return the appropriate Book&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// Arrange&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;// Act&lt;/span&gt;
    &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBookById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

            &lt;span class="c1"&gt;// Assert&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockBook1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;httpController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/books/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockBook1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This test allows you to see a bit more of the Arrange-Act-Assert pattern. Due to the nature of the code under test, we know that the function requires an ID value to be passed. We control this from the test-side by declaring an &lt;code&gt;id&lt;/code&gt; variable, setting the value to &lt;code&gt;'1'&lt;/code&gt; and passing it to the &lt;code&gt;getBookById&lt;/code&gt; function. &lt;/p&gt;

&lt;p&gt;Everything else is familiar - we still check that the request method is &lt;code&gt;GET&lt;/code&gt; and that the appropriate URL is being hit. We also send back a mock Book via the &lt;code&gt;flush&lt;/code&gt; method so that our assertion kicks off inside of the subscribe block.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#writing-a-unit-test-for-the-updatebook-function"&gt;
  &lt;/a&gt;
  Writing a Unit Test for the updateBook Function
&lt;/h2&gt;

&lt;p&gt;Now let's look at the &lt;code&gt;updateBook&lt;/code&gt; function. The same patterns apply here, but the request method is different. Don't let that scare you! Take note of what argument(s) the function requires, and what the expected output, then write the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;should call updateBook and return the updated book from the API&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="na"&gt;updatedBook&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New title&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Author 1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;updateBook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;mockBook1&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedBook&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;req&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;httpController&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectOne&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/books`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updatedBook&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Once you know the pattern, testing HTTP Services in Angular isn't that difficult. &lt;/p&gt;

&lt;p&gt;Try testing the remaining functions in the Service class. Can you do it? &lt;/p&gt;

&lt;p&gt;Feel free to check the &lt;code&gt;completed_tests&lt;/code&gt; branch of my &lt;a href="https://github.com/braydoncoyer/angular-service-test-http/tree/completed_tests"&gt;GitHub repository&lt;/a&gt; and use it as a reference if you get stuck!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you enjoyed this article and found it helpful, consider reading my other articles and subscribing to my newsletter below!&lt;/p&gt;

</description>
      <category>angular</category>
      <category>testing</category>
      <category>services</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Why do Webdevs keep trying to kill REST? </title>
      <author>swyx</author>
      <pubDate>Mon, 20 Sep 2021 14:46:38 +0000</pubDate>
      <link>https://dev.to/swyx/why-do-webdevs-keep-trying-to-kill-rest-j2j</link>
      <guid>https://dev.to/swyx/why-do-webdevs-keep-trying-to-kill-rest-j2j</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs4PP0jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqbmd7yo8iwhmttuq0np.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bs4PP0jL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqbmd7yo8iwhmttuq0np.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://excalidraw.com/#json=6042109563895808,4Powv_4gGx0kX9ZZmg6l7w"&gt;Edit this chart&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Watching recent trends in client-server paradigms, from Apollo GraphQL to React Server Components to Rails Hotwire, I've had a revelation that helped me make sense of it all: They're all abstractions over REST!&lt;/p&gt;

&lt;p&gt;There are two schools of thought:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Smart Client&lt;/strong&gt;: State updates are rendered clientside first, then sent back to the server.

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;You can roll your own&lt;/strong&gt;: Use a state management solution like &lt;strong&gt;Redux&lt;/strong&gt; or &lt;strong&gt;Svelte Stores&lt;/strong&gt; and handwrite every piece of the client-server coordination logic.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You can use libraries that combine state and data fetching&lt;/strong&gt;: &lt;strong&gt;Apollo Client&lt;/strong&gt;, &lt;strong&gt;React Query&lt;/strong&gt;, &lt;a href="https://github.com/pubkey/rxdb"&gt;RxDB&lt;/a&gt;, &lt;a href="https://gun.eco/"&gt;GunDB&lt;/a&gt;, and &lt;a href="https://jlongster.com/future-sql-web"&gt;Absurd-SQL&lt;/a&gt; all do dual jobs of fetching data and storing related state.&lt;/li&gt;
&lt;li&gt;You can use frameworks that abstract it away for you: &lt;strong&gt;Blitz.js&lt;/strong&gt; and &lt;strong&gt;Next.js&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Or you can take it off the shelf&lt;/strong&gt;: &lt;strong&gt;Google's Firebase&lt;/strong&gt; and &lt;strong&gt;AWS' Amplify/AppSync&lt;/strong&gt; are fully vendor provided and vertically integrated with backend resources like auth, database, and storage (arguably &lt;a href="https://www.mongodb.com/realm"&gt;MongoDB Realm&lt;/a&gt; and Meteor's &lt;a href="https://www.npmjs.com/package/minimongo"&gt;minimongo&lt;/a&gt; before it)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Smart Server&lt;/strong&gt;: State updates are sent to the server first, which then sends rerenders to the client (whether in HTML chunks, serialized React components, or XML).

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html"&gt;Phoenix Liveview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hotwired/hotwire-rails"&gt;Rails Hotwire&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.swyx.io/react-server-components-demo/"&gt;React Server Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/previous-versions/bb386448(v=vs.140)?redirectedfrom=MSDN"&gt;ASP.NET Web Forms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course the "Smart Server" paradigm isn't wholly new. It has a historical predecessor ‚Äî let's call it the "Traditional Server" paradigm. The Wordpress, Django, Laravel type frameworks would fill out HTML templates and the browser's only job is to render them and send the next requests. We gradually left that behind for more persistent interactive experiences with client-side JS (nee AJAX). For a long time we were happy with just pinging REST endpoints from the client, ensuring a clean separation of concerns between frontend and backend. &lt;/p&gt;

&lt;p&gt;So why are we tearing up the old client-server paradigm? And which side will win?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-about-user-experience"&gt;
  &lt;/a&gt;
  It's about User Experience
&lt;/h2&gt;

&lt;p&gt;Ironically, the two sides have very different goals in UX and would probably argue that the other is less performant&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Smart clients enable offline-first apps and optimistic updates so your app can keep working without internet and &lt;em&gt;feels&lt;/em&gt; instant because you are doing CRUD against a local cache of remote data (I wrote about this in &lt;a href="https://www.swyx.io/svelte-amplify-datastore"&gt;Optimistic, Offline-First Apps&lt;/a&gt;).

&lt;ul&gt;
&lt;li&gt;This improves &lt;strong&gt;perceived performance for apps&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;However their downside is tend to come with large JS bundles upfront: Firebase adds as much as 1mb to your bundle, Amplify got it down to 230kb after a lot of modularization effort, Realm stands at 42kb.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Smart servers directly cut JS weight by doing work serverside rather than clientside, yet seamlessly patching in updates &lt;em&gt;as though they were done clientside&lt;/em&gt;. Facebook has reported as high as &lt;a href="https://twitter.com/swyx/status/1341151070743982080"&gt;29% bundle reduction&lt;/a&gt;.

&lt;ul&gt;
&lt;li&gt;This improves &lt;strong&gt;first-load performance for sites&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;However their downside is that every single user of yours is doing their rendering on &lt;em&gt;your&lt;/em&gt; server, not their browser. This is bound to be more resource intensive. The problem is mitigated if you can easily autoscale (eg with serverless rendering on &lt;a href="https://twitter.com/threepointone/status/1376248810003955716"&gt;Cloudflare Workers&lt;/a&gt; or &lt;a href="https://twitter.com/swyx/status/1341951585396506624"&gt;AWS Lambda&lt;/a&gt;). There are also real security concerns that should get ironed out over time.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The "winner" here, if there is such, will depend on usecase - if you are writing a web app where any delay in response will be felt by users, then you want the smart client approach, but if you are writing an ecommerce site, then your need for speed will favor smart servers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-about-developer-experience"&gt;
  &lt;/a&gt;
  It's about Developer Experience
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Platform SDKs&lt;/strong&gt;. For the Frontend-Platform-as-a-Service vendors like Firebase and AWS Amplify, their clients are transparently just platform SDKs ‚Äî since they have total knowledge of your backend, they can offer you a better DX on the frontend with idiomatic language SDKs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reducing Boilerplate for Invocations&lt;/strong&gt;. Instead of a 2 stage process of writing a backend handler/resolver and then the corresponding frontend API call/optimistic update, you can write the backend once and codegen a custom client, or offer what feels like direct database manipulation on the frontend (with authorization and syncing rules).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Offline.&lt;/strong&gt; Both Firebase Firestore and Amplify AppSync also support offline persistence. Since they know your database schema, it's easy to offer a local replica and conflict resolution. There are vendor agnostic alternatives like &lt;a href="https://github.com/pubkey/rxdb"&gt;RxDB&lt;/a&gt; or &lt;a href="https://github.com/redux-offline/redux-offline"&gt;Redux Offline&lt;/a&gt; that take more glue work.

&lt;ul&gt;
&lt;li&gt;Being Offline-first requires you to have a local replica of your data, which means that doing CRUD against your local replica can be much simpler (see below).&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reducing Boilerplate for Optimistic Updates&lt;/strong&gt;.

&lt;ul&gt;
&lt;li&gt;When you do normal optimistic updates, you have to do 4 things:

&lt;ol&gt;
&lt;li&gt;send update to server, &lt;/li&gt;
&lt;li&gt;optimistically update local state, &lt;/li&gt;
&lt;li&gt;complete the optimistic update on server success,&lt;/li&gt;
&lt;li&gt;undo the optimistic update on server fail&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;With a local database replica, you do 1 thing: write your update to the local DB and wait for it to sync up. The local DB should expose the status of the update (which you can reflect in UI) as well as let you centrally handle failures.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;People&lt;/strong&gt;. This is an organizational, rather than a technological, argument. How many times have your frontend developers been "blocked by backend" on something and now have to wait 2-3 sprints for someone else to deliver something they need? It is hugely disruptive to workflow. Give the developer full stack access to whatever they need to ship features, whether it is serverless functions, database access or something else. Smart Clients/Servers can solve &lt;em&gt;people&lt;/em&gt; problems as much as UX problems.

&lt;ul&gt;
&lt;li&gt;This is why I am a big champion of shifting the industry divide from "frontend vs backend" to "&lt;a href="https://twitter.com/swyx/status/1097334440169107456?s=20"&gt;product vs platform&lt;/a&gt;". Chris Coyier's term for this is &lt;a href="https://css-tricks.com/the-all-powerful-front-end-developer/"&gt;The All-Powerful Frontend Developer&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;GraphQL is also secretly a "people technology" because it decouples frontend data requirements from a finite set of backend endpoints.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both smart clients and smart servers greatly improve the DX on all these fronts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#its-about-protocols"&gt;
  &lt;/a&gt;
  It's about Protocols
&lt;/h2&gt;

&lt;p&gt;Better protocols lead to improved UX (eliminating user-facing errors and offering faster updates) and DX (shifting errors left) and they're so relevant to the "why are you avoiding REST" debate that I split them out to their own category. Technically of course, whatever protocol you use may be a layer atop of REST - if you have a separate layer (like &lt;a href="https://github.com/jlongster/crdt-example-app"&gt;CRDTs&lt;/a&gt;) that handles syncing/conflict resolution, then that is the protocol you are really using.&lt;/p&gt;

&lt;p&gt;A lot of these comments will feature GraphQL, because it is the non-REST protocol I have the most familiarity with; but please feel free to tell me where other protocols may fit in or differ.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Type Safety&lt;/strong&gt;: GraphQL validates every request at runtime. &lt;a href="https://trpc.io/docs/rpc"&gt;trpc&lt;/a&gt; does it at compile time.

&lt;ul&gt;
&lt;li&gt;Increased type annotation offers better codegen of client SDKs that you would otherwise have to hand-write. This is a much more established norm in gRPC than GraphQL and I'm not sure why.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Bandwidth&lt;/strong&gt;: Sending less data (or data in a format that improves UX) over the wire

&lt;ul&gt;
&lt;li&gt;GraphQL helps solve the &lt;a href="https://stackoverflow.com/questions/44564905/what-is-over-fetching-or-under-fetching"&gt;overfetching&lt;/a&gt; problem. In practice, I think the importance of this is overhyped unless you are Facebook or Airbnb. However the usefulness of &lt;a href="https://www.swyx.io/why-graphql-variables/"&gt;persisted queries&lt;/a&gt; for solving &lt;em&gt;upload&lt;/em&gt; bandwidth problems is underrated.&lt;/li&gt;
&lt;li&gt;Hotwire sends &lt;a href="https://hotwired.dev/"&gt;literal HTML Over The wire&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;React Server Components sends &lt;a href="https://www.youtube.com/watch?v=VA3TFymZlW4"&gt;serialized component data&lt;/a&gt; over the wire; more compact because it can assume React, and smoothly coordinated with on-screen loading states&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Real-time&lt;/strong&gt;: offering "live" and "collaborative" experiences on the web

&lt;ul&gt;
&lt;li&gt;This is doable with periodic polling and long-polling, but more native protocols like UDP, WebRTC and WebSockets are probably a better solution&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://replicache.dev/"&gt;Replicache&lt;/a&gt; (used for &lt;a href="https://nextjs.org/live"&gt;Next.js Live&lt;/a&gt;) and &lt;a href="https://www.croquet.io/"&gt;Croquet&lt;/a&gt; look interesting here&lt;/li&gt;
&lt;li&gt;UDP itself seems like a foundation that is ripe for much more protocol innovation; even &lt;a href="https://www.stackscale.com/blog/http3/"&gt;HTTP/3&lt;/a&gt; will be built atop it&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There remain some areas for growth that I don't think are adequately answered yet:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt;: One nightmare of every backend developer is unwittingly letting a given user kick off an expensive query that could choke up system resources. Complexity budgets are not a solved problem in GraphQL. It's a touchy subject, but new protocols can at least open up a more interesting dance between performance and flexibility.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt;: allowing frontend developers direct database access requires much more guard rails around security. Vendors with integrated auth solutions can help somewhat, but the evangelists for a new protocol need to be as loud about their security requirements as they are the developer experience upsides.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#not-everyone-is-antirest"&gt;
  &lt;/a&gt;
  Not Everyone is Anti-REST
&lt;/h2&gt;

&lt;p&gt;Yes of course my title is a little clickbaity; REST is perfectly fine for the vast majority of webdevs. There are even people pushing boundaries within the REST paradigm. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://remix.run/"&gt;Remix&lt;/a&gt;, the soon-to-be-launched React metaframework from the creators of React Router, embraces native browser standards so you get progressive enhancement "for free", for example requiring that you &lt;a href="https://remix.run/features"&gt;POST from a HTML form&lt;/a&gt; (they have clarified that &lt;a href="https://twitter.com/remix_run/status/1439976471796203520?s=20"&gt;anything but GET is fine&lt;/a&gt;, and they are pro-HTTP, and neutral REST)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt; (where I am an investor) is a "smart client" solution that works equally well on the server, which invests heavily in the &lt;a href="https://postgrest.org/en/v8.0/"&gt;open source PostgREST project&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#reader-feedback"&gt;
  &lt;/a&gt;
  Reader Feedback
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Jonathan W: "The framing of the issue got my brain percolating a bit. The entire situation feels very similar to the first time a developer recognizes object-relational impedance mismatch‚Äîall the subtle differences that start to crop up as you layer an Application Framework on top of an ORM on top of an RDBMS on top of your business domain (you know, that kind of important topic). Each layer of abstraction is acceptable by itself, but the effects compound at each level and over time."&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://twitter.com/thdxr"&gt;@thxdr&lt;/a&gt;: Other format efforts worth exploring: &lt;a href="https://jsonapi.org/"&gt;JSONAPI&lt;/a&gt; is a JSON REST spec, and the &lt;a href="https://relay.dev/docs/guides/graphql-server-specification/"&gt;Relay spec&lt;/a&gt; is essentially a GraphQL superset spec&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>graphql</category>
      <category>rest</category>
      <category>supabase</category>
    </item>
    <item>
      <title>Digital Clock Using HTML, CSS &amp; JS.</title>
      <author>Technical Vandar</author>
      <pubDate>Mon, 20 Sep 2021 14:27:18 +0000</pubDate>
      <link>https://dev.to/technicalvandar885/digital-clock-using-html-css-js-5l3</link>
      <guid>https://dev.to/technicalvandar885/digital-clock-using-html-css-js-5l3</guid>
      <description>&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code:
&lt;/h2&gt;



&lt;h1&gt;
  &lt;a href="#html"&gt;
  &lt;/a&gt;
  HTML:
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;JS Digital Clock&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"clock"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"time"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#css-code"&gt;
  &lt;/a&gt;
  CSS Code:
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nf"&gt;#clock&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;40vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;125&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;202&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;#cddce1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;-8px&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt; &lt;span class="m"&gt;#cddce1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;90px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nl"&gt;text-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;9px&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.15&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h1&gt;
  &lt;a href="#javascript-code"&gt;
  &lt;/a&gt;
  JavaScript Code:
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;   &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVar&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;setInterval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myTimer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myTimer&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;time&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLocaleTimeString&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h2&gt;
  &lt;a href="#find-me-on"&gt;
  &lt;/a&gt;
  Find Me On:
&lt;/h2&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;a href="https://www.facebook.com/technicalvandar"&gt;Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/technicalvandar"&gt;Youtube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/Technical-Vandar-885/"&gt;Github&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>clock</category>
    </item>
    <item>
      <title>Python deprecation</title>
      <author>hckjck</author>
      <pubDate>Mon, 20 Sep 2021 14:07:46 +0000</pubDate>
      <link>https://dev.to/hckjck/python-deprecation-2mof</link>
      <guid>https://dev.to/hckjck/python-deprecation-2mof</guid>
      <description>&lt;p&gt;As soon as you are developing a library, SDK or any other piece of code, which is intended to be used by several people or software, you should think about &lt;em&gt;deprecation&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;How to introduce changes gracefully to your code over time?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The following shows, how to use deprecation in Python for different parts of your code using Python standard library.&lt;/p&gt;

&lt;p&gt;How to test deprecations in order to ensure warnings will be raised when you expect them to raise. &lt;/p&gt;

&lt;p&gt;Finally, a message format for deprecation messages is suggested, providing meta information for better maintenance.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The corresponding source code and full examples to this article, can be found &lt;a href="https://github.com/hckjck/python-deprecation"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#throwing-deprecation-warnings"&gt;
  &lt;/a&gt;
  Throwing deprecation warnings
&lt;/h2&gt;

&lt;p&gt;The following section shows, how to use deprecation warnings in different parts of your code.&lt;/p&gt;

&lt;p&gt;In order to throw warnings, you want to use Python's built in &lt;a href="https://docs.python.org/3/library/warnings.html"&gt;warning control&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
`python
from warnings import warn

warn('This is deprecated', DeprecationWarning, stacklevel=2)
`

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To warn about deprecation, you need to set Python's builtin &lt;code&gt;DeprecationWarning&lt;/code&gt; as category. To let the warning refer to the caller, so you know exactly where you use deprecated code, you have to set &lt;code&gt;stacklevel=2&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#function-deprecation"&gt;
  &lt;/a&gt;
  Function deprecation
&lt;/h3&gt;

&lt;p&gt;Deprecating a function is pretty easy just by using &lt;code&gt;warn&lt;/code&gt; within a function like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_deprecated_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'This method is deprecated.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deprecating-function-arguments"&gt;
  &lt;/a&gt;
  Deprecating function arguments
&lt;/h4&gt;

&lt;p&gt;Deprecation on function arguments, requires you to check for your desired changes and throw &lt;code&gt;DeprecationWarning&lt;/code&gt;'s withing the method.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;a_function_with_deprecated_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwarg1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Positional argument `arg1` is going to change its type from (int, str) to (None, str)
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'arg1 of type int is going to be deprecated'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Keyword argument `kwarg2` is going to be dropped completely.
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'kwarg2'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'kwarg2 will be deprecated'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#class-deprecation"&gt;
  &lt;/a&gt;
  Class deprecation
&lt;/h3&gt;

&lt;p&gt;When deprecating classes you have to consider two separate use cases. Instantiating an object of a deprecated class can throw a deprecation warning by overriding the &lt;code&gt;__init__&lt;/code&gt; method. In order to throw a warning on subclassing from a deprecated method, you have to override the &lt;code&gt;__init_sublcall__&lt;/code&gt; method instead.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ADeprecatedClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init_subclass__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""This throws a deprecation warning on subclassing."""&lt;/span&gt;
        &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; will be deprecated.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init_subclass__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;"""This throws a deprecation warning on initialization."""&lt;/span&gt;
        &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; will be deprecated.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deprecating-a-class-method"&gt;
  &lt;/a&gt;
  Deprecating a class method
&lt;/h4&gt;

&lt;p&gt;Class method deprecation basically follows the same rules as &lt;a href="#function-deprecation"&gt;function deprecation&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deprecating-class-variables"&gt;
  &lt;/a&gt;
  Deprecating class variables
&lt;/h4&gt;

&lt;p&gt;In order to deprecate class variables, you need to hook into &lt;code&gt;__getattribute__&lt;/code&gt; method of objects metaclass.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DeprecatedMetaclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'a_deprecated_class_variable'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; class variable is deprecated'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DeprecatedMetaclass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a_class_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'foo'&lt;/span&gt;
    &lt;span class="n"&gt;a_deprecated_class_variable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  &lt;span class="c1"&gt;# deprecated
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#deprecating-enum-values"&gt;
  &lt;/a&gt;
  Deprecating enum values
&lt;/h4&gt;

&lt;p&gt;Due to the fact that enum values will be class variables of a subclass of Enum, the deprecation follows the same approach as &lt;a href="#deprecating-class-variables"&gt;deprecating class variables&lt;/a&gt; does. In contrast, you have to return the &lt;code&gt;EnumMeta.__getattribute__&lt;/code&gt; as a super call instead, as you are subclassing from &lt;code&gt;EnumMeta&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EnumMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Enum&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ADeprecatedEnumMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EnumMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'BAR'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'BAR is going to be deprecated'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EnumMeta&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__getattribute__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ADeprecatedEnum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;metaclass&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ADeprecatedEnumMeta&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;FOO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'foo'&lt;/span&gt;
    &lt;span class="n"&gt;BAR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'bar'&lt;/span&gt;  &lt;span class="c1"&gt;# deprecated
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#module-deprecation"&gt;
  &lt;/a&gt;
  Module deprecation
&lt;/h3&gt;

&lt;p&gt;In order to deprecate an entire module just place a deprecation warning at the top level of that module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# lib.py
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The module &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt; is deprecated.'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#package-deprecation"&gt;
  &lt;/a&gt;
  Package deprecation
&lt;/h3&gt;

&lt;p&gt;Package deprecation works the same way as &lt;a href="#module-deprecation"&gt;module deprecation&lt;/a&gt;, where the top level will be your &lt;code&gt;__init__.py&lt;/code&gt; of the package to be deprecated.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-deprecations"&gt;
  &lt;/a&gt;
  Testing deprecations
&lt;/h2&gt;

&lt;p&gt;Python's &lt;a href="https://docs.python.org/3/library/warnings.html"&gt;warning control&lt;/a&gt; provides a method called &lt;a href="https://docs.python.org/3/library/warnings.html#warnings.catch_warnings"&gt;catch_warnings&lt;/a&gt; to collect warnings within a &lt;code&gt;with&lt;/code&gt; block. Setting &lt;code&gt;record=True&lt;/code&gt; enables you to record the warnings which were emitted during execution of your code and check if the desired warnings where raised as expected. We won't evaluate this in depth, due to it is well documented in Python documentation &lt;a href="https://docs.python.org/3/library/warnings.html#testing-warnings"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;catch_warnings&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_a_deprecated_enum_value&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;catch_warnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;record&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# ADeprecatedEnum.FOO is not deprecated and should not throw any warning
&lt;/span&gt;        &lt;span class="n"&gt;ADeprecatedEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FOO&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

        &lt;span class="c1"&gt;# ADeprecatedEnum.BAR is deprecated and we expect to have a warning raised.
&lt;/span&gt;        &lt;span class="n"&gt;ADeprecatedEnum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BAR&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;issubclass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'BAR is deprecated'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#versioning-deprecations"&gt;
  &lt;/a&gt;
  Versioning deprecations
&lt;/h2&gt;

&lt;p&gt;Deprecation messages make most sense, when they also provide information, when a particular deprecation is intended to become active. Depending on your deprecation policy and your release cycles you can have deprecation tied to a version or a particular point in time.&lt;/p&gt;

&lt;p&gt;Decide on a message format, for example &lt;code&gt;message; key=value&lt;/code&gt;. This way, adding meta information is straight forward and can be parsed by other tools easily as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is deprecated; version=1.0.0"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use common keywords like &lt;code&gt;version&lt;/code&gt; or &lt;code&gt;date&lt;/code&gt; for indicating changes in a particular point in time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;warn&lt;/span&gt;

&lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"This is deprecated; date=2022-01-01"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DeprecationWarning&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stacklevel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Deprecation warnings are a good tool to keep track of changes within your API's. Python standard library provides your with the tools you need to deprecate any part of your code. Nevertheless, there is a lack of proper documentation and best practices around deprecation in general.&lt;/p&gt;

&lt;p&gt;For a small project deprecation may be a no-brainier. When it comes to larger projects, with a certain level of agility it quickly can become an annoying chore and could turn into potential source of error. Adding version information to deprecation messages, makes it easy to keep track of announcements and deadlines. Still there is room for convention and automation to make deprecation useful, easy and common for daily use.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#reference"&gt;
  &lt;/a&gt;
  Reference
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://code-examples.net/en/q/926881"&gt;deprecation - Python warnings.warn() vs. logging.warning()&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.python.org/3/library/warnings.html"&gt;Python warning control&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.python.org/dev/peps/pep-0565/"&gt;PEP 565 -- Show DeprecationWarning in  __main__&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.python.org/library/logging.html#logging.captureWarnings"&gt;logging.captureWarnings&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>deprecation</category>
      <category>testing</category>
      <category>api</category>
    </item>
  </channel>
</rss>
