<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>D v C++</title>
      <author>JavaCode7</author>
      <pubDate>Wed, 09 Jun 2021 13:52:28 +0000</pubDate>
      <link>https://dev.to/javacode7/d-v-c-5571</link>
      <guid>https://dev.to/javacode7/d-v-c-5571</guid>
      <description>&lt;p&gt;D was created as an alternative to C++. It supposedly "fixed" all the errors in C++. But did it &lt;em&gt;really&lt;/em&gt;? Today we find out in D v C++.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#credits"&gt;
  &lt;/a&gt;
  Credits üòä
&lt;/h4&gt;

&lt;p&gt;Thanks to &lt;a class="mentioned-user" href="https://dev.to/pranavbaburaj"&gt;@pranavbaburaj&lt;/a&gt;
 for some of these points.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#c"&gt;
  &lt;/a&gt;
  C++
&lt;/h2&gt;

&lt;p&gt;C++. By far one of the most well known programming languages. One of its achievements was adding OOP to C. Let's look at some strong (and weak) points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚úî ¬†Fast&lt;/li&gt;
&lt;li&gt;‚úî ¬†Compiled&lt;/li&gt;
&lt;li&gt;‚úî ¬†Game engine support&lt;/li&gt;
&lt;li&gt;‚úî ¬†OpenGL support&lt;/li&gt;
&lt;li&gt;‚úî ¬†Well known&lt;/li&gt;
&lt;li&gt;‚ùå Somewhat complicated&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#d"&gt;
  &lt;/a&gt;
  D
&lt;/h2&gt;

&lt;p&gt;D was made to improve C++ but did it do a good job?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;‚úî ¬†Compiled&lt;/li&gt;
&lt;li&gt;‚úî ¬†OpenGL support&lt;/li&gt;
&lt;li&gt;‚ùå No game engine support&lt;/li&gt;
&lt;li&gt;‚ùå Not very well known&lt;/li&gt;
&lt;li&gt;‚úî ¬†Simple&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, all of this evidence gives a clear winner. C++. If you disagree however, go comment down below with your reasoning! I would love to hear what you think.&lt;/p&gt;

</description>
      <category>dlang</category>
      <category>cpp</category>
      <category>healthydebate</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>React Native for mobile app development: points to consider in 2021</title>
      <author>Alex</author>
      <pubDate>Wed, 09 Jun 2021 13:48:47 +0000</pubDate>
      <link>https://dev.to/alexanderkdev/react-native-for-mobile-app-development-points-to-consider-in-2021-3i39</link>
      <guid>https://dev.to/alexanderkdev/react-native-for-mobile-app-development-points-to-consider-in-2021-3i39</guid>
      <description>&lt;p&gt;React Native is a cross-platform framework for developing mobile applications born out of the joint efforts of Facebook and enthusiasts. The framework provides engineers with the possibilities of the React library so they can create native applications that have full access to platform system APIs. React Native supports platforms such as Android, Android TV, iOS, macOS, Apple tvOS, Web, Windows, and UWP.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uXe73wyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sci05849ouz3haek8wg9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uXe73wyw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sci05849ouz3haek8wg9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
As it gets evident from the graph, the React Native app development is on the rise. The framework was the most popular cross-platform mobile tool both in 2019 and 2020. The world's most reputable brands, such as Facebook, Instagram, or Tesla, use React Native. &lt;/p&gt;

&lt;p&gt;The question needs to be asked: how did the framework manage to become so popular? Here‚Äôs a quick recap before we plunge into details: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React Native is compact but has a lot to offer to developers;&lt;/li&gt;
&lt;li&gt;The opportunity to write in JavaScript and use React makes it possible to create an application for both platforms quickly. Surely, it‚Äôs more profitable for any business;&lt;/li&gt;
&lt;li&gt;The framework provides a large library of native and non-native components;
One can go on with a browser for debugging. Besides, there‚Äôs also a hot-reload feature for checking out applied changes. You don‚Äôt have to restructure an application if you change the code;&lt;/li&gt;
&lt;li&gt;The native components of the system (all buttons, pictures, and texts) are all standard components of the operating system. It is impossible to distinguish a native application from a native one. In fact, a React Native app is a native app in itself;&lt;/li&gt;
&lt;li&gt;It‚Äôs easy to manage your own library for React Native using the native functionality of the system.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you've decided to develop an app using native languages ‚Äã‚Äãsuch as Java, Objective-C, and C#, be sure that  the development process will take considerable time. Besides, if you hire an experienced professional, it will not come cheap. So what your next step might be? Why do so many people consider React Native when developing a mobile app? Let‚Äôs find out. &lt;/p&gt;

&lt;p&gt;The pros and cons of React Native&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wgwD6pD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc5miled3o1zx28s30rj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wgwD6pD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yc5miled3o1zx28s30rj.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In itself, a React Native mobile app shouldn‚Äôt be seen as HTML5 or a hybrid one. Instead, it is a mobile application in its own right. True, React Native-based applications may not be as fast as native ones, but you get very close to native performance. I‚Äôd say the speed is almost indistinguishable. &lt;/p&gt;

&lt;p&gt;One way or another, you can still improve the performance of a React Native app with native code. When talking about optimization, native code works like a breeze. To get the best out of the performance, use both sources of code. I mean, some features can be built with native code, and some using React Native‚Äôs code.&lt;/p&gt;

&lt;p&gt;Convenience &lt;br&gt;
Essentially, an experienced full-stack developer can start creating mobile apps in React Native without going through specialized training. So how can you get started? Well, the first thing to do is to familiarize yourself with writing code in Javascript and know a thing or two about React. However, you need to know the peculiarities of both Android and iOS. These platforms have many similar and specific features, so the risk of confusion in the development process is high. In other words, React Native is simple and convenient if the developer understands what he is doing and what an eventual goal is.&lt;/p&gt;

&lt;p&gt;It‚Äôs worth noting that React Native can be added at any time. You can start with RC (greenfield applications) or add it to an existing app (brownfield apps). That basically means that if there is a native application, and you want to update it with common features, it‚Äôs unnecessary to do this natively.&lt;/p&gt;

&lt;p&gt;Awesome user interfaces&lt;br&gt;
The framework makes it possible to design aesthetically appealing user interfaces using pre-built components such as Slider, Switch, Picker, or Button. Besides, it‚Äôs also possible to develop custom components with TouchableNativeFeedback and TouchableOpacity. Hopefully, there‚Äôs a myriad of iOS and Android components that work efficiently on corresponding mobile devices.&lt;/p&gt;

&lt;p&gt;F is for fast &lt;br&gt;
React Native is powerful when it comes to a variety of components. You have all you might need when developing: text, images, keyboard input, animation, clipboard, scrolling lists, progress bar, and links. These components significantly accelerate the development process, not to mention Hot Reloading, which reloads the application without recompiling all the code.&lt;/p&gt;

&lt;p&gt;React Native libraries such as Redux and MobX handle the state of an app, while Awesome React Native - a catalog of components and demos - helps finish the mobile app development faster. Besides, tools like VS Code, WebStorm, and Nuclide for coding, Sentry for monitoring bugs and crashes, and React Developer Tools for debugging also add to the list of React‚Äôs advantages. &lt;/p&gt;

&lt;p&gt;Strong community&lt;br&gt;
Here are some amazing stats: React Native has over 2000 contributors with 95,000+ stars on GitHub. Many reputable companies have contributed to the platform. This way, you will easily find many React Native components and libraries built by the developer community on sites like JS.coach and Native Directory. You will always find someone who can help you on StackOverflow, Reddit, Codementor, or the Reactiflux Discord Community.&lt;/p&gt;

&lt;p&gt;Drawbacks &lt;br&gt;
Let‚Äôs be honest: there are pros and cons to everything. I've talked about many of the positive aspects of React Native, but it has several problems such as large app size, memory leaks in Android apps due to unnecessary processes running in the background, and a slow app startup problem because of some dependencies. However, you can fix these problems to some extent.&lt;/p&gt;

&lt;p&gt;For instance, you can solve the Android app memory leak issue with scrollable lists like FlatList, SectionList, or VirtualList. Refrain from using ListView to prevent memory leaks. To solve a slow application startup problem, you need to reduce the number of dependencies in your application and use components that work very well. What‚Äôs more, Hermes, a JavaScript engine optimized for React Native, helps launch applications faster, owing to build-time precompilation of JavaScript into effective bytecode.&lt;/p&gt;

&lt;p&gt;How we can help you with React Native (+ video case study)&lt;br&gt;
Here at Akveo, we use React Native a lot. We said it once, and we‚Äôll say it again: using React Native is the easiest yet reliable method to reach the market faster. We‚Äôve helped our clients save on development costs while providing them with cross-platform applications that work perfectly on any platform.&lt;/p&gt;

&lt;p&gt;What‚Äôs more, as React Native advocates, we developed our own products based on React Native UI Kitten is an open-source and free framework for creating cross-platform mobile applications. Design system-based, UI Kitten brings your product from an MVP to the final product version. &lt;/p&gt;

&lt;p&gt;However, as the title suggests, a picture is worth a thousand words. Let me speak about one of our clients and how we helped them with React Native. Enter the client: Felmo is a German company from the industry of veterinary services. The customer came up with the idea of developing a mobile application that links vet clinics and pet owners that want to receive medical care services online. Using UI Kitten, our team reduced front-end development time by 25% and saved thousands of dollars for the client. The end result of the project is a multifunctional mobile application with a set of custom icons and illustrations.&lt;/p&gt;

&lt;p&gt;To sum up (and take action) &lt;br&gt;
If you want a quick conclusion, it's easy to formulate it in one phrase. React Native is a robust mobile app development tool that allows developers to quickly create products while saving costs on development. When comparing the pros and cons of React Native mobile development, it's a no-brainer to realize that the advantages outweigh the minor drawbacks.&lt;/p&gt;

&lt;p&gt;We know it firsthand, as our React Native expertise is rich. We‚Äôre already familiar with all the pain points and workarounds. Besides, we‚Äôre professionals in native development as well, so we know for sure when and how to use both methods. Sure, the trends in mobile development may change, but some things always remain in great demand. React Native is widely used by big brands, so don't it won‚Äôt disappear any time soon. Contact us (&lt;a href="https://exceed-team.com/"&gt;https://exceed-team.com/&lt;/a&gt;) to get the quote, and let‚Äôs build your React Native-based mobile app.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>app</category>
      <category>mobileapp</category>
    </item>
    <item>
      <title>Exciting time ahead.  I joined the Foremüå± team</title>
      <author>Anuj Bhavsar</author>
      <pubDate>Wed, 09 Jun 2021 13:37:45 +0000</pubDate>
      <link>https://dev.to/anujbhavsar96/exciting-time-ahead-i-joined-the-forem-team-25do</link>
      <guid>https://dev.to/anujbhavsar96/exciting-time-ahead-i-joined-the-forem-team-25do</guid>
      <description>&lt;p&gt;Hello Everyoneüëã,&lt;/p&gt;

&lt;p&gt;My name is Anuj Bhavsar, based in Ahmedabad, IndiaüáÆüá≥. And I'm proud to announce that I have recently joined the Foremüå± team as a Product Designer.&lt;/p&gt;

&lt;p&gt;I'll be working with &lt;a class="mentioned-user" href="https://dev.to/lisasy"&gt;@lisasy&lt;/a&gt;
 &amp;amp; &lt;a class="mentioned-user" href="https://dev.to/pp"&gt;@pp&lt;/a&gt;
 designing the experience for empowering communities.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#about-me"&gt;
  &lt;/a&gt;
  About meüòé
&lt;/h3&gt;

&lt;p&gt;I'm a computer science dropped-out student(competitive coding wasn't my cup of tea, and then the creative field came to rescue). I made my way into design industry five years back by self-learning and the help of the online community. I've been working in this industry for the last four years. Before Forem, I've worked with India's biggest Edtech startup Vedantu. Also, I've experience working with a Design studio.&lt;/p&gt;

&lt;p&gt;When I'm not designing, I enjoy binge-watching series &amp;amp; movies üé¨, clicking &amp;amp; editing picturesüì∏ , and watching cute animals on Instagram. I'm always grooving on some tunes on Spotifyü•Å while working.&lt;/p&gt;

&lt;p&gt;Nowadays I'm into cookingü•ò, workoutsüèãüèª, dog parentingüê∂ , and house decorationsüèµ.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#why-forem"&gt;
  &lt;/a&gt;
  Why Foremü§î?
&lt;/h3&gt;

&lt;p&gt;Because why not? Where will I find such a dream team dedicated to working towards such a noble and fascinating problem? &lt;/p&gt;

&lt;p&gt;Being a self-taught designer, I know the importance of community. DEV is such an incredible example of that. And Forem is helping creators drive such communities.&lt;/p&gt;

&lt;p&gt;The thing I like about Forem+DEV is open-source and the habit of building in public. Transparency is everything in such time. &lt;/p&gt;




&lt;p&gt;Excited to work with these talented folks and enhance the user experience for Foremüå±&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#where-you-can-find-me"&gt;
  &lt;/a&gt;
  Where you can find meüëÄ
&lt;/h3&gt;

&lt;p&gt;Follow me here on DEV for work-related updates.&lt;br&gt;
&lt;a href="https://twitter.com/anujbhavsar50"&gt;Twitter&lt;/a&gt; ‚Ä¢ &lt;a href="https://www.instagram.com/anuj.png/"&gt;Instagram&lt;/a&gt; ‚Ä¢ &lt;a href="https://dribbble.com/anujbhavsar50"&gt;Dribbble&lt;/a&gt;&lt;/p&gt;

</description>
      <category>career</category>
      <category>meta</category>
      <category>design</category>
    </item>
    <item>
      <title>Looking for CSS wizards to contribute</title>
      <author>Przemyslaw Michalak</author>
      <pubDate>Wed, 09 Jun 2021 13:30:18 +0000</pubDate>
      <link>https://dev.to/przemek/looking-for-css-wizards-to-contribute-1d34</link>
      <guid>https://dev.to/przemek/looking-for-css-wizards-to-contribute-1d34</guid>
      <description>&lt;p&gt;Hi everyone. I'm co-creator of the project that you might heard of already. In short - it is automated front-end Studio that works in the browser and has it's own repository of fully customizable Widgets, Live Preview, meta-framework and a much more. You can read about it &lt;a href="https://dev.to/przemek/front-end-studio-powered-by-solidjs-e5o"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One of the features that comes with the Studio are Widgets. They can be inserted inside of any project within one click. All of them have consistent naming when it comes to their styles which makes them easy to customize by either scoped CSS files or Global Styles.&lt;/p&gt;

&lt;p&gt;Right now we are thinking of implementing the library with pre-made Global Styles that can be inserted inside of the project within one click and give initial look to the app created by developer. Unfortunately neither me or &lt;a href="https://dev.to/chrisczopp"&gt;Chris&lt;/a&gt; are UI designers. But that gives the great opportunity for our community.&lt;/p&gt;

&lt;p&gt;The Studio is offered in FREEMIUM model. So anyone can create their own project for FREE, use as many of basic Widgets (52 at the moment) and style them, use advantage of setup free Live Preview, Implementation Assistant (in context notification system that generate files and necessary glue code while triggered by an user) and export code outside of the Studio to clean and well organized JSX powered by &lt;a href="http://solidjs.com/"&gt;SolidJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And that's the deal. We are looking for developers who would be interested in creating Global Styles for the Studio. As a return we will offer 6 months of 'freelancer' plan for free. That gives a great opportunity for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;everyone that is looking for alternative fast ways of delivering more competitive products to their customers&lt;/li&gt;
&lt;li&gt;learners who would like to add to their CV/portfolio new project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although you can create projects from simple landing pages to advanced administration panels for absolutely FREE, the 'Freelancer' plan offers a couple of amazing features as automatically generated prerenders that allows to hit over 90% score in well know tools measuring speed of websites (lighthouse for example) or access to repository with more advanced Widgets (34 at the moment).&lt;/p&gt;

&lt;p&gt;How it works?&lt;/p&gt;

&lt;p&gt;You can clone repository from &lt;a href="https://github.com/gluecodes/gluecodes-global-styles"&gt;here&lt;/a&gt; and use it's README as a guideline what exactly needs to be styled. Then you can access the &lt;a href="https://ide.glue.codes/?openedTab=demos"&gt;Studio&lt;/a&gt; boilerplate that I prepared for you. All the Widgets have consistent naming which makes styling of the whole app very fast, smooth and easy. When you finish with everything you can simply copy the CSS or export the project, add it to cloned GitHub repository and commit changes.&lt;/p&gt;

&lt;p&gt;What is worth to know?&lt;/p&gt;

&lt;p&gt;Before you submit your work you can create your thumbnail and short README file where you can leave your name that will be visible for everyone before inserting your styles to their project. Also remember that you don't need to style every single class that you find in the boilerplate.&lt;/p&gt;

&lt;p&gt;If you will need help with anything you can use our group on FB where you can ask any questions related to GlueCodes Studio:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.facebook.com/groups/gluecodesstudio"&gt;https://www.facebook.com/groups/gluecodesstudio&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just in case you missed it, here is our website:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.glue.codes"&gt;https://www.glue.codes&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the GitHub repository:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/gluecodes/gluecodes-ide/pull/66"&gt;https://github.com/gluecodes/gluecodes-ide/pull/66&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to download node js on macOS</title>
      <author>Nerd Clump</author>
      <pubDate>Wed, 09 Jun 2021 13:24:07 +0000</pubDate>
      <link>https://dev.to/nerdclump7/how-to-download-node-js-on-macos-2ol6</link>
      <guid>https://dev.to/nerdclump7/how-to-download-node-js-on-macos-2ol6</guid>
      <description>&lt;p&gt;This guide is for people who want help with how to download node.js on macOS and you will know everything step by step.&lt;br&gt;
This process will take about 1 minute to install the node.js file.&lt;br&gt;
Node.js is not a library or framework. but in fact, it‚Äôs a runtime environment. It helps programmers to write Server-Side scripts with the help of javascript. Node.js is built on Chrome‚Äôs V8 JavaScript engine.&lt;br&gt;
Let‚Äôs Get Started&lt;br&gt;
Read all the steps to know how to download node.js on macOS&lt;br&gt;
Step 1: Go to &lt;a href="https://nodejs.org"&gt;Nodejs.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j0T9c1LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/843dkaxij6yz58auit9y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j0T9c1LN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/843dkaxij6yz58auit9y.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 2: Click on the current version to download the latest version of the nodejs and it will automatically updates the node.js. And Download the File to continue&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1Hk0dMDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cfe1wisbs635g8xmqot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1Hk0dMDG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3cfe1wisbs635g8xmqot.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 3: Go to Finder and then Download tab to find node.js package. Then Double click on the file to install.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sVDMYKzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asixvs90krur334mwbfw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sVDMYKzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/asixvs90krur334mwbfw.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 4: If you get this then follow the below steps as shown in image 4, If you don‚Äôt get it then skip to &lt;a href="//www.nerdclump.com/how-to-download-node-js-in-mac/"&gt;step 7&lt;/a&gt; to continue.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o8e_nf1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/131kzx0yd6l5o8h9a5ae.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o8e_nf1v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/131kzx0yd6l5o8h9a5ae.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Step 5: Open System Preferences&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R_QOiAcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1tk6487indan8cyytk2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R_QOiAcM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t1tk6487indan8cyytk2.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Read the Full Article here &lt;a href="//www.nerdclump.com/how-to-download-node-js-in-mac/"&gt;How to download node js on macOS&lt;/a&gt;&lt;br&gt;
This Article is from &lt;a href="//www.nerdclump.com/"&gt;Nerd Clump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note: All the images are from &lt;a href="https://www.nerdclump.com/"&gt;Nerd Clump&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Hexagons and Beyond: Responsive Grid Patterns, Sans Media Queries</title>
      <author>Temani Afif</author>
      <pubDate>Wed, 09 Jun 2021 13:21:25 +0000</pubDate>
      <link>https://dev.to/afif/hexagons-and-beyond-responsive-grid-patterns-sans-media-queries-1nb4</link>
      <guid>https://dev.to/afif/hexagons-and-beyond-responsive-grid-patterns-sans-media-queries-1nb4</guid>
      <description>&lt;p&gt;Since the rise of Flexbox and CSS Grid, everyone is claming the same: "float is dead!", "stop using float!" but I'm here to resurrect our old friend float to create complex and responsive layouts‚Äâthat you cannot achieve using flexbox and CSS grid. All this without any single media query.&lt;/p&gt;

&lt;p&gt;I know, it's hard to believe. So let's start with a working demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYoZBOy?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This is a fully responsive hexagon grid made without media queries, JavaScript, or a ton of hacky CSS. Resize the demo screen and see the magic. In addition to being responsive, the grid also scales. For example, we can chuck more hexagons in there by adding more divs, and control both the sizing and spacing using CSS variables.&lt;/p&gt;

&lt;p&gt;Cool, right? And this is only one example among many grids we will build in the same manner.&lt;/p&gt;

&lt;p&gt;This article is a generic version of a previous one where I only talked about hexagon shapes: &lt;a href="https://dev.to/afif/responsive-hexagon-grid-without-media-query-57g7"&gt;https://dev.to/afif/responsive-hexagon-grid-without-media-query-57g7&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#making-a-grid-of-hexagons"&gt;
  &lt;/a&gt;
  Making a grid of hexagons
&lt;/h2&gt;

&lt;p&gt;First, we create our hexagon shape. This task is fairly easy using &lt;code&gt;clip-path&lt;/code&gt;. We will consider a variable &lt;code&gt;S&lt;/code&gt; that will define the dimension of our element. Bennett Feely's &lt;a href="https://bennettfeely.com/clippy/"&gt;Clippy&lt;/a&gt; is a great online generator for clip paths.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lWe56Si2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/hex-clip-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lWe56Si2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/hex-clip-path.png" alt="Hexagon shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each hexagon is an &lt;code&gt;inline-block&lt;/code&gt; element. The markup can go something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--etc. --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶and the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* we will talk about this later ... */&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* size  */&lt;/span&gt;
  &lt;span class="py"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c"&gt;/* margin */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* disable white space between inline block element */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.1547&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* we reset the font-size if we want to add some content */&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Nothing complex so far. We have a main element that holds a container which, in turn, holds the hexagons. Since we are dealing with &lt;code&gt;inline-block&lt;/code&gt;, we need to fight the common white space issue (using the &lt;code&gt;font-size&lt;/code&gt; trick) and we consider some margin (defined with the variable &lt;code&gt;M&lt;/code&gt;) to control the space.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the result so far:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0A6Mf8XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/CefrNYpk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0A6Mf8XK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/CefrNYpk.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every other row needs some negative offset so the rows overlap rather than stack directly on top of each other. That offset will be equal to 25% of the element height (see Figure 1). We apply that offset to &lt;code&gt;margin-bottom&lt;/code&gt; to get the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.1547&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.2886&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* some negative margin to create overlap */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶and the result becomes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsF7rvXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619908434242_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsF7rvXt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619908434242_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the real trick is how we can shift the second row to get a perfect hexagon grid. We've already scrunched things to the point where the rows overlap each other vertically, but what we need is to push every other row toward the right so the hexagons stagger rather than overlap. Here's where &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;shape-outside&lt;/code&gt; come into play.&lt;/p&gt;

&lt;p&gt;Did you wonder why we have a &lt;code&gt;.main&lt;/code&gt; element wrapping our container and having &lt;code&gt;display: flex&lt;/code&gt; ? That &lt;code&gt;div&lt;/code&gt; is also a part of the trick. In a &lt;a href="https://dev.to/afif/float-an-element-to-the-bottom-corner-342n"&gt;previous article&lt;/a&gt;, I used float and I needed that flexbox container in order to be able to use &lt;code&gt;height: 100%&lt;/code&gt;. I will be doing the same thing here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I am using the &lt;code&gt;container::before&lt;/code&gt; pseudo-element to create a float element that take up all the height at the left of the grid, and that has a width equal to half a hexagon (plus its margin). We get the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2lNYVg6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/PTuQEwm8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lNYVg6C--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/PTuQEwm8.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, we can reach for &lt;code&gt;shape-outside&lt;/code&gt;. Let's take a quick refresher on what it does:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;shape-outside&lt;/code&gt; CSS property defines a shape‚Äîwhich may be non-rectangular‚Äîaround which adjacent &lt;strong&gt;inline content&lt;/strong&gt; should wrap. By default, inline content wraps around its margin box; shape-outside provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes. &lt;sup&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/shape-outside"&gt;ref&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice "inline content" in the definition. This explains exactly why the hexagons need to be &lt;code&gt;inline-block&lt;/code&gt; elements. But to understand what kind of shape we need, let's zoom into the pattern.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aiuhqz9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910028475_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aiuhqz9W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910028475_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What's cool about &lt;code&gt;shape-outside&lt;/code&gt; is that it actually works with gradients. But what kind of gradient fits our situation?&lt;/p&gt;

&lt;p&gt;If, for example, we have 10 rows of hexagons, we only need to shift means every even row. Seen differently, we need to shift every second row so we need a kind of repetition‚Äâ‚Äî‚Äâperfect for a repeating gradient!&lt;/p&gt;

&lt;p&gt;We'll create a gradient with two colors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A transparent one to create the ‚Äúfree space‚Äù while allowing the first row to stay in place (illustrated by the blue arrow above).&lt;/li&gt;
&lt;li&gt;An opaque color to shift the second row to the right so the hexagons aren‚Äôt directly stacked on top of one another (illustrated by the green arrow).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our &lt;code&gt;shape-outside&lt;/code&gt; value will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;shape-outside&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#0000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* #0000 = transparent */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's find the value of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;. &lt;code&gt;B&lt;/code&gt; will simply be equal to the height of two rows since our logic need to repeat each two rows.&lt;/p&gt;

&lt;p&gt;The height of two rows is equal to the height of two hexagons (including their margins), minus twice the overlap (&lt;code&gt;2*Height + 4*M - 2*Height*25% = 1.5*Height + 4*M&lt;/code&gt;). Or, expressed in CSS with &lt;code&gt;calc()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="err"&gt;732&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--s&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--m&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's a lot! So, let's hold all of this in a CSS custom property, &lt;code&gt;F&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The value of &lt;code&gt;A&lt;/code&gt; (defined by the blue arrow in the previous figure) needs to be at least equal to the size of one hexagon, but it can also be bigger. In order to push the second row over to the right, we need few pixel of opaque color so &lt;code&gt;A&lt;/code&gt; can simply be equal to &lt;code&gt;B - Xpx&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is a small value.&lt;/p&gt;

&lt;p&gt;We end up with something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;shape-outside&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#0000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--f&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="err"&gt;#000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--f&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the following result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nqF2D4j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910864415_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nqF2D4j3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619910864415_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See that? Our repeating linear gradient's shape is pushing every other row to the right by one half the width of a hexagon to offset the pattern.&lt;/p&gt;

&lt;p&gt;Let's put that all together:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* size  */&lt;/span&gt;
  &lt;span class="py"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c"&gt;/* margin */&lt;/span&gt;
  &lt;span class="py"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.732&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* disable white space between inline block element */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;1.1547&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;75%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="m"&gt;25%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="m"&gt;0.2885&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! With no more than 15 CSS declarations, we have a responsive grid that fit nicely into all the screen sizes and we can easily adjust things by simply controling two variables.&lt;/p&gt;

&lt;p&gt;You may have noticed that I am adding &lt;code&gt;-1px&lt;/code&gt; to the variable &lt;code&gt;F&lt;/code&gt;. Since we are dealing with calculation that involve decimals, the rounding may give us bad results. To avoid this we add or remove few pixels. I am also using &lt;code&gt;120%&lt;/code&gt; instead of &lt;code&gt;100%&lt;/code&gt; for the height of the floated element for similar reasons. There is no particular logic with theses values; we simply adjust them to make sure to cover most of the cases without any misaligning our shapes.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#want-more-shapes"&gt;
  &lt;/a&gt;
  Want more shapes?
&lt;/h2&gt;

&lt;p&gt;We can do more than hexagons with this approach! Let‚Äôs create a "rhombus" grid instead. Again, we start with our &lt;code&gt;clip-path&lt;/code&gt; to create the shape:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhkvsxUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/rhombus-clip-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZhkvsxUN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/rhombus-clip-path.png" alt="Rhombus clip-path shape"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code is basically the same. What's changing are the calculations and values. Find below a table that will illustrate the changes.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Hexagon grid&lt;/th&gt;
&lt;th&gt;Rhombus grid&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.1547)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--s)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(50% 0, 100% 50%, 50% 100%, 0 50%)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.2885)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.5)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.7324 + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s) + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;And we‚Äôre done! A mere four changes to our code gets us a completely new grid but with a different shape.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWbpjvw?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#just-how-flexible-is-this"&gt;
  &lt;/a&gt;
  Just how flexible is this?
&lt;/h2&gt;

&lt;p&gt;We saw how we were able to make the hexagon and rhombus grids using the exact same code structure, but different calculations. &lt;/p&gt;

&lt;p&gt;Let me blow your mind with another idea: What about making that calculation a variable so that we can easily switch between different grids without changing the code? We can certainly do that!&lt;/p&gt;

&lt;p&gt;We'll use an octagonal shape because it's more of a generic shape from that we can use to create other shapes (a hexagon, a rhombus, a rectangle, etc.) simply by changing a few values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb1lb-pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/octagon-clip-path.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jb1lb-pA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/octagon-clip-path.png" alt="Octagon shape clip-path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our octagon is defined with four variables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;S&lt;/code&gt;: the width.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;R&lt;/code&gt;: the ratio that will help us defines the height based on the width.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;hc&lt;/code&gt; and &lt;code&gt;vc&lt;/code&gt; : both of these will control our &lt;code&gt;clip-path&lt;/code&gt; values and the shape we want to get. &lt;code&gt;hc&lt;/code&gt; will be based on the width while &lt;code&gt;vc&lt;/code&gt; on the height&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I know it looks hefty, but the &lt;code&gt;clip-path&lt;/code&gt; is defined using eight points (like shown in the figure). Adding some CSS variables, we get this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;clip-path&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;polygon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
   &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the top */&lt;/span&gt;
   &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the right */&lt;/span&gt;
   &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--hc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the bottom */&lt;/span&gt;
   &lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;)),&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--vc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="c"&gt;/* 2 points at the left */&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is what we're aiming for:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zYxWTRRz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619961411571_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zYxWTRRz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619961411571_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs zoom in to identify the different values:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LCVvFzqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619963939847_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LCVvFzqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619963939847_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The overlap between each row (illustrated by the red arrow) can be expressed using the vc variable which gives us a &lt;code&gt;margin-bottom&lt;/code&gt; equal to &lt;code&gt;M - vc&lt;/code&gt; (where &lt;code&gt;M&lt;/code&gt; is our margin).&lt;/p&gt;

&lt;p&gt;In addition to the margin we applied between our element, we also need an additional horizontal margin (illustrated by the yellow arrow) equal to &lt;code&gt;S - 2*hc&lt;/code&gt;. Let's define another variable for the horizontal margin (&lt;code&gt;MH&lt;/code&gt;) that is equal to &lt;code&gt;M + (S - 2*hc)/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The height of two rows is equal to twice the size of a shape (plus the margin), minus twice the overlap, or &lt;code&gt;2*(S + 2*M) - 2*vc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's update our table of values to see how we're calculating things between the different grids:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Hexagon grid&lt;/th&gt;
&lt;th&gt;Rhombus grid&lt;/th&gt;
&lt;th&gt;Octagon grid&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.1547)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*var(--r)))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clip-path&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(0% 25%, 0% 75%, 50% 100%, 100% 75%, 100% 25%, 50% 0%)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(50% 0, 100% 50%, 50% 100%, 0 50%)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;polygon(var(--hc) 0, calc(100% - var(--hc)) 0,100% var(--vc),100% calc(100% - var(--vc)), calc(100% - var(--hc)) 100%,var(--hc) 100%,0 calc(100% - var(--vc)),0 var(--vc))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--mh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;‚Äì&lt;/td&gt;
&lt;td&gt;‚Äì&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) + (var(--s) - 2*var(--hc))/2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--m)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--m)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;var(--m) var(--mh)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;margin-bottom&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.2885)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--s)*0.5)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--m) - var(--vc))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s)*1.7324 + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(var(--s) + 4*var(--m))&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;calc(2*var(--s) + 4*var(--m) - 2*var(--vc))&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Alright, let‚Äôs update our CSS with those adjustments:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* size  */&lt;/span&gt;
  &lt;span class="py"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* ratio */&lt;/span&gt;

  &lt;span class="c"&gt;/* clip-path parameter */&lt;/span&gt;
  &lt;span class="py"&gt;--hc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;--vc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="py"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* vertical margin */&lt;/span&gt;
  &lt;span class="py"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--hc&lt;/span&gt;&lt;span class="p"&gt;))/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* horizontal margin */&lt;/span&gt;
  &lt;span class="py"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--vc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* disable white space between inline block element */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--r&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;initial&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;clip-path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;polygon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--vc&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As we can see, the code structure is the same. We simply added more variable to control the shape and extend the &lt;code&gt;margin&lt;/code&gt; property.&lt;/p&gt;

&lt;p&gt;And below a working example. Adjust the different variables to control the shape while having a fully responsive grid:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWpExVW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;An interactive demo, you say? You bet!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/NWpaJMJ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;To make things easier, I am expressing the &lt;code&gt;vc&lt;/code&gt; and &lt;code&gt;hc&lt;/code&gt; as percetange of the width and height so we can easily scale our elements without breaking the &lt;code&gt;clip-path&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From the above we can easily get the initial hexagonal grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z-KbJ-xA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967785492_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z-KbJ-xA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967785492_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rhombus grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6s4UbiqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967852929_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6s4UbiqA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619967852929_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And yet another hexagon grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TZNf-Uau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/vm8u1y_Y.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TZNf-Uau--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/vm8u1y_Y.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A masonry-like grid:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sUGpWNxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968042870_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sUGpWNxm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i1.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968042870_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And a checkerboard while we are at it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oM1VzgIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968097777_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oM1VzgIC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1619968097777_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A lot of possibilities to create a responsive grid with any kind of shape! All we have to do is adjust few variables.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#fixing-the-alignment"&gt;
  &lt;/a&gt;
  Fixing the alignment
&lt;/h3&gt;

&lt;p&gt;Let's try to control the alignment of our shapes. Since we are dealing with &lt;code&gt;inline-block&lt;/code&gt; elements, we're dealing with default left alignment and some empty space at the end, depending on viewport width.&lt;/p&gt;

&lt;p&gt;Notice that we alternate between two kind of grids based on the screen width: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kQdj3TZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620174099369_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kQdj3TZu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620174099369_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grid #1: A different number of items per row (N, N-1,N, N-1, etc.)&lt;/li&gt;
&lt;li&gt;Grid #2: The same number of items per row (N, N, N, N, etc.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It would be good to always have one of the grid all the time (either #1 or #2) and center everything so that the free space is equally divided on both sides.&lt;/p&gt;

&lt;p&gt;In order to get the first grid in the figure above, the container width needs to be a multiplier of the size of one shape, plus its margin, or &lt;code&gt;N*(S + 2*MH)&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer value.&lt;/p&gt;

&lt;p&gt;This may sound impossible with CSS, but it's indeed possible. I made it using CSS grid:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;.main&lt;/code&gt; is now a grid container. Using &lt;code&gt;grid-template-columns&lt;/code&gt;, I define the column width (as previously explained) and use the &lt;code&gt;auto-fit&lt;/code&gt; value to get as many columns as possible into the available space. Then, the &lt;code&gt;.container&lt;/code&gt; spans all of the grid columns using &lt;code&gt;1/-1&lt;/code&gt;‚Äâ‚Äî‚Äâwhich means that the width of our container will be a mutiplier of one column size.&lt;/p&gt;

&lt;p&gt;All it takes to center things is &lt;code&gt;justify-content: center&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yes, CSS is magic!&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/poeWYqv?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Resize the demo and notice that not only do we have the first grid from the figure, but everything is perfectly centered as well.&lt;/p&gt;

&lt;p&gt;But wait, we removed &lt;code&gt;display: flex&lt;/code&gt; and swapped in &lt;code&gt;display: grid&lt;/code&gt;‚Ä¶ so how is the percentage-based height of the float still working? I had said that using a flex container was the key for that, no?&lt;/p&gt;

&lt;p&gt;Well, turns out CSS grid sports that feature too. From &lt;a href="https://www.w3.org/TR/css-grid-1/#algo-overview"&gt;the specification&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once the size of each grid area is thus established, the grid items are laid out into their respective containing blocks. The grid area‚Äôs width and height are considered definite for this purpose.&lt;br&gt;
Note: Since formulas calculated using only definite sizes, such as the stretch fit formula, are also definite, the size of a grid item which is stretched is also considered definite.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A grid item has a &lt;code&gt;stretch&lt;/code&gt; alignment by default, so its height is definite, meaning using a percentage as a height inside it is perfectly valid.&lt;/p&gt;

&lt;p&gt;Let's say we instead want the second grid in the figure‚Äâ‚Äî‚Äâwe simply add an extra column with a width equal to half the width of the other columns:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto-fit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/rNyGRbM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Now, in addition to a fully responsive grid that is flexible enough to take custom shapes, everything is perfectly centred!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#wait-one-more-a-pyramidal-grid"&gt;
  &lt;/a&gt;
  Wait, one more: a pyramidal grid
&lt;/h2&gt;

&lt;p&gt;Let's take everything we've learned and build another amazing grid. This time, we‚Äôll transform the grid we just made into a pyramidal one.&lt;/p&gt;

&lt;p&gt;Consider that, unlike the grid we've made so far, the number of elements is important especially for the responsive part. It‚Äôs required to know the number of elements and more precesily the number of rows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7RW0y9Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/different-pyramid.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7RW0y9Nk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/different-pyramid.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It doesn't mean we need a bunch of hardcoded values; rather we use an extra variable to adjust things based on the number of rows.&lt;/p&gt;

&lt;p&gt;The logic is based on the number of rows because different numbers of elements may give us the same number of rows. For example, there are five rows when we have between 11 and 15 elements, even if the last row is not fully occupied. Having between 16 and 21 elements gives us six rows, and so on. The number of rows is our new variable.&lt;/p&gt;

&lt;p&gt;Before digging into the geometry and the math here is a working demo:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/gOmjZOO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Notice that most of the code is the same as what we‚Äôve done in the previous examples. So let's focus on the new properties that we‚Äôve added:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c"&gt;/* number of rows */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;NR&lt;/code&gt; is our variable for the number of rows. The width of the container needs to be equal to the last row of the pyramid to make sure it hold all the elements. If you check the previous figure, you'll see that the number of the items contained in the last row is simply equal to the number of rows, which means the formula is: &lt;code&gt;NR* (S + 2*MH)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You may have also noticed that we also added an &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; element in there. We did that because we need two floating elements where we will apply &lt;code&gt;shape-outside&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To understand why we need two floating elements let's see what is done behind the scenes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AzCdlFuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/behind-the-scenes.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AzCdlFuA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i0.wp.com/css-tricks.com/wp-content/uploads/2021/05/behind-the-scenes.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The blue elements are our floating elements. Each one is having a width equal to half the container size, minus half a shape size, plus margin. The height is equal to four rows in our case, and to &lt;code&gt;NR - 1&lt;/code&gt; in a more generic case. Earlier, we defined the height of two rows, &lt;code&gt;F&lt;/code&gt;, so the height of one row is &lt;code&gt;F/2&lt;/code&gt;. That's how we landed at &lt;code&gt;height: calc(var(--f)*(var(--nr) - 1)/2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now that we have the size of our elements, we need to apply a gradient to our shape-outside.&lt;/p&gt;

&lt;p&gt;The purple coloration in the figure above is the restricted area for our elements (it need to be an opaque color). The remaining area is the free space where the elements can flow (it need to be a transparent color). This can be done using a diagonal gradient:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;shape-outside&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;linear-gradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;bottom&lt;/span&gt; &lt;span class="nt"&gt;right&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="err"&gt;#000&lt;/span&gt; &lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%,&lt;/span&gt; &lt;span class="err"&gt;#0000&lt;/span&gt; &lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We simply change right with left for the other floated element. You have probably noticed that this is not responsive. In fact, go ahead and adjust the viewport width of the demo and see just how unresponsive this is.&lt;/p&gt;

&lt;p&gt;We have a couple of options to get responsive:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We can fall back to the first grid when the container width is smaller than the viewport width. It's a bit tricky to code, but it allows us to preserve the same size for our elements.&lt;/li&gt;
&lt;li&gt;We can reduce the size of our elements in order to keep the pyramidal grid. This is easier to code using the percentage-based value trick, but that could result in super tiny elements on smaller screen sizes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's go with the first solution. We like a good challenge, right?&lt;/p&gt;

&lt;p&gt;To get the pyramidal grid, we needed two floated element. The initial grid needed just one floated element. Luckily, our structure allows us to have three floated elements without needing to add more elements to the markup, thanks to pseudo-elements. We will use &lt;code&gt;container::before&lt;/code&gt;, &lt;code&gt;i::before&lt;/code&gt;, &lt;code&gt;i::after&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* Same as before... */&lt;/span&gt;

&lt;span class="c"&gt;/* The initial grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;repeating-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The pyramidal grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;shape-outside&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;bottom&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#000&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;#0000&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need a trick that lets us use either the first floated element or the other two, but not all of them at the same time. This condition should be based on the width of our container:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If the container width is bigger than the width of the last row, we can have our pyramid and use the floated elements inside of &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the container width is smaller than the width of the last row, we switch to the other grid and use the first floated element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can use &lt;code&gt;clamp()&lt;/code&gt; for this! It's sort of like a conditional function that sets a minimum and maximum range and, within that range, we provide it an "ideal" value to use between those points. This way, we can "switch" between grids using our formulas as clamped values, and still avoid using media queries.&lt;/p&gt;

&lt;p&gt;Our code will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;/* the other variables won't change*/&lt;/span&gt;
  &lt;span class="py"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--nr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt; &lt;span class="c"&gt;/* width of last row */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The initial grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* The pyramidal grid */&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="nt"&gt;i&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clamp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0px&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--lw&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;+&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;50%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--mh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--s&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On larger screens, the width of the container (&lt;code&gt;LW&lt;/code&gt;) is now equal to its &lt;code&gt;max-width&lt;/code&gt;, so &lt;code&gt;100% == LW&lt;/code&gt;. That means that the width of &lt;code&gt;.container::before&lt;/code&gt; is equal to &lt;code&gt;0px&lt;/code&gt; (and results in this floated element becoming disabled).&lt;/p&gt;

&lt;p&gt;For the other floating elements, we clamp the width:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;clamp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;0&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--lw&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;1&lt;/span&gt;&lt;span class="nt"&gt;px&lt;/span&gt;&lt;span class="o"&gt;)*&lt;/span&gt;&lt;span class="err"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;calc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;50&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--mh&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nt"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;var&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;--s&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="err"&gt;2&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Ä¶where the middle value &lt;code&gt;((100% - LW + 1px)*1000)&lt;/code&gt; is equal to &lt;code&gt;(0 + 1px)*1000 = 1000px&lt;/code&gt; (an intentionally large, but arbitrary value). It gets clamped to &lt;code&gt;calc(50% - var(--mh) - var(--s)/2)&lt;/code&gt;. In other words, these floated elements are enabled with the correct width (the one we defined previously)&lt;/p&gt;

&lt;p&gt;Voil√†! we have a pyramidal shape on large screen.&lt;/p&gt;

&lt;p&gt;Now, when the container width get smaller, &lt;code&gt;LW&lt;/code&gt; is going to be greater than &lt;code&gt;100%&lt;/code&gt;. So, &lt;code&gt;(LW - 100%)&lt;/code&gt; will be positive. Multiplied by a big value, it's clamped to &lt;code&gt;calc(var(--s)/2 + var(--mh))&lt;/code&gt;, which enables the first floated element. For the other float elements, &lt;code&gt;(100% - LW + 1px)&lt;/code&gt; resolves to a negative value and is clamped to &lt;code&gt;0px&lt;/code&gt;, which disables the float elements.&lt;/p&gt;

&lt;p&gt;Resize the below demo and see how we switch between both grids&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYZEXRp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Let's try adding more elements:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/zYZEXaR?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;See that? Things are scaling perfectly. We can also combine this with the CSS grid alignment trick we used earlier:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/WNpZWaG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Do you think ‚Äúfloat‚Äù is such a bad thing now?&lt;/p&gt;

&lt;p&gt;Want invert the pyramid?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1x3i9f0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620991346257_image.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1x3i9f0S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i2.wp.com/css-tricks.com/wp-content/uploads/2021/05/s_07A03AC602CD604A1A84FE537FD07A78FDA8B04BD4AF14DED8BF2087D58EB481_1620991346257_image.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Like illustrated with the above figure, two changes to the previous code can invert our pyramid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I change the direction of the gradient from &lt;code&gt;to bottom left|right&lt;/code&gt; to &lt;code&gt;to top left|right&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;I add a &lt;code&gt;margin-top&lt;/code&gt; equal to the height of one row.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/MWpEdJG?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;And, hey, we can swap between both pyramid easily:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/bGqoyrr?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Isn't this beautiful? We have a responsive pyramidal grid with custom shapes that we can easily invert and that fallback to another responsive grid on small screen while everything is perfectly centred. All this without a single media query or JavaScript, but instead using the often overlooked float property.&lt;/p&gt;

&lt;p&gt;You will probably notice some missalignment in some particular cases. Yes, it's again some rounding issue related to the calculation we are doing and the fact that we are trying to make this generic with the interactive demos. To rectify this, we simply adjust few values manually (epsecially the percentage of the gradient) until we get back a perfect alignment.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thats-a-float-wrap"&gt;
  &lt;/a&gt;
  That's a &lt;del&gt;float&lt;/del&gt; wrap!
&lt;/h2&gt;

&lt;p&gt;There we have it: combining &lt;code&gt;float&lt;/code&gt; with &lt;code&gt;shape-outside&lt;/code&gt; can help us make complex, flexible and responsive layouts‚Äâ‚Äî‚Äâlong live float!&lt;/p&gt;

&lt;p&gt;The article ends here but this is only the beginning. I provided you with the layout and now you can easily put any content inside the divs, apply a background, shadows, animations, etc.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/t_afif/embed/mdWBYqE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Raku malware analysis</title>
      <author>Paula</author>
      <pubDate>Wed, 09 Jun 2021 13:02:19 +0000</pubDate>
      <link>https://dev.to/terceranexus6/raku-malware-analysis-jon</link>
      <guid>https://dev.to/terceranexus6/raku-malware-analysis-jon</guid>
      <description>&lt;p&gt;Not long ago I &lt;a href="https://dev.to/terceranexus6/yara-for-daily-analysis-1o8"&gt;explained how to do a simple malware analysis using Yara tool&lt;/a&gt;. Yara is nice, mostly because is the common query in most public resources of discovered malware. Although, I wondered about the limits of the rules, and how to look for regex conditionals as I would do in other TTP (Tactics, Techniques and Procedures) &lt;strong&gt;queries&lt;/strong&gt;. Also I wondered if it might be more convenient for a light environment such as my manjaro RPI for malware analysis. SO anyway let's explore about Raku possibilities for this topic. First of all, Raku was created by some Perl enthusiasts, one of them (the one who also taught me about it) has a &lt;a href="https://dev.to/jj"&gt;blog here too&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;It's interesting because it keeps the ideal of making a language accessible but doesn't quite forget about the flexibility. One of the things that got me at first about it was the grammar options. Grammar let's you parse information, which is very useful for website back-end stuff (check it out!). But now, grammar has something called "rules" that lets you regex stuff in order to fit in a description.  &lt;/p&gt;

&lt;p&gt;But rules can be used apart from the Grammar, and that's the main point of the script I'm wondering about. Variable declarations look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my @string = 'this is a string';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But we also have tokens, that allows yo to use rules...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my @string = 'this is a string';
my token somestuff {@string 'other string as well'}
my rule example {&amp;lt;token&amp;gt;.*}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as you can see we can kind of manipulate a token to be some kind of object to work with, and rules to be applied on those tokens. Rules can be False or True, so we can check them like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my token hey {'how''are''you'}
my rule match {&amp;lt;hey&amp;gt;*}

say so 'how are you' ~~ &amp;amp;match; #OUTPUT: TRUE

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this case &lt;code&gt;say so&lt;/code&gt; will let us check the value of the rule &lt;code&gt;match&lt;/code&gt;. Now let's think of our particular case: We need genes (usually strings) that might be related to malware of malicious executables in general, some virus may share genes, and we would like to know this information from a given binary file. So! My approach:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# configuring the genes and the virus (some virus share genes)

my token gene {'this is a malware gene'}
my rule virusx {&amp;lt;gene&amp;gt;.*}

# reading the sample line by line from a binary file

for '/script/mysample'.IO.lines -&amp;gt; $line {
        # If the line contains the gene, print it
    if $line ~~ &amp;amp;virusx {say "Genes from virus X were found: "; say $line; }

}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the simplest example but in the rule virus several genes could be mixed, and you can create as much rules as virus you want to check. Also the regex used for the rules are standard, which is convenient. &lt;/p&gt;

&lt;p&gt;A &lt;code&gt;strace&lt;/code&gt; benchmark of a bash script launching yara and a bash script launching the raku script with docker revealed that the time difference is so small is not worth mentioning itself, but the methodology could be interesting to explore. In the end Yara is very popular and useful, but this way could be awesome for easy API implementations (Raku is well known for back-end, as I said previously) and more flexible due to the rules being less limited. &lt;/p&gt;

</description>
      <category>raku</category>
      <category>security</category>
    </item>
    <item>
      <title>Software Development Myths</title>
      <author>Krowser Web Services </author>
      <pubDate>Wed, 09 Jun 2021 12:59:05 +0000</pubDate>
      <link>https://dev.to/krowser/software-development-myths-331m</link>
      <guid>https://dev.to/krowser/software-development-myths-331m</guid>
      <description>&lt;p&gt;Myths have accompanied man since ancient times and still exist in our high-tech world. So despite the fact software development is a fairly formal science, this does not prevent the existence of many myths and misconceptions in this industry. In this article, we will discuss just some of them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#1. One programming language is better than others&lt;/strong&gt;&lt;br&gt;
Programmers love to praise the language in which they program. You can often hear that some language is better than others. But the truth is that each language serves a specific purpose, and one cannot say for sure that one language is better than another. It‚Äôs like asking which language is better: Italian or French? Surely, it depends on the country in which you are located. On this basis, the benefit of a specific programming language can only be determined within a specific task. And often tasks require knowledge of several languages. Therefore, languages ‚Äã‚Äãwork together, not against each other.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#2. More people are better&lt;/strong&gt;&lt;br&gt;
So if we fail in the planning, we can add more programmers to the team and advance the lost time. This situation sometimes called as ‚Äúconcept of the Mongolian horde‚Äù. In fact, software development is not a mechanical process like manufacturing. So usually adding people to a delayed software project delays it even more. At first, this statement may seem counterintuitive. However, when new people are added, it is needed to learn them and to spend time communicating with the team. So this amount of time cannot be spent on product development. People can be added, but only in a planned and well-coordinated manner.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#3. Programmers can only write code.&lt;/strong&gt;&lt;br&gt;
The creators of such myths about programming are undoubtedly very far from this sphere and do not know how the development process takes place. Usually, the problems solved by computer programs go far beyond the field of information technology. For example, let‚Äôs take the tools for accounting. In order to create a quality product, the programmer should, in general, understand this subject area.&lt;br&gt;
The ideal is the option of cooperation of a professional accountant who knows what he wants and a coder who understands programming and knows how to explain to a machine what to do. However, an accountant in most cases is too far from computer science and is simply unable to explain in detail what he expects from the product. So, the programmer has to go into economic concepts and schemes on his own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#4. Faster is better&lt;/strong&gt;&lt;br&gt;
Yes, there are projects that can be easily and quickly implemented through the designer and a set of custom solutions from the company‚Äôs experience. But these projects, as a rule, close a very narrow target audience and will not bring a high income to the owners of this product. All serious engineering solutions are often not only developed over several years but also require support and have been developed over the years. For example, the history of the creation of the Microsoft Office package. When the task was assigned to it, the implementation period was estimated at 3 months. As a result, the project itself took 6 years.&lt;br&gt;
As a result of this myth, there is an opinion that programmers work around the clock. However, trawls, processing and other ‚Äî they do not bring anything good. Developer productivity drops dramatically if they are forced to work long hours. And it falls so much that in ten hours they begin to do as much as they used to do in six. Therefore, many companies are convinced that programmers cannot work more than six hours a day. After all, both the speed and quality of work are sharply reduced further, which is much worse.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#5. Sticking to the plan is a must&lt;/strong&gt;&lt;br&gt;
It is indisputable, that software development is a set of complex actions that require coordination and attention to detail. So planning is surely is a must. In the early stages of development, it is very important to dive deep into the details, think over the functionality in detail and carefully study the technical task. But not always everything goes according to plan. It is really hard to meet a project, the requirements for which have remained constant throughout the development. For manufacturing processes with frequent repetition of steps, this is a good approach to track every step ‚Äî but it is not suitable for innovation in development. New insights can come daily, and conditions can change constantly. So plans should be considered as initial hypotheses that are constantly being revised.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#6. Nothing is impossible&lt;/strong&gt;&lt;br&gt;
The widespread myth ‚Äúnothing is impossible‚Äù became one of the foundations for this myth. The fact is that, at the mention of IT, there are rarely any limitations and ‚Äúinconvenient‚Äù conditions. For example, if you look at the interface of any search engine from the perspective of an ordinary person, you will not see any difficulties. A set of small phrases and small pictures. However, this is all worth much more than it might seem. Everything has its limitations, even IT sphere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Myth#7. Success from the first trial&lt;/strong&gt;&lt;br&gt;
Experiments with different ideas are an indispensable part of the innovation process. When you experiment often and quickly, of course, you will have to accept the failure of many ideas. But it allows teams to quickly cast away bad decisions and concentrate on more promising ones.&lt;br&gt;
Success from the first time sends teams to the territory of less risky decisions ‚Äî even if customers do not consider them to be a significant improvement over what they were before. Teams do not receive an incentive to develop innovative solutions to user problems.&lt;/p&gt;

&lt;p&gt;The above are only the most popular myths, but besides them, there are many others. All of them in some way create a culture of IT-sphere. Developers, like all other professionals, have their own traditions and customs, sometimes even very funny, but this is another story.&lt;/p&gt;

</description>
      <category>career</category>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>python</category>
    </item>
    <item>
      <title>How to control the quality of your software product?</title>
      <author>UppLabs</author>
      <pubDate>Wed, 09 Jun 2021 12:48:10 +0000</pubDate>
      <link>https://dev.to/upplabs/how-to-control-the-quality-of-your-software-product-425m</link>
      <guid>https://dev.to/upplabs/how-to-control-the-quality-of-your-software-product-425m</guid>
      <description>&lt;p&gt;How to control the quality of your software product? Quality is one of the most important features that applies not only to the product but to every stage of its delivery. If you want to create a successful product, you have to be professional in everything you do. Testing the software product is an important part of development, because even minor errors can affect the effectiveness and success of a whole project. &lt;/p&gt;

&lt;p&gt;Poor quality assurance can lead to the main causes of software startup failures, so the purpose of executing quality assurance tests is to avoid the delivery of poor quality products. In this article, we are going to share with you our ideas for quality measurements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quality-characteristics"&gt;
  &lt;/a&gt;
  QUALITY CHARACTERISTICS
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Functionality&lt;/strong&gt; ‚Äì is determined by the ability of the software to solve problems that correspond to the fixed and anticipated needs of the user under the given conditions of software. Ths characteristic ensures that the software operates correctly and accurately, is interoperable, meets industry standards, and is protected from unauthorized access.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability&lt;/strong&gt; ‚Äì the ability of software to perform the required tasks under specified conditions for a specified period of time or a specified number of operations. The attributes of this characteristic are the completeness and integrity of the entire system, the ability to independently and correctly recover from operational failures, and resiliency.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Usability&lt;/strong&gt; is the user‚Äôs ability to easily understand, study, use the software.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Efficiency&lt;/strong&gt; is the ability of the software to provide the required level of performance in accordance with the allocated resources, time and other specified conditions.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Maintainability&lt;/strong&gt; provides the ease to analyze and test the software, change and fix defects, meet the new requirements, facilitate further maintenance, and to adapt to the existing environment.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Portability&lt;/strong&gt; characterizes software in terms of ease of portability from one environment (software/hardware) to another.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#quality-measurements"&gt;
  &lt;/a&gt;
  QUALITY MEASUREMENTS
&lt;/h3&gt;

&lt;p&gt;The introduction and use of metrics is essential for improving control over the development process, and in particular over the testing process. If we choose the Bug/Defect Metrics, there are following types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open/Closed Bugs (the ratio of the number of open bugs to closed (corrected and rechecked)&lt;/li&gt;
&lt;li&gt;Reopened/Closed Bugs (the ratio of the number of reopened bugs to closed (fixed and rechecked)&lt;/li&gt;
&lt;li&gt;Rejected/Opened Bugs (the ratio of the number of rejected bugs to open)&lt;/li&gt;
&lt;li&gt;Bugs by Severity&lt;/li&gt;
&lt;li&gt;Bugs by Priority&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before delivering a software product, we need to measure its quality to ensure that it is bug-free. The bugs need to be reported per month on all possible environments (Staging, Development, Production) in components. The goal is to minimize the number of bugs on the production on a monthly basis reviews. In case of bugs, the QA needs to meet and find out the reason to fix the problems. The team can use the Jira tool and create the dashboard gadget ‚ÄúFilter Results.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_ovlzQ6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b8t4yg1e4pmh7p5a4iw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_ovlzQ6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0b8t4yg1e4pmh7p5a4iw.png" alt="QA: Bugs reported on staging"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bugs can be reported per feature or epic. The goal is to maximize the quality of every feature/epic on the weekly basis. If needed, this can be followed by the discussion on the code quality lessons learned session with the development team and tech lead. &lt;/p&gt;

&lt;p&gt;The open or resolved bugs per sprint have the goal to minimize the number of open bugs and manage the backlog efficiently on a weekly basis. If needed, the team can discuss the code quality lessons learned session and create the Jira Dashboard gadget ‚ÄúCreated vs. Resolved Chart.‚Äù&lt;/p&gt;

&lt;p&gt;Backlog Management Index (BMI) is used to manage the backlog of open and unresolved problems.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OB6RtbLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np6vuz8d7s9gotm1rccj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OB6RtbLv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/np6vuz8d7s9gotm1rccj.png" alt="BMI index"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If BMI is larger than 100, it means the backlog is reduced. If BMI is less than 100, then the backlog increased.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ErU5wH4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7tevtm01mre7gkyyiz2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ErU5wH4R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7tevtm01mre7gkyyiz2.png" alt="Created vs Resolved Chart: OD bugs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The average time in status and average number of times in the status are used to identify bottlenecks and improve the development process on a daily basis. The team has to discuss the average time with the responsible for blocked items to unblock the team, so everyone can be updated of the process. For these purposes, we can use the Jira dashboard gadgets ‚ÄúAverage Number of Times in Status‚Äù and ‚ÄúAverage Time in Status.‚Äù&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vaDpOjUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4ib8aquvf60i2eo0ipw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vaDpOjUU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4ib8aquvf60i2eo0ipw.jpeg" alt="Average Time in Status"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#quality-requirements"&gt;
  &lt;/a&gt;
  QUALITY REQUIREMENTS
&lt;/h3&gt;

&lt;p&gt;Standards should be applied when writing test plans, specifications, user interfaces, documentation, training materials, and other products. A shared project‚Äôs vision can help ensure its quality. But along with the standards, it is necessary to determine the situations of their use and develop guidelines and requirements for adopting the standards to the needs of the team and the product, if necessary. Any standard you adopt should help you do your best job.&lt;/p&gt;

&lt;p&gt;Most of the requirements could be used directly from the technical reports and all of them had to for the project‚Äôs definitions. Bugs reported as a result of poor requirements have to minimize the number of bugs caused by poor requirements or the lack of them. The team usually can perform such reports per sprint after the demo. If needed, the PM has to outline action items with the team and feature owner to avoid poor/lack of requirements in the future.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pull-request"&gt;
  &lt;/a&gt;
  PULL REQUEST
&lt;/h3&gt;

&lt;p&gt;The quality metric can give you an idea of the amount of time (usually in days) needed for the pull requests to be merged or closed. You can calculate the lead time of all repositories and get an understanding of the team dynamics.&lt;/p&gt;

&lt;p&gt;To get this number, it‚Äôs important to track every pull request and save the date and time for each pull request when it‚Äôs opened and it‚Äôs merged. For the quality measurement we need to calculate:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Pull requests that did not pass the test suite&lt;/li&gt;
&lt;li&gt;Pull requests that broke the build&lt;/li&gt;
&lt;li&gt;The number of rejected and merged requests&lt;/li&gt;
&lt;li&gt;The number of pull requests comments&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#preventative-measures"&gt;
  &lt;/a&gt;
  PREVENTATIVE MEASURES
&lt;/h3&gt;

&lt;p&gt;In a management review meeting, the quality manager gives valuation of the product‚Äôs quality.  The information should correspond to satisfaction surveys. In order to prevent a potential problem, the management team chooses the responsible parties to review code reviews and implement actions that will help to analyze the data. Among the preventative measure we can highlight:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Internal code reviews&lt;/em&gt;&lt;/strong&gt;
performed by one developer and Tech Lead on a daily basis, if there is a ready task. If needed, the responsible developer should provide code improvement. If it is a common issue, it should be discussed in the Lessons learned session. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Code quality lessons learned sessions&lt;/em&gt;&lt;/strong&gt;
to review the feedback in PRs per sprint to raise team awareness, improve code quality and avoid the same mistakes in future. If needed, the responsible developer should provide code improvements.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Story opening sessions&lt;/em&gt;&lt;/strong&gt;
to confirm technical approach and prevent from rework in future performed by developers and Tech lead with the Client‚Äôs developers. If needed,the team should research the suitable solutions and review the areas for related components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To analyse the preventative measures, we can use such trusted best practices, as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Lessons Learned, Post Project Analysis ‚Äì is one of the most powerful tools for proactive improving the quality of your work.&lt;/li&gt;
&lt;li&gt;The retrospective ‚Äì is a separately allocated period of time in order to study the experience gained and ask yourself the following questions: ‚ÄúWhat worked for this product and how to do the same in the future?‚Äù and ‚ÄúWhat went wrong for this product and how to avoid this?‚Äù&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despite the fact that retrospectives are classified as Best Practices, they are rarely used, because it is difficult to gather an entire team: retrospectives take place at the end of project development. Most of the team members are already working on other projects, and those who remain are busy releasing the project or supporting it.&lt;/p&gt;

&lt;p&gt;TYPES OF QUALITY ENGINEERING AND TESTING SERVICES WE PROVIDE IN UPPLABS&lt;/p&gt;

&lt;p&gt;We deal with quality engineering and testing processes covering all stages starting with test management and automation to such categories of testing software services as: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Technical Consulting&lt;/li&gt;
&lt;li&gt;Automation Testing&lt;/li&gt;
&lt;li&gt;Performance Testing&lt;/li&gt;
&lt;li&gt;Security QA&lt;/li&gt;
&lt;li&gt;Regression Testing&lt;/li&gt;
&lt;li&gt;Smoke Testing&lt;/li&gt;
&lt;li&gt;Functional Testing&lt;/li&gt;
&lt;li&gt;Automation Services for Web/Mobile Apps&lt;/li&gt;
&lt;li&gt;API Testing&lt;/li&gt;
&lt;li&gt;Integration and unit testing&lt;/li&gt;
&lt;li&gt;Review of product automation framework and process&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thanks for reading! &lt;/p&gt;

</description>
      <category>qa</category>
      <category>testing</category>
      <category>pullrequest</category>
      <category>programming</category>
    </item>
    <item>
      <title>Getting Started with JavaScript Design Patterns</title>
      <author>Coderslang: Become a Software Engineer</author>
      <pubDate>Wed, 09 Jun 2021 12:47:22 +0000</pubDate>
      <link>https://dev.to/coderslang/getting-started-with-javascript-design-patterns-h67</link>
      <guid>https://dev.to/coderslang/getting-started-with-javascript-design-patterns-h67</guid>
      <description>&lt;p&gt;Design patterns are blueprint solutions that you use to solve common programming problems swiftly and elegantly.&lt;/p&gt;

&lt;p&gt;Everything began in 1994, when four computer scientists Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides, published an iconic book "&lt;strong&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/strong&gt;".&lt;/p&gt;

&lt;p&gt;The content in the book speaks of ways of solving common, specific problems that appear continuously in the software development world. It became a major success, and the four authors became known as the "&lt;strong&gt;Gang of Four&lt;/strong&gt;" or "&lt;strong&gt;GoF&lt;/strong&gt;".&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-design-patterns-are-important"&gt;
  &lt;/a&gt;
  Why design patterns are important
&lt;/h2&gt;

&lt;p&gt;How often do you feel stuck when getting from idea to implementation?&lt;/p&gt;

&lt;p&gt;Learning and understanding design patterns play a pivotal role in catalyzing your programming problem-solving skills. It ramps up your efficiency as you don't have to reinvent the wheel every time you get a new coding task.&lt;/p&gt;

&lt;p&gt;The trick is to identify these common problems as early as the start of the design phase of software development. Then you can use the appropriate design patterns to solving those problems. And voila, you've made design patterns of use to you, but most importantly, to progress through your difficulties with already accepted, widely used, and proven best practices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-problems"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Common Problems&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A good software application must be modular, extensible, or flexible for changes instead of immobility, not rigid or fragile.&lt;/p&gt;

&lt;p&gt;As programmers or architects, we do realize that software requirements are susceptible to changes. They tend to eventually and consistently evolve in a way that none of us can anticipate.&lt;/p&gt;

&lt;p&gt;Hence, design is the first most crucial step towards building an elegant solution.&lt;/p&gt;

&lt;p&gt;As a result, we should not introduce any new bugs or different maintenance problems. It's essential to keep our focus and to try to solve one problem at a time. Changing one part of the code or design should not break any other parts.&lt;/p&gt;

&lt;p&gt;Design patterns can come in handy here. Although they don't solve all of the design problems, you won't get a code that you can copy-paste blindly, but the design patterns can certainly help support you in developing a scheme to approach their issues at hand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#design-patterns-for-javascript"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Design Patterns for JavaScript&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;The "Gang of Four" referenced Design Patterns in their book with object-oriented programming languages, speaking of classes, objects, and interfaces.&lt;/p&gt;

&lt;p&gt;While it's been natural for Java since its creation, most of the classic design patterns became available in JS only with the advent of ES6. It introduced classes and other object-oriented features to JavaScript, and now you can elegantly implement most design patterns in JS.&lt;/p&gt;

&lt;p&gt;JavaScript has several ways of creating objects, implementing modules, supporting lightweight interfaces; hence, with complex server-side javascript applications in the picture, design patterns are expected to provide multiple ways to improvise and maintain the application design.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#three-groups-of-design-patterns-in-programming"&gt;
  &lt;/a&gt;
  Three groups of Design Patterns in programming
&lt;/h2&gt;

&lt;p&gt;The book by the "&lt;strong&gt;Gang of Four&lt;/strong&gt;" introduced 23 design patterns broadly classified into three groups ‚Äî Creational, Structural and Behavioral, according to their purpose.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creational&lt;/strong&gt; ‚Äî oriented towards the creation of objects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Structural&lt;/strong&gt; ‚Äî dealing with the composition of classes or objects.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Behavioral&lt;/strong&gt; ‚Äî concerned with interaction among classes and objects and segregating individual responsibilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#creational-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Creational Design Patterns&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;They deal with the techniques for object creation. In Javascript, we have multiple ways of creating an object. We can adapt the common design patterns to reduce the complexities of object creation, like &lt;strong&gt;Factory&lt;/strong&gt;, &lt;strong&gt;Constructor&lt;/strong&gt;, &lt;strong&gt;Builder&lt;/strong&gt;, &lt;strong&gt;Singleton.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structural-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Structural Design Patterns&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These design patterns deal with techniques for establishing relationships among objects and object composition. They aid in adding new functionalities to applications without modifying the unrelated parts of the application. Commonly used Structural Design Patterns are &lt;strong&gt;Bridge&lt;/strong&gt;, &lt;strong&gt;Decorator&lt;/strong&gt;, &lt;strong&gt;Adapter&lt;/strong&gt;, and &lt;strong&gt;Facade.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#behavioral-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Behavioral Design Patterns&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;These design patterns provide techniques to communicate with multiple unrelated objects optimally, thus ensuring segregated responsibilities of involved objects. Common types of Behavioral Design patterns are &lt;strong&gt;Strategy&lt;/strong&gt;, &lt;strong&gt;Observer&lt;/strong&gt;, and &lt;strong&gt;Chain of Responsibility&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#everyday-examples-of-design-patterns"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Everyday Examples of Design Patterns&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Instead of directly delving into the jargon and technical implementations of design patterns, let's take a bird view of them relative to our everyday life.&lt;/p&gt;

&lt;p&gt;A design pattern is a blueprint to solving a common programming problem. You can look up various scenarios where design patterns have aided in solving various everyday issues.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To make a variety of breakfasts quickly, buy a multipurpose OTG - &lt;strong&gt;Creational&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;To wake up for an early day, use an alarm - &lt;strong&gt;Behavioral&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;To cross a river, build a bridge - &lt;strong&gt;Structural&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a student, you've reused multiple formulae to solve your math problems. If asked to find 20% of a large number, say 645395583, using multiplication and division to do it one after another is probably not a great idea. It works, no doubt, but at the cost of time, memory and energy. Instead, dividing the number by five is a better approach.&lt;/p&gt;

&lt;p&gt;Once you are familiar with better and more accessible alternatives of these approaches to your problems, you tend to use them to solve any problem wherever this fits. For example, when you are at a restaurant having to leave your server a 20% tip. Hence, this is the repeated reuse of a pattern.&lt;/p&gt;

&lt;p&gt;Imagine having to plug your phone charger into a socket in a different country, only to realize it doesn't fit. What would you do?&lt;/p&gt;

&lt;p&gt;Would you buy a new phone, or would you run to a local store, pick up a power adapter that allows an electrical plug from one country to fit into an electrical appliance in another country?&lt;/p&gt;

&lt;p&gt;Design patterns, when used correctly for the right scenarios, act as adapters in your projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#become-a-better-developer"&gt;
  &lt;/a&gt;
  Become a better developer
&lt;/h3&gt;

&lt;p&gt;Design Patterns are not tied to a particular programming language. If you're beginning to learn to code, understanding the language constructs along with design patterns could train your mind to foresee potential problems with your design.&lt;/p&gt;

&lt;p&gt;Consider working on a software development project. As a programmer, you're not entitled to just coding. Clean code, clean design, and extensibility make your code easy to read, easy to understand, and, most importantly, easy to maintain.&lt;/p&gt;

&lt;p&gt;Imagine writing the same piece of code in multiple places. Once you start evolving as a programmer, you'll learn how to reuse code, use abstractions, hide complexities wherever possible, and decouple critically performing code pieces. With practice comes perfection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-you-learn-the-design-pattens"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why should you learn the Design Pattens?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Knowledge of Design patterns is essential to manipulate your brain to start thinking to improve your coding and design skills. With poorly designed projects, maintainability becomes a nightmare. The result is any minor changes to the project may prove costly in terms of time, may lead to either complicated implementations or easy "fixes".&lt;/p&gt;

&lt;p&gt;Now, let's dive into our first &lt;a href="https://learn.coderslang.com/0076-javascript-design-patterns-builder/"&gt;JavaScript Design Pattern - Builder&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also get my &lt;a href="https://learn.coderslang.com/free-ebooks/"&gt;free e-book&lt;/a&gt; to prepare for the technical interview or start to &lt;a href="https://js.coderslang.com"&gt;Learn Full-Stack JavaScript&lt;/a&gt;&lt;/p&gt;

</description>
      <category>codenewbie</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Jetpack Compose Desktop rendering performances</title>
      <author>Gaetan Zoritchak</author>
      <pubDate>Wed, 09 Jun 2021 12:40:26 +0000</pubDate>
      <link>https://dev.to/gz_k/jetpack-compose-desktop-rendering-performances-4992</link>
      <guid>https://dev.to/gz_k/jetpack-compose-desktop-rendering-performances-4992</guid>
      <description>&lt;p&gt;As Jetpack Compose is gaining traction, we plan to offer a specific implementation for our &lt;a href="https://charts-kt.io/"&gt;Kotlin Charting Library, Charts.kt&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Before starting to code it, we have to check if it‚Äôs a viable solution and if the rendering performances are already good enough. &lt;/p&gt;

&lt;p&gt;This small post shows the resulting tests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-test"&gt;
  &lt;/a&gt;
  What to test?
&lt;/h2&gt;

&lt;p&gt;The graphic needs for data visualization are relatively simple. You can do almost anything you want with rectangles, circles, and paths. Generally, rectangles and circles are directly available in the graphics API. You draw more complex shapes with paths.&lt;/p&gt;

&lt;p&gt;So to test the rendering performances, we created a simple application that produces random particles to visualize on a canvas. Using different symbols and counts of particles, we can evaluate the rendering performance of Jetpack Compose Desktop.&lt;/p&gt;

&lt;p&gt;We also implemented a JavaFX version for comparison.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jetpack-compose-desktop"&gt;
  &lt;/a&gt;
  Jetpack Compose Desktop
&lt;/h2&gt;

&lt;p&gt;The code is available on GitHub: &lt;a href="https://github.com/gzoritchak/compose-rendering"&gt;https://github.com/gzoritchak/compose-rendering&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The test implementation uses the 0.4.0 version of JetPack Compose. &lt;/p&gt;

&lt;p&gt;We focused our code on the rendering performances and not on the respect of Compose implementation patterns. &lt;/p&gt;

&lt;p&gt;In particular, we limit the memory allocations. The particles are mutable classes that contain their position and speed. They are instantiated during startup and updated at each frame. &lt;/p&gt;

&lt;p&gt;We then propose 3 different rendering of the particle‚Äôs position: a square, a circle and a diamond. The diamond is built through a path.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;particle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;particles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;xScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;toFloat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;yScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;particle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;toFloat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Colors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Web&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aliceblue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;renderingWith&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;RenderingWith&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Square&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;drawRect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="nc"&gt;Size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;10f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;RenderingWith&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Circle&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;drawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;radius&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;5f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;center&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Offset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;RenderingWith&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Diamond&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;drawPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nf"&gt;moveTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;lineTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See the resulting performances on my MacBook Pro (late 2013 2,3 GHz Intel Core i7).&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/h-mtBOSkuRI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Up to 10 000 particles, the rendering performs at 60 FPS using squares and circles. It then fell to approximately 30 FPS for 30 000 particles and 8-9 FPS for 100 000 particles. The first decrease with paths (diamonds) appears at 10 000 particles with a not stable 30 FPS. We can also observe some freeze.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Compose&lt;/th&gt;
&lt;th&gt;3000&lt;/th&gt;
&lt;th&gt;10 000&lt;/th&gt;
&lt;th&gt;30 000&lt;/th&gt;
&lt;th&gt;100 000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Square&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;28 FPS&lt;/td&gt;
&lt;td&gt;8 FPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Circle&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;31 FPS&lt;/td&gt;
&lt;td&gt;9 FPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Diamond&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;30 FPS&lt;/td&gt;
&lt;td&gt;10 FPS&lt;/td&gt;
&lt;td&gt;2 FPS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;Now let‚Äôs compare these performances with a settled framework. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javafxtornadofx-implementation"&gt;
  &lt;/a&gt;
  JavaFX/TornadoFX implementation
&lt;/h2&gt;

&lt;p&gt;We implemented a JavaFX version of this test application to have a comparison point.&lt;/p&gt;

&lt;p&gt;The code is available on this &lt;a href="https://github.com/gzoritchak/JavaFx-rendering"&gt;GitHub project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We render the particles through the Data2viz library, which is the current implementation for our charting library. Under the hood, the Data2viz library uses a JavaFX canvas.&lt;/p&gt;

&lt;p&gt;Here is a screencast of the results using the same hardware:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/jX0cckddYWY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;We can observe that the rendering speed is double for squares and circles. The difference is weaker when we use paths.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;JavaFX&lt;/th&gt;
&lt;th&gt;3000&lt;/th&gt;
&lt;th&gt;10 000&lt;/th&gt;
&lt;th&gt;30 000&lt;/th&gt;
&lt;th&gt;100 000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Square&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;20 FPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Circle&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;20 FPS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Diamond&lt;/td&gt;
&lt;td&gt;60 FPS&lt;/td&gt;
&lt;td&gt;37 FPS&lt;/td&gt;
&lt;td&gt;13 FPS&lt;/td&gt;
&lt;td&gt;3 FPS&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Even if the performances are not as good as their JavaFX counterpart, they are already good enough for many visualization use cases. &lt;/p&gt;

&lt;p&gt;Jetbrains builds Jetpack Compose Desktop on solid foundations. The works they are doing on integrating Skia in a Kotlin context is promising for the nice uses cases (Swing, Headless)&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>skia</category>
    </item>
    <item>
      <title>A quick shortcut to throw errors for function params</title>
      <author>Siddharth</author>
      <pubDate>Wed, 09 Jun 2021 12:18:41 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/a-quick-shortcut-to-throw-errors-for-function-params-365g</link>
      <guid>https://dev.to/siddharthshyniben/a-quick-shortcut-to-throw-errors-for-function-params-365g</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;throwError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`'&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;propName&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' is required`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;someArg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;throwError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;someArg&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;someArg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// Uncaught Error: someArg is required&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
    </item>
  </channel>
</rss>
