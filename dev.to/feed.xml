<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Agregar AWS Toolkit en Visual Studio 2019 / 2022</title>
      <author>Daniel Gomez Jaramillo</author>
      <pubDate>Mon, 24 Jan 2022 20:27:20 +0000</pubDate>
      <link>https://dev.to/esdanielgomez/agregar-aws-toolkit-en-visual-studio-2019-2022-47d4</link>
      <guid>https://dev.to/esdanielgomez/agregar-aws-toolkit-en-visual-studio-2019-2022-47d4</guid>
      <description>&lt;p&gt;Hola! En este tutorial aprenderemos a instalar la extensión de AWS desde Visual Studio. Esta herramienta nos permitirá trabajar con el ecosistema de .NET en cuanto al desarrollo, depuración e implementación de soluciones con Amazon Web Services.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paso-1-instalar-la-extensi%C3%B3n"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Paso 1. Instalar la extensión&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Con Visual Studio iniciado, podemos dirigirnos a la sección Extensiones desde el menú de opciones, y seleccionar Administrar Extensiones. En este espacio podemos buscar AWS Toolkit for Visual Studio y proceder con la instalación. &lt;/p&gt;

&lt;p&gt;Aquí también podemos encontrar los instalables:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2017"&gt;AWS Toolkit for Visual Studio 2017 and 2019&lt;/a&gt;. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=AmazonWebServices.AWSToolkitforVisualStudio2022"&gt;AWS Toolkit for Visual Studio 2022&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#paso-2-autenticarse-con-aws"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Paso 2. Autenticarse con AWS&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Una vez instalada la extensión, al iniciar Visual Studio el asistente de configuración de AWS se iniciará y nos pedirá configurar nuestras credenciales. En este caso podemos hacer uso del archivo de configuración que se genera al momento de crear una cuenta de AWS IAM. Aquí podemos revisar ese proceso: &lt;a href="https://dev.to/esdanielgomez/configurar-una-cuenta-aws-iam-para-desplegar-nuestras-aplicaciones-con-aspnet-2e9b"&gt;Configurar una cuenta AWS IAM para desplegar nuestras aplicaciones con ASP.NET&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A la final visualizaremos algo como esto: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OHB0CKvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpf0u5bj1hrs0b3fyutc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OHB0CKvM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cpf0u5bj1hrs0b3fyutc.png" alt="" width="695" height="807"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Al guardar las credenciales, tendremos listo el AWS Explorer que nos permitirá trabajar con los servicios de AWS con los que tengamos autorización. Esto de acuerdo con las políticas establecidas para nuestro usuario AWS IAM. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#todo-listo"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¡Todo listo!&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Con todo en su lugar, ya podemos trabajar con AWS desde Visual Studio, por ejemplo, para poder desplegar nuestras aplicaciones web con ASP.NET hacia AWS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k8L9t_qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbian9v0xljisxe6tb6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k8L9t_qi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wbian9v0xljisxe6tb6g.png" alt="" width="325" height="333"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#gracias-por-leer"&gt;
  &lt;/a&gt;
  &lt;strong&gt;¡Gracias por leer!&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Si tienes alguna pregunta o alguna idea en mente, será un gusto poder estar en comunicación y juntos intercambiar conocimientos entre sí.&lt;/p&gt;

&lt;p&gt;Nos vemos en &lt;a href="https://twitter.com/esDanielGomez"&gt;Twitter&lt;/a&gt; / &lt;a href="https://esdanielgomez.com"&gt;esDanielGomez.com&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>aws</category>
      <category>dotnet</category>
      <category>cloud</category>
      <category>spanish</category>
    </item>
    <item>
      <title>Zython (minizinc python-wrapper) after year of development</title>
      <author>ArtyomKaltovich</author>
      <pubDate>Mon, 24 Jan 2022 20:01:13 +0000</pubDate>
      <link>https://dev.to/artyomkaltovich/zython-minizinc-python-wrapper-after-year-of-development-1o71</link>
      <guid>https://dev.to/artyomkaltovich/zython-minizinc-python-wrapper-after-year-of-development-1o71</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f6dpVmUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ArtyomKaltovich/zython_brand/master/logos/intro.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f6dpVmUR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/ArtyomKaltovich/zython_brand/master/logos/intro.png" alt="Zython background" width="880" height="590"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More then a year ago I've started to create python wrapper for &lt;a href="https://www.minizinc.org/"&gt;minizinc&lt;/a&gt;. Which is, probably, the most popular &lt;a href="https://en.wikipedia.org/wiki/Constraint_programming"&gt;constraint programming&lt;/a&gt; tool. You can find more info on what is constraint programming, minizinc, what is it used for in my &lt;a href="https://dev.to/artyomkaltovich/constraint-programming-in-python-or-how-to-solve-traveling-salesman-problem-just-describing-it-32k1"&gt;previous article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At the release in January 2021 zython supported variables and parameters declaration, arrays, all solving types (satisfy, maximize, minimize), many predefined operations and constraints (and CI of course). It could solve a number of models, some of which were specified in the &lt;a href="https://zython.readthedocs.io/en/latest/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-float-variable-and-parameters"&gt;
  &lt;/a&gt;
  Adding float variable and parameters
&lt;/h2&gt;

&lt;p&gt;But also it lacks some of minizinc features: float and enum types support and sets. I've started with float support. It seems natural and essential for "usual" programming paradigms, e.g. I can't name any popular language without float support (only &lt;a href="https://en.wikipedia.org/wiki/Brainfuck"&gt;brainfuck&lt;/a&gt;), but in constraint programming it is not so essential, many problems can be solved using integers only, many algorithm were developed only for discreet models. By the fact not every solver support floats (maybe not even the most of them). For example, default zython's solver &lt;a href="https://www.gecode.org/"&gt;gecode&lt;/a&gt; doesn't fully support them, so it was necessary to add a way the user could specify the solver (of course I've understood it only after I've implemented float variables).&lt;/p&gt;

&lt;p&gt;Lets see, how you can use float variable, by solving an easy equation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zython&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;zn&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                            &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                            &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve_satisfy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"cbc"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"x"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# -0.03365384615384615
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#enums-and-sets"&gt;
  &lt;/a&gt;
  Enums and sets
&lt;/h2&gt;

&lt;p&gt;Adding enums and sets was harder task. First of all, because I've started with adding enums, then I've understood, they are quite useless without sets, and start to add them. This task leads to massive refactoring (some of which still should be done), but it leads to a better code, and now everyone can use enums and sets in zython. Below I will provide an example from documentation:&lt;/p&gt;

&lt;p&gt;Let’s imagine you’ve should to fight against Mike Tyson (don’t worry, you have a week to prepare). You should learn several boxing moves, each of them has strength, but you should invest some time to learn it and some money to hire a coach.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Move&lt;/th&gt;
&lt;th&gt;Power&lt;/th&gt;
&lt;th&gt;Time to learn&lt;/th&gt;
&lt;th&gt;Money to learn&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;jab&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cross&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uppercut&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;overhand&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hook&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zython&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;zn&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Moves&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;jab&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;cross&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;hook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;uppercut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;slip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;time_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;money_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;money&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_available&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time_available&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;money_available&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;money_available&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;money&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;money&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_learn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;moves&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_learn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_learn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;money&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;money_available&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Moves&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solve_maximize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;zn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_learn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;power&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;move&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Moves to learn: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'to_learn'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, "&lt;/span&gt;
      &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"power: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'objective'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#other-changes"&gt;
  &lt;/a&gt;
  Other changes
&lt;/h2&gt;

&lt;p&gt;The two changes described above, are not the only ones, which was add to zython. I've added support of &lt;code&gt;increasing&lt;/code&gt;, &lt;code&gt;decreasing&lt;/code&gt; and &lt;code&gt;allequal&lt;/code&gt; constraints, &lt;code&gt;except_0&lt;/code&gt; parameter to &lt;code&gt;alldifferent&lt;/code&gt; constraint. New python version was released, so now &lt;code&gt;zython&lt;/code&gt; support cpython 3.7 - 3.10.&lt;br&gt;
And a warning in case &lt;code&gt;minizinc&lt;/code&gt; wasn't found in &lt;code&gt;$PATH&lt;/code&gt;, I hope it will help in installation and integrating zython code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;This year wasn't easy (well not only for me, for everyone), but I've somehow managed to find time to improve zython, which becomes better and better in every version[citation needed]. It is an interesting experience and if you ever thought about starting your own project, you should try.&lt;/p&gt;

</description>
      <category>python</category>
      <category>minizinc</category>
      <category>opensource</category>
      <category>ai</category>
    </item>
    <item>
      <title>Making a Card API Project | Day 17 </title>
      <author>Web.Developer.io</author>
      <pubDate>Mon, 24 Jan 2022 19:37:16 +0000</pubDate>
      <link>https://dev.to/developerioweb/making-a-card-api-project-day-17-2p37</link>
      <guid>https://dev.to/developerioweb/making-a-card-api-project-day-17-2p37</guid>
      <description>&lt;p&gt;This a An Exercise Problem From the Colt Steele React Course &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Statement -&amp;gt;&lt;/strong&gt;&lt;br&gt;
Build an app that displays a deck of cards, one card at a time. When the page loads, send a request to &lt;a href="https://deckofcardsapi.com/api/deck/new/shuffle"&gt;https://deckofcardsapi.com/api/deck/new/shuffle&lt;/a&gt; to create a new deck. Store the Deck ID it gives you, so you can make further requests to retreive each card image. Add a button to your app that allows a user to draw a new card.&lt;/p&gt;

&lt;p&gt;When a user clicks the button, send another request to the API, this time to &lt;a href="https://deckofcardsapi.com/api/deck/%24%7Bdeck_id%7D/draw/"&gt;https://deckofcardsapi.com/api/deck/${deck_id}/draw/&lt;/a&gt;. (make sure to use your actual deck ID). Use the data included in the response to display a new card image, and make sure to include an informative alt attribute.&lt;/p&gt;

&lt;p&gt;Every time the user clicks, the app should display a new card until the deck is empty. Make sure to tell the user there are no cards left!&lt;/p&gt;

&lt;p&gt;Here’s how this might look (with styling added):&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqE8vudv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahft0kzlgzxdrzgu7fgj.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZqE8vudv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ahft0kzlgzxdrzgu7fgj.gif" alt="Cards Project" width="800" height="600"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This app Consists of 3 Component App,Deck,Cards&lt;br&gt;
Deck Component is Stateful and stores all the State and pass it to the Cards using the Props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution 👇&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/Developer-io-web/Card-api-Project"&gt;https://github.com/Developer-io-web/Card-api-Project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Coding 🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>react</category>
    </item>
    <item>
      <title>What are your tips for an effective developer resumé?</title>
      <author>Ben Halpern</author>
      <pubDate>Mon, 24 Jan 2022 19:05:44 +0000</pubDate>
      <link>https://dev.to/ben/what-are-your-tips-for-an-effective-developer-resume-ep4</link>
      <guid>https://dev.to/ben/what-are-your-tips-for-an-effective-developer-resume-ep4</guid>
      <description>&lt;p&gt;What are your dos and don'ts for an effective resumé?&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>discuss</category>
      <category>career</category>
      <category>resume</category>
    </item>
    <item>
      <title>React LifeCycle Method | Day 16 </title>
      <author>Web.Developer.io</author>
      <pubDate>Mon, 24 Jan 2022 19:03:03 +0000</pubDate>
      <link>https://dev.to/developerioweb/react-lifecycle-method-day-16-52jn</link>
      <guid>https://dev.to/developerioweb/react-lifecycle-method-day-16-52jn</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Every Component in React has a lifeCycle which we can moniter or update During it’s 3 main Phases.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So Every Component has 3 main Phase during it’s Life &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.) Mounting → This Means Adding the Component into the DOM.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.) Updating → Updating the State or any other data of the Component.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.) UnMounting → Removing the Component From the DOM.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T3ozWPkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzh85vprg95blijlk72h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T3ozWPkZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mzh85vprg95blijlk72h.png" alt="React Lifecycle Method" width="880" height="308"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how"&gt;
  &lt;/a&gt;
  How
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Mounting&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;When a Component is rendered in the DOM for the 1st Time then it is called as Mounting.&lt;/p&gt;

&lt;p&gt;React has 3 methods that got called During Mounting.&lt;/p&gt;

&lt;p&gt;1.) &lt;strong&gt;Constructor()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;2.) &lt;strong&gt;render()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;3.) &lt;strong&gt;ComponentDidMount()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Before you Move further you should know about this &lt;strong&gt;the methods which are prefixed by &lt;code&gt;will&lt;/code&gt; are called right &lt;code&gt;before Something happen&lt;/code&gt; and the methods which are prefixed by &lt;code&gt;Did&lt;/code&gt; are called right &lt;code&gt;after Something happen&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MM-AXrXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lv8uyw1iw96v2qwbxw1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MM-AXrXg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3lv8uyw1iw96v2qwbxw1.png" alt="Constructor" width="880" height="323"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Constructor will called 1st and used for initialize the state and Bind the event handlers.&lt;/p&gt;

&lt;p&gt;After that &lt;code&gt;render&lt;/code&gt; will be called &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mkedxHrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4up4ycpt4gta6oc0youx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mkedxHrz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4up4ycpt4gta6oc0youx.png" alt="Render" width="880" height="121"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the Component is rendered React will call the &lt;strong&gt;&lt;code&gt;ComponentDidMount()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kHRSW2JK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpmja8b3usuy05k8kli0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kHRSW2JK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wpmja8b3usuy05k8kli0.png" alt="React Lifecycle Method" width="880" height="305"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;As the Component is Already Rendered if we will try to change state in the &lt;code&gt;componenetDidMount()&lt;/code&gt; It will cause a &lt;code&gt;Re-rendering&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Let’s have a Look to this Example&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,{&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;ReactLifestyle&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;In Constructor Method&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IN Component Did Mount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;In Render method&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      hi
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;ReactLifestyle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;The Output of the Code will be 👇&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NXwv-9Mm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi3v9dwsfeaurgpiblcn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NXwv-9Mm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gi3v9dwsfeaurgpiblcn.png" alt="Code Output" width="880" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As u can see 1st &lt;code&gt;Constructor Method&lt;/code&gt; is called then &lt;code&gt;Render Method&lt;/code&gt; and then &lt;code&gt;Component Did Mount&lt;/code&gt;&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Also If we try to set state in the &lt;code&gt;ComponentDidMount&lt;/code&gt; then it will cause re-rendering as u can in the output.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://codesandbox.io/s/componentdidmount-9jnfh?file=/src/App.js"&gt;componentDidMount&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#loading-data-via-ajax"&gt;
  &lt;/a&gt;
  Loading Data Via Ajax
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Zenquote.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Zenquote&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;isloading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//WE are adding the setTimeout so can we can get in a Condition when after rendering the Data Fetching takes time.&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/zen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;isloading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isloading&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; 
        &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Loading .........
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Always Remember ....&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Zenquote&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;So in the code every-time we refresh the page we got new &lt;code&gt;quote&lt;/code&gt; , I use the axios to fetch the data and also , I have to  use the setTimeout to depict that sometime the data fetching take time so at that time we can add a &lt;code&gt;animated Loader&lt;/code&gt;.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#loading-data-using-the-async-function-%E2%86%92"&gt;
  &lt;/a&gt;
  Loading data using the Async Function →
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Async/await&lt;/code&gt; make promises easier to write.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Async&lt;/code&gt; makes a function return a Promise.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Await&lt;/code&gt; makes a function wait for a Promise.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidmount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;GetData&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://github.com.api/users&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;When we Write it will wait for the data to come then move  on to another line.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example →&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;GithubUsersInfo&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;imgUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;followers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`https://api.github.com/users/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;imgUrl&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatar_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;followers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;followers&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Github User Name : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imgUrl&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;alt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt;&lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Followers : &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;followers&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;GithubUsersInfo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;This takes user name as a props.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This will gives us the Github User Data.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#componentdidupdate-%E2%86%92"&gt;
  &lt;/a&gt;
  ComponentDidUpdate →
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gw9twtht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elool626o97jecldzk7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gw9twtht--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/elool626o97jecldzk7a.png" alt="Code Output" width="880" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Updating can be done by changing the the State , Props (Changed Form the Parent Side) , or any other External Data.&lt;/p&gt;

&lt;p&gt;Like &lt;strong&gt;&lt;code&gt;forceUpdate&lt;/code&gt; is used to update the things which are not in the state and often they are external Data  so to change that we can use the &lt;code&gt;forcedata()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XMNvsYw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/784lqn3msu1nk51k8fth.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XMNvsYw0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/784lqn3msu1nk51k8fth.png" alt="React Lifecycle method" width="880" height="285"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we update Something Re-rendering Happen after then &lt;strong&gt;&lt;code&gt;ComponentDidUpdate()&lt;/code&gt; called.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So we can use the &lt;code&gt;ComponentDidUpdate()&lt;/code&gt; to save all your data into the database which has been changed .&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---lB1HxfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw3u34hszoy3mkl40lbp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---lB1HxfG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yw3u34hszoy3mkl40lbp.png" alt="componentDidUpdate" width="880" height="284"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#example-%E2%86%92"&gt;
  &lt;/a&gt;
  Example →
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;axios&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Zenquote.css&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Zenquote&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;In Constructor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;isloading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;  
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;In Component Did Mount&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://api.github.com/zen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;quote&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="na"&gt;isloading&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;In Component Did Update&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Rendering .....&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isloading&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; 
        &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Loading .........
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Always Remember ....&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;quote&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Zenquote&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The Output of the Below Code is :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---XxqPN1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orwj8kdcny9xm9a81gv6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---XxqPN1---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/orwj8kdcny9xm9a81gv6.png" alt="Code Output" width="880" height="300"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1st the Constructor is called , then rendering happened and then ComponentDidMount got called and in the ComponentDidMount we change the State so this causes the Re-rendering and when we change the state after Re-rendering the &lt;code&gt;ComponentDidUpdate&lt;/code&gt; Got called.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whenever u update something the &lt;code&gt;ComponentDidUpdate&lt;/code&gt; got called after Re-rendering. So we can use the Component Did Mount to save the data to the Database.&lt;/p&gt;

&lt;p&gt;Also In the Component Did Update we can access the &lt;strong&gt;Previous State and the Previous Props so U can use this to compare the State or props with the previous ones.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To use the Previous state and prop u should write like this.&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// Inside this u can use the previous props &amp;amp; the state &lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remember the 1st argument will be the previous props and the 2nd argument will be previous state.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#componentwillunmount"&gt;
  &lt;/a&gt;
  ComponentWillUnmount()
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This will be called when we are removing something from the DOM&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MlhWcIdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a380old8vot85zh7kyht.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MlhWcIdk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a380old8vot85zh7kyht.png" alt="ComponentWillUnmount" width="880" height="369"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;componenetWillUnmount&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;In Component Will Unmount&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;//It will be called before the removal of the Component.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy Coding 🙂&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>How is AI being used to fight against cyber attacks?</title>
      <author>Mage</author>
      <pubDate>Mon, 24 Jan 2022 18:32:24 +0000</pubDate>
      <link>https://dev.to/mage_ai/how-is-ai-being-used-to-fight-against-cyber-attacks-10ka</link>
      <guid>https://dev.to/mage_ai/how-is-ai-being-used-to-fight-against-cyber-attacks-10ka</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;For its ability to understand patterns within large sets of data, AI is being used to lead the new frontier of cybersecurity. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Intro&lt;/li&gt;
&lt;li&gt;Behavior tracking&lt;/li&gt;
&lt;li&gt;Biometric data and passwords&lt;/li&gt;
&lt;li&gt;Bot detection and security&lt;/li&gt;
&lt;li&gt;Risk to AI Cybersecurity&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;Nearly every business exists on the web in some capacity. This means more private data and personal information are at risk for a potential hack. The hacker dilemma can be a cat and mouse game of ever improving protective software followed by improving hacker technology. Introduced in the last few years, companies have begun implementing AI technology into cybersecurity software.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#behavior-tracking"&gt;
  &lt;/a&gt;
  Behavior tracking
&lt;/h2&gt;

&lt;p&gt;Traditional cybersecurity products work by detecting a virus’s typical behavior and creating antivirus software around it. As cybercriminals evolved their tactics, their methods became more nuanced and harder to detect. AI provides the perfect tool to analyze normal behavior immediately detected and alert when the slightest abnormalities occur.&lt;/p&gt;

&lt;p&gt;Most company operations function on a routine and predictive basis. Employees log on at consistent times, connect with the same people and applications, and use and consume a consistent amount of data. When viruses breach a traditional system, IT and the employee may not be able to catch it quick enough–leaking protected information and data. Implementing an AI into this system can quickly learn patterns within the company and efficiently detect abnormalities when they occur. In instances of a password breach or implementation of viruses, the AI will quickly flag issues as threatening behavior and trigger the proper response.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#biometric-data-and-passwords"&gt;
  &lt;/a&gt;
  Biometric data and passwords
&lt;/h2&gt;

&lt;p&gt;AI can help companies eliminate the need for passwords through biometric authentication such as fingerprint and facial recognition scans. According to &lt;a href="https://www.verizon.com/business/resources/reports/dbir/"&gt;Verizon’s data breach report&lt;/a&gt;, 80% of data breaches are linked to poor and reused passwords. Using biometric information is much harder for hackers to replicate and determine than a number/word-based password. Biometric information is constantly improving and AI technology is improving in recognition of specific nuances. Once only a reality in science fiction films, Iris scanning carries an extremely high level of accuracy and security. Using this technology can further ensure that only those with the right authority can gain access to company’s information.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvH8R3Wn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g6u8p58ob52rd55vf8oo.jpeg" alt="Image description" width="880" height="495"&gt;&lt;em&gt;(Source: mobidev)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#bot-detection-and-security"&gt;
  &lt;/a&gt;
  Bot detection and security
&lt;/h2&gt;

&lt;p&gt;Hackers are ever-changing their tactics to keep up with cybersecurity. It’s inevitable that humans won’t be able to catch and detect the copious amounts of attacks coming at all times. Along with detecting abnormalities in daily functioning, AI is able to detect malicious URLs, harmful bots, and other viruses. Due to the large amounts of data that AI software can take, it can become an expert in predicting and planning when and where the next attack may take place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#risk-to-ai-cybersecurity"&gt;
  &lt;/a&gt;
  Risk to AI Cybersecurity
&lt;/h2&gt;

&lt;p&gt;Like any software, AI in cybersecurity does come with risk. As a whole, there is potential for harm if hackers gain access to the AI system. This would allow them to manipulate the technology, potentially locking out the company and causing a shutdown.&lt;/p&gt;

&lt;p&gt;Concerns with biometric data is that it can often be a breach of privacy to an individual–even more so if the information gets into the wrong hands. As hackers get more intelligent, this software can be more dangerous. Unlike traditional passwords, you can’t change your biometric information.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Eb-bYv9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qwr2pnli1dex8w2ckupp.png" alt="Image description" width="830" height="500"&gt;&lt;em&gt;(Source: RecFaces)&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XdqTTimf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggm3ktg62y39rxvqlg6a.jpeg" alt="Image description" width="880" height="420"&gt;&lt;em&gt;(Source: BusinessWorld)&lt;/em&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;p&gt;&lt;br&gt;
AI technology is becoming an essential to have in a company’s arsenal to fight against cyberattacks. Human monitoring is no longer enough to keep up with advancing technology from hackers–AI’s constant monitoring, ability to learn patterns, and take in copious amounts of data make it the perfect tool to keep your company information safe.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Tools I use from design to deployment, testing and setting up analytics</title>
      <author>Rakesh Potnuru</author>
      <pubDate>Mon, 24 Jan 2022 18:26:16 +0000</pubDate>
      <link>https://dev.to/itsrakesh/tools-i-use-from-design-to-deployment-testing-and-setting-up-analytics-2akd</link>
      <guid>https://dev.to/itsrakesh/tools-i-use-from-design-to-deployment-testing-and-setting-up-analytics-2akd</guid>
      <description>&lt;p&gt;In the previous &lt;a href="https://dev.to/itsrakesh/the-flow-of-building-a-full-stack-web-application-447g"&gt;blog&lt;/a&gt;, we came to know the flow of building a full-stack application. Throughout building an application we use so many tools that makes our life easy. So in this blog, I will share all the tools I use from setting up the stage to submitting your site to search engines.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Note: I will keep updating this article.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h3&gt;

&lt;p&gt;Setting up includes IDE, planning the project, management app.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ides"&gt;
  &lt;/a&gt;
  IDEs
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;All rounder &lt;a href="https://code.visualstudio.com"&gt;VSCode&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.jetbrains.com/webstorm"&gt;Webstorm&lt;/a&gt; for backend or plain javascript projects.(&lt;em&gt;Please don't use for frontend&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://notepad-plus-plus.org"&gt;Notepad++&lt;/a&gt; for quick editing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#planning-the-project"&gt;
  &lt;/a&gt;
  Planning the project
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://clickup.com"&gt;ClickUp&lt;/a&gt; is amazingly useful for project management. It has lots of features and a great UI.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PDcEi_n4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1643033800424/OtLSVy2BA7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PDcEi_n4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1643033800424/OtLSVy2BA7.png" alt="ClickUp" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#operating-systems"&gt;
  &lt;/a&gt;
  Operating systems
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I am not yet into Linux, so for now I use Windows for development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#design"&gt;
  &lt;/a&gt;
  Design
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;As I am not into UI/UX I use UI kits or simply take inspiration from dribbble, Behance etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then I use &lt;a href="https://figma.com"&gt;Figma&lt;/a&gt; to customize those designs according to my needs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#branding"&gt;
  &lt;/a&gt;
  Branding
&lt;/h4&gt;

&lt;p&gt;Branding includes deciding a colour palette, font family, logo etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://colorhunt.co"&gt;Colorhunt&lt;/a&gt; for colour inspiration.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://fonts.google.com"&gt;Google fonts&lt;/a&gt; for fonts. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#development"&gt;
  &lt;/a&gt;
  Development
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://git-scm.com"&gt;Git&lt;/a&gt; - version control tool.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.gitkraken.com"&gt;GitKraken&lt;/a&gt; for everything git.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.npmjs.com"&gt;npm&lt;/a&gt; to manage node packages.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://stackoverflow.com"&gt;StackOverFlow&lt;/a&gt; to find solutions for common issues.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#browsers"&gt;
  &lt;/a&gt;
  Browsers
&lt;/h4&gt;

&lt;p&gt;I primarily use two browsers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/chrome"&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mozilla.org/en-US/firefox/developer"&gt;Firefox developer edition&lt;/a&gt; - This is amazing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://responsively.app"&gt;Responsively&lt;/a&gt; for responsive design.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://devicon.dev"&gt;Devicons&lt;/a&gt; for coloured icons and &lt;a href="https://react-icons.github.io/react-icons"&gt;React-icons&lt;/a&gt; for normal icons.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/thedaviddias/Front-End-Checklist"&gt;Frontend checklist&lt;/a&gt; for everything frontend.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;React dev tools&lt;/a&gt; to test react components.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/debug-css/igiofjnckcagmjgdoaakafngegecjnkj"&gt;Debug CSS&lt;/a&gt; to test alignment of elements&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qCkIb9jW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1643038269638/O21dpQtgs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qCkIb9jW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1643038269638/O21dpQtgs.png" alt="Screenshot 2022-01-24 205812.png" width="880" height="395"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#backend-and-database"&gt;
  &lt;/a&gt;
  Backend and database
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://sendgrid.com"&gt;Sendgrid&lt;/a&gt; + &lt;a href="https://nodemailer.com/about"&gt;Nodemailer&lt;/a&gt; to send emails.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.mongodb.com/products/compass"&gt;MongoDB Compass&lt;/a&gt; to test MongoDB data locally.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sqlitebrowser.org"&gt;DB Browser&lt;/a&gt; to view sqlite data locally.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#testing"&gt;
  &lt;/a&gt;
  Testing
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.postman.com"&gt;Postman&lt;/a&gt; for API testing.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://ngrok.com"&gt;ngrok&lt;/a&gt; to expose localhost.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.lambdatest.com"&gt;LambdaTest&lt;/a&gt; to test website on different browsers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#devops"&gt;
  &lt;/a&gt;
  DevOps
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/features/actions"&gt;Github actions&lt;/a&gt; for CI/CD.&lt;/li&gt;
&lt;li&gt;More coming soon...&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt; or &lt;a href="https://firebase.google.com"&gt;Firebase&lt;/a&gt; to host frontend.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.heroku.com"&gt;Heroku&lt;/a&gt; to host backend.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#rank-up"&gt;
  &lt;/a&gt;
  Rank up
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://search.google.com/search-console/about"&gt;Google search console&lt;/a&gt; to get indexed on google search and also to track performance, find issues etc.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.bing.com/webmasters"&gt;Bing webmaster tools&lt;/a&gt; to get indexed on bing search&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://pagespeed.web.dev"&gt;Google page speed insights&lt;/a&gt; to test how fast my website is.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://web.dev/measure"&gt;Lighthouse&lt;/a&gt; to test page quality.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#analytics"&gt;
  &lt;/a&gt;
  Analytics
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://analytics.google.com/analytics"&gt;Google Analytics&lt;/a&gt; to track details like the number of website visitors, which pages are getting popular, how far my website reached.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://clarity.microsoft.com"&gt;Microsoft Clarity&lt;/a&gt; - this thing has even more features like heatmaps where you can see where the users are clicking.&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#need-your-feedback"&gt;
  &lt;/a&gt;
  🚨 Need your feedback
&lt;/h3&gt;

&lt;p&gt;I recently deployed my portfolio website. Can you please visit once and give some feedback? It helps a lot.&lt;br&gt;
(For feedback you can use the google form by clicking the "Feedback" button on the footer or simply leave a comment under this blog.)&lt;/p&gt;

&lt;p&gt;Here is the link: &lt;a href="https://itsrakesh.co"&gt;itsrakesh.co&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;What is the one tool you can't live without(Apart from VSCode)? Comment below.&lt;/p&gt;




&lt;p&gt;I write a new blog every week. So follow for more.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>3 Ways To Learn Coding Within Three Months</title>
      <author>Elliot Brenya sarfo</author>
      <pubDate>Mon, 24 Jan 2022 18:23:02 +0000</pubDate>
      <link>https://dev.to/elliot_brenyasarfo_18749/3-ways-to-learn-coding-within-three-months-enb</link>
      <guid>https://dev.to/elliot_brenyasarfo_18749/3-ways-to-learn-coding-within-three-months-enb</guid>
      <description>&lt;p&gt;If you desire to code but have no plan on how to get started then this article is for you. Desiring to code is one thing and being consistent about it is another thing. Most &lt;a href="https://www.anythingprogramming.com/?m=1"&gt;beginners&lt;/a&gt; give up when things start to go south. Welcome to anythingprogramming.com, in this article I will list some guides that will help you to stay on track without burning out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why Do You Desire To Code?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The answer to this question might be challenging to figure out. Some see coding as nothing other than sitting in front of your computer to code others derive their passion from others.&lt;/p&gt;

&lt;p&gt;Deriving passion from people isn’t bad but the question you have to ask yourself is can I hold on to this passion for long? Do I even understand this passion?&lt;/p&gt;

&lt;p&gt;** Are Three months enough to Get Started?**&lt;/p&gt;

&lt;p&gt;With consistency and plan, three months will be too much. If you dedicate an hour a day to study continuously without any interruption you will be able to build basic systems or applications.&lt;/p&gt;

&lt;p&gt;The most difficult aspect is to get started. You will not be good at coding overnight but with a little bit of dedication and discipline, you will be doing well by watching tutorials videos, reading extensively and noting points.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ways To Learn To Code Within Three Months&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;** 1. Read Books**&lt;/p&gt;

&lt;p&gt;There are millions of coding books out there to support you in your &lt;a href="https://www.anythingprogramming.com/?m=1"&gt;coding&lt;/a&gt; journey. Note, reading these books will not make you a good programmer but if you practice what is written in the book over time, you will be doing well.&lt;/p&gt;

&lt;p&gt;2  &lt;strong&gt;Sign-Up For Bootcamp&lt;/strong&gt;&lt;br&gt;
There are &lt;a href="https://www.anythingprogramming.com/?m=1"&gt;alternatives&lt;/a&gt; to this by pursuing a computer science degree. Sign-up to boot camp helps you to be in alignment whiles you make friends with people who have the same interest as you do. Bootcamp shortens the learning curves by giving you the right information which is needed to get started.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Get Mentor&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A mentor is someone who will hold your hands and help you when you are need it. Mentors’ advice helps you think broadly, they also make you aware of what you might be facing in the industry.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is possible to learn coding within three months or less if you follow the above-listed information. Share this post if you find it informative and educating.&lt;/p&gt;

&lt;p&gt;Thank You.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Building Blocks of Amazon ECS</title>
      <author>Tanmay Shukla</author>
      <pubDate>Mon, 24 Jan 2022 18:10:53 +0000</pubDate>
      <link>https://dev.to/tanmaygi/building-blocks-of-amazon-ecs-2pig</link>
      <guid>https://dev.to/tanmaygi/building-blocks-of-amazon-ecs-2pig</guid>
      <description>&lt;p&gt;So, what’s Amazon Elastic Container Service (ECS)? ECS is a managed service for running containers on AWS, designed to make it easy to run applications in the cloud without worrying about configuring the environment for your code to run in. Using ECS, you can easily deploy containers to host a simple website or run complex distributed microservices using thousands of containers.&lt;br&gt;
Getting started with ECS isn’t too difficult. To fully understand how it works and how you can use it, it helps to understand the basic building blocks of ECS and how they fit together!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEFlV3E9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbp83bej5984vgrf101k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEFlV3E9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pbp83bej5984vgrf101k.png" alt="ecs" width="550" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#instance"&gt;
  &lt;/a&gt;
  Instance*
&lt;/h4&gt;

&lt;p&gt;EC2 instances are good ol’ virtual machines (VMs). And yes, don’t worry, you can connect to them (via SSH). Because customers have varying needs in memory, storage, and computing power, many different instance types are offered. Just want to run a small application or try a free trial? Try t2.micro. Want to run memory-optimized workloads? R3 and X1 instances are a couple options. There are many more instance types as well, which cater to various use cases.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ami"&gt;
  &lt;/a&gt;
  AMI*
&lt;/h4&gt;

&lt;p&gt;Sorry if you wanted to immediately march forward, but before you create your instance, you need to choose an AMI. An AMI stands for Amazon Machine Image. What does that mean? Basically, an AMI provides the information required to launch an instance: root volume, launch permissions, and volume-attachment specifications. You can find and choose a Linux or Windows AMI provided by AWS, the user community, the AWS Marketplace (for example, the Amazon ECS-Optimized AMI), or you can create your own.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#region"&gt;
  &lt;/a&gt;
  Region
&lt;/h4&gt;

&lt;p&gt;AWS is divided into regions that are geographic areas around the world (for now it’s just Earth, but maybe someday…). These regions have semi-evocative names such as us-east-1 (N. Virginia), us-west-2 (Oregon), eu-central-1 (Frankfurt), ap-northeast-1 (Tokyo), etc.&lt;br&gt;
Each region is designed to be completely isolated from the others, and consists of multiple, distinct data centers. This creates a “blast radius” for failure so that even if an entire region goes down, the others aren’t affected. Like many AWS services, to start using ECS, you first need to decide the region in which to operate. Typically, this is the region nearest to you or your users.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#availability-zone"&gt;
  &lt;/a&gt;
  Availability Zone
&lt;/h4&gt;

&lt;p&gt;AWS regions are subdivided into Availability Zones. A region has at minimum two zones, and up to a handful. Zones are physically isolated from each other, spanning one or more different data centers, but are connected through low-latency, fiber-optic networking, and share some common facilities. EC2 is designed so that the most common failures only affect a single zone to prevent region-wide outages. This means you can achieve high availability in a region by spanning your services across multiple zones and distributing across hosts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#amazon-ecs-building-blocks"&gt;
  &lt;/a&gt;
  Amazon ECS building blocks
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0qykJNX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fhgpsmq43hhd1zn0cfz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0qykJNX2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0fhgpsmq43hhd1zn0cfz.png" alt="building blocks" width="550" height="200"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#container"&gt;
  &lt;/a&gt;
  Container
&lt;/h4&gt;

&lt;p&gt;Well, without containers, ECS wouldn’t exist!&lt;br&gt;
&lt;strong&gt;Are containers virtual machines?&lt;/strong&gt;&lt;br&gt;
Nope! Virtual machines virtualize the hardware (benefits), while containers virtualize the operating system (even more benefits!). If you look inside a container, you would see that it is made by processes running on the host, and tied together by kernel constructs like namespaces, cgroups, etc. But you don’t need to bother about that level of detail, at least not in this post!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why containers?&lt;/strong&gt;&lt;br&gt;
Containers give you the ability to build, ship, and run your code anywhere!&lt;/p&gt;

&lt;p&gt;Before the cloud, you needed to self-host and therefore had to buy machines in addition to setting up and configuring the operating system (OS), and running your code. In the cloud, with virtualization, you can just skip to setting up the OS and running your code. &lt;/p&gt;

&lt;p&gt;Containers make the process even easier — you can just run your code.&lt;br&gt;
Additionally, all of the dependencies travel in a package with the code, which is called an image. This allows containers to be deployed on any host machine. From the outside, it looks like a host is just holding a bunch of containers. They all look the same, in the sense that they are generic enough to be deployed on any host.&lt;/p&gt;

&lt;p&gt;With ECS, you can easily run your containerized code and applications across a managed cluster of EC2 instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are containers a fairly new technology?&lt;/strong&gt;&lt;br&gt;
The concept of containerization is not new. Its origins date back to 1979 with the creation of chroot. However, it wasn’t until the early 2000s that containers became a major technology. The most significant milestone to date was the release of Docker in 2013, which led to the popularization and widespread adoption of containers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What does ECS use?&lt;/strong&gt;&lt;br&gt;
While other container technologies exist (LXC, rkt, etc.), because of its massive adoption and use by our customers, ECS was designed first to work natively with Docker containers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#container-instance"&gt;
  &lt;/a&gt;
  Container instance*
&lt;/h4&gt;

&lt;p&gt;Yep, you are back to instances. An instance is just slightly more complex in the ECS realm though. Here, it is an ECS container instance that is an EC2 instance running the agent, has a specifically defined IAM policy and role, and has been registered into your cluster.&lt;br&gt;
And as you probably guessed, in these instances, you are running containers.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ami"&gt;
  &lt;/a&gt;
  AMI*
&lt;/h4&gt;

&lt;p&gt;These container instances can use any AMI as long as it has the following specifications: a modern Linux distribution with the agent and the Docker Daemon with any Docker runtime dependencies running on it.&lt;br&gt;
Want it more simplified? Well, AWS created the Amazon ECS-Optimized AMI for just that. Not only does that AMI come preconfigured with all of the previously mentioned specifications, it’s tested and includes the recommended ecs-init upstart process to run and monitor the agent.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#cluster"&gt;
  &lt;/a&gt;
  Cluster
&lt;/h4&gt;

&lt;p&gt;An ECS cluster is a grouping of (container) instances* (or tasks in Fargate) that lie within a single region, but can span multiple Availability Zones — it’s even a good idea for redundancy. When launching an instance (or tasks in Fargate), unless specified, it registers with the cluster named “default”. If “default” doesn’t exist, it is created. You can also scale and delete your clusters.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#agent"&gt;
  &lt;/a&gt;
  Agent*
&lt;/h4&gt;

&lt;p&gt;The Amazon ECS container agent is a Go program that runs in its own container within each EC2 instance that you use with ECS. (It’s also available open source on GitHub!) The agent is the intermediary component that takes care of the communication between the scheduler and your instances. Want to register your instance into a cluster? (Why wouldn’t you? A cluster is both a logical boundary and provider of pool of resources!) Then you need to run the agent on it.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#task"&gt;
  &lt;/a&gt;
  Task
&lt;/h4&gt;

&lt;p&gt;When you want to start a container, it has to be part of a task. Therefore, you have to create a task first. Succinctly, tasks are a logical grouping of 1 to N containers that run together on the same instance, with N defined by you, up to 10. Let’s say you want to run a custom blog engine. You could put together a web server, an application server, and an in-memory cache, each in their own container. Together, they form a basic frontend unit.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#task-definition"&gt;
  &lt;/a&gt;
  Task definition
&lt;/h4&gt;

&lt;p&gt;Ah, but you cannot create a task directly. You have to create a task definition that tells ECS that “task definition X is composed of this container (and maybe that other container and that other container too!).” It’s kind of like an architectural plan for a city. Some other details it can include are how the containers interact, container CPU and memory constraints, and task permissions using IAM roles.&lt;br&gt;
Then you can tell ECS, “start one task using task definition X.” It might sound like unnecessary planning at first. As soon as you start to deal with multiple tasks, scaling, upgrades, and other “real life” scenarios, you’ll be glad that you have task definitions to keep track of things!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#scheduler"&gt;
  &lt;/a&gt;
  Scheduler*
&lt;/h4&gt;

&lt;p&gt;So, the scheduler schedules… sorry, this should be more helpful, huh? The scheduler is part of the “hosted orchestration layer” provided by ECS. Wait a minute, what do I mean by “hosted orchestration”? Simply put, hosted means that it’s operated by ECS on your behalf, without you having to care about it. Your applications are deployed in containers running on your instances, but the managing of tasks is taken care of by ECS. One less thing to worry about!&lt;/p&gt;

&lt;p&gt;Also, the scheduler is the component that decides what (which containers) gets to run where (on which instances), according to a number of constraints. Say that you have a custom blog engine to scale for high availability. You could create a service, which by default, spreads tasks across all zones in the chosen region. And if you want each task to be on a different instance, you can use the distinctInstance task placement constraint. ECS makes sure that not only this happens, but if a task fails, it starts again.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#service"&gt;
  &lt;/a&gt;
  Service
&lt;/h4&gt;

&lt;p&gt;To ensure that you always have your task running without managing it yourself, you can create a service based on the task that you defined and ECS ensures that it stays running. A service is a special construct that says, “at any given time, I want to make sure that N tasks using task definition X1 are running.” If N=1, it just means “make sure that this task is running, and restart it if needed!” And with N&amp;gt;1, you’re basically scaling your application until you hit N, while also ensuring each task is running.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-now"&gt;
  &lt;/a&gt;
  So, what now?
&lt;/h2&gt;

&lt;p&gt;Hopefully you, at the very least, learned a tiny something. All comments are very welcome!&lt;/p&gt;

&lt;p&gt;If you’re interested in learning more about the core concepts of ECS and its relation to EC2, here are some resources&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/ecs/"&gt;Amazon ECS landing page&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/fargate/"&gt;AWS Fargate landing page&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://aws.amazon.com/ecs/getting-started/"&gt;Amazon ECS Getting Started&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>kubernetes</category>
      <category>cloud</category>
      <category>container</category>
    </item>
    <item>
      <title>Useful resources to learn Flutter </title>
      <author>Jasmine Chourasiya</author>
      <pubDate>Mon, 24 Jan 2022 17:51:16 +0000</pubDate>
      <link>https://dev.to/jasmine4/useful-resources-to-learn-flutter-220a</link>
      <guid>https://dev.to/jasmine4/useful-resources-to-learn-flutter-220a</guid>
      <description>&lt;p&gt;From more than one year of experience in app development, here are some resources I would like to share with you thorough this blog post! Like and comment your thoughts. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YouTube Channels&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MTECHVIRAL &lt;br&gt;
[&lt;a href="https://www.youtube.com/c/HelloCodepur"&gt;https://www.youtube.com/c/HelloCodepur&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reso coder&lt;br&gt;
[&lt;a href="https://www.youtube.com/c/ResoCoder"&gt;https://www.youtube.com/c/ResoCoder&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fireship&lt;br&gt;
[&lt;a href="https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA"&gt;https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Techie Blossom &lt;br&gt;
[&lt;a href="https://www.youtube.com/c/TechieBlossom"&gt;https://www.youtube.com/c/TechieBlossom&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;FilledStacks&lt;br&gt;
[&lt;a href="https://www.youtube.com/c/FilledStacks"&gt;https://www.youtube.com/c/FilledStacks&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Net Ninja&lt;br&gt;
[&lt;a href="https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg"&gt;https://www.youtube.com/channel/UCW5YeuERMmlnqo4oq8vwUpg&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Code With Andrea &lt;br&gt;
[&lt;a href="https://www.youtube.com/c/CodeWithAndrea"&gt;https://www.youtube.com/c/CodeWithAndrea&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Raja Yogan &lt;br&gt;
[&lt;a href="https://www.youtube.com/channel/UCjBxAm226XZvgrkO-JyjJgQ"&gt;https://www.youtube.com/channel/UCjBxAm226XZvgrkO-JyjJgQ&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Websites&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;FlutterDev&lt;br&gt;
[&lt;a href="https://flutter.dev/"&gt;https://flutter.dev/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Filledstacks&lt;br&gt;
[&lt;a href="https://www.filledstacks.com/"&gt;https://www.filledstacks.com/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Javatpoint&lt;br&gt;
[&lt;a href="https://www.javatpoint.com/"&gt;https://www.javatpoint.com/&lt;/a&gt;] &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flutterbyexample&lt;br&gt;
[&lt;a href="https://flutterbyexample.com/"&gt;https://flutterbyexample.com/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flutter.institute&lt;br&gt;
[&lt;a href="https://flutter.institute/"&gt;https://flutter.institute/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Google Codelabs&lt;br&gt;
[&lt;a href="https://codelabs.developers.google.com/"&gt;https://codelabs.developers.google.com/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GeeksforGeeks&lt;br&gt;
[&lt;a href="https://www.geeksforgeeks.org/"&gt;https://www.geeksforgeeks.org/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mindorks Blog&lt;br&gt;
[&lt;a href="https://blog.mindorks.com/"&gt;https://blog.mindorks.com/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;flutter-examples&lt;br&gt;
[&lt;a href="https://flutterbyexample.com/"&gt;https://flutterbyexample.com/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;didierboelens&lt;br&gt;
[&lt;a href="https://www.didierboelens.com/about/"&gt;https://www.didierboelens.com/about/&lt;/a&gt;]&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Books&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Beginning App Dvelopment - By Rap Payne&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Beginning flutter - By Marco Napoli&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flutter for Beginners - By Alessandro Biessek&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Flutter in Action - By Eric Windmill&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn Google Flutter Fast - By Mark Clow &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Best Flutter Courses&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJk9KCWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kbztj38kr93v29z6s4t.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJk9KCWo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kbztj38kr93v29z6s4t.jpeg" alt="Image description" width="880" height="872"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SqmE4qFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1edve1u9j1bcsd4ay72.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SqmE4qFF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p1edve1u9j1bcsd4ay72.jpeg" alt="Image description" width="880" height="957"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can connect me here!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jasmine R. Chourasiya&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn :&lt;br&gt;
 [&lt;a href="http://www.linkedin.com/in/jasmine-chourasiya-325882212"&gt;www.linkedin.com/in/jasmine-chourasiya-325882212&lt;/a&gt;]&lt;br&gt;
Instagram :&lt;br&gt;
 [&lt;a href="https://www.instagram.com/chaurasiajasmine/"&gt;https://www.instagram.com/chaurasiajasmine/&lt;/a&gt;]&lt;br&gt;
GitHub :&lt;br&gt;
 [&lt;a href="https://github.com/Jas-02"&gt;https://github.com/Jas-02&lt;/a&gt;]&lt;br&gt;
Google Developer Profile :&lt;br&gt;
 [&lt;a href="https://developers.google.com/profile/u/Jasmine4"&gt;https://developers.google.com/profile/u/Jasmine4&lt;/a&gt;]&lt;br&gt;
Twitter :&lt;br&gt;
 [&lt;a href="https://twitter.com/4_JasmineC?t=faBbHPkhZvU7ifeMvmyeqw&amp;amp;s=08"&gt;https://twitter.com/4_JasmineC?t=faBbHPkhZvU7ifeMvmyeqw&amp;amp;s=08&lt;/a&gt;]&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>dart</category>
      <category>android</category>
      <category>ios</category>
    </item>
    <item>
      <title>Blockchain - Overview</title>
      <author>Chinmay Tripathi</author>
      <pubDate>Mon, 24 Jan 2022 17:46:53 +0000</pubDate>
      <link>https://dev.to/chinmaytrpth2/blockchain-overview-12n5</link>
      <guid>https://dev.to/chinmaytrpth2/blockchain-overview-12n5</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cv6yB0jR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/904jzywy3m2ajpnrk3ga.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cv6yB0jR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/904jzywy3m2ajpnrk3ga.jpg" alt="Image description" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;After a ton of research, reading blogs and referring documentation, I've tried to summarize the concept of blockchain by giving an overview about what exactly it is, covering all the important foundational information one needs to get started with it.&lt;/em&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#so-what-is-blockchain"&gt;
  &lt;/a&gt;
  So what is blockchain?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r_pHMU4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc5inlza77gbg39zowfw.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r_pHMU4Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dc5inlza77gbg39zowfw.jpeg" alt="Image description" width="759" height="257"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Well in simple words, it’s basically a distributed immutable digital ledger of transactions that is duplicated across the entire network of computer systems (nodes). &lt;/p&gt;

&lt;p&gt;In terms of blockchain, a single transaction or record is called a block[]. Which holds all the information with respect  to that transaction. Forming a chain of such blocks(transactions) is called a blockchain. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So Why should we study blockchain?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XbMGcbXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl7qh6r0bf558afz7gge.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XbMGcbXq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rl7qh6r0bf558afz7gge.gif" alt="Image description" width="220" height="161"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because it’s the future, it eliminates the concept of centralized data and helps in the verification and traceability of multistep transactions. Building decentralized applications is the way, which are safer and more secure.&lt;/p&gt;

&lt;p&gt;In short build a sense of trust in making a transaction. (I'll explain the concept of immutability further, but for now understand it this way that once a transaction has been made, nobody can alter it).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-blockchain-work"&gt;
  &lt;/a&gt;
  How does blockchain work?
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;It's an immutable ledger&lt;/em&gt; - All the nodes are connected in a distributed peer to peer system. So suppose, if an attacker tries to mutate the data of an existing block (change some information in a blockchain), it will be immediately corrected by other nodes connected to the network. &lt;/p&gt;

&lt;p&gt;When a block is added or changed in a blockchain, a message is broadcast to all other nodes connected in the network. Each node match the consistency of the information with their blockchain, if something is wrong, the victim node is immediately notified and the state is corrected.  &lt;/p&gt;

&lt;p&gt;The concept of correcting an incorrect blockchain consist of majority of the nodes having same state from the one which is different, because it's present in a distributed immutable environment. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Diving deeper - Let's see how a single block looks in blockchain...&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A block consists of - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Block number&lt;/li&gt;
&lt;li&gt;Data &lt;/li&gt;
&lt;li&gt;Previous hash&lt;/li&gt;
&lt;li&gt;Hash &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: First block is called the genesis block.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Algorithm used is &lt;strong&gt;SHA 256&lt;/strong&gt;  which Encrypts the data into a 64 hexadecimal char of 4 bits each, which is equal to 256 bits.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;And how the blocks are connected?&lt;/em&gt;&lt;/strong&gt; &lt;br&gt;
So, its something like Block1 -&amp;gt; Block2 -&amp;gt; Block3 -&amp;gt; Each block contains prev hash value of block and its own hash. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ArWs_lma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4kkn7nlwonxwqezwfw4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ArWs_lma--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n4kkn7nlwonxwqezwfw4.png" alt="Image description" width="850" height="408"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note: Data cannot be decrypted once encrypted. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-distributed-p2p-network"&gt;
  &lt;/a&gt;
  What is a distributed P2P network?
&lt;/h3&gt;

&lt;p&gt;Thousands (even more) of node connected to each other in a network, where each node contains a copy of the blockchain. Whenever a node adds a transaction, it transmits a  message to all the other nodes connected and everyone adds that transaction to their chain(if course they verify whether the transaction is valid or not, but we'll talk about it later), maintaining the consistency of the network. &lt;/p&gt;

&lt;p&gt;The advantage of having a distributed p2p network is that it eliminates data tampering. Suppose A’s data gets changed, it gets notified by all the other nodes connected to it about data tampering and since the majority of connected nodes have different data as compared to what A has now, it correct its mutated data and balances the integrity again. This scenario is also called the &lt;strong&gt;byzantine fault tolerance&lt;/strong&gt; problem. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bIa_xwhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/171d19nq98v4nv72v8u9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bIa_xwhC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/171d19nq98v4nv72v8u9.png" alt="Image description" width="640" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consensus-protocol-gt-which-prevents-attacks-on-blockchain-and-also-validate-each-transaction-addition"&gt;
  &lt;/a&gt;
  Consensus protocol - &amp;gt; which prevents attacks on blockchain and also validate each transaction addition.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;POW(Proof of work)&lt;/strong&gt; -&amp;gt; This is something which comes into play when a blockchain miner mines a particular transaction to add it into their blockchain. Miners have to solve a math problem and then a block is mined. &lt;/p&gt;

&lt;p&gt;So suppose, a transaction is added to a blockchain in a node. When a miner solves a math problem and adds that transaction to the chain, they are rewarded, solving a problem and adding it into the blockchain is not at all an easy job, so they show their proof of work before adding the transaction to the blockchain and every other node runs an algorithm to verify that the added transaction is valid or not. Once verified, all the other nodes in the network add that block to their chains. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Curious question - What if two nodes add two transaction simultaneously? Which one will be added first?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So, if two nodes transact a two blocks simultaneously at the same time, then the entire network waits until one of the adjacent nodes or the main node(from where the initial transaction blocks were added) add one more block to them increasing their length. In such case the all the other nodes have to accept the that particular nodes added block and add it to their blockchain, discarding their initial node (which is also called the orphan node). &lt;/p&gt;

&lt;p&gt;That’s why we follow a six-step confirmation approach to have a successful transaction. &lt;/p&gt;




&lt;p&gt;Finally, I would like to conclude by emphasizing to research more about this technology which could revolutionize the concept of application security and transaction transparency. Not only this, blockchain has much more to offer, it can be an effective addition to some vital sectors like government, supply chain, healthcare, cyber security and many more...&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>concept</category>
      <category>motivation</category>
      <category>introduction</category>
    </item>
    <item>
      <title>The 15 Ways to Run Containers on AWS</title>
      <author>Tanmay Shukla</author>
      <pubDate>Mon, 24 Jan 2022 17:45:43 +0000</pubDate>
      <link>https://dev.to/tanmaygi/the-10-ways-to-run-containers-on-aws-4iln</link>
      <guid>https://dev.to/tanmaygi/the-10-ways-to-run-containers-on-aws-4iln</guid>
      <description>&lt;h2&gt;
  &lt;a href="#1-proton"&gt;
  &lt;/a&gt;
  1. Proton
&lt;/h2&gt;

&lt;p&gt;Proton was announced at re:Invent 2020. It ties together a bunch of tools that you might use to build containerized applications, with an opinionated position on how to build them. Think of this as a way to set “best practices” and push them to the rest of your organization. I’d advise keeping an eye on this; it’s still early days.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-app-runner"&gt;
  &lt;/a&gt;
  2. App Runner
&lt;/h2&gt;

&lt;p&gt;App Runner was announced last week, and is what sparked this whole thing. I’ve tested it myself, and it seems to work best for single-container workloads, or code repositories in JavaScript or Python that you want to shove into a container, then run automatically. I’d wait for other people to define the space before exploring it yourself, but keep aware of it for a while.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-lightsail-containers"&gt;
  &lt;/a&gt;
  3. Lightsail containers
&lt;/h2&gt;

&lt;p&gt;Isn’t that like Lightsail Containers?” asked someone? Yes! It’s remarkably similar, and a bit more expensive than Lightsail’s container option to boot. Lightsail Containers are probably my goto answer for applications that fit in a single container.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-lightsailec2"&gt;
  &lt;/a&gt;
  4. Lightsail/EC2
&lt;/h2&gt;

&lt;p&gt;You can always just use virtual machine-like instances and run containers yourself, be it by hand with Docker, or using some orchestration mechanism of your own. This is how some expressions of EKS and ECS work. It’s really not advised as I see the world, but if you’re trying to integrate with something pre-existing, it’s far from your worst option.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-eks"&gt;
  &lt;/a&gt;
  5. EKS
&lt;/h2&gt;

&lt;p&gt;When EKS, AWS’s managed Kubernetes service launched, it wasn’t great. That story has changed significantly; it’s faster to spin up than it was at launch, the permissions are marginally better than they used to be (at least, it no longer requires full admin permissions to spin up a cluster), and it can leverage underlying EC2 nodes or Fargate, both of which support Spot for cost purposes. It’s not horrible; if you force me to run Kubernetes, this is likely how I’d go about doing it barring outside constraints.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-aws-lambda"&gt;
  &lt;/a&gt;
  6. AWS Lambda
&lt;/h2&gt;

&lt;p&gt;“Wait, isn’t Lambda their serverless function dingus?” Yes, it very much is–but as of re:Invent 2020, it also supports Docker images as a function packaging mechanism, meaning that you can run your Docker images as Lambda functions–with all the caveats you’d expect from that. That said, it still definitely counts as a way to run containers, but at the cost of significantly blurring the line between Fargate and Lambda as a result.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-ecs"&gt;
  &lt;/a&gt;
  7. ECS
&lt;/h2&gt;

&lt;p&gt;Amazon’s Elastic Container Service is a Kubernetes alternative, and is what I’d go for if I didn’t need to run Kubernetes itself. It takes a simplified view of how to orchestrate and run containers, and is pretty straightforward with respect to its adoption story. I purchased KubernetesTheEasyWay.com and pointed it to the ECS homepage for this reason–and also because nobody made a bid for me to point it to their offering instead. Yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-rosa"&gt;
  &lt;/a&gt;
  8. ROSA
&lt;/h2&gt;

&lt;p&gt;RedHat OpenShift on AWS is a new offering, and one of a still-small subset of first party AWS services that feature partnerships with other companies (as of this writing, OpsWorks for Chef and Puppet, VMware on AWS / RDS on VMware, Managed Prometheus, and Managed Service for Grafana are the ones I’m aware of; their managed Kafka and Elasticsearch services are apparently not done in conjunction with third parties). I’d use this if I were already running OpenShift in production in my on-prem environment and/or had deep expertise with OpenShift among my staff. Even AWS’s own marketing of this service tells a transitional story, about using this for workloads that are already using OpenShift elsewhere in the environment. If you’re going greenfield, I’d pass on this.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-aws-iot-greengrass"&gt;
  &lt;/a&gt;
  9. AWS IoT Greengrass
&lt;/h2&gt;

&lt;p&gt;Greengrass is an open sourced runtime and cloud service dingus that lets you pay AWS to run Lambda functions and containers on your own devices locally (usually taken to mean embedded devices), while still finding a way to pay AWS for the privilege. This has been around for a while–long enough to have a “we have screwed up” 2.0 release. It has some older-style approaches to things, such as only charging per device per month rather than a bunch of other billing dimensions. I haven’t yet used this service in anger.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-codebuild"&gt;
  &lt;/a&gt;
  10. Codebuild
&lt;/h2&gt;

&lt;p&gt;If you need to run a container on a schedule, it’s hard to go wrong with CodeBuild. While this is imagined as a build/release tool, it’s also the best way to run containers serverlessly, with available container sizes that are far larger than most other services, and to execute a task that previously existed as a cron job. I know it sounds like I’m misusing a service, and I confess it started that way, but the more I look at this application and talk about it with others, the more convinced I am that I inadvertently stumbled onto a novel use for a tool that goes beyond what AWS Marketing envisioned when they told its story.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#11-eks-anywhereecs-anywhere"&gt;
  &lt;/a&gt;
  11. EKS Anywhere/ECS Anywhere
&lt;/h2&gt;

&lt;p&gt;These two services are similar to the above mentioned versions without the “Anywhere” added in, except that they can run in your on-premises environment–or in other cloud providers but for obvious reasons that’s not marketed super well or loudly. I’d consider it as a transitional story or for solidly hybrid deploys–once they come out of preview.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#12-fargate"&gt;
  &lt;/a&gt;
  12. Fargate
&lt;/h2&gt;

&lt;p&gt;Fargate is a serverless compute engine that takes the place of “nodes you manage yourself” when used with either ECS or EKS. AWS handles the scaling, placement, and underlying infrastructure issues. Given their support for Spot instances and the fact that Savings Plans now cover their usage, I’m a big fan of the platform. It may be one of the better innovations to come out of AWS’s container group.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#13-app2container"&gt;
  &lt;/a&gt;
  13. App2Container
&lt;/h2&gt;

&lt;p&gt;App2Container is a CLI tool that AWS puts out that modernizes both Java and .NET applications. What does “modernization” mean? You guessed it; it shoves them wholesale into containers, generates the ECS or Kubernetes definitions, and calls it a day. Not working with either one of those languages in anger, I couldn’t tell you whether this service is awesome, terrible, or somewhere in between.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#14-copilot"&gt;
  &lt;/a&gt;
  14. Copilot
&lt;/h2&gt;

&lt;p&gt;Copilot is a CLI utility that presumably came out of AWS’s container group looking at the official AWS CLI, realizing that getting it to work the way they wanted it to in order to get straightforward tasks done would be a gargantuan effort, giving up entirely, and building this thing from scratch instead. It takes your application and shoves it into ECS, then calls it a day. Given how annoying those services are to work with directly, I’d give this tool a strong thumbs up.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#15-elastic-beanstalk"&gt;
  &lt;/a&gt;
  15. Elastic Beanstalk
&lt;/h2&gt;

&lt;p&gt;This was AWS’s attempt at “Heroku but with extra steps” managed application service. You’d point it at your code repository in a wide variety of languages, it would churn for a while, and then it’d run the application for you on top of AWS resources. It predates the container explosion, but has been largely neglected since–with the notable exception of “adding support for Docker images.” I like it, but it doesn’t feel like this is where AWS’s container attention lives these days.&lt;/p&gt;

&lt;p&gt;And there you have it; the 15 ways to deploy containers on AWS. Some may suit your needs better than others, but at least we now have a single place to point people towards when they’re faced with this agonizing decision.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#to-summarize"&gt;
  &lt;/a&gt;
  To summarize:
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;If you’re running OpenShift already? Use ROSA. &lt;/li&gt;
&lt;li&gt;If you’re forced to use Kubernetes? EKS. - You have a simple container you want to just have AWS manage for you? App Runner. &lt;/li&gt;
&lt;li&gt;You have a complex application and don’t want to drown in complexity? ECS.&lt;/li&gt;
&lt;/ul&gt;




</description>
      <category>aws</category>
      <category>cloud</category>
      <category>cloudskills</category>
      <category>kubernetes</category>
    </item>
  </channel>
</rss>
