<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>WAO: How do you release software?</title>
      <author>Nathan Kallman</author>
      <pubDate>Mon, 10 May 2021 18:00:47 +0000</pubDate>
      <link>https://dev.to/kallmanation/wao-how-do-you-release-software-56jm</link>
      <guid>https://dev.to/kallmanation/wao-how-do-you-release-software-56jm</guid>
      <description>&lt;p&gt;&lt;em&gt;Cover photo by &lt;a href="https://unsplash.com/@michalmatlon?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Michal Matlon&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/wrong-answer?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#wrong-answers-only"&gt;
  &lt;/a&gt;
  Wrong Answers Only
&lt;/h1&gt;

&lt;p&gt;How do you release/deploy/package your software product (or service)?&lt;/p&gt;




&lt;p&gt;Comment your wrong answer!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>discuss</category>
      <category>wronganswersonly</category>
    </item>
    <item>
      <title>Code sites to challenge your skills</title>
      <author>Chris Jarvis</author>
      <pubDate>Mon, 10 May 2021 17:56:48 +0000</pubDate>
      <link>https://dev.to/jarvisscript/code-sites-to-challenge-your-skills-g4g</link>
      <guid>https://dev.to/jarvisscript/code-sites-to-challenge-your-skills-g4g</guid>
      <description>&lt;p&gt;Last Time I wrote about Place for free Code tutorials, today I have an unsorted list of code challenge sites.&lt;/p&gt;

&lt;h2&gt;Exercism&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://exercism.io/"&gt;Exercism.io&lt;/a&gt; I was introduced to exercism at a local developer meet up, remember those? We would just split into some groups work on some exercises and then had group discussions on them. I recently picked back up on Exercism because VirtualCoffee group began doing channel with biweekly challenges.&lt;br&gt;
Exercism gives you a problem and some tests. Your challenge is  to write the code to pass the test. Once the code passes the test, you uncomment the next one and continue till you solve them all.&lt;br&gt;
Exercism has challenges in several language tracks. Once you solve an exercise you unlock another. They now have online mentors that will review your solutions. I just started using this feature. The mentors supplied some good tips to refactor the code and make the solutions more concise. The comments included links to documentation. I read the docs, made changes and improved my answers.&lt;/p&gt;

&lt;h2&gt;CodeWars&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.codewars.com/"&gt;Code Wars&lt;/a&gt; tests your skills with various challenges of increasing levels of difficulty. You can view other users solutions and chat with them. Users can earn badges. There's gamification and a dark mode option.&lt;/p&gt;

&lt;h2&gt;Hackerrank&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.hackerrank.com/"&gt;hacker rank&lt;/a&gt; is used by many employers to test candidates. It's good to familiarize yourself with the platform in case you have Code Challenge here. &lt;br&gt;
They have a series of tests called the HackerRank Interview Preparation Kit. It goes over topics that companies test the most. They even state what percentage of companies test a particular topic.&lt;/p&gt;

&lt;h2&gt;Other Code Challenge Sites&lt;/h2&gt;

&lt;p&gt;There are many other code challenge sites but for this post I just wanted to list some I have used personally. I didn't want to just list a bunch of them. Some time in the future I ,ay explore others.&lt;br&gt;
For now go out and explore a code challenge site to exercise your mind and skills.&lt;/p&gt;

</description>
      <category>codechallnge</category>
    </item>
    <item>
      <title>Practicing Confidence for the Job Search</title>
      <author>Abbey Perini</author>
      <pubDate>Mon, 10 May 2021 17:54:37 +0000</pubDate>
      <link>https://dev.to/abbeyperini/practicing-confidence-for-the-job-search-38nj</link>
      <guid>https://dev.to/abbeyperini/practicing-confidence-for-the-job-search-38nj</guid>
      <description>&lt;h1&gt;
  &lt;a href="#or-how-i-stopped-selfrejecting-and-embraced-selfpromotion"&gt;
  &lt;/a&gt;
  Or How I Stopped Self-Rejecting and Embraced Self-Promotion
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iWI2bTX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/315nalo5j30vfd8r5mri.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iWI2bTX4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/315nalo5j30vfd8r5mri.gif" alt="A gif of Moira Rose from Schitt's creek saying &amp;quot;one must champion oneself and say I am ready for this.&amp;quot;"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More than anything else, this article is here to tell you that you should absolutely toot your own horn. Much like how everyone should discuss their salary but doesn't want to, promoting yourself to employers is an often uncomfortable necessity of getting a job and getting compensated fairly.&lt;/p&gt;

&lt;p&gt;Luckily, confidence is something you can practice. I'm not talking about "fake it 'til you make it." You'll need to find ways to inspire confidence in yourself independent of the job search. I recommend creating a daily practice of it, just like you would meditation.&lt;/p&gt;

&lt;p&gt;As always, please remember, a rejection usually has more to do with the hiring manager than you. It is probable that every interviewer you will ever speak to has not been trained in interviewing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practicing-confidence"&gt;
  &lt;/a&gt;
  Practicing Confidence
&lt;/h2&gt;

&lt;p&gt;Write it down - digitally or handwritten. Keep a wins folder with every message, email, photo, etc. that reminds you that you are good at doing things. You can also keep a daily gratitude log. In my case, I write down one thing I can celebrate about my day. Don't know where to start? Check out Julia Evans' &lt;a href="https://jvns.ca/blog/brag-documents/"&gt;brag documents&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pick a goal - this one really depends on your personality. If you need smaller goals that you can check off, it might not be your main confidence builder. The productivity begets confidence begets productivity cycle can become a trap. I committed to "I will get a development role" after watching a Dolly Parton documentary where she stated that she knew she would make a music career happen before she even got to Nashville.&lt;/p&gt;

&lt;p&gt;Mantra - I'm a yoga teacher, so I love mantras. You can use mantras like "I am worthy" on a daily basis. Luvvie Ajayi Jones' book, &lt;em&gt;Professional Troublemaker: The Fear-Fighter Manual&lt;/em&gt;, has instructions on how to write your own hype mantra, which will make you feel like a hero.&lt;/p&gt;

&lt;p&gt;Building things - I personally get a lot of my self-confidence from creating things. The one caveat I will give is that if you're job searching for a coding role, you probably want to build things without code in real life in your spare time to boost yourself up. Also, pick things that are bite sized and achievable. No need to stress yourself out with your hobbies too.&lt;/p&gt;

&lt;p&gt;Vision board - My vision board is on a wall near my desk. I represented future goals with pictures and included quotes and small craft projects to remind myself of the feeling I was trying to create within myself on a daily basis.&lt;/p&gt;

&lt;p&gt;Support network/hype person - Call your mom. Call your friends. Tweet a plea for help. Really lean on the people in your life when you need it. After a really tough rejection, sometimes the only thing that helped was my friends reminding me that they think I'm awesome.&lt;/p&gt;

&lt;p&gt;Rest and activities that refuel you - Exercise, yoga and meditation, outdoor hobbies, indoor hobbies, spending time with your family, friends and pets. Get away from the computer. Put a phone timer on your email and LinkedIn. Take it from me, you can't job search and practice coding 24/7 and it won't help you if you do.&lt;/p&gt;

&lt;p&gt;I also recommend finding networking groups of people with similar backgrounds going through the same job search - a little community goes a long way. Examples include &lt;a href="https://virtualcoffee.io"&gt;Virtual Coffee&lt;/a&gt;, &lt;a href="https://www.womenwhocode.com/"&gt;Women Who Code&lt;/a&gt;, and &lt;a href="https://www.blacksintechnology.net/"&gt;Blacks In Technology&lt;/a&gt;. Search online for more in your area and watch for recommendations on social media like LinkedIn and Twitter.&lt;/p&gt;

&lt;p&gt;Did I miss a way that you practice confidence or a networking group you love? Let me know with a comment below.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-your-new-confidence"&gt;
  &lt;/a&gt;
  Applying your new confidence
&lt;/h2&gt;

&lt;p&gt;First, you need a couple go-to hits to get over that icky shameful feeling about self-promotion. It could be the summary statement at the top of your technical resume - what are 3 things you know you're good at? They can be soft skills or a tool, framework, or methodology that you're really comfortable using. Literally practice telling anyone that you're good at those things. Could be your spouse or friend, but you've gotta let them know that you are an excellent problem solver with mega Angular skills. Once it feels even slightly natural, you're ready to start applying it to the job search.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#breaking-down-a-job-description"&gt;
  &lt;/a&gt;
  Breaking down a job description
&lt;/h2&gt;

&lt;p&gt;In my old role, I was responsible for reading a job description, pulling out the necessary information, and rewriting it so that when it was published on the internet, the recruiters would see the candidates with the best fit applying. Part of that was frequent calls with hiring managers to retool the original job description because the candidates submitted weren't what they were looking for. Here's how I flipped that for applying to jobs myself.&lt;/p&gt;

&lt;p&gt;The first thing I look at is the required requirements. Some companies will have a strict degree requirement. All of them will list a degree requirement. If I can speak to one bullet point in this section, I consider myself qualified to apply. &lt;/p&gt;

&lt;p&gt;If I can speak to a requirement like "experience with React," React becomes one of my keywords.&lt;/p&gt;

&lt;p&gt;Next I'll comb through preferred requirements, and if I can speak to one, I pull keywords from it as well. Then I'll look at the blurbs about the company and the role, to see if I can pull out any keywords from those. If there's not a descriptive blurb about the company and you want to go one step further, do research on their website, focusing especially on their listed goals, values, and mission statement.&lt;/p&gt;

&lt;p&gt;All of these keywords become jumping off points for explaining via a cover letter, resume, or interview question that you are the right person to hire.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cover-letter%C2%A0"&gt;
  &lt;/a&gt;
  Cover letter 
&lt;/h2&gt;

&lt;p&gt;A caveat: I have seen people talk about tailoring their resume for each job they apply to. I cannot speak to the efficacy of cover letters or tailoring your resume, but here's how I wrote the cover letters I did bother to write. This could easily be applied to tailoring a resume.&lt;/p&gt;

&lt;p&gt;Make yourself a template to save yourself stress and the time it takes to consider your opening and closing lines. For some reason, every cover letter I wrote started with "I would relish the opportunity to discuss the [Software Developer] role in depth." Spend the rest of the cover letter telling your potential employer how your experience lines up with the keywords you pulled from the job description. For example, if my keywords were "Adobe Creative Suite" and "front-end development," I'd write "my portfolio has examples of my use of Adobe Create Suite in conjunction with my front-end development skills."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#resume%C2%A0"&gt;
  &lt;/a&gt;
  Resume 
&lt;/h2&gt;

&lt;p&gt;There's lots of advice out there for writing an Applicant Tracking System (ATS) compatible resume, so I'm only going to speak about career changes and gaps.&lt;/p&gt;

&lt;p&gt;If you are changing careers, your experience in a different industry still applies. Especially if you've pulled some soft skill keywords from the job description and you can explain how you demonstrated them in your old role. However, years of professional experience are still years of professional experience. That alone shows that you are a reliable employee if nothing else. People have described my switch from recruiting admin to software developer as "a complete 180." I would say that role helped me hone many skills applicable to software development like keeping up with conflicting priorities, communicating professionally, and hunting down the answers I need when I have no idea where to start. Many of my interviewers agreed. &lt;/p&gt;

&lt;p&gt;If you're a stay at home parent returning to the workforce, come up with your story about it and start practicing it now. Include it in your resume with skills you currently use that can apply to a job. Include your volunteer work and any organizations you were a part of. Unfortunately, you will be asked inappropriate questions. Sometimes companies require an explanation for any gap as part of their onboarding if they have strict verification processes. "I chose to stay home and exclusively raise my children because it was the best option for my family, financially and otherwise" is a perfectly sufficient answer. More often, interviewers think it's ok to ask pointed, biased questions. It is perfectly fine for you to ask how those questions are relevant and only give your practiced explanation for the gap. In fact, biased assumptions about parenthood affecting your ability to work is probably a red flag about the company culture.&lt;/p&gt;

&lt;p&gt; &lt;br&gt;
If you have a gap in employment for any other reason, you will have to practice an answer too. My gap was to get my yoga certification. When asked, I explained why I chose to pursue it when I did and why I chose to walk away from a yoga teacher career. I often describe how yoga helps me be a better person and employee. Just like with stay at home parents, if you don't want to explain in depth, "finding myself" is a perfectly acceptable answer. Some people know exactly what they want to do right off the bat and follow a linear career path. I don't think they are the majority.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interview-questions"&gt;
  &lt;/a&gt;
  Interview questions
&lt;/h2&gt;

&lt;p&gt;Practice your answers to questions you know you will be asked like "tell us a little about yourself." Practice working the keywords you pull from the job description and company site into your answers. The goal is to become comfortable describing yourself in a positive light when in an interview setting. Remember, you can always ask for a second to think or for your interviewer to repeat or clarify the question. Once you don't have to scramble for your answers to every single question, the pressure you feel walking into an interview is significantly lessened.&lt;/p&gt;

&lt;p&gt;Also, don't forget to practice confidence right before an interview! It's easy to give into the self-doubt monster 30 minutes before that zoom call, but once you break the cycle and remain calm through most of an interview, the job search gets that much easier.&lt;/p&gt;

&lt;p&gt;For developers looking for their first tech role, practice how to describe your learning process and saying "I don't know but here's how I would find out." You are also interviewing the company, and if they're only looking for someone that already knows all the answers, they're probably not going to find a candidate anytime soon and you don't want to work for them anyway.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#networkingonline-presence"&gt;
  &lt;/a&gt;
  Networking/Online Presence
&lt;/h2&gt;

&lt;p&gt;Cold emailing/messaging is always awkward. Be nice and enthusiastic and don't be afraid to tell the person why you're contacting them, especially if it's because you think they're knowledgeable. You'll be surprised how many people love to hear you think they're an expert - they're probably not perfectly confident either!&lt;/p&gt;

&lt;p&gt;Share! Share! Share! You've got to practice your way out of that reticence to share. Tell everyone you know, "hey, I'm looking for a job right now." When you build or write a cool thing, share it on social media and show people! If you don't write, you could share your StackOverflow or Github. Explaining how your cool new app works to a layman, even if it's just your parents, will help you explain it in an interview.&lt;/p&gt;

&lt;p&gt;I did not feel 100% confident about the site and blog post I shared when I shared them, but they ended up being the catalyst that got me a job. Imperfect self-promotion will always win out over self-rejection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;p&gt;References can be people you work with on coding projects. They don't have to be a former co-worker, so you can ask anyone you've worked with on an open source or volunteer project. Unless the company specifies that they want professional reference, they don't have to be someone you have worked with at all. I would avoid family members, but I've used friends as references plenty of times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now I hope you'll see a job description or interview as an opportunity to show your strengths rather than opportunities to fail. A job description should be a tool for you to use to show another human who happens to be your interviewer that you can most certainly hit the ground running if they hire you. A cover letter, thank you note, resume, or online presence should be full of shameless self-promotion.&lt;/p&gt;

&lt;p&gt;6 months ago, I would not have described myself as a confident person. The people who have met me in the last few months would disagree. All I did was commit to practicing confidence over self-rejection and self-doubt. Just like a meditation practice, the idea is to practice enough that confidence becomes a tool you can lean on when your brain wants to doubt you. There is something that makes you unique and a great person to hire. Tell everyone about it.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>career</category>
      <category>womenintech</category>
      <category>technology</category>
    </item>
    <item>
      <title>Cheatsheet for the Regex Cheatsheet, Part V: Quantifiers</title>
      <author>Analogy | Absence | Example</author>
      <pubDate>Mon, 10 May 2021 17:52:30 +0000</pubDate>
      <link>https://dev.to/mathlete/cheatsheet-for-the-regex-cheatsheet-part-v-quantifiers-3504</link>
      <guid>https://dev.to/mathlete/cheatsheet-for-the-regex-cheatsheet-part-v-quantifiers-3504</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I was recently doing a code challenge for a job interview that required me to strip out all nonalphabetic characters. "Ah! I should use Regular Expressions for this!" I thought in triumph, impressed that I even knew what regular expressions &lt;em&gt;were&lt;/em&gt;. That fleeting moment of glory faded once I decided to brush up on regular expressions and landed on the encouragingly-named &lt;a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/"&gt;Regular Expressions Cheatsheet&lt;/a&gt;. I had no idea how to use it!&lt;/p&gt;

&lt;p&gt;So, for people like me, here is a &lt;em&gt;Cheatsheet for the Regular Expressions Cheatsheet, Part V: Quantifiers&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TDUj3IeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/952eizrrs8n8c14nbfm3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TDUj3IeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/952eizrrs8n8c14nbfm3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-an-quantifier"&gt;
  &lt;/a&gt;
  What's an Quantifier?
&lt;/h2&gt;

&lt;p&gt;A quantifier finds a sequence of characters to match. It also can be used to find a sequence of expressions to match, but I'm gonna keep it simple here and focus on sequences of characters.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anatomy-of-a-regular-expression"&gt;
  &lt;/a&gt;
  Anatomy of a regular expression
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Forward slashes go on either end like so: &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;g&lt;/code&gt; for "global" at the end to find every instance, like so: &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/g&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;m&lt;/code&gt; to "multi line" to the beginning/end of each line, not just the beginning/end of each string, like &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/g&lt;/code&gt; or &lt;code&gt;/&lt;/code&gt;something&lt;code&gt;/gm&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#quantifiers"&gt;
  &lt;/a&gt;
  Quantifiers
&lt;/h2&gt;

&lt;h5&gt;
  &lt;a href="#-raw-endraw-0-or-more-instances-of-a-character"&gt;
  &lt;/a&gt;
  &lt;code&gt;*&lt;/code&gt; 0 or more instances of a character
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ro*ar&lt;/code&gt; is used in &lt;code&gt;/ro*ar/&lt;/code&gt; to find the following:
&lt;em&gt;The lion said roar rooar roooar roooooooar!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Example on &lt;a href="https://regex101.com/r/KwCm09/1"&gt;regex101.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Example in Javascript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/ro*ar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;roar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h5&gt;
  &lt;a href="#-raw-endraw-1-or-more-instances-of-a-character"&gt;
  &lt;/a&gt;
  &lt;code&gt;+&lt;/code&gt; 1 or more instances of a character
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ro+ar&lt;/code&gt; is used in &lt;code&gt;/ro+ar/&lt;/code&gt; to find the following: 
&lt;em&gt;The lion said roar rooar roooar roooooooar!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Example on &lt;a href="https://regex101.com/r/UiZmpm/1"&gt;regex101.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Example in Javascript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/ro+ar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;roar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h5&gt;
  &lt;a href="#-raw-endraw-0-or-1-instance-of-a-character"&gt;
  &lt;/a&gt;
  &lt;code&gt;?&lt;/code&gt; 0 or 1 instance of a character
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;ro?ar&lt;/code&gt; is used in &lt;code&gt;/ro+ar/&lt;/code&gt; to find the following: 
&lt;em&gt;The lion said roar rooar roooar roooooooar!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Example on &lt;a href="https://regex101.com/r/JQz9UY/1"&gt;regex101.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Example in Javascript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/ro&lt;/span&gt;&lt;span class="se"&gt;?&lt;/span&gt;&lt;span class="sr"&gt;ar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;roar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h5&gt;
  &lt;a href="#-raw-n-endraw-n-instances-of-a-character"&gt;
  &lt;/a&gt;
  &lt;code&gt;{N}&lt;/code&gt; N instances of a character
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{3}&lt;/code&gt; is used in &lt;code&gt;/ro{3}ar/&lt;/code&gt; to find the following: 
&lt;em&gt;The lion said roar rooar roooar roooooooar!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Example on &lt;a href="https://regex101.com/r/VvSgrl/1"&gt;regex101.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Example in Javascript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/ro&lt;/span&gt;&lt;span class="se"&gt;{3}&lt;/span&gt;&lt;span class="sr"&gt;ar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;roooar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h5&gt;
  &lt;a href="#-raw-n-endraw-at-least-n-instances-of-a-character"&gt;
  &lt;/a&gt;
  &lt;code&gt;{N,}&lt;/code&gt; At &lt;em&gt;least&lt;/em&gt; N instances of a character
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{3,}&lt;/code&gt; is used in &lt;code&gt;/ro{3,}ar/&lt;/code&gt; to find the following: 
&lt;em&gt;The lion said roar rooar roooar 
roooooooar!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Example on &lt;a href="https://regex101.com/r/MVVz9H/1"&gt;regex101.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Example in Javascript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/ro&lt;/span&gt;&lt;span class="se"&gt;{3,}&lt;/span&gt;&lt;span class="sr"&gt;ar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;roooar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h5&gt;
  &lt;a href="#-raw-nm-endraw-between-n-and-m-instances-of-a-character"&gt;
  &lt;/a&gt;
  &lt;code&gt;{N,M}&lt;/code&gt; Between N and M instances of a character
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;{2,4}&lt;/code&gt; is used in &lt;code&gt;/ro{2,4}ar/&lt;/code&gt; to find the following: 
&lt;em&gt;The lion said roar rooar roooar roooooooar!&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Example on &lt;a href="https://regex101.com/r/lGtayD/3"&gt;regex101.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Example in Javascript:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/ro&lt;/span&gt;&lt;span class="se"&gt;{2,4}&lt;/span&gt;&lt;span class="sr"&gt;ar/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;found&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// [&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rooar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The lion said roar rooar roooar roooooooar!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;groups&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>beginners</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Creating an API with Deno (import maps, deps.ts, etc.)</title>
      <author>Alex Merced</author>
      <pubDate>Mon, 10 May 2021 17:34:59 +0000</pubDate>
      <link>https://dev.to/alexmercedcoder/creating-an-api-with-deno-import-maps-deps-ts-etc-l25</link>
      <guid>https://dev.to/alexmercedcoder/creating-an-api-with-deno-import-maps-deps-ts-etc-l25</guid>
      <description>&lt;ul&gt;
&lt;li&gt;In this tutorial, I'm using Deno version 1.9.2&lt;/li&gt;
&lt;li&gt;If unfamiliar with Deno &lt;a href="https://youtu.be/nWjBkjyEJyY"&gt;watch my intro Server-Side JS Video&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;I created a template to sketch out many of the main files to get you up and running with deno. Make your own instance of the template by clicking "use template" and clone it to your workspace.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Alex-Merced-Templates/DENO_TEMPLATE"&gt;Deno Project Template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In the Template, there is a file called command.md that documents many of the mail commands and flags you need to work with deno&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#importing-dependencies"&gt;
  &lt;/a&gt;
  Importing Dependencies
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We will be using &lt;a href="https://deno.land/x/pogo@v0.5.2"&gt;Pogo, Web Server Framework&lt;/a&gt; to build out API&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We could import pogo via a URL like so...&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pogo&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://deno.land/x/pogo/main.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While we can do this we will use an import map to make our imports look cleaner.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;inside the imports.json file include the following
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"imports"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"pogo"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"https://deno.land/x/pogo/main.ts"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;instead of importing the dependencies all over our application, the conventional practice is to have a deps.ts files where you import all your dependencies and export them. Put the following in deps.ts.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//IMPORT THEN EXPORT DEPENDENCIES&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;pogo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can import want we need from our dependencies from the deps.ts file.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For the purpose of making sure we consistently install dependencies we should generate a lock file by running the following command... &lt;code&gt;deno cache --lock=deps_lock.json --import-map=imports.json --lock-write deps.ts&lt;/code&gt;. I would do this after installing new libraries.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now if we wanted to upgrade the versions we use in our project we would just update the urls in our imports.json and it will update the whole project (rebuild your lock file after any new dep or upgrade).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-api"&gt;
  &lt;/a&gt;
  Building the API
&lt;/h2&gt;

&lt;p&gt;Head over to src/index.js and let's get started by creating the basics of our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import Server from deps&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../deps.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// GET PORT FROM ENV VARIABLES ENABLED WITH THE --allow-env flag&lt;/span&gt;
&lt;span class="c1"&gt;// ParseInt cause env variables come in as strings&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PORT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// Create our Server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// START HTTP LISTENER ENABLED BY --alow-net flag&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;run the following command to test the server&lt;br&gt;
&lt;code&gt;PORT=3000 deno run --allow-env --allow-net --import-map=imports.json src/index.js&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#basic-crud-example"&gt;
  &lt;/a&gt;
  Basic CRUD Example
&lt;/h2&gt;

&lt;p&gt;Add the meals dummy data and routes&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Import Server from deps&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../deps.ts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// GET PORT FROM ENV VARIABLES ENABLED WITH THE --allow-env flag&lt;/span&gt;
&lt;span class="c1"&gt;// ParseInt cause env variables come in as strings&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PORT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;// Create our Server&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;port&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;PORT&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// DUMMY DATA&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;meals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Breakfast&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Lunch&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Dinner&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;world&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// MEAL CRUD ROUTES&lt;/span&gt;

&lt;span class="c1"&gt;//index&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/meals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;meals&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//show&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/meals/{index}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;meal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)]}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//create&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/meals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// parse the request body into a javascript object&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextDecoder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="nx"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;meals&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//update&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/meals/{index}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// parse the request body into a javascript object&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;TextDecoder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Deno&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
    &lt;span class="nx"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;meal&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;meals&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;//show&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/meals/{index}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;helper&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;meals&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;meals&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// START HTTP LISTENER ENABLED BY --alow-net flag&lt;/span&gt;
&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Start the server and test out the routes using a tool like postman.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;So you built an API, what now? You can deploy your deno app using docker to deploy a container to Heroku or Fly.io. &lt;a href="https://www.youtube.com/watch?v=Fe4XdAiqaxI"&gt;Here is a video on how to do that.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add in a database like Mongo or Postgres. Once you get the hang of it, Deno offers some really interesting possibilities including compiling to executables.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Modular Ducks - A design pattern for scalable redux architecture</title>
      <author>Ashish Ranjan</author>
      <pubDate>Mon, 10 May 2021 17:30:29 +0000</pubDate>
      <link>https://dev.to/code_ashish/modular-ducks-a-design-pattern-for-scalable-redux-architecture-4dna</link>
      <guid>https://dev.to/code_ashish/modular-ducks-a-design-pattern-for-scalable-redux-architecture-4dna</guid>
      <description>&lt;p&gt;I have worked with many different redux patterns and architectures, and I have found that none of them were perfectly ideal. The duck's pattern is prone to a circular dependency. The traditional folder-based approach requires you to separate action, reducers, selectors, etc into multiple files that can be cumbersome while making changes. &lt;br&gt;
&lt;a href="https://redux-toolkit.js.org/"&gt;Redux toolkit&lt;/a&gt; provides an opinionated wrapper around redux and lets us do more with less code. But the issue with the Redux toolkit is that the project structure becomes similar to ducks and is prone to a circular dependency. Redux toolkit has already warned us of this issue &lt;a href="https://redux-toolkit.js.org/usage/usage-guide#exporting-and-using-slices"&gt;here&lt;/a&gt;. &lt;br&gt;
In this article, I am trying to explain my architecture with the Redux toolkit which is circular dependency safe, and also handles refactoring with ease. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-structure"&gt;
  &lt;/a&gt;
  Project Structure
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Slices&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Break your redux store based on the features of the app. With the Redux toolkit, we can use the &lt;code&gt;createSlice&lt;/code&gt; API to create actions, reducers, and selectors for an individual slice. &lt;/li&gt;
&lt;li&gt;One thing to keep in mind is no two slices should import from one another. There can be a case when we might have to trigger reducers in two slices based on one action. In that case, instead of importing action from one slice to another, create a common action using &lt;code&gt;createAction and this action will be registered in both the slices with&lt;/code&gt;extraReducers.&lt;/li&gt;
&lt;li&gt;Export the constant key from this file, to be used in `combine reducers to combine the reducers. Keeping the constant key in the slice file makes the store structure more predictable.&lt;/li&gt;
&lt;li&gt; Keep all the selectors for keys of a slice file in their respective slice file. &lt;code&gt;createGlobalStateSelector&lt;/code&gt; is a &lt;a href="//npmjs.com/package/create-global-state-selector"&gt;tiny npm library&lt;/a&gt; to generate global state selectors from the local slice selectors. This eases the refactoring effort by quite a lot.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Common Actions&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Based on the project structure we can have multiple common action files.&lt;/li&gt;
&lt;li&gt;Common action files should not import from any other file in the project directory.&lt;/li&gt;
&lt;li&gt;Common actions can be used inside slices, thunks, and our components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Common Selectors&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just like common actions, we might need selectors from different slices to combine them into one selector (e.g. &lt;code&gt;createSelector&lt;/code&gt; from reselect).&lt;/li&gt;
&lt;li&gt;Keeping combined selectors of two different slices outside the slice file in a different slice file, removes the circular dependency issue.&lt;/li&gt;
&lt;li&gt;Common selectors file will import from slices file and will be used inside thunks and components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Thunks&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thunk actions (or any redux middleware functions) should not be kept in a slice file. Thunks have access to the global state and it might have to dispatch action for some other slice.&lt;/li&gt;
&lt;li&gt;You can create multiple files for thunk actions (it is always better to have multiple files than having one giant file). This can also be divided based on the features.&lt;/li&gt;
&lt;li&gt;Thunk action files can import from slice files (actions and selectors), common action files, and common selectors. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#import-diagram"&gt;
  &lt;/a&gt;
  Import diagram
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WU38_061--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afv23dd2964ri4rpsxsy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WU38_061--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/afv23dd2964ri4rpsxsy.jpeg" alt="redux import diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sample-code"&gt;
  &lt;/a&gt;
  Sample Code
&lt;/h3&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// personalDetailsSlice.js

import { createSlice } from '@reduxjs/toolkit';
import createGlobalStateSelector from 'create-global-state-selector';
import { clearData } from './commonActions';

export const sliceKey = 'personalDetails';
const initialState = {
  name: 'Ashish',
  age: '26',
  isEligibleToDrink: false
};

const { actions, reducer } = createSlice({
  name: sliceKey,
  initialState,
  reducers: {
    setName(state, { payload }) {
      state.name = payload;
    },
    setAge(state, { payload }) {
      state.age = payload;
    },
    setDrinkingEligibilityBasedOnAge(state) {
      state.isEligibleToDrink = selectLocalAge(state) &amp;gt;= 18;
    }
  },
  extraReducers: {
    [clearData]: (state) =&amp;gt; {
      state.isEligibleToDrink = null;
      state.age = null;
      state.name = null;
    }
  }
});

function selectLocalName(state) {
  return state.name;
}
function selectLocalAge(state) {
  return state.age;
}
function selectLocalIsEligibleToDrink(state) {
  return state.isEligibleToDrink;
}

export default reducer;
export const { setName, setAge, setDrinkingEligibilityBasedOnAge } = actions;

export const { selectName, selectAge, selectIsEligibleToDrink } = createGlobalStateSelector(
  {
    selectName: selectLocalName,
    selectAge: selectLocalAge,
    selectIsEligibleToDrink: selectLocalIsEligibleToDrink
  },
  sliceKey
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// educationalDetailsSlice.js

import { createSlice } from '@reduxjs/toolkit';
import createGlobalStateSelector from 'create-global-state-selector';
import { clearData } from './commonActions';

export const sliceKey = 'educationalDetails';
const initialState = {
  qualification: 'engineering'
};

const { actions, reducer } = createSlice({
  name: sliceKey,
  initialState,
  reducers: {
    setQualification(state, { payload }) {
      state.qualification = payload;
    }
  },
  extraReducers: {
    [clearData]: (state) =&amp;gt; {
      state.qualification = null;
    }
  }
});

function selectLocalQualification(state) {
  return state.qualification;
}

export default reducer;
export const { setQualification } = actions;

export const { selectQualification } = createGlobalStateSelector(
  { selectQualification: selectLocalQualification },
  sliceKey
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// commonActions.js

import { createAction } from '@reduxjs/toolkit';

export const clearData = createAction('detail/clear');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// commonSelectors.js

import { createSelector } from '@reduxjs/toolkit';
import { selectAge } from './personalDetailsSlice';
import { selectQualification } from './educationalDetailsSlice';

export const selectIsEligibleToWork = createSelector(
  selectAge,
  selectQualification,
  (age, qualification) =&amp;gt; age &amp;gt;= 18 &amp;amp;&amp;amp; qualification === 'engineering'
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// thunks.js

import { fetchQualification } from './api';
import { selectName } from './personalDetailsSlice';
import { setQualification } from './educationalDetailsSlice';
import { clearData } from './commonActions';

export const getQualification = () =&amp;gt; (dispatch, getState) =&amp;gt; {
  const state = getState();
  const name = selectName(state);
  fetchQualification(name)
    .then(({ qualification }) =&amp;gt; dispatch(setQualification(qualification)))
    .catch(() =&amp;gt; dispatch(clearData()));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// store.js

import { createStore, combineReducers } from 'redux';
import personalDetailsReducer, { sliceKey as personalDetailsSliceKey } from './personalDetailsSlice';
import educationalDetailsSlice, { sliceKey as educationalDetailsSliceKey } from './educationalDetailsSlice';

const reducer = combineReducers({


});
const store = createStore(reducer);
export default store;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;The above example can scale well for large-scale projects. If you worried about the import rules, check out the &lt;a href="https://www.npmjs.com/package/dependency-cruiser"&gt;Dependency cruiser&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Do share with us your way of creating a modular and scalable redux structure.&lt;br&gt;
If you're confused about anything related to this topic or have any questions. please comment below or reach out to me on Twitter &lt;a href="https://twitter.com/code_ashish"&gt;@code_ashish&lt;/a&gt;. 🙂&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks For Reading 😃
&lt;/h3&gt;

</description>
      <category>redux</category>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Gerenciando versões com SDKMAN!</title>
      <author>Gabriel Ronei</author>
      <pubDate>Mon, 10 May 2021 17:29:30 +0000</pubDate>
      <link>https://dev.to/gabrielronei/gerenciando-versoes-com-sdkman-ne9</link>
      <guid>https://dev.to/gabrielronei/gerenciando-versoes-com-sdkman-ne9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l7V-_tqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx39p5tp6i6dwjbka5p1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l7V-_tqN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx39p5tp6i6dwjbka5p1.jpg" alt="alongtimeago"&gt;&lt;/a&gt;&lt;br&gt;
 Bom, quando comecei a programar, amigos me contaram sobre a existência de uma ferramenta que podia me auxiliar ao instalar as versões do Java. Porém, como eu tinha acabado de começar, fiquei confuso sobre como essa ferramenta funcionava exatamente, então deixei para um futuro.&lt;/p&gt;

&lt;p&gt;Anos se passaram, até que em um belo dia, sentei para trabalhar e, como de costume, fui olhar os Pull Requests para revisar os códigos da equipe. Me deparei com um PR que atualizava a versão do Java em nosso projeto. Nesse momento varias coisas vieram na minha cabeça:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Puts, isso vai dar um trabalho, atualizar Path, configurar IDE...&lt;/li&gt;
&lt;li&gt;Onde será que tem essa versão? De qual distribuidora eu baixo?&lt;/li&gt;
&lt;li&gt;Será que é tranquilo instalar ou requer muito esforço?&lt;/li&gt;
&lt;li&gt;E se eu definir como &lt;em&gt;default&lt;/em&gt; e quebrar meus outros projetos?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;... e um pensamento veio mais forte ainda: e agora quem poderá me defender?&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#eu-o-sdkman"&gt;
  &lt;/a&gt;
  Eu, o SDKMAN!
&lt;/h2&gt;

&lt;p&gt;Software Development Kit Manager (algo como, Gerente de Kit de Desenvolvimento de Software) é uma ferramenta que gerencia as versões paralelas de vários SDKs, tambem chamados de "candidates" (candidatos). O nome mais conhecido é &lt;strong&gt;SDKMAN!&lt;/strong&gt;, assim mesmo, com exclamação no final.&lt;/p&gt;

&lt;p&gt;O &lt;em&gt;SDKMAN!&lt;/em&gt; nos auxilia para tratar de nossas configurações como se fossem um "detalhe", algo simples, algo que não deveríamos dedicar muito esforço. Afinal, devemos deixar a árdua labuta para nossas práticas de código.&lt;/p&gt;

&lt;p&gt;Fornecendo uma interface via linha de comando (CLI) que nos ajuda a instalar, listar, alternar e remover esses candidatos. &lt;/p&gt;

&lt;p&gt;Além disso, podemos destacar alguns pontos positivos, como:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;By Developers, for Developers: o &lt;em&gt;SDKMAN!&lt;/em&gt; se encarrega de definir as variáveis de ambiente para nós&lt;/li&gt;
&lt;li&gt;Java all the way down: Podemos instalar vários candidatos para JVM, assim como Java, Groovy, Scala, Kotlin, Maven, Gradle e etc...&lt;/li&gt;
&lt;li&gt;Lightweight: Super leve, escrito em Bash (e funciona com zsh também). Só precisa de cURL e zip/unzip instalados.&lt;/li&gt;
&lt;li&gt;Multi-platform: Roda em sistemas UNIX, como Mac OSX, Linux, e etc.&lt;/li&gt;
&lt;li&gt;APIs e Open-Source: Novos clientes podem ser facilmente escritos consumindo a API deles e é um projeto open source.&lt;/li&gt;
&lt;li&gt;Podemos adicionar também nossa própria versão para ser gerenciada pelo &lt;em&gt;SDKMAN!&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#como-instalar"&gt;
  &lt;/a&gt;
  Como instalar?
&lt;/h2&gt;

&lt;p&gt;Vamos seguir nas versões UNIX like, pois são as que eu tenho mais intimidade.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Eu não utilizo o Windows como meu sistema operacional padrão, mas em sua &lt;a href="https://sdkman.io/install"&gt;própria documentação&lt;/a&gt;, diz que hoje tem algumas formas disponíveis para instalar. Caso alguém tenha alguma dúvida, pode mandar que tento ajudar de alguma forma.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Primeiro vamos abrir o terminal e rodar o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; &lt;span class="s2"&gt;"https://get.sdkman.io"&lt;/span&gt; | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;E pronto, o &lt;em&gt;SDKMAN!&lt;/em&gt; está instalado. Temos duas opções:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Podemos apenas reiniciar o terminal.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rodar o comando &lt;code&gt;source&lt;/code&gt; para adicionar ao nosso arquivo de configuração:&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;/.sdkman/bin/sdkman-init.sh"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Feito isso, podemos rodar o comando &lt;code&gt;sdk version&lt;/code&gt; e ver que o &lt;em&gt;SDKMAN!&lt;/em&gt; foi devidamente instalado.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mas-e-agora-como-utilizar"&gt;
  &lt;/a&gt;
  Mas e agora? Como utilizar?
&lt;/h2&gt;

&lt;p&gt;Se instalar foi fácil, utilizar é mais ainda! Vamos ver os candidatos disponíveis com o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk list
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apareceram vários né? Vamos pensar no nosso problema inicial que era atualizar a versão do Java para fazer o review do código, então podemos adicionar ao comando &lt;code&gt;list&lt;/code&gt; o candidato que queremos:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk list java
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;O resultado será algo parecido com:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;================================================================================
Available Java Versions
================================================================================
 Vendor        | Use | Version      | Dist    | Status     | Identifier
--------------------------------------------------------------------------------
 AdoptOpenJDK  |     | 16.0.1.j9    | adpt    |            | 16.0.1.j9-adpt      
               |     | 16.0.1.hs    | adpt    |            | 16.0.1.hs-adpt     
...
 Alibaba       |     | 11.0.9.4     | albba   |            | 11.0.9.4-albba      
               |     | 8.5.5        | albba   |            | 8.5.5-albba         
 Amazon        |     | 16.0.1.9.1   | amzn    |            | 16.0.1.9.1-amzn     
               |     | 16.0.0.36.1  | amzn    |            | 16.0.0.36.1-amzn
...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Olha que legal! O &lt;em&gt;SDKMAN!&lt;/em&gt; trouxe de uma forma um pouco diferente, né? Apareceram as versões disponíveis do Java. Vamos entender um pouco sobre cada coluna:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Vendor: mais conhecido como o fornecedor daquela versão.&lt;/li&gt;
&lt;li&gt;Use: flag para dizer qual é a versão que estamos utilizando atualmente.&lt;/li&gt;
&lt;li&gt;Version: qual versão do Java do candidatos.&lt;/li&gt;
&lt;li&gt;Dist: distribuição, um slug para o fornecedor.&lt;/li&gt;
&lt;li&gt;Status: mostra quais versões temos instaladas.&lt;/li&gt;
&lt;li&gt;Identifier: um ID, é unico e é utilizado para instalar ou remover uma versão.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora que temos uma ideia do que é cada coluna, para instalar nos precisamos passar ao &lt;code&gt;sdk&lt;/code&gt; a identificação da versão que queremos instalar. No nosso caso vai ser a &lt;code&gt;16.0.1.9.1-amzn&lt;/code&gt;. Então, rodamos o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk &lt;span class="nb"&gt;install &lt;/span&gt;java 16.0.1.9.1-amzn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Durante essa instalação, seremos perguntados se queremos definir como a versão &lt;em&gt;default&lt;/em&gt; do Java. Pode confirmar!&lt;/p&gt;

&lt;p&gt;E está lá, rodando o comando &lt;code&gt;java --version&lt;/code&gt; e o &lt;code&gt;javac --version&lt;/code&gt; vemos que a versão é a 16 que acabamos de instalar! Fácil, né?&lt;/p&gt;

&lt;p&gt;Agora só falta configurarmos em nossas IDEs. Pode ser na de sua preferência. Aqui, irei mostrar tanto no IntelliJ quanto no Eclipse, que são as que tenho maior intimidade.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intellij"&gt;
  &lt;/a&gt;
  IntelliJ
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abra o IntelliJ e vá em &lt;em&gt;File &amp;gt; Project Structure&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Na parte de &lt;em&gt;Project SDK&lt;/em&gt; clique em &lt;em&gt;Edit&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Clique no &lt;em&gt;+&lt;/em&gt; (add new sdk) e passe o caminho do SDK para que aponte para a &lt;em&gt;current&lt;/em&gt;, que sempre irá a versão configurada no &lt;em&gt;SDKMAN!&lt;/em&gt;. No meu caso é algo como: &lt;code&gt;/home/gabriel/.sdkman/candidates/java/current%&lt;/code&gt;. Se você quiser, pode apontar para algum dos candidatos que você baixou pelo &lt;em&gt;SDKMAN!&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Após adicionado, volte em &lt;em&gt;Project Structure&lt;/em&gt; e em SDKs selecione a versão que você acabou de criar.&lt;/li&gt;
&lt;li&gt;No menu &lt;em&gt;Run&lt;/em&gt;, vá em &lt;em&gt;Edit configurations&lt;/em&gt;, para editar as configurações de execução do projeto.&lt;/li&gt;
&lt;li&gt;Expanda &lt;em&gt;Environment&lt;/em&gt; e, em &lt;em&gt;JRE&lt;/em&gt;, selecione a versão &lt;em&gt;current&lt;/em&gt; do Java que você instalada pelo &lt;em&gt;SDKMAN!&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#eclipse"&gt;
  &lt;/a&gt;
  Eclipse
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Abra o Eclipse e vá em &lt;em&gt;Project &amp;gt; Properties&lt;/em&gt; e entre na aba &lt;em&gt;Libraries&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Clique em &lt;em&gt;Modulepath &amp;gt; Add Library&lt;/em&gt; e selecione &lt;em&gt;JRE System Library&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Apos clicar em &lt;em&gt;Next&lt;/em&gt;, selecione &lt;em&gt;Workspace default JRE (X.x.x.x.x-slug)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Pra confirmar se tudo está correto, ao lado do icone de &lt;em&gt;Run&lt;/em&gt;, clique na setinha para baixo e entre em &lt;em&gt;Run Configurations&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Clique na aba &lt;em&gt;JRE&lt;/em&gt;, e veja se está marcado &lt;em&gt;Project JRE&lt;/em&gt;. Pronto!&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#comandos-extras"&gt;
  &lt;/a&gt;
  Comandos extras:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Alternar&lt;/strong&gt; entre as versões que você tem instalada em sua máquina, é super simples!&lt;/p&gt;

&lt;p&gt;Para usar uma versão (temporariamente):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk use java 15.0.2.7.1-amzn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Quando você abrir um outro terminal, a versão será a default.&lt;/p&gt;

&lt;p&gt;Para definir como default (permanentemente):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk default java 15.0.2.7.1-amzn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para ver qual é a &lt;strong&gt;versão atual&lt;/strong&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk current java
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Para &lt;strong&gt;desinstalar&lt;/strong&gt; uma versão:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk uninstall java 16.0.1.9.1-amzn
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ao usar o &lt;em&gt;SDKMAN!&lt;/em&gt;, as versões são baixadas para sua máquina. Para &lt;strong&gt;atualizar as versões dos candidatos&lt;/strong&gt;, rode o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;sdk update
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#como-desinstalar"&gt;
  &lt;/a&gt;
  Como desinstalar:
&lt;/h2&gt;

&lt;p&gt;Caso não tenha acostumado, teve algum problema ou algo relacionado, é fácil desintalar o &lt;em&gt;SDKMAN!&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Podemos usar o comando:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt; &lt;span class="nb"&gt;rm&lt;/span&gt; &lt;span class="nt"&gt;-rf&lt;/span&gt; ~/.sdkman
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora é onde está o pulo do gato! Temos que abrir algum dos arquivos de inicialização, como o &lt;code&gt;.bashrc&lt;/code&gt;, &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.profile&lt;/code&gt; e/ou &lt;code&gt;.zshrc&lt;/code&gt; em um editor de textos.&lt;/p&gt;

&lt;p&gt;No fim do arquivo você deve encontrar o bloco a seguir:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!

[[ -s "/home/dudette/.sdkman/bin/sdkman-init.sh" ]] &amp;amp;&amp;amp; source "/home/dudette/.

sdkman/bin/sdkman-init.sh"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Apague este bloco por completo e salve. Prontinho! O &lt;em&gt;SDKMAN!&lt;/em&gt; está completamente deletado de sua máquina!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#refer%C3%AAncias"&gt;
  &lt;/a&gt;
  Referências:
&lt;/h2&gt;

&lt;p&gt;A documentação do &lt;em&gt;SDKMAN!&lt;/em&gt; é bem completinha, você pode ver em: &lt;a href="https://sdkman.io/"&gt;https://sdkman.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Diferença entre as distribuições das JDKs: &lt;a href="https://sdkman.io/jdks"&gt;https://sdkman.io/jdks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pronto, agora você pode fazer a mesma coisa para tudo que o &lt;em&gt;SDKMAN!&lt;/em&gt; oferece suporte :)&lt;/p&gt;

</description>
      <category>java</category>
      <category>ubuntu</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Part 3: Get started with the Go Programming Language with Microsoft Learn! (no experience needed) </title>
      <author>Michael Crump</author>
      <pubDate>Mon, 10 May 2021 17:20:57 +0000</pubDate>
      <link>https://dev.to/azure/part-3-get-started-with-the-go-programming-language-with-microsoft-learn-no-experience-needed-2in7</link>
      <guid>https://dev.to/azure/part-3-get-started-with-the-go-programming-language-with-microsoft-learn-no-experience-needed-2in7</guid>
      <description>&lt;p&gt;Hello everyone, &lt;/p&gt;

&lt;p&gt;I'm back again with part 3 of this Go Lang series. I was always wanting to learn more about it but never dedicated the time. Fast-forward to today and I'm learning it live on my Twitch stream using &lt;a href="https://learn.microsoft.com"&gt;Microsoft Learn's&lt;/a&gt; free, online training platform. &lt;/p&gt;

&lt;p&gt;Follow along with the &lt;a href="https://docs.microsoft.com/en-us/learn/modules/go-control-flow/"&gt;MS Learn Module&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this lesson, We cover how to: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Work with simple and compound if statements.&lt;/li&gt;
&lt;li&gt;Learn about switch statements and their features.&lt;/li&gt;
&lt;li&gt;Learn about loop statements and how Go creates them by using the for keyword.&lt;/li&gt;
&lt;li&gt;Learn about essential error-handling functions like defer, panic, and recover.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Video (19 mins)&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/MRavAhhge2w"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Conclusion&lt;/p&gt;

&lt;p&gt;Feel free to checkout my &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch streams&lt;/a&gt; as we learn about security and app development or you can watch the condensed version of all of my streams by subscribing to my &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Stay connected with me on social platforms for daily software development news.&lt;/p&gt;

&lt;p&gt;-&lt;a href="https://twitter.com/intent/follow?screen_name=mbcrump"&gt;Twitter&lt;/a&gt; | &lt;a href="https://twitch.tv/mbcrump"&gt;Twitch&lt;/a&gt; | &lt;a href="https://instagram.com/mbcrump"&gt;Instagram&lt;/a&gt; | &lt;a href="https://youtube.com/mbcrump"&gt;YouTube&lt;/a&gt; | &lt;a href="https://github.com/mbcrump"&gt;GitHub&lt;/a&gt; | &lt;a href="https://www.michaelcrump.net"&gt;Website&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>productivity</category>
      <category>opensource</category>
      <category>go</category>
    </item>
    <item>
      <title>Dialect differences between SQLite and Postgres in Sequelize</title>
      <author>Evan Tahler</author>
      <pubDate>Mon, 10 May 2021 17:14:38 +0000</pubDate>
      <link>https://dev.to/grouparoo/dialect-differences-between-sqlite-and-postgres-in-sequelize-1f83</link>
      <guid>https://dev.to/grouparoo/dialect-differences-between-sqlite-and-postgres-in-sequelize-1f83</guid>
      <description>&lt;p&gt;Like many applications, Grouparoo stores data in a relational database. Unlike most applications, Grouparoo works with 2 different types of databases - Postgres and SQLite. We enable our customers to run Grouparoo in a number of different ways - on their laptop with no external decencies, and as part of a large cluster with many servers processing data in parallel. When running Grouparoo locally, you can use SQLite so no other dependencies are needed, and in the production cluster, you can use a hosted version of Postgres provided by your hosting provider.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXaDTIuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7fr5ludenjd68jikjm9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXaDTIuX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v7fr5ludenjd68jikjm9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Grouparoo uses the &lt;a href="https://sequelize.org/"&gt;Sequelize&lt;/a&gt; Object Relational Mapper, or &lt;code&gt;ORM&lt;/code&gt;, along with &lt;a href="https://github.com/RobinBuschmann/sequelize-typescript"&gt;sequelize-typescript&lt;/a&gt; so we can work with the same Objects in our codebase, regardless of the database providing persistence. Sequelize does a great job of abstracting away the differences between the database types... most of the time. In this blog post, I’ll be sharing the times when the differences in the SQL implementations of Postgres and SQLite matter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#case-insensitive-sting-comparisons"&gt;
  &lt;/a&gt;
  Case Insensitive Sting Comparisons
&lt;/h2&gt;

&lt;p&gt;Postgres supports both the &lt;code&gt;like&lt;/code&gt; and &lt;code&gt;iLike&lt;/code&gt; operators for comparing strings, with the &lt;code&gt;i&lt;/code&gt; indicating case-insensitive matching (&lt;a href="https://www.postgresql.org/docs/12/functions-matching.html"&gt;Postgres Docs&lt;/a&gt;). That means you can choose, per query, if you are ignoring case or not:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Postgres --&lt;/span&gt;
&lt;span class="c1"&gt;-- assuming you have `email = person@example.com` (lowercase) in your `users` table&lt;/span&gt;

&lt;span class="c1"&gt;-- match&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="k"&gt;ILIKE&lt;/span&gt; &lt;span class="s1"&gt;'%@EXAMPLE.COM'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- no match&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%@EXAMPLE.COM'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, in SQLite, all string comparisons are case-insensitive (and there is no &lt;code&gt;iLike&lt;/code&gt; function (&lt;a href="https://sqlite.org/lang_expr.html"&gt;SQLite Docs&lt;/a&gt;). Instead, if you really want your &lt;code&gt;like&lt;/code&gt; function to be made case-sensitive, you would use the &lt;code&gt;case_sensitive_like&lt;/code&gt; PRAGMA (&lt;a href="https://sqlite.org/pragma.html#pragma_case_sensitive_like"&gt;SQLite Docs&lt;/a&gt;)... but that’s a database-wide change that you likely don’t want to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- SQLite --&lt;/span&gt;
&lt;span class="c1"&gt;-- assuming you have `email = person@example.com` (lowercase) in your `users` table&lt;/span&gt;

&lt;span class="c1"&gt;-- match&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%@EXAMPLE.COM'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;-- no match&lt;/span&gt;
&lt;span class="n"&gt;PRAGMA&lt;/span&gt; &lt;span class="n"&gt;case_sensitive_like&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;ON&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt; &lt;span class="k"&gt;LIKE&lt;/span&gt; &lt;span class="s1"&gt;'%@EXAMPLE.COM'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the Grouparoo application, this distinction shows up in a number of places, with the most interesting being that we need to provide different rules that can be used to calculate Group membership. If you visit &lt;a href="https://dev.to/docs/config/groups/community"&gt;the groups config page&lt;/a&gt; and check out the options for string or email comparisons between Postgres and SQLite, you’ll see the difference.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#date-and-time-part-functions"&gt;
  &lt;/a&gt;
  Date and Time Part Functions
&lt;/h2&gt;

&lt;p&gt;Postgres ships with a number of handy date and time functions with a consistent API, like &lt;code&gt;date_trunc&lt;/code&gt;. (&lt;a href="https://www.postgresql.org/docs/9.1/functions-datetime.html"&gt;Postgres Docs&lt;/a&gt;) SQLite instead chose to rely on the C-like &lt;code&gt;strftime&lt;/code&gt; function (&lt;a href="https://sqlite.org/lang_datefunc.html"&gt;SQLite Docs&lt;/a&gt;). Both are popular ways to deal with time, but very different ways of approaches.&lt;/p&gt;

&lt;p&gt;For example, if we want to count up how many events occurred per hour:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="c1"&gt;-- Postgres ---&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date_trunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'hour'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"occurredAt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;-- SQLite ---&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%Y-%m-%d %H:00:00'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;"occurredAt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While not necessarily a user-facing problem, there are quite a few places in the Grouparoo codebase were we calculate rollups like these, and need to make different queries depending on the database in use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#min-and-max-typecasting"&gt;
  &lt;/a&gt;
  Min and Max typecasting
&lt;/h2&gt;

&lt;p&gt;Sequelize helps you to write rather complex queries in a database-agnostic way. Consider the following query that asks for all the types of events that exist, and returns the count, first occurrence and most recent occurrence. e.g.: we might learn that there have been 100 &lt;code&gt;pageview&lt;/code&gt; events, with the first one on Jan 1 and the most recent one today. This Sequelize query works for both Postgres and SQLite!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;COUNT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MIN&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;occurredAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;min&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;MAX&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;col&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;occurredAt&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;max&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;group&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="na"&gt;order&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sequelize&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;literal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;desc&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, the resulting objects differ slightly &lt;code&gt;types[0].min&lt;/code&gt; will be a JS &lt;code&gt;Date&lt;/code&gt; object from Postgres and a &lt;code&gt;string&lt;/code&gt; from SQLite. They will need to be converted to the same type in your application code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#boolean-column-typecasting"&gt;
  &lt;/a&gt;
  Boolean Column typecasting
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.sqlite.org/datatype3.html"&gt;SQLite does not have Boolean columns&lt;/a&gt;, and uses integers instead. When using an ORM that supports the boolean type, &lt;em&gt;most&lt;/em&gt; of the time it knows to covert the database’s &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;, but when accessing properties directly it may not. This appears regularly with Sequelize’s &lt;code&gt;instance.getDataValue()&lt;/code&gt; method. Conversely, Postgres boolean values are always properly cast.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#transaction-limits"&gt;
  &lt;/a&gt;
  Transaction Limits
&lt;/h2&gt;

&lt;p&gt;SQLite can only handle one transaction at a time. This makes sense, as it’s quite literally reading and writing a file on disk. Postgres, on the other hand, can handle many transactions at once and does a great job of merging the results and avoiding deadlocks. If you using Node.JS like Grouparoo is, even a single process can generate many transactions - you might be processing many API requests in parallel, or in the case of Grouparoo, running many background tasks at once.&lt;/p&gt;

&lt;p&gt;To help avoid SQLite deadlocks (which look like &lt;code&gt;SequelizeTimeoutError: SQLITE_BUSY: database is locked&lt;/code&gt;), we limit the number of workers we run against a SQLite database to 1.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#compound-indexes-with-unique-columns"&gt;
  &lt;/a&gt;
  Compound Indexes with Unique Columns
&lt;/h2&gt;

&lt;p&gt;Sequelize has a &lt;a href="https://github.com/sequelize/sequelize/issues/12823"&gt;bug&lt;/a&gt; in which a migration against a table that has an index against 2 columns will make those columns unique, even if they wen’t before the migration. To mitigate this, we do not use compound indexes in the Grouparoo application.&lt;/p&gt;




&lt;p&gt;While this list may seem long, the vast majority of the Grouparoo codebase works exactly the same regardless of if you are backing the application with SQLite or Postgres. The Sequelize team did a great job abstracting most of the dialect nuances away.&lt;/p&gt;

</description>
      <category>node</category>
      <category>postgres</category>
      <category>sql</category>
    </item>
    <item>
      <title>Components are Pure Overhead</title>
      <author>Ryan Carniato</author>
      <pubDate>Mon, 10 May 2021 17:13:15 +0000</pubDate>
      <link>https://dev.to/this-is-learning/components-are-pure-overhead-hpm</link>
      <guid>https://dev.to/this-is-learning/components-are-pure-overhead-hpm</guid>
      <description>&lt;p&gt;A couple of years ago in the &lt;a href="https://betterprogramming.pub/the-real-cost-of-ui-components-6d2da4aba205"&gt;The Real Cost of UI Components&lt;/a&gt;, I explored the cost of components in JavaScript frameworks. I asked whether components were just overhead?&lt;/p&gt;

&lt;p&gt;And the answer was: it depends. The Virtual DOM library I tested, &lt;a href="https://github.com/localvoid/ivi"&gt;ivi&lt;/a&gt;, had no issues handling more components. But &lt;a href="https://lit.dev/"&gt;Lit&lt;/a&gt; and &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; were dramatically worse. They scaled back to almost &lt;a href="https://reactjs.org"&gt;React&lt;/a&gt; levels of performance as I broke them down to more components. All their non-VDOM performance benefits basically disappeared.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lsPYl5fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tse1znblcj62smmhyroe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lsPYl5fs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tse1znblcj62smmhyroe.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The versions scale from "0" having the least number of components, through "1" which has a component per row, to "2" where each &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; is wrapped in a component.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Luckily for both of those frameworks, almost all benchmarks can be written as a single component.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But when was the last time you wrote an app in a single component?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In their defense, 50,000 components on a page is a bit much. But this still illuminates an inevitable shortcoming we need to overcome. 2 years later I still stand by the conclusion.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;So I’m going to make a bold statement here for the Non-Virtual DOM crowd. I think Components should vanish in the same way as Frameworks. If the new world is compilers, we can do better. We can optimize along bundle chunk lines instead of ES modules. If Components are throw away think about how much overhead we could reduce by inlining them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But I've come to realize there is much more to this than performance.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#your-framework-is-pure-overhead"&gt;
  &lt;/a&gt;
  Your Framework is Pure Overhead
&lt;/h1&gt;

&lt;p&gt;This is not an appeal to the Vanilla JavaScript purists that lurk in the comments section on every site. Instead this an honest look at JavaScript frameworks from someone that builds them.&lt;/p&gt;

&lt;p&gt;When one says the &lt;a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead"&gt;Virtual DOM is pure overhead&lt;/a&gt; they are often referring to unnecessary object creation and diffing. And Rich Harris, creator of Svelte, covers this topic well.&lt;/p&gt;

&lt;p&gt;Of course, as shown above, there are Virtual DOM libraries faster than Svelte, so what gives?&lt;/p&gt;

&lt;p&gt;Consider this example from the article:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;MoreRealisticComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setSelected&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Selected&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;selected&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nothing&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/p&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="nx"&gt;onClick&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setSelected&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
              &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;          &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;        &lt;span class="p"&gt;)}&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The criticism is that on any state update a VDOM is forced to re-render everything. Only change your selection, but you still recreate the whole list again. However, most performant VDOM libraries can recognize that most of these VDOM nodes never change and cache them rather than recreate them each render.&lt;/p&gt;

&lt;p&gt;But more importantly, there is a solution to isolate updates that every React developer knows. No, it's not &lt;code&gt;useMemo&lt;/code&gt;. Create a child component.&lt;/p&gt;

&lt;p&gt;For the cost of almost nothing, a VDOM library can stop update propagation by wrapping this logic in a different component. A simple referential check of properties will tell it when to re-render. Unsurprisingly the VDOM can be pretty performant.&lt;/p&gt;

&lt;p&gt;Speaking of &lt;code&gt;useMemo&lt;/code&gt; some recent attention brought to the fact that &lt;a href="https://overreacted.io/before-you-memo/"&gt;it probably shouldn't the be the first thing you reach for&lt;/a&gt;. However, reactive libraries tend to memoize by default.&lt;/p&gt;

&lt;p&gt;In React or any other VDOM library when you want to break out of the update cycle structurally, you split out components and lift state. To improve initial render performance with a library like Svelte, you do the opposite and remove as many intermediate components as possible. &lt;/p&gt;

&lt;p&gt;Why? Because each component is a separate reactive scope. Often this means more than just creating the reactive scope. There is overhead to synchronizing updates between them. This is all corroborated by the benchmark at the beginning of the article.&lt;/p&gt;

&lt;p&gt;While we were busy focusing on how VDOM libraries do all this potentially unnecessary work, we weren't paying attention to our reactive libraries doing all this unnecessary memoization. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;So yes, your Reactive library is pure overhead too.&lt;/em&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#component-dx-gt-performance"&gt;
  &lt;/a&gt;
  Component DX &amp;gt; Performance
&lt;/h1&gt;

&lt;p&gt;When I look at both approaches I see the same problem. The way we structure Components has too much say in how our applications perform. This is a problem.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A component's purpose is more than just performance. The way our components are structured directly impacts the maintainability of our code.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When you have too few components you end up duplicating logic. The typical component has state and a view. The more complicated the control flow you have and the more nested state is, the more you will find the need to duplicate that logic in both. When a new requirement arises, as simple as say toggling visibility, you find yourself creating that same conditional in multiple places.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;headerText&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useRef&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;release&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;headerText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/h1&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;      &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;}
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;How many different places are we doing additional checks due to &lt;code&gt;props.enabled&lt;/code&gt;? Can you find all 4? This isn't React specific. Equivalent code in Svelte(and most frameworks) touches 3 locations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conversely breaking things up into too many components leads to heavy coupling. Too many props to pass. This is often referred to as &lt;a href="https://kentcdodds.com/blog/prop-drilling"&gt;prop drilling&lt;/a&gt;. The indirection can make changing the shape of that state surprisingly complicated. There is potential to continue to pass down props no longer used, to pass down too few that get swallowed by default props, and for tracing to be further obscured by renaming.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Toggle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setOn&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toggle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setOn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Switch&lt;/span&gt; &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;toggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Switch&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SwitchMessage&lt;/span&gt; &lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;SwitchButton&lt;/span&gt; &lt;span class="na"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SwitchMessage&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;The button is &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;on&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;off&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;SwitchButton&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;onToggle&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Toggle&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#vanishing-components"&gt;
  &lt;/a&gt;
  Vanishing Components
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KXkKPfuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpb41pm3auokrqf8fdq0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KXkKPfuJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jpb41pm3auokrqf8fdq0.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The future is in primitives. Primitives that are smaller than Components. Things like you find today in reactive systems. Things that might look like what you see in React Hooks and Svelte. With one exception. They are not tied to the component that creates them.&lt;/p&gt;

&lt;p&gt;The power of fine-grained reactivity and the reason for &lt;a href="https://github.com/solidui/solid"&gt;Solid&lt;/a&gt;'s unmatched performance are not fine-grained updates.  Too expensive at creation time. The real potential is that our updates are not tied to our components. And that goes beyond one implementation of the idea.&lt;/p&gt;

&lt;p&gt;Between reactive models and these hooks, we have converged a language for change: &lt;/p&gt;

&lt;p&gt;&lt;code&gt;State&lt;/code&gt; -&amp;gt; &lt;code&gt;Memo&lt;/code&gt; -&amp;gt; &lt;code&gt;Effect&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or, if you prefer, &lt;code&gt;Signal&lt;/code&gt; -&amp;gt; &lt;code&gt;Derivation&lt;/code&gt; -&amp;gt; &lt;code&gt;Reaction&lt;/code&gt;. We don't need components anymore to describe our updates. This is the mismatch React developers intuitively feel with Hooks. Why do we need to keep track of both our components re-rendering and the closures over our Hooks?&lt;/p&gt;

&lt;p&gt;And typical Single File Components(SFCs) are just the opposite extreme where we are still imposing (unnecessary) boundaries by technology. Ever wonder why there is friction between JavaScript frameworks and Web Components? Too much conflated on a single concept.&lt;/p&gt;

&lt;p&gt;Every time we write a component there is this mental overhead on how we should structure our code. The choice doesn't feel our own. But it doesn't have to be that way.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-future-is-componentless"&gt;
  &lt;/a&gt;
  The Future is Component-less
&lt;/h1&gt;

&lt;p&gt;Not that we won't write re-usable components or templates. Just components will vanish, removing their impact on the output. That doesn't require a compiler to start. We can move to make components no heavier than a simple function call. That is essentially &lt;a href="https://github.com/solidui/solid"&gt;Solid&lt;/a&gt;, but that is only one way to attack this.&lt;/p&gt;

&lt;p&gt;We don't need separation to accomplish this either. It is unnecessary to hoist all our state into a state management tool playing puppeteer to our renderer. I'm proposing aggressive co-location. Modern frameworks have that right. Whether JSX or SFC we've been pulling it together and should continue to.&lt;/p&gt;

&lt;p&gt;Ultimately, if a compiler could look beyond the current file it was processing to use language to understand your whole app, think of the doors that would open. Our logic and control flows could solely define the boundaries. That's not just unlocking levels of performance, but freeing ourselves of the mental burden of ever worrying about this again.&lt;/p&gt;

&lt;p&gt;Wouldn't it be amazing to recapture the pure declarative nature of something like HTML in authoring our sites and applications? The unadulterated cut and paste bliss? I'm not certain where this goes, but it starts here.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>svelte</category>
    </item>
    <item>
      <title>Using CLion with php-src</title>
      <author>Ben Ramsey</author>
      <pubDate>Mon, 10 May 2021 17:08:02 +0000</pubDate>
      <link>https://dev.to/ramsey/using-clion-with-php-src-4me0</link>
      <guid>https://dev.to/ramsey/using-clion-with-php-src-4me0</guid>
      <description>&lt;p&gt;I’ve cloned and built &lt;a href="https://github.com/php/php-src"&gt;php-src&lt;/a&gt; numerous times over the years, on a variety of platforms, but I’ve never worked with it in an IDE. A long-time &lt;a href="https://www.vim.org"&gt;Vim&lt;/a&gt; user, I’ve only begun using &lt;a href="https://www.jetbrains.com/phpstorm/"&gt;PhpStorm&lt;/a&gt; over the last year and a half, after seeing how &lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ&lt;/a&gt; helped me easily navigate an open source Java project. So, in setting up php-src for &lt;a href="https://dev.to/ramsey/i-m-a-release-manager-for-php-8-1-24i2"&gt;release management&lt;/a&gt; tasks, I wanted to give &lt;a href="https://www.jetbrains.com/clion/"&gt;CLion&lt;/a&gt; a try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-phpsrc-ready-for-clion"&gt;
  &lt;/a&gt;
  Getting php-src ready for CLion
&lt;/h2&gt;

&lt;p&gt;When opening existing source code or cloning a repo with CLion, it assumes the project already supports &lt;a href="https://cmake.org"&gt;CMake&lt;/a&gt; tooling for builds. For someone new to C and using a project that doesn’t use CMake, this can be confusing and frustrating. Since php-src isn’t a CMake project, CLion will display warnings at the top of every open file, saying that a “CMake project is not loaded,” giving you the option to select or generate a &lt;code&gt;CMakeLists.txt&lt;/code&gt; file. You can try to do this for php-src, but there’s a better way.&lt;/p&gt;

&lt;p&gt;CLion also supports &lt;a href="https://www.jetbrains.com/help/clion/compilation-database.html"&gt;JSON compilation databases&lt;/a&gt;. To generate one and have CLion recognize php-src as a &lt;a href="https://www.jetbrains.com/help/clion/compilation-database.html"&gt;compilation database project&lt;/a&gt;, you’ll need to do the following &lt;em&gt;before&lt;/em&gt; opening php-src in CLion. If you’ve already opened it in CLion, that’s okay. Delete the &lt;code&gt;.idea/&lt;/code&gt; folder that CLion creates, and then do the following. (I could not figure out a way to make CLion recognize the compilation database if I had already opened the project in CLion. It seems the compilation database must exist the first time you open the project in order for CLion to recognize it.)&lt;/p&gt;

&lt;p&gt;You’ll need the &lt;code&gt;compiledb&lt;/code&gt; Python tool to generate the compilation database. It wraps the &lt;code&gt;make&lt;/code&gt; command, so when you run it with &lt;code&gt;make&lt;/code&gt;, it captures all the sources and creates a &lt;code&gt;compile_commands.json&lt;/code&gt; file. Then, when you open the project in CLion for the first time, it will recognize your project as a compilation database project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;compiledb

git clone https://github.com/php/php-src.git ~/repos/php/php-src
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/repos/php/php-src
./buildconf
./configure &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/builds/php/8.1.0-dev &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--disable-all&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--disable-cgi&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--enable-debug&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nt"&gt;--enable-zts&lt;/span&gt;

compiledb make
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, I use &lt;code&gt;compiledb&lt;/code&gt; to call &lt;code&gt;make&lt;/code&gt;. In this way, &lt;code&gt;compiledb&lt;/code&gt; can learn about all the sources for your build.&lt;/p&gt;

&lt;p&gt;You may also pass &lt;code&gt;-jN&lt;/code&gt; to &lt;code&gt;make&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the number of CPU cores your system has available. This will greatly speed up compilation.&lt;/p&gt;

&lt;p&gt;You can run &lt;code&gt;nproc&lt;/code&gt; to find out how many cores you have.  On my system, I have 12 cores, so I run the command like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;compiledb make &lt;span class="nt"&gt;-j12&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my example, I pass &lt;code&gt;--prefix&lt;/code&gt; to &lt;code&gt;configure&lt;/code&gt;, but this isn’t necessary since I’m not going to run &lt;code&gt;make install&lt;/code&gt;. Once &lt;code&gt;make&lt;/code&gt; has finished building PHP, you can find the newly-built PHP CLI at &lt;code&gt;sapi/cli/php&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./sapi/cli/php &lt;span class="nt"&gt;-v&lt;/span&gt;
&lt;span class="go"&gt;PHP 8.1.0-dev (cli) (built: May  6 2021 18:27:37) (ZTS DEBUG)
Copyright (c) The PHP Group
Zend Engine v4.1.0-dev, Copyright (c) Zend Technologies

&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;./sapi/cli/php &lt;span class="nt"&gt;-m&lt;/span&gt;
&lt;span class="go"&gt;[PHP Modules]
Core
date
hash
json
pcre
Reflection
SPL
standard

[Zend Modules]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-clion-to-build-and-run-php"&gt;
  &lt;/a&gt;
  Setting up CLion to build and run PHP
&lt;/h2&gt;

&lt;p&gt;Now that php-src has a compilation database (which needs to be updated each time you change your build with &lt;code&gt;configure&lt;/code&gt; or if you add new sources that get included in &lt;code&gt;make&lt;/code&gt;), you can open it in CLion.&lt;/p&gt;

&lt;p&gt;Launch CLion to get to the welcome screen and choose to open a project from existing sources.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EFVhR5W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453rmnfowe292buy9ys4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EFVhR5W0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/453rmnfowe292buy9ys4.png" alt="CLion welcome screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Browse to your php-src folder and, rather than selecting the folder to open, select the &lt;code&gt;compile_commands.json&lt;/code&gt; file that  &lt;code&gt;compiledb&lt;/code&gt; generated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DsZ1_OTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc3pflycdgmxdllyhryp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DsZ1_OTb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pc3pflycdgmxdllyhryp.png" alt="File selection dialog highlighting compile_commands.json"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When CLion prompts you, choose to open it as a project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hK1w5rC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qt7hutpz8ncm1ihc1ou.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hK1w5rC9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1qt7hutpz8ncm1ihc1ou.png" alt='"Open as Project" dialog'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CLion will now open the project and inform you that it successfully imported the compilation database project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VSZn7Qbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmbg70s83uq8weqcemv5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VSZn7Qbx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmbg70s83uq8weqcemv5.png" alt="Compilation database project successfully imported"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With CLion open, you’ll now &lt;a href="https://www.jetbrains.com/help/clion/custom-build-targets.html"&gt;create custom build targets&lt;/a&gt; for &lt;code&gt;make&lt;/code&gt; and &lt;code&gt;make clean&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open CLion Preferences and go to &lt;em&gt;Build, Execution, Deployment&lt;/em&gt; -&amp;gt; &lt;em&gt;Custom Build Targets&lt;/em&gt;. Create a new build target, named something like “Build PHP.” Then, next to the empty Build and Clean fields, click the &lt;em&gt;more&lt;/em&gt; button (with three dots). This will open an External Tools window. Use the +-button here to create two external tools.&lt;/p&gt;

&lt;p&gt;I named the first one “Build with Make.” The program is &lt;code&gt;make&lt;/code&gt; and I added &lt;code&gt;-j12&lt;/code&gt; to the arguments for a faster build (see earlier). You might also consider using &lt;code&gt;compiledb&lt;/code&gt; as the program, with &lt;code&gt;make -j12&lt;/code&gt; as the arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Jtr89B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dl485qaqihjzbm256urx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N2Jtr89B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dl485qaqihjzbm256urx.png" alt='"Build with Make" external tool'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I named the second tool “Clean with Make” and used &lt;code&gt;make&lt;/code&gt; as the program and &lt;code&gt;clean&lt;/code&gt; as the argument.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cvk9FQPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niwv1ckzq8kd24zg5f1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cvk9FQPE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/niwv1ckzq8kd24zg5f1f.png" alt='"Clean with Make" external tool'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, you can click OK to close these windows and the External Tools window, and select the proper tools to use with your Build PHP target.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zr11wxeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1pyy581zuvguvw82jik.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zr11wxeR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r1pyy581zuvguvw82jik.png" alt='"Build PHP" build target with external tools selected'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you’ll want to &lt;a href="https://www.jetbrains.com/help/clion/custom-build-targets.html#custom-rundebug"&gt;create a custom run/debug configuration&lt;/a&gt;.  To do this, go to &lt;em&gt;Run&lt;/em&gt; -&amp;gt; &lt;em&gt;Edit Configurations…&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Use the +-button to create a new configuration and choose &lt;strong&gt;Custom Build Application&lt;/strong&gt; from the menu that appears. I named my configuration “Build PHP” and I chose my “Build PHP” target (created earlier) from the Target dropdown list. For the executable, I entered the path to the PHP CLI built by this project (remember, it’s at &lt;code&gt;sapi/cli/php&lt;/code&gt;). Last, I checked “Redirect input from” and entered the JetBrains variable &lt;code&gt;$FilePrompt$&lt;/code&gt;. In this way, whenever you chose to run PHP from within CLion, it will prompt you with a file dialog to execute through the PHP interpreter. This lets you select a PHP script to run and test/debug whatever feature you’re working on.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jqi57NJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xii747wxpxgsznbkebtx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jqi57NJc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xii747wxpxgsznbkebtx.png" alt='"Build PHP" run/debug configuration'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, click the hammer icon (🔨) or select &lt;em&gt;Build&lt;/em&gt; -&amp;gt; &lt;em&gt;Build Project&lt;/em&gt; to build PHP, or select &lt;em&gt;Build&lt;/em&gt; -&amp;gt; &lt;em&gt;Clean&lt;/em&gt; to run the &lt;code&gt;make clean&lt;/code&gt; command. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cFDBQUCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb32s6ksfbrpxyg9p58q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cFDBQUCO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jb32s6ksfbrpxyg9p58q.png" alt='Output after running "Build with Make"'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you click the play icon (▶️) or choose &lt;em&gt;Run&lt;/em&gt; -&amp;gt; &lt;em&gt;Run ‘Build PHP’&lt;/em&gt;, it will prompt you to select a file and run that file as a PHP script. In the following, I’ve selected one of the &lt;code&gt;.phpt&lt;/code&gt; tests to execute this way.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JgdIM2kQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weji3r4ftbmemrse4x56.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JgdIM2kQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/weji3r4ftbmemrse4x56.png" alt="Using the file selection dialog to select a PHPT file to run"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6f9zCTPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq5shyb2g9tyfw50mik5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6f9zCTPU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq5shyb2g9tyfw50mik5.png" alt="Output after running the PHPT file"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-debugging-through-phpsrc"&gt;
  &lt;/a&gt;
  Step debugging through php-src
&lt;/h2&gt;

&lt;p&gt;One of the primary reasons I wanted to use an IDE to work with php-src is for the debugging tools. With everything set up as described earlier, I’m able to run a PHP script and break on breakpoints in the C source code.&lt;/p&gt;

&lt;p&gt;As an example, I created a PHP script named &lt;code&gt;date-debug.php&lt;/code&gt; and added the following code to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Y-m-d H:i:s'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I opened &lt;code&gt;ext/date/php_date.c&lt;/code&gt; and placed a breakpoint in the &lt;code&gt;php_date()&lt;/code&gt; function. You can see the breakpoint in the following screenshot. I placed it right after the &lt;code&gt;ZEND_PARSE_PARAMETERS&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;When you click the debug icon (🪲) or choose &lt;em&gt;Run&lt;/em&gt; -&amp;gt; &lt;em&gt;Debug ‘Build PHP’&lt;/em&gt;, CLion will prompt you to select a file, just like it does when when you click the play icon, as described earlier. When I choose the &lt;code&gt;date-debug.php&lt;/code&gt; file, it begins executing it and then stops at the breakpoint in the C code, which happens to be the code called when using the PHP &lt;code&gt;date()&lt;/code&gt; function. As you can see, I’m now able to examine the memory and variables in this function, including the &lt;a href="https://www.phpinternalsbook.com/php7/zvals.html"&gt;zvals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2xrQgBAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97o3y6iglzvkdg3pdqwv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2xrQgBAr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/97o3y6iglzvkdg3pdqwv.png" alt="Inspecting variables at a breakpoint in the C source code for PHP"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>php</category>
      <category>clion</category>
      <category>jetbrains</category>
    </item>
    <item>
      <title>365 Days of Blogging Challenge (or I transfer $1000 to your bank account)</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Mon, 10 May 2021 17:02:55 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9</link>
      <guid>https://dev.to/pjeziorowski/365-days-of-blogging-challenge-or-i-transfer-1000-to-your-bank-account-5dj9</guid>
      <description>&lt;p&gt;Everyone sometimes struggles with consistency. Do you want to develop a good habit but often fail after a few days? Well, &lt;strong&gt;you are not alone&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To help myself with that (and possibly you), I come up with the idea of making a &lt;strong&gt;public commitment&lt;/strong&gt; and finding &lt;strong&gt;accountability partners&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#public-commitment"&gt;
  &lt;/a&gt;
  Public commitment
&lt;/h3&gt;

&lt;p&gt;This post is my public commitment to writing and publishing articles daily for the next 365 days. It's well over any magic number you hear that is necessary to form a habit. For my liking, it's fair enough.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#accountability-partners"&gt;
  &lt;/a&gt;
  Accountability partners
&lt;/h3&gt;

&lt;p&gt;To hold myself accountable (and to make you more interested in helping me stay consistent), &lt;strong&gt;I declare that I'll pay $1000 to one of my accountability partners&lt;/strong&gt; (by whom I mean anyone who comments on this post on dev.to) &lt;strong&gt;if I miss a day in publishing articles in the next year&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-rules"&gt;
  &lt;/a&gt;
  The rules
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;One article a day published, no excuses.&lt;/li&gt;
&lt;li&gt;No article published - a script chooses a random person from the comments section to transfer money to their bank account.&lt;/li&gt;
&lt;li&gt;The way of choosing a random person may change with time - I want to make it automated and public, to provide transparency and fairness (and to prove I'm taking it seriously!). Feel free to propose your ideas on how to approach this problem.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#join-me-in-the-challenge"&gt;
  &lt;/a&gt;
  Join me in the challenge
&lt;/h3&gt;

&lt;p&gt;I encourage all of you who want to develop a good habit of putting yourself out there to join the challenge. &lt;/p&gt;

&lt;p&gt;Of course, your numbers may be different. Maybe your goal is to publish just one article a week. Maybe $1000 is too much or too little to make you feel uncomfortable. &lt;/p&gt;

&lt;p&gt;Choose your perfect numbers and join me in the challenge!  If you struggle with this, &lt;a href="https://twitter.com/PJeziorowski"&gt;DM me on Twitter&lt;/a&gt;, and I'll do my best to help you come up with numbers that will work for you.&lt;/p&gt;

&lt;p&gt;And please, let me know what you think about this idea. Feedback highly appreciated!&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>career</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
