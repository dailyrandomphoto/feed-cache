<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>5 Top Business Risks in Offshore Software Outsourcing and How to Avoid Them?</title>
      <author>Best Digital Trendz</author>
      <pubDate>Thu, 06 May 2021 10:20:57 +0000</pubDate>
      <link>https://dev.to/best_digital_trendz/5-top-business-risks-in-offshore-software-outsourcing-and-how-to-avoid-them-1ha0</link>
      <guid>https://dev.to/best_digital_trendz/5-top-business-risks-in-offshore-software-outsourcing-and-how-to-avoid-them-1ha0</guid>
      <description>&lt;p&gt;In the present age, Risk management is creating a vital role in businesses. you can be called that all business depends on the risk. because one wrong step and your business go down in the drain. outsource is a good route that enterprises use to help them scale their businesses. The outsourcing development company offers many advantages to businesses such as cost-cutting and give to IT professionals and build software solutions for business. Before outsourcing your and project and business, you may need to these critical risk factors.&lt;/p&gt;

&lt;p&gt;Risks are an essential part of each business. Before outsourcing your business, We share some critical risk factors for making your decision better.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Communication Gap&lt;/strong&gt;&lt;br&gt;
Communication is the process of exchanges the piece of information and knowledge. In a business organization, Effective communication is of big value and importance for the outsourcing development company in the world. It is most difficult to maintain effective communication in the workplace. There might be several reasons for communication gaps to arise in the workplace like as fear, mistrust, and body language.&lt;/p&gt;

&lt;p&gt;Read Also- &lt;a href="https://bestdigitaltrendz.com/2021/04/23/top-7-technology-trends-to-watch-in-the-covid-19-pandemic/"&gt;Technology Trends to Watch in the COVID-19 pandemic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. NDA Agreement&lt;/strong&gt;&lt;br&gt;
The NDA agreement is terms and conditions that not allow the employee for disclosing company confidential information. It is also called an NDA agreement (Non disclose agreement). Confidential Information" includes all information such as technical data, research, business plans, product implementations, financial information, marketing techniques, pricing policies, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Govt Rule and Regulation Risk&lt;/strong&gt;&lt;br&gt;
Government rules and laws are different among countries about data protection and intellectual property when any two company deals with their project then there is a possibility that government rules and laws collide. There are no. of legal issues that are also on the rise. Before you outsource any project, it is very important that the enterprises made due conscientiousness to research relevant and significant laws concerning intellectual property and data protection. Make sure that your offshore development partner follows with all government law and regulations and provide the accurate transparency.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Hidden Cost Risks&lt;/strong&gt;&lt;br&gt;
Cost-effective is an important role in software development projects. The cost of the Project comprises clear and implicit. Explicit costs include such labor hardware and software tools charges and the spending on the office environment. Explicit costs are accessible to both clients and vendors. The implicit costs include such as project management, telecommunication charges, outsourcing content, and unexpected changes in the project that demand immediately.&lt;br&gt;
At the completion of the project, the actual cost turns much higher than the estimated cost. Therefore, most of the companies are now considering fixed rates for their clients.&lt;/p&gt;

&lt;p&gt;Read Now- &lt;a href="https://bestdigitaltrendz.com/2021/03/15/most-important-reasons-why-choose-magento-for-ecommerce-website-development/"&gt;Most Important Reasons Why Choose Magento&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Security &amp;amp; Data Privacy Risks&lt;/strong&gt;&lt;br&gt;
Security and data privacy risks is very important riks for all company and enterprises working with an offshore software development company. It is very critical when the customers deal with personal data such as their identity, contact address and phone no., email addresses, debit and credit card numbers. because there are full chances that the offshore software development company’s data or IP address may not be secured.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;br&gt;
Many outshore development companies work with different types of operations and services. Before outsourcing any development project, you can read their term and condition rule and then share any project with the company. If you like this blog then you can share your suggestion and feedback in the comment box section.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Free Xpadder Download in 2021</title>
      <author>Dayla Harris</author>
      <pubDate>Thu, 06 May 2021 10:05:13 +0000</pubDate>
      <link>https://dev.to/harris_dayla/free-xpadder-download-in-2021-30k9</link>
      <guid>https://dev.to/harris_dayla/free-xpadder-download-in-2021-30k9</guid>
      <description>&lt;p&gt;Most PC games are suited for keyboard and mouse, but some will be much easier to play with a joystick.&lt;/p&gt;

&lt;p&gt;However, some games don’t support the use of a controller. Even when they do, there are times when Windows won’t recognize the presses you make.&lt;/p&gt;

&lt;p&gt;Xpadder is the answer to all these. Optimize your gameplay with a proper gamepad and great software to go with it.&lt;/p&gt;

&lt;p&gt;It makes your gamepad more compatible with any game. You can even use your pad to perform other tasks. Take a look at our tutorial for &lt;a href="https://www.xpadder.net/"&gt;Xpadder&lt;/a&gt; download for your PC.&lt;/p&gt;

&lt;h2&gt;What is Xpadder?&lt;/h2&gt;

&lt;p&gt;It is an independent gamepad solution that maps your keyboard and mouse presses to your gamepad’s buttons.&lt;/p&gt;

&lt;p&gt;You can assign different keys to your gamepad. For instance, the X button on your pad can be the number 1, 2, or 3 on your keyboard.&lt;/p&gt;

&lt;p&gt;Most games support keyboard buttons but not direct gamepads. This software combines the two.&lt;/p&gt;

&lt;p&gt;If you have been used to Windows XP and only recently have Windows 10, this is perfect for you. Your issues connecting your Xbox or other controller get solved immediately.&lt;/p&gt;

&lt;h2&gt;Features&lt;/h2&gt;

&lt;p&gt;Xpadder packs a lot of great features, which includes:&lt;br&gt;
• Compatibility with Windows XP, Vista, 7, 8 and 10&lt;br&gt;
• Emulator for your full keyboard and mouse&lt;br&gt;
• Joystick support to DOS games&lt;br&gt;
• Use of controller for games not supporting your preferred controller&lt;br&gt;
• Controller support for multiplayer games&lt;br&gt;
• Use of up to 16 controllers&lt;br&gt;
• Conformable to arcade stick, gamepad, joystick, steering wheel, guitar, drum kit, dance mat&lt;br&gt;
• Vibrate and rumble features for games that don’t have them by default&lt;br&gt;
• Play browser games&lt;br&gt;
• Control of media players and other software with your controller&lt;/p&gt;

&lt;p&gt;Xpadder is not limited to games. You can map the buttons to the media controls on your PC. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aYUTzuZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xpadder.xyz/wp-content/uploads/2019/08/xpadder-download-for-pc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aYUTzuZ_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://xpadder.xyz/wp-content/uploads/2019/08/xpadder-download-for-pc.png" alt="Xpadder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your pad becomes a type of remote control. The handy remapping feature of the Xpadder allows you to assign several different keys with no difficulty.&lt;/p&gt;

&lt;h2&gt;Xpadder Free Download&lt;/h2&gt;

&lt;p&gt;You can download the old version of Xpadder for free. It works and has a great lineup of features. However, it does not include newer updates.&lt;/p&gt;

&lt;p&gt;You can try the free version first and see if it works for your gaming needs. Then consider purchasing the latest Xpadder if needed.&lt;/p&gt;

&lt;p&gt;You can find several sites that provide the older versions of Xpadder. Here’s one way to download Xpadder in your PC:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visit their official site:xpadder.net
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WVRH309n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://mekhato.com/wp-content/uploads/2020/06/xpadder-windows-download-10.png" alt="Download Xpadder"&gt;
&lt;/li&gt;
&lt;li&gt;Select your language and country&lt;/li&gt;
&lt;li&gt;Enter your email address on the next page&lt;/li&gt;
&lt;li&gt;Open the email Xpadder sent you&lt;/li&gt;
&lt;li&gt;You will find the link in the email&lt;/li&gt;
&lt;li&gt;Click the link and make the payment&lt;/li&gt;
&lt;li&gt;After making the payment, you will get access to download the most recent version of the app&lt;/li&gt;
&lt;li&gt;Installation only takes a few minutes&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;How to Use Xpadder&lt;/h2&gt;

&lt;p&gt;Now that you have installed it in your PC, plug in your joystick/gamepad and wait for your PC to recognize it. Follow the steps below to manage the settings for your controller:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open the Xpadder control panel&lt;/li&gt;
&lt;li&gt;Go to General Settings&lt;/li&gt;
&lt;li&gt;From the list of controllers, select the &lt;a href="https://www.xbox.com/en-IN/accessories/controllers/xbox-wireless-controller"&gt;controller&lt;/a&gt; you use&lt;/li&gt;
&lt;li&gt;Make changes to the settings and save the profile for the controller.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Remember, you can use up to 16 controllers with Xpadder. You can certainly invite your friends over and play games. The multiplayer support of this app makes that possible.&lt;/p&gt;

&lt;p&gt;You can configure the controllers individually so you can each have your personal setting preferences.&lt;/p&gt;

&lt;p&gt;Map the buttons whichever way you want, whatever controller you may have. Also, you can turn off any gamepad feature you don’t want to use.&lt;/p&gt;

&lt;p&gt;If you don’t like to make any changes to your gamepad settings, you can go with the default settings. &lt;/p&gt;

</description>
      <category>xpadder</category>
      <category>gamepad</category>
      <category>windows</category>
      <category>pc</category>
    </item>
    <item>
      <title>How to setup dev PHP/MariaDB (MySQL) environment on Windows</title>
      <author>Maxime Veber</author>
      <pubDate>Thu, 06 May 2021 09:48:52 +0000</pubDate>
      <link>https://dev.to/nek_dev/how-to-setup-dev-php-mariadb-mysql-environment-on-windows-jdn</link>
      <guid>https://dev.to/nek_dev/how-to-setup-dev-php-mariadb-mysql-environment-on-windows-jdn</guid>
      <description>&lt;p&gt;TL;DR: you don't need WAMP, or Apache or Nginx in your development environment. And it's not even about docker, just standard installation with protips. 😎&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#chocolatey-to-the-rescue"&gt;
  &lt;/a&gt;
  Chocolatey to the rescue
&lt;/h1&gt;

&lt;p&gt;Yes. Because the first thing that significantly changes between Windows and Linux or macOS is the package manager, they have apt, yum, yaourt, homebrew... Windows has nothing by default (but not for long, &lt;a href="https://devblogs.microsoft.com/commandline/windows-package-manager-preview/"&gt;the future looks bright&lt;/a&gt;!).&lt;/p&gt;

&lt;p&gt;But here comes Chocolatey. Yes, it's a package manager. Not official, it does not contain all the software you want. But well, it provides already a lot!&lt;/p&gt;

&lt;p&gt;For instance, you can install &lt;a href="https://community.chocolatey.org/packages/php"&gt;PHP&lt;/a&gt;, but also &lt;a href="https://community.chocolatey.org/packages/phpmyadmin"&gt;phpMyAdmin&lt;/a&gt; and &lt;a href="https://community.chocolatey.org/packages/mariadb"&gt;MariaDB&lt;/a&gt; (which replace MySQL).&lt;/p&gt;

&lt;p&gt;To install Chocolatey, just follow the &lt;a href="https://chocolatey.org/install"&gt;getting started&lt;/a&gt;, or run this command in a terminal (launched in mode administrator).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#installing-php"&gt;
  &lt;/a&gt;
  Installing PHP
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#actual-installation"&gt;
  &lt;/a&gt;
  Actual installation
&lt;/h2&gt;

&lt;p&gt;Now you have Chocolatey, we can install PHP. Run this in a terminal in administrator mode (right click on terminal / open as administrator):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco install php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You probably need to restart your terminal now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-php-directly"&gt;
  &lt;/a&gt;
  Using PHP directly
&lt;/h2&gt;

&lt;p&gt;You may ask why not installing a webserver like Apache or Nginx as well, the short answer is: &lt;em&gt;you don't need one&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To run your project, use in the terminal the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php -S localhost:1337
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;php -S&lt;/code&gt; will start the PHP server (for development only)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;localhost:1337&lt;/code&gt; represents the host and the port to listen on, if you want to expose the server you will probably need to use &lt;code&gt;0.0.0.0:1337&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The server points to the current directory by default, use the option &lt;code&gt;-t&lt;/code&gt; to specify a folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You access your website on &lt;a href="http://localhost:1337"&gt;http://localhost:1337&lt;/a&gt;! ✨&lt;/p&gt;

&lt;p&gt;If you're using a router (a single entry point like many frameworks nowadays), you can also specify one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php -S localhost:1337 index.php
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-track-install-composer"&gt;
  &lt;/a&gt;
  Bonus track: install composer
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://getcomposer.org/"&gt;Composer&lt;/a&gt; is the package manager of PHP. And guess what, it's also available &lt;a href="https://community.chocolatey.org/packages/composer"&gt;in choco&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;In a terminal as administrator:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco install composer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#installing-mariadb"&gt;
  &lt;/a&gt;
  Installing MariaDB
&lt;/h1&gt;

&lt;p&gt;Just like PHP. It is super-super-easy, open a terminal in administrator (or use &lt;a href="https://community.chocolatey.org/packages/wsudo"&gt;wsudo&lt;/a&gt; 😎) and type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco install mariadb
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You're all set. MariaDB is now available on your computer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installing-phpmyadmin"&gt;
  &lt;/a&gt;
  Installing phpMyAdmin
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;MariaDB will work with PHP as a replacement for MySQL perfectly. You can also use any MySQL client for that. For example, you can use PHPStorm internal client or MySQL Workbench!&lt;/p&gt;

&lt;p&gt;But most of us are used to a very specific client (which is incredibly simple to use): phpMyAdmin.&lt;/p&gt;

&lt;p&gt;Let's install it, it's just like the 2 previous tools!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;choco install phpmyadmin
# Do not forget to run it as administrator
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;p&gt;phpMyAdmin requires some PHP extensions to be enabled before it works. This is documented in the &lt;a href="https://github.com/Nek-/choco-phpmyadmin#php-configuration"&gt;readme of the package&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Go in the install directory of PHP (for me it's &lt;code&gt;C:\Tools\php...&lt;/code&gt;), you can find it with the command &lt;code&gt;php --ini&lt;/code&gt;. And copy/paste &lt;code&gt;php.ini.development&lt;/code&gt; to &lt;code&gt;php.ini&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now edit this file and add (or uncomment) the following lines:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;extension=mysqli
extension=openssl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-phpmyadmin"&gt;
  &lt;/a&gt;
  Running phpMyAdmin
&lt;/h2&gt;

&lt;p&gt;You're all set. Just run the phpMyAdmin command (it runs a php server for you!), in your terminal type the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;phpmyadmin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's all folks! You have setup a complete workspace to build an application in PHP that uses MariaDB with phpMyAdmin client for MySQL! ✨ &lt;/p&gt;

&lt;p&gt;You can now access phpmyadmin in your browser on &lt;a href="http://localhost:3333"&gt;http://localhost:3333&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#ok-and-why-not-wamp"&gt;
  &lt;/a&gt;
  Ok, and why not WAMP?
&lt;/h1&gt;

&lt;p&gt;WAMP is old. Outdated. For example, you can't even get the very last version of PHP with WAMP.&lt;/p&gt;

&lt;p&gt;But it also adds a webserver (apache), the default configuration is not bad to learn PHP, but when it comes to run modern applications... Well, it becomes a pain to configure properly.&lt;/p&gt;

&lt;p&gt;The method I explain here is easy but also has a serious advantage: you understand what you're doing (when WAMP is a complete package with a complex overhead).&lt;/p&gt;

&lt;p&gt;Hope you like it. 👋&lt;/p&gt;

</description>
      <category>php</category>
      <category>windows</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Basic Concepts to Understand API, Web Services &amp; Microservices</title>
      <author>Priyanshi Sharma</author>
      <pubDate>Thu, 06 May 2021 09:35:27 +0000</pubDate>
      <link>https://dev.to/priyanshi_sharma/basic-concepts-to-understand-api-web-services-microservices-3g02</link>
      <guid>https://dev.to/priyanshi_sharma/basic-concepts-to-understand-api-web-services-microservices-3g02</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rRcrjAQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17k2ni0t1t0sei32ov1i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rRcrjAQu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/17k2ni0t1t0sei32ov1i.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Developers have been using three major building blocks for the development of web apps, namely, APIs, Web Services, and Microservices. Some people are still unaware of the basic concept, usability and working of three different concepts. So today’s article is entirely dedicated to the individuals who have heard about these terms but are confused about the purpose each has.&lt;/p&gt;

&lt;p&gt;Typically, a &lt;a href="https://www.decipherzone.com/blog-detail/The-process-of-web-application-development"&gt;web application&lt;/a&gt; operates with three major components, that are, services, gateway, and controller.&lt;/p&gt;

&lt;p&gt;Here, a gateway is a single entry point to the application. It is responsible for authentication, load balancing, monitoring, caching, static response handling and so on whenever a client-side wants to interact with the web application.&lt;/p&gt;

&lt;p&gt;While a controller is like a manager that manages incoming requests, decides which worker should do the work, divides the work into smaller tasks, passes that work off, orchestrates the work and sends it back to the client.&lt;/p&gt;

&lt;p&gt;The worker mentioned in the controller section is nonetheless the service that receives the request from the manager, figures out the algorithms or logic that will be used to complete the request, only responsible for the work allotted and returns the completed work to the manager.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fundamental-notions-to-know-before-understanding-api-web-services-amp-microservices"&gt;
  &lt;/a&gt;
  Fundamental Notions to Know Before Understanding API, Web Services &amp;amp; Microservices
&lt;/h2&gt;

&lt;p&gt;Before we move ahead to understand these three terms, it will be helpful to acknowledge the components web applications have and how they work.&lt;/p&gt;

&lt;p&gt;Now let’s assume you are developing a &lt;a href="https://www.decipherzone.com/blog-detail/The-process-of-web-application-development"&gt;web application&lt;/a&gt; for shopping and for that you will need to add a product description page that will not only display the information related to the given product but also display a lot of other information including order history, customer reviews &amp;amp; ratings, low inventory warning, number of items in the cart, shipping options, other products recommendations and alternatives to the current product.&lt;/p&gt;

&lt;p&gt;While in the monolithic web app, a client would retrieve this data through a REST call to the application that will trigger a load balancer to route the request to the identical instances of the application that would query numerous databases and then return the response.&lt;/p&gt;

&lt;p&gt;On the other hand, in the application using &lt;a href="https://www.decipherzone.com/blog-detail/why-microservices-architecture"&gt;microservices architecture&lt;/a&gt;, the data displayed on the product page is owned by different microservices. Some of the microservices that own data of the project page are: Shopping Cart Service, Order Service, Catalog Service, Inventory Service, Shipping Service, Review Service, and Recommendation Service(s).&lt;/p&gt;

&lt;p&gt;Now with a clear understanding of how an application works, it’s time to get into the details of APIs, web services and Microservices so that you can clearly know the meaning of these terms that will come ahead and relate to it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-vs-web-services-vs-microservices"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.decipherzone.com/blog-detail/api-vs-web-services-vs-microservices"&gt;API VS Web Services VS Microservices&lt;/a&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-are-apis"&gt;
  &lt;/a&gt;
  What are APIs?
&lt;/h3&gt;

&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/API"&gt;API&lt;/a&gt; (Application Programming Interface) is a communication channel between services and applications. It can be used to call single or multiple services depending upon the architecture of the application. It is a secure way to request and share information, services, and functionalities within both internal and external users.&lt;/p&gt;

&lt;p&gt;Simply put, an &lt;a href="https://www.decipherzone.com/blog-detail/What-is-an-API-and-How-it-works-"&gt;API&lt;/a&gt; is a messenger that takes a request and tells the system what the user wants to do and then returns the response. It is a method of communication between a requester and a host that is mostly accessible through an IP address. It can communicate multiple information to the user, like, data that needs to be shared and the function that needs to be provided.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://www.decipherzone.com/blog-detail/api-testing-types-benefits"&gt;API&lt;/a&gt; enables the application to communicate with other services or applications without having the knowledge of their implementation. It simplifies the app development process while saving both time and money. APIs are a simplified manner to connect an application infrastructure via &lt;a href="https://www.decipherzone.com/blog-detail/oracle-cloud-vs-aws"&gt;cloud&lt;/a&gt;-native development and also allows sharing of data with customers or other external users.&lt;/p&gt;

&lt;p&gt;In short, it opens up access to the resources while maintaining control and security. API security is all about API management that includes the use of an API Gateway. They are of three types: private, public and partner. Where private is only used internally in the organization, public API enables third parties to build an app that interacts with the API of your &lt;a href="https://www.decipherzone.com/on-demand-solutions"&gt;application&lt;/a&gt;, and the partner API is shared with certain business partners to gain additional revenue streams without risking quality.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-web-services"&gt;
  &lt;/a&gt;
  What are Web Services?
&lt;/h3&gt;

&lt;p&gt;Web services are client &amp;amp; server applications that interact over the World Wide Web’s HyperText Transfer Protocol (HTTP). As outlined by the World Wide Web Consortium (W3C), web services give a standard means of interoperating between &lt;a href="https://www.decipherzone.com/blog-detail/top-10-software-vulnerabilities"&gt;software applications&lt;/a&gt; operating on a variety of platforms and &lt;a href="https://www.decipherzone.com/blog-detail/top-10-best-backend-frameworks-for-web-development-in-2020"&gt;frameworks&lt;/a&gt;. Web services are portrayed by their great extensibility and interoperability, as well as their machine-processable descriptions, thanks to the use of XML. Web services can be combined in a loosely coupled method to perform complex operations.&lt;/p&gt;

&lt;p&gt;A web service architecture consists of three distinct roles, that is, provider, requester, or broker. Here a provider informs the broker/service registry about the presence of the web service through the broker’s public interface that makes service accessible to clients and the requestor binds and invokes the services. It is a lightweight &lt;a href="https://www.decipherzone.com/blog-detail/soa-vs-microservices"&gt;service-oriented architecture&lt;/a&gt; that supports interoperability.&lt;/p&gt;

&lt;p&gt;Simply put, web services are XML-centered data exchange systems that utilize the internet for application-to-application communication and interfacing. A client can call a web service by sending a request via XML and the service then provides an XML response as well.&lt;br&gt;
A web service comprises of these functions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; Availability over intranet and internet networks &lt;/li&gt;
&lt;li&gt; Independence of programming languages and operating systems &lt;/li&gt;
&lt;li&gt; Self-describing via XML &lt;/li&gt;
&lt;li&gt; Identifiable via a simple location method &lt;/li&gt;
&lt;li&gt; Supports communication between apps with HTML, SOAP, WSDL, and XML. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here, XML tags data, SOAP transfers the message and WSDL describes the accessibility of service.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-microservices"&gt;
  &lt;/a&gt;
  What are Microservices?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://microservices.io/"&gt;Microservices&lt;/a&gt; is an architectural style that structures an application as a collection of services that are loosely coupled, highly maintainable &amp;amp; testable, independently deployable, organized around business capabilities, and are owned by a small team of developers. It supports the frequent, agile, and reliable delivery of complex, large applications.&lt;/p&gt;

&lt;p&gt;Where in the &lt;a href="https://www.decipherzone.com/blog-detail/service-oriented-architecture"&gt;SOA architecture&lt;/a&gt;, if we had to create a search function, it has to be deployed on a single server where other functions are also residing. The failure of the search service due to any reason can take down the entire application. Whereas, in &lt;a href="https://www.decipherzone.com/blog-detail/microservices-vs-api"&gt;microservices&lt;/a&gt;, all the functions are split into the granular level and each service is deployed on a different server making the service independent of each other. That is, the failure of one or more functions will not affect other parts of the web application. Microservice also offers improved fault tolerance due to its small service constitution.&lt;/p&gt;

&lt;p&gt;When a change is needed in a certain part of the application, only the related service is modified and deployed without disturbing the functionality of an entire application. It gives the developers the independence to develop and deploy services independently while using an ideal programming language for service and another language or framework for a different function. It is easier to scale and integrate with third-party services.&lt;/p&gt;

&lt;p&gt;With a clear understanding of APIs, Web Services and Microservices, it can be said that there is nothing to compare among the three. While APIs and Webs Services are the communication interface for different architecture styles, microservices is a distinctive method to develop software systems that have well-defined interfaces and operability.&lt;/p&gt;

&lt;p&gt;And if you are a business owner who wants to develop an application that is based on either of these services and architecture, then you can &lt;a href="https://www.decipherzone.com/hire-developer"&gt;hire developers&lt;/a&gt; who have relevant experience and expertise in the same field.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href="https://www.decipherzone.com/blog"&gt;Decipher&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>react</category>
      <category>python</category>
    </item>
    <item>
      <title>React JSON Schema Form</title>
      <author>Valerii Udodov</author>
      <pubDate>Thu, 06 May 2021 09:31:33 +0000</pubDate>
      <link>https://dev.to/vudodov/react-json-schema-form-39da</link>
      <guid>https://dev.to/vudodov/react-json-schema-form-39da</guid>
      <description>&lt;p&gt;Today, I'd like to share with you one of the items from my tools-belt, which I'm successfully using for years now. It is simply a react component. It is a form. But not just a form, it is a form that allows anyone independently of their React or HTML knowledge to build a sophisticated feature-rich form based on any arbitrary expected data in a consistent manner.&lt;/p&gt;

&lt;p&gt;Behold, the React JSON Schema Form, or simply RJSF. Originally started and built as an Open Source project by the Mozilla team. Evolved into a separate independent project.&lt;/p&gt;

&lt;p&gt;Out of the box, RJSF provides us with rich customization of different form levels, extensibility, and data validation. We will talk about each aspect separately.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configuration"&gt;
  &lt;/a&gt;
  Configuration
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#json-schema"&gt;
  &lt;/a&gt;
  JSON Schema
&lt;/h3&gt;

&lt;p&gt;The end goal of any web form is to capture &lt;em&gt;expected&lt;/em&gt; user input. The RJSF will capture the data as a JSON object. Before capturing &lt;em&gt;expected&lt;/em&gt; data we need to define how the data will look like. The rest RJSF will do for us. To define and annotate the data we will use another JSON object. Bear with me here... &lt;br&gt;
We will be defining the shape (or the schema) of the JSON object (the data) with another JSON object. The JSON object that defines the schema for another JSON object is called -&lt;em&gt;drumroll&lt;/em&gt;- JSON Schema and follows the convention described in the JSON Schema standard.&lt;/p&gt;

&lt;p&gt;To make things clear, we have two JSON objects so far. One representing the data we are interested in, another representing the schema of the data we are interested in. The last one will help RJSF to decide which input to set for each data attribute.&lt;/p&gt;



&lt;p&gt;A while ago &lt;a href="https://dev.to/posts/making-strongly-typed-language-a-bit-more-loose-with-json-schema/#the-jsonschema"&gt;in one of my previous articles&lt;/a&gt; I've touched base on the JSON Schema.&lt;/p&gt;

&lt;p&gt;I'm not going to repeat myself, I'll just distill to what I think is the most valuable aspect of it.&lt;br&gt;
JSON Schema allows us to capture changing data and keep it &lt;strong&gt;meaningful&lt;/strong&gt;. Think of arbitrary address data in the international application. Address differs from country to country, but the ultimate value doesn't. It represents a point in the world that is described with different notations. Hence even though the address format in the USA, Spain, Australia, or China is absolutely different, the ultimate value -from an application perspective- is the same-- a point on the Globe. It well might be employee home address, parcel destination or anything else and notation does not change this fact.&lt;/p&gt;



&lt;p&gt;So if we want to capture, let's say, the first and last name and telephone number of a person. The expected data JSON object will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Chuck"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Norris"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"telephone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"123 456 789"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the JSON Schema object to define the shape of the data object above will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A person information"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A simple person data."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"First name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"lastName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Last name"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"telephone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Telephone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minLength"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;Something to keep in mind.&lt;br&gt;
JSON Schema is following a permissive model. Meaning out of the box everything is allowed. The more details you specify, the more restrictions you put in place. So it is worth sometimes religiously define the expected data.&lt;/p&gt;



&lt;p&gt;This is the bare minimum we need to start. Let's look at how the JSON Schema from the above will look like as a form. Just before let's also look at the code...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rjsf/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yup, that's it, now let's check out the form itself&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6MclfJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eg62ok1rljqtlzepnxi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z6MclfJL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0eg62ok1rljqtlzepnxi.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ui-schema"&gt;
  &lt;/a&gt;
  UI Schema
&lt;/h3&gt;

&lt;p&gt;Out of the box, the RJSF makes a judgment on how to render one field or another. Using JSON Schema you primarily control &lt;em&gt;what&lt;/em&gt; to render, but using &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/api-reference/uiSchema/#uischema"&gt;UI Schema&lt;/a&gt; you can control &lt;em&gt;how&lt;/em&gt; to render.&lt;/p&gt;

&lt;p&gt;UI Schema is yet another JSON that follows the tree structure of the JSON data, hence form. It has quite some stuff out of the box.&lt;/p&gt;

&lt;p&gt;You can be as granular as picking a color for a particular input or as generic as defining a template for all fields for a &lt;code&gt;string&lt;/code&gt; type.&lt;/p&gt;

&lt;p&gt;Let's try to do something with our demo form and say disable the first name and add help text for the phone number.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"firstName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ui:disabled"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"telephone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"ui:help"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The phone number that can be used to contact you"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's tweak our component a bit&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@rjsf/core&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;

    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; 
        &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;uiSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;uiSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;// ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here is the final look&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Hqi1Ci02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htjlp1kbh6uude1b14o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Hqi1Ci02--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1htjlp1kbh6uude1b14o.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Nice and easy. There's a lot of built-in configurations that are ready to be used, but if nothing suits your needs, you can build your own...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#customization"&gt;
  &lt;/a&gt;
  Customization
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;The API allows to specify your own custom widget and field components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;widget&lt;/em&gt; represents a HTML tag for the user to enter data, eg. input, select, etc.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;field&lt;/em&gt; usually wraps one or more widgets and most often handles internal field state; think of a field as a form row, including the labels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;-- &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/advanced-customization/custom-widgets-fields/"&gt;RJSF Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another way to think of it is &lt;em&gt;field&lt;/em&gt; includes label and other stuff around, while &lt;em&gt;widget&lt;/em&gt; only the interaction component or simply input.&lt;/p&gt;

&lt;p&gt;For the sake of example let's create a simple text &lt;em&gt;widget&lt;/em&gt; that will make the input red and put a dash sign (-) after every character.&lt;/p&gt;

&lt;p&gt;To keep things light and simple let's imagine that the whole form will be a single red field. The JSON Schema will look as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mad Field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Forgot to say that widgets are just components, that will be mounted in and will receive a standard set of &lt;code&gt;props&lt;/code&gt;. No limits, just your imagination ;)&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"custom"&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The next step is to register the widget so that we can use it in the UI Schema&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;madTextWidget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can define the UI Schema&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uiSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ui:widget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;madTextWidget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And the full code with the RJSF&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Mad Field&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
      &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;backgroundColor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"custom"&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;required&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
      &lt;span class="na"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;widgets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;madTextWidget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;MadTextWidget&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;uiSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ui:widget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;madTextWidget&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;uiSchema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;uiSchema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; 
        &lt;span class="na"&gt;widgets&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;widgets&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It will look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9r35AmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9otdcy4sghzv8ngunz8q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q9r35AmC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9otdcy4sghzv8ngunz8q.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here, &lt;a href="https://codepen.io/vudodov/pen/LYWPKPa"&gt;try it yourself&lt;/a&gt;. The field will be pretty similar but will have a wider impact area so to speak. As been said the field will include labels and everything around the input itself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/advanced-customization/custom-templates/"&gt;Custom templates&lt;/a&gt; allows you to re-define the layout for certain data types (simple field, array or object) on the form level.&lt;/p&gt;

&lt;p&gt;Finally, you can build your own &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/advanced-customization/custom-themes/"&gt;Theme&lt;/a&gt; which will contain all your custom widgets, fields, template other properties available for a &lt;code&gt;Form&lt;/code&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#validation"&gt;
  &lt;/a&gt;
  Validation
&lt;/h2&gt;

&lt;p&gt;As was mentioned before the JSON Schema defines the shape of the JSON data that we hope to capture with the form. JSON Schema allows us to define the shape fairly precisely. We can tune the definition beyond the expected type, e.g. we can define a length of the string or an email regexp or a top boundary for a numeric value and so forth.&lt;/p&gt;

&lt;p&gt;Check out this example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSONSchemaForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;schema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;minLength&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;formData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hi&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;ReactDOM&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Form&lt;/span&gt; &lt;span class="na"&gt;schema&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;schema&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;formData&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;formData&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="na"&gt;liveValidate&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;app&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will end up looking like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UXxjKhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9mqrpqkriq27ann4b1a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UXxjKhkH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9mqrpqkriq27ann4b1a.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Of course, we can &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/usage/validation/"&gt;re-define messages&lt;/a&gt;, configure when, where, and how to show the error messages.&lt;/p&gt;

&lt;p&gt;Out of the box our data will be validated against the JSON Schema using the &lt;a href="https://github.com/ajv-validator/ajv"&gt;(Ajv) A JSON Schema validator library&lt;/a&gt;. However, if we want to, we can implement our own custom validation process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dependencies"&gt;
  &lt;/a&gt;
  Dependencies
&lt;/h2&gt;

&lt;p&gt;Dependencies allow us to add some action to the form. We can dynamically change form depending on the user input. Basically, we can request extra information depending on what the user enters.&lt;/p&gt;




&lt;p&gt;Before we will get into dependencies, we need to get ourselves familiar with &lt;a href="https://json-schema.org/understanding-json-schema/reference/combining.html"&gt;dynamic schema permutation&lt;/a&gt;. Don't worry, it is easier than it sounds. We just need to know what four key-words mean&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;allOf&lt;/code&gt;: Must be valid against all of the subschemas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;anyOf&lt;/code&gt;: Must be valid against any of the subschemas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;oneOf&lt;/code&gt;: Must be valid against exactly one of the subschemas&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;not&lt;/code&gt;: Must not be valid against the given schema
___&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Although dependencies have been removed in the latest JSON Schema standard versions, RJSF still supports it. Hence you can use it, there are no plans for it to be removed so far.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#property-dependencies"&gt;
  &lt;/a&gt;
  Property dependencies
&lt;/h3&gt;

&lt;p&gt;We may define that if one piece of the data has been filled, the other piece becomes mandatory. There are two ways to define this sort of relationship: unidirectional and bidirectional. Unidirectional as you might guess from the name will work in one direction. Bidirectional will work in both, so no matter which piece of data you fill in, the other will be required as well.&lt;/p&gt;

&lt;p&gt;Let's try to use bidirectional dependency to define address in the shape of coordinates. The dependency will state that if one of the coordinates has been filled, the other one has to be filled in either. But if none is filled, none is required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Longitude and Latitude Values"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A geographical coordinate."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"longitude"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"latitude"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"additionalProperties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See lines 17 to 24. That's all there is to it, really. Once we will pass this schema to the form, we will see the following (watch for an asterisk (*) near the label, it indicates whether the field is mandatory or not).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--24olAqv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfg8sairbbo2fqvceww.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--24olAqv6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tsfg8sairbbo2fqvceww.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schema-dependencies"&gt;
  &lt;/a&gt;
  Schema dependencies
&lt;/h3&gt;

&lt;p&gt;This one is more entertaining, we can actually control visibility through the dependencies. Let's follow up on the previous example and for the sake of the example show longitude only if latitude is filled in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Longitude and Latitude Values"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A geographical coordinate."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="w"&gt;
     &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"latitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"longitude"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"minimum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-180&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"maximum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"additionalProperties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No code changes are required, just a small dependency configuration tweak (lines 12 to 22).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AlwtuuRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j7hbqr7ous2z83bpf40.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AlwtuuRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7j7hbqr7ous2z83bpf40.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dynamic-schema-dependencies"&gt;
  &lt;/a&gt;
  Dynamic schema dependencies
&lt;/h3&gt;

&lt;p&gt;So far so good, pretty straightforward. We input the data, we change the expected data requirements. But we can go one step further and have multiple requirements. Not only based on whether the data is presented or not but on the value of presented data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BkwfNk7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dekjle6kfv45joidff30.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BkwfNk7q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dekjle6kfv45joidff30.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once again, no code, only JSON Schema modification&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"object"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"string"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"One"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"Two"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"required"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="s2"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"oneOf"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"None"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"One"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"First input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="nl"&gt;"properties"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"How many inputs do you need?"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"enum"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="s2"&gt;"Two"&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"First input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"Second input"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
              &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"number"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bottom-line"&gt;
  &lt;/a&gt;
  Bottom line
&lt;/h2&gt;

&lt;p&gt;Even though we went through some major concepts and features, we are far away from covering everything that RJSF empowers us to do.&lt;/p&gt;

&lt;p&gt;I'd encourage you to check out &lt;a href="https://react-jsonschema-form.readthedocs.io/en/latest/"&gt;official documentation&lt;/a&gt; for more insights and examples, &lt;a href="https://github.com/rjsf-team/react-jsonschema-form"&gt;GitHub repository&lt;/a&gt; for undocumented goodies and &lt;a href="https://rjsf-team.github.io/react-jsonschema-form/"&gt;live playground&lt;/a&gt; to get your hands dirty. Finally, worth mentioning that the Open Source community keeps things going, so look outside these resources, there are quite a few good things over there.&lt;/p&gt;

&lt;p&gt;RJSF is a ridiculously powerful thing if you need to customize and capture meaningful data. Enjoy!&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>rjsf</category>
      <category>jsonschema</category>
    </item>
    <item>
      <title>Have someone ever made a profit from your idea?</title>
      <author>Madza</author>
      <pubDate>Thu, 06 May 2021 09:29:50 +0000</pubDate>
      <link>https://dev.to/madza/have-someone-ever-made-a-profit-from-your-idea-12a</link>
      <guid>https://dev.to/madza/have-someone-ever-made-a-profit-from-your-idea-12a</guid>
      <description>&lt;p&gt;Have you ever experienced someone taking your project idea, a part of your code that was not licensed for profit, your original blog article or other intellectual property, and made a profit out of it? &lt;/p&gt;

&lt;p&gt;Would love to hear your stories!&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>business</category>
      <category>startup</category>
    </item>
    <item>
      <title>Building a Discord bot with Azure Logic Apps</title>
      <author>Rick van den Bosch</author>
      <pubDate>Thu, 06 May 2021 09:26:16 +0000</pubDate>
      <link>https://dev.to/rickvdbosch/building-a-discord-bot-with-azure-logic-apps-51lp</link>
      <guid>https://dev.to/rickvdbosch/building-a-discord-bot-with-azure-logic-apps-51lp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#the-betatalks-discord"&gt;
  &lt;/a&gt;
  The Betatalks Discord
&lt;/h2&gt;

&lt;p&gt;A few months ago we've started a &lt;a href="https://discord.gg/KTkCXQTgjR"&gt;Betatalks Discord server&lt;/a&gt; to build a community and enable our friends to&lt;br&gt;
discuss all the Betatalks content we put out there. Think about the&lt;br&gt;
&lt;a href="https://www.youtube.com/playlist?list=PLCLCtgDNNiJR_LDx6RT8X50VrKAH3_49B"&gt;Betatalks videos&lt;/a&gt; on YouTube, Betatalks &lt;em&gt;live&lt;/em&gt; events and the&lt;br&gt;
most recent addition: &lt;a href="https://podcast.betatalks.nl/"&gt;Betatalks the podcast&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To notify the corresponding Discord channels about new Betatalks videos or Betatalks the podcast episodes, I created Azure Logic Apps to&lt;br&gt;
check for new additions and post them to the webhook. Here's how I built that.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-a-discord-webhook"&gt;
  &lt;/a&gt;
  Creating a Discord webhook
&lt;/h2&gt;

&lt;p&gt;As Discord describes it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Webhooks are a simple way to post messages from other apps and websites into Discord using internet magic.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you create a Discord webhook you give it a name (1), select the channel the webhook posts to (2) and you optionally upload an avatar&lt;br&gt;
for the webhook (3). Once you've done all that save your changes, copy the webhook URL (4) and you should be good to go!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HT3crWBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-01.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HT3crWBm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-01.webp" alt="Creating a Discord webhook"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#calling-discord-webhooks"&gt;
  &lt;/a&gt;
  Calling Discord webhooks
&lt;/h2&gt;

&lt;p&gt;The most basic form of calling a Discord webhook only needs either a message (in the &lt;code&gt;content&lt;/code&gt; property), file contents (in the &lt;code&gt;file&lt;/code&gt;&lt;br&gt;
property) or an array of up to 10 embed objects (in the &lt;code&gt;embeds&lt;/code&gt; property). This means a most basic, valid payload for a Discord webhook&lt;br&gt;
looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Hello world!"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More information on the Discord webhook payload can be found in the&lt;br&gt;
&lt;a href="https://discord.com/developers/docs/resources/webhook#execute-webhook"&gt;Discord developer portal&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since calling the webhook is as easy as posting an HTTP request to an URL, you can easily test the content you're building using tools like&lt;br&gt;
&lt;a href="https://www.postman.com"&gt;Postman&lt;/a&gt;, &lt;a href="https://hoppscotch.io/"&gt;hoppscoth.io&lt;/a&gt; or Visual Studio Code using the&lt;br&gt;
&lt;a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client"&gt;REST Client&lt;/a&gt; extension.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-logic-app"&gt;
  &lt;/a&gt;
  Building the Logic App
&lt;/h2&gt;

&lt;p&gt;The podcast bot uses the RSS feed to determine if there are new episodes and calls the webhook. The YouTube one uses a&lt;br&gt;
&lt;a href="https://docs.microsoft.com/en-us/azure/connectors/apis-list"&gt;connector&lt;/a&gt; to YouTube. We'll use the latter as the example in this post.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#triggering-the-workflow"&gt;
  &lt;/a&gt;
  Triggering the workflow
&lt;/h3&gt;

&lt;p&gt;The selected trigger for the Logic App is YouTube's "When a video is uploaded by a channel". This enables you to select any of the channels&lt;br&gt;
you've subscribed to on YouTube. You can configure how often the Logic App needs to check for new items and then the triggering part of the&lt;br&gt;
Logic App is done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru9m9xtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-02.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ru9m9xtb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-02.webp" alt="Triggering the workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#on-one-condition"&gt;
  &lt;/a&gt;
  On one condition
&lt;/h3&gt;

&lt;p&gt;The workflow should run on one condition. Or two actually, but they can be seen as one 😁. We only want to post content to the webhook if&lt;br&gt;
the title of the video contains the term &lt;em&gt;Betatalks&lt;/em&gt; but does not contain &lt;em&gt;podcast&lt;/em&gt;. To do this, we add a Condition-action to our workflow.&lt;br&gt;
We &lt;code&gt;toLower&lt;/code&gt; the video's title and check the conditions we just specified.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xETDqWSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-03.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xETDqWSf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-03.webp" alt="Checking the condition"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#calling-the-webhook"&gt;
  &lt;/a&gt;
  Calling the webhook
&lt;/h3&gt;

&lt;p&gt;Now that we've defined our trigger and checked our conditions, we can configure calling the webhook. To do so we add an HTTP action. We&lt;br&gt;
configure it to do a &lt;code&gt;POST&lt;/code&gt; to the webhook endpoint with a body we configure based on dynamic content from the trigger. As we saw in the&lt;br&gt;
example earlier we can create a json payload with a &lt;code&gt;content&lt;/code&gt; property to hold the message we want to send.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WMbl-qkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-04.webp" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WMbl-qkg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.rickvandenbosch.net/images/posts/discord-bot-04.webp" alt="Posting the information"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that's it! To see the resulting messages yourself, check our &lt;a href="https://discord.gg/KTkCXQTgjR"&gt;Betatalks Discord&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this helps!&lt;/p&gt;

</description>
      <category>azure</category>
      <category>discord</category>
      <category>logicapps</category>
      <category>youtube</category>
    </item>
    <item>
      <title>Bootstrap 5 is out</title>
      <author>MD Bootstrap</author>
      <pubDate>Thu, 06 May 2021 09:21:23 +0000</pubDate>
      <link>https://dev.to/mdbootstrap/bootstrap-5-is-out-4j6m</link>
      <guid>https://dev.to/mdbootstrap/bootstrap-5-is-out-4j6m</guid>
      <description>&lt;p&gt;Bootstrap 5 is finally out - this time for real.&lt;/p&gt;

&lt;p&gt;STABLE - means that a technology is ready to use in production environments. Unlike an alpha or beta version.&lt;/p&gt;

&lt;p&gt;Bootstrap 5 is now stable.&lt;/p&gt;

&lt;p&gt;The fifth version is superior to the previous ones.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jQuery is removed&lt;/li&gt;
&lt;li&gt;plain Vanilla JavaScript is now the base&lt;/li&gt;
&lt;li&gt;RTL (right to left) support is added&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We discuss these crucial changes as well as many others in our extensive 📖 1.5H crash course on the latest Bootstrap 5.&lt;/p&gt;

&lt;p&gt;We invite you to watch &amp;amp; share our tutorial with your community.&lt;br&gt;
Frontend industry has to make a switch to v5 - the sooner the better.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rQryOSyfXmI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>bootstrap</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>css</category>
    </item>
    <item>
      <title>Do you start with frontend, backend, or both?</title>
      <author>Madza</author>
      <pubDate>Thu, 06 May 2021 08:51:26 +0000</pubDate>
      <link>https://dev.to/madza/do-you-start-with-frontend-backend-or-both-442l</link>
      <guid>https://dev.to/madza/do-you-start-with-frontend-backend-or-both-442l</guid>
      <description>&lt;p&gt;When it comes to developing full-stack apps, what is the preferred sequence of your workflow?&lt;/p&gt;

&lt;p&gt;Do you normally start with design and user interface or all the server stuff and databases? Or do you like to do both simultaneously? &lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>webdev</category>
      <category>coding</category>
    </item>
    <item>
      <title>Intro to Testing ASP.NET APIs with k6 - When Unit Tests Meet Load Testing</title>
      <author>Carlos Schults</author>
      <pubDate>Thu, 06 May 2021 08:41:29 +0000</pubDate>
      <link>https://dev.to/k6/intro-to-testing-asp-net-apis-with-k6-when-unit-tests-meet-load-testing-5b5h</link>
      <guid>https://dev.to/k6/intro-to-testing-asp-net-apis-with-k6-when-unit-tests-meet-load-testing-5b5h</guid>
      <description>&lt;p&gt;Software organizations are always on the hunt for ways to satisfy and delight their customers. Application performance is certainly a part of that, and ensuring good performance requires testing. Load testing is one of the types of performance testing and, in this post, you'll see how to use k6 to perform load testing on a .NET RESTful API.&lt;/p&gt;

&lt;p&gt;By the end of the post, you’ll have a more solid knowledge of load testing, why it’s important and how it’s performed. You’ll also have practical experience performing load testing with k6, and you’ll understand some of the unique ways in which this tool sets itself apart from competitors. With all of that being said, let’s get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#load-testing-the-what-why-and-how"&gt;
  &lt;/a&gt;
  Load Testing: The What, Why, and How
&lt;/h2&gt;

&lt;p&gt;Before getting our hands dirty, let’s start with some fundamentals. What is load testing?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#defining-load-testing"&gt;
  &lt;/a&gt;
  Defining Load Testing
&lt;/h3&gt;

&lt;p&gt;Load testing is one of the many types of web performance testing. It consists of verifying how an application behaves under a heavy load—hence the name. With the help of load testing, you can assess the response of your app to increasing demand and then improve it accordingly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-care-about-load-testing"&gt;
  &lt;/a&gt;
  Why Should You Care About Load Testing?
&lt;/h3&gt;

&lt;p&gt;Why is load testing important? Well, as we’ve explained, when it comes to online services, it’s essential to provide a great user experience to your customers, since the competition is only a few clicks away. &lt;em&gt;And performance is a crucial part of the overall user experience of a website&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;But why use load testing specifically? In short, you should adopt load testing when you're &lt;a href="https://k6.io/docs/testing-guides/load-testing-websites/#when-to-load-test-a-website"&gt;concerned about the availability and scalability of your website&lt;/a&gt;. Even though the &lt;a href="https://www.stevesouders.com/blog/2012/02/10/the-performance-golden-rule/"&gt;frontend is responsible for relevant performance issues&lt;/a&gt;, you should focus on the backend to ensure your performance and reliability goals when scaling your site. And load testing is exactly the tool you need to verify how your website reacts when put under load.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-you-perform-load-testing"&gt;
  &lt;/a&gt;
  How Do You Perform Load Testing
&lt;/h3&gt;

&lt;p&gt;How is load testing actually performed? As you’ll see, that can vary, even because load testing tools can come in different categories. However, the gist of it is that load testing simulates multiple users sending multiple requests to the app, concurrently. You choose the number of users and requests based on the estimated load you expect your app to be able to handle.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rolling-up-your-sleeves-lets-load-test-an-aspnet-api"&gt;
  &lt;/a&gt;
  Rolling Up Your Sleeves: Let's Load Test An ASP.NET API
&lt;/h1&gt;

&lt;p&gt;After our brief introduction to load testing, it’s time to learn how to do it in practice. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#obtaining-the-requirements"&gt;
  &lt;/a&gt;
  Obtaining The Requirements
&lt;/h2&gt;

&lt;p&gt;The application we’ll be testing throughout this tutorial is a RESTful API written in ASP.Net Core. To be able to run the application, you’ll need the &lt;a href="https://dotnet.microsoft.com/download/dotnet/5.0"&gt;.NET SDK version 5.0 or later&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#presenting-the-sample-application"&gt;
  &lt;/a&gt;
  Presenting the Sample Application
&lt;/h2&gt;

&lt;p&gt;For this tutorial, our sample application will be the sample API developed using ASP.Net Core, demonstrated in &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-5.0&amp;amp;tabs=visual-studio-code"&gt;this tutorial&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Download or clone the complete application from this &lt;a href="https://github.com/carlosschults/sample-todo-api"&gt;GitHub repository&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;As soon as you get the code, cd into the project’s directory and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, open your browser and go to &lt;code&gt;localhost:&amp;lt;port&amp;gt;/api/TodoItems&lt;/code&gt; to see the resources that are returned.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start-testing"&gt;
  &lt;/a&gt;
  Let's Start Testing
&lt;/h2&gt;

&lt;p&gt;Here’s where the fun begins: we’ve gotten ourselves an API, so let’s test it.&lt;/p&gt;

&lt;p&gt;One thing to keep in mind when doing performance testing is that, as we’ve mentioned, it comes in different types. More specifically, we can split load testing tools into two main camps: &lt;a href="https://k6.io/blog/comparing-best-open-source-load-testing-tools/#scriptable-tools-vs-non-scriptable-ones"&gt;scriptable and non-scriptable ones&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scriptable tools are those that allow you to use a full-fledged scripting language to write your tests. Such tools might offer a steeper learning curve and, in some situations, consume slightly more resources. However, the upside is that they enable users to write flexible and more complex tests.&lt;/p&gt;

&lt;p&gt;On the other end of the spectrum, you have non-scriptable tools. They tend to be simpler and consume fewer resources. But on the other hand, they're way less powerful when it comes to the capabilities they offer.&lt;/p&gt;

&lt;p&gt;This post is about k6, which is a powerful scriptable tool. But we won’t jump into k6 right away. Instead, we’ll start by testing our API with a non-scriptable tool. That way, you’ll be able to appreciate the differences between those two categories of tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-a-get-endpoint-with-a-nonscriptable-tool"&gt;
  &lt;/a&gt;
  Testing a GET Endpoint With a Non-Scriptable Tool
&lt;/h3&gt;

&lt;p&gt;As I’ve mentioned earlier, it’s possible to divide load testing tools into two broad groups: scriptable and non-scriptable ones. So, to appreciate the qualities of the former group, you need at least a little bit of experience with the latter. That’s why before we get to k6 we’ll take a brief detour to show you how testing an endpoint with a non-scriptable tool looks like.&lt;/p&gt;

&lt;p&gt;The non-scriptable tool we’ll use is &lt;a href="https://github.com/wg/wrk"&gt;wrk&lt;/a&gt;. Feel free to follow along with this part of the tutorial but, since it’s a detour, I won’t provide detailed instructions for it. With that out of the way, let’s begin.&lt;/p&gt;

&lt;p&gt;After &lt;a href="https://github.com/wg/wrk/blob/master/INSTALL"&gt;installing &lt;/a&gt;wrk, I’ll run my sample project again by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, I’ll use wrk to test the GET endpoint for the TodoItem resource:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./wrk -t12 -c400 -d30s https://localhost:5001/api/TodoItems/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is exactly the same "basic usage" example taken from the project's README. It runs a 30 seconds test that uses 12 threads keeping 400 connections open. What do the results look like? See in the following image: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WJNgTKMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqfk124rq3eh4gb3aa6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WJNgTKMV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bqfk124rq3eh4gb3aa6p.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's unpack that. After a short text summarizing the executed test (30 seconds, 12 threads, 400 connections) we see statistics regarding the latency and requests per second. For each of those we see, among other info, the average value (1), the standard deviation (2), the maximum value (3).&lt;/p&gt;

&lt;p&gt;We also see the number of requests that were performed, in how much time, and the total volume of data that was read (5). Finally, we see the total amount of requests per second and the volume of data transferred.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-a-get-endpoint-with-k6"&gt;
  &lt;/a&gt;
  Testing a Get Endpoint with k6
&lt;/h3&gt;

&lt;p&gt;Now it’s time to repeat the previous test, this time using k6.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#installing"&gt;
  &lt;/a&gt;
  Installing
&lt;/h4&gt;

&lt;p&gt;Let’s start by installing the tool. If you use macOS, install k6 is a breeze using homebrew:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;brew install k6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Users of Debian, Ubuntu or other Debian-based distros should run the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-key adv &lt;span class="nt"&gt;--keyserver&lt;/span&gt; hkp://keyserver.ubuntu.com:80 &lt;span class="nt"&gt;--recv-keys&lt;/span&gt; 379CE192D401AB61
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb https://dl.bintray.com/loadimpact/deb stable main"&lt;/span&gt; | &lt;span class="nb"&gt;sudo tee&lt;/span&gt; &lt;span class="nt"&gt;-a&lt;/span&gt; /etc/apt/sources.list
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get update
&lt;span class="nb"&gt;sudo &lt;/span&gt;apt-get &lt;span class="nb"&gt;install &lt;/span&gt;k6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’re on Windows, you can &lt;a href="https://k6.io/docs/getting-started/installation/#windows-msi-installer"&gt;download the.msi installer&lt;/a&gt;. Users of other platforms, take a look at the &lt;a href="https://k6.io/docs/getting-started/installation/"&gt;k6 installation guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After the installation is complete, regardless of OS, you should be able to run &lt;code&gt;k6 version&lt;/code&gt; to see the current version number and verify the installation was a success.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#writing-and-running-your-first-test-script"&gt;
  &lt;/a&gt;
  Writing and Running Your First Test Script
&lt;/h4&gt;

&lt;p&gt;To perform k6 tests, you’ll need to create a test script. Test scripts in k6 are written in JavaScript, which is a perfect choice, considering most web developers will already be familiar with the language—as opposed to something like Python, Ruby, or a custom DSL.&lt;/p&gt;

&lt;p&gt;Using your favorite editor, create a file called &lt;strong&gt;script.js&lt;/strong&gt;. I’ll use Visual Studio Code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;code script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, add the following code to the new file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http://localhost:5000/Api/TodoItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course, make sure that you’ve started the API. Also, change the port number if necessary.&lt;/p&gt;

&lt;p&gt;After saving the test script, you can test it by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k6 run script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The results should look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          /\      |‾‾| /‾‾/   /‾‾/   
     /\  /  \     |  |/  /   /  /    
    /  \/    \    |     (   /   ‾‾\  
   /          \   |  |\  \ |  (‾)  | 
  / __________ \  |__| \__\ \_____/ .io

  execution: local
     script: script.js
     output: -

  scenarios: (100.00%) 1 scenario, 1 max VUs, 10m30s max duration (incl. graceful stop):
           * default: 1 iterations for each of 1 VUs (maxDuration: 10m0s, gracefulStop: 30s)


running (00m00.1s), 0/1 VUs, 1 complete and 0 interrupted iterations
default ✓ [ 100% ] 1 VUs  00m00.1s/10m0s  1/1 iters, 1 per VU

     data_received..................: 1.8 kB 33 kB/s
     data_sent......................: 816 B  15 kB/s
     http_req_blocked...............: avg=22ms    min=5ms     med=22ms    max=39ms    p(90)=35.6ms   p(95)=37.3ms 
     http_req_connecting............: avg=499.9µs min=0s      med=499.9µs max=999.8µs p(90)=899.82µs p(95)=949.8µs
     http_req_duration..............: avg=3.99ms  min=999.7µs med=3.99ms  max=6.99ms  p(90)=6.39ms   p(95)=6.69ms 
       { expected_response:true }...: avg=3.99ms  min=999.7µs med=3.99ms  max=6.99ms  p(90)=6.39ms   p(95)=6.69ms 
     http_req_failed................: 0.00%  ✓ 0 ✗ 2
     http_req_receiving.............: avg=0s      min=0s      med=0s      max=0s      p(90)=0s       p(95)=0s     
     http_req_sending...............: avg=0s      min=0s      med=0s      max=0s      p(90)=0s       p(95)=0s     
     http_req_tls_handshaking.......: avg=19ms    min=0s      med=19ms    max=38ms    p(90)=34.2ms   p(95)=36.1ms 
     http_req_waiting...............: avg=3.99ms  min=999.7µs med=3.99ms  max=6.99ms  p(90)=6.39ms   p(95)=6.69ms 
     http_reqs......................: 2      37.030248/s
     iteration_duration.............: avg=54ms    min=54ms    med=54ms    max=54ms    p(90)=54ms     p(95)=54ms   
     iterations.....................: 1      18.515124/s
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#improving-the-test"&gt;
  &lt;/a&gt;
  Improving The Test
&lt;/h4&gt;

&lt;p&gt;You’ve just written and run your first k6 test script. Congrats! However, we need to beef it up a little bit so it compares with the test we’ve done using wrk. Our k6 test is, at the moment, a simple request. It sends a get request to the specified URL and then waits for 1 second.&lt;/p&gt;

&lt;p&gt;When running a test with k6, you can pass parameters to the test. Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;k6 --vus 400 --duration 30s run script.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can see we’ve used two parameters here.  The &lt;strong&gt;--duration&lt;/strong&gt; option defines that the test should run for 30 seconds.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;--vus&lt;/strong&gt; option stands for &lt;a href="https://k6.io/docs/misc/glossary/#virtual-users"&gt;virtual users&lt;/a&gt;, which are used to send the requests to the system under test.To understand the concept of VUs, think of them like parallel infinite loops. If you go back to our script, you'll see there is a &lt;code&gt;default&lt;/code&gt; function. Scripts in k6 need to have that &lt;code&gt;default&lt;/code&gt; function as a requirement. That's the entry point for the test script. The code inside such a function is what the VUs execute; it gets executed over and over again, for the whole duration of the tests.&lt;/p&gt;

&lt;p&gt;Besides the &lt;code&gt;default&lt;/code&gt; function, you can have additional code. However, code outside &lt;code&gt;default&lt;/code&gt; is run only once per VU. You use that code for initialization duties, such as importing different modules or loading something from your filesystem.&lt;/p&gt;

&lt;p&gt;That being said, let’s see what the result of the command’s execution looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;          /\      |‾‾| /‾‾/   /‾‾/   
     /\  /  \     |  |/  /   /  /    
    /  \/    \    |     (   /   ‾‾\  
   /          \   |  |\  \ |  (‾)  | 
  / __________ \  |__| \__\ \_____/ .io

  execution: local
     script: script.js
     output: -

  scenarios: (100.00%) 1 scenario, 400 max VUs, 1m0s max duration (incl. graceful stop):
           * default: 400 looping VUs for 30s (gracefulStop: 30s)


running (0m00.9s), 400/400 VUs, 8 complete and 0 interrupted iterations
default   [   3% ] 400 VUs  00.9s/30s

...

running (0m30.0s), 000/400 VUs, 202254 complete and 0 interrupted iterations
default ✓ [ 100% ] 400 VUs  30s

     data_received..................: 60 MB  2.0 MB/s
     data_sent......................: 36 MB  1.2 MB/s
     http_req_blocked...............: avg=1.66ms   min=0s    med=0s      max=2.68s p(90)=0s      p(95)=0s     
     http_req_connecting............: avg=213.12µs min=0s    med=0s      max=1.32s p(90)=0s      p(95)=0s     
     http_req_duration..............: avg=27.65ms  min=0s    med=24ms    max=1.96s p(90)=40ms    p(95)=54.99ms
       { expected_response:true }...: avg=27.65ms  min=0s    med=24ms    max=1.96s p(90)=40ms    p(95)=54.99ms
     http_req_failed................: 0.00%  ✓ 0     ✗ 404508
     http_req_receiving.............: avg=703.91µs min=0s    med=0s      max=1.35s p(90)=0s      p(95)=999.1µs
     http_req_sending...............: avg=167.24µs min=0s    med=0s      max=1.39s p(90)=0s      p(95)=0s     
     http_req_tls_handshaking.......: avg=1.3ms    min=0s    med=0s      max=2.65s p(90)=0s      p(95)=0s     
     http_req_waiting...............: avg=26.77ms  min=0s    med=24ms    max=1.46s p(90)=39.99ms p(95)=51ms   
     http_reqs......................: 404508 13474.167948/s
     iteration_duration.............: avg=59.23ms  min=998µs med=49.99ms max=2.84s p(90)=78.99ms p(95)=98.99ms
     iterations.....................: 202254 6737.083974/s
     vus............................: 380    min=380 max=400 
     vus_max........................: 400    min=400 max=400 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What you see above is what the results look like for me after running the latest version of the command. As you can see, there’s a lot going on here. Let’s walk through some of the main pieces of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;code&gt;data_received&lt;/code&gt;: that’s the total amount of data received (109 MB) at a rate of 3.4 MB per second;&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;http_req_duration&lt;/code&gt;: information about the duration of the HTTP requests performed, including the average, median, minimum and maximum values;&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;http_req_failed&lt;/code&gt;: the rate of requests that failed;&lt;/li&gt;
&lt;li&gt;  &lt;code&gt;http_req_waiting&lt;/code&gt;: time spent waiting for the server’s response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To learn more about the metrics displayed in k6’s results, you can &lt;a href="https://k6.io/docs/using-k6/metrics/"&gt;refer to the documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-with-a-higher-load"&gt;
  &lt;/a&gt;
  Testing With a Higher Load
&lt;/h3&gt;

&lt;p&gt;We’ll now perform a different test, sending a PUT request instead of a GET one. We’ll also use an additional option of k6 that allows us to simulate an increase in the load on our application.&lt;/p&gt;

&lt;p&gt;For that, I’ll create a new test script and name it script2.js. Here’s what its code looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://localhost:5001/api/TodoItems/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;15s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;30s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;15s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;  

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Accept&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;*/*&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Host&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localhost:5001&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Send e-mail&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;isComplete&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;      
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, in the script above we’re sending a PUT request to our API, trying to add a new TodoItem resource. Before that, though, we create an &lt;code&gt;options&lt;/code&gt; variable in which we define three stages for our test. In the first one, which lasts for 15 seconds, k6 will increase the number of VUs from 0 to 100. Then, it will ramp up to 500 for another 30seconds, before ramping down to 0 in the last 15 seconds.&lt;/p&gt;

&lt;p&gt;Here’s what the results look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
          /\      |‾‾| /‾‾/   /‾‾/   
     /\  /  \     |  |/  /   /  /    
    /  \/    \    |     (   /   ‾‾\  
   /          \   |  |\  \ |  (‾)  | 
  / __________ \  |__| \__\ \_____/ .io

  execution: local
     script: script2.js
     output: -

  scenarios: (100.00%) 1 scenario, 500 max VUs, 1m30s max duration (incl. graceful stop):
           * default: Up to 500 looping VUs for 1m0s over 3 stages (gracefulRampDown: 30s, gracefulStop: 30s)


running (0m00.8s), 006/500 VUs, 6743 complete and 0 interrupted iterations
default   [   1% ] 006/500 VUs  0m00.8s/1m00.0s

...

running (1m00.0s), 000/500 VUs, 671850 complete and 0 interrupted iterations
default ✓ [ 100% ] 000/500 VUs  1m0s

     data_received..............: 32 MB   537 kB/s
     data_sent..................: 84 MB   1.4 MB/s
     http_req_blocked...........: avg=73.54µs min=0s med=0s      max=530.01ms p(90)=0s      p(95)=0s     
     http_req_connecting........: avg=16.56µs min=0s med=0s      max=212ms    p(90)=0s      p(95)=0s     
     http_req_duration..........: avg=19.56ms min=0s med=14ms    max=307.99ms p(90)=41.99ms p(95)=55ms   
     http_req_failed............: 100.00% ✓ 671850 ✗ 0    
     http_req_receiving.........: avg=34.6µs  min=0s med=0s      max=229.99ms p(90)=0s      p(95)=0s     
     http_req_sending...........: avg=85.33µs min=0s med=0s      max=157ms    p(90)=0s      p(95)=999µs  
     http_req_tls_handshaking...: avg=56.37µs min=0s med=0s      max=364ms    p(90)=0s      p(95)=0s     
     http_req_waiting...........: avg=19.44ms min=0s med=14ms    max=272.99ms p(90)=41ms    p(95)=54.99ms
     http_reqs..................: 671850  11196.657731/s
     iteration_duration.........: avg=20.07ms min=0s med=14.99ms max=632.99ms p(90)=42.99ms p(95)=56.99ms
     iterations.................: 671850  11196.657731/s
     vus........................: 1       min=1    max=500
     vus_max....................: 500     min=500  max=500
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#heres-where-a-scriptable-tool-shines-testing-a-user-scenario"&gt;
  &lt;/a&gt;
  Here's Where a Scriptable Tool Shines: Testing a User Scenario
&lt;/h2&gt;

&lt;p&gt;Up until now, we’ve been testing using fairly simple scripts. You might be wondering what’s all the fuss about scriptable tools after all. Well, here’s the thing: a non-scriptable tool might be enough if you only need to perform basic requests.&lt;/p&gt;

&lt;p&gt;However, there are scenarios in which a non-scriptable tool can really make a difference. One of those is where you need to test a user scenario. In other words, you might need to verify a real usage workflow in your app. You simply can’t do that with a non-scriptable tool.&lt;/p&gt;

&lt;p&gt;Up until now, we've been testing an endpoint in isolation. Often, when monitoring your services, you might have found a REST API underperforming at a certain load level and want to simulate this behavior again. A non-scriptable tool is often enough for this type of testing.&lt;/p&gt;

&lt;p&gt;Such a type of verification, however, isn’t the most realistic. Why? Well, users don’t behave like that. They don’t do things in a completely isolated way. In the real world, your application continuously responds to a flow of real-user interactions, e.g., visit a page, log in, list items, purchase some items, and so on.&lt;/p&gt;

&lt;p&gt;Testing real-world scenarios allow you to validate critical business logic or the most frequent user flows. If you want to mimic this type of interaction, a scriptable tool makes this job possible and more manageable.&lt;/p&gt;

&lt;p&gt;The following script is a simple example of how testing a user workflow could look like. Using k6, we hit the GET endpoint, retrieving the existing resources. We then get the id of the first object, and use that to send another get  request, obtaining that resource. After that, we set the value of the &lt;code&gt;completed&lt;/code&gt; attribute and send a PUT request to update the resource on the server. Finally, we use a check to verify whether the response has the expected status code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6/http&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="nx"&gt;sleep&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;k6&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;vus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;40s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://localhost:5001/api/TodoItems&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// getting all todo items&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// parsing the response body&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// retrieving the id from the first resource&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;idFirstItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// retrieving the resource with the selected id&lt;/span&gt;
  &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;idFirstItem&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// setting the item as complete&lt;/span&gt;
  &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;complete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// updating the item&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;http&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;idFirstItem&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;headers&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// checking the response has the 204 (no content) status code&lt;/span&gt;
  &lt;span class="nx"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;is status 204&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// random think time between 0 and 5 seconds&lt;/span&gt;
  &lt;span class="nx"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the previous example, the test runs the same user flow continuously until the test duration ends. But with k6, and you can also simulate different user flows with varying load patterns to run simultaneously. This flexibility allows you to test your application more precisely.&lt;/p&gt;

&lt;p&gt;For example, you could run 50 virtual users doing some actions and 100 virtual users doing something different for a different period while generating a constant request rate to one endpoint.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

  &lt;span class="na"&gt;scenarios&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;scenario1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;constant-vus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1m&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;vus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userFlowA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;scenario2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ramping-vus&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;stages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1m&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;30s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;userFlowB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;

    &lt;span class="na"&gt;scenario3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;constant-arrival-rate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;rate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;timeUnit&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1s&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1m&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;preAllocatedVUs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hammerEndpointA&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To learn more about configuring advanced traffic patterns, check out the &lt;a href="https://k6.io/docs/using-k6/scenarios/"&gt;Scenarios API&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#heres-where-k6-shines-setting-performance-goals"&gt;
  &lt;/a&gt;
  Here's Where k6 Shines: Setting Performance Goals
&lt;/h2&gt;

&lt;p&gt;The ability to set performance goals for your application is an aspect that differentiates k6 from other load testing tools. With k6, you can verify the performance of your app against expected baselines in a way that’s &lt;a href="https://k6.io/unit-testing-for-performance/"&gt;not that different from assertions in unit testing&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How does that work in practice? There are two main options that k6 provides: checks and thresholds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://k6.io/docs/using-k6/checks/"&gt;Checks &lt;/a&gt; allow you to set expectations in your script and verify those expectations automatically. We’ve used one check in our previous example. Even if the checks fail, the execution of the script doesn’t stop. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://k6.io/docs/using-k6/thresholds/"&gt;Thresholds&lt;/a&gt;, on the other hand, do interrupt the script’s execution. They’re criteria you can use to fail your load test script when the system under test doesn’t meet the expectations.&lt;/p&gt;

&lt;p&gt;Here are some examples of thresholds you could use:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The system generates at the most 1% errors.&lt;/li&gt;
&lt;li&gt;Response time for 99% of requests should be below 400ms.&lt;/li&gt;
&lt;li&gt;Response time for a specific endpoint must always be below 300ms.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since k6 allows you to define custom metrics, you can always define thresholds on them as well. Here’s an example of what thresholds look like in an actual script:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;thresholds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;http_req_failed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;rate&amp;lt;0.01&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;   &lt;span class="c1"&gt;// http errors should be less than 1% &lt;/span&gt;
    &lt;span class="na"&gt;http_req_duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p(99)&amp;lt;400&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;// 99% of requests should be below 400ms&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#k6-when-unit-tests-meet-load-testing"&gt;
  &lt;/a&gt;
  k6: When Unit Tests Meet Load Testing
&lt;/h2&gt;

&lt;p&gt;In this post, you’ve learned how to get started with load testing using k6. We’ve covered some fundamentals on load testing: you’ve learned the definition of this technique, and the differences between scriptable and non-scriptable load testing tools.&lt;/p&gt;

&lt;p&gt;k6 belongs to the latter group. It allows developers to author test scenarios in JavaScript—a language they’re likely to already know. Because of that, k6 is a powerful tool, enabling the performing not only of HTTP benchmarking, but also the verification of realistic usage scenarios.&lt;/p&gt;

&lt;p&gt;Perhaps the greatest differentiator of k6 is that it bridges the gap between unit testing and load testing. Developers can use the same workflow they’ve been using for years: creating tests, adding verifications with pass/fail criteria, adding those to the CI/CD pipeline, and then be notified when the tests do fail.&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>aspnet</category>
      <category>performance</category>
      <category>testing</category>
    </item>
    <item>
      <title>Build a LinkedIn Clone Using just HTML &amp; CSS</title>
      <author>Somanath Goudar</author>
      <pubDate>Thu, 06 May 2021 07:44:35 +0000</pubDate>
      <link>https://dev.to/somanathgoudar/build-a-linkedin-clone-using-just-html-css-3p1n</link>
      <guid>https://dev.to/somanathgoudar/build-a-linkedin-clone-using-just-html-css-3p1n</guid>
      <description>&lt;p&gt;I Built LinkedIn Clone using just HTML &amp;amp; CSS. I Just Love to build these to practice my HTML &amp;amp; CSS Skills. I made a tutorial video to help beginners to improve there html &amp;amp; css skills to build real world projects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tutorial Video:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/RnN6r0fTbvQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Github:&lt;/strong&gt; &lt;a href="https://github.com/somanath-goudar/html-css-projects"&gt;https://github.com/somanath-goudar/html-css-projects&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want to improve your HTML &amp;amp; CSS skills? Then Watch this video and follow along with me where we build LinkedIn Clone using just HTML &amp;amp; CSS. We will be using flexbox and Google font Icons in this project.&lt;/p&gt;

&lt;p&gt;Hope You Guys Enjoyed the Video. Like Share Comment and Subscribe to my channel for more videos like these.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Channel:&lt;/strong&gt; &lt;a href="https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA"&gt;https://www.youtube.com/channel/UC_nTrhTr5fnBGjOxnkPUmmA&lt;/a&gt;&lt;br&gt;
Subscribe to My YouTube Channel, Next Week I Will be building &lt;strong&gt;Tiktok Clone&lt;/strong&gt; &amp;amp; &lt;strong&gt;Instagram Reels Clone&lt;/strong&gt; with just HTML &amp;amp; CSS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You may also like my other posts:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-youtube-clone-with-just-html-css-for-complete-beginners-4fk1" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build a YouTube Clone with just HTML &amp;amp; CSS + Responsive - For  Beginners&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ Mar 21 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/somanathgoudar" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnNEMcDo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--15QGQnyq--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/600953/fdee0195-6d25-410d-9d97-c10ffaa4eb7d.jpeg" alt="somanathgoudar image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/somanathgoudar/build-a-password-generator-with-react-js-react-toastify-beginners-tutorial-4a9n" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Build A Password Generator with React JS - react-toastify - Beginners Tutorial&lt;/h2&gt;
      &lt;h3&gt;Somanath Goudar ・ Mar 23 ・ 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#react&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


</description>
      <category>html</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 HTML5 tags you did not hear about</title>
      <author>Shiva Bhusal</author>
      <pubDate>Thu, 06 May 2021 07:37:51 +0000</pubDate>
      <link>https://dev.to/shivabhusal/5-html5-tags-you-did-not-hear-about-k3n</link>
      <guid>https://dev.to/shivabhusal/5-html5-tags-you-did-not-hear-about-k3n</guid>
      <description>&lt;p&gt;Generally, programmers and Front End Engineers consider HTML a relatively easier language to learn. Yes, it is easier because you don't have to memorize thousands of language constructs and syntax. However, there are a few tags that are used very rarely which I am going to uncover today.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-ltbasegt"&gt;
  &lt;/a&gt;
  1. &amp;lt;base&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Specifies the base URL and/or target for the relative URLs on the page.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;base&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://ohmycheatsheet.com/images/"&lt;/span&gt; &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"demo2x2.jpg"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"104"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"puzzle cube"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/html/"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;HTML Code&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-ltinsgt"&gt;
  &lt;/a&gt;
  2. &amp;lt;ins&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Text that has been inserted.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The Rubik's Cube World Record is 
&lt;span class="nt"&gt;&amp;lt;del&amp;gt;&lt;/span&gt;4.90&lt;span class="nt"&gt;&amp;lt;/del&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;ins&amp;gt;&lt;/span&gt;4.73&lt;span class="nt"&gt;&amp;lt;/ins&amp;gt;&lt;/span&gt; seconds.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-ltparamgt"&gt;
  &lt;/a&gt;
  3. &amp;lt;param&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Parameter for an object element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;object&lt;/span&gt; &lt;span class="na"&gt;data=&lt;/span&gt;&lt;span class="s"&gt;"sound.mp3"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;param&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"autoplay"&lt;/span&gt; &lt;span class="na"&gt;value=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/object&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#4-ltkbdgt"&gt;
  &lt;/a&gt;
  4. &amp;lt;kbd&amp;gt;
&lt;/h2&gt;

&lt;p&gt;Keyboard input.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Normal text and &lt;span class="nt"&gt;&amp;lt;kbd&amp;gt;&lt;/span&gt;Keyboard input&lt;span class="nt"&gt;&amp;lt;/kbd&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#5-ltkeygengt"&gt;
  &lt;/a&gt;
  5. &amp;lt;keygen&amp;gt;
&lt;/h2&gt;

&lt;p&gt;A Keypair generator field for forms. Not recommended to use because it's not supported in IE/Edge.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"/action.php"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"post"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Name: &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    Encryption: &lt;span class="nt"&gt;&amp;lt;keygen&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"encript"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;See &lt;a href="https://ohmycheatsheet.com/html-cheat-sheet/"&gt;https://ohmycheatsheet.com/html-cheat-sheet/&lt;/a&gt; for more.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>cheat</category>
    </item>
  </channel>
</rss>
