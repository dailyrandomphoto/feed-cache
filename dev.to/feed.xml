<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Coop : An App for Students</title>
      <author>param-19</author>
      <pubDate>Thu, 02 Dec 2021 16:39:44 +0000</pubDate>
      <link>https://dev.to/parambhatt/coop-an-app-for-students-14jb</link>
      <guid>https://dev.to/parambhatt/coop-an-app-for-students-14jb</guid>
      <description>&lt;p&gt;//Include all the motivation here&lt;br&gt;
With the corona pandemic, a lot of the work that was generally done offline or via certified institutions has shifted online. This has resulted in massive amounts of information and numerous courses available online,that we as teenagers, college students cannot verify it nor completely rely on them. There are forums like reddit and quora, but the issue of trustable information or guidelines is still missing. Hence, we present coop, an application that can be used by a closed community to interact and share knowledge. The issue of trust is resolved simply because of the closed community, for example, we as BITSians will trust any information given to us by a fellow BITSian, who has not only any motivation to cheat with us, but also is an alumni and a part of the culture. &lt;/p&gt;

&lt;p&gt;//Choice of technology&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Kotlin : One of the open source languages recognised by google for android development, it has extensive support across platforms and communities, and is completely interoperable with java. It is very easy to learn, and reduces the boiler plate code ( or the extra code that we need to write ), for example, in java. It has a byte code structure, which enhances the performance of our apps. In addition, it allows both inline and lambda functions making the execution speed even lower than the same code in java!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Firebase : We went for the firebase firestore ( cloud db ), since our app is yet on the beginning stage, and doesnt have such a userbase that needs a real time database. Provided by google, it reduces the need to work with several third party environments and also allows server code if the need ever comes to that. For an app like ours, a no sql database is preferred because of the dexterity and flexibility that is offered by the entire data structure making firebase just the ideal choice.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//Sign in page&lt;br&gt;
When a user first opens our app, the first thing he sees is a splash screen of our app icon, and our app then checks if the user has signed in or not. In the case that the user hasnt signed in, hes given an option to sign in with google. Firebase handles the signing in and storing of the user on our application. Simultaneously, we also add the name and user details to our custom user database for our purposes. Once the sign in is verified, he is redirected to his home page.&lt;/p&gt;

&lt;p&gt;//General layout&lt;br&gt;
All our application activities have an additional sidepanel and topbar. The topbar is a search bar, that can be used for searching through all the topics that our application has so far. The sidepanel is used for navigating through the application, and moving through the various activities. Currently, the sidepanel has the user information ( the user name, the user email and the user profile photo ), the home page, the user profile page and the facility to navigate through to any of his followed topics within the application.&lt;/p&gt;

&lt;p&gt;//Home page &lt;br&gt;
The home page is, as the name suggests, the home page for the user. This is where he can see all the posts of the respective topics to which he has subscribed, including both the old and the new posts. The user can also see the topic to which the post belongs to, and can click on it and navigate to the individual post view if he wishes to. &lt;/p&gt;

&lt;p&gt;//Sidepanel&lt;br&gt;
The sidepanel has 3 main subparts : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The profile part : This part contains the user name, email and profile photo. On clicking on this part, the user is directed to profile page&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The home part : This is a home tab, with the help of which the user can navigate back to his home page of the application anytime he wishes to. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The following topic part : The following tab, is a scrollable list of all the topics that the user has been following at that point of time. He can navigate to any of the topics from the tabs, and go see all the posts within the respective topic as and when he wishes to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//Search bar&lt;br&gt;
The search bar is present across the application, which you can use to search for topics that are present in the application, whether the user is already following it or wishes to explore a new topic.&lt;/p&gt;

&lt;p&gt;//Profile page&lt;br&gt;
The profile page is the page that contains all the information that we as developers have for each individual user. The layout has been segmented into 3 different tabs : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The user-info tab :&lt;br&gt;
This tab displays the user based information like user name, their email, their profile picture etc. In the future, we also aim to include more information for users and customization options for them. Additionally, this also contains the sign out functionality from which a user can signout. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The posts tab :&lt;br&gt;
This tab contains the various posts that a user has made, be it whichever topic he has contributed to. He can see the post title, the post body as well as the topic name so that he has complete information about his content, and can navigate to see the entire post properly in the post view from there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The comments tab :&lt;br&gt;
This tab contains all the comments that the user has made across various posts and topics. In effect, this is all the content contributed by the user and he can once more, navigate across the app to the respective post on which he commented on clicking on the comments.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;//Topic view&lt;br&gt;
The topic view has the heading with the topic name, referring to the respective topic which you are viewing. You can reach here either by searching for it, or going to it from the user sidepanel. This also shows the number of followers the topic currently has, and gives the user option to follow the topic or unfollow it if he is already following it.&lt;br&gt;
Below the header, the posts within the topics are shown to the user, and he can navigate to the respective posts by clicking on them. &lt;br&gt;
Finally, there is also a floating action button, that can be used by the user to make a post within the respective topic. If he wishes to make a post under a different topic, he will have to search up the topic, go within it and then click on the make post button there.  &lt;/p&gt;

&lt;p&gt;//Post view&lt;br&gt;
The post view has the post title as its header, and the post body below it. The post body currently allowed is text only, we plan to add media support to the body very soon. The view also has the number of upvotes/downvotes that are given by the other users of the community. The user can also choose to upvote/downvote the post depending on how useful he found the content, and help the community. In addition, he also gets the option to comment his opinion,findings,inferences etc about the post in a textview below, and other users can also read them to gain valuable insights about it. &lt;/p&gt;

&lt;p&gt;//Make a post&lt;br&gt;
Coming to contributing to the community, the users can make posts within respective topics. The process is relatively very simple : All they have to do is enter the topic title, and the topic body ( blanks are not allowed ), and press the floating tick button to post it. Once he makes a post, he is redirected back to the topic view, where he can see that his post has been posted successfully.&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>android</category>
      <category>firebase</category>
    </item>
    <item>
      <title>Understanding Primitives and Reference Types in JavaScript</title>
      <author>The Nerdy Dev</author>
      <pubDate>Thu, 02 Dec 2021 16:31:21 +0000</pubDate>
      <link>https://dev.to/thenerdydev/understanding-primitives-and-reference-types-in-javascript-824</link>
      <guid>https://dev.to/thenerdydev/understanding-primitives-and-reference-types-in-javascript-824</guid>
      <description>&lt;p&gt;Hey guys üëãüèª,&lt;br&gt;
In this article, let us cover the topic of &lt;strong&gt;Understanding Primitives and Reference Types in JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This article was first published on&lt;/em&gt; &lt;a href="https://the-nerdy-dev.com/"&gt;https://the-nerdy-dev.com/&lt;/a&gt;.&lt;br&gt;
&lt;em&gt;Check the website for more interesting articles and tutorials on Web Development.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cgAjMsH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjo7hc266flq3kpxnhq4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgAjMsH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xjo7hc266flq3kpxnhq4.png" alt="Image description" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Primitive value is stored directly in the location that the variable accesses. And the Reference values are objects that are stored in the heap. Reference value stored in the variable location is a pointer to a location in memory where the object is stored. &lt;strong&gt;This is something that I will demonstrate just a bit later. So stay with me&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#basic-primitive-types-and-reference-types"&gt;
  &lt;/a&gt;
  Basic Primitive Types and Reference Types
&lt;/h2&gt;

&lt;p&gt;JavaScript supports 5 &lt;em&gt;primitive&lt;/em&gt; data types: &lt;em&gt;number, string, Boolean, undefined, and null.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These types are &lt;em&gt;referred&lt;/em&gt; to as &lt;strong&gt;primitive&lt;/strong&gt; types because they are the basic building blocks from which more complex types can be built. Of these five, only number, string, and boolean are real data types in the sense of actually storing data.&lt;/p&gt;

&lt;p&gt;Undefined and null are types that arise under special circumstances. The primitive type has a fixed size in memory. For example, a number occupies eight bytes of memory, and a boolean value can be represented with only one bit.&lt;/p&gt;

&lt;p&gt;Contrary to this, reference types can be of any length. They don't have a fixed size. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;For primitives, they are always copied as a whole value whereas for reference types they are copied by reference.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For variables that hold values we only compare their values whereas in case of reference types like objects, it is not the case.&lt;/p&gt;

&lt;p&gt;Consider this example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XPOFBSFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrb7l4p8tn35grufobmw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XPOFBSFj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nrb7l4p8tn35grufobmw.png" alt="Image description" width="830" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SUSmylPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wz8no3e0lvci9v815bq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SUSmylPb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2wz8no3e0lvci9v815bq.png" alt="Image description" width="880" height="597"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The above log gives true because both a and b are referencing to the exact same memory location. So let us say the memory for the arrow was allocated at some memory address of say 4k. So a is a reference that will point to the array object that is sitting at memory address 4k. So if you then assign a to b like we do above, then we have a new reference that points to the exact same object in the memory. So therefore since both the references point to the exact same object in the memory that is why it gives true for the strictly equality comparison between a and b (for the above log).&lt;/p&gt;

&lt;p&gt;But if I declare another array with the exact same content say c&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and then do this  :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNyzlIhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b2t3409yxzf8roeeod4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZNyzlIhQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9b2t3409yxzf8roeeod4.png" alt="Image description" width="880" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then the above log will resolve to false because this new array will get allocated at a different memory location say 5k. So if we compare a and c using a strict equality comparison, then it will resolve to false because both the references a and c point to different memory locations namely 4k and 5k respectively and hence you get false.&lt;/p&gt;

&lt;p&gt;Now consider example for  primitives. For this case you just compare the values. So if we have :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valueOne&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valueTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valueThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;and then we say :&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valueOne&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;valueTwo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then for the above log we make sure that both the type and the value are equal for the things (primitives under comparison). Both are 3 and both are numbers so hence we get true for this.&lt;/p&gt;

&lt;p&gt;Next if we say&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valueOne&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;valueThree&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This will resolve to false because 3 and 4 are not equal.&lt;/p&gt;

&lt;p&gt;So this is it for this article. Thanks for reading. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you enjoy my articles, consider following me on Twitter for more interesting stuff :&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xdzF7_iP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lf9dc7pby59jmgkstw74.png" alt="Image description" width="284" height="255"&gt;&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;‚ö°Twitter : &lt;a href="https://twitter.com/The_Nerdy_Dev"&gt;https://twitter.com/The_Nerdy_Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave a like if you loved the article. Also share it with your friends and colleagues.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MGpya8n1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3qpl01uwp1qlmbqkhfpm.gif" alt="Alt Text" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PS&lt;/strong&gt; - If you are looking to learn Web Development, I have curated a &lt;strong&gt;FREE&lt;/strong&gt; course for you on my YouTube Channel, check the below article :&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/thenerdydev" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dvgjnxQX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j2i8W0Wf--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/297820/e861379b-e75a-48e5-bc39-44b3e940c086.png" alt="thenerdydev"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/thenerdydev/2021-web-developer-full-course-html-css-javascript-node-js-and-mongodb-27pb" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;(2021) - Web Developer Full Course : HTML, CSS, JavaScript, Node.js and MongoDB&lt;/h2&gt;
      &lt;h3&gt;The Nerdy Dev „Éª Apr 28 „Éª 2 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#html&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#node&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#javascript&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>100daysofcode</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Teaful DevTools Released!</title>
      <author>Aral Roca</author>
      <pubDate>Thu, 02 Dec 2021 16:10:06 +0000</pubDate>
      <link>https://dev.to/aralroca/teaful-devtools-released-37lp</link>
      <guid>https://dev.to/aralroca/teaful-devtools-released-37lp</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Original article: &lt;a href="https://aralroca.com/blog/teaful-devtools"&gt;https://aralroca.com/blog/teaful-devtools&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Very recently, &lt;strong&gt;2 weeks ago&lt;/strong&gt;, we released &lt;a href="https://github.com/teafuljs/teaful"&gt;Teaful&lt;/a&gt;; a tiny, easy and powerful React State management. If you want to know more about Teaful, I recommend &lt;a href="https://aralroca.com/blog/teaful"&gt;this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Teaful was &lt;strong&gt;well received&lt;/strong&gt; (+500 GH stars) and one of the most requested features was to implement a devtool to debug the stores. Today we released &lt;strong&gt;&lt;a href="https://github.com/teafuljs/teaful-devtools"&gt;Teaful DevTools&lt;/a&gt;&lt;/strong&gt;. In this short article I will explain a little about how to use it and its benefits.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2GrMRcEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools.png" class="article-body-image-wrapper"&gt;&lt;img alt="Teaful DevTools" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2GrMRcEO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools.png" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-it"&gt;
  &lt;/a&gt;
  How to use it
&lt;/h2&gt;

&lt;p&gt;4 simple steps: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Install DevTools extension&lt;/strong&gt;: For the moment only in &lt;a href="https://chrome.google.com/webstore/detail/teaful-devtools/lficdnnjoackdnaddfcgllmjdocofadc"&gt;Chrome&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Install the bridge&lt;/strong&gt;: &lt;code&gt;yarn add teaful-devtools&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use the bridge&lt;/strong&gt;: &lt;code&gt;import 'teaful-devtools'&lt;/code&gt; &lt;small&gt;(~200 B)&lt;/small&gt; Must be the first import.&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;teaful-devtools&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open the DevTools and try it&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details in the &lt;a href="https://github.com/teafuljs/teaful-devtools"&gt;README&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#debug-stores-changes"&gt;
  &lt;/a&gt;
  Debug stores changes
&lt;/h2&gt;

&lt;p&gt;For each store it is possible to view the &lt;strong&gt;history of changes&lt;/strong&gt; that have been made to the store. To debug, we can know &lt;strong&gt;WHEN&lt;/strong&gt; the change was made, &lt;strong&gt;WHAT&lt;/strong&gt; / &lt;strong&gt;WHERE&lt;/strong&gt; was changed, but also &lt;strong&gt;WHO&lt;/strong&gt; / &lt;strong&gt;HOW&lt;/strong&gt; / &lt;strong&gt;WHY&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uhiaBKs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-details.png" class="article-body-image-wrapper"&gt;&lt;img alt="Teaful DevTools" src="https://res.cloudinary.com/practicaldev/image/fetch/s--uhiaBKs7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-details.png" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when"&gt;
  &lt;/a&gt;
  When
&lt;/h3&gt;

&lt;p&gt;There is no secret, the changes have their own timestamp and are sorted by arrival.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-where"&gt;
  &lt;/a&gt;
  What / Where
&lt;/h3&gt;

&lt;p&gt;For each modification, you'll be able to see which part of the store has changed and what's the new value (the diff).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#who-how-why"&gt;
  &lt;/a&gt;
  Who / How / Why
&lt;/h3&gt;

&lt;p&gt;You can view the &lt;strong&gt;entire stack trace&lt;/strong&gt; and go to the line in the source file.&lt;/p&gt;

&lt;p&gt;Clicking on a file link opens the &lt;strong&gt;source devtools tab&lt;/strong&gt; where you can &lt;strong&gt;view the code&lt;/strong&gt; part to see how the change was produced. To understand more of the context you can also navigate to the function that called this function to see all the code involved. For more context you can put a breakpoint in the source tab to see the value of each variable that caused the change.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KvTzayHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-source.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Teaful DevTools source" src="https://res.cloudinary.com/practicaldev/image/fetch/s--KvTzayHz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-source.gif" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#modify-the-store-from-teaful-devtools"&gt;
  &lt;/a&gt;
  Modify the store from Teaful DevTools
&lt;/h2&gt;

&lt;p&gt;From Teaful DevTools you can generate a change to the store and see how the UI reacts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--i50lIi6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-modify.gif" class="article-body-image-wrapper"&gt;&lt;img alt="Teaful DevTools modify store" src="https://res.cloudinary.com/practicaldev/image/fetch/s--i50lIi6e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-modify.gif" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dark-amp-light-mode"&gt;
  &lt;/a&gt;
  Dark &amp;amp; light mode
&lt;/h2&gt;

&lt;p&gt;The dark / light theme adapts to your devtools configuration.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8SJXpxRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-dark.png" class="article-body-image-wrapper"&gt;&lt;img alt="Teaful DevTools dark theme" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8SJXpxRG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-dark.png" width="" height=""&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--85za8oZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-light.png" class="article-body-image-wrapper"&gt;&lt;img alt="Teaful DevTools light theme" src="https://res.cloudinary.com/practicaldev/image/fetch/s--85za8oZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-light.png" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#view-rerenders-performance"&gt;
  &lt;/a&gt;
  View rerenders / performance
&lt;/h2&gt;

&lt;p&gt;It's a feature that has not been implemented in Teaful DevTools because we consider that React DevTools does it very well.&lt;/p&gt;

&lt;p&gt;You can use React DevTools to debug the rerenders and the performance.&lt;/p&gt;


&lt;img alt="React DevTools Teaful performance" src="https://res.cloudinary.com/practicaldev/image/fetch/s--mDPSGpaF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://aralroca.com/images/blog-images/teaful-devtools-performance.gif" width="" height=""&gt;

&lt;h2&gt;
  &lt;a href="#how-to-strip-devtools-from-production"&gt;
  &lt;/a&gt;
  How to strip devtools from production
&lt;/h2&gt;

&lt;p&gt;Most bundlers allow you strip out code when they detect that a branch inside an if-statement will never be hit. We can use this to only include &lt;code&gt;teaful-devtools&lt;/code&gt; during development and save those precious bytes in a production build.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Must be the first import&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NODE_ENV&lt;/span&gt;&lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;development&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Must use require here as import statements are only allowed&lt;/span&gt;
  &lt;span class="c1"&gt;// to exist at top-level.&lt;/span&gt;
  &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;teaful-devtools&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;render&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preact&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./components/App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;App&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure to set the &lt;code&gt;NODE_ENV&lt;/code&gt; variable to the correct value in your build tool.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h2&gt;

&lt;p&gt;We have released Teaful DevTools to debug the changes from the stores: when, what, where, who, how, why. And vice versa, to trigger a change from Teaful DevTools to see how the UI reacts.&lt;/p&gt;

&lt;p&gt;At the moment it's only available for Chrome, but in future releases it will also be available for Firefox and Edge.&lt;/p&gt;

&lt;p&gt;You can leave any suggestions on &lt;a href="https://github.com/teafuljs/teaful-devtools"&gt;GitHub&lt;/a&gt; &lt;em&gt;(issue / PR)&lt;/em&gt; and it will be taken into account. Remember that &lt;a href="https://github.com/teafuljs/teaful"&gt;Teaful project&lt;/a&gt; is still in an early version 0.X and together we'll make it evolve. &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>teaful</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Ruby Script to Find Local Branches with Deleted Remotes</title>
      <author>Jeremy Friesen</author>
      <pubDate>Thu, 02 Dec 2021 16:03:41 +0000</pubDate>
      <link>https://dev.to/devteam/ruby-script-to-find-local-branches-with-deleted-remotes-10if</link>
      <guid>https://dev.to/devteam/ruby-script-to-find-local-branches-with-deleted-remotes-10if</guid>
      <description>&lt;h2&gt;
  &lt;a href="#pivoting-from-one-strategy-to-another"&gt;
  &lt;/a&gt;
  Pivoting from One Strategy to Another
&lt;/h2&gt;

&lt;p&gt;In the &lt;a href="https://github.com/forem/forem"&gt;Forem codebase&lt;/a&gt; we use a &lt;a href="https://rietta.com/blog/github-merge-types/#squash-and-merge"&gt;Squash and Merge&lt;/a&gt;. Prior to joining &lt;a href="https://forem.com"&gt;Forem&lt;/a&gt;, I was accustomed to the &lt;a href="https://rietta.com/blog/github-merge-types/#create-a-merge-commit"&gt;Create a Merge Commit&lt;/a&gt; strategy.&lt;/p&gt;

&lt;p&gt;With the &lt;em&gt;Create a Merge Commit&lt;/em&gt; strategy, I have a script to &lt;a href="https://github.com/jeremyf/dotzshrc/blob/65305184cefbf991d79e13e61f3adb006af5cb75/bin/git-prune-branches"&gt;Prune Branches&lt;/a&gt;. That script tidied up branches that git understood to have been merged into the ‚Äúmain‚Äù branch.&lt;/p&gt;

&lt;p&gt;However, that script doesn‚Äôt work with the &lt;em&gt;Squash and Merge&lt;/em&gt; strategy. So I needed to come up with something different. (And please if you are aware of something else that‚Äôs part of git let me know).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#scripting-the-cleanup"&gt;
  &lt;/a&gt;
  Scripting the Cleanup
&lt;/h2&gt;

&lt;p&gt;At the bottom of this post is &lt;a href="#the-source-code"&gt;that code&lt;/a&gt;. With that code I can do the following: &lt;code&gt;cd /path/to/repo; local-branches-with-missing-remote&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That command will print to &lt;code&gt;STDOUT&lt;/code&gt; the list of local branches whose &lt;a href="https://git-scm.com/book/en/v2/Git-Branching-Remote-Branches"&gt;tracking branch&lt;/a&gt; is now gone; likely because I merged a pull request which automatically deletes the branch on Github.&lt;small&gt; &lt;br&gt;
Whenever I push up a branch, I always use &lt;code&gt;git push --set-upstream&lt;/code&gt; to create the tracking branch connection.&lt;br&gt;
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Then, when I want to tidy up my local branches, I can run the following: &lt;code&gt;cd /path/to/repo; local-branches-with-missing-remote | xargs git remote -D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This helps keep my local branch list nice and tidy, which is super important to me as I‚Äôve been issuing lots of tiny pull requests to do some minor refactors to the Forem codebase.&lt;/p&gt;

&lt;p&gt;A future me might write an alias to shorten this verbose command title and &lt;code&gt;xargs&lt;/code&gt; add-on, but not today.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sidebar-on-xargs"&gt;
  &lt;/a&gt;
  Sidebar on XARGS
&lt;/h2&gt;

&lt;p&gt;I‚Äôm using Unix‚Äôs &lt;a href="https://www.tutorialspoint.com/unix_commands/xargs.htm"&gt;xargs&lt;/a&gt; command to take each line of output and run the &lt;code&gt;git remote -D&lt;/code&gt; command on that.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;xargs&lt;/code&gt; command is analogous to the anonymous function of a block in Ruby.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="c1"&gt;# `local-branches-with-missing-remote` "piped" into&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"branch-1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"branch-2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"branch-3"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# `xargs git remote -D`&lt;/span&gt;
  &lt;span class="nb"&gt;exec&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"git remote -D &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#the-source-code"&gt;
  &lt;/a&gt;
  The Source Code
&lt;/h2&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



</description>
      <category>ruby</category>
      <category>github</category>
      <category>todayilearned</category>
      <category>git</category>
    </item>
    <item>
      <title>What is ETL and why it‚Äôs so important?</title>
      <author>Vijay Patel</author>
      <pubDate>Thu, 02 Dec 2021 15:28:20 +0000</pubDate>
      <link>https://dev.to/easyawslearn/what-is-etl-and-why-its-so-important-5mj</link>
      <guid>https://dev.to/easyawslearn/what-is-etl-and-why-its-so-important-5mj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-etl"&gt;
  &lt;/a&gt;
  What is ETL?
&lt;/h2&gt;

&lt;p&gt;ETL stands for Extraction, Transform, and Load&lt;/p&gt;

&lt;p&gt;ETL is a process that extracts the data from different source systems, then transforms the data (like applying calculations, concatenations, etc.), and finally loads the data into the Data Warehouse system. The full form of ETL is Extract, Transform and Load.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Here is a fully dedicated video on the ETL Process üëáüëáüëáüëáüëá
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Awq_zZsoXmQ&amp;amp;t=35s"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--saxRGE_0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mmw8qygzibda4avcdtvl.jpg" alt="Image description" width="800" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-you-need-etl"&gt;
  &lt;/a&gt;
  Why do you need ETL?
&lt;/h2&gt;

&lt;p&gt;ETL tools break down data silos and make it easy for your data scientists to access and analyze data, and turn it into business intelligence. In short, ETL tools are the first essential step in the data warehousing process that eventually lets you make more informed decisions in less time.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC-want-to-learn-more-%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC%E2%96%AC"&gt;
  &lt;/a&gt;
  ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨ WANT TO LEARN MORE? ‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨
&lt;/h3&gt;

&lt;p&gt;Full Terraform tutorial ‚ñ∫ &lt;a href="https://bit.ly/2GwK8V2"&gt;https://bit.ly/2GwK8V2&lt;/a&gt;&lt;br&gt;
DevOps Tools, like Ansible ‚ñ∫ &lt;a href="https://bit.ly/3iASHuP"&gt;https://bit.ly/3iASHuP&lt;/a&gt;&lt;br&gt;
Docker Tutorial ‚ñ∫ &lt;a href="https://bit.ly/3iAT9Jx"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
AWS Tutorial ‚ñ∫ &lt;a href="https://bit.ly/30GFv1q"&gt;https://bit.ly/3iAT9Jx&lt;/a&gt;&lt;br&gt;
GCP Tutorial ‚ñ∫ &lt;a href="https://bit.ly/3mwh412"&gt;https://bit.ly/3mwh412&lt;/a&gt;&lt;br&gt;
Jenkins Tutorials ‚ñ∫ &lt;a href="https://bit.ly/3iHnfv4"&gt;https://bit.ly/3iHnfv4&lt;/a&gt;&lt;br&gt;
Jenkins Pipeline ‚ñ∫ &lt;a href="https://bit.ly/30CJGLB"&gt;https://bit.ly/30CJGLB&lt;/a&gt;&lt;br&gt;
Python ‚ñ∫ &lt;a href="https://bit.ly/3I7bewU"&gt;https://bit.ly/3I7bewU&lt;/a&gt;&lt;br&gt;
Python in just 1 video ‚ñ∫ &lt;a href="https://bit.ly/3EeqGVy"&gt;https://bit.ly/3EeqGVy&lt;/a&gt;&lt;/p&gt;

</description>
      <category>etl</category>
      <category>cloud</category>
      <category>database</category>
      <category>programming</category>
    </item>
    <item>
      <title>Âàù„ÇÅ„Å¶„ÅÆStripe: ÂÆåÂÖ®„Å´„Çµ„Éº„Éê„Éº„É¨„Çπ„ÅÆ„ÉÅ„Ç±„ÉÉ„ÉàË≤©Â£≤</title>
      <author>Michael Tedder</author>
      <pubDate>Thu, 02 Dec 2021 15:19:16 +0000</pubDate>
      <link>https://dev.to/aws-builders/chu-metenostripe-wan-quan-nisabaresunotiketutofan-mai-2780</link>
      <guid>https://dev.to/aws-builders/chu-metenostripe-wan-quan-nisabaresunotiketutofan-mai-2780</guid>
      <description>&lt;p&gt;[ This post will be available in English soon! Please subscribe to be notified when it goes live. ]&lt;/p&gt;

&lt;p&gt;Êú¨„Éñ„É≠„Ç∞„ÅØ2021Âπ¥&lt;a href="https://qiita.com/advent-calendar/2021/stripe"&gt;Stripe Advent Calendar 2021&lt;/a&gt;„ÅÆ12Êúà3Êó•ÂàÜ„ÅÆ„Ç®„É≥„Éà„É™„Éº„Åß„Åô„ÄÇ&lt;/p&gt;




&lt;p&gt;ÁöÜ„Åï„Çì„ÄÅ„Åì„Çì„Å´„Å°„ÅØÔºÅTokyo Demo FestÂÆüË°åÂßîÂì°„ÅÆ„ÉÜ„ÉÉ„ÉÄ„Éº„ÄÄ„Éû„Ç§„Ç±„É´„Åß„Åô„ÄÇAWS„Å®„ÅÆ9Âπ¥Èñì„ÅÆÈñãÁô∫ÁµåÈ®ì„ÇíÊ¥ª„Åã„Åó„Å™„Åå„Çâ„ÄÅJAWS-UGÊú≠ÂπåÊîØÈÉ®„Å®JAWS-UG„ÅÆ„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Ç§„Éô„É≥„ÉàÔºà&lt;a href="https://jft2019.jaws-ug.jp/"&gt;FESTA 2019&lt;/a&gt;„ÄÅ&lt;a href="https://jawsdays2021.jaws-ug.jp/"&gt;DAYS 2021&lt;/a&gt;„ÄÅ&lt;a href="https://jawspankration2021.jaws-ug.jp/"&gt;PANKRATION 2021&lt;/a&gt;Ôºâ„ÅÆÈÅãÂñ∂„ÇíÊâã‰ºù„ÅÑ„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ2020Âπ¥„Å´AWS„Ç≥„Éü„É•„Éã„ÉÜ„Ç£„Éì„É´„ÉÄ„Éº„Å´Ë™çÂÆö„Åï„Çå„Åæ„Åó„Åü„ÄÇ&lt;/p&gt;

&lt;p&gt;‰ªäÂõû„ÅØTokyo Demo Fest 2021„ÅÆ„ÉÅ„Ç±„ÉÉ„ÉàË≤©Â£≤„ÅÆ„Åü„ÇÅ„ÄÅAWS‰∏ä„ÅßÂàù„ÇÅ„Å¶Stripe„ÇíÂÆüË£Ö„Åó„ÅüË©±„ÇíË©≥„Åó„Åè„ÅîÁ¥π‰ªã„Åó„Åæ„Åô„ÄÇStripe„Çí„Åæ„Å†Ëß¶„Å£„Å¶„ÅÑ„Å™„ÅÑÊñπ„Åß„ÇÇ„Çè„Åã„Çä„ÇÑ„Åô„Åè‰ºù„Åà„Åü„ÅÑ„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ„Çµ„É≥„Éó„É´„Ç≥„Éº„Éâ„ÅÆË®ÄË™û„ÅØNode.js 14.x„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tokyo-demo-fest%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"&gt;
  &lt;/a&gt;
  Tokyo Demo Fest„Å´„Å§„ÅÑ„Å¶
&lt;/h2&gt;

&lt;p&gt;Tokyo Demo Fest (Áï•: TDF)„ÅØÊó•Êú¨„ÅßÂîØ‰∏Ä„ÅÆ„Éá„É¢„Éë„Éº„ÉÜ„Ç£„Åß„Åô„ÄÇ„Éá„É¢„Éë„Éº„ÉÜ„Ç£„ÅØ„ÄÅ„Ç≥„É≥„Éî„É•„Éº„Çø„ÇíÁî®„ÅÑ„Åü„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Å®„Ç¢„Éº„Éà„Å´ËààÂë≥„ÅÆ„ÅÇ„Çã‰∫∫„ÄÖ„ÅåÊó•Êú¨„ÅÆ„Åø„Å™„Çâ„Åö„ÄÅ‰∏ñÁïå‰∏≠„Åã„Çâ‰∏ÄÂ†Ç„Å´‰ºö„Åó„ÄÅ„Éá„É¢‰ΩúÂìÅ„ÅÆ„Ç≥„É≥„Éö„ÉÜ„Ç£„Ç∑„Éß„É≥(„Ç≥„É≥„Éù)„ÇÑ„Çª„Éü„Éä„Éº„Å™„Å©„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ„Åæ„Åü„ÄÅ„Ç§„Éô„É≥„ÉàÈñãÂÇ¨‰∏≠„ÅØÈõÜ„Åæ„Å£„ÅüÊßò„ÄÖ„Å™‰∫∫„Åü„Å°„Å®„ÅÆ‰∫§ÊµÅ„ÅåÊ∑±„ÇÅ„Çâ„Çå„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;„Éá„É¢„Å´„Å§„ÅÑ„Å¶„ÅÆËß£Ë™¨„ÅØ&lt;a href="https://tokyodemofest.jp/2016/?lang=ja#aboutdemo"&gt;„Åì„Å°„Çâ„Çí„ÅîÂèÇÁÖß„Åè„Å†„Åï„ÅÑ&lt;/a&gt;„ÄÇ&lt;/p&gt;

&lt;p&gt;ÈÅéÂéª„ÅÆTDF„ÅÆ„ÉÅ„Ç±„ÉÉ„ÉàË≤©Â£≤„ÅØPayPal„ÅßË°å„ÅÑ„Åæ„Åó„Åü„Åå„ÄÅ‰ªäÂπ¥„Åã„Çâ„ÅØ„Çà„ÅÜ„ÇÑ„ÅèStripe„Å´ÁßªË°å„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åó„Åü„ÄÇ‰ªäÂõû„ÅØÂÆüË£Ö„Åå„Å®„Å¶„ÇÇÁ∞°Âçò„Å™Stripe Checkout„ÇíÂà©Áî®„Åó„ÄÅÂÆüÈöõ„ÅÆ„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„ÅØÊï∞ÊôÇÈñìÁ®ãÂ∫¶„ÅßÂØæÂøú„Åß„Åç„Åæ„Åó„Åü„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E8%A8%AD%E8%A8%88"&gt;
  &lt;/a&gt;
  „Ç∑„Çπ„ÉÜ„É†Ë®≠Ë®à
&lt;/h2&gt;

&lt;p&gt;„Åì„Å°„Çâ„ÅåÂÖ®‰ΩìÂõ≥„Åß„Åô„ÄÇ‰ªäÂõû„ÅØStripe„Å´Èôê„ÇãË©±„Å†„Åë„Å™„ÅÆ„Åß„ÄÅ„É©„Ç§„ÉñÈÖç‰ø°Âë®„Çä„Å™„Å©„ÅØÊèè„Åã„Çå„Å¶„Åæ„Åõ„Çì„ÄÇStripe„Å®„Åù„ÅÆÈñ¢‰øÇ„Åô„Çã„Ç∑„Çπ„ÉÜ„É†„ÅÆ„Åø„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIPhTsSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di5bdgrkerfx41kzi69h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIPhTsSR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/di5bdgrkerfx41kzi69h.png" alt="Serverless Stripe Diagram" width="880" height="706"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visitor„ÅØÊúÄÂàù„Å´Amplify„ÅßÂÖ¨Èñã„Åï„Çå„Å¶„ÅÑ„Çã&lt;a href="https://tokyodemofest.jp/index_ja.html"&gt;TDF„ÅÆWeb„Çµ„Ç§„Éà&lt;/a&gt;„Åã„ÇâÂÖ•„Çä„Åæ„Åô„ÄÇ2Á®ÆÈ°û„ÅÆ„ÉÅ„Ç±„ÉÉ„Éà„Åå„ÅÇ„Çã„ÅÆ„Åß„Å©„Å°„Çâ„Åã„ÇíÈÅ∏Êäû„Åó„ÄÅStripe Checkout„Å∏ÁßªË°å„Åó„Åæ„Åô„ÄÇÊ±∫Ê∏àÂÆå‰∫ÜÊôÇ„ÅØStripe„Åã„Çâ„ÅÆWebhook„ÅåÂëº„Å≥Âá∫„Åï„Çå„ÄÅ„ÉÅ„Ç±„ÉÉ„ÉàÊÉÖÂ†±„Å®Votekey„ÅåStripe„Åß„ÅÆË≥ºÂÖ•ÊôÇ„Å´ÂÖ•Âäõ„Åï„Çå„Åü„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å´ÈÄÅ‰ø°„Åï„Çå„Åæ„Åô„ÄÇVisitor„ÅØ„É°„Éº„É´„ÅßÈÖçÂ∏É„Åï„Çå„ÅüVotekey„Çí‰Ωø„ÅÑ„ÄÅ&lt;a href="https://github.com/Gargaj/wuhu"&gt;Wuhu„Éë„Éº„ÉÜ„Ç£„Ç∑„Çπ„ÉÜ„É†&lt;/a&gt; (ECS/Fargate)„Å´„É≠„Ç∞„Ç§„É≥„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe%E5%95%86%E5%93%81%E3%81%AE%E4%BD%9C%E6%88%90"&gt;
  &lt;/a&gt;
  StripeÂïÜÂìÅ„ÅÆ‰ΩúÊàê
&lt;/h2&gt;

&lt;p&gt;‰ªäÂõû„ÅÆTDF„Åß„ÅØ„ÉÅ„Ç±„ÉÉ„Éà„Çí2Á®ÆÈ°ûË≤©Â£≤„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Visitor TicketÔºà1,000ÂÜÜÔºâ&lt;/li&gt;
&lt;li&gt;Bronze Supporter (10,000ÂÜÜ„ÄÅT„Ç∑„É£„ÉÑÁÑ°ÊñôÈÖçÈÄÅËæº„Åø)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Visitor Ticket„ÅØStripe„Åß„ÅØ1„Å§„ÅÆ„ÄåÂïÜÂìÅ„Äç„Å´„Å™„Çã„ÅÆ„Åß„ÄÅÁ∞°Âçò„Åß„Åô„Å≠„ÄÇ&lt;/p&gt;

&lt;p&gt;Bronze Supporter„ÅØVisitor Ticket„Å®ÈáëÈ°ç„ÅåÈÅï„ÅÜ„Åü„ÇÅÂà•„ÅÆÂïÜÂìÅ„ÅåÂøÖË¶Å„Åß„Åô„Åå„ÄÅT„Ç∑„É£„ÉÑ„ÅÆ„Çµ„Ç§„Ç∫ÔºàS/M/L/XLÔºâ„ÅÆÈÅ∏Êäû„ÇÇ„ÅÇ„Çã„ÅÆ„Åß„ÄÅ„Çµ„Ç§„Ç∫Âà•„ÅÆ4„Å§„ÅÆÂïÜÂìÅ„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇT„Ç∑„É£„ÉÑ„ÅØ„ÉÅ„Ç±„ÉÉ„Éà‰ª£„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã„ÅÆ„Åß„ÄÅ„Åù„Çå„Åû„Çå„ÅÆ„Çµ„Ç§„Ç∫„ÅÆÈáëÈ°ç„ÅØ„Äå„Çº„É≠ÂÜÜ„Äç„Å´Ë®≠ÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åù„Åó„Å¶T„Ç∑„É£„ÉÑ„ÅØÈÖçÈÄÅ„Å´„Å™„Çã„Åü„ÇÅ„ÄÅË≥ºÂÖ•ÊôÇ„Å´Visitor„ÅÆ‰ΩèÊâÄÂÖ•Âäõ„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ai5xUVhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u418fcq355zfmtxtnxqp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ai5xUVhU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u418fcq355zfmtxtnxqp.png" alt="TDF Stripe Products" width="880" height="632"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Stripe„ÅßÈÖçÈÄÅÊÉÖÂ†±„ÇíÂÖ•Âäõ„Åï„Åõ„Çã„Åü„ÇÅ„Å´„ÅØ„ÄåÈÖçÈÄÅÊñôÈáë„Äç„Çí‰ΩúÊàê„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ‰ªäÂõû„ÅØT„Ç∑„É£„ÉÑ„ÅÆÈÖçÈÄÅÊñô„ÇÇ„ÉÅ„Ç±„ÉÉ„Éà‰ª£„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ„Åì„Å°„Çâ„ÅÆÈáëÈ°ç„ÇÇ„Äå„Çº„É≠ÂÜÜ„Äç„Å´Ë®≠ÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IihEjYFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvj9r6cp4jwpvlqd7jwo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IihEjYFH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvj9r6cp4jwpvlqd7jwo.png" alt="TDF Stripe Shipping" width="880" height="263"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-api%E3%82%AD%E3%83%BC%E3%81%AE%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3"&gt;
  &lt;/a&gt;
  Stripe API„Ç≠„Éº„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£
&lt;/h2&gt;

&lt;p&gt;Stripe API„Ç≠„Éº„ÅØÁßòÂØÜÊÉÖÂ†±„Å™„ÅÆ„Åß„ÄÅ„ÇΩ„Éº„Çπ„Ç≥„Éº„Éâ„Å´Êõ∏„ÅçËæº„Çì„Å†„Çä„Åô„Çã„Å®ÊÉÖÂ†±Êºè„Åà„ÅÑ„ÅÆË¶ÅÂõ†„Å´„Å™„Çä„Åæ„Åô„ÄÇÁßÅ„ÅÆ„ÅÑ„Å§„ÇÇ„ÅÆÂÆüË£Ö„Éë„Çø„Éº„É≥„Åß„Åô„Åå„ÄÅLambda„Çí‰Ωø„Å£„Å¶„ÇãÊôÇ„ÅØAWS Systems Manager„ÅÆ&lt;a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/systems-manager-parameter-store.html"&gt;Parameter Store&lt;/a&gt;„Å´API„Ç≠„ÉºÁ≠â„Çí‰øùÂ≠ò„Åô„Çã„Åì„Å®„Å´„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;API„Ç≠„Éº„ÄÅWebhook„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÄÅÂïÜÂìÅ„ÅÆPriceID„ÄÅÈÖçÈÄÅÊñôÈáëID„Å™„Å©„ÅØ1„Å§„Åö„Å§Âà•„ÄÖ„ÅÆSecureString„Å´‰øùÂ≠ò„ÅåÂèØËÉΩ„Åß„Åô„Åå„ÄÅÂÆü„ÅØStandard„Åß„ÇÇ4KB„Åæ„Åß‰øùÂ≠ò„ÅåÂèØËÉΩ„Å™„ÅÆ„Åß„ÄÅ„Åô„Åπ„Å¶„ÅÆÂøÖË¶Å„Å™ÊÉÖÂ†±„ÇíJSONÂåñ„Å´„Åó„ÄÅ1„Å§„ÅÆÊñáÂ≠óÂàó„Å®„Åó„Å¶‰øùÂ≠ò„Åô„Çã„ÅÆ„Åå„Å®„Å¶„ÇÇÊ•Ω„Åß„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;‰ª•‰∏ã„ÄÅ„Ç≠„Éº„ÅÆÂÜÖÂÆπ„ÅØÈö†„Åó„Å¶„Åæ„Åô„Åå„ÄÅÂÆüÈöõ‰øùÂ≠ò„Åó„Å¶„Çã„Éá„Éº„Çø„Åå„Åì„Çì„Å™ÊÑü„Åò„Åß„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{"stripe_api_secret_key":"sk_test_51JU2XXXXXXXXXXXX",
"webhook_signing_secret":"whsec_TqW4TXXXXXXXXXXXX",
"product_visitor_ticket":"price_1JX1zXXXXXXXXXXXX",
"product_bronze_ticket":"price_1JrKaXXXXXXXXXXXX",
"product_tshirt_s":"price_1JrKlXXXXXXXXXXXX",
"product_tshirt_m":"price_1JrKmXXXXXXXXXXXX",
"product_tshirt_l":"price_1JrKnXXXXXXXXXXXX",
"product_tshirt_xl":"price_1JrKoXXXXXXXXXXXX",
"success_url":"https://tokyodemofest.jp/success.html",
"cancel_url":"https://tokyodemofest.jp#registration",
"shipping_rate":"shr_1JrKNXXXXXXXXXXXX",
"shipping_countries":"US,JP,IE,GB,NO,SE,FI,RU,PT,ES,FR,DE,CH,IT,PL,CZ,AT,HU,BA,BY,UA,RO,BG,GR,AU,NZ,KR,TW,IS"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lambda„ÅåÂÆüË°å„Åï„Çå„Å¶„ÇãÈöõ„ÄÅ„Åì„ÅÆJSON„Çí„Éë„É©„É°„Éº„Çø„Çπ„Éà„Ç¢„Åã„ÇâË™≠„ÅøËæº„ÇÄ„Åü„ÇÅ„Å´„ÅØ Lambda„Å´ÂÜÖËîµ„Åï„Çå„Å¶„Çã &lt;code&gt;aws-sdk&lt;/code&gt; „Çí‰Ωø„ÅÑ„Åæ„Åô„ÄÇStripe„ÅÆÂàùÊúüÂåñ„Å´„ÅØAPI„Ç≠„Éº„ÇíÊ∏°„Åô„ÅÆ„ÅåÂøÖË¶Å„Å™„ÅÆ„Åß„ÄÅSSM„Åã„Çâconfig„ÇíÂºï„Å£Âºµ„Å£„Å¶„Åã„ÇâÂàùÊúüÂåñ„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const loadConfig = async function() {
  const aws = require('aws-sdk');
  const ssm = new aws.SSM();
  const res = await ssm.getParameter( { Name: '/tdf/config-stripe', WithDecryption: true } ).promise();
  return JSON.parse(res.Parameter.Value);
}

exports.handler = async (event) =&amp;gt; {
  const config = await loadConfig();
  const stripe = require('stripe')(config.stripe_api_secret_key);
  // ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#html%E5%81%B4%E3%81%AE%E8%B3%BC%E5%85%A5%E3%83%9C%E3%82%BF%E3%83%B3%E4%BD%9C%E6%88%90"&gt;
  &lt;/a&gt;
  HTMLÂÅ¥„ÅÆË≥ºÂÖ•„Éú„Çø„É≥‰ΩúÊàê
&lt;/h2&gt;

&lt;p&gt;ÂèÇËÄÉ„ÅÆ„Åü„ÇÅ„ÄÅ‰ªäÂõû„ÅÆTDF„ÅÆHTMLÂÅ¥„ÅÆË≥ºÂÖ•„Éú„Çø„É≥„ÇíËªΩ„ÅèÁ¥π‰ªã„Åó„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--356gi-dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5o6ttt7wdnu9bnjuhdq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--356gi-dM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/g5o6ttt7wdnu9bnjuhdq.png" alt="TDF Visitor Ticket" width="880" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yc0c8M06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08ukha0sn2r182dqwq24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yc0c8M06--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/08ukha0sn2r182dqwq24.png" alt="TDF Bronze Supporter" width="880" height="122"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;„ÉÅ„Ç±„ÉÉ„Éà„ÅÆÁ®ÆÈ°û„Åå2„Å§„Å™„ÅÆ„Åß„Åô„Åå„ÄÅÂÆü„ÅØPOST„Åô„Çã„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅåÂêå„Åò„Åß„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gMX4Re3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z90o2ltnbje9dcyddxtt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gMX4Re3K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z90o2ltnbje9dcyddxtt.png" alt="TDF Ticket HTML" width="880" height="580"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LambdaÂÅ¥„Åß„ÉÅ„Ç±„ÉÉ„Éà„ÅÆÈÅï„ÅÑ„Çí„Çè„Åã„Çã„Åü„ÇÅ„Å´„ÅØ &lt;code&gt;&amp;lt;input type="hidden" name="type" value="bronze"&amp;gt;&lt;/code&gt; „ÅßÂà§Êñ≠„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åù„Åó„Å¶ &lt;code&gt;type=bronze&lt;/code&gt; „ÅÆÂ†¥Âêà„ÅØT„Ç∑„É£„ÉÑ„Çµ„Ç§„Ç∫„ÅÆ &lt;code&gt;tshirt&lt;/code&gt; ÊåáÂÆö„ÇÇ„Çè„Åã„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;Stripe Checkout„Å´Bronze Supporter„ÉÅ„Ç±„ÉÉ„Éà„Å®T„Ç∑„É£„ÉÑ„ÅÆÂïÜÂìÅÊåáÂÆö„ÅØÊ¨°„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅßÁ¥π‰ªã„Åó„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-checkout%E3%81%B8%E3%81%AEurl%E7%94%9F%E6%88%90"&gt;
  &lt;/a&gt;
  Stripe Checkout„Å∏„ÅÆURLÁîüÊàê
&lt;/h2&gt;

&lt;p&gt;Ê¨°„ÅØWeb„Çµ„Ç§„Éà„ÅßVisitor„Åå„ÉÅ„Ç±„ÉÉ„ÉàË≥ºÂÖ•„Éú„Çø„É≥„ÇíÊäº„Åó„Åü„Çâ„ÄÅStripe Checkout„Å´ÁßªË°å„Åï„Åõ„Åæ„Åô„ÄÇ„Åì„ÅÆURL„Å´„ÅØ„ÄÅ„Å©„ÅÆÂïÜÂìÅ„ÇíË≥ºÂÖ•„Åô„Çã„Å®„Åã„ÄÅË≥ºÂÖ•ÊôÇ„Å´ÂøÖË¶Å„Å™ÊÉÖÂ†±Ôºà‰ΩèÊâÄ„ÅÆÂÖ•Âäõ„ÅåÂøÖË¶Å„Åã„Å©„ÅÜ„ÅãÔºâ„ÅåÂê´„Åæ„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇURLÁîüÊàê„ÅØStripe SDK„ÅåË°å„ÅÜ„ÅÆ„Åß„ÄÅURL„Åå‰ΩúÊàê„Åï„Çå„Åü„Çâ„ÄÅ„Éñ„É©„Ç¶„Ç∂„Å´ &lt;code&gt;HTTP 303&lt;/code&gt; (See Other) „ÅßËª¢ÈÄÅ„Åï„Çå„Çã„Å®„ÄÅStripe Checkout„ÅÆ„Éö„Éº„Ç∏„ÅåË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;Lambda„ÅßCheckout„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆURL„ÇíÁîüÊàê„ÅóËª¢ÈÄÅ„Åï„Åõ„Çã„Å´„ÅØ„Åì„Çì„Å™ÊÑü„Åò„Åß„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.handler = async (event) =&amp;gt; {
  const config = await loadConfig();
  const stripe = require('stripe')(config.stripe_api_secret_key);

  const session = await stripe.checkout.sessions.create( {
    line_items: /* TODO */,
    payment_method_types: [ 'card' ],
    mode: 'payment',
    success_url: config.success_url,
    cancel_url: config.cancel_url
  } );

  const response = {
    statusCode: 303,
    headers: {
      'Location': session.url
    }
  };

  return response;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;„Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÅÆ &lt;code&gt;line_items&lt;/code&gt; „ÅØÂïÜÂìÅ„ÇíÊåáÂÆö„Åó„Åæ„Åô„ÄÇ„Éñ„É©„Ç¶„Ç∂„Åã„ÇâPOST„ÅßÈÄÅ‰ø°„Åï„Çå„Åü„Éá„Éº„Çø„Åå„ÅÇ„Çã„Åã„Å©„ÅÜ„Åã„ÇíÁ¢∫Ë™ç„Åó„ÄÅ &lt;code&gt;line_items&lt;/code&gt; „Å´ÂÖ•„Çå„ÇãÂïÜÂìÅ„Éá„Éº„Çø„ÇíÂ§â„Åà„Åæ„Åô„ÄÇ„Å™„Åä„ÄÅLambda„Åß„ÅØ„Éö„Ç§„É≠„Éº„Éâ„ÅåBase64„Ç®„É≥„Ç≥„Éº„Éâ„Åï„Çå„Å¶„Çã„Åì„Å®„Åå„ÅÇ„Çã„ÅÆ„Åß„ÄÅ„Éá„Ç≥„Éº„Éâ„ÇíË°å„ÅÜÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  if (event.body) {
    let payload = event.body;
    if (event.isBase64Encoded)
      payload = Buffer.from(event.body, 'base64').toString();

    const querystring = require('querystring');
    const res = querystring.parse(payload);
    if ((res.type) &amp;amp;&amp;amp; (res.type == 'bronze')) {
      // ...
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;„Åæ„ÅöVisitor„ÉÅ„Ç±„ÉÉ„Éà„ÅÆÂ†¥Âêà„ÅØÂçòÁ¥î„Å´1„Å§„ÅÆÂïÜÂìÅ„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  let items = [ {
    price: config.product_visitor_ticket,
    quantity: 1
  } ];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Visitor„ÉÅ„Ç±„ÉÉ„Éà„ÅÆ1„Å§„ÅÆÂïÜÂìÅ„ÅßStripe Checkout„Å´Ëª¢ÈÄÅ„Åô„Çã„Å®„Åì„Çì„Å™ÊÑü„Åò„ÅßË°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eS5A0lIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4po7ld6thtf25au7br7h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eS5A0lIs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4po7ld6thtf25au7br7h.png" alt="Stripe Checkout Visitor" width="880" height="544"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;„Åß„ÅØ„ÄÅÊ¨°„Å´Bronze Supporter„ÉÅ„Ç±„ÉÉ„Éà„ÅÆÂ†¥Âêà„ÅØÈÅ∏Êäû„Åï„Çå„ÅüT„Ç∑„É£„ÉÑ„Çµ„Ç§„Ç∫„ÇíÂïÜÂìÅ„ÅÆPriceID„Å®„Éû„ÉÉ„ÉÅ„É≥„Ç∞„Åó„ÄÅ2„Å§„ÅÆÂïÜÂìÅÔºà„ÉÅ„Ç±„ÉÉ„Éà„ÅÆÂïÜÂìÅ„Å®T„Ç∑„É£„ÉÑ„ÅÆÂïÜÂìÅÔºâ„Çí &lt;code&gt;line_items&lt;/code&gt; „Å´ÂÖ•„Çå„Åæ„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  let tshirt_type = config.product_tshirt_s;

  if (res.tshirt) {
    if (res.tshirt == 's') tshirt_type = config.product_tshirt_s;
    if (res.tshirt == 'm') tshirt_type = config.product_tshirt_m;
    if (res.tshirt == 'l') tshirt_type = config.product_tshirt_l;
    if (res.tshirt == 'xl') tshirt_type = config.product_tshirt_xl;
  }

  items = [ {
    price: config.product_bronze_ticket,
    quantity: 1
  }, {
    price: tshirt_type,
    quantity: 1
  } ];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;„ÅÇ„Å®„ÅØ„ÄÅBronze Supporter„ÉÅ„Ç±„ÉÉ„Éà„ÅÆÂ†¥Âêà„ÅØT„Ç∑„É£„ÉÑ„ÅÆÈÖçÈÄÅ„Å´‰ΩèÊâÄ„ÇíÂÖ•Âäõ„Åó„Å¶„ÇÇ„Çâ„ÅÜÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇCheckout„Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„Å´ÈÖçÈÄÅÊñôÈáë„ÅÆ &lt;code&gt;shipping_rates&lt;/code&gt; „Å®ÈÖçÈÄÅÂØæË±°ÂõΩÔºà„Å©„ÅÆÂõΩ„Å∏„ÅÆÈÖçÈÄÅ„ÅåÂèØËÉΩÔºâ„Çí &lt;code&gt;shipping_address_collection&lt;/code&gt; „ÅÆ &lt;code&gt;allowed_countries&lt;/code&gt; „ÅßÊåáÂÆö„Åó„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;„Åæ„Å®„ÇÅ„Çã„Å®„Åì„Çì„Å™ÊÑü„Åò„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  const session = await stripe.checkout.sessions.create( {
    line_items: [ {
      price: config.product_bronze_ticket,
      quantity: 1
    }, {
      price: tshirt_type,
      quantity: 1
    } ],
    payment_method_types: [ 'card' ],
    mode: 'payment',
    success_url: config.success_url,
    cancel_url: config.cancel_url,
    shipping_rates: [ config.shipping_rate ],
    shipping_address_collection: {
      allowed_countries: config.shipping_countries.split(',')
    }
  } );
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ÈÖçÈÄÅÊÉÖÂ†±„Åå„Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„Å´Âê´„Åæ„Çå„Çã„Å®Stripe Checkout„Åß‰ΩèÊâÄÂÖ•Âäõ„Éï„Ç£„Éº„É´„Éâ„Åå‰∏ÄÁ∑í„Å´„Éï„Ç©„Éº„É†„Å´Ë°®Á§∫„Åï„Çå„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z5lLQT-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl82a4iy6uu47hot3lml.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z5lLQT-t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xl82a4iy6uu47hot3lml.png" alt="Stripe Checkout Bronze" width="880" height="618"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‰∏ÄÂøú„ÄÅ„Åì„ÅÆÊï∞ÂçÅË°å„ÅÆ„Ç≥„Éº„Éâ„Å†„Åë„ÅßStripe Checkout„Åß„ÅÆÊ±∫Ê∏à„ÅØÂèØËÉΩ„Å´„Å™„Çä„Åæ„Åó„Åü„ÄÇË≥ºÂÖ•Ê±∫Ê∏à„ÅåÂÆå‰∫Ü„Åï„Çå„Åü„Çâ„ÄÅStripe„Åã„ÇâWebhook„ÇíÂëº„Å≥Âá∫„Åó„ÄÅ„É°„Éº„É´ÈÄÅ‰ø°„Å™„Å©„ÅÆ‰ªñ„ÅÆÂá¶ÁêÜ„ÅåÂèØËÉΩ„Å™„ÅÆ„Åß„ÄÅÊ¨°„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„ÅßÁ¥π‰ªã„Åó„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stripe-webhook%E3%81%AE%E5%AE%9F%E8%A3%85"&gt;
  &lt;/a&gt;
  Stripe Webhook„ÅÆÂÆüË£Ö
&lt;/h2&gt;

&lt;p&gt;ÂÖà„Åª„Å©Á¥π‰ªã„Åó„Åæ„Åó„Åü„Åå„ÄÅTDF„Åß„ÅØ„ÄÅ„ÉÅ„Ç±„ÉÉ„ÉàË≥ºÂÖ•„ÅÆÊ±∫Ê∏àÂÆå‰∫Ü„Å®„Å™„Å£„ÅüÊôÇ„ÅØVisitor„Å∏„ÅÆ„ÉÅ„Ç±„ÉÉ„ÉàÊÉÖÂ†±„Çí„É°„Éº„É´„ÅßÈÄÅ‰ø°„Åó„Åæ„Åô„ÄÇ„Åì„Å°„Çâ„ÅÆÂØæÂøú„ÅØÂà•„ÅÆLambdaÈñ¢Êï∞„Çí‰ΩúÊàê„Åó„ÄÅAPI Gateway„ÅÆURL„ÇíStripe Webhook„Å´Ë®≠ÂÆö„Åó„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R9eXzY3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su51bm074bf6j57u7t16.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R9eXzY3W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/su51bm074bf6j57u7t16.png" alt="TDF Stripe Webhook" width="880" height="370"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Webhook„ÅÆÂá¶ÁêÜ„ÅØÂêÑËá™„Åù„Çå„Åû„ÇåÈÅï„ÅÜÂØæÂøú„Å´„Å™„Çä„Åæ„Åô„ÅÆ„Åß„ÄÅStripe„Åã„Çâ„ÅÆPOST„Éá„Éº„Çø„ÅÆ„Éá„Ç≥„Éº„Éâ„Åæ„ÅßÁ¥π‰ªã„Åó„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;„Åæ„Åö„ÅØ„ÄÅWebhook„ÅÆURL„ÅåÂÖ¨Èñã„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅË™∞„Åß„ÇÇ„Ç¢„ÇØ„Çª„Çπ„Åå„Åß„Åç„Å¶„Åó„Åæ„ÅÑ„Åæ„Åô„ÄÇStripe„Åã„Çâ„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÅÆÈöõ„ÅØHTTP„Éò„ÉÉ„ÉÄ„Éº„Å´ÁΩ≤Âêç„ÅåÂê´„Åæ„Çå„ÄÅWebhook„Ç∑„Éº„ÇØ„É¨„ÉÉ„Éà„ÅÆ„Ç≠„Éº„Åß„Éö„Ç§„É≠„Éº„Éâ„Éá„Éº„Çø„ÅåÊ≠£Â∏∏„Å™„ÅÆ„Åã„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;exports.handler = async (event) =&amp;gt; {
  // require Stripe signature in header
  if (!event.headers['stripe-signature']) {
    console.log('no Stripe signature received in header, returning 400 Bad Request');
    return {
      statusCode: 400
    };
  }

  const sig = event.headers['stripe-signature'];

  // require an event body
  if (!event.body) {
    console.log('no event body received in POST, returning 400 Bad Request');
    return {
      statusCode: 400
    };
  }

  // decode payload
  let payload = event.body;
  if (event.isBase64Encoded)
    payload = Buffer.from(event.body, 'base64').toString();

  // construct a Stripe Webhook event
  const config = await loadConfig();
  const stripe = require('stripe')(config.stripe_api_secret_key);

  try {
    let ev = stripe.webhooks.constructEvent(payload, sig, config.webhook_signing_secret);
  } catch (err) {
    console.log('error creating Stripe Webhook event');
    console.log(err);
    return {
      statusCode: 400
    };
  }

  // ...TODO...

  return {
    statusCode: 200
  };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Stripe Webhook„ÅÆ„Ç§„Éô„É≥„Éà„Åæ„ÅßÊ≠£Â∏∏„Å´‰ΩúÊàê„Åó„Åü„Çâ„ÄÅÊ¨°„ÅØCheckout„Çª„ÉÉ„Ç∑„Éß„É≥„ÅÆ„Çπ„ÉÜ„Éº„Çø„ÇπÂ§âÂåñ„ÇíÁ¢∫Ë™ç„Åó„Åæ„Åô„ÄÇÊ±∫Ê∏à„Å´Èñ¢„Åó„Å¶‰ª•‰∏ã„ÅÆ3„Å§„ÅÆ„Ç§„Éô„É≥„Éà„ÇíÂØæÂøú„Åô„Çã„ÅÆ„Åå‰∏ÄËà¨ÁöÑ„Åß„Åô„ÄÇ&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;checkout.session.completed&lt;/code&gt; : Stripe Checkout„ÅßÊ±∫Ê∏à„ÅåË°å„Çè„Çå„Åæ„Åó„Åü„ÄÇÊîØÊâï„ÅÑÊñπÊ≥ï„Å´„Çà„Å£„Å¶„ÄÅÊ±∫Ê∏à„ÅåÂÆå‰∫Ü„Å´„Å™„Å£„Å¶„Å™„ÅÑÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„ÇØ„É¨„Ç∏„ÉÉ„Éà„Ç´„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØÂü∫Êú¨ÁöÑ„Å´ &lt;code&gt;payment_status&lt;/code&gt; „Åå &lt;code&gt;paid&lt;/code&gt; „Å´„Å™„Çã„ÅÆ„Åß„ÄÅÊ±∫Ê∏àÂÆå‰∫Ü„Å®„ÅÑ„ÅÜ„Åì„Å®„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;checkout.session.async_payment_succeeded&lt;/code&gt; : &lt;code&gt;completed&lt;/code&gt; „ÅÆ„Ç§„Éô„É≥„Éà„ÅßÊ±∫Ê∏à„ÅåÊú™ÂÆå‰∫Ü„Å†„Å£„Åü„ÅÆ„Åå„ÄÅÊ±∫Ê∏àÂÆå‰∫Ü„Å®„Å™„Çä„Åæ„Åó„Åü„ÄÇ&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;checkout.session.async_payment_failed&lt;/code&gt; : &lt;code&gt;completed&lt;/code&gt; „ÅÆ„Ç§„Éô„É≥„Éà„ÅßÊ±∫Ê∏à„ÅåÊú™ÂÆå‰∫Ü„Å†„Å£„Åü„ÅÆ„Åå„ÄÅÊ±∫Ê∏àÂ§±Êïó„Å®„Å™„Çä„Åæ„Åó„Åü„ÄÇ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;„Åì„ÅÆ3„Å§„ÅÆ„Ç§„Éô„É≥„Éà„ÇíÂØæÂøú„Åô„Çã„Å´„ÅØ&lt;a href="https://stripe.com/docs/payments/checkout/fulfill-orders"&gt;Stripe„ÅÆ„Çµ„É≥„Éó„É´„Ç≥„Éº„Éâ&lt;/a&gt;„Å®„Åª„ÅºÂêåÊßò„Å´Ë°å„Å£„Å¶„Åæ„Åô„ÄÇ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const createOrder = async function(session) {
  // we (TDF) don't need to do anything here
}

const fulfillOrder = async function(session) {
  // send ticket info to customer by email
  console.log('customer email is: ' + session.customer_details.email);
}

const emailCustomerAboutFailedPayment = async function(session) {
  // send email about failed payment
}

exports.handler = async (event) =&amp;gt; {
  // ...
  const session = ev.data.object;
  switch (ev.type) {
    case 'checkout.session.completed':
      // save an order in your database, marked as 'awaiting payment'
      await createOrder(session);

      // check if the order is paid (e.g., from a card payment)
      // a delayed notification payment will have an `unpaid` status
      if (session.payment_status === 'paid') {
        await fulfillOrder(session);
      }
      break;

    case 'checkout.session.async_payment_succeeded':
      // fulfill the purchase...
      await fulfillOrder(session);
      break;

    case 'checkout.session.async_payment_failed':
      // send an email to the customer asking them to retry their order
      await emailCustomerAboutFailedPayment(session);
      break;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;createOrder()&lt;/code&gt; „ÄÅ&lt;code&gt;fulfillOrder()&lt;/code&gt; „ÄÅ„Åù„Åó„Å¶ &lt;code&gt;emailCustomerAboutFailedPayment()&lt;/code&gt; „ÅÆ3„Å§„ÅÆÈñ¢Êï∞„ÇíÂÆüË£Ö„Åô„Çã„Åì„Å®„ÅßWebhook„ÅÆÂØæÂøú„ÅØÂÆå‰∫Ü„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;„ÇÇ„ÅóWebhook„Åå„Ç®„É©„Éº„Åß &lt;code&gt;HTTP 2xx&lt;/code&gt; ‰ª•Â§ñ„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„Åï„Çå„ÅüÂ†¥Âêà„ÄÅStripeÂÅ¥„Åß„ÅØÊôÇÈñì„ÇíÁΩÆ„ÅÑ„Å¶„Åã„ÇâËá™ÂãïÁöÑ„Å´„É™„Éà„É©„Ç§„Åï„Çå„Åæ„Åô„ÄÇË©≥„Åó„Åè„ÅØ&lt;a href="https://stripe.com/docs/webhooks/best-practices"&gt;Stripe Webhook Best Practices&lt;/a&gt;„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ&lt;/p&gt;

&lt;p&gt;„Åì„Åì„Åæ„ÅßÂÆüË£Ö„Åå„Åß„Åç„Å¶„Çå„Å∞„ÄÅStripe Checkout„ÅÆÂØæÂøú„ÅØÂÆå‰∫Ü„Å´„Å™„Çä„Åæ„Åô„ÄÇ„Åä„ÇÅ„Åß„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„ÅôÔºÅ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#api-gateway%E3%81%AEcustom-domain%E3%81%A7%E8%A4%87%E6%95%B0%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%82%92%E3%81%B2%E3%81%A8%E3%81%A4%E3%81%AB%E7%B5%B1%E5%90%88"&gt;
  &lt;/a&gt;
  API Gateway„ÅÆCustom Domain„ÅßË§áÊï∞„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Çí„Å≤„Å®„Å§„Å´Áµ±Âêà
&lt;/h2&gt;

&lt;p&gt;‰ªäÂõû„ÅÆÂÆüË£Ö„Åß„ÅØ„ÄÅStripe Checkout„ÅÆURLÁîüÊàê„Å®Stripe Webhook„ÅÆ2„Å§„ÅÆ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„ÇÇ„Å°„Çç„ÇìAPI Gateway„ÅßÊâï„ÅÑÂá∫„Åï„Çå„ÅüURL ( &lt;code&gt;https://7q6f1e5os2.execute-api.ap-northeast-1...&lt;/code&gt; )„Çí„Åù„ÅÆ„Åæ„Åæ‰Ωø„Åà„Åæ„Åô„Åå„ÄÅ &lt;code&gt;stripe.tokyodemofest.jp&lt;/code&gt; „Å™„Å©„ÅÆÂêçÂâç„Çí‰ªò„Åë„Çâ„Çå„Åü„Çµ„Éñ„Éâ„É°„Ç§„É≥„Å´Áµ±Âêà„Åô„Çã„Å®URL„ÅÆË¶ã„ÅüÁõÆ„ÅåËâØ„Åè„Å™„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9wIkQM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpvoy2tl8f32h3ipbkm9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9wIkQM---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mpvoy2tl8f32h3ipbkm9.png" alt="API Gateway Custom Domain" width="880" height="617"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;„Åì„Çì„Å™ÊÑü„Åò„Åß &lt;code&gt;checkout&lt;/code&gt; „Å® &lt;code&gt;fulfill&lt;/code&gt; „ÅÆ2„Å§„ÅÆLambda„Å®API Gateway„ÅåCustom Domain„ÅÆ1„Å§„Å´„Åæ„Å®„ÇÅ„Å¶„ÅÑ„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tdf%E3%81%A7%E5%88%9D%E3%82%81%E3%81%A6stripe%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3"&gt;
  &lt;/a&gt;
  TDF„ÅßÂàù„ÇÅ„Å¶Stripe„ÇíÂÆüË£Ö„Åó„Å¶„ÅÆÊÑüÊÉ≥
&lt;/h2&gt;

&lt;p&gt;Ê≠£Áõ¥„ÄÅStripe Checkout„Çí„Çµ„Éº„Éê„Éº„É¨„Çπ„ÅßÂÆüË£Ö„Åô„Çã„ÅÆ„ÅØ„Å®„Å¶„ÇÇÁ∞°Âçò„Åß„Åó„Åü„ÄÇ„Ç≥„Éº„Éâ„ÇíÊõ∏„ÅèÈáè„ÅåÂ∞ë„Å™„ÅÑ„ÅÆ„Åß„ÄÅÊú¨ÂΩì„Å´Êï∞ÂçÅË°å„Å†„Åë„ÅßËá™ÂàÜ„ÅÆWeb„Çµ„Ç§„Éà„Åã„ÇâÊ±∫Ê∏à„Åå„Åß„Åç„Çã„Çà„ÅÜ„Å´„Å™„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;„Åó„Åã„ÇÇ„ÄÅCheckout„ÇÑWebhook„ÇíÂÆüË£Ö„Åó„Å¶„ÇãÈöõ„ÅØStripe UI„ÅßAPI„ÅÆHTTP„É™„ÇØ„Ç®„Çπ„Éà„Å®„É¨„Çπ„Éù„É≥„Çπ„Å®„É≠„Ç∞ÊÉÖÂ†±„Åæ„ÅßÁ¥∞„Åã„ÅèË¶ã„Çå„Å¶„ÄÅDashboard„Åß„Ç∞„É©„Éï„Åå„Å®„Å¶„ÇÇ„Çè„Åã„Çä„ÇÑ„Åô„ÅÑ„Åß„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;„Å≤„Å®„Å§Ê¨≤„ÇíË®Ä„Åà„Å∞„ÄÅ„ÉÜ„Çπ„ÉàÁí∞Â¢É„Åß‰ΩúÊàê„Åó„ÅüÂïÜÂìÅ„ÇíÁ∞°Âçò„Å´Êú¨Áï™„É¢„Éº„Éâ„Å´ÊåÅ„Å£„Å¶Ë°å„Åç„Åü„ÅÑ„Åß„Åô„ÄÇWebhook„ÅØ„Äå„ÉÜ„Çπ„Éà„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Çí„Ç§„É≥„Éù„Éº„Éà„Äç„Åô„ÇãÊ©üËÉΩ„Åå„ÅÇ„Çä„Åæ„Åô„Åå„ÄÅÂïÜÂìÅ„Åß„ÅØ„Åß„Åç„Å™„ÅÑ„ÅÆ„Åå„Å°„Çá„Å£„Å®„Å†„ÅëÊÆãÂøµ„Åß„Åô„ÄÇ„ÉÜ„Çπ„ÉàÁí∞Â¢É„Åß‰ΩúÊàê„Åó„ÅüÂïÜÂìÅ„Çí„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Åô„Åπ„Å¶Êú¨Áï™„É¢„Éº„Éâ„Åß‰Ωú„ÇäÁõ¥„ÅôÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ&lt;/p&gt;

&lt;p&gt;Èï∑Âπ¥PayPal„Å®Êà¶„Å£„Å¶„ÅÑ„Åü„ÅÆ„Åß„ÄÅ„ÇÇ„Å£„Å®Êó©„Åè‰πó„ÇäÊèõ„Åà„Çå„Å∞ËâØ„Åã„Å£„Åü„Å®ÂæåÊÇî„Åó„Å¶„ÅÑ„Åæ„ÅôÔºàÁ¨ëÔºâ&lt;/p&gt;

&lt;p&gt;ÊúÄÂæå„Åæ„ÅßË™≠„Çì„Åß„Åè„Çå„Å¶„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åó„Åü„ÄÇ‰Ωï„ÅãË≥™Âïè„ÇÑ„Ç≥„É°„É≥„Éà„Åå„ÅÇ„Çå„Å∞„ÄÅ„Åú„Å≤„Å©„ÅÜ„Åû„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„ÅÑ„Åü„Åó„Åæ„ÅôÔºÅ&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>stripe</category>
      <category>aws</category>
      <category>demoscene</category>
    </item>
    <item>
      <title>Best Practices for Logging in Node.js</title>
      <author>Amod Shinde</author>
      <pubDate>Thu, 02 Dec 2021 15:14:45 +0000</pubDate>
      <link>https://dev.to/amoled27/best-practices-for-logging-in-nodejs-4clk</link>
      <guid>https://dev.to/amoled27/best-practices-for-logging-in-nodejs-4clk</guid>
      <description>&lt;p&gt;Let's be honest, developers do more debugging than writing the actual code. There are cases where you need to troubleshoot an issue Node.js application, logs are the saviours. They provide information about the severity of the problem, as well as insights into its root cause. Thus good logging practices are crucial for monitoring your Node.js servers, track errors, carry out different analyses and discover optimization opportunities. This article will outline best logging practices to follow when writing a Node.js application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-choosing-the-correct-library"&gt;
  &lt;/a&gt;
  1. Choosing the correct library
&lt;/h2&gt;

&lt;p&gt;Node.js developers tend to rely on the runtime's console methods ( like console.log()) to log events and provides a familiar API similar to the Javascript console mechanism in browsers. console.log() has its uses but it's not enough to use it as a logging solution in a production application. It does provide methods like console.warn(), console.error(), console.debug(), but these are mere functions that print the standard output and don't define the severity of the log. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#characteristics-of-a-good-logging-library"&gt;
  &lt;/a&gt;
  Characteristics of a good logging library
&lt;/h3&gt;

&lt;p&gt;A good logging library provides robust features that make it easier for developers to format and distribute the logs. For example, a typical logging framework will provide options for where to output log data. A developer can configure it to output logs in the terminal or save them in a filesystem or database or even send them over HTTP in case there is a separate log management service in place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#major-concerns-while-choosing-a-suitable-library"&gt;
  &lt;/a&gt;
  Major concerns while choosing a suitable library
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Recording:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting:&lt;/strong&gt; A library should provide proper log formatting options that help you differentiate the different logging levels, customize the colours and priorities of the levels as per need and convenience&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Storing:&lt;/strong&gt; It should also provide ways to configure where a developer can save logs as we talked about earlier&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance:&lt;/strong&gt; As the logger will be used throughout the codebase, it can harm your application's runtime performance, therefore it is crucial to analyse and compare the performance characteristics before choosing a library.&lt;/p&gt;

&lt;p&gt;one of such popular libraries is Winston, which we shall talk about in this blog.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-use-the-correct-log-levels"&gt;
  &lt;/a&gt;
  2. Use the Correct Log Levels
&lt;/h3&gt;

&lt;p&gt;Before proceeding with understanding the log levels let us install the library first so that you can try out commands and code as we go along.&lt;/p&gt;

&lt;p&gt;Install the library :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;npm&lt;/span&gt; &lt;span class="nx"&gt;install&lt;/span&gt; &lt;span class="nx"&gt;winston&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Regardless of what naming system different libraries use to denote log levels, the concept remains largely the same. Here are the most commonly used log levels in decreasing order of severity: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FATAL:&lt;/strong&gt; This represents a catastrophic situation, where your application cannot recover without manual intervention.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ERROR:&lt;/strong&gt; Represents an error in the system that may halt a specific operation, but not the system as a whole. This is usually used to log the errors returned by a third party API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WARN:&lt;/strong&gt; Indicates runtime conditions that are unusual but don't affect the running system in any way. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;INFO:&lt;/strong&gt; This represents purely informative messages. May use to log user-driven or application-specific events. A common use of this level is to log startup or shutdown service.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DEBUG:&lt;/strong&gt; Used to represent diagnostic information that may be needed for troubleshooting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TRACE:&lt;/strong&gt; Captures every possible detail about an application‚Äôs behaviour during development.&lt;/p&gt;

&lt;p&gt;The Winston library in particular uses the following log levels by default ‚Äî with the error being the most severe and silly being the least:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;verbose&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;silly&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you are not comfortable with default naming you can change this by initializing custom logger as per your needs in winston.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;winston&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logLevels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;info&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLogger&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;levels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;logLevels&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you want to log a message you can log the desire level directly on custom logger&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;System Started&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Fatal error occuered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-structural-logging"&gt;
  &lt;/a&gt;
  3. Structural Logging
&lt;/h3&gt;

&lt;p&gt;When writing log messages priority should be to make the messages easily readable to both machines and humans. One of the main goals of logging is to enable post-mortem debugging, which involves reading log entries and reconstructing the steps that led to an event in the system.&lt;/p&gt;

&lt;p&gt;Thus human-readable and easily understandable, descriptive messages will help developers and sysadmins. It‚Äôs also important to use a structured format that is easy to parse by machines.&lt;/p&gt;

&lt;p&gt;One of the best practices is to use JSON for logging as it is easily readable by humans as well as can be parsed by machines and can be easily converted to other formats. When logging in JSON, it‚Äôs necessary to use a standard schema so that the semantics of each field is clearly defined. This also makes it easy to find what you‚Äôre looking for when analyzing log entries.&lt;/p&gt;

&lt;p&gt;Winston outputs a JSON string by default with two fields: message and level. Message contains text that has been logged and level states the log level. we can customize this by using winston.format.  for example you can add timestamp by combining timestamp and json.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createLogger&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;winston&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLogger&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="na"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;({})],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-write-descriptive-messages"&gt;
  &lt;/a&gt;
  4. Write Descriptive Messages
&lt;/h3&gt;

&lt;p&gt;The message should clearly describe the event that occurred at that particular point. Each message should be unique to the situation so that the developer or system admin can differentiate and track down errors easily.&lt;/p&gt;

&lt;p&gt;One of the bad examples of a log message is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="nx"&gt;occured&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above log tells the user that an error has occurred but there are no specifics of what kind of error has occurred or which place it has occurred. A more descriptive message looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PUT&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://example.com/api&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;failed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Response&lt;/span&gt; &lt;span class="nx"&gt;code&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;503&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Internal Server Error!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;Retrying&lt;/span&gt; &lt;span class="nx"&gt;after&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;60&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From this message, we know that the request to the server of &lt;a href="http://example.com"&gt;example.com&lt;/a&gt; has failed. The probable reason is the third party server might be down for unknown reasons. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-avoid-logging-sensitive-data"&gt;
  &lt;/a&gt;
  5. Avoid Logging Sensitive Data
&lt;/h3&gt;

&lt;p&gt;Regardless of the type of application, you are working on, it is always important to avoid logging sensitive information in the logs. The sensitive information includes govt ID nos., addresses, phone numbers, email ids or access tokens etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-add-proper-context-to-your-logs"&gt;
  &lt;/a&gt;
  6. Add Proper Context to your Logs
&lt;/h3&gt;

&lt;p&gt;Another crucial step to keep in mind while logging is to provide the necessary context i.e. the developer should know where the log has come from or what it relates to. Context makes it possible to quickly reconstruct the actions leading up to an event.&lt;/p&gt;

&lt;p&gt;Winston provides the ability to add global metadata (such as the component or service where an event occurred) to every generated log entry. In a complex application, this information in your logs is helpful for troubleshooting issues because it immediately directs you to the point of failure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createLogger&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;combine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
  &lt;span class="na"&gt;defaultMeta&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;service&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;auth-service&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;transports&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;({})],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;the following output will be shown&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;User loggedIn successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;level&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auth-service&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;timestamp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2020-09-29T10:56:14.651Z&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Originally posted at &lt;a href="https://www.amodshinde.com/blog/nodejs-logging/"&gt;&lt;strong&gt;amodshinde.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
      <category>npm</category>
    </item>
    <item>
      <title>Best Practices to Avoid Memory Leaks</title>
      <author>Amod Shinde</author>
      <pubDate>Thu, 02 Dec 2021 15:10:55 +0000</pubDate>
      <link>https://dev.to/amoled27/best-practices-to-avoid-memory-leaks-2ibo</link>
      <guid>https://dev.to/amoled27/best-practices-to-avoid-memory-leaks-2ibo</guid>
      <description>&lt;p&gt;In the &lt;a href="https://dev.to/amoled27/memory-management-with-nodejs-3djn"&gt;Previous Blog &lt;/a&gt;we understood the Memory management in Node.js, how Garbage Collector (GC) works and what are the possible causes of memory leaks despite GC playing a crucial role. In this blog, let's look at best practices to ensure efficient memory use in Node.js.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#reduce-use-of-global-variables"&gt;
  &lt;/a&gt;
  REDUCE USE OF GLOBAL VARIABLES
&lt;/h5&gt;

&lt;p&gt;Since global variables are never garbage collected, it's best to ensure you don't overuse them. &lt;/p&gt;

&lt;p&gt;In javascript particularly you need to keep in mind certain aspects to reduce global variables&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Avoid accidental globals&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Javascript, if you assign a value to an undeclared variable, Javascript automatically hoists it as a global variable in default mode. Also, this goes the same with the word 'this' used in functions in the global scope.&lt;/p&gt;

&lt;p&gt;Examples:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this red variable gets hoisted in global space&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mango&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// since 'this' in global functions refers to global this varible is hoisted in global space&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alphanso&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt; It is helpful to write javascript in a strict mode with 'use strict' annotation at the top of the JS file. In newer versions of Node.js you can globally enable strict mode by passing '- - use_strict ' flag when running node command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;apple&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;red&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this will throw an error&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;mango&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// this function will have its own scope for 'this'&lt;/span&gt;
&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Alphanso&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Caution:&lt;/strong&gt;  Be careful when you use arrow functions though, because even in use strict mode 'this' in arrow function will be in global space&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// This will also become a global variable as arrow functions&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;plantation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;coconut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Brown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;solution:&lt;/strong&gt; use the no-invalid-this rule from ESLint to avoid such cases.&lt;/p&gt;

&lt;p&gt;Use global scope wisely :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As much as possible don't use the global scope, make the best use of the local scope inside the functions, as that will be garbage collected and will keep memory free.&lt;/li&gt;
&lt;li&gt;Try to define only constants, cache and reusable variables in global. Mark variables as null whenever the values are not needed.&lt;/li&gt;
&lt;li&gt;Do not use global space as a medium to pass values from one function to other, use function parameters instead.&lt;/li&gt;
&lt;li&gt;Dont store big objects in the global scope. If you have to store them, then nullify them when not needed. Dont let cache objects grow indefinitely, cleanup once and while.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use Stack Memory Effectively&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Accessing stack is much faster than accessing heap memory, hence try to use stack variables more frequently than their counterparts. This also ensures we don't accidentally cause memory leaks. Ofcourse in a real-world scenario, it's impossible to create a usable application by only using static data. But we can follow some tricks to make better use of the stack.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Avoid heap object references from stack variables when possible. Also, don‚Äôt keep unused variables.&lt;/li&gt;
&lt;li&gt;Destructure and use fields needed from an object or array rather than passing around entire objects/arrays to functions. This avoids keeping a reference to objects inside closures.
&lt;/li&gt;
&lt;/ol&gt;

&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Use Heap Memory Effectively&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In real-world applications it is quite impossible to completely avoid using heap memory but we can make it more efficient by following a few tips:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;copy objects instead of referencing them. Pass the reference only if the object is huge and copy operation is expensive. &lt;/li&gt;
&lt;li&gt;Avoid object mutations as much as possible, instead use object spread or object.assign and create a copy.&lt;/li&gt;
&lt;li&gt;Avoid creating multiple references to the same object&lt;/li&gt;
&lt;li&gt;Avoid creating huge object trees else keep them short-lived&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Use APM to track your heap memory usage.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Be Cautious when using Closures, Timers &amp;amp; Event Handlers&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For timers always remember to pass copies of objects to avoid mutations and clear timers when done using clearTimeout and clearInterval methods. &lt;/p&gt;

&lt;p&gt;Also, clear listeners once the job is done, don't keep them running forever. In cases where they are holding on to object reference from the parent scope.&lt;/p&gt;


&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Originally posted at &lt;a href="https://www.amodshinde.com/blog/avoid-memory-leaks/"&gt;&lt;strong&gt;amodshinde.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How Much Do Developers at Top Tech Companies Make?</title>
      <author>Shaheer</author>
      <pubDate>Thu, 02 Dec 2021 15:08:47 +0000</pubDate>
      <link>https://dev.to/shaheer912/how-much-do-developers-at-top-tech-companies-make-1lcg</link>
      <guid>https://dev.to/shaheer912/how-much-do-developers-at-top-tech-companies-make-1lcg</guid>
      <description>&lt;p&gt;Developers are the backbone of tech companies. These are the people who make sure everything works smoothly. You could say they're the heart and soul of any company's success. Every step of the software development process is done by developers, from planning to coding to testing. They work in one or more programming languages that help them create websites, apps, games, and other software technologies.&lt;/p&gt;

&lt;p&gt;Between 2010 and 2017, the median pay for software developers rose from $81k to $97k in the U.S. But how does this compare to other industries? In 2017, Software Developers earned a median salary of $97,000 which is more than twice the national average of $47,030. Tech companies are also boosting their salaries with stock options, bonuses, and perks like free food or Google's famous "20% time." &lt;/p&gt;

&lt;p&gt;It's hard to know where your salary ranks when applying for a job in tech because most job sites don't list salaries by company. We compiled data from top tech companies with the highest salaries to give you an idea of what you can expect if you're looking into a new career path in tech.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-much-do-they-make"&gt;
  &lt;/a&gt;
  How much do they make?
&lt;/h1&gt;

&lt;p&gt;All developers are not created equal. Some of them are better than others, and some have more experience. For example, one developer might be able to make $120,000 per year while another might only make $50,000.&lt;/p&gt;

&lt;p&gt;It's really about the kind of work that you do. The more complex your work is, the more you'll get paid. This is what you need to know if you want to become a developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The average salary for a developer is $97,000.&lt;/li&gt;
&lt;li&gt;A senior software engineer can make anywhere from $120,000-$175,000 per year&lt;/li&gt;
&lt;li&gt;A senior web developer can make between $80k-$110k+ per year&lt;/li&gt;
&lt;li&gt;An entry-level web developer can make between $50k-$65k+ per year&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-median-salary-for-a-software-developer"&gt;
  &lt;/a&gt;
  What is the median salary for a software developer?
&lt;/h1&gt;

&lt;p&gt;The U.S. Bureau of Labor Statistics lists the median salary for software developers at $97,000 in 2017. Software developers make more than twice the national average and rank among the highest-paid workers in America.&lt;/p&gt;

&lt;p&gt;Software developers can find work at a variety of companies and organizations and make a median salary of $97,000. But what does this mean to you? It means that if you're currently earning $45,000 per year as a software developer at a small company, you could easily apply to larger firms with greater earning potential.&lt;/p&gt;

&lt;p&gt;Or if you're not currently employed but want to break into the industry, it may be worth considering applying for jobs at these top-paying companies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facebook: Median annual salary is $133,080&lt;/li&gt;
&lt;li&gt;Google: Median annual salary is $128,750&lt;/li&gt;
&lt;li&gt;Amazon: Median annual salary is $117,959&lt;/li&gt;
&lt;li&gt;Apple: Median annual salary is $116,585&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#what-is-the-most-and-least-you-can-make-as-a-software-developer"&gt;
  &lt;/a&gt;
  What is the most and least you can make as a software developer?
&lt;/h1&gt;

&lt;p&gt;The most you can make in the U.S. with a salary is $180,000 with stock options and $140,000 with no stock options.&lt;/p&gt;

&lt;p&gt;The least you can make is $81,000 with no stock options or $120,000 with stock options.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-languages-do-developers-work-in"&gt;
  &lt;/a&gt;
  What languages do developers work in?
&lt;/h1&gt;

&lt;p&gt;Developers work in one or more programming languages that help them create websites, apps, games, and other software technologies.&lt;/p&gt;

&lt;p&gt;There are many programming languages for developers to choose from. But not all of them are applicable to every situation. &lt;/p&gt;

&lt;p&gt;Before you start learning a new language, it's important to understand what your strengths are and where you want to go with your career. Every developer has a specialty. They often specialize in a certain type of programming language or technology.&lt;/p&gt;

&lt;p&gt;These are some of the most in-demand programming languages for developers: Java, C#, Python, PHP, Ruby on Rails, JavaScript, C++. If you want to become a developer at a top tech company like Google or Facebook then you need to know these languages!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-do-developers-work-on"&gt;
  &lt;/a&gt;
  What do developers work on?
&lt;/h1&gt;

&lt;p&gt;Developers work on the back-end and front-end of projects. The back-end is the less glamorous part of a project where it does the heavy lifting behind the scenes - like data storage and database management - while the front-end is what users see when they interact with the program - like graphics and features.&lt;/p&gt;

&lt;p&gt;Different types of developers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Front-End Developer: Creates things that users can see on screens - graphics, features, etc.&lt;/li&gt;
&lt;li&gt;Back-End Developer: Creates code that manages data storage and database management for a project&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#how-can-i-become-a-developer-at-a-top-tech-company"&gt;
  &lt;/a&gt;
  How can I become a developer at a top tech company?
&lt;/h1&gt;

&lt;p&gt;In order to become a developer at a top tech company, you need to start learning the languages they use. If you want to work for Facebook or Google, then you'll need to know Java and JavaScript. &lt;/p&gt;

&lt;p&gt;And if you want to work for Apple, then you'll need to have a solid understanding of Objective-C and Swift.&lt;/p&gt;

&lt;p&gt;You can also learn the skills necessary by going &lt;a href="https://freecodecamp.org"&gt;through a coding bootcamp&lt;/a&gt;. There are many great schools that offer short courses in these programming languages. You'll get a crash course in these languages and be prepared for the job market once your class is over.&lt;/p&gt;

&lt;p&gt;A lot of developers learn on the job while working at different companies, but this can be difficult because it's hard to find an employer who will let you work on their specific projects while learning on the job. Some employers require that you come in with specific knowledge, like knowing Python syntax before they hire you. It's best if you start learning now so that when it comes time for interviews, your skills are up-to-par and ready!&lt;/p&gt;

&lt;p&gt;But knowing the skills needed in the job are not enough, you also need to be &lt;a href="https://judocoder.com"&gt;prepared for the interview!&lt;/a&gt; Fortunately, we can help you in that regard! (check out JudoCoder.com)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;The tech industry is booming and pays well. It's also a hub for innovation and entrepreneurship. If you're considering the tech industry, you should know that there are many ways to make good money in this field, especially if you work for one of the companies listed above.&lt;/p&gt;

&lt;p&gt;You can make anywhere from $80,000 to $180,000 in the tech industry even if you are just starting out (and not to mention the perks and stock options that come along with it!).&lt;/p&gt;

&lt;p&gt;So if you are interested in working at top tech, make sure you are prepared for a technical interview.&lt;/p&gt;

&lt;p&gt;The good news is, &lt;a href="https://judocoder.com"&gt;JudoCoder.com&lt;/a&gt; provides handpicked selection of all sorts of &lt;a href="https://judocoder.com"&gt;data structures and algorithm questions&lt;/a&gt;, most of these questions have been asked in a real interview!.&lt;/p&gt;

&lt;p&gt;I would suggest you create a free account at judocoder.com and start practicing your skills. You will be prepared in no time!..&lt;/p&gt;

&lt;p&gt;No matter what you do, make sure you practice! You'll be happy you did when it's time for your interview.&lt;/p&gt;

&lt;p&gt;Let me know what do you think? Is this an accurate representation of what you can expect to make at top tech companies? Let me know your comments. I would love to hear what you have to say!&lt;/p&gt;

</description>
      <category>career</category>
      <category>motivation</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>Implementing RBAC in Laravel Tutorial</title>
      <author>Shahed Nasser</author>
      <pubDate>Thu, 02 Dec 2021 15:07:47 +0000</pubDate>
      <link>https://dev.to/shahednasser/implementing-rbac-in-laravel-tutorial-3c7f</link>
      <guid>https://dev.to/shahednasser/implementing-rbac-in-laravel-tutorial-3c7f</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was published on &lt;a href="https://blog.shahednasser.com/implementing-rbac-in-laravel-tutorial/"&gt;my personal blog&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Role-Based Access Control, or RBAC, is the ability to add roles or restrict actions for users. It can be done in a general, high-level way, for example, to disallow some users from login into the admin panel. It can also be done more specifically, for example, allowing users to view a post but not edit it.&lt;/p&gt;

&lt;p&gt;In this tutorial, you'll learn how to implement RBAC in Laravel using &lt;a href="https://github.com/JosephSilber/bouncer"&gt;Bouncer&lt;/a&gt;. Bouncer is a PHP package that lets you add roles and abilities to your Eloquent models.&lt;/p&gt;

&lt;p&gt;You'll build an editor that lets the user create private posts with the ability to allow other users to view and edit their posts. You can find the code for this tutorial in &lt;a href="https://github.com/shahednasser/laravel-rbac-tutorial"&gt;this GitHub repository&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;p&gt;You need to download &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwjH16_e3vnzAhWOQUEAHdipBuIQjBB6BAgQEAE&amp;amp;url=https%3A%2F%2Fgetcomposer.org%2Fdownload%2F&amp;amp;usg=AOvVaw0hifbxuQZySOtGjSzPWfJo"&gt;Composer&lt;/a&gt; to follow along in this tutorial.&lt;/p&gt;

&lt;p&gt;In addition, this tutorial uses Laravel 8 with PHP 7.3. To run Laravel 8, you need your PHP version to be at least 7.3.&lt;/p&gt;

&lt;p&gt;You can check your PHP version in the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php -v
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;NPM is also used in some parts of this tutorial, but it's not important for implementing RBAC. If you want to follow along with everything, make sure you have NPM installed. NPM is installed by installing &lt;a href="https://nodejs.org"&gt;Node.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#project-setup"&gt;
  &lt;/a&gt;
  Project Setup
&lt;/h2&gt;

&lt;p&gt;The first step is to set up the Laravel project. In your terminal, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer create-project laravel/laravel laravel-rbac-tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that is done, switch to the directory of the project:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd laravel-rbac-tutorial
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you need to add your database configuration on &lt;code&gt;.env&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now migrate Laravel's default migrations to your database:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add Laravel's default tables as well as the &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#implement-authentication"&gt;
  &lt;/a&gt;
  Implement Authentication
&lt;/h2&gt;

&lt;p&gt;To implement authentication easily, you can use &lt;a href="https://github.com/laravel/ui"&gt;Laravel UI&lt;/a&gt;. Install it with this command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require laravel/ui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, run the following command to add the UI for authentication:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan ui bootstrap --auth
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will add the directory &lt;code&gt;app/Http/Controllers/Auth&lt;/code&gt; with the controllers needed to implement authentication. It will also add the necessary view files  &lt;code&gt;resources/views&lt;/code&gt; to add pages like login and register.&lt;/p&gt;

&lt;p&gt;Then, compile the CSS and JavaScript assets added by the previous command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install &amp;amp;&amp;amp; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command might end in an error. If so, run the &lt;code&gt;dev&lt;/code&gt; script again:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, go to &lt;code&gt;app/Providers/RouteServiceProvider.php&lt;/code&gt; and change the value for the constant &lt;code&gt;HOME&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public const HOME = '/';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, run the server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, go to &lt;code&gt;localhost:8000&lt;/code&gt;. You'll see the login form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SzfBwulr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-3.24.13-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SzfBwulr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-3.24.13-PM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="362"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is added by Laravel UI. Since you don't have a user yet, click on Register in the navigation bar. You'll see then a registration form.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TETFQKO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-11.10.50-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TETFQKO6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-11.10.50-AM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After you register as a user, you'll be logged in.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--finipBz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-11.10.41-AM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--finipBz3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-11.10.41-AM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="191"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-posts"&gt;
  &lt;/a&gt;
  Add Posts
&lt;/h2&gt;

&lt;p&gt;Now, you'll add posts that the user will be able to create.&lt;/p&gt;

&lt;p&gt;Start by creating a migration:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:migration create_posts_table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new migration file in &lt;code&gt;database/migrations&lt;/code&gt; with the file name's suffix &lt;code&gt;create_posts_table&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Open the migration file and replace its content with the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreatePostsTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table-&amp;gt;id();
            $table-&amp;gt;string('title');
            $table-&amp;gt;longText('content');
            $table-&amp;gt;foreignId('user_id')-&amp;gt;constrained()-&amp;gt;cascadeOnUpdate()-&amp;gt;cascadeOnDelete();
            $table-&amp;gt;timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('posts');
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, migrate the changes to create the &lt;code&gt;posts&lt;/code&gt; table:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, create the file &lt;code&gt;app/Models/Post.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;?php

/**
 * Created by Reliese Model.
 */

namespace App\Models;

use Carbon\Carbon;
use Illuminate\Database\Eloquent\Model;

/**
 * Class Post
 * 
 * @property int $id
 * @property string $title
 * @property string $content
 * @property int $user_id
 * @property Carbon|null $created_at
 * @property Carbon|null $updated_at
 * 
 * @property User $user
 *
 * @package App\Models
 */
class Post extends Model
{
    protected $table = 'posts';

    protected $casts = [
        'user_id' =&amp;gt; 'int'
    ];

    protected $fillable = [
        'title',
        'content',
        'user_id'
    ];

    public function user()
    {
        return $this-&amp;gt;belongsTo(User::class);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-post-form-page"&gt;
  &lt;/a&gt;
  Add Post Form Page
&lt;/h2&gt;

&lt;p&gt;You'll now add the page the user will use to create a new post or edit an old one.&lt;/p&gt;

&lt;p&gt;In your terminal, run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan make:controller PostController
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create a new controller in &lt;code&gt;app/Http/Controllers/PostController.php&lt;/code&gt;. Open it and add a constructor method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
 * Create a new controller instance.
 *
 * @return void
 */
public function __construct()
{
    $this-&amp;gt;middleware('auth');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This adds the &lt;code&gt;auth&lt;/code&gt; middleware to all methods in this controller. This means that the user must be logged in before accessing any of the routes that point at this controller.&lt;/p&gt;

&lt;p&gt;Next, add the &lt;code&gt;postForm&lt;/code&gt; function that renders the post form view:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function postForm ($id = null) {
    /** @var User $user */
    $user = Auth::user();

    $post = null;
    if ($id) {
        /** @var Post $post */
        $post = Post::query()-&amp;gt;find($id);
        if (!$post || $post-&amp;gt;user-&amp;gt;id !== $user-&amp;gt;id) {
            return response()-&amp;gt;redirectTo('/');
        }
    }

    return view('post-form', ['post' =&amp;gt; $post]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice that this receives an optional &lt;code&gt;id&lt;/code&gt; paramter, then retrieves the post based on that ID. It also validates that the post exists and belongs to the current logged-in user. This is because this method will handle the request for both creating a post and editing a post.&lt;/p&gt;

&lt;p&gt;Then, create the view &lt;code&gt;resources/views/post-form.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@extends('layouts.app')

@push('head_scripts')
    &amp;lt;link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/trix@1.3.1/dist/trix.css"&amp;gt;
@endpush

@section('content')
&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="row justify-content-center"&amp;gt;
        &amp;lt;div class="col-md-8"&amp;gt;
            &amp;lt;div class="card"&amp;gt;
                &amp;lt;div class="card-header"&amp;gt;{{ $post ? __('Edit Post') :__('New Post') }}&amp;lt;/div&amp;gt;

                &amp;lt;div class="card-body"&amp;gt;
                    &amp;lt;form method="POST" action="#"&amp;gt;
                        @csrf
                        @error('post')
                            &amp;lt;div class="alert alert-danger"&amp;gt;{{ $message }}&amp;lt;/div&amp;gt;
                        @enderror
                        &amp;lt;div class="form-group"&amp;gt;
                            &amp;lt;label for="title"&amp;gt;{{ __('Title') }}&amp;lt;/label&amp;gt;
                            &amp;lt;input type="text" name="title" id="title" placeholder="Title" required 
                               value="{{ $post ? $post-&amp;gt;title : old('title') }}" class="form-control @error('title') is-invalid @enderror" /&amp;gt;
                            @error('title')
                                &amp;lt;span class="invalid-feedback"&amp;gt;{{ $message }}&amp;lt;/span&amp;gt;
                            @enderror
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class="form-group"&amp;gt;
                            &amp;lt;label for="content"&amp;gt;{{ __('Content') }}&amp;lt;/label&amp;gt;
                            @error('content')
                                &amp;lt;span class="invalid-feedback"&amp;gt;{{ $message }}&amp;lt;/span&amp;gt;
                            @enderror
                            &amp;lt;input id="content" type="hidden" name="content" value="{{ $post ? $post-&amp;gt;content : old('content') }}"&amp;gt;
                            &amp;lt;trix-editor input="content"&amp;gt;&amp;lt;/trix-editor&amp;gt;
                        &amp;lt;/div&amp;gt;
                        &amp;lt;div class="form-group"&amp;gt;
                            &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;{{ __('Submit') }}&amp;lt;/button&amp;gt;
                        &amp;lt;/div&amp;gt;
                    &amp;lt;/form&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&amp;lt;script src="https://cdn.jsdelivr.net/npm/trix@1.3.1/dist/trix.js"&amp;gt;&amp;lt;/script&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This shows a form with 2 inputs. A title text input, and a text editor for the content. The text editor is &lt;a href="https://github.com/basecamp/trix"&gt;Trix&lt;/a&gt;, an easy-to-use open-source editor.&lt;/p&gt;

&lt;p&gt;You still need to add the link to the page. So, in &lt;code&gt;resources/views/layouts/app.blade.php&lt;/code&gt; add the following menu item in the &lt;code&gt;ul&lt;/code&gt; under the comment &lt;code&gt;&amp;lt;!-- Left Side Of Navbar --&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;li class="nav-item"&amp;gt;
    &amp;lt;a class="nav-link" href="{{ route('post.form') }}"&amp;gt;{{ __('New Post') }}&amp;lt;/a&amp;gt;
&amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, add the route to the page in &lt;code&gt;routes/web.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/post/{id?}', [PostController::class, 'postForm'])-&amp;gt;name('post.form');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go to the website now, you'll notice a new link in the navbar that says "New Post". If you click on it, you'll see the form you created for the posts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mp0Eq6rB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-12.22.29-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mp0Eq6rB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-12.22.29-PM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="474"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-posts"&gt;
  &lt;/a&gt;
  Save Posts
&lt;/h2&gt;

&lt;p&gt;Before you implement the save functionality for posts, it's time to use Bouncer to implement RBAC.&lt;/p&gt;

&lt;p&gt;In your terminal, run the following to install Bouncer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;composer require silber/bouncer v1.0.0-rc.10
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, in &lt;code&gt;app/Models/User.php&lt;/code&gt; make the following changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Silber\Bouncer\Database\HasRolesAndAbilities;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRolesAndAbilities;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, run the following command to add the migrations that Bouncer needs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan vendor:publish --tag="bouncer.migrations"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, migrate these changes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bouncer is now ready to use. You can now add the save post functionality.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;app/Http/Controllers/PostController.php&lt;/code&gt; add the new &lt;code&gt;savePost&lt;/code&gt; method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function savePost (Request $request, $id = null) {
    /** @var $user */
    $user = Auth::user();

    Validator::validate($request-&amp;gt;all(), [
    'title' =&amp;gt; 'required|min:1',
    'content' =&amp;gt; 'required|min:1'
    ]);

    //all valid, validate id if not null
    /** @var Post $post */
    if ($id) {
        $post = Post::query()-&amp;gt;find($id);
        if (!$post) {
        return back()-&amp;gt;withErrors(['post' =&amp;gt; __('Post does not exist')]);
        }
    } else {
        $post = new Post();
    }

    //set data
    $post-&amp;gt;title = $request-&amp;gt;get('title');
    $post-&amp;gt;content = $request-&amp;gt;get('content');
    if (!$post-&amp;gt;user) {
        $post-&amp;gt;user()-&amp;gt;associate($user);
    }
    $post-&amp;gt;save();

    if (!$id) {
        Bouncer::allow($user)-&amp;gt;toManage($post);
    }

    return response()-&amp;gt;redirectToRoute('post.form', ['id' =&amp;gt; $post-&amp;gt;id]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this method, you first validate that both &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; were entered in the form. Then, if the optional parameter &lt;code&gt;id&lt;/code&gt; is passed to the method you validate if it exists and if it belongs to this user. This is similar to the &lt;code&gt;postForm&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;After validating everything, you set &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt;. Then, if the post is new you set the current user as the owner of the post with &lt;code&gt;$post-&amp;gt;user()-&amp;gt;associate($user);&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The important bit is here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!$id) {
    Bouncer::allow($user)-&amp;gt;toManage($post);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;Bouncer&lt;/code&gt; facade, you can use functions like &lt;code&gt;allow&lt;/code&gt;, which takes a user model. Then, you can give different types of permissions to the user. By using &lt;code&gt;toManage&lt;/code&gt;, you give the user all sorts of management permissions over the &lt;code&gt;$post&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;Now, add the route for this method in &lt;code&gt;routes/web.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::post('/post/{id?}', [PostController::class, 'savePost'])-&amp;gt;name('post.save');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, change the form action in &lt;code&gt;resources/views/post-form.blade.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;form method="POST" action="{{ route('post.save', ['id' =&amp;gt; $post ? $post-&amp;gt;id : null]) }}"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you go now the New Post page and try adding a post by filling the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;content&lt;/code&gt; fields then clicking Submit, you'll be redirected back to the form with the content filled in which means the post has been added.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#show-posts"&gt;
  &lt;/a&gt;
  Show Posts
&lt;/h2&gt;

&lt;p&gt;To make the posts added visible to the user, change the &lt;code&gt;index&lt;/code&gt; method in &lt;code&gt;app/Http/Controller/HomeController.php&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
* Show the application dashboard.
*
* @return \Illuminate\Contracts\Support\Renderable
*/
public function index()
{
    /** @var User $user */
    $user = Auth::user();
    //get all posts
    $posts = Post::query()-&amp;gt;where('user_id', $user-&amp;gt;id)-&amp;gt;get();
    return view('home', ['posts' =&amp;gt; $posts]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will retrieve the posts that are made by the currently logged-in user.&lt;/p&gt;

&lt;p&gt;Next, change &lt;code&gt;resources/views/home.blade.php&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@extends('layouts.app')

@section('content')
&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="row justify-content-center"&amp;gt;
        &amp;lt;div class="col-md-8"&amp;gt;
            &amp;lt;h1&amp;gt;{{ __('My Posts') }}&amp;lt;/h1&amp;gt;
            @forelse ($posts as $post)
                &amp;lt;div class="card"&amp;gt;
                    &amp;lt;div class="card-header"&amp;gt;{{ $post-&amp;gt;title }}&amp;lt;/div&amp;gt;

                    &amp;lt;div class="card-body"&amp;gt;
                        {!! $post-&amp;gt;content !!}
                    &amp;lt;/div&amp;gt;

                    &amp;lt;div class="card-footer"&amp;gt;
                        {{ __('By ' . $post-&amp;gt;user-&amp;gt;name) }} - 
                        &amp;lt;a href="{{ route('post.form', ['id' =&amp;gt; $post-&amp;gt;id]) }}"&amp;gt;{{ __('Edit') }}&amp;lt;/a&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            @empty
                &amp;lt;div class="card"&amp;gt;
                    &amp;lt;div class="card-body"&amp;gt;
                        {{ __('You have no posts') }}
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            @endforelse
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show the list of posts that the user has added if there are any.&lt;/p&gt;

&lt;p&gt;If you open the home page now, you should see the post you added earlier.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OlVWEFKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-1.11.16-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OlVWEFKk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-1.11.16-PM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-view-and-edit-access"&gt;
  &lt;/a&gt;
  Add View and Edit Access
&lt;/h2&gt;

&lt;p&gt;In this section, you will be adding the functionality to allow access to other users either to edit or view a post. This will show how RBAC implementation works and how you can restrict or give access to a certain model for users.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;resources/views/home.blade.php&lt;/code&gt; change the element with class &lt;code&gt;.card-footer&lt;/code&gt; that holds the Edit link to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="card-footer"&amp;gt;
  {{ __('By ' . $post-&amp;gt;user-&amp;gt;name) }} - 
  &amp;lt;a href="{{ route('post.form', ['id' =&amp;gt; $post-&amp;gt;id]) }}"&amp;gt;{{ __('Edit') }}&amp;lt;/a&amp;gt; - 
  &amp;lt;a href="{{ route('post.access', ['id' =&amp;gt; $post-&amp;gt;id, 'type' =&amp;gt; 'view']) }}"&amp;gt;{{ __('Change view access...') }}&amp;lt;/a&amp;gt; - 
  &amp;lt;a href="{{ route('post.access', ['id' =&amp;gt; $post-&amp;gt;id, 'type' =&amp;gt; 'edit']) }}"&amp;gt;{{ __('Change edit access...') }}&amp;lt;/a&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This adds 2 links for a new page which is access form. This page allows the user to change view or edit access for other users to the post.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;app/Http/Controllers/PostController.php&lt;/code&gt; add a new method &lt;code&gt;accessForm&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function accessForm ($id, $type) {
    /** @var App/Models/User $user */
    $user = Auth::user();

    /** @var Post $post */
    $post = Post::query()-&amp;gt;find($id);
    if (!$post || $post-&amp;gt;user-&amp;gt;id !== $user-&amp;gt;id) {
        return response()-&amp;gt;redirectTo('/');
    }

    //get all users
    $users = User::query()-&amp;gt;where('id', '!=', $user-&amp;gt;id)-&amp;gt;get();

    return view('post-access', ['post' =&amp;gt; $post, 'users' =&amp;gt; $users, 'type' =&amp;gt; $type]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This route receives 2 parameters: &lt;code&gt;id&lt;/code&gt; which is the post ID, and &lt;code&gt;type&lt;/code&gt; which is the type of access. The type of access can be view or edit.&lt;/p&gt;

&lt;p&gt;In this method you first validate the post and make sure it exists and it belongs to the current logged in user. Then, you retrieve all other users and send them to the view &lt;code&gt;post-access&lt;/code&gt; which we'll create now.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;resources/views/post-access.blade.php&lt;/code&gt; with the following content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@extends('layouts.app')

@section('content')
&amp;lt;div class="container"&amp;gt;
    &amp;lt;div class="row justify-content-center"&amp;gt;
        &amp;lt;div class="col-md-8"&amp;gt;
            &amp;lt;h1&amp;gt;{{ __("Change " . ucwords($type) . " Access to Post") }}&amp;lt;/h1&amp;gt;
            &amp;lt;div class="card"&amp;gt;

              &amp;lt;div class="card-body"&amp;gt;
                &amp;lt;form method="POST" action={{ route('post.access.save', ['id' =&amp;gt; $post-&amp;gt;id, 'type' =&amp;gt; $type]) }}&amp;gt;
                  @csrf 
                  @forelse ($users as $user)
                    &amp;lt;div class="form-group"&amp;gt;
                      &amp;lt;label for="user_{{ $user-&amp;gt;id }}"&amp;gt;
                        &amp;lt;input type="checkbox" name="users[]" id="user_{{ $user-&amp;gt;id }}" value="{{ $user-&amp;gt;id }}" 
                        class="form-control d-inline mr-3" @if ($user-&amp;gt;can($type, $post)) checked @endif 
                        style="width: fit-content; vertical-align: middle;" /&amp;gt;
                         &amp;lt;span&amp;gt;{{ $user-&amp;gt;name }}&amp;lt;/span&amp;gt;
                      &amp;lt;/label&amp;gt;
                    &amp;lt;/div&amp;gt;
                  @empty
                    {{ __('There are no users') }}
                  @endforelse
                  &amp;lt;div class="form-group"&amp;gt;
                    &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;{{ __('Save') }}&amp;lt;/button&amp;gt;
                  &amp;lt;/div&amp;gt;
                &amp;lt;/form&amp;gt;
              &amp;lt;/div&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
@endsection
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This shows the list of users with checkboxes. Those who already have access will already by checked, others unchecked.&lt;/p&gt;

&lt;p&gt;Now, you'll create the route that handles saving the access for the post. In &lt;code&gt;app/Http/Controllers/PostController.php&lt;/code&gt; add the new method &lt;code&gt;saveAccess&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public function saveAccess (Request $request, $id, $type) {
    /** @var User $user */
    $user = Auth::user();

    /** @var Post $post */
    $post = Post::query()-&amp;gt;find($id);
    if (!$post || $post-&amp;gt;user-&amp;gt;id !== $user-&amp;gt;id) {
        return response()-&amp;gt;redirectTo('/');
    }

    $users = $request-&amp;gt;get('users', []);
    $disallowedUserNotIn = $users;
    $disallowedUserNotIn[] = $user-&amp;gt;id;
    //disallow users not checked
    $disallowedUsers = User::query()-&amp;gt;whereNotIn('id', $disallowedUserNotIn)-&amp;gt;get();

    /** @var User $disallowedUser */
    foreach ($disallowedUsers as $disallowedUser) {
        $disallowedUser-&amp;gt;disallow($type, $post);
    }

    //allow checked users
    $allowedUsers = User::query()-&amp;gt;whereIn('id', $users)-&amp;gt;get();

    /** @var User $allowedUser */
    foreach($allowedUsers as $allowedUser) {
        $allowedUser-&amp;gt;allow($type, $post);
    }

    return back();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This route also receives 2 parameters &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt;, same as &lt;code&gt;accessForm&lt;/code&gt;. You also validate the post by checking that it exists and that it belongs to the current user.&lt;/p&gt;

&lt;p&gt;Then, you retrieve the checked users from the &lt;code&gt;request&lt;/code&gt;. There are 2 actions to do here: disallow unchecked users to perform the action &lt;code&gt;type&lt;/code&gt; on the post, and allow checked users to perform the action &lt;code&gt;type&lt;/code&gt; on the post.&lt;/p&gt;

&lt;p&gt;So, you first retrieve the users that are not in the array &lt;code&gt;$users&lt;/code&gt; which holds the checked user IDs. Then, you loop over them to perform the following method on each of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$disallowedUser-&amp;gt;disallow($type, $post);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the trait &lt;code&gt;HasRolesAndAbilities&lt;/code&gt; is added to a model, which we did earlier to the model &lt;code&gt;User&lt;/code&gt;, a set of methods are added to that m0del. One of them is &lt;code&gt;disallow&lt;/code&gt; which disallows the user a certain ability and you can specify a model to be more specific about what that ability is disabled on.&lt;/p&gt;

&lt;p&gt;So, here you are disallowing the user in the loop to perform the action &lt;code&gt;$type&lt;/code&gt; on the post &lt;code&gt;$post&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, you retrieve the users that are in the &lt;code&gt;$users&lt;/code&gt; array and that should be granted the ability to perform action &lt;code&gt;$type&lt;/code&gt; on them. You loop over them and perform the following method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$allowedUser-&amp;gt;allow($type, $post);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Similar to &lt;code&gt;disallow&lt;/code&gt;, &lt;code&gt;allow&lt;/code&gt; is another method that is added by the trait &lt;code&gt;HasRolesAndAbilities&lt;/code&gt;. It allows the user to have the ability &lt;code&gt;$type&lt;/code&gt; either in general or on a given model that is specified as a second parameter.&lt;/p&gt;

&lt;p&gt;Here, you allow the user to perform the action &lt;code&gt;$type&lt;/code&gt; on the post &lt;code&gt;$post&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, add the new routes in &lt;code&gt;routes/web.php&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/post/access/{id}/{type}', [PostController::class, 'accessForm'])-&amp;gt;name('post.access');

Route::post('/post/access/{id}/{type}', [PostController::class, 'saveAccess'])-&amp;gt;name('post.access.save');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, there are some changes left to do. First, you need to change the condition in &lt;code&gt;postForm&lt;/code&gt; which allows users who have the permission to edit or view the post to access the page:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!$post || ($post-&amp;gt;user-&amp;gt;id !== $user-&amp;gt;id &amp;amp;&amp;amp; !$user-&amp;gt;can('edit', $post) &amp;amp;&amp;amp; !$user-&amp;gt;can('view', $post))) {
    return response()-&amp;gt;redirectTo('/');
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You also need to allow users who have edit permission to edit the post in &lt;code&gt;savePost&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;if (!$post || ($post-&amp;gt;user-&amp;gt;id !== $user-&amp;gt;id &amp;amp;&amp;amp; !$user-&amp;gt;can('edit', $post))) {
    return back()-&amp;gt;withErrors(['post' =&amp;gt; __('Post does not exist')]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;app/Http/Controllers/HomeController.php&lt;/code&gt; in the &lt;code&gt;index&lt;/code&gt; method change the method to also retrieve the posts that the user has edit or view permissions on:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/**
     * Show the application dashboard.
     *
     * @return \Illuminate\Contracts\Support\Renderable
     */
    public function index()
    {
        /** @var User $user */
        $user = Auth::user();
        //get all posts
        $posts = Post::query()-&amp;gt;where('user_id', $user-&amp;gt;id);
        //get posts that the user is allowed to view or edit
        $postIds = [];
        $abilities = $user-&amp;gt;getAbilities();
        /** @var \Silber\Bouncer\Database\Ability */
        foreach ($abilities as $ability) {
            $postIds[] = $ability-&amp;gt;entity_id;
        }
        $posts = $posts-&amp;gt;orWhereIn('id', $postIds)-&amp;gt;get();
        return view('home', ['posts' =&amp;gt; $posts]);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is done using the &lt;code&gt;getAbilities&lt;/code&gt; method that is added on the &lt;code&gt;User&lt;/code&gt; model like &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;disallow&lt;/code&gt;. Each ability holds the id of the model it represents under &lt;code&gt;entity_id&lt;/code&gt;. We use that to get the ID of posts that the user has view or edit permissions on and retrieve them to show them on the home page.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;resources/views/home.blade.php&lt;/code&gt; change the element with class &lt;code&gt;.card-footer&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="card-footer"&amp;gt;
    {{ __('By ' . $post-&amp;gt;user-&amp;gt;name) }} - 
    &amp;lt;a href="{{ route('post.form', ['id' =&amp;gt; $post-&amp;gt;id]) }}"&amp;gt;{{ __('View') }}&amp;lt;/a&amp;gt;
    @can('manage', $post)
        - &amp;lt;a href="{{ route('post.access', ['id' =&amp;gt; $post-&amp;gt;id, 'type' =&amp;gt; 'view']) }}"&amp;gt;{{ __('Change view access...') }}&amp;lt;/a&amp;gt; - 
        &amp;lt;a href="{{ route('post.access', ['id' =&amp;gt; $post-&amp;gt;id, 'type' =&amp;gt; 'edit']) }}"&amp;gt;{{ __('Change edit access...') }}&amp;lt;/a&amp;gt;
    @endcan
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You now only show the change access links to the user that manages the post so that not everyone that has access to the post can make changes to its access settings. This can be done by using the &lt;code&gt;@can&lt;/code&gt; blade directive which accepts the ability name and optionally a model instance. In this case, we check if the current user can &lt;code&gt;manage&lt;/code&gt; the post &lt;code&gt;$post&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you need to make changes to &lt;code&gt;resources/views/post-form.blade.php&lt;/code&gt; to ensure that if the user has view permission only they can't make edits on the post. This means that the form will become read-only.&lt;/p&gt;

&lt;p&gt;Change the content of the element with the class &lt;code&gt;card&lt;/code&gt; to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="card-header"&amp;gt;{{ $post ? __('View Post') :__('New Post') }}&amp;lt;/div&amp;gt;

&amp;lt;div class="card-body"&amp;gt;
    &amp;lt;form method="POST" action="{{ route('post.save', ['id' =&amp;gt; $post ? $post-&amp;gt;id : null]) }}"&amp;gt;
        @csrf
        @error('post')
            &amp;lt;div class="alert alert-danger"&amp;gt;{{ $message }}&amp;lt;/div&amp;gt;
        @enderror
        @if ($post &amp;amp;&amp;amp; !Auth::user()-&amp;gt;can('edit', $post))
            &amp;lt;div class="alert alert-info"&amp;gt;{{ __('You have view permissions only') }}&amp;lt;/div&amp;gt;
        @endif
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="title"&amp;gt;{{ __('Title') }}&amp;lt;/label&amp;gt;
            &amp;lt;input type="text" name="title" id="title" placeholder="Title" required 
            value="{{ $post ? $post-&amp;gt;title : old('title') }}" class="form-control @error('title') is-invalid @enderror" 
            @if($post &amp;amp;&amp;amp; !Auth::user()-&amp;gt;can('edit', $post)) disabled="true" @endif /&amp;gt;
            @error('title')
                &amp;lt;span class="invalid-feedback"&amp;gt;{{ $message }}&amp;lt;/span&amp;gt;
            @enderror
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="form-group"&amp;gt;
            &amp;lt;label for="content"&amp;gt;{{ __('Content') }}&amp;lt;/label&amp;gt;
            @error('content')
                &amp;lt;span class="invalid-feedback"&amp;gt;{{ $message }}&amp;lt;/span&amp;gt;
            @enderror
            @if($post &amp;amp;&amp;amp; !Auth::user()-&amp;gt;can('edit', $post))
                {!! $post-&amp;gt;content !!}
            @else 
                &amp;lt;input id="content" type="hidden" name="content" value="{{ $post ? $post-&amp;gt;content : old('content') }}"&amp;gt;
                &amp;lt;trix-editor input="content"&amp;gt;&amp;lt;/trix-editor&amp;gt;
            @endif
        &amp;lt;/div&amp;gt;
        @if(!$post || Auth::user()-&amp;gt;can('edit', $post))
            &amp;lt;div class="form-group"&amp;gt;
                &amp;lt;button type="submit" class="btn btn-primary"&amp;gt;{{ __('Submit') }}&amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        @endif
    &amp;lt;/form&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This makes the &lt;code&gt;title&lt;/code&gt; input disabled, shows the content of the post readable rather than in an editor, and hides the submit button when the user does not have &lt;code&gt;edit&lt;/code&gt; permissions.&lt;/p&gt;

&lt;p&gt;Let's test all of this together. You first need to create another user to test this out so go ahead and register as a new user. Then log in again with the user you previously created and click on "Change view access..." on one of the posts you created. You'll see a form with the user you created and a checkbox.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ln-JDQgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-1.49.30-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ln-JDQgO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-1.49.30-PM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check the checkbox and click save. This will give the new user the ability to view the post.&lt;/p&gt;

&lt;p&gt;Now, log out and log in again with the new user. You'll see the post in the home page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mfUhWpI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-2.37.38-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mfUhWpI2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-2.37.38-PM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="301"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click on View. You'll see the same form that you saw before when creating a post but the title input is disabled and the editor is not available anymore.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QzPAIorK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-2.40.46-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QzPAIorK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-2.40.46-PM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="397"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try giving the user edit permissions now. Log out and login with the first user again. This time, click on "Change edit access" on the post. Give the new user access and click Save.&lt;/p&gt;

&lt;p&gt;Again, logout and login as the new user. Then, click on View on the post in the home page. You should now be able to edit the post.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UUTjHt8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-2.41.35-PM.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UUTjHt8D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://backend.shahednasser.com/content/images/2021/11/Screen-Shot-2021-11-02-at-2.41.35-PM.png" alt="Implementing RBAC in Laravel Tutorial" width="880" height="469"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can even try going back to the first user and removing the edit access for the new user on the post. They will no longer be able to edit the post.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;RBAC adds abilities and roles to users which allows you to manage permissions in your app. In this tutorial, you learned how to use Bouncer to implement RBAC in Laravel, allowing or disallowing permissions and abilities for users.&lt;/p&gt;

&lt;p&gt;Be sure to check out &lt;a href="https://github.com/JosephSilber/bouncer"&gt;Bouncer's documentation&lt;/a&gt; to learn more about what you can do with the package.&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
      <category>tutorial</category>
      <category>webdev</category>
    </item>
    <item>
      <title>useEffect() in ReactJs</title>
      <author>Amod Shinde</author>
      <pubDate>Thu, 02 Dec 2021 15:07:06 +0000</pubDate>
      <link>https://dev.to/amoled27/useeffect-in-reactjs-2hda</link>
      <guid>https://dev.to/amoled27/useeffect-in-reactjs-2hda</guid>
      <description>&lt;p&gt;Functional components gained popularity after React team included hooks in React 16 .8 release. The react hooks facilitate developers to do state management in the formerly called stateless components i.e. functional components. Many developers have switched to react hooks approach since their introduction.&lt;/p&gt;

&lt;p&gt;one of the important hooks is useEffect(). For those who are familiar with the class based approach of React.js, useEffect is a combination of &lt;strong&gt;componentDidMount&lt;/strong&gt;, &lt;strong&gt;componentDidUpdate&lt;/strong&gt; and &lt;strong&gt;componentWillMount&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Importing hooks&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The react hooks are part of 'react' library and can be imported in the component using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As the name states, it's related to side effects or effects that are being carried out throughout the component. Data fetching / calling an API, setting up subscriptions and manually altering the DOM are all examples of the side effect we are talking about. &lt;/p&gt;

&lt;p&gt;sometimes we need to run additional code after React has finished updating DOM for eg. API requests, manual DOM mutations etc, these can be handled in this hook.&lt;/p&gt;

&lt;p&gt;U*&lt;em&gt;sing Classes&lt;/em&gt;*&lt;/p&gt;

&lt;p&gt;In React class components, render cannot cause side effects. So we cause side effects in &lt;strong&gt;componentDidUpdate&lt;/strong&gt; and &lt;strong&gt;componentDidMount.&lt;/strong&gt; let us look at the example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You clicked &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; times&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Click me
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we want to update the count on every render. That means I have to make the side effect on both &lt;strong&gt;onMount -&lt;/strong&gt; first load and &lt;strong&gt;onUpdate&lt;/strong&gt; - subsequent render of the component.&lt;/p&gt;

&lt;p&gt;But in &lt;strong&gt;useEffect&lt;/strong&gt; we have to call just once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using useEffect hook&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You clicked &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; times&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Click me
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Üí If your component needs to do something after render, that should go in the useEffect hook.&lt;/p&gt;

&lt;p&gt;React will remember the function you passed and will call it after the DOM updates.&lt;/p&gt;

&lt;p&gt;‚Üí We place useEffect inside the component, this lets us access all the props and states. It makes use of javascript closures to achieve this.&lt;/p&gt;

&lt;p&gt;‚ÜíYou need to be cautious about what code goes into useEffect as it is called both after the first render and every subsequent update. We can control this by passing an array of dependent states as a second argument. We shall read about it later in the article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Effects with cleanup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;so Earlier we saw effects that don't need a cleanup, like API or DOM manipulations. However, effects such as subscription need a cleanup. But functional component does not provide a method like &lt;strong&gt;componentWillUnmount&lt;/strong&gt; as in the case of class components.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;class component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Component&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;onClickTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;test  function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;componentDidMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClickTest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;componentWillUnMount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onClickTest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;render&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You clicked &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; times&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
          Click me
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's see how can we achieve the above functionality from the functional components using useEffect hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Example&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClickTest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onClickTest&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You clicked &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; times&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt; &lt;span class="na"&gt;onClick&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setCount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        Click me
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‚Üí The function returned from useEffect is optional cleanup mechanism for effects. The logic for adding and removing subscriptions can be at one place with useEffect hook.&lt;/p&gt;

&lt;p&gt;‚ÜíReact performs cleanups at component unmount. However, the useEffect hook runs after every render, thus react cleans up effects from the previous render before running effects next time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optimal use of useEffect hook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In some cases cleanup or applying effects on every render might cause performance issue. In class based components we solve it using prevState and prevProps:&lt;/p&gt;

&lt;p&gt;example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;componentDidUpdate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevProps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;prevState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In useEffect hook, this comes built-in. you can tell react to skip applying useEffect if values of certain states haven't changed. We can pass an array of states as a second argument to the hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`You clicked &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; times`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt; &lt;span class="c1"&gt;// Only re-run the effect if count changes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want useEffect to run and clean it up only once each, then you can pass an empty array as a second argument.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`This runs on mount`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Originally posted at &lt;a href="https://www.amodshinde.com/blog/react-use-effect/"&gt;&lt;strong&gt;amodshinde.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Best Practices for Node.js Development</title>
      <author>Amod Shinde</author>
      <pubDate>Thu, 02 Dec 2021 15:03:56 +0000</pubDate>
      <link>https://dev.to/amoled27/best-practices-for-nodejs-development-5ao5</link>
      <guid>https://dev.to/amoled27/best-practices-for-nodejs-development-5ao5</guid>
      <description>&lt;p&gt;The popularity of Node.js is growing at a rapid pace, with more and more unicorn companies adapting to the technology it has become very crucial to follow certain conventions to make code readable and modifiable by other developers. The code you write is also directly proportional to the scalability of the product you ultimately build.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practice-1"&gt;
  &lt;/a&gt;
  Best Practice #1
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Choose a Layered Approach: Separation of your concerns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Popular Node.js frameworks like Express.js allow you to define routes as callback functions that are executed when a client request is received. This gets you tempted to write all the business logic under a single function which unknowingly escalates to a messy code that is difficult to interpret for a human being.&lt;/p&gt;

&lt;p&gt;Thus this should be implemented keeping in mind the' Separation of concerns' principle of programming. According to this principle, we should have distinct modules addressing distinct concerns in the application. The server-side aspects are broadly divided as&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OR36tJ5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/e40679c031338acec823d544e6711b66/e8950/manipulation.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OR36tJ5D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/e40679c031338acec823d544e6711b66/e8950/manipulation.png" alt="manipulation" title="manipulation" width="880" height="467"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These aspects can be handled by programming three different layers:&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sLo_n5me--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/161833f08948a7d896c491f20d95f048/58a91/burger.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sLo_n5me--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/161833f08948a7d896c491f20d95f048/58a91/burger.png" alt="burger" title="burger" width="880" height="461"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Controller:&lt;/strong&gt; API routes &amp;amp; endpoints&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Service Layer:&lt;/strong&gt;  For business logic&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Data Access Layer:&lt;/strong&gt; For working with database&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#controller-layer"&gt;
  &lt;/a&gt;
  Controller layer
&lt;/h3&gt;

&lt;p&gt;In this module, you only write API routes. In the route handler function, you can deconstruct the request object from HTTP to get params, query params, payload etc and pass them to the service layer for processing.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#service-layer"&gt;
  &lt;/a&gt;
  Service layer
&lt;/h3&gt;

&lt;p&gt;This layer houses the business logic. This contains all the methods that take up singular responsibility and are reusable. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#data-access-layer"&gt;
  &lt;/a&gt;
  Data Access layer
&lt;/h3&gt;

&lt;p&gt;The main role of this layer is talking to the Database - Fetching from, updating, writing to it. All DB connections, models, ODM/ORMs are defined here.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#best-practice-2"&gt;
  &lt;/a&gt;
  Best Practice #2
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Folder Structure: Properly organize your code files&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the previous section, we spoke about how to logically modularize a project into layers. To get this abstract architecture in play we need a proper folder structure&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;src&lt;/span&gt;
      &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt;              &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="nx"&gt;entry&lt;/span&gt; &lt;span class="nx"&gt;point&lt;/span&gt;
      &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;api&lt;/span&gt;                  &lt;span class="nx"&gt;controller&lt;/span&gt; &lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;api&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt;
      &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;             &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;env&lt;/span&gt; &lt;span class="nx"&gt;variables&lt;/span&gt;
      &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;services&lt;/span&gt;           &lt;span class="nx"&gt;service&lt;/span&gt; &lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;business&lt;/span&gt; &lt;span class="nx"&gt;logic&lt;/span&gt;
      &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;models&lt;/span&gt;             &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="nx"&gt;access&lt;/span&gt; &lt;span class="nx"&gt;layer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;database&lt;/span&gt; &lt;span class="nx"&gt;models&lt;/span&gt;  
      &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;scripts&lt;/span&gt;            &lt;span class="nx"&gt;miscellaneous&lt;/span&gt; &lt;span class="nx"&gt;NPM&lt;/span&gt; &lt;span class="nx"&gt;scripts&lt;/span&gt;
      &lt;span class="err"&gt;‚îú‚îÄ‚îÄ&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;        &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="nx"&gt;handlers&lt;/span&gt;
      &lt;span class="err"&gt;‚îî‚îÄ‚îÄ&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;           &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="nx"&gt;suites&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;strong&gt;/apis&lt;/strong&gt; (controller layer), &lt;strong&gt;/services&lt;/strong&gt; and &lt;strong&gt;/models&lt;/strong&gt; (data access layer) are the three layers we spoke about. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/config&lt;/strong&gt; layer can store your constants and app configurations / settings like environment variables etc. &lt;strong&gt;/scripts&lt;/strong&gt; directory can be used to store automation scripts like deployment pipelines. &lt;strong&gt;/tests&lt;/strong&gt; will house the test cases you write for the application.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#best-practice-3"&gt;
  &lt;/a&gt;
  Best Practice #3
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Publisher subscriber models&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The Publisher/Subscriber models can be used for communication between two entities in your code. Publishers (Message Senders) send out messages, along specific channels without having knowledge of who the receiving entities are. Similarly, Subscribers ( receiving entities ) on other hand listen to one or more channels without the knowledge of publishing entities.&lt;/p&gt;

&lt;p&gt;It is a good practice to implement this model in your project to manage multiple children operations corresponding to a single action. Let consider an example where, in your app, on user sign up, you do numerous things like - create a DB entry, generating an Auth key, sending a confirmation email.  If you handle this in a single service function the function code tends to get lengthy and messy.&lt;/p&gt;

&lt;p&gt;the structure of the code would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//1. create DB entry&lt;/span&gt;
            &lt;span class="c1"&gt;//2. generate auth key&lt;/span&gt;
            &lt;span class="c1"&gt;//3. send confirmation email&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can very well simplify this with pub/sub model.&lt;/p&gt;

&lt;p&gt;Pub/sub model can use Node.js Events API&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;eventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;EventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;     

      &lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;UserService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;signup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// emit 'signup' event&lt;/span&gt;
          &lt;span class="nx"&gt;eventEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To handle such events emissions, you can have multiple subscribers that are essentially event listeners, waiting for certain events to be emitted. These subscribers can be organized into separate files based on their purpose and stored in the /subscribers directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// email.js&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="nx"&gt;eventEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// event listener &lt;/span&gt;
      &lt;span class="c1"&gt;// send email &lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// auth.js&lt;/span&gt;

    &lt;span class="c1"&gt;// ...&lt;/span&gt;
    &lt;span class="nx"&gt;eventEmitter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;signup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// event listener&lt;/span&gt;
      &lt;span class="c1"&gt;// generate auth key&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#best-practice-4"&gt;
  &lt;/a&gt;
  Best Practice #4
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Clean Code &amp;amp; Easy Readability: Use code linters, formatters &amp;amp; comments&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Linting &amp;amp; Formatting&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main goal here is improving code quality and readability. A linter warns you about syntactic errors (sometimes even semantic ) whereas code formatted styles the code in a more readable way. Some of the popular linters for javascript are Jslint and Eslint. For code formatting, Prettier is a well-known code formatter. Plugins for these linters and formatters are available in most of the code editors like Atom and VS code.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KPh8_BjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.amodshinde.com/2e24ea0a3be40ce115653569836ba517/formatting.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KPh8_BjL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://www.amodshinde.com/2e24ea0a3be40ce115653569836ba517/formatting.gif" alt="formatting" title="formatting" width="480" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Adding Comments&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When writing code it is important for a developer to write proper comments so that the team working on the project can benefit. A proper yet short comment explaining the functionality of the code can save much confusion and time for peer developers and ultimately the time of the entire team.  The screenshot below shows one of the examples of a proper comment:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5U74XsKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/6efc3edd5ffec97d8ca572e6d15eda5a/c6bbc/comments.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5U74XsKW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/6efc3edd5ffec97d8ca572e6d15eda5a/c6bbc/comments.png" alt="comments" title="comments" width="880" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Proper nomenclature of functions, variables and constants&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The function, variables and constants names that you define should indicate the use or significance of that function( / variable / constant). Poor nomenclature of the variables can create confusion among the team members and peer developers. Proper naming also helps you to recognize the functions when checking memory snapshots. &lt;/p&gt;

&lt;p&gt;How &lt;strong&gt;not&lt;/strong&gt; to write function name:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nkdMoTY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/2b5f4dfdb2566301e021bbc60915de4d/08115/const1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nkdMoTY9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/2b5f4dfdb2566301e021bbc60915de4d/08115/const1.png" alt="constants" title="constants" width="504" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we are not clear about what kind of items have been defined in the items array, moreover, items is a common term that is likely to be used frequently. This is an example of bad nomenclature. &lt;/p&gt;

&lt;p&gt;The function name too doesn't go with the functionality of the method. Like the function can both mark items available and unavailable, so naming it 'makeAvailable' doesn't seem to be right.&lt;br&gt;
The parameter n inside the function is just a letter 'n'  and doesn't tell what it signifies.&lt;br&gt;
Better code would be:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--akKnHyoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/a3f22544b561676a523eede38cacaab5/db783/const2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--akKnHyoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/a3f22544b561676a523eede38cacaab5/db783/const2.png" alt="constants" title="constants" width="551" height="330"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#best-practice-5"&gt;
  &lt;/a&gt;
  Best Practice #5
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Write Asynchronous code: Use Promises, Async/Await&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Javascript is quite known for callback functions. They allow you to define the asynchronous behaviour in javascript. But with more and more callbacks in the code, the code gets clunkier, resulting in what is known as &lt;strong&gt;callback hell.&lt;/strong&gt; &lt;br&gt;
Javascript introduced promises in 2015 which is a much cleaner way to handle asynchronous behaviour. Furthermore, in 2017, the async/await syntax was introduced to further simplify things.&lt;/p&gt;

&lt;p&gt;Therefore it's advisable to scrap the use of callback functions and choose promises or async/await. &lt;br&gt;
These syntaxes make the code more readable and easier to look at the code flow and debug.&lt;br&gt;
Just as an example, this is how the same code would look in callbacks vs the async/await: &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With callbacks:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VdJiAfU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/9a27289acd873d5d7e41573e7b6c6aa1/f1d1f/callback.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VdJiAfU9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/9a27289acd873d5d7e41573e7b6c6aa1/f1d1f/callback.png" alt="callback" title="callback" width="739" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With Async/Await:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qZQeCK4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/450cfcfcd821a4fabbe2b87d028e57bd/374ac/asyncawait.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qZQeCK4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.amodshinde.com/static/450cfcfcd821a4fabbe2b87d028e57bd/374ac/asyncawait.png" alt="asyncawait" title="asyncawait" width="634" height="250"&gt;&lt;/a&gt;&lt;br&gt;
Code with async/await syntax does the exact same computation as the callback one, but is much easier to read and debug.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#best-practice-6"&gt;
  &lt;/a&gt;
  Best Practice #6
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Testing, Logging &amp;amp; Error Handling&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It's quite common for newbies to overlook the importance of writing test cases for the code. However, writing test cases is as important as writing the code as it checks the validity and accuracy of the code by bringing to light even the smallest inaccuracies. &lt;/p&gt;

&lt;p&gt;Unit tests form the foundation of most testing setups. Here, individual units/components are tested in isolation from the rest of the code to verify their correctness. This allows your code to be validated at the (logically) lower level to ensure that each of the internal components is working accurately, as expected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Logging&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Logging is a crucial part of the development process as it helps track down the errors in case of failures. This helps you record your important information and analyse various aspects of it with respect to accuracy and performance metrics. It helps you manage the application better and helps in debugging. you can read more about logging in Node.js and recommended libraries &lt;strong&gt;here&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Catching Errors&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The errors provide relevant information on what went wrong in the code and possibly where it went wrong. But instead of Node.js throwing errors, interrupt code execution or even fail sometimes, it's better if we take control by handling error conditions. We can achieve this through try/catch blocks. In such a way, we can keep things simple, stable and easier to debug as well as prevent poor user-end experience.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;somethingHappened&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Error Message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Finally Executed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#best-practice-7"&gt;
  &lt;/a&gt;
  Best Practice #7
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Third-party solutions: Don't Reinvent the wheel | Dont overdo either&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Node.js has a huge developer community across the world. As far as third-party support is concerned, Node‚Äôs package manager, NPM is full of feature-rich, well maintained, well documented, frameworks, libraries and tools for any use case you can imagine. It is therefore very convenient for developers to plug these existing solutions into their code and make the most of their APIs.&lt;/p&gt;

&lt;p&gt;While these libraries and tools ease off a lot of the burden, it is important to be intelligent and responsible about every package that we import. We should be aware of the purpose, strengths and weaknesses of each package we import and ensure that we aren‚Äôt over-reliant on them.&lt;/p&gt;

&lt;p&gt;Originally posted at &lt;a href="https://www.amodshinde.com/blog/best-practices-nodejs/"&gt;&lt;strong&gt;amodshinde.com&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
