<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Embrace Working From Home</title>
      <author>₳GEEK</author>
      <pubDate>Tue, 24 Aug 2021 02:51:10 +0000</pubDate>
      <link>https://dev.to/ageekdev/how-to-embrace-working-from-home-155o</link>
      <guid>https://dev.to/ageekdev/how-to-embrace-working-from-home-155o</guid>
      <description>&lt;p&gt;Even before the COVID-19 pandemic made working from home routine for millions, increasing numbers of people had been saying goodbye to their onerous commute to work. Many kinds of work can be done just as effectively, if not more so, from a home office.&lt;/p&gt;

&lt;p&gt;Whether you are a freelancer, an &lt;a href="https://ageek.dev/become-an-indie-maker"&gt;indie maker&lt;/a&gt;, an indie developer, a company part-timer, or a full-time employee who just doesn't hit the office on certain days or at all, working from home is a way to escape the daily grind.&lt;/p&gt;

&lt;p&gt;For employers, &lt;a href="https://ageek.dev/remote-working"&gt;remote working&lt;/a&gt; can boost productivity, reduce turnover, and lower organizational costs, while employees enjoy perks like flexibility and the lack of a commute.&lt;/p&gt;

&lt;p&gt;Efficiency and flexibility are some of the top reasons that people want to work from home, along with shorter hours.&lt;/p&gt;

&lt;p&gt;But sometimes flexibility is too much of a good thing. When your office is always there, waiting, with that deadline looming over your head, it's pretty hard to just close the door and pretend you've left for the day.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deep-work"&gt;
  &lt;/a&gt;
  Deep Work
&lt;/h2&gt;

&lt;p&gt;Working from home takes a lot of effort to be effective. It's going to be a sizable time commitment. But just how big of a time commitment do I need to find success?&lt;/p&gt;

&lt;p&gt;So how many hours should I work per week? There's no correct answer. The hours I work are a meaningless measure as long as I'm not making money. Popular recommends are extensive work hours, substantial sacrifices, giving up sleep, 60 to 100 hours per week, and on and on.&lt;/p&gt;

&lt;p&gt;You know what I do everyday? Write some code, answer a question, send an email, check Facebook, write some code, check on babies, write some more code!&lt;/p&gt;

&lt;p&gt;Each switch consumes my energy and time, both of which are finite resources. The most critical effect of constant task switching is that I never enter a state of deep focus and concentration.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The bottom line is to work as many hours as I can without harming my personal life, productivity and overall health.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The real question is can I still be successful if I work less hours? No one can promise that, but there are tons of researches show that working intensely (deep work) is better than longer hours (shallow work), and I'll still have a bit of time for myself and my family.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shallow work&lt;/strong&gt; is the present reality for a lot of people, characterized by a distracted work mindset and un-engaging tasks that return mediocre results.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deep work&lt;/strong&gt; involves picking a single task and focusing on it without any distraction, expected to increase productivity and improve work quality.&lt;/p&gt;

&lt;p&gt;Scientists generally agree that the ideal daily working time is around 6 hours, and more concentrated in the morning. This is what being practiced in Sweden, and they are currently experiencing significant success.&lt;/p&gt;

&lt;p&gt;To start embracing deep work, I put aside 4 hours of highly-focused distraction-free in the morning for difficult tasks like writing new content or developing new product features. Anything unimportant will be done during rest of the day as shallow work.&lt;/p&gt;

&lt;p&gt;Initially day-to-day attempts at deep work don’t feel adequate for a goal I'm striving towards; it does take time to change the temptation of long working hours. I often combine deep work with batch working lifestyle, buffering tasks for the whole weeks or months ahead.&lt;/p&gt;

&lt;p&gt;According to my personal tracking statistics, the result surprises me after couple months following deep work strategy, I accomplished more work as twice as before when I worked literally 10 to 12 hours daily.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#batch-working"&gt;
  &lt;/a&gt;
  Batch Working
&lt;/h2&gt;

&lt;p&gt;After years of being highly multitasking, I have been feeling so stressful and less productive, harder to achieve something significant, and tend to finish only less important tasks in to-do lists.&lt;/p&gt;

&lt;p&gt;Multitasking has become such a regular part of my life that I believe I do it well, until I found out that this lifestyle can cause brain damage.&lt;/p&gt;

&lt;p&gt;Multitasking might seem like I'm accomplishing multiple things at the same time, but what I'm really doing is quickly shifting my attention and focus from one thing to the next.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Batch working&lt;/strong&gt; is highly-focused, topic-specific forms of working, dividing my workflow into different long time blocks (days, weeks, months) of one topic instead of jumping around from task to task constantly.&lt;/p&gt;

&lt;p&gt;Instead of repeating the same thing day after day, I only have to do it every month or so and then are able to work in a state of focus instead of scrambling.&lt;/p&gt;

&lt;p&gt;Some people like focusing by days, where I prefer to focus by “project”. However you decide, it will help me become more efficient, free up mental space, creates a feeling of being “ahead”, reduces stress, and allows you to think with strategy.&lt;/p&gt;

&lt;p&gt;The main thing that batch working brings to your business is efficiency. When your plan is clear for the day, it is easy to show up, focus in for an hour or two, and get the job DONE. Instead of half-done, or 99% done, it sets the stage for focused work that is wildly efficient. With just a few hours of focused work, you can be done with one task and not have to think about it again.&lt;/p&gt;

&lt;p&gt;I’ve tried batching my days (terrible, I barely got anything ‘batched’ and barely got through my workload), batching my weeks (I got round to my ‘batching tasks’ by Thursday, so…. not great) and batching whole months (so far, this one seems to be working pretty well for me).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#worklife-balance"&gt;
  &lt;/a&gt;
  Work-Life Balance
&lt;/h2&gt;

&lt;p&gt;Work-life balance is the state of equilibrium where a person equally prioritizes the demands of one's career and the demands of one's personal life. It has numerous positive effects, including less stress, a lower risk of burnout and a greater sense of well-being.&lt;/p&gt;

&lt;p&gt;But no entity can be optimally efficient at more than one thing. The more limited the goals, the higher one’s chance of efficiency. A multipurpose machine – human or corporate – is always going to be less efficient than one which is dedicated to a single purpose.&lt;/p&gt;

&lt;p&gt;Focusing on one thing to the exclusion of all others has its costs. We might well accept a measure of inefficiency – in professional and personal life – in exchange for diversity and less boredom.&lt;/p&gt;

&lt;p&gt;Some days, you might focus more on work, while other days you might have more time and energy to pursue your hobbies or spend time with your loved ones.&lt;/p&gt;

&lt;p&gt;Work-life balance will mean different things to different people because, after all, we all have different life commitments. In our always-on world, balance is a very personal thing, and only you can decide the lifestyle that suits you best.&lt;/p&gt;

&lt;p&gt;I prefer to prioritize than balance my work-life, balancing seems illusive and temporary to me. I do think the will toward mastery is deeply wired into most of us, it can be deeply uncomfortable along the way and we doubt our ability to become expert.&lt;/p&gt;

</description>
      <category>career</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>remote</category>
    </item>
    <item>
      <title>4 Ways To Improve Your Website's Accessibility Today</title>
      <author>Nathan</author>
      <pubDate>Tue, 24 Aug 2021 02:46:40 +0000</pubDate>
      <link>https://dev.to/natclark/4-ways-to-improve-your-website-s-accessibility-today-33ad</link>
      <guid>https://dev.to/natclark/4-ways-to-improve-your-website-s-accessibility-today-33ad</guid>
      <description>&lt;p&gt;Often times, web accessibility is talked about as some abstract, intangible concept.&lt;/p&gt;

&lt;p&gt;In reality, there are a few very actionable ways to &lt;em&gt;drastically&lt;/em&gt; improve your website's accessibility - especially when you're just getting started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-using-prefersreducedmotion"&gt;
  &lt;/a&gt;
  1. Using "prefers-reduced-motion"
&lt;/h2&gt;

&lt;p&gt;In CSS, the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion"&gt;prefers-reduced-motion&lt;/a&gt; media query is a powerful way to optimize the way your web pages are styled for users with browsers that request reduced motion.&lt;/p&gt;

&lt;p&gt;It's important to consider that some of your website's users may have motion sickness, may be prone to seizures, or otherwise prefer a more still browsing experience.&lt;/p&gt;

&lt;p&gt;The following snippet of code will, in just four lines, forcefully disable all animations and transitions on the web pages it is installed on for users that request reduced motion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prefers-reduced-motion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;animation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;transition-duration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0s&lt;/span&gt; &lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is a standard recognized by most modern browsers, and the browsing experience of all your other users will remain unaffected by this snippet.&lt;/p&gt;

&lt;p&gt;You could add this to the beginning or end of your website's primary CSS file.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-adding-alternative-text-to-social-share-images"&gt;
  &lt;/a&gt;
  2. Adding alternative text to social share images
&lt;/h2&gt;

&lt;p&gt;Many web apps and social networks, such as Facebook or Twitter, will display a "rich object" when a link from your site is shared.&lt;/p&gt;

&lt;p&gt;This can be thought of an embedded preview of your site's page.&lt;/p&gt;

&lt;p&gt;It might include the title, the description, your domain name, and an image or video related to the page.&lt;/p&gt;

&lt;p&gt;However, while including an image that other websites can understand in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag has become a quite common practice on many websites, providing alternative text is much less common.&lt;/p&gt;

&lt;p&gt;Alternative text is how screen readers describe images to users, and it's quite common on standard image elements, like this one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"apple.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A red apple ontop of a wooden table."&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, to provide alternative text on most rich objects, you must provide the following meta tag in your head &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"og:image:alt"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Example alternative text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And if you also want to provide alternative text specifically for images shared on Twitter, you must provide this meta tag in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"twitter:image:alt"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Example alternative text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#3-inserting-skip-links-at-the-top-of-your-pages"&gt;
  &lt;/a&gt;
  3. Inserting skip links at the top of your pages
&lt;/h2&gt;

&lt;p&gt;Skip links help screen reader users save time when they navigate the web.&lt;/p&gt;

&lt;p&gt;It allows keyboard users to display a hidden little box that should say something like "Skip to main content", when they first press the tab key on a web page.&lt;/p&gt;

&lt;p&gt;If they then go on to press the enter key, they'll be scrolled immediately &lt;em&gt;past&lt;/em&gt; the site's navigation and onto the main section of the page.&lt;/p&gt;

&lt;p&gt;This way, users with screen readers don't have to listen through the reading of the entire navbar, and can just skip directly to the article.&lt;/p&gt;

&lt;p&gt;Consider the following example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;    ...
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#main-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Skip to main content&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;main&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"main-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Skip links must always be placed &lt;em&gt;directly below your &amp;lt;body&amp;gt; tag&lt;/em&gt;, because they must be the first focusable element.&lt;/p&gt;

&lt;p&gt;Screen readers will detect it, even if it's not normally visible to the user.&lt;/p&gt;

&lt;p&gt;Following the hash link will send the user to the element with the matching ID (if it exists). In the provided example, the user will be scrolled by to the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; element, skipping right past the navigation menu.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-implementing-semantic-html"&gt;
  &lt;/a&gt;
  4. Implementing semantic HTML
&lt;/h2&gt;

&lt;p&gt;Lastly, another great practice for improving your web accessibility and helping screen readers better understand your site, is using semantic HTML tags.&lt;/p&gt;

&lt;p&gt;Semantic HTML tags provide contextual understanding about the way your pages are structured.&lt;/p&gt;

&lt;p&gt;Here are all of the &lt;a href="https://www.w3schools.com/html/html5_semantic_elements.asp"&gt;semantic tags&lt;/a&gt; in HTML5:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sections"&gt;
  &lt;/a&gt;
  Sections
&lt;/h3&gt;

&lt;p&gt;These semantic tags are like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements, except they provide additional context to screen readers and search engines:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;: A header represents an introduction or opening section to a piece of content, or a collection of navigation links.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt;: A &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; tag contains navigation links.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;section&amp;gt;&lt;/code&gt;: This can be used to define a section in the document.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt;: Often used to enclose sidebars, the aside tag represents something that is aside from the content it is surrounded by.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;: The main content of the document should be inside the &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;: An article is an independent, isolated, and modular piece of content. For example, this could be something like a product from a search results grid on an E-commerce site, or a blog post preview.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;: A footer represents, well, any portion of a document that is designated to be a footer. It might include things like copyright information.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is one example of each semantic section tag in action:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;aside&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="nt"&gt;&amp;lt;/aside&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;section&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;article&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
            ...
        &lt;span class="nt"&gt;&amp;lt;/article&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;footer&amp;gt;&lt;/span&gt;
        ...
    &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Keep in mind, they don't all have to be used! Only use semantic tags when necessary and appropriate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#inline-semantics"&gt;
  &lt;/a&gt;
  Inline semantics
&lt;/h3&gt;

&lt;p&gt;These semantic tags enclose text and are usually used within &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt;: This indicates that enclosed text is a time or date. Often, the &lt;a href="https://www.geeksforgeeks.org/html-datetime-attribute/"&gt;"datetime" attribute&lt;/a&gt; is included to help search engines better understand the document.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt;: This indicates that enclosed text should be highlighted. Many browsers will add a yellow background color to a &lt;code&gt;&amp;lt;mark&amp;gt;&lt;/code&gt; element by default.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of each:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;As of writing this, the time is &lt;span class="nt"&gt;&amp;lt;time&amp;gt;&lt;/span&gt;11:00&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;, and the date is &lt;span class="nt"&gt;&amp;lt;time&lt;/span&gt; &lt;span class="na"&gt;datetime=&lt;/span&gt;&lt;span class="s"&gt;"2021-08-22"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;August 22&lt;span class="nt"&gt;&amp;lt;/time&amp;gt;&lt;/span&gt;.

&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This is some text, but &lt;span class="nt"&gt;&amp;lt;mark&amp;gt;&lt;/span&gt;this is some important text&lt;span class="nt"&gt;&amp;lt;/mark&amp;gt;&lt;/span&gt;.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#semantic-images"&gt;
  &lt;/a&gt;
  Semantic images
&lt;/h3&gt;

&lt;p&gt;These semantic tags are for self-contained images:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt;: Figures contain an &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element, and indicate that the underlying image is "self-contained".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;: Optionally, a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; element can also contain a &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; element, as either the first or last child, to visible describe the image.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of a &lt;code&gt;&amp;lt;figure&amp;gt;&lt;/code&gt; tag with a &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;figure&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"ball.jpg"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"A red ball centered in a grassy field"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;A red ball centered in a grassy field&lt;span class="nt"&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Your &lt;code&gt;&amp;lt;figcaption&amp;gt;&lt;/code&gt; tag does not have to match the &lt;code&gt;alt&lt;/code&gt; attribute of your &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag(s)!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dropdowns"&gt;
  &lt;/a&gt;
  Dropdowns
&lt;/h3&gt;

&lt;p&gt;These last two semantic tags work together to create content with toggled visibility:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt;: This tag specifies details that the user can toggle the visibility of. It's sort of like a dropdown, but without JavaScript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt;: This should be the first child element of any &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; element. It is a visible toggle for the rest of the content in the &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; element.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here's an example of how each of these tags would be used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;details&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;If you click this, the sibling element(s) will be toggled!&lt;span class="nt"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;This text is hidden by default, but its visibility can be toggled by the `&lt;span class="nt"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;` tag.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Here is some more text, which is also hidden by default.&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/details&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Perhaps specific examples for each of these semantic tags will be explored in a future post.&lt;/p&gt;

&lt;p&gt;There's also many subtle rules about some of these tags that are important to follow. For example, no document page should have more than one &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag, and a &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; tag should not be a descendant of certain tags, such as &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You made it to the end!&lt;/p&gt;

&lt;p&gt;While the practices enumerated in this article vary in implementation difficulty, they are all quite actionable and produce very tangible results.&lt;/p&gt;

&lt;p&gt;Even just implementing &lt;em&gt;two&lt;/em&gt; of these four practices is a great step in the right direction, demonstrating that your site &lt;em&gt;actually&lt;/em&gt; cares about accessibility, not just "ticking the compliance box".&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Java Interfaces</title>
      <author>Patricia Nicole</author>
      <pubDate>Tue, 24 Aug 2021 01:26:46 +0000</pubDate>
      <link>https://dev.to/pat_the99/java-interfaces-306o</link>
      <guid>https://dev.to/pat_the99/java-interfaces-306o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#interfaces-in-java"&gt;
  &lt;/a&gt;
  📌 Interfaces in Java
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;An interface is a reference type, similar to a class that can contain &lt;strong&gt;only&lt;/strong&gt; constants, method signatures, default methods, static methods and nested types. &lt;/li&gt;
&lt;li&gt;Interfaces cannot be instantiated - they can only be implemented by classes and extended by other interfaces.&lt;/li&gt;
&lt;li&gt;Note that an interface can extend any number of interfaces. The interface declaration can include a comma-separated list of all the interfaces that it extends.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#the-interface-body"&gt;
  &lt;/a&gt;
  The Interface Body
&lt;/h3&gt;

&lt;p&gt;The interface body can contain &lt;strong&gt;abstract methods, default methods and static methods&lt;/strong&gt;. All of these methods in an interface are &lt;strong&gt;implicitly&lt;/strong&gt; &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;static&lt;/code&gt;, and &lt;code&gt;final&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#implementing-an-interface"&gt;
  &lt;/a&gt;
  Implementing an Interface
&lt;/h4&gt;

&lt;p&gt;A class can implement more than one interface. The &lt;code&gt;implements&lt;/code&gt; keyword is followed by a comma-separated list of the interfaces implemented by the class.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-an-interface-as-a-type"&gt;
  &lt;/a&gt;
  Using an Interface as a Type
&lt;/h3&gt;

&lt;p&gt;When a new interface is defined, a new reference data type is defined. The interface names can be used anywhere a data type can be used. If a variable is assigned an interface type, any object assigned to it must be an instance of a class that implements the interface.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#evolving-interfaces"&gt;
  &lt;/a&gt;
  Evolving Interfaces
&lt;/h3&gt;

&lt;p&gt;To avoid the scenario where implementing classes need to change because of the additions to the implemented interface:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new interface that extends to the changed interface. In this way, implementing classes only need to change what interface to implement, whether the child or the parent. Now users of the code can choose to continue to use the old interface or to upgrade to the new interface.&lt;/li&gt;
&lt;li&gt;Alternatively, new methods can be defined as default methods. Since implementations are provided for default methods,  users who have classes that implement interfaces enhanced with default or static methods do not have to modify or recompile them to accomodate the additional methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#default-methods"&gt;
  &lt;/a&gt;
  Default Methods
&lt;/h3&gt;

&lt;p&gt;Default methods enable one to add new functionality to the interfaces of the library to ensure binary compatibility with code written for older versions of that interfaces.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A default method in an interface is defined with the &lt;code&gt;default&lt;/code&gt; keyword at the beginning of the method signature. All method declarations in an interface, including default methods are implicityly public so the &lt;code&gt;public&lt;/code&gt; modifier can be omitted.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#extending-interfaces-that-contain-default-methods"&gt;
  &lt;/a&gt;
  Extending Interfaces that Contain Default Methods
&lt;/h4&gt;

&lt;p&gt;When an interface with a default method is extended, &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There is no need to mention the default method at all, which lets the extended interface inherit the default method&lt;/li&gt;
&lt;li&gt;The default method can be redeclared which makes it abstract&lt;/li&gt;
&lt;li&gt;The default method can be redefined by overriding it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#static-methods"&gt;
  &lt;/a&gt;
  Static Methods
&lt;/h3&gt;

&lt;p&gt;A static method can also be defined in an interface. It is a method that is associated with the class in which it is defined rather than with any object. Every instance of the class shares its static methods. Now this helps in organizing helper methods.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-default-methods-into-existing-libraries"&gt;
  &lt;/a&gt;
  Integrating Default Methods into Existing Libraries
&lt;/h3&gt;

&lt;p&gt;Default methods enable the addition of new functionality to existing interfaces and ensure binary compatibilty with code written for older versions of those interfaces. In particular, default methods enable the addition of methods that accept lambda expressions as parameters to existing interfaces.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An interface declaration can contain method signatures, default methods, static methods and constant definitions. The only methods that have implementations are default and static methods&lt;/li&gt;
&lt;li&gt;A class that implements an interface must implement all the mothods declared in the interface.&lt;/li&gt;
&lt;li&gt;An interface name can be used anywhere a type can be used.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cheers to continued learning 🍻!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources"&gt;
  &lt;/a&gt;
  RESOURCES
&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html"&gt;Java Doc, What is an Interface&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>codenewbie</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Learn How Dataclasses Work in Python</title>
      <author>Jerry Ng</author>
      <pubDate>Tue, 24 Aug 2021 01:16:35 +0000</pubDate>
      <link>https://dev.to/jerrynsh/learn-how-dataclasses-work-in-python-37a2</link>
      <guid>https://dev.to/jerrynsh/learn-how-dataclasses-work-in-python-37a2</guid>
      <description>&lt;p&gt;It is common for us to work with simple data structures such as a Tuple (&lt;code&gt;tuple&lt;/code&gt;) or a Dictionary (&lt;code&gt;dict&lt;/code&gt;) in Python. We use them almost everywhere and every day in our lives programmers to store data.&lt;/p&gt;

&lt;p&gt;For instance, we can represent a car object with the code example below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Using Dictionary
&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Model X"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"brand"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Tesla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"price"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# OR using Tuple
&lt;/span&gt;&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Model X"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Tesla"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Yet, these basic data structures become less ideal when we have to deal with more complex data. Here, we would need to remember that car represents a car Dictionary or Tuple in our app, not some string or integer.&lt;/p&gt;

&lt;p&gt;Using Tuple to represent our car object in the example above works just fine if we only have three fields (&lt;code&gt;name&lt;/code&gt;, &lt;code&gt;brand&lt;/code&gt;, and &lt;code&gt;price&lt;/code&gt;). As we add more fields into our car object such as &lt;code&gt;manufacturer&lt;/code&gt;, &lt;code&gt;condition&lt;/code&gt;, etc., we would need to remember our attributes' order.&lt;/p&gt;

&lt;p&gt;For the case of using Dictionary, we would not able to use &lt;a href="https://www.askpython.com/python/built-in-methods/dot-notation"&gt;dot notation&lt;/a&gt; (i.e. &lt;code&gt;car.name&lt;/code&gt;) to access our attributes. Plus, a deep-nested Dictionary tends to be very messy to work with.&lt;/p&gt;

&lt;p&gt;Here, we are going to talk about better alternatives to our regular Dictionary or Tuple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#topics-covered"&gt;
  &lt;/a&gt;
  Topics covered
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;  Named Tuple&lt;/li&gt;
&lt;li&gt;  Data Classes, a better alternative to Named Tuple&lt;/li&gt;
&lt;li&gt;  Customizing Data Classes&lt;/li&gt;
&lt;li&gt;  When to use Data Classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s start!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#named-tuple-to-the-rescue"&gt;
  &lt;/a&gt;
  Named Tuple To The Rescue
&lt;/h2&gt;

&lt;p&gt;A more common approach is to use Named Tuple (&lt;code&gt;namedtuple&lt;/code&gt;) from Python's built-in &lt;a href="https://docs.python.org/3/library/collections.html"&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Using our car example above here is what Named Tuple would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="n"&gt;Car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Car'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'brand'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'price'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Much better. So, why not just use Named Tuple all the time?&lt;/p&gt;

&lt;p&gt;Well, Named Tuple does come with its own sets of restrictions. Besides not being able to assign a default value to our car properties, Named Tuple is immutable by nature.&lt;/p&gt;

&lt;p&gt;Here’s an explanation from PEP &lt;a href="https://www.python.org/dev/peps/pep-0557/#why-not-just-use-namedtuple"&gt;on why we shouldn’t just use Named Tuple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, using Dictionary, Tuple, or even Named Tuple does not allow us to have custom class methods, which begs the question: why not just use the regular &lt;a href="https://docs.python.org/3/tutorial/classes.html?"&gt;Python Class&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#python-class"&gt;
  &lt;/a&gt;
  Python Class
&lt;/h2&gt;

&lt;p&gt;In Python, everything is an object, and most objects have attributes and methods. Typically, we would use &lt;code&gt;class&lt;/code&gt; in Python to create our own custom objects with their own properties and methods.&lt;br&gt;
Using our previous example to create a simple car object:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brand&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;


&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="c1"&gt;# False. We need to write our own __eq__ method to handle this.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Every time a new property is added to our car object, we would need to pass them into the &lt;code&gt;__init__&lt;/code&gt; method. What if we needed to add a more descriptive representation of our car object to our &lt;code&gt;__repr__&lt;/code&gt; method? What if we need to compare two car instances of the same car object?&lt;/p&gt;

&lt;p&gt;Honestly, things aren’t that bad when we’re only dealing with a single car object. But what if we have to add more classes such as &lt;code&gt;Manufacturer&lt;/code&gt;, &lt;code&gt;CarDealer&lt;/code&gt;, etc.?&lt;/p&gt;

&lt;p&gt;As you can already tell, the signs of code duplication are everywhere, and it smells! Truth to be told, unless we actually need custom methods, we might be better off using Named Tuple.&lt;/p&gt;

&lt;p&gt;As the bearer of bad news, this is often not the case in real life.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#enter-data-classes"&gt;
  &lt;/a&gt;
  Enter Data Classes
&lt;/h2&gt;

&lt;p&gt;Introduced in Python 3.7, &lt;a href="https://docs.python.org/3/library/dataclasses.html"&gt;Data Classes&lt;/a&gt; (&lt;code&gt;dataclasses&lt;/code&gt;) providers us with an easy way to make our class objects less verbose. To simplify, Data Classes are just regular classes that help us abstract a tonne of boilerplate codes.&lt;/p&gt;

&lt;p&gt;To rewrite our previous example with Data Class, we simply have to decorate our basic class with &lt;code&gt;@dataclass&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="c1"&gt;# Supports typing out of the box!
&lt;/span&gt;    &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;

&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;car1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;car2&lt;/span&gt; &lt;span class="c1"&gt;# True. __eq__ is generated automatically.
&lt;/span&gt;
&lt;span class="n"&gt;car2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="c1"&gt;# Supports dot annotation!
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The best part of Data Class is that it automatically generates common &lt;a href="https://www.geeksforgeeks.org/dunder-magic-methods-python/"&gt;Dunder methods&lt;/a&gt; in the class such as the &lt;code&gt;__repr__&lt;/code&gt; and &lt;code&gt;__eq__&lt;/code&gt;, eliminating all the duplicated code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#customizing-data-class"&gt;
  &lt;/a&gt;
  Customizing Data Class
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In certain cases, we might need to customize our Data Class fields:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# To exclude this field from comparison
&lt;/span&gt;   &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# To hide fields in __repr__
&lt;/span&gt;   &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;
   &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'New'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To override what happens after &lt;code&gt;__init__&lt;/code&gt; inside our newly created Data Class, we can declare a &lt;code&gt;__post_init__&lt;/code&gt; method. For example, we can easily override the price of the car based on its initialized condition:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;dataclasses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dataclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;brand&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;repr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120_000&lt;/span&gt;
   &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'New'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__post_init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"Old"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="mi"&gt;30_000&lt;/span&gt;

&lt;span class="n"&gt;old_car&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model X'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;130_000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Old'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Car(name='Model X', price=100000, condition='Old')
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To make our Data Class immutable, we simply have to add &lt;code&gt;@dataclass(frozen=True)&lt;/code&gt; as our decorator.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Another good use case of Data Class is when we need to deal with nested Dictionary. Here’s a simple example of what a Data Class could do:&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ...
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;dataclass&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CarDealer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
   &lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;car3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model S'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;89_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car4&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Car&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Model Y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tesla'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;54_000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;car_dealer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CarDealer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;car3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;car4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# CarDealer(cars=[Car(name='Model S', price=89000, condition='New'), Car(name='Model Y', price=54000, condition='New')])
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, in case it wasn’t obvious, Data Class supports inheritance too as they indeed behave just like our good old regular class.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;h2&gt;
  &lt;a href="#so-when-to-use-data-class"&gt;
  &lt;/a&gt;
  So, when to use Data Class?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#vs-named-tuple"&gt;
  &lt;/a&gt;
  vs. Named Tuple
&lt;/h3&gt;

&lt;p&gt;The use of Data Class is most often compared with the use of Named Tuple. For the most part, Data Class offers the same advantage if not more than Named Tuple.&lt;/p&gt;

&lt;p&gt;In the case where you need to &lt;a href="https://www.w3schools.com/python/python_tuples_unpack.asp"&gt;unpack&lt;/a&gt; your variables, you might want to consider using Named Tuple instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vs-dictionary"&gt;
  &lt;/a&gt;
  vs. Dictionary
&lt;/h3&gt;

&lt;p&gt;When our Dictionary has a fixed set of keys where their corresponding values have fixed types, it is almost always better to use Data Class.&lt;/p&gt;

&lt;p&gt;In short, the rule of thumb is rather simple, if you create a Dictionary or a Class that mostly consists of attributes about the underlying data, use Data Class. It saves you a bunch of time.&lt;/p&gt;

&lt;p&gt;Finally, Data Class also preserves type information for each property, which is a huge added advantage!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h2&gt;

&lt;p&gt;Again, there is nothing wrong with just creating regular classes in Python. However, that could mean writing a lot of repetitive and boilerplate code just to set up our class instance.&lt;/p&gt;

&lt;p&gt;To summarize what we went through, Data Class is great because it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  Saves time and reduce code duplication&lt;/li&gt;
&lt;li&gt;  Offers more flexibility, it can be mutable or immutable&lt;/li&gt;
&lt;li&gt;  Supports inheritance&lt;/li&gt;
&lt;li&gt;  Allows for customization and default values&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don’t get me wrong. Not every class in Python needs to be a Data Class. A Data Class is not a silver bullet.&lt;/p&gt;

&lt;p&gt;For the most part, we should always keep in mind that we shouldn’t complicate things if we don’t have to. As long as we’re not dealing with something overly complex, a good old Dictionary might just do the job.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Four Metrics Every Mobile Developer Should Care About</title>
      <author>Rahul Chhabria</author>
      <pubDate>Tue, 24 Aug 2021 01:05:29 +0000</pubDate>
      <link>https://dev.to/sentry/four-metrics-every-mobile-developer-should-care-about-228h</link>
      <guid>https://dev.to/sentry/four-metrics-every-mobile-developer-should-care-about-228h</guid>
      <description>&lt;p&gt;By: &lt;a href="https://blog.sentry.io/authors/philipp-hofmann"&gt;Philipp Hofmann&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Slow apps frustrate users, which leads to bad reviews, or customers that swipe left to competition. Unfortunately, seeing and solving performance issues can be a struggle and time-consuming.&lt;/p&gt;

&lt;p&gt;Most developers use profilers within IDEs like Android Studio or Xcode to hunt for bottlenecks and automated performance tests to catch performance regressions in their code during development. However, testing an application before it ships is not enough.&lt;/p&gt;

&lt;p&gt;To catch the most frustrating performance issues, you need to explore what’s happening on your users’ devices. That means visibility into how fast your app starts, duration of HTTP requests, number of slow and frozen frames, how fast your views are loading, and more. With Sentry for Mobile, you can now easily monitor your iOS and Android app’s performance in real-time without additional setup (or accumulating a pile of testing devices).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mobile-vitals"&gt;
  &lt;/a&gt;
  Mobile Vitals
&lt;/h1&gt;

&lt;p&gt;We believe there are four metrics every mobile team should track to better understand how their app is performing: Cold starts, warm starts, slow frames, and frozen frames. These four metrics, as a core part of Sentry’s performance monitoring, gives you the details you need to not only prioritize critical performance issues but trace the issue down to the root cause to solve them faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W2wOqTlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98e8pxee7zba40ehc2vj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W2wOqTlS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/98e8pxee7zba40ehc2vj.png" alt="mobile-vitals"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#measuring-app-start"&gt;
  &lt;/a&gt;
  Measuring App Start
&lt;/h1&gt;

&lt;p&gt;When a user taps on your app icon, it should start fast. On iOS, Apple recommends your app take at most 400ms to render the first frame. On Android, the &lt;a href="https://developer.android.com/topic/performance/vitals/launch-time#av"&gt;Google Play console&lt;/a&gt; warns you when a cold start takes longer than 5 seconds or a warm start longer than 2 seconds.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Cold start: App launched for the first time after a reboot or update.&lt;/li&gt;
&lt;li&gt;Warm start: App launched at least once and is partially in memory.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The exact definitions differ slightly per platform. For more details, please check out our &lt;a href="https://docs.sentry.io/platforms/apple/guides/ios/performance/instrumentation/automatic-instrumentation/"&gt;iOS&lt;/a&gt; and &lt;a href="https://docs.sentry.io/platforms/android/performance/instrumentation/automatic-instrumentation/"&gt;Android&lt;/a&gt; docs.&lt;/p&gt;

&lt;p&gt;No matter the platform, it is crucial that your app starts quickly to provide a delightful user experience. That’s why on iOS, Mac Catalyst, tvOS, and Android we track how long your app needs to draw your first frame. We grab this information and add spans for different phases of the app start. Here is an example from iOS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b3Vmhd0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghxfsnt1sw8z0c7rv9ox.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b3Vmhd0W--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ghxfsnt1sw8z0c7rv9ox.png" alt="measuring-app-start"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Android, it is trickier to hook into the initialization phases of the app start, and therefore we currently add one span from the application launch to the first auto-generated UI transaction. Still, this information is very useful and can help you to improve the duration of your app start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#slow-and-frozen-frames"&gt;
  &lt;/a&gt;
  Slow and Frozen Frames
&lt;/h1&gt;

&lt;p&gt;Unresponsive UI, animation hitches, or just jank annoy users and degrade the user experience. Two measurements to track this unwanted experience are slow and frozen frames. A phone or tablet typically renders with 60 frames per second (fps).&lt;/p&gt;

&lt;p&gt;The frame rate can also be higher, especially as 120 fps displays are becoming more popular. With 60 fps, every frame has 16.67 ms to render. If your app needs more than 16.67 ms for a frame, it is a slow frame.&lt;/p&gt;

&lt;p&gt;Frozen frames are UI frames that take longer than 700 ms. An app that is running smoothly should not experience either. That’s why the SDK adds these two measurements to all transactions captured. The detail view of the transaction displays the slow, frozen, and total frames to the right.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n30dvenv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpcprs19g451ld2ndix9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n30dvenv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lpcprs19g451ld2ndix9.png" alt="frozen-frames"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Mobile Vitals are a core part of Sentry’s performance monitoring for mobile and unlocks more ways to spot bottlenecks and speed up your apps.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#mobile-performance-monitoring"&gt;
  &lt;/a&gt;
  Mobile Performance Monitoring
&lt;/h1&gt;

&lt;p&gt;The purpose of Sentry’s performance monitoring is to track your application’s performance across multiple services. To measure Mobile Vitals, the SDKs capture distributed traces consisting of transactions and spans.&lt;/p&gt;

&lt;p&gt;Distributed tracing is a standard technology used for understanding what’s going on across distributed services, but it is still relatively new for mobile applications. A trace represents an operation you want to measure, like signing in or loading a view in your app. Both mentioned operations don’t only involve your app but also backend actions. Each trace consists of one or more transactions, which can contain one or more spans. For example, the trace of a login could then include a transaction of your app and two transactions of your backend services.&lt;/p&gt;

&lt;p&gt;Every transaction contains several spans representing a single unit of work, like reading a file or querying the database. The spans have a parent-child relationship, meaning a span can have multiple children and grandchildren. Here’s an example trace, broken down into transactions and spans:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TKVrVBKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7dme3mmru26xv4xh459.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TKVrVBKa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7dme3mmru26xv4xh459.png" alt="tracing"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to dig deeper into these concepts, check out &lt;a href="https://blog.sentry.io/2021/08/12/distributed-tracing-101-for-full-stack-developers/"&gt;Distributed Tracing 101 for Full Stack Developers&lt;/a&gt; by our very own, Ben Vinegar, VP of Engineering. For this blog post, let’s focus on transactions and take a look at an example creating a transaction with two child spans in Swift:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="kt"&gt;SentrySDK&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startTransaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Load Messages"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ui.load"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;getMessagesSpan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"GET /my/api/messages"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;getMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;getMessagesSpan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;renderMessagesSpan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;startChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;operation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"ui"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Render Messages"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nf"&gt;renderMessages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;renderMessagesSpan&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// Finishes the transaction and sends it to Sentry&lt;/span&gt;
&lt;span class="n"&gt;transaction&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After running the code we can take a look at the transaction in Sentry:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pFqvENnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j25f2n35z1glme22xrw2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pFqvENnU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j25f2n35z1glme22xrw2.png" alt="event-details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Creating rich transactions manually would require writing a lot of code. That’s why we’ve made things easier with auto instrumentation. You can save yourself the headache of writing and maintaining code while still accessing the performance insights you need.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#automatic-instrumentation"&gt;
  &lt;/a&gt;
  Automatic Instrumentation
&lt;/h1&gt;

&lt;p&gt;The automatic instrumentation lets you explore how long your views take to render, and HTTP requests need to finish. The SDK for Apple generates transactions for UIViewControllers on iOS, tvOS, and Mac Catalyst and creates spans for outgoing HTTP requests on all platforms. The SDK for Android captures transactions for Activities and Fragments and provides an integration for OkHttp. Sentry SDK for React Native can capture transactions automatically when using React Navigation router, and spans for both XHR and fetch requests. In the following months, we are working on adding support for Flutter.&lt;/p&gt;

&lt;p&gt;Here is an example of an auto-generated transaction on iOS for a &lt;code&gt;UIViewController&lt;/code&gt;. As we can see in the screenshot below, the SDK creates spans for each lifecycle method. In &lt;code&gt;viewWillAppear&lt;/code&gt;, we fire off an HTTP request for which a span is added. Our SDKs don’t automatically add spans for querying the database (yet), but I’m interested in how long my query runs. Therefore I have to add a span manually. We can achieve this by using &lt;code&gt;SentrySDK.span&lt;/code&gt; to access the current active span and call &lt;code&gt;SentrySDK.span.startChild&lt;/code&gt; to create the desired child span.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ltkrRuuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jto3totie2xsb5h8f5e4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ltkrRuuK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jto3totie2xsb5h8f5e4.png" alt="ui-load"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With the above transaction, I learn where my bottlenecks in the &lt;code&gt;UIViewController&lt;/code&gt; are. The &lt;code&gt;viewDidLoad&lt;/code&gt; method looks suspicious because it takes around 70 ms to complete, and I should investigate it. After looking at the code, I realize that I’m doing remarkable I/O on the main thread, which of course, is a no-go, and need to fix it immediately. Moreover, loading some entries from the database takes way longer than the HTTP request to finish, which also looks dubious and requires further investigation. After moving the I/O in &lt;code&gt;viewDidLoad&lt;/code&gt; to a background thread and adding an index to speed up my database query, the transaction looks way better now. Of course, the speed of the HTTP request will vary depending on the network conditions, but I cleared out the controllable bottlenecks, which speeds up my transaction from 250ms to around 20ms. This is a huge improvement.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZMGBt17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htm3yizmh6n0tn1hpw7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZMGBt17--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/htm3yizmh6n0tn1hpw7a.png" alt="ui-load-improvement"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The duration of a transaction can vary greatly because of many circumstances. Stepping through individual transactions doesn’t give you a clear picture to understand if your app gets faster or slows down. Therefore, we provide graphs to explore how the duration of a transaction changes over time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fd6TQlJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh696g11w0z7ovdun4lv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fd6TQlJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eh696g11w0z7ovdun4lv.png" alt="transaction-duration-over-time"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sentry also offers the possibility to explore slow, fastest, outlier, or recent transactions to find the misery or delight your users experience quickly.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RgR-aL2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3ueuxj6mmdy2trrrogg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RgR-aL2f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x3ueuxj6mmdy2trrrogg.png" alt="slow-transactions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Along with many other possibilities to explore your transactions, Sentry links the related errors captured during a transaction at the bottom of the transaction summary page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tvEjD9F---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mn46wjg4jogd0x7zjdy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tvEjD9F---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6mn46wjg4jogd0x7zjdy.png" alt="related-errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Auto-generated transactions combined with manual transactions unlocks rich data so you can see Mobile Vitals as well as other metrics such as &lt;a href="https://docs.sentry.io/product/performance/metrics/#user-misery"&gt;User Misery&lt;/a&gt; to give you a complete view into the performance of your application.&lt;/p&gt;

&lt;p&gt;To learn more, check out our docs for &lt;a href="https://docs.sentry.io/platforms/apple/performance/instrumentation/automatic-instrumentation/"&gt;Apple&lt;/a&gt;, &lt;a href="https://docs.sentry.io/platforms/android/performance/instrumentation/automatic-instrumentation/"&gt;Android&lt;/a&gt;, and &lt;a href="https://docs.sentry.io/platforms/react-native/performance/instrumentation/automatic-instrumentation/"&gt;React-Native&lt;/a&gt; and give automatic performance instrumentation on mobile a try. Watch out for beta releases of the &lt;a href="https://github.com/getsentry/sentry-dart"&gt;Flutter GitHub&lt;/a&gt; repo. We have plans to add these features to Flutter soon.&lt;/p&gt;

</description>
      <category>monitoring</category>
      <category>performance</category>
      <category>ios</category>
      <category>android</category>
    </item>
    <item>
      <title>How to save data in localStorage using JavaScript</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 24 Aug 2021 00:36:42 +0000</pubDate>
      <link>https://dev.to/michaelburrows/how-to-save-data-in-localstorage-using-javascript-994</link>
      <guid>https://dev.to/michaelburrows/how-to-save-data-in-localstorage-using-javascript-994</guid>
      <description>&lt;p&gt;In this tutorial you’ll learn how to use &lt;code&gt;localStorage&lt;/code&gt; a property of the window interface that allows you to access a storage object from the browser. To give you an understanding of how &lt;code&gt;localStorage&lt;/code&gt; works we’ll be building a simple note taking application that will save and delete data in the &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s get started by creating a form to add new notes and an unordered list to display the saved notes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-form"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-input"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"+ Add Note"&lt;/span&gt; &lt;span class="na"&gt;required&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"note-submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Save&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"notes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now for the JavaScript functionality, first we’ll declare variables for the HTML elements we’ll be working with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteForm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-form&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;noteSubmit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;note-submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;notes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll also save any existing notes to a &lt;code&gt;noteStorage&lt;/code&gt; variable to make them easier to work with. If there isn’t any notes in the &lt;code&gt;localStorage&lt;/code&gt; yet we’ll just an empty array:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;notesStorage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we’ll add the functionality to save a new note when the form is submitted:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;noteForm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;listBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;noteInput&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This pushes the new note into into the &lt;code&gt;notesStorage&lt;/code&gt; then updates the &lt;code&gt;notes&lt;/code&gt; in the &lt;code&gt;localStorage&lt;/code&gt;. We then call a &lt;code&gt;listBuilder&lt;/code&gt; function which adds the note to the unordered list element in our HTML markup, here’s the code for that function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;listBuilder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;note&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;li&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &amp;lt;button onclick="deleteNote(this)"&amp;gt;x&amp;lt;/button&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;notes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The notes are now being saving in localStorage and displayed in the HTML. However if the page is refreshed the notes would no longer display in the HTML so we need to loop through each of the notes in &lt;code&gt;localStorage&lt;/code&gt; when the page is loaded and re-render them in the HTML:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getNotes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;getNotes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;listBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;note&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing we need to do is add the functionality for the delete button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteNote&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;el&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;children&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;notes&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;notesStorage&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This gets the index of the list item to delete and removes it from both the HTML and &lt;code&gt;localStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That’s all for this tutorial. Hopefully it’s given you an understanding of how to work with data in the &lt;code&gt;localStorage&lt;/code&gt;. A full working example of the code used in this tutorial is available to download from &lt;a href="https://gist.github.com/w3collective/9e6a99f4d828734676a12b2db2ff61e5"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting Started with Redis in Nodejs</title>
      <author>Keith Holliday</author>
      <pubDate>Tue, 24 Aug 2021 00:16:14 +0000</pubDate>
      <link>https://dev.to/thehollidayinn/getting-started-with-redis-in-nodejs-28ec</link>
      <guid>https://dev.to/thehollidayinn/getting-started-with-redis-in-nodejs-28ec</guid>
      <description>&lt;p&gt;This was originally posted here: &lt;a href="https://koalatea.io/node-js-redis-getting-started/"&gt;https://koalatea.io/node-js-redis-getting-started/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;When building large scale applications, there comes a need for scaling. There are many places to start with scaling, but one place my be scaling your reads. Let's say that you have a read heavy application, like an ecommerce store or a comment system.&lt;br&gt;
You may want to consider caching to address this concerns. Redis is a good place to start (and to end) when solving this problems.&lt;br&gt;
In this article we will get started with Redis in Nodejs.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#more-about-redis-and-caching"&gt;
  &lt;/a&gt;
  More about Redis and Caching
&lt;/h2&gt;

&lt;p&gt;Caching is a large topic that is outlined here: &lt;a href="https://github.com/donnemartin/system-design-primer#cache"&gt;https://github.com/donnemartin/system-design-primer#cache&lt;/a&gt;. We will simply introduce Redis here and in later articles, we will learn to implement this practices on large scale features.&lt;/p&gt;

&lt;p&gt;Redis is use for a lot more than caching. For example, queues are implemented in Redis using bullqueue: &lt;a href="https://optimalbits.github.io/bull/"&gt;https://optimalbits.github.io/bull/&lt;/a&gt;. I highly recommend checking out this package (and the bullq UI). This is a great start to scaling out services, not just microservices. You can&lt;br&gt;
read about more use cases for redis here: &lt;a href="https://redis.com/blog/5-industry-use-cases-for-redis-developers/"&gt;https://redis.com/blog/5-industry-use-cases-for-redis-developers/&lt;/a&gt;, and I will write articles in the future about implementing this features later on.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-the-project"&gt;
  &lt;/a&gt;
  Creating the project
&lt;/h2&gt;

&lt;p&gt;Let's create the project as follows.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;redis-example
&lt;span class="nb"&gt;cd &lt;/span&gt;redis-example
npm init &lt;span class="nt"&gt;-y&lt;/span&gt;
&lt;span class="nb"&gt;touch &lt;/span&gt;index.js
&lt;span class="nb"&gt;touch &lt;/span&gt;docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-up-redis"&gt;
  &lt;/a&gt;
  Setting up Redis
&lt;/h2&gt;

&lt;p&gt;For setting up Redis, I would recommend using a service for you in prod. Azure for example, has a great redis service that scales easily.  However, you will want to learn redis and eventually how to scale it yourself. This will help with debugging cloud services or eventually, saving money and not using them.&lt;/p&gt;

&lt;p&gt;We will start our intro to redis via using docker compose. Create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file and add the following.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.2"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;redis&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;redis:alpine"&lt;/span&gt;
    &lt;span class="na"&gt;command&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;redis-server&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;6379:6379"&lt;/span&gt;
    &lt;span class="na"&gt;volumes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$PWD/redis-data:/var/lib/redis&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;$PWD/redis.conf:/usr/local/etc/redis/redis.conf&lt;/span&gt;
    &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;REDIS_REPLICATION_MODE=master&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ensure you have docker installed and run&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;docker-compose up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#installing-redis-modules"&gt;
  &lt;/a&gt;
  Installing Redis Modules
&lt;/h2&gt;

&lt;p&gt;There are two modules I see often used in nodejs. I will tend towards&lt;br&gt;
&lt;code&gt;ioredis&lt;/code&gt; as it has built in support for promises and many other features in redis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;ioredis
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#writing-the-code"&gt;
  &lt;/a&gt;
  Writing the Code
&lt;/h2&gt;

&lt;p&gt;Let's start by opening up the index.js file and importing our module. We will also connect to the redis server. By default, the module will assume we are using localhost on port 6379, which is what we setup in our docker compose file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, let's run some redis commands. We will start very basic with the &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; commands. As implied by the names, the set command will set a key and the get will retrieve the key.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note, I usually create a main funciton to start a node file that will be an entry. We can call the above using a self invoking funciton. Eventually in later version of node we will not need this as we will be able to call &lt;code&gt;await&lt;/code&gt; at the root level.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here is the full file for context.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ioredis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Redis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;setResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;setResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;redis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getResult&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#a-redis-gui"&gt;
  &lt;/a&gt;
  A Redis GUI
&lt;/h2&gt;

&lt;p&gt;Often over looked in the community is the use of a UI. Many are outdated or hard to run. One that I often use is &lt;code&gt;patrikx3/redis-ui&lt;/code&gt;. Although a little&lt;br&gt;
clunky, it usually does what I need. I will also suggest getting use to the redis-cli to help where GUIs cannot.&lt;/p&gt;

&lt;p&gt;You can download the GUI here: &lt;a href="https://github.com/patrikx3/redis-ui"&gt;https://github.com/patrikx3/redis-ui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have that downloaded, open up the app. Then go to Settings -&amp;gt; New Connection.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kkTlSaJ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/a9aa100971642b0a2968ebf9fd132e7e/1c3a5/redis-new-connection.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kkTlSaJ7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/a9aa100971642b0a2968ebf9fd132e7e/1c3a5/redis-new-connection.png" alt="new connection" title="redis connection"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type in the following to connect to local, then hit the "Add" button at the bottom.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--swOAPx24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/64121405161e88741cc02fba8e8b5a04/914c7/redis-connect.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--swOAPx24--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/64121405161e88741cc02fba8e8b5a04/914c7/redis-connect.png" alt="new connect" title="redis connect"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, click the bottom right, then select your localhost to connect.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mwRq7Pcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/b1eba0ceca5c6320e9f02e3e1c32aede/87a80/redis-add.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mwRq7Pcb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/b1eba0ceca5c6320e9f02e3e1c32aede/87a80/redis-add.png" alt="redis add" title="redis add"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Click Home and then you should see a screen like below, but with no keys on the left.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xb74F24R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/cc0ddbcc3bb0e61d9e5053f76e8aa50d/d30ee/redis-home.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xb74F24R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://koalatea.io/static/cc0ddbcc3bb0e61d9e5053f76e8aa50d/d30ee/redis-home.png" alt="new home" title="redis home"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>redis</category>
      <category>javascript</category>
    </item>
    <item>
      <title>One Commit. One Change.</title>
      <author>Fagner Brack</author>
      <pubDate>Tue, 24 Aug 2021 00:06:30 +0000</pubDate>
      <link>https://dev.to/fagnerbrack/one-commit-one-change-e5b</link>
      <guid>https://dev.to/fagnerbrack/one-commit-one-change-e5b</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-a-small-atomic-commit-is-easier-to-work-with"&gt;
  &lt;/a&gt;
  Why a small atomic commit is easier to work with
&lt;/h2&gt;




&lt;p&gt;Originally posted on &lt;a href="https://fagnerbrack.com/one-commit-one-change-3d10b10cebbf"&gt;May 05, 2016&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few weeks ago I attended a &lt;a href="http://www.eventbrite.com.au/e/yow-thoughtworks-bring-you-martin-fowler-sydney-march-29-tickets-22103248411"&gt;series of 3 talks from Martin Fowler in Australian Technology Park, Redfern, Sydney&lt;/a&gt;. One of the talks was about deriving the application state from a sequence of persisted events. A.K.A &lt;a href="http://martinfowler.com/eaaDev/EventSourcing.html"&gt;Event Sourcing&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[...] The fundamental idea of Event Sourcing is that of ensuring every change to the state of an application is captured in an event object, and that these event objects are themselves stored in the sequence they were applied for the same lifetime as the application state itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That talk reminded me a lot about Git, which is built using the principle that if you replay all committed changes since the beginning and in the same chronological order, you will get the exact same result. The current state.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#in-git-if-you-replay-all-committed-changes-since-the-beginning-and-in-the-same-chronological-order-you-will-get-the-exact-same-result"&gt;
  &lt;/a&gt;
  In Git, if you replay all committed changes since the beginning and in the same chronological order, you will get the exact same result.
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, Git is just a tool. It is the responsibility of the engineer to use it in a way that brings the most valuable possible outcome. One of these responsibilities is taking care of how changes are inserted into the &lt;a href="https://en.wikipedia.org/wiki/Version_control"&gt;VCS&lt;/a&gt;, creating a commit which purpose should reflect one change and one change only. Also known as an &lt;strong&gt;atomic change&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As from the &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Atomic-Changes.html"&gt;emacs manual&lt;/a&gt;, in database terminology, an &lt;strong&gt;atomic change&lt;/strong&gt; is an indivisible &lt;strong&gt;change&lt;/strong&gt; — it can succeed entirely or it can fail entirely, but it cannot partly succeed.&lt;/p&gt;

&lt;p&gt;In Git, it means that a change should be able to be reverted (&lt;a href="https://www.atlassian.com/git/tutorials/undoing-changes/git-revert"&gt;git-revert&lt;/a&gt;) and not cause any side effects or conflicts in other parts of the system other than the one that is being reverted. Also, it should contain a single change that doesn't have real value if applied partially.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#an-atomic-commit-should-be-able-to-be-reverted-or-applied-without-side-effects"&gt;
  &lt;/a&gt;
  An atomic commit should be able to be reverted or applied without side effects.
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Another important point about atomic commits is the fact that it should not break the normal flow of your build, it should just remove or add something cleanly. If you have a build routine or tests, you should be able to run it successfully whether the commit is there or not, just by assuming a specific set of premises. “Premises” in this context represents the &lt;strong&gt;required state of the codebase&lt;/strong&gt; in which the commit can be applied with the least amount of code conflicts.&lt;/p&gt;

&lt;p&gt;This is more important if you are committing into the master branch, the one branch in which the history should always be in a consistent and immutable state.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#an-atomic-change-is-a-piece-of-functionality-that-can-be-replayed-over-and-over-again-against-a-specific-set-of-premises"&gt;
  &lt;/a&gt;
  An atomic change is a piece of functionality that can be replayed over and over again against a specific set of premises.
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not breaking the build is an important aspect of atomicity, because then it is possible to reset your application to any state in order to see how the application was working at that time. It is also possible to easily leverage built-in tools to find bugs in the history (such as &lt;a href="http://webchick.net/node/99"&gt;git bisect&lt;/a&gt;), something that can't be easily done if one can't run the build after a &lt;a href="https://jwiegley.github.io/git-from-the-bottom-up/3-Reset/4-doing-a-hard-reset.html"&gt;reset&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As the last point, we have the principle of traceability of changes. Ideally one should be able to track the whole source and purpose of a change through the history of the commits without having to talk with the original author, because he or she might not be available anymore or not even remember what that change was all about. If a commit does more than one thing, it might be impossible to understand in the future why those lines in the system were changed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#if-a-commit-does-more-than-one-thing-it-might-be-impossible-to-understand-in-the-future-why-those-lines-in-the-system-were-changed"&gt;
  &lt;/a&gt;
  If a commit does more than one thing, it might be impossible to understand in the future why those lines in the system were changed
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you create commits with more than one change, it will be hard to find the point in time in which a mistake or feature was introduced in the codebase, it will be hard to reset the codebase to a previous state, and might be impossible to revert a modification without side effects.&lt;/p&gt;

&lt;p&gt;This is a principle, not a law. Be thoughtful and make the best decision given the circumstances.&lt;/p&gt;

&lt;p&gt;See also &lt;a href="https://fagnerbrack.com/one-pull-request-one-concern-e84a27dfe9f1"&gt;One Pull Request. One Concern&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;Thanks for reading. If you have some feedback, reach out to me on &lt;a href="https://twitter.com/FagnerBrack"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.facebook.com/fagner.brack"&gt;Facebook&lt;/a&gt; or &lt;a href="http://github.com/FagnerMartinsBrack"&gt;Github&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>coding</category>
      <category>dev</category>
    </item>
    <item>
      <title>Create a Fastify server</title>
      <author>Thomas Bnt</author>
      <pubDate>Mon, 23 Aug 2021 23:51:00 +0000</pubDate>
      <link>https://dev.to/thomasbnt/create-a-fastify-server-23lg</link>
      <guid>https://dev.to/thomasbnt/create-a-fastify-server-23lg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/"&gt;Fastify&lt;/a&gt; is a &lt;strong&gt;web server framework&lt;/strong&gt; like ExpressJS but with &lt;em&gt;better performances&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/benchmarks/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qB8EKpsS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dh58y5oa54arc78g0ok4.png" alt="Benchmark on the website Fastify.io"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ecosystem is pretty cool, he &lt;a href="https://www.fastify.io/ecosystem/"&gt;adds multiple plugins&lt;/a&gt;. But in this first test, I only add &lt;strong&gt;fastify-static&lt;/strong&gt; for getting .html files. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code-"&gt;
  &lt;/a&gt;
  Let's code !
&lt;/h2&gt;

&lt;p&gt;At the first time, create a void folder and install Fastify and fastify-static.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm i fastify fastify-static
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Create an &lt;strong&gt;app.js&lt;/strong&gt;, it's your root file. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#into-the-appjs"&gt;
  &lt;/a&gt;
  Into the app.js
&lt;/h2&gt;

&lt;p&gt;You can write the basis of this file for creating a new Fastify server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)({&lt;/span&gt;&lt;span class="na"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fastify-static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;__dirname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;public&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="na"&gt;prefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/public/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;// In this example, when you get localhost:3000, ou have the time&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;()})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;reply&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;about.html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#public-html-pages"&gt;
  &lt;/a&gt;
  Public HTML pages
&lt;/h2&gt;

&lt;p&gt;Create a &lt;strong&gt;/public&lt;/strong&gt; folder and a &lt;strong&gt;about.html&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VsByx-Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqf234ealz2lmr2bxihs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VsByx-Q0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aqf234ealz2lmr2bxihs.png" alt="Create your public folder"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#end"&gt;
  &lt;/a&gt;
  End
&lt;/h2&gt;

&lt;p&gt;It's a very short post, but I demonstrate how to simply start a server with &lt;strong&gt;Fastify&lt;/strong&gt;. As this is the first time I use it, there might be some errors. Don't hesitate to give me feedback in the comments ! 👍🏼&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.fastify.io/docs/latest/Getting-Started/"&gt;Getting Started with Fastify&lt;/a&gt;&lt;/p&gt;




&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;☕&lt;/th&gt;
&lt;th&gt;Check my &lt;a href="https://twitter.com/thomasbnt_"&gt;Twitter account&lt;/a&gt;. You can see many projects and updates. You can also &lt;a href="https://www.buymeacoffee.com/thomasbnt/?via=thomasbnt"&gt;support me on Buy Me a Coffee&lt;/a&gt;.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>node</category>
      <category>fastify</category>
    </item>
    <item>
      <title>Loading Initial Data with Spring Boot</title>
      <author>Emmanuel Ogbinaka</author>
      <pubDate>Mon, 23 Aug 2021 23:08:30 +0000</pubDate>
      <link>https://dev.to/imanuel/loading-initial-data-with-spring-boot-58mi</link>
      <guid>https://dev.to/imanuel/loading-initial-data-with-spring-boot-58mi</guid>
      <description>&lt;p&gt;With SpringBoot + Hibernate we can easily manage our database. By default, all classes marked with the &lt;code&gt;@Entity&lt;/code&gt; annotation in our packages are used to create tables automatically.&lt;/p&gt;

&lt;p&gt;Well, there are times we need more fine-grained control over the database alterations according to our requirements.&lt;br&gt;
In this post I'll be sharing lights on one of those scenarios: &lt;strong&gt;Auto-populating or loading initial values into our tables&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;SpringBoot has some reservations for situations as this. We make use of the &lt;code&gt;data.sql&lt;/code&gt; file in Spring to actualise this.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This file should be saved in the directory:&lt;br&gt;
&lt;code&gt;src/main/resources/&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Hint: Same location as &lt;code&gt;application.properties&lt;/code&gt; file.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;When we run the project with this file on the resources directory, Spring will pick it up and use it for populating the database.&lt;/p&gt;

&lt;p&gt;As an example, we can decide to load initial values for the &lt;code&gt;Role&lt;/code&gt; entity as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;INSERT INTO Role (name) VALUES ('USER');
INSERT INTO Role (name) VALUES ('ADMIN');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you start your application, spring will attempt to load these data into the &lt;code&gt;Role&lt;/code&gt; table which at this time does not exist which will cause the program to fail, so we need to add the following config to &lt;code&gt;application.properties&lt;/code&gt; file&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;spring.jpa.defer-datasource-initialization=true
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This tells spring to delay the data initialisation process. Now start your spring application, and you should be able to see the values 'USER' &amp;amp; 'ADMIN' in the Role table.&lt;/p&gt;

&lt;p&gt;Hope you find this helpful. You can leave a comment to contribute. Thanks!&lt;/p&gt;

</description>
      <category>springboot</category>
      <category>java</category>
      <category>hibernate</category>
      <category>jpa</category>
    </item>
    <item>
      <title>Match made in Python.</title>
      <author>Jonathan Cohen</author>
      <pubDate>Mon, 23 Aug 2021 23:02:12 +0000</pubDate>
      <link>https://dev.to/jdc1492/match-made-in-python-bl5</link>
      <guid>https://dev.to/jdc1492/match-made-in-python-bl5</guid>
      <description>&lt;p&gt;This week in python, I made a "Love Calculator". The program takes the input of two names and counts the amount of times the letters TRUELOVE appear in both names. TRUE will add up to one score and LOVE will add up to another. At this point we want to combine the two digits together to make a larger number. An example could be if both name inputs amount to 5 for true and 9 for love the score together would become 59. &lt;/p&gt;

&lt;p&gt;The first thing needed is to use the input functions for both names. We have them set to variables of name1 and name2. After the user inputs the names, the names will then be set to the variables rather than the input method expecting some sort of input on the users behalf.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;print("Welcome to the Love Calculator!")
name1 = input("What is your name? \n")
name2 = input("What is their name? \n")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;One way to cut down on a few lines of code came from the idea of concatenating both names into a combined string. from there, we used the lower() function to turn all the letters in the string into lowercase letters.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;combined_str = name1 + name2
combined_str_lwr = combined_str.lower()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this line we then begin to count the times each letter appears in the string using the count() method on the string. The function can take up to three arguments, but in this case we only want to check for one letter at a time which results in the count method being used 8 times against the combined string also setting them to their own individual variable. An example would be to find all the 't's in the combined string we would set the count of the combined string with and argument of the letter 't' to the variable of t_count. This would happen for every letter in the phrase TRUELOVE.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;t_count = combined_str_lwr.count("t")
r_count = combined_str_lwr.count("r")
u_count = combined_str_lwr.count("u")
e_count = combined_str_lwr.count("e")

true = t_count + r_count + u_count + e_count

l_count = combined_str_lwr.count("l")
o_count = combined_str_lwr.count("o")
v_count = combined_str_lwr.count("v")
e_count = combined_str_lwr.count("e")

love = l_count + o_count + v_count + e_count
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also will add up the totals for each word. So true would have a count equal to an integer and the same for the variable love.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;score = f"{true}{love}"
scr_int = int(score)

if scr_int &amp;lt; 10 or scr_int &amp;gt; 90:
  print(f"Your score is {scr_int}, you go together like coke and mentos.")
elif scr_int &amp;gt; 40 and scr_int &amp;lt; 50:
  print(f"Your score is {scr_int}, you are alright together.")
else:
  print(f"Your score is {scr_int}.")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Using an f string we combine true love as a string which will result in our score. afterwards we turn that score into a variable. That integer is then used in out if, else conditional statements that will print out a certain message to the user depending on which of the conditionals returns true. This was a pretty fun project to complete. While I'm going through the content of this udemy course slowly, I'm still working through it and constantly learning something new. I can't wait to get even deeper with this stuff. &lt;/p&gt;

&lt;p&gt;Take time to learn something new this week and as always...Happy Coding!&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How to Build Java Applications Today: #50</title>
      <author>Karsten Silz</author>
      <pubDate>Mon, 23 Aug 2021 22:42:48 +0000</pubDate>
      <link>https://dev.to/ksilz/how-to-build-java-applications-today-50-48pg</link>
      <guid>https://dev.to/ksilz/how-to-build-java-applications-today-50-48pg</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;I think Eclipse IDE is in trouble, my app store adventures, Git 2.33, Spring Boot 2.5.4 &amp;amp; 2.4.10, Micronaut 3.0, Quarkus 2.1.3, Payara CE 5.2021.6 &amp;amp; EE 5.30.0, and Spring Tools 4.11.1&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#readme"&gt;
  &lt;/a&gt;
  README
&lt;/h2&gt;

&lt;p&gt;Welcome to my weekly newsletter "How To Build Java Applications Today"! I read all the Java newsletters so &lt;strong&gt;you&lt;/strong&gt; don't have to! And it's "Java news with a smile".&lt;/p&gt;

&lt;p&gt;If you like my newsletter, then &lt;a href="https://bpfnl.substack.com"&gt;subscribe to it on Substack&lt;/a&gt;! Or read it on &lt;a href="https://dev.to/ksilz/series/11995"&gt;dev.to&lt;/a&gt;,  the &lt;a href="https://thejavacafe.com/ksilz/series/1"&gt;Java Cafe&lt;/a&gt;, or &lt;a href="https://ksilz.medium.com"&gt;Medium&lt;/a&gt;. Even better: Share it with people who may be interested.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#quote-of-the-week"&gt;
  &lt;/a&gt;
  Quote of the Week
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;‌A man's silence is wonderful to listen to.&lt;/em&gt;&lt;br&gt;
Amazingly, &lt;a href="http://www.quotationspage.com/quote/32998.html"&gt;Thomas Hardy&lt;/a&gt;, a &lt;a href="https://en.wikipedia.org/wiki/Thomas_Hardy"&gt;British writer&lt;/a&gt;, described a silence &lt;strong&gt;before&lt;/strong&gt; everybody stared at their phones.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#standup"&gt;
  &lt;/a&gt;
  Stand-Up
&lt;/h2&gt;

&lt;p&gt;Last week I submitted the apps from my start-up for app store review. How did it go? Read on below! &lt;/p&gt;

&lt;p&gt;My wife &amp;amp; I also booked a vacation week in the sun (i.e., outside England) for September. Let's hope that we can actually go! But fear not - I'll publish my little newsletter during our vacation, too!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#advertisement"&gt;
  &lt;/a&gt;
  ADVERTISEMENT
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#22-years-of-fullstack-java-for-hire-next-january"&gt;
  &lt;/a&gt;
  22 YEARS OF FULL-STACK JAVA FOR HIRE NEXT JANUARY
&lt;/h3&gt;

&lt;p&gt;I’m a full-stack Java developer with 22 years of experience, looking for a project in January 2022, in Milton Keynes, London, or remote. I’ll work as a contractor or fixed-term employee but don’t take permanent positions. &lt;/p&gt;

&lt;p&gt;Interested? Then check out my resume &amp;amp; work samples!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ksilz.com/"&gt;Check out my resume &amp;amp; work samples &lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#bookmarks"&gt;
  &lt;/a&gt;
  Bookmarks
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#i-think-eclipse-ide-is-in-trouble"&gt;
  &lt;/a&gt;
  I think Eclipse IDE is in Trouble
&lt;/h4&gt;

&lt;p&gt;Why do I think that the Eclipse IDE is in trouble? Because they &lt;strong&gt;changed&lt;/strong&gt;. Most organizations don‘t like change, especially the "70 projects under one roof" ones like Eclipse IDE. So they only change when they are in a crisis. So what‘s the crisis, and what‘s the change?&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;crisis&lt;/strong&gt; is competition from Microsoft‘s free cross-platform and cross-language IDE Visual Studio Code (VS Code). And the &lt;strong&gt;change&lt;/strong&gt; is the establishment of a &lt;a href="https://www.eclipse.org/org/workinggroups/eclipse-ide-charter.php"&gt;Working Group (WG)&lt;/a&gt; "to ensure the continued sustainability, integrity, evolution and adoption of the Eclipse IDE'. The &lt;a href="https://newsroom.eclipse.org/news/announcements/open-source-leader-eclipse-foundation-launches-eclipse-ide-working-group"&gt;press release&lt;/a&gt; quotes a founding WG member: "We believe the IDE needs to be more relevant and attractive for end users, committers, tool developers, and those who build applications upon it."&lt;/p&gt;

&lt;p&gt;Look, I‘m rooting for Eclipse IDE here. I used it daily for about fifteen years, starting way back in 2001 when Eclipse won a shoot-out against Netbeans in our team. But I switched to the paid IntelliJ version a couple of years ago because it was a better Java IDE for me, and it had better web development support.&lt;/p&gt;

&lt;p&gt;Now I already wrote about the Eclipse IDE Working Group in &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;issue #41&lt;/a&gt;. But the research for &lt;a href="https://www.infoq.com/news/2021/08/eclipse-ide-wg-established"&gt;my InfoQ article&lt;/a&gt; made it look worse:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comparing the 2021-06 release with the 2020-06 one shows a marked decline in the sub-project activity: "The overall number of sub-projects shrank by 7%, the sub-projects with a release decreased from 63% to 47%, and the sub-projects with a release one year or older nearly tripled from 8% to 22%." Now we don't know how much the COVID pandemic contributed here. But VS Code grew a lot in the timeframe (see below).&lt;/li&gt;
&lt;li&gt;Frequent readers know that I &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;complain about the Eclipse IDE „What‘s New" page&lt;/a&gt; loudly. But rightfully so: It‘s a mess, and it's worse than I thought. The &lt;a href="https://www.eclipse.org/eclipseide/2021-06/noteworthy/"&gt;2021-06 version&lt;/a&gt; touts 70 projects but only &lt;a href="https://projects.eclipse.org/releases/2021-06"&gt;lists 68&lt;/a&gt;. Only 14 out of 32 projects with a new release are included, but also 10 that didn't have a release. And the links we do get? Here's what I said before: "Some look like &lt;a href="https://www.eclipse.org/graphiti/pages/whats-new-0.18.html"&gt;it's 1995&lt;/a&gt;, some &lt;a href="https://www.eclemma.org/changes.html"&gt;lost the links altogether&lt;/a&gt;, some don't know that &lt;a href="https://bugs.eclipse.org/bugs/buglist.cgi?list_id=20343413&amp;amp;product=ECP&amp;amp;query_format=advanced&amp;amp;target_milestone=1.26.0"&gt;strike-through text is hard to read&lt;/a&gt;, some look &lt;a href="https://wiki.eclipse.org/CDT/User/NewIn103"&gt;Eclipse-like&lt;/a&gt;, and &lt;a href="https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2021/03/02/version-2-25-0"&gt;some don't&lt;/a&gt;." There are dozens, maybe hundreds of developers working on a release - and then the first impression gets ruined so radically &amp;amp; ruefully. 😞&lt;/li&gt;
&lt;li&gt;Stack Overflow asked 83,500 developers &lt;a href="https://insights.stackoverflow.com/survey/2021#section-most-loved-dreaded-and-wanted-collaboration-tools"&gt;about collaboration tools&lt;/a&gt;: 69% of 12,955 respondents dread using Eclipse IDE; only NetBeans scored worse. Now 79% of 58,026 developers love VS Code - strong numbers, both absolute and relative.&lt;/li&gt;
&lt;li&gt;VS Code &lt;a href="https://www.infoq.com/news/2021/07/visual-studio-code-java-ide/"&gt;boosted&lt;/a&gt; its Java capabilities earlier this year and plans to do more, including Gradle support (see the &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last issue&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;According to recent Snyk and JRebel surveys, about a quarter of all Java developers already use VS Code, growing rapidly year-over-year (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-5ca"&gt;issue #41&lt;/a&gt; and &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-4b3"&gt;issue #27&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;From what I can see, VS Code is rapidly becoming one thing we never had - the default IDE for all developers. Microsoft claimed 14 million users half a year ago, up 5 million in 2020. And now that flywheel is in motion and hard to stop because every technology/tool vendor will ensure that they have a VS Code plugin. That makes VS Code more useful which attracts more users, and so on. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I think (hope!) that Eclipse is still a better Java IDE than VS Code. A cross-language IDE like VS Code will probably be worse than specialized IDEs - at least initially. But VS Code doesn't &lt;strong&gt;have&lt;/strong&gt; to be better: As a free product, we can always use it in &lt;strong&gt;addition&lt;/strong&gt; to our specialized IDEs. That's how it snuck into my life: As a &lt;a href="https://www.jetbrains.com/webstorm/"&gt;WebStorm&lt;/a&gt; replacement for building static websites. And once we're getting used to using VS Code, we're asking ourselves: "Well, why can't I use that for Java, too? Let me try…"&lt;/p&gt;

&lt;p&gt;A product that's dreaded by users, a decline in sub-projects, a rapidly growing competitor that's becoming the industry standard - I don't envy the Eclipse IDE WG. But change takes time, so we shouldn't expect big changes this year. What will they do? What &lt;strong&gt;can&lt;/strong&gt; they do? I'll keep you posted!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.infoq.com/news/2021/08/eclipse-ide-wg-established"&gt;My InfoQ article&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#over-the-fence"&gt;
  &lt;/a&gt;
  Over the Fence
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#my-app-store-adventures"&gt;
  &lt;/a&gt;
  My App Store Adventures
&lt;/h4&gt;

&lt;p&gt;I'm the technical co-founder of a &lt;a href="https://yourhomeingoodhands.co.uk"&gt;UK start-up&lt;/a&gt;. We offer an app to organize a cat-sitter business. It's actually two apps: A web app to manage customers, bookings, and visits. And iOS/Android apps to do the visits. Our apps aren't fully open for business yet, but we still wanted to be in the app stores.&lt;/p&gt;

&lt;p&gt;I've never put an app into an app store before. So I was a bit nervous before I submitted our app for review last week. I mean the news is full of app store review horror stories, mostly about Apple: Vague &amp;amp; nit-picky rules, inconsistent rule application, delays of weeks or months, rejections that crush businesses.&lt;/p&gt;

&lt;p&gt;We tested the apps lot. We also created test accounts for the app reviewers with fake customer data and detailed instructions for the web application. And all that was on top of the usual app launch tasks - screenshots in various sizes, app description, privacy statements, etc.&lt;/p&gt;

&lt;p&gt;So, how did it go?&lt;/p&gt;

&lt;p&gt;Splendidly, I'm relieved to say. Our iOS app was approved within &lt;strong&gt;12 hours&lt;/strong&gt;, the Android one in &lt;strong&gt;4.5 days&lt;/strong&gt; (which included a weekend). Neither submission needed a single change to our app!&lt;/p&gt;

&lt;p&gt;I can only guess why it went so smoothly. First of all, I think we were just lucky. Maybe our cat Max charmed the socks off of our reviewers - we used him as the &lt;a href="https://yourhomeingoodhands.co.uk/images/screenshots/ios/add%20note%20notch%20filled.png"&gt;example for adding notes&lt;/a&gt;. Perhaps a business-to-business app like ours attracts less scrutiny than consumer offerings. Or it's the summer. I'm sure I'll suffer from "review rage" in the future, but for now, I'm a happy camper!&lt;/p&gt;

&lt;p&gt;I was surprised by some faulty app store details:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our app is only in Apple's UK iOS App Store. Now my Apple user account is tied to a different App Store country. And on iOS, opening the link to our UK App Store page tells me as much. On the Mac, the link just shows a blank page, as if the link was broken.&lt;/li&gt;
&lt;li&gt;The Google Play Store dashboard gave us a Play Story link &lt;strong&gt;immediately&lt;/strong&gt; once the review process started. The problem: The link didn't work at all &lt;strong&gt;until&lt;/strong&gt; the app was in the Play Store - it was broken for 4.5 days! At least Apple was so clever to only show the link &lt;strong&gt;after&lt;/strong&gt; the app was approved. And it still took about 30 minutes before that link worked!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://yourhomeingoodhands.co.uk"&gt;My start-up website&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#releases"&gt;
  &lt;/a&gt;
  Releases
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#git-233"&gt;
  &lt;/a&gt;
  Git 2.33
&lt;/h4&gt;

&lt;p&gt;Git releases typically have few changes that affect our daily coding lives. Version 2.33 is no different. It's actually version*&lt;em&gt;s&lt;/em&gt;* 2.33 and 2.32 because the latter never received a proper highlight reel. &lt;/p&gt;

&lt;p&gt;Two things caught my attention: A new merge algorithm called &lt;code&gt;merge-ort&lt;/code&gt; "is likely to become the default strategy in a future version of Git". It's faster and supposedly less buggy. Now being the only developer in my current projects, merge conflicts rarely raise their ugly heads. 😏&lt;/p&gt;

&lt;p&gt;The other thing is a speed-up of checkouts through parallelization. You can configure the number of threads to use, set to "auto" here: &lt;code&gt;git config --global checkout.workers 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.blog/2021-08-16-highlights-from-git-2-33/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-boot-254-amp-2410"&gt;
  &lt;/a&gt;
  Spring Boot 2.5.4 &amp;amp; 2.4.10
&lt;/h4&gt;

&lt;p&gt;The Spring Boot releases that were foreshadowed by &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last week's&lt;/a&gt; Spring Data releases are here. They have &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.5.4"&gt;35 changes (2.5.4)&lt;/a&gt; and &lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-4-10-is-now-available"&gt;29 (2.4.10)&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-5-4-available-now"&gt;Announcement 2.5.4&lt;/a&gt;, &lt;a href="https://spring.io/blog/2021/08/19/spring-boot-2-4-10-is-now-available"&gt;announcement 2.4.10&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#micronaut-30"&gt;
  &lt;/a&gt;
  Micronaut 3.0
&lt;/h4&gt;

&lt;p&gt;Quarkus isn't the only new Java framework nipping at the heels of Spring Boot - Micronaut is another one. And it just released version 3.0. The biggest change is that Project Reactor is the new reactive framework instead of RxJava2. Or, as Oracle would say: "You swapped out the thing that will be killed by Project Loom!" (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-528"&gt;last week's issue&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;What else? Annotations aren't automatically inherited anymore, a migration away from Oracle's &lt;code&gt;javax.annoatation&lt;/code&gt; namespace, and improvements in Inversion of Control (IOC), server filters, and GraalVM support.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://micronaut.io/2021/08/18/micronaut-framework-3-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#quarkus-213"&gt;
  &lt;/a&gt;
  Quarkus 2.1.3
&lt;/h4&gt;

&lt;p&gt;Everybody's favorite "supersonic" Java framework has the fourth release in as many weeks. We're getting &lt;a href="https://github.com/quarkusio/quarkus/releases/tag/2.1.3.Final"&gt;41 changes&lt;/a&gt; this time.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://quarkus.io/blog/quarkus-2-1-3-final-released/"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#payara-ce-520216-amp-ee-5300"&gt;
  &lt;/a&gt;
  Payara CE 5.2021.6 &amp;amp; EE 5.30.0
&lt;/h4&gt;

&lt;p&gt;Payara started as the commercially supported version of Oracle's GlassFish Java EE application server back in 2014. These days, it's a Jakarta EE &amp;amp; MicroProfile application server.&lt;/p&gt;

&lt;p&gt;The monthly release brought &lt;a href="https://docs.payara.fish/community/docs/release-notes/release-notes-2021-6.html"&gt;13 changes&lt;/a&gt; to the open-source Community Edition (CE) and &lt;a href="https://docs.payara.fish/enterprise/docs/release-notes/release-notes-30-0.html"&gt;16 changes&lt;/a&gt; to the Enterprise Edition (EE). Both versions are now compatible with MicroProfile 4.1 (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-3b0"&gt;issue #48&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://blog.payara.fish/whats-new-in-the-august-2021-payara-platform-release"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h4&gt;
  &lt;a href="#spring-tools-4111"&gt;
  &lt;/a&gt;
  Spring Tools 4.11.1
&lt;/h4&gt;

&lt;p&gt;The first maintenance release drops eight weeks after version 4.11 (see &lt;a href="https://bpfnl.substack.com/p/how-to-build-java-applications-today-ff1"&gt;issue #42&lt;/a&gt;) and fixes bugs.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://spring.io/blog/2021/08/18/spring-tools-4-11-1-released"&gt;Announcement&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#about"&gt;
  &lt;/a&gt;
  About
&lt;/h2&gt;

&lt;p&gt;Karsten Silz is the author of this newsletter. He is a full-stack web &amp;amp; mobile developer with 22 years of Java experience, author, speaker, and marathon runner. Karsten got a Master's degree in Computer Science at the Dresden University of Technology (Germany) in 1996.&lt;/p&gt;

&lt;p&gt;Karsten has worked in Europe and the US. He co-founded a software start-up in the US in 2004. Karsten led product development for 13 years and left after the company was sold successfully. He co-founded the UK SaaS start-up "&lt;a href="https://yourhomeingoodhands.co.uk/"&gt;Your Home in Good Hands&lt;/a&gt;" as CTO in 2020. Since 2019, Karsten also works as a contractor in the UK.&lt;/p&gt;

&lt;p&gt;Karsten has &lt;a href="https://bpfnl.substack.com/"&gt;this newsletter&lt;/a&gt;, a &lt;a href="https://betterprojectsfaster.com/"&gt;developer website&lt;/a&gt;, and a &lt;a href="https://ksilz.com/"&gt;contractor site&lt;/a&gt;. He's on &lt;a href="https://www.linkedin.com/in/ksilz/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://twitter.com/karsilz"&gt;Twitter&lt;/a&gt;, and &lt;a href="https://github.com/ksilz"&gt;GitHub&lt;/a&gt;. Karsten is also an &lt;a href="https://www.infoq.com/profile/Karsten-Silz"&gt;author at InfoQ&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>java</category>
      <category>bpf</category>
    </item>
  </channel>
</rss>
