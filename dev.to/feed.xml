<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>1 line of code: How to shallow clone an Array</title>
      <author>martin krause</author>
      <pubDate>Sun, 24 Oct 2021 12:38:47 +0000</pubDate>
      <link>https://dev.to/martinkr/1-line-of-code-how-to-shallow-clone-an-array-38aj</link>
      <guid>https://dev.to/martinkr/1-line-of-code-how-to-shallow-clone-an-array-38aj</guid>
      <description>&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const shallowClone = arr =&amp;gt; arr.slice(0); 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creates a shallow-copied clone of the provided array. Since it's a shallow copy, nested objects or arrays will be copied by reference, not duplicated.&lt;/p&gt;




&lt;p&gt;Happy coding and consider to &lt;a href="https://www.buymeacoffee.com/martinkr"&gt;buy me a coffee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@zoo_monkey"&gt;zoo_monkey&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/fuji"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>productivity</category>
      <category>codequality</category>
    </item>
    <item>
      <title>MongoDB AND Operator ( $and ) | How to use it?</title>
      <author>Srajan Gupta</author>
      <pubDate>Sun, 24 Oct 2021 12:27:05 +0000</pubDate>
      <link>https://dev.to/srajangupta__/mongodb-and-operator-and-how-to-use-it-6df</link>
      <guid>https://dev.to/srajangupta__/mongodb-and-operator-and-how-to-use-it-6df</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Xb6Z3rdP9k8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;This tutorial is all about the AND Operator in MongoDB.&lt;br&gt;
This tutorial includes both theoretical and hands-on explanation.&lt;/p&gt;

&lt;p&gt;About Me:&lt;br&gt;
Project Enquiries: &lt;a href="https://www.srajangupta.com/"&gt;https://www.srajangupta.com/&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>A Quick 10-Second Programming Joke For Today</title>
      <author>Daily Developer Jokes</author>
      <pubDate>Sun, 24 Oct 2021 12:00:19 +0000</pubDate>
      <link>https://dev.to/dailydeveloperjokes/a-quick-10-second-programming-joke-for-today-3g2</link>
      <guid>https://dev.to/dailydeveloperjokes/a-quick-10-second-programming-joke-for-today-3g2</guid>
      <description>&lt;p&gt;Hi there! Here's today's Daily Developer Joke. We hope you enjoy it; it's a good one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XvwvlmVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e12592cb43a5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XvwvlmVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://private.xtrp.io/projects/DailyDeveloperJokes/public_image_server/images/5e12592cb43a5.png" alt="Joke Image"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;For more jokes, and to submit your own joke to get featured, check out the &lt;a href="https://dailydeveloperjokes.github.io/"&gt;Daily Developer Jokes Website&lt;/a&gt;. We're also open sourced, so feel free to view &lt;a href="https://github.com/dailydeveloperjokes"&gt;our GitHub Profile&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#leave-this-post-a-if-you-liked-todays-joke-and-stay-tuned-for-tomorrows-joke-too"&gt;
  &lt;/a&gt;
  Leave this post a ❤️ if you liked today's joke, and stay tuned for tomorrow's joke too!
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This joke comes from &lt;a href="https://github.com/wesbos/dad-jokes"&gt;Dad-Jokes GitHub Repo by Wes Bos&lt;/a&gt; (thank you!), whose owner has given me permission to use this joke with credit.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>jokes</category>
      <category>dailydeveloperjokes</category>
    </item>
    <item>
      <title>Configuring inbound rules on SES</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 24 Oct 2021 11:56:53 +0000</pubDate>
      <link>https://dev.to/aws-builders/configuring-inbound-rules-on-ses-5fci</link>
      <guid>https://dev.to/aws-builders/configuring-inbound-rules-on-ses-5fci</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/ses/"&gt;Amazon Simple Email Service (SES)&lt;/a&gt; not only addresses the use-case of &lt;em&gt;outbound emails&lt;/em&gt; to users but also have &lt;em&gt;inbound emails&lt;/em&gt; where you can receive emails from a designated recipient.&lt;/p&gt;

&lt;p&gt;To get started with SES, you can refer to my recent post.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/awscommunity-asean" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e4t9gaU4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--XXMquOAk--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3974/95700370-548c-431b-8ed5-cce70f477aed.png" alt="AWS Community ASEAN"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/awscommunity-asean/amazon-ses-and-everything-to-set-it-up-49c6" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Amazon SES and everything to set it up&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community ASEAN ・ Sep 12 ・ 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#ses&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#serverless&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#lambda&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;h4&gt;
  &lt;a href="#key-takeaways-from-the-blog"&gt;
  &lt;/a&gt;
  Key takeaways from the blog
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#inbound-rulesets"&gt;Configuring Inbound rule set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#destination-rules"&gt;Configuring action rules&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#configuring-inbound-rule-set"&gt;
  &lt;/a&gt;
  Configuring Inbound rule set &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;From the AWS console, you can navigate to SES (new console UI) and from the navigation &lt;strong&gt;Rule Sets&lt;/strong&gt; under &lt;strong&gt;Email Receiving&lt;/strong&gt;. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHllYeFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xctx04f47uvx5m54ohs7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHllYeFt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xctx04f47uvx5m54ohs7.png" alt="New console"&gt;&lt;/a&gt;&lt;br&gt;
You can click on the &lt;strong&gt;Create rule set&lt;/strong&gt; button to enter a rule set name and create a new rule set.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FySVjF_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qaorknb00vb2mdah64za.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FySVjF_3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qaorknb00vb2mdah64za.png" alt="Create rule set"&gt;&lt;/a&gt;&lt;br&gt;
Once the rule set is created, the console displays the details of the newly created &lt;em&gt;rule set&lt;/em&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---kiAJXN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hv8g9a8217pd1gn6tyq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---kiAJXN6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5hv8g9a8217pd1gn6tyq.png" alt="Created rule set"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#configuring-action-rules"&gt;
  &lt;/a&gt;
  Configuring action rules &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;For a rule set, we can have multiple recipients with multiple destination actions configured i.e. you can have a rule set that &lt;em&gt;receives all the emails from an email recipient &lt;code&gt;reach@zachjonesnoel.com&lt;/code&gt; and on receiving the email SES can invoke an Lambda function so that the further processing can be done&lt;/em&gt;.&lt;br&gt;
To create the above rule, click the &lt;strong&gt;Create rule&lt;/strong&gt; button and the console takes you through a 4 step process to create a new rule.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-1-define-rule-settings"&gt;
  &lt;/a&gt;
  Step 1 : Define rule settings
&lt;/h5&gt;

&lt;p&gt;You can define certain rule settings such as name and to enable/disable the rule and also security settings to enable - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Transport Layer Security (TLS)&lt;/em&gt; which defines if to accept or drop the incoming email messages if the email aren't sent over a secure connection. &lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Spam and virus scanning&lt;/em&gt; which enables scanning the incoming email message with spam check and virus scanning if the email is found to be malicious, the email is dropped.
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BLWA3cQ9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ey1jxurzhzd7stisd1np.png" alt="Define rule settings"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#step-2-add-recipient-conditions"&gt;
  &lt;/a&gt;
  Step 2 : Add recipient conditions
&lt;/h5&gt;

&lt;p&gt;As mentioned earlier, we can have multiple recipients and this configuration can be done in this step. &lt;br&gt;
Note : The recipient have to belong to the domain owned by the same AWS account i.e the domain has to be verified on SES. To verify your domain, you can refer to the details from my &lt;a href="https://dev.to/awscommunity-asean/amazon-ses-and-everything-to-set-it-up-49c6#domain-verification"&gt;previous post&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HxLea-oQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a44ai03j1vn4ifj509sq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HxLea-oQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a44ai03j1vn4ifj509sq.png" alt="Add recipient conditions"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Different types of recipients supported on SES.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Supported type&lt;/th&gt;
&lt;th&gt;Wildcard&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;All email identities of the verified domains in the AWS account (default)&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Specify email identity&lt;/td&gt;
&lt;td&gt;user@verified-domain&lt;/td&gt;
&lt;td&gt;&lt;code&gt;reach@demo.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All mails of a domain except sub-domains&lt;/td&gt;
&lt;td&gt;&lt;code&gt;verified-domain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;demo.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All mails of a specific sub-domain only&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sub-domain.verified-domain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mails.demo.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;All mails of a all sub-domains&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.verified-domain&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;.demo.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h5&gt;
  &lt;a href="#step-3-add-actions"&gt;
  &lt;/a&gt;
  Step 3 : Add actions
&lt;/h5&gt;

&lt;p&gt;For a rule, we can have multiple actions which are configured. The supported types of actions are - &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Add header&lt;/em&gt; 
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q9TwJBUp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zyrdw4fxgr4o2h664gtc.png" alt="Add header"&gt;
Whenever the email is received, it adds a custom header to the email.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Bounce response&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--43fx_Tll--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v65p7znfdpihoym2f3tl.png" alt="Bounce response"&gt;
If the email has to be rejected, this action performs it by bouncing the email.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;AWS Lambda function invocation&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZaCXfw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dkbg767w5688r4o1nmzi.png" alt="AWS Lambda function invocation"&gt;
Whenever the email is received, it can invoke a Lambda function which can do the further processing.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Publish to SNS topic&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d13Xlq3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/poua4cl0v7odbf76zl95.png" alt="Publish to SNS topic"&gt;
The received email either with &lt;code&gt;base64&lt;/code&gt; or &lt;code&gt;utf-8&lt;/code&gt; encoding can publish the email the message to a SNS topic and all the subscribers of that topic would receive the email.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Upload the email to S3 bucket&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fKUmzBiw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t88awyy5oq7cxirdmojn.png" alt="Upload the email to S3 bucket"&gt;
The email content can be uploaded into a designated S3 bucket.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Integration with Amazon WorkMail&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVoTWDeK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6854gzxp6pt25evtzzmw.png" alt="Integration with Amazon WorkMail"&gt;
&lt;a href="https://aws.amazon.com/workmail/"&gt;Amazon WorkMail&lt;/a&gt; has integration with SES to receive all the emails and from WorkMail app, you could access the emails.&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Stop rule set&lt;/em&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--90iDSt6p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3wpp0aoq7t1zenndzd4s.png" alt="Stop rule set"&gt;
This terminates the SES rule.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#step-4-review"&gt;
  &lt;/a&gt;
  Step 4 : Review
&lt;/h5&gt;

&lt;p&gt;You can review the configurations and create the rule.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#pricing"&gt;
  &lt;/a&gt;
  Pricing
&lt;/h4&gt;

&lt;p&gt;The blog post explains about incoming messages and the pricing from &lt;a href="https://aws.amazon.com/ses/pricing/"&gt;SES pricing&lt;/a&gt; for incoming emails is as explained - &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An incoming mail chunk is 256 kilobytes (KB) of incoming data, including headers, message content (text and images), and attachments. When you use Amazon SES to receive email, you pay $0.09 for every 1,000 incoming mail chunks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Additionally, the action which uses other AWS services costs with it's respective pricing.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h4&gt;

&lt;p&gt;SES a managed service from AWS makes it easier for application developers to integrate as per their business logic. The inbound rules helps addressing use-cases which requires receiving emails and processing from the email content. &lt;/p&gt;

</description>
      <category>aws</category>
      <category>ses</category>
      <category>emails</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Day 16 of 100 Days of Code &amp; Scrum: Plan of Counterattack for the Next.js Week</title>
      <author>Rammina</author>
      <pubDate>Sun, 24 Oct 2021 11:47:14 +0000</pubDate>
      <link>https://dev.to/rammina/day-16-of-100-days-of-code-scrum-plan-of-counterattack-for-the-nextjs-week-56kd</link>
      <guid>https://dev.to/rammina/day-16-of-100-days-of-code-scrum-plan-of-counterattack-for-the-nextjs-week-56kd</guid>
      <description>&lt;p&gt;Happy Sunday, everyone!&lt;/p&gt;

&lt;p&gt;I kickstarted my week by getting my new user story article finished. I'm going to do proofreading on it tomorrow, as I'm way too sleepy now. Also, I worked on creating my banner with my editor. I'm going for a milk tea color palette/theme, it's still a work in progress.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yesterday"&gt;
  &lt;/a&gt;
  Yesterday
&lt;/h2&gt;

&lt;p&gt;I did my Weekly Sprint Review and Retrospective, in which I went over what I've managed to do well, what my shortcomings were, and what I could do better in the future. It most likely was my worst week so far.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;Since it's the start of a new week, I planned out what I should be doing and established my new &lt;code&gt;Sprint Goals&lt;/code&gt;. My focus for this week will still be &lt;strong&gt;Scrum&lt;/strong&gt;, to prepare for my PSM I exam and the upcoming &lt;a href="https://chingu.io/"&gt;Chingu&lt;/a&gt; voyage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#weekly-sprint-goals"&gt;
  &lt;/a&gt;
  Weekly Sprint Goals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;focus on diving deeper into &lt;strong&gt;Scrum&lt;/strong&gt; principles&lt;/li&gt;
&lt;li&gt;study for Professional Scrum Master I (PSM I) certification&lt;/li&gt;
&lt;li&gt;finish my guides about Scrum&lt;/li&gt;
&lt;li&gt;continue networking&lt;/li&gt;
&lt;li&gt;if I have extra time, learn about Next.js to prepare for coding my business website&lt;/li&gt;
&lt;li&gt;no interviews&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5wNGwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyi1ip2bzgnxx6zfbr8m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5wNGwSz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wyi1ip2bzgnxx6zfbr8m.png" alt="Thank You Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you to everyone who supported me and interacted with me during the past weeks! I hope we can make a lot of progress this week.&lt;/p&gt;

&lt;p&gt;I hope everyone's enjoying their weekend!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesrecommended-readings"&gt;
  &lt;/a&gt;
  Resources/Recommended Readings
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://scrumguides.org/scrum-guide.html"&gt;The 2020 Scrum Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mlapshin.com/index.php/scrum-quizzes/"&gt;Mikhail Lapshin's Scrum Quizzes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  DISCLAIMER
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;This is not a guide&lt;/strong&gt;, it is just me sharing my experiences and learnings. This post only expresses my thoughts and opinions (based on my limited knowledge) and is in no way a substitute for actual references. If I ever make a mistake or if you disagree, I would appreciate corrections in the comments!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>beginners</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
    <item>
      <title>9 Months Are Enough : Job Placement </title>
      <author>Keshav</author>
      <pubDate>Sun, 24 Oct 2021 11:36:55 +0000</pubDate>
      <link>https://dev.to/keshav44483499/9-months-are-enough-job-placement-3d56</link>
      <guid>https://dev.to/keshav44483499/9-months-are-enough-job-placement-3d56</guid>
      <description>&lt;h2&gt;
  &lt;a href="#phase-1-month-04%E2%80%8B%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 1 | Month 0-4​​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Let's get started with programming and master data structure&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn the essentials of programming along with writing optimised code in terms of time &amp;amp; space, recursion and OOPS concepts using Java&lt;/p&gt;

&lt;p&gt;Get familiar with most common ways of organising your data using LL, Stacks, Queues, Trees, BST and Hashmaps&lt;/p&gt;

&lt;p&gt;Learn to store and access complicated real world data more efficiently with the help of Priority Queues, Tries, Graphs and Dynamic Programming&lt;/p&gt;

&lt;p&gt;Solve 350+ coding problems | Ready to crack any DS &amp;amp; algo interview round.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-2-month-56%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 2 | Month 5-6​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Let's build Some Amazing Responsive Websites&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn key technologies for creating interactive and stunning Websites – HTML, CSS, JavaScript, JQuery &amp;amp; Ajax&lt;/p&gt;

&lt;p&gt;Work on some really cool projects from starting to deployment involving Music Player, Calculator, some games etc&lt;/p&gt;

&lt;p&gt;Practice some Mock interviews and contact seniors for discussions &amp;amp; problem solving&lt;/p&gt;

&lt;p&gt;Become Front End Developer | 4 Projects Completed | 1 Live Project with deployement&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-3-month-78%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 3 | Month 7-8​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Write scalable backend servers using Nodejs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn to create your own servers, use database to store data, build APIs and deploy your apps for the world to use using NodeJs&lt;br&gt;
Create some end to end usable projects such as Todo List, Social Media Website, Habit Tracker, Expense Manager etc&lt;/p&gt;

&lt;p&gt;Practice some Mock interviews and contact seniors for discussions &amp;amp; problem solving&lt;/p&gt;

&lt;p&gt;Become Full Stack Developer | 4 Projects Completed | 1 Live Project with deployment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-4-month-9%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 4 | Month 9​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Learn another amazing library for frontend, React&lt;/code&gt;&lt;br&gt;
Take your JS skills to next level with React, Redux, Context API, React Router and React Hooks. Work on some amazing projects&lt;/p&gt;

&lt;p&gt;Practice some Mock interviews and contact seniors for discussions &amp;amp; problem solving&lt;/p&gt;

&lt;p&gt;Become master of Front End | 1 Live Project with Deployment&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-5-month-9-onwards%E2%80%8B"&gt;
  &lt;/a&gt;
  Phase 5 | Month 9 onwards​
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Grab additional skills and gear up for placements&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Learn to build scalable and robust systems using System Design concepts&lt;/p&gt;

&lt;p&gt;Learn the pre-requisites for clearing any tech interview, aptitude, Operating Systems, DBMS and SQL&lt;/p&gt;

&lt;p&gt;Create an impressive resume through multiple personal review sessions and prepare for HR and non-tech rounds through and take your soft skills to next level&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#now-you-are-ready-to-land-your-dream-job"&gt;
  &lt;/a&gt;
  Now You are Ready to Land your dream job 😊
&lt;/h3&gt;

&lt;h6&gt;
  &lt;a href="#follow-me-if-possible-github-link"&gt;
  &lt;/a&gt;
  Follow Me : &lt;a href="https://github.com/keshavgbpecdelhi"&gt;If possible&lt;/a&gt; (Github Link)
&lt;/h6&gt;

</description>
      <category>beginners</category>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>python</category>
    </item>
    <item>
      <title>Tailwind isn't the answer</title>
      <author>Madi Ostoja</author>
      <pubDate>Sun, 24 Oct 2021 11:33:40 +0000</pubDate>
      <link>https://dev.to/madeleineostoja/tailwind-isnt-the-answer-2opj</link>
      <guid>https://dev.to/madeleineostoja/tailwind-isnt-the-answer-2opj</guid>
      <description>&lt;p&gt;&lt;a href="https://tailwindcss.com"&gt;Tailwind CSS&lt;/a&gt; has taken the frontend development world by storm over the last few years. A utility-first library of CSS classes, it promises a new way of styling that's more consistent, maintainable, and faster than writing CSS directly. And for the most part, it delivers on that promise. &lt;/p&gt;

&lt;p&gt;By using Tailwind you're almost guaranteed a single source of truth for all the values you use throughout a project. From typesets to spacing to colours, everything is defined in a single place. Which means that your code stays consistent and you aren't making things up as you go.&lt;/p&gt;

&lt;p&gt;This was Tailwind's biggest idea, and the greatest benefit of utility-first CSS as a concept: compose don't create. &lt;/p&gt;

&lt;p&gt;Tailwind achieves this with an extensive library of CSS classes to style &lt;em&gt;everything&lt;/em&gt;. The idea being that you no longer write any CSS of your own, you compose predefined classes like lego pieces for every single property. &lt;/p&gt;

&lt;p&gt;Developers new to this way of working often have a knee-jerk reaction just from looking at example code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 Button
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There's no denying that Tailwind is hideous. Its creator acknowledges as much right on the project home page. But that's just pedantry, and if the Tailwind way of doing things really was the panacea to all our problems then it would be a very small price to pay.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The Problem
&lt;/h2&gt;

&lt;p&gt;The problem with this approach isn't that its ugly, or bloated (Tailwind &lt;a href="https://tailwindcss.com/docs/optimizing-for-production"&gt;purges&lt;/a&gt; unused classes), or that "you might as well write inline styles" (you shouldn't). It's that in order to apply a consistent set of values with classes, you also have to create classes for &lt;em&gt;every&lt;/em&gt; conceivable  set of rule:value pairs in CSS, even where it adds no value at all. So you end up using classes like &lt;code&gt;.block&lt;/code&gt; rather than writing &lt;code&gt;display: block&lt;/code&gt; and &lt;code&gt;.text-center&lt;/code&gt; rather than &lt;code&gt;text-align: center&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Of course you can mix Tailwind's more useful classes with regular CSS. But then you're breaking the Tailwind style-by-classes abstraction, and you have to maintain two seperate styling touchpoints for every element.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"So what?"&lt;/em&gt; you might ask, what's wrong with just using those classes rather than CSS? It certainly saves some keystrokes. Here is where Tailwind introduces new problems it shouldn't have to solve in the first place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reinventing-css"&gt;
  &lt;/a&gt;
  Reinventing CSS
&lt;/h3&gt;

&lt;p&gt;Tailwind has to reinvent everything regular CSS can already do. Media queries, pseudo elements, selectors, and states. All of it now has to fit into the classes-only paradigm. &lt;/p&gt;

&lt;p&gt;Tailwind achieves this with what it calls modifiers. By prepending Tailwind classes with &lt;code&gt;md:&lt;/code&gt; they will only apply above the &lt;code&gt;md&lt;/code&gt; breakpoint. By appending &lt;code&gt;hover:&lt;/code&gt; a class will be applied in a &lt;code&gt;:hover&lt;/code&gt; state. And so on. &lt;/p&gt;

&lt;p&gt;Each of these tools is a poor facsimile of the functionality gaps it has to fill. Want an &lt;code&gt;:nth-child&lt;/code&gt; or &lt;code&gt;~&lt;/code&gt; sibling selector? Back to CSS. Want to target the devices between two breakpoints? Back to CSS. Want to target children of an element? Back to CSS. You get the picture. &lt;/p&gt;

&lt;p&gt;Of course you &lt;em&gt;can&lt;/em&gt; go back to CSS to do any of these things. Lovingly coined "bailwind", almost every project will need at least a little custom CSS when Taiwind's classes and modifiers just don't cut it. But then you're back at breaking the Tailwind abstraction, and giving yourself maintenance headaches.&lt;/p&gt;

&lt;p&gt;And if this is already a given, then why use pointless classes like &lt;code&gt;block&lt;/code&gt; when it adds no consistency or maintainability value over writing &lt;code&gt;display: block&lt;/code&gt; in CSS, other than a few saved keystrokes? Because while gap-filling classes like this don't add value, they &lt;em&gt;do&lt;/em&gt; add a new Domain Specific Language (DSL) to learn on top of the CSS we all already know.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#class-soup"&gt;
  &lt;/a&gt;
  Class soup
&lt;/h3&gt;

&lt;p&gt;The thing every critic of Tailwind yells at first, its enormous class strings. Yes, they're ugly, but who cares. The problem isn't a surface-level developer perfectionism one. It again comes back to modifiers. &lt;/p&gt;

&lt;p&gt;Every rule that applies to a modified state needs its own class with its own modifier. Unlike in CSS where these states and pseudo elements are naturally organised into logical blocks, Tailwind's modified classes can very quickly become a huge, difficult to maintain mess that has to be carefully teased apart line by line.&lt;/p&gt;

&lt;p&gt;Take a contrived example of the button we had in the intro of this article, with an icon of some sort added to a &lt;code&gt;::before&lt;/code&gt; pseudo element, and less-than-ideal attention given to class ordering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"relative before:absolute bg-blue-500 hover:bg-blue-700 text-white before:left-2 font-bold before:text-sm py-2 px-6 rounded  before:top-1/2 before:content-['\f00c']  before:-translate-y-1/2"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Button with icon
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Of course in this particular example the icon would be better placed as a real element inside the button, but the point stands. Without (and even with) careful ordering of classes, these jumbles very quickly become a maintenance nightmare. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jit-to-the-rescue"&gt;
  &lt;/a&gt;
  JIT to the rescue?
&lt;/h3&gt;

&lt;p&gt;Tailwind's new &lt;a href="https://tailwindcss.com/docs/just-in-time-mode"&gt;Just In Time mode&lt;/a&gt; compiles just the classes you use on the fly, rather than pruning back a goliathan stylesheet after the fact. It allows you to use modifiers everywhere out of the box, and most importantly write arbitrary values right in Tailwind classes, like &lt;code&gt;margin-[100px]&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;This is another language feature that was added to Tailwind's style-by-classes DSL in order to fix problems it introduced itself. And while arbitrary values mean you don't have to break out of Tailwind's paradigm as often, they also diminish the core value that Tailwind provides — a single source of truth for a whole project. Taken to its logical extreme Tailwind JIT is really just reinventing CSS, bit by bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The Solution
&lt;/h2&gt;

&lt;p&gt;As I said at the very beginning, Tailwinds' central idea is a very good one — a low-level, utility-driven design system to get rid of magic numbers and bring consistency to your CSS. The problem was the implementation.&lt;/p&gt;

&lt;p&gt;Thankfully CSS now has the same solution as every other language to consistent values: variables. CSS variables, or more properly &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/--*"&gt;CSS custom properties&lt;/a&gt;, are fairly new to the language but already adopted by every major browser, and used extensively in Tailwind's own internals.&lt;/p&gt;

&lt;p&gt;For example, Tailwind's &lt;code&gt;.p-4&lt;/code&gt; padding utility could be rewritten like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="py"&gt;--p-4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--p-4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since we no longer have to write separate classes for every rule:value pair, we can greatly simplify our utility-first design system. We could have one set of size variables that can be applied to any part of padding, margin, width, height, position, etc. Without needing separate utilities for every combination of every property.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="py"&gt;--size-2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;--size-4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size-2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size-4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;--size-4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And since variables are part of the platform, they have a native runtime. We can interact with CSS variables using Javascript, and update them dynamically. This makes things like reskinning a whole interface for dark mode possible with just a couple lines of code, without introducing any new utilities or tools.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;enableDarkMode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`--color-background`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`black`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`--color-text`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`white`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So why don't we, instead of reinventing the styling paradigm altogether, just abstract all the values in an interface into a single source of truth by putting them in CSS variables that can be used &lt;em&gt;anywhere&lt;/em&gt;, with real CSS, without all these new problems?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introducing-pollen"&gt;
  &lt;/a&gt;
  Introducing Pollen
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.pollen.style"&gt;Pollen&lt;/a&gt; is a new CSS library that does exactly that. Inspired by Tailwind, it takes its best ideas and implements them as a micro-library of CSS variables. With a 1kb core that can be used anywhere, without a buildstep or class naming conventions, it gives us all of the biggest benefits of Tailwind without reinventing how we write CSS.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/madeleineostoja/embed/LYjGjGa?height=600&amp;amp;default-tab=css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Write CSS however you want, with regular pseudo selectors, media queries, and all the rest, and abstract out every value choice into a single source of truth. &lt;/p&gt;

&lt;p&gt;Extend it into your own design system with plain old CSS. Modify it on the fly with JavaScript without any runtime library. Make it responsive without new concepts or tools.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-you-might-not-even-need-it"&gt;
  &lt;/a&gt;
  But you might not even need it
&lt;/h3&gt;

&lt;p&gt;Full disclosure: I created Pollen. But I'm not trying to sell you on using it. I'm trying to sell you on the ideas behind it. If you already have a solid design system with sizes, typesets, colours, and all the other shared values of an interface defined, then you don't need Pollen, and you certainly don't need Tailwind. Write them as CSS variables in one place, and use them everywhere. That's the way out of this insanity. &lt;/p&gt;

&lt;p&gt;Bring consistency to CSS by getting rid of magic numbers with variables. The other problems of CSS (deep composition, leaky inheritance, performance optimisation) aren't solved by Tailwind, but they are made harder by the new DSL it tries to introduce. At least by sticking to regular CSS you have all the other patterns and tools we as a community have been working on for the last decade at your disposal, without any gotchas.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Apply CSS Box Shadow the right way + FREE Resources 🚀</title>
      <author>David Asaolu</author>
      <pubDate>Sun, 24 Oct 2021 10:58:45 +0000</pubDate>
      <link>https://dev.to/arshadayvid/apply-css-box-shadow-the-right-way-free-resources-1eaj</link>
      <guid>https://dev.to/arshadayvid/apply-css-box-shadow-the-right-way-free-resources-1eaj</guid>
      <description>&lt;p&gt;Hello my wonderful friend, welcome to this tutorial!&lt;br&gt;
Today, I'll be explaining CSS Box Shadow and I will also be sharing different cool resources that will help you add box shadow to elements on your website in no time!&lt;/p&gt;

&lt;p&gt;Stick with me till the end! 🍻&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/11sBLVxNs7v6WA/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/11sBLVxNs7v6WA/giphy.gif" alt="CSS Box Shadow Tutorial"&gt;&lt;/a&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-exactly-is-box-shadow"&gt;
  &lt;/a&gt;
  What exactly is Box Shadow?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow"&gt;Box-shadow&lt;/a&gt; is a CSS property that adds shadow effects around an element's frame, and you can set multiple effects separated by commas.&lt;/p&gt;

&lt;p&gt;Here is the syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;box-shadow: [optional inset] [horizontal offset] [vertical offset] [blur radius] [optional spread radius] [color];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Box Shadow takes all other measurement types except for percentages %&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#what-exactly-do-each-of-these-box-shadow-effects-mean"&gt;
  &lt;/a&gt;
  What exactly do each of these box shadow effects mean?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-inset"&gt;
  &lt;/a&gt;
  1. Inset:
&lt;/h3&gt;

&lt;p&gt;This is an optional keyword. The presence of the inset keyword changes the shadow direction to be inside the frame, instead of its default outward appearance.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HkCZrlMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a74o9l3el49o59s5xa9j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HkCZrlMu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a74o9l3el49o59s5xa9j.png" alt="CSS Box Shadow - Inset Box Shadow Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-horizontal-offset"&gt;
  &lt;/a&gt;
  2. Horizontal Offset:
&lt;/h3&gt;

&lt;p&gt;This represents the shadow on the right of the element. When it is positive, it means the shadow will be on the right of the box, while a negative value will put the shadow on the left of the box. It is compulsory. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The image below shows the effect of the horizontal offset (30px) and the inset property. &lt;br&gt;
Notice that the inset property changes the direction of the box-shadow just like the negative horizontal offset.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gvksPFD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82vo04np0re64zxuhxwt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gvksPFD_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82vo04np0re64zxuhxwt.png" alt="CSS Box Shadow - Horizontal Offset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-vertical-offset"&gt;
  &lt;/a&gt;
  3. Vertical Offset:
&lt;/h3&gt;

&lt;p&gt;This represents the shadow at the bottom of the element. When it is positive, it means the shadow will be at the bottom, while a negative value will put the shadow on top of the box. It is also a compulsory value.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Here is an another example similar to Horizontal offset&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wtYGmbIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qb7dlq2xa1nlu18ejqo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wtYGmbIy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9qb7dlq2xa1nlu18ejqo.png" alt="CSS Box Shadow - Vertical Offset"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-blur-radius"&gt;
  &lt;/a&gt;
  4. Blur Radius:
&lt;/h3&gt;

&lt;p&gt;This adds some opacity to the color of the shadow. The default value is zero. If set to 0 or not specified, the shadow will be sharp. The higher the number or value, the more blurred it will be. It is optional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xd5KicZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7phbqr01qvizwcfeysgp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xd5KicZp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7phbqr01qvizwcfeysgp.png" alt="CSS Box Shadow - Blur Radius"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-spread-radius"&gt;
  &lt;/a&gt;
  5. Spread Radius:
&lt;/h3&gt;

&lt;p&gt;This determines the size of the shadow. The larger the value, the larger the shadow. Also, where its length ends is where the blur begins. Positive values increase the size of the shadow, negative values decrease the size. Its default value is 0 (same size as blur radius).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jxX_Ex1S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wfw4sphewy4lk9n7xlv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jxX_Ex1S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0wfw4sphewy4lk9n7xlv.png" alt="CSS Box Shadow - Spread Radius"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's check out some use cases of CSS Box Shadow&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#interesting-box-shadow-examples-on-codepen"&gt;
  &lt;/a&gt;
  Interesting Box Shadow Examples on Codepen 🚀
&lt;/h2&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/Robinskie/embed/LYjYgzB?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/bsmith/embed/bfqJc?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sdthornton/embed/wBZdXq?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/kosta-labial/embed/VwbNVxp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/haibnu/embed/FxGsI?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/ovdojoey/embed/BomKyZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/gillytech/embed/dlbsx?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/olam/embed/zcqea?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TLJens/embed/RPWBvY?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#free-resources-to-get-up-amp-running-with-css-box-shadow"&gt;
  &lt;/a&gt;
  💯 FREE Resources to get Up &amp;amp; Running with CSS Box Shadow 🚀
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://neumorphism.io/#e0e0e0"&gt;Neumorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt; &lt;a href="https://cssgenerator.org/box-shadow-css-generator.html"&gt;Box Shadow CSS Generator&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://box-shadow.dev/"&gt;Box Shadow&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thank you for reading till the end.&lt;/p&gt;

&lt;p&gt;Feel free to follow for more interesting and educative posts and  also Connect with me on&lt;br&gt;
🚀 &lt;a href="https://www.linkedin.com/in/david-asaolu234/"&gt;Linkedin&lt;/a&gt;&lt;br&gt;
🚀 &lt;a href="https://twitter.com/Arshadayvid"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/osjgQPWRx3cac/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/osjgQPWRx3cac/giphy.gif" alt="CSS Box Shadow Giphy"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Building Tailwind CSS checkbox and radio input fields</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Sun, 24 Oct 2021 10:38:29 +0000</pubDate>
      <link>https://dev.to/themesberg/building-tailwind-css-checkbox-and-radio-input-fields-2alg</link>
      <guid>https://dev.to/themesberg/building-tailwind-css-checkbox-and-radio-input-fields-2alg</guid>
      <description>&lt;p&gt;Ever since I've been using Tailwind CSS it has completely changed my way of building user interfaces and as things stand right now, I can't imagine going back to an OOCSS framework, such as Bootstrap. It's just faster.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLhIkLGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4dkspfv7izwxlhza4go.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLhIkLGQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j4dkspfv7izwxlhza4go.png" alt="Tailwind CSS checkbox and radio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One disadvantage that I have encountered, however, is that there are no components to get started with right away. I know that Tailwind CSS is supposed to be a utility-first framework, but that doesn't mean a couple of commonly used web components, such as buttons, dropdowns, forms wouldn't be helpful.&lt;/p&gt;

&lt;p&gt;That is why I have started a Tailwind CSS components tutorial series here at the DEV community. Last time I showed you how to build a &lt;a href="https://dev.to/themesberg/building-tailwind-css-form-and-input-components-2ang"&gt;form with input fields with Tailwind CSS&lt;/a&gt; and today I will show you how to build checkbox and radio input elements.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-checkbox"&gt;
  &lt;/a&gt;
  Tailwind CSS checkbox
&lt;/h2&gt;

&lt;p&gt;First things first, let's build the HTML markup for the checkbox fields.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
      &amp;lt;input id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I've added an extra &lt;code&gt;div&lt;/code&gt; element so that we can wrap the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;Let's now add some styles to the checkbox element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
      &amp;lt;input class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Pretty cool. You can of course decide whether you want to use blue or another color.&lt;/p&gt;

&lt;p&gt;Now let's also add some style to the &lt;code&gt;label&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div&amp;gt;
      &amp;lt;input class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label class="text-sm ml-3 font-medium text-gray-900" for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, we should also add some style to the wrapper &lt;code&gt;div&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="flex items-start items-center"&amp;gt;
      &amp;lt;input class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" id="flowbite" aria-describedby="flowbite" type="checkbox"&amp;gt;
      &amp;lt;label class="text-sm ml-3 font-medium text-gray-900" for="flowbite"&amp;gt;I love how Flowbite works&amp;lt;/label&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome! You've created a checkbox element using Tailwind CSS.&lt;/p&gt;

&lt;p&gt;Here's an example of a fieldset with multiple checkbox elements that you can use:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
&amp;lt;fieldset&amp;gt;
&amp;lt;legend class="sr-only"&amp;gt;Checkbox variants&amp;lt;/legend&amp;gt;

  &amp;lt;div class="flex items-center items-start mb-4"&amp;gt;
      &amp;lt;input id="checkbox-1" aria-describedby="checkbox-1" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" checked=""&amp;gt;
      &amp;lt;label for="checkbox-1" class="text-sm ml-3 font-medium text-gray-900"&amp;gt;I agree to the &amp;lt;a href="#" class="text-blue-600 hover:underline"&amp;gt;terms and conditions&amp;lt;/a&amp;gt;&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start items-center mb-4"&amp;gt;
      &amp;lt;input id="checkbox-2" aria-describedby="checkbox-2" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded"&amp;gt;
      &amp;lt;label for="checkbox-2" class="text-sm ml-3 font-medium text-gray-900"&amp;gt;I want to get promotional offers&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start items-center mb-4"&amp;gt;
      &amp;lt;input id="checkbox-3" aria-describedby="checkbox-3" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded"&amp;gt;
      &amp;lt;label for="checkbox-3" class="text-sm ml-3 font-medium text-gray-900"&amp;gt;I am 18 years or older&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start mb-4"&amp;gt;
    &amp;lt;div class="flex items-center h-5"&amp;gt;
      &amp;lt;input id="shipping-2" aria-describedby="shipping-2" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded"&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div class="text-sm ml-3"&amp;gt;
      &amp;lt;label for="shipping-2" class="font-medium text-gray-900"&amp;gt;Free shipping via Flowbite&amp;lt;/label&amp;gt;
      &amp;lt;div class="text-gray-500"&amp;gt;&amp;lt;span class="font-normal text-xs"&amp;gt;For orders shipped from Flowbite from &amp;lt;span class="font-medium"&amp;gt;€ 25&amp;lt;/span&amp;gt; in books or &amp;lt;span&amp;gt;€ 29&amp;lt;/span&amp;gt; on other categories&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-start items-center"&amp;gt;
      &amp;lt;input id="international-shipping-disabled" aria-describedby="international-shipping-disabled" type="checkbox" class="bg-gray-50 border-gray-300 focus:ring-3 focus:ring-blue-300 h-4 w-4 rounded" disabled=""&amp;gt;
      &amp;lt;label for="international-shipping-disabled" class="text-sm ml-3 font-medium text-gray-400"&amp;gt;Eligible for international shipping (disabled)&amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm8Q08zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k32nmodnm4dfefqogho1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Bm8Q08zj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k32nmodnm4dfefqogho1.png" alt="Tailwind CSS checkbox"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-radio"&gt;
  &lt;/a&gt;
  Tailwind CSS radio
&lt;/h2&gt;

&lt;p&gt;The next element that we will build is very similar to the first one, but this time it's going to be a radio type.&lt;/p&gt;

&lt;p&gt;A radio input field is different from a checkbox one because when put together with other radio inputs in the same form you can only select one option, whereas with the checkbox elements you can choose as many as you want.&lt;/p&gt;

&lt;p&gt;Here's a fieldset of radio inputs that you can use in terms of styling:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;fieldset&amp;gt;
  &amp;lt;legend class="sr-only"&amp;gt;
    Countries
  &amp;lt;/legend&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-1" type="radio" name="countries" value="USA" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-1" aria-describedby="country-option-1" checked&amp;gt;
    &amp;lt;label for="country-option-1" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      United States
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-2" type="radio" name="countries" value="Germany" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-2" aria-describedby="country-option-2"&amp;gt;
    &amp;lt;label for="country-option-2" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      Germany
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-3" type="radio" name="countries" value="Spain" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-3" aria-describedby="country-option-3"&amp;gt;
    &amp;lt;label for="country-option-3" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      Spain
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center mb-4"&amp;gt;
    &amp;lt;input id="country-option-4" type="radio" name="countries" value="United Kingdom" class="h-4 w-4 border-gray-300 focus:ring-2 focus:ring-blue-300" aria-labelledby="country-option-4" aria-describedby="country-option-4"&amp;gt;
    &amp;lt;label for="country-option-4" class="text-sm font-medium text-gray-900 ml-2 block"&amp;gt;
      United Kingdom
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;div class="flex items-center"&amp;gt;
    &amp;lt;input id="option-disabled" type="radio" name="countries" value="China" class="h-4 w-4 border-gray-200 focus:ring-2 focus:ring-blue-300" aria-labelledby="option-disabled" aria-describedby="option-disabled" disabled&amp;gt;
    &amp;lt;label for="option-disabled" class="text-sm font-medium text-gray-400 ml-2 block"&amp;gt;
      China (disabled)
    &amp;lt;/label&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/fieldset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The final result should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h7lrrg14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfrub57pyqu7rml7padu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h7lrrg14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hfrub57pyqu7rml7padu.png" alt="Tailwind CSS radio"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;I hope that this tutorial helps you with your web dev journey and your project. Allow me to inform you that these &lt;a href="https://flowbite.com/docs/components/forms/#checkbox"&gt;Tailwind CSS checkbox&lt;/a&gt; and &lt;a href="https://flowbite.com/docs/components/forms/#radio"&gt;Tailwind CSS radio&lt;/a&gt; components are part of a larger and open-source &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;Tailwind CSS component library&lt;/a&gt; called Flowbite.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0komIXdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8clb9q846irlr4s7p3oh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0komIXdo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8clb9q846irlr4s7p3oh.png" alt="Tailwind CSS component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to check it out as it includes hundreds of components using the utility-first classes from Tailwind CSS. You can also choose to clone it from the &lt;a href="https://github.com/themesberg/flowbite"&gt;official Github Repository&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>tutorial</category>
      <category>webdev</category>
      <category>opensource</category>
    </item>
    <item>
      <title>Creational Design Patterns In C#</title>
      <author>Bardia Mostafavi</author>
      <pubDate>Sun, 24 Oct 2021 10:37:09 +0000</pubDate>
      <link>https://dev.to/mstbardia/creational-design-patterns-in-c-10c6</link>
      <guid>https://dev.to/mstbardia/creational-design-patterns-in-c-10c6</guid>
      <description>&lt;p&gt;&lt;strong&gt;What is a Design Pattern !?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a simple word , Design Pattern is a standard solution for handling specific situation. thus you can use it to save your time so do not have to reinvent the wheel, and most important of that you use it because this is standard and optimum solution and approved by all other real programmers. just what you need is to check the situation and pick a best and relevant design pattern and adjust it for using in your code. but keep in mind do not use them everywhere, sometime simple code do the work better and no need for overusing of Design Patterns.&lt;/p&gt;

&lt;p&gt;Basically, there are three main categories in Design Patterns :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Creational&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Structural&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Behavioral&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Creational Design&lt;/strong&gt; Patterns are mainly focused on creation of objects. So for example they can make creation of big object easy and reusable. there are five different patterns exist in Creational category with different usage :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Abstract Factory&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Factory Method&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Builder&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Prototype&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Singleton&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Abstract Factory&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This pattern use for creating of families of related objects so we have interface or abstract class as factory which have multiple methods that usually return related type.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;First make some related type :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ITechCompany&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ICarCompany&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//family #1&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Asus&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ITechCompany&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am detail of asus company"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Dell&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ITechCompany&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am detail of dell company"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//family #2&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Benz&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICarCompany&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am detail of Benz company"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Audi&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICarCompany&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"i am detail of Audi company"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Second implement of the Pattern :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ICompanyFactory&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ITechCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;ICarCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateCarCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CompanyFactoryA&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICompanyFactory&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ITechCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Asus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ICarCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateCarCompany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Benz&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CompanyFactoryB&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ICompanyFactory&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ITechCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dell&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ICarCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateCarCompany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Audi&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AbstractFactoryExample&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CompanyFactoryA&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;carA&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateCarCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;techA&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;carA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
            &lt;span class="n"&gt;techA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;CompanyFactoryB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;carB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateCarCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;techB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factoryB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;carB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;techB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//result :&lt;/span&gt;
        &lt;span class="c1"&gt;//i am detail of Benz company&lt;/span&gt;
        &lt;span class="c1"&gt;//i am detail of asus company&lt;/span&gt;
        &lt;span class="c1"&gt;//i am detail of Audi company&lt;/span&gt;
        &lt;span class="c1"&gt;//i am detail of dell company&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Factory Method&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To be honestly , factory method pattern is like abstract factory but with difference in one thing , abstract factory is an object with a multiple factory method , you can use this method for high flexibility.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;implement of the Pattern (we are using family types that we have been declared earlier):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ITechCompanyCreator&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;ITechCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TechCompanyCreatorA&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ITechCompanyCreator&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ITechCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Asus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TechCompanyCreatorB&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ITechCompanyCreator&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ITechCompany&lt;/span&gt; &lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Dell&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FactoryMethodExample&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;creatorA&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TechCompanyCreatorA&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;techA&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;creatorA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;techA&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;creatorB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;TechCompanyCreatorB&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;techB&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;creatorB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;CreateTechCompany&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;techB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;PrintDetail&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//result :&lt;/span&gt;
        &lt;span class="c1"&gt;//i am detail of Asus company&lt;/span&gt;
        &lt;span class="c1"&gt;//i am detail of Dell company&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Builder&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This pattern use for creating big object with lots of possible configuration.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;IBuilder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Contact&lt;/span&gt; &lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ContactBuilder&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;IBuilder&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;readonly&lt;/span&gt; &lt;span class="n"&gt;Contact&lt;/span&gt; &lt;span class="n"&gt;_contact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Contact&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ContactBuilder&lt;/span&gt; &lt;span class="nf"&gt;WithName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_contact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ContactBuilder&lt;/span&gt; &lt;span class="nf"&gt;WithFamily&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_contact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;family&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ContactBuilder&lt;/span&gt; &lt;span class="nf"&gt;WithAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;_contact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Contact&lt;/span&gt; &lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_contact&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Contact&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BuilderExample&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;contact&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ContactBuilder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WithName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WithFamily&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"family"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WithAge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Build&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;      
        &lt;span class="c1"&gt;//result :&lt;/span&gt;
        &lt;span class="c1"&gt;//{"Name":"name","Family":"family","Age":10}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Prototype&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This pattern use for taking clone of any object with any complexity with decoupling clone from origin object.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//Pattern        &lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="nf"&gt;ShallowCopy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MemberwiseClone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt; &lt;span class="nf"&gt;DeepCopy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;MemberwiseClone&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;MiddleName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MiddleName&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;    
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Family&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;MiddleName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PrototypeExample&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Person&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"David"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Family&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;MiddleName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Junior"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Nolan"&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;
            &lt;span class="p"&gt;};&lt;/span&gt;

            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;shallowCopied&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ShallowCopy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;deepCopied&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;DeepCopy&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Age&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"rookie"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Family&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LastName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"bishop"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shallowCopied&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deepCopied&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ToJson&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//result:&lt;/span&gt;
        &lt;span class="c1"&gt;//{"Name":"rookie","Family":{"MiddleName":"Junior","LastName":"bishop"},"Age":55}  =&amp;gt; person&lt;/span&gt;
        &lt;span class="c1"&gt;//{"Name":"David","Family":{"MiddleName":"Junior","LastName":"bishop"},"Age":20}  =&amp;gt; shallowcopy&lt;/span&gt;
        &lt;span class="c1"&gt;//{"Name":"David","Family":{"MiddleName":"Junior","LastName":"Nolan"},"Age":20}  =&amp;gt; deepcopy&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Singleton&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this pattern we ensure that we have one instance of object in runtime with one general global access.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Singleton&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="n"&gt;_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt; &lt;span class="nf"&gt;GetInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_instance&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;_instance&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SingletonExample&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;instance1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;instance2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;GetInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instance2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Yes"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
                &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"No"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//result:&lt;/span&gt;
        &lt;span class="c1"&gt;//Yes&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Ok , That's enough, now you know about the basic of creational patterns , i will explain two other categories in two different articles later.&lt;/p&gt;

</description>
      <category>csharp</category>
      <category>design</category>
      <category>programming</category>
      <category>dotnet</category>
    </item>
    <item>
      <title>Be safe with the SSH version you use — for Roadrunners</title>
      <author>Tharun Shiv</author>
      <pubDate>Sun, 24 Oct 2021 10:24:34 +0000</pubDate>
      <link>https://dev.to/developertharun/be-safe-with-the-ssh-version-you-use-for-roadrunners-3dj3</link>
      <guid>https://dev.to/developertharun/be-safe-with-the-ssh-version-you-use-for-roadrunners-3dj3</guid>
      <description>&lt;p&gt;SSH ( Secure Shell ) is a program that is used to create a secure connection between two network enabled hosts. With this connection, the user will be able to get remote access to machines or transfer data between machines. Both these operations are critical from a security point of view, and even one slight vulnerability will cause a heavy damage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#there-are-two-major-components-involved-in-ssh"&gt;
  &lt;/a&gt;
  There are two major components involved in SSH:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;SSH server: It is the component that will enable a machine to listen or be open to accept SSH connections from clients.&lt;/li&gt;
&lt;li&gt;SSH client: It is the component that will allow a machine to connect to a remote server that is listening to incoming connections.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#major-versions-of-ssh"&gt;
  &lt;/a&gt;
  Major versions of SSH
&lt;/h2&gt;

&lt;p&gt;There are two major versions of SSH. SSH version 1 &amp;amp; SSH version 2.&lt;/p&gt;

&lt;p&gt;SSH is secure, only because of the encryption that is involved. Now what is encryption? It is basically converting all the raw data that would be transmitted from Machine A to Machine B in a form that would be understandable only by those two machines.&lt;/p&gt;

&lt;p&gt;The encryption involved in SSH version 1 is weak enough for a middleman to decrypt it, view the contents, and even modify it without both the parties knowing about it.&lt;/p&gt;

&lt;p&gt;Thus, make sure to use SSH version 2 both on client side, as well as enforcing the same on the server side.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-ssh-client-version"&gt;
  &lt;/a&gt;
  Check SSH client version
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-irn&lt;/span&gt; &lt;span class="s2"&gt;"Protocol"&lt;/span&gt; /etc/ssh/sshd_config
2:Protocol 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make sure the protocol is 2. By default, if this field is missing, then the SSH client will try to connect to the server using SSH protocol 2, and will fallback to SSH protocol 1. Hence, if you want to be strictly secure, then we have to add Protocol 2 to the /etc/ssh/sshd_config file and restart the ssh client.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#check-the-ssh-server-versions-allowed"&gt;
  &lt;/a&gt;
  Check the SSH server versions allowed
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-irn&lt;/span&gt; &lt;span class="s2"&gt;"Protocol"&lt;/span&gt; /etc/ssh/sshd_config
2:Protocol 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The process is similar to SSH configuring the ssh client, but is more critical to configure on the server. We have to add Protocol 2 to the /etc/ssh/sshd_config file and restart the ssh client.&lt;/p&gt;

&lt;p&gt;More articles on SSH coming up, but before moving ahead with them, I wanted to make sure you are aware of the SSH protocol versions.&lt;/p&gt;

&lt;p&gt;You can find more articles here: &lt;a href="https://www.tharunshiv.com"&gt;https://www.tharunshiv.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Roadrunners is a series that is aimed at delivering concepts as precisely as possible. Here, a roadrunner is referred to as a person who does things super fast &amp;amp; efficiently. Are you a roadrunner?&lt;/p&gt;

&lt;p&gt;Thank you&lt;/p&gt;

</description>
      <category>linux</category>
      <category>security</category>
      <category>beginners</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>What is an API ?</title>
      <author>Sanskar Goyal</author>
      <pubDate>Sun, 24 Oct 2021 10:04:33 +0000</pubDate>
      <link>https://dev.to/sanskar_goyal/what-is-an-api--36eb</link>
      <guid>https://dev.to/sanskar_goyal/what-is-an-api--36eb</guid>
      <description>&lt;p&gt;If you are a novice web developer then you must have heard of &lt;em&gt;APIs&lt;/em&gt;, here is a simple explanation of what this term means.&lt;/p&gt;

&lt;p&gt;API is short for &lt;strong&gt;Application Programming Interface&lt;/strong&gt;.&lt;/p&gt;




&lt;p&gt;Let's look at an example.&lt;br&gt;
In older times we had radios, right! They all had different functions but there was one thing which was common in each of them. The &lt;strong&gt;PLAY&lt;/strong&gt; button. This button became so popular that later on it was used everywhere, even &lt;em&gt;GUIs&lt;/em&gt; (Graphical User Interfaces).&lt;/p&gt;

&lt;p&gt;That is a &lt;em&gt;button API&lt;/em&gt;. An API is an interface for a coder, they don't have to code the functionality of that button completely. It's abstract! &lt;/p&gt;

&lt;p&gt;For clicking PLAY and sending sound to speaker is using &lt;strong&gt;Web Audio API&lt;/strong&gt;. While using 'strings' we are using String APIs.&lt;/p&gt;




&lt;p&gt;When someone says that they have an API for a company, they have a Web based API. A web based API is basically like a TV remote, we send the request it does its MAGIC (function!) and comes back with the result.&lt;/p&gt;

&lt;p&gt;To look for the API on a website, one can look in the footer or the menu to check out their APIs.&lt;/p&gt;







&lt;p&gt;If you are still reading, I hope you gained something out of this blog and if you liked it, don't hesitate to join my community's discord server where we discuss things in a similar way!&lt;br&gt;
Link : &lt;a href="https://discord.gg/FG9qWMEAbA"&gt;https://discord.gg/FG9qWMEAbA&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>api</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
