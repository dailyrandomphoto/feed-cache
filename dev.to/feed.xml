<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>When to : SNS or SQS</title>
      <author>Jones Zachariah Noel</author>
      <pubDate>Sun, 21 Nov 2021 17:51:23 +0000</pubDate>
      <link>https://dev.to/aws-builders/when-to-sns-or-sqs-2aji</link>
      <guid>https://dev.to/aws-builders/when-to-sns-or-sqs-2aji</guid>
      <description>&lt;p&gt;&lt;a href="https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i#sns"&gt;Simple Notification Service&lt;/a&gt; and &lt;a href="https://dev.to/aws-builders/getting-started-with-sns-and-sqs-3m4i#sqs"&gt;Simple Queue Service&lt;/a&gt; are the managed services which are offered by AWS which helps in architecting your application with the concept of &lt;em&gt;decoupling&lt;/em&gt; and promotes adoption of &lt;em&gt;event-driven architectures&lt;/em&gt;.&lt;br&gt;
The getting started post, explains the technical concepts behind both SNS and SQS.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag__link"&gt;
  &lt;a href="/aws-builders" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5zuWf912--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Z-NQNKRG--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/2794/88da75b6-aadd-4ea1-8083-ae2dfca8be94.png" alt="AWS Community Builders " width="150" height="150"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rTCEL73H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2MTjnerN--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/615180/12ee3aca-f67e-4f08-986f-1bdfd7ca384b.jpg" alt="" width="150" height="150"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/aws-builders/getting-started-with-sns-and-sqs-3m4i" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Getting started with SNS and SQS&lt;/h2&gt;
      &lt;h3&gt;Jones Zachariah Noel for AWS Community Builders  ・ Nov 14 ・ 4 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#sns&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#sqs&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#aws&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#architecture&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;


&lt;p&gt;This blog post will explain what to choose and how to choose between &lt;em&gt;SNS&lt;/em&gt; or &lt;em&gt;SQS&lt;/em&gt; for your architecture. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-things-to-keepinmind-when-choosing-sns"&gt;
  &lt;/a&gt;
  Key things to keep-in-mind when choosing SNS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sns/"&gt;Simple Notification Service (SNS)&lt;/a&gt; is a &lt;strong&gt;distributed pub-sub model&lt;/strong&gt; where the messages are pushed to the subscriber. SNS provides the &lt;strong&gt;feasibility of having multiple subscribers&lt;/strong&gt; (Standard topics : max 12,500,000 subscriptions and FIFO topics : max 100 subscriptions) and all the subscribers of the topic receive the message, and the multiple subscribers can be across various other types - &lt;strong&gt;email message, Lambda fn invocation, posting to a SQS queue, invoke an HTTP end-point, sending a SMS message, a mobile push notification&lt;/strong&gt; with all the possible combinations. With SNS, we can integration with &lt;a href="https://developer.amazon.com/docs/adm/overview.html"&gt;Amazon Device Messaging&lt;/a&gt;, &lt;a href="https://developer.apple.com/notifications/"&gt;Apple Push Notification Service&lt;/a&gt;, &lt;a href="https://firebase.google.com/docs/cloud-messaging"&gt;Firebase Cloud Messaging&lt;/a&gt; and other popular providers to send push notifications to the mobile app. There can be scenarios where you can decide to send a SMS message to the subscriber or send an email message to the subscriber based on the message itself with the feature of &lt;strong&gt;message filtering with attributes&lt;/strong&gt;. &lt;br&gt;
The down-side of SNS is the message once sent to the subscriber, it is not available but if undelivered, based on the retry configuration message is available until it is successfully delivered. That been said, if a topic exists with 0 subscribers, if the message is pushed to the topic, that message is lost.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#key-things-to-keepinmind-when-choosing-sqs"&gt;
  &lt;/a&gt;
  Key things to keep-in-mind when choosing SQS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://aws.amazon.com/sqs/"&gt;Simple Queue Service (SQS)&lt;/a&gt; is a &lt;strong&gt;distributed queue model&lt;/strong&gt; where the consumer should poll the queue to check if a new message has been pushed into the queue. SQS messages are stored and &lt;strong&gt;available upto 14 days&lt;/strong&gt;. The SQS can be configured with different fan-out periods - &lt;strong&gt;Visibility timeout (0s - 12 hours), Message retention period(1 min - 14 days, Delivery delay(0s - 15 mins), Maximum message size (1KB - 256KB), Receive message wait time (0s - 20s)&lt;/strong&gt;. A &lt;strong&gt;Dead-letter Queue (DLQ)&lt;/strong&gt; can also be configured for capturing undelivered messages. SQS supports good batch processing of upto 10 messages per batch.&lt;br&gt;
DLQ can get over-filled if there is some error in delivering huge amount of messages. As SQS uses the polling mechanism, there is a &lt;strong&gt;latency&lt;/strong&gt; with message delivery. SQS &lt;strong&gt;does not delivery to multiple consumers at the same time&lt;/strong&gt; even if there are multiple Lambda fns or even SNS topics as triggers for the queue but if anyone of the consumer deletes the message when polled, it is &lt;strong&gt;lost for all the consumers&lt;/strong&gt;.&lt;/p&gt;




&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Use-case&lt;/th&gt;
&lt;th&gt;SNS&lt;/th&gt;
&lt;th&gt;SQS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;On a certain action sending email / mobile push / SMS message&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Notify multiple systems via HTTP post&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Immediate message processing&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Process an image and get the meta-data via other AWS services&lt;/td&gt;
&lt;td&gt;✅ Topic can send a message to multiple other subscribers which be SQS queues&lt;/td&gt;
&lt;td&gt;✅ These SQS queues can process each type of meta-data generation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Single subscriber processing each message&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Batch processing&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Cross account Lambda triggers for queue&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Decoupling your Lambda fn&lt;/td&gt;
&lt;td&gt;✅ Multiple sub-modules of the Lambda fn can be individual subscribers to the topic&lt;/td&gt;
&lt;td&gt;✅ Load control your Lambda fn with various fan-out options&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Handling undelivered messages&lt;/td&gt;
&lt;td&gt;🚫&lt;/td&gt;
&lt;td&gt;✅&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#know-your-limits"&gt;
  &lt;/a&gt;
  Know your limits
&lt;/h3&gt;

&lt;p&gt;Whenever taking a choice of service for your event-driven architecture which is also loosely coupled, understand the limits of the service itself. &lt;br&gt;
SNS Limits : &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sns.html#sns_region"&gt;Service end-points&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sns.html#limits_sns"&gt;Service quotas&lt;/a&gt; &lt;br&gt;
SQS Limits : &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sqs-service.html#sqs_region"&gt;Service end-points&lt;/a&gt; &lt;a href="https://docs.aws.amazon.com/general/latest/gr/sqs-service.html#limits_sqs"&gt;Service quotas&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;SNS and SQS have their own advantages and limitations making it an evaluation-based choice for the Cloud Architects/Developers to choose either SNS or SQS or the combination of two. And to understand the working of the combination of SNS and SQS, Jeff Barr's post &lt;a href="https://aws.amazon.com/blogs/aws/queues-and-notifications-now-best-friends/"&gt;&lt;strong&gt;SQS Queues and SNS Notifications – Now Best Friends&lt;/strong&gt;&lt;/a&gt; (also the 4th use-case listed above) explains how both the services together makes a best pair for decoupling.&lt;/p&gt;

</description>
      <category>sns</category>
      <category>sqs</category>
      <category>aws</category>
      <category>architecture</category>
    </item>
    <item>
      <title>Your First Line of Code</title>
      <author>Vicki (she/they)</author>
      <pubDate>Sun, 21 Nov 2021 17:24:46 +0000</pubDate>
      <link>https://dev.to/vickilanger/your-first-line-of-code-5ebi</link>
      <guid>https://dev.to/vickilanger/your-first-line-of-code-5ebi</guid>
      <description>&lt;p&gt;&lt;em&gt;If learning to code with math examples are the bane of your existence, keep reading. This series uses relatable examples like dogs and cats.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Jump To:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#first"&gt;Your First Program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#practice"&gt;Practice Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#hello-world"&gt;
  &lt;/a&gt;
  Hello, World!
&lt;/h2&gt;

&lt;p&gt;When learning to code, you must start somewhere. You’re not going to jump in and already know how to do things. Some things will look like magic at first. As you go along you’ll learn more and more about how those magic things actually work.&lt;/p&gt;

&lt;p&gt;The first program most programmers start with is called "Hello, World". This program is the starting point because it shows some of the language’s syntax and it feels good when you can see the output of your work. This tradition has been around since 1974 when it was first introduced into a programming tutorial book.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#your-first-program"&gt;
  &lt;/a&gt;
  Your First Program! &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In whichever editor you choose (eg Python Tutor, Trinket, IDLE, etc), type in the code below and run the code. If you don’t know how to run the code, you can always refer back to the &lt;a href="https://dev.to/vickilanger/where-do-i-code-3cb2"&gt;&lt;em&gt;Where Do I Code&lt;/em&gt;&lt;/a&gt; post.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Depending on your editor, your output will show a little differently, but it will still be displayed. If you got it to work, congratulations! You’ve built your first program!&lt;/p&gt;

&lt;p&gt;Try it again, but this time use your own words. Leave the quotes and put your own words inside them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#um-it-didnt-work-now-what-do-i-do"&gt;
  &lt;/a&gt;
  Um, It Didn’t Work. Now what do I do?
&lt;/h3&gt;

&lt;p&gt;If your code didn’t work, that is okay. This happens ALL the time. In &lt;a href="https://dev.to/vickilanger/how-do-i-code-4970"&gt;&lt;em&gt;How Do I Code&lt;/em&gt;&lt;/a&gt;, we talked about bugs and debugging? You have a bug and you need to debug your program. Here are the steps we want to go through.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Look at the code you last wrote. It’s likely to be the culprit.&lt;/li&gt;
&lt;li&gt;Make sure the syntax is good.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have yet to go over the syntax of anything in this program. So, here are some things to check. If you don’t have them, go ahead and fix your code. You can run your code after every change to see if it works.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;print&lt;/code&gt; should be lowercase&lt;/li&gt;
&lt;li&gt;There should be parentheses surrounding your words&lt;/li&gt;
&lt;li&gt;Your words and their punctuation should be surrounded by quotes (like this &lt;code&gt;"puppy"&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#some-magic-with-print"&gt;
  &lt;/a&gt;
  Some Magic with Print
&lt;/h2&gt;

&lt;p&gt;In &lt;a href="https://dev.toTBD"&gt;&lt;em&gt;How Do I Code&lt;/em&gt;&lt;/a&gt;, we talked about documentation and the importance of reading it. I know it can be scary, but I promise it will help. Let’s take a look at what Python docs have for this &lt;code&gt;print()&lt;/code&gt;. You can go to the docs here: ​​&lt;a href="https://docs.python.org/3/library/functions.html#print"&gt;https://docs.python.org/3/library/functions.html#print&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
​​&lt;br&gt;
This is showing us the syntax of a print statement and what arguments are required and allowed. Remember, arguments are the things that go inside the &lt;code&gt;()&lt;/code&gt; and are separated by commas. There are five arguments; We’ll go over the first three. Any arguments that have an &lt;code&gt;=&lt;/code&gt; are not required as they had defaults set to whatever is after the &lt;code&gt;=&lt;/code&gt;. Here are the three we’ll work with.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;objects&lt;/code&gt; refers to whatever you want to print and the &lt;code&gt;*&lt;/code&gt; just means you can put as many things, separated by commas, as you want.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;sep=' '&lt;/code&gt; is saying that each of those things, or objects, will be separated by a single space, by default. If you were to give &lt;code&gt;sep=',  '&lt;/code&gt; your objects would be separated by a comma and a space.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;end='\n'&lt;/code&gt; says that at the end of whatever you are printing, it is giving a new line. It’s basically hitting the enter key after you print. You can change that if you want by giving something other than &lt;code&gt;\n&lt;/code&gt; for the end.
Sometimes it can be helpful to give a separator and/or a different end of the line. Here are a few examples. Try it out for yourself.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# print() separator example
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints cat mouse dog
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints cat, mouse, dog
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"cat"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"mouse"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"dog"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sep&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"123"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints cat123mouse123dog
&lt;/span&gt;
&lt;span class="c1"&gt;# print() end example
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"1st print"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;", "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# prints 1st print,
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"2nd print"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#do-you-remember"&gt;
  &lt;/a&gt;
  Do you remember?&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Here's some practice challenges. Let’s practice what we’ve learned so far. Go ahead and comment on this post with your answers. If you don't remember, no worries, you can always go back to read sections again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#can-you-fix-whats-wrong-with-these"&gt;
  &lt;/a&gt;
  Can You Fix What's Wrong with These?
&lt;/h3&gt;

&lt;p&gt;Some of these have more than one right answer. Believe in yourself and give it a try.&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Print("Hi there")"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print"(Bom Dia!, sep="... ")"&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print("​​Nǐ hǎo”, sep" - ")&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print("¡Hola"!)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;print.("Assalamu Alaikum", end=" ")&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#make-some-example-print-statements-and-give-their-output"&gt;
  &lt;/a&gt;
  Make some example print statements and give their output
&lt;/h3&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Print Statement&lt;/th&gt;
&lt;th&gt;What Would the Output look like&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Just words&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;With a different Separator&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;With a different End&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>python</category>
      <category>codenewbie</category>
      <category>challenge</category>
    </item>
    <item>
      <title>How do I code?</title>
      <author>Vicki (she/they)</author>
      <pubDate>Sun, 21 Nov 2021 17:23:23 +0000</pubDate>
      <link>https://dev.to/vickilanger/how-do-i-code-4970</link>
      <guid>https://dev.to/vickilanger/how-do-i-code-4970</guid>
      <description>&lt;p&gt;&lt;strong&gt;Jump To&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#syntax"&gt;Syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#docs"&gt;Reading Docs&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#pseudocode"&gt;Pseudocode&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#comment"&gt;Commenting&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#naming"&gt;I Want It That Way&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="#debug"&gt;Eek! Errors :( Tell Me Why&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="#practice"&gt;Practice Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Coding can be as easy as typing exactly what you see in a book, video, or tutorial and hoping it works. This will work at first, but it’s better to have some tools to help you learn and really understand what you’re doing along the way. These tools will help you better understand what you’re doing and how things work. All of these tools are things professional programmers depend on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#understanding-syntax"&gt;
  &lt;/a&gt;
  Understanding Syntax &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Whether you’re writing in English, Pashto, Hebrew, or a programming language they all require you to use combinations of characters, numbers, and symbols. These combinations of characters, numbers, and symbols mean something. When you were learning to read you were programming your brain to understand these combinations as different sounds. Then you used these sounds to make words. Once you could read words, you could read sentences. There are rules or syntax that tell us how sounds and words work together. Syntax tells us what the correct format is to write certain things.&lt;/p&gt;

&lt;p&gt;In programming, syntax is used to define the correct combinations of characters, numbers, and symbols to make the code work. The syntax is different for each programming language just like it is for written and spoken languages. For every new code thing you learn, you want to make sure you look at the syntax and refer back to it if you don’t remember. If you type the wrong syntax, the computer will not understand and it will give you a &lt;code&gt;SyntaxError&lt;/code&gt;. If you get a syntax error, look up the syntax to verify you have the right thing.&lt;/p&gt;

&lt;p&gt;When looking up the syntax the best option is to look at the documentation. What is given in a tutorial, video, or book is probably correct, but sometimes things change or there are typos. Documentation is the go-to source for all your syntax needs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reading-documentation-and-searching-the-web"&gt;
  &lt;/a&gt;
  Reading Documentation and Searching the Web &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;As our go-to source of information, documentation or docs as most programmers call it, is incredibly important. You can go directly to the documentation website (docs.python.org), but sometimes the website isn’t the easiest to navigate when you don’t know all the terms that are on it. Personally, I choose to go to my search engine (e.g. DuckDuckGo, Bing, Google) and type in &lt;code&gt;python docs&lt;/code&gt; and the thing I want to look up. Most of the time, one of the first results is exactly what I need. Notice, I included the language I’m working with and the word &lt;code&gt;docs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Reading documentation can feel daunting at first. Let’s look at an example and figure out what’s what. There are several things we need to look at.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Syntax - the name and required symbols to use, in this case &lt;code&gt;print()&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Required things - anything inside the &lt;code&gt;()&lt;/code&gt; without an equals sign &lt;code&gt;=&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Things Not Required - anything inside the &lt;code&gt;()&lt;/code&gt; with an equals sign &lt;code&gt;=&lt;/code&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cgASw-aq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p7jadf834fblv3nz60o9.png" alt=" raw `print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)` endraw  with a &amp;quot;1&amp;quot; over the &amp;quot;print&amp;quot;, a &amp;quot;2&amp;quot; over &amp;quot;*objects&amp;quot; and a &amp;quot;3&amp;quot; over everything with an equals signs" width="500" height="200"&gt;
These things may look like gibberish, but I promise, no one expects you to understand what any of this means. In the documentation there is a description of each thing in the &lt;code&gt;()&lt;/code&gt; underneath this line of code.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#pseudocode"&gt;
  &lt;/a&gt;
  Pseudocode &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We all program every single day of our lives whether or not we realize it. When you get up in the morning, you plan out your day. This act of planning is creating a script or program for your day. This may not be in a computer programming language, but it is absolutely programming. It’s an informal list of steps or a to-do list. In coding, we actually do something similar to this. We call it pseudocode.&lt;/p&gt;

&lt;p&gt;Sounds goofy, right? Why are we learning something that basically means “kinda sorta code”? Believe it or not, this is an integral step. Pseudocode is basically a to-do list. We use informal plain language to describe what we are about to code. You may think of it as an outline, plan, or to-do list.&lt;/p&gt;

&lt;p&gt;Once you have a pseudocode outline of what you want to build, you can use the steps to help guide what you want to code. In &lt;a href="https://dev.to/vickilanger/what-is-programming-35kf"&gt;&lt;em&gt;What is Programming&lt;/em&gt;&lt;/a&gt;, there was an example about how to build a watch. That was pseudocoding. The steps were written with all the focus on how it should work and not on the programming syntax. Though, in real pseudocode, each line would be a comment instead of a bullet on a list.&lt;/p&gt;

&lt;p&gt;If I were going to pseudocode for the watch, it would look something like this. Do know that there is no right or wrong way to pseudocode. You may choose to write it differently than someone else. That’s okay. It’s just a guide.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Repeat steps forever and ever until end of time or battery dies
&lt;/span&gt;
&lt;span class="c1"&gt;# Every 1 second up to 59, add 1 to the seconds on screen then
# Add 1 to the minutes on the screen up to 59 then
# Add 1 to the hours on the screen up to 12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#commenting"&gt;
  &lt;/a&gt;
  Commenting &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;In the pseudocode watch example, every line starts with a &lt;code&gt;#&lt;/code&gt;.  Whenever you use a &lt;code&gt;#&lt;/code&gt; you’re saying the computer should ignore what comes after it. What comes after the &lt;code&gt;#&lt;/code&gt; is meant for humans. Typically, comments are on the line above your code or at the end of the line. It should be an explanation of the what and why of your code. Think of it as a reminder to a future you and an explanation to anyone else reading your code. Oftentimes, your pseudocode will be repurposed and used to comment your code.&lt;/p&gt;

&lt;p&gt;You can also use comments to leave yourself to-do things with pseudocode notes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Henna&lt;/span&gt; &lt;span class="n"&gt;Wars&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# output title of book
# TODO: output author of book - Adiba Jaigirdar
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#i-want-it-that-way"&gt;
  &lt;/a&gt;
  I Want it That Way &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;One of the best and worst things in programming is the fact that we have to name things. Naming can be a lot of fun. Later on, you’ll see that I named something &lt;code&gt;cat_summoning_spell&lt;/code&gt;. I promised I giggled when I came up with that. As fun as it can be, naming can be hard too.&lt;/p&gt;

&lt;p&gt;Names have to be unique. They can’t be the same as anything else or your program will get confused. Imagine having a cat named “Chicken” and a pet chicken. That would quickly get confusing.&lt;/p&gt;

&lt;p&gt;Names should also be memorable and descriptive. Using &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;foo&lt;/code&gt; doesn’t explain what something is. Instead, you could describe what the thing is. If you’re counting stars, you could use something like &lt;code&gt;star_count&lt;/code&gt;, &lt;code&gt;star_num&lt;/code&gt;, or &lt;code&gt;num_of_stars&lt;/code&gt;. Having descriptive variables will help you avoid errors.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#eek-i-got-an-error-what-now-tell-me-why"&gt;
  &lt;/a&gt;
  Eek! I got an Error. What now? - Tell Me Why &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;If your code didn’t work, that is okay. This happens ALL the time. You have a bug and you need to debug your program. Here are the steps we want to go through. We’ll go into each of them in detail shortly. While they are in order, there is nothing saying you have to do them in this order.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Read the Error&lt;/li&gt;
&lt;li&gt;Find the Culprit

&lt;ol&gt;
&lt;li&gt;Make sure the syntax is good.&lt;/li&gt;
&lt;li&gt;Names match (eg variables, functions, classes, etc)&lt;/li&gt;
&lt;li&gt;Comment out code&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Ask for help

&lt;ol&gt;
&lt;li&gt;Rubber Duck&lt;/li&gt;
&lt;li&gt;Google it&lt;/li&gt;
&lt;li&gt;Actually ask someone&lt;/li&gt;
&lt;/ol&gt;


&lt;/li&gt;
&lt;li&gt;Take a Break&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#understanding-the-error-messages"&gt;
  &lt;/a&gt;
  Understanding the Error Messages
&lt;/h4&gt;

&lt;p&gt;I know, errors are scary and look like you broke something. There’s no need to worry though, it’s trying to help you. Errors tell you where the error is and what the problem might be. Let’s look at an example and figure out what’s what. There are several things we need to look at.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Type of error&lt;/li&gt;
&lt;li&gt;Description of error&lt;/li&gt;
&lt;li&gt;Line number - which line the error is on
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q78_uYap--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcfk0tdq002bukcuyxv7.png" alt='"1" over "NameError", "2" over "name cats is not defined", and "3" over "line 2"' width="500" height="200"&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#find-the-culprit"&gt;
  &lt;/a&gt;
  Find the Culprit
&lt;/h4&gt;

&lt;p&gt;Now that the error message has led you in the right direction, let’s look where it said the problem is. When you’re first learning to code, your most common errors will be a &lt;code&gt;SyntaxError&lt;/code&gt; and a &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You’ll get a &lt;code&gt;SyntaxError&lt;/code&gt; when your syntax is messed up. Verify you have it right. I promise, even if you think you have it right, verify anyway. If you’re not sure, you can always look at documentation. Oftentimes, we assume we typed something right and we made a tiny mistake.&lt;/p&gt;

&lt;p&gt;Speaking of tiny mistakes, we get &lt;code&gt;NameError&lt;/code&gt; when names don’t match. For example, if you have something called &lt;code&gt;dog_feet&lt;/code&gt; but you later tried to use &lt;code&gt;dog_paws&lt;/code&gt; or &lt;code&gt;dog_foot&lt;/code&gt; you’ll get this &lt;code&gt;NameError&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you’re having trouble finding the error, you can do what we call “commenting out code”. This means you can put a &lt;code&gt;#&lt;/code&gt; in front of that line so the computer will ignore that line. You’ll do this with lines that work perfectly and you know aren’t the problem. This helps narrow down the offending or broken code.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#ask-for-help"&gt;
  &lt;/a&gt;
  Ask For Help
&lt;/h4&gt;

&lt;p&gt;If the other steps didn’t help, try asking for help. There are lots of ways to do this. You can do what we call “rubber ducking” or “rubber duck debugging.” This just means that you are explaining your code and the problem (to the best of your ability) out loud to something like a rubber duck or maybe your cat. You can also do this by typing out your problem as if you were going to ask a question. Oftentimes, this will solve your problem because you’ll be reading off your code and realize what was wrong.&lt;/p&gt;

&lt;p&gt;If explaining your code to a rubber duck, your cat, or your programmer friend hasn’t worked, try googling the problem. Typically this would mean you want to search the language you’re working with and the error. You might search something like &lt;code&gt;python NameError: name 'cats' is not defined&lt;/code&gt;. Generally the results will lead you in the right direction. You may have to look at a few different results to get the answer you need.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#take-a-break"&gt;
  &lt;/a&gt;
  Take a Break
&lt;/h4&gt;

&lt;p&gt;If all else fails, take a break. Yes, seriously. Get up, walk away from your code. Take a walk, get some water, go play fetch with your dog, anything. I know you’re thinking this won’t work, but try it anyway. When you go back to your code later the problem may be glaringly obvious. It also might not be, but you’ve cleared your mind and are in a better position to find the pesky code. The goal here is to not sit there getting frustrated for a long time. Learning to code should be fun. If you find yourself getting upset with yourself, take a break.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#do-you-remember"&gt;
  &lt;/a&gt;
  Do you remember? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let’s practice what we’ve learned so far. Go ahead and comment on this post with your answers. If you don't remember, no worries, you can always go back to read sections again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#write-a-pseudocode-example-or-three"&gt;
  &lt;/a&gt;
  Write a Pseudocode example or three
&lt;/h3&gt;

&lt;p&gt;Try writing out the steps on how to do or build a real-life thing. Ideas: make a sandwich, use a TV, ride a bike, use a keyboard, or how water flows through kitchen sink plumbing&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pseudocode Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>python</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Random Joke Generator using JavaScript</title>
      <author>Shantanu Jana</author>
      <pubDate>Sun, 21 Nov 2021 16:49:50 +0000</pubDate>
      <link>https://dev.to/shantanu_jana/random-joke-generator-using-javascript-2011</link>
      <guid>https://dev.to/shantanu_jana/random-joke-generator-using-javascript-2011</guid>
      <description>&lt;p&gt;Here I have shown you how to create &lt;strong&gt;Random Joke Generator using JavaScript&lt;/strong&gt;. This project may generate random jokes using API links. For this you need to have a basic idea about HTML CSS and JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.foolishdeveloper.com/2021/11/random-joke-generator-using-javascript.html"&gt;Watch its live demo&lt;/a&gt; to learn how it works. First I made a box on the web page. Then I added a title here. Then here we have created an area in which all the joke generators can be seen. Below is a generate button that will generate a different joke each time you click on it.&lt;/p&gt;

&lt;p&gt;Here I did not use any text manually. Here we have used API link which will collect all the information from other places with the help of fetch method and then display it in the webpage with the help of textContent.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LtDVGKed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7zy0oq0oss7gl5w423v.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LtDVGKed--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i7zy0oq0oss7gl5w423v.jpg" alt="Image description" width="880" height="409"&gt;&lt;/a&gt;&lt;br&gt;
Here I have shared step-by-step tutorial. First you create the HTML and CSS files then follow the steps below. If you want to &lt;a href="https://www.foolishdeveloper.com/2021/11/random-joke-generator-using-javascript.html"&gt;download the source code&lt;/a&gt;, you can use the download link below the article.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#html-code-for-joke-generator"&gt;
  &lt;/a&gt;
  HTML Code for Joke Generator
&lt;/h3&gt;

&lt;p&gt;The code below is basically the HTML code needed to create this project. Here I have used a very small amount of HTML code. &lt;/p&gt;

&lt;p&gt;First I added a heading then created a display using paragraphs. I created a button to generate joke.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- heading --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Random Joke Generator&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- display --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"joke"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- generate button --&amp;gt;&lt;/span&gt;
     &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Generate Joke&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#css-code-for-random-joke-generator"&gt;
  &lt;/a&gt;
  CSS Code for Random Joke Generator
&lt;/h3&gt;

&lt;p&gt;Now I have designed the basic structure of this Joke Generator using CSS codes.&lt;/p&gt;

&lt;p&gt;Webpages have been designed using a small amount of CSS code. Here the background color of the web page is blue.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;"Rubik"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0772a7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I have created the basic structure of this project using the following codes. Box &lt;code&gt;width: 400px&lt;/code&gt; and its background color is white. With this we have created a box-shadow around here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.wrapper&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fafdfd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;97&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;63&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KFKNSFXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ploawis99md0y773cszv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KFKNSFXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ploawis99md0y773cszv.jpg" alt="basic structure" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I have designed the heading. In the meantime I have added all the information for the heading. I have used &lt;code&gt;font-size: 25px&lt;/code&gt; to increase the text size a bit and the color blue has been used&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="m"&gt;#063f63&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OVmTRa2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7t6jbxt2q9ib08ehn1h.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OVmTRa2m--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e7t6jbxt2q9ib08ehn1h.jpg" alt="designed the heading" width="880" height="409"&gt;&lt;/a&gt;&lt;br&gt;
Now I have designed the display. All content will be displayed in this display, meaning that the joke generated will be displayed in this paragraph tag. So no specific height is given here it will determine its own size based on the amount of content.&lt;/p&gt;

&lt;p&gt;Here &lt;code&gt;opacity: 0&lt;/code&gt; is used. You may be wondering why opacity: 0 has been used here.&lt;/p&gt;

&lt;p&gt;Optical Zero will help to hide all the information that is here under normal conditions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;16px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;139&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0.28&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;word-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;break-word&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;35px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now using ".fade" we have used opacity: 1 which will help to show all the information in the display. This &lt;code&gt;".fade"&lt;/code&gt; will work when you click on the Generate button.&lt;/p&gt;

&lt;p&gt;This means that when you click on the Generate button, a new joke will be generated and will be displayed on the display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.fade&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;0.1s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NraPrZe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibl9h8g21qwokn2ea1wu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NraPrZe5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ibl9h8g21qwokn2ea1wu.jpg" alt="designed the display" width="880" height="409"&gt;&lt;/a&gt;&lt;br&gt;
Now I have designed the generate button here. I have used &lt;code&gt;font-size: 18px&lt;/code&gt; to increase the size of the text inside the button. &lt;code&gt;Padding: 12px 25px&lt;/code&gt; helped to determine the size of the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;18px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#e7e7ec&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;12px&lt;/span&gt; &lt;span class="m"&gt;25px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#0354ab&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;outline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4KGVNPua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1xbugod96tqz0kqrp41.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4KGVNPua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m1xbugod96tqz0kqrp41.jpg" alt="designed the generate button" width="880" height="409"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#javascript-of-random-joke-generator"&gt;
  &lt;/a&gt;
  JavaScript of Random Joke Generator
&lt;/h3&gt;

&lt;p&gt;Now is the time to fully implement this project with the help of JavaScript. As I said before, the API link here has helped to bring all this content from somewhere else.&lt;/p&gt;

&lt;p&gt;First I set the constants to one of the two ID functions. The global constant is determined by the ID of the display that we first created using the paragraph and the ID of the button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;jokeContainer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;joke&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now I have used the API link from which all the information will be collected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://v2.jokeapi.dev/joke/Any?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&amp;amp;type=single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First I have collected all the information from the URL using &lt;code&gt;fetch&lt;/code&gt; method. Then I have arranged to show it in display through &lt;code&gt;textContent&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I have instructed you to add "fade" to it so that you can see all that information.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;getJoke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;jokeContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fade&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;jokeContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;jokeContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;fade&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now it's time to activate the generate button. That calculation will be executed with the help of 'click'.&lt;/p&gt;

&lt;p&gt;As a result, this calculation will work when you click on the button. This will &lt;strong&gt;generate a new joke&lt;/strong&gt; and it will be seen in the display.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;getJoke&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;getJoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;`&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7ltJgZ1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id0ujdu0bq1zx81n2qqu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7ltJgZ1a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/id0ujdu0bq1zx81n2qqu.jpg" alt="Random Joke Generator javascript" width="880" height="409"&gt;&lt;/a&gt;&lt;br&gt;
Hope you know how I created the &lt;strong&gt;JavaScript Random Joke Generator&lt;/strong&gt; project. If you have any questions, please let me know in the comments. &lt;/p&gt;

&lt;p&gt;If you like this project, you must like the article. You can use this link to download the required &lt;a href="https://www.foolishdeveloper.com/2021/11/random-joke-generator-using-javascript.html"&gt;source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can visit my blog for more tutorials like this. 😊&lt;br&gt;
&lt;a href="https://www.foolishdeveloper.com/"&gt;https://www.foolishdeveloper.com/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Verified email badge ? ✅</title>
      <author>Noé Cabannes-Michel</author>
      <pubDate>Sun, 21 Nov 2021 16:13:14 +0000</pubDate>
      <link>https://dev.to/noe/verified-email-badge--4nem</link>
      <guid>https://dev.to/noe/verified-email-badge--4nem</guid>
      <description>&lt;p&gt;&lt;a href="https://www.youtube.com/c/thiojoe"&gt;ThioJoe&lt;/a&gt;, an American Tech YouTuber with over 2 millions subscribers, revealed in a new video a hidden feature, extremely rare, how to get a badge like the one of "those influencers who thinks they're cool with their verified badge" on Twitter or Instagram.&lt;/p&gt;

&lt;p&gt;But there is a verified badge that everyone can get and actually nobody has… It's for your email account. &lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnn5bOqe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEuHuViXMAES9kT.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yya4I1gj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1459863031748386817/0tj-lnKp_normal.jpg" alt="Noé profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Noé
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cabannes_noe
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:25 PM - 21 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1462411741346861057" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1462411741346861057" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1462411741346861057" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;Exemple of certified badge on Apple Mail client. &lt;em&gt;Credit : ThioJoe&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might think if every one can get one, why is it so rare ? The answer is because it's usually hard to setup if you don't know what you're doing, which by the end of the tutorial you will.&lt;/p&gt;

&lt;p&gt;Watch this high quality step by step tutorial on YouTube and clearly understandable even for non tech-savvy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3ne0d37cZyc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Note : The rest of this article is just a transcript of the video. It's highly recommanded to just watch the full video.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#smime-certificates"&gt;
  &lt;/a&gt;
  S/MIME certificates
&lt;/h4&gt;

&lt;p&gt;You see these "verified" badges in the email&lt;br&gt;
software are not actually like verified badges on social media. But rather they signify that an email has been sent with a certain security protocol called &lt;code&gt;S/MIME&lt;/code&gt;, which is a feature supported by almost all email clients.&lt;/p&gt;

&lt;p&gt;And I guess it's just rarely used because this level of security is just not really necessary. However, I think once people realize that you can get a super rare badge appearing next to your emails, that might get people's attention.&lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#when-i-found-one"&gt;
  &lt;/a&gt;
  When I found one
&lt;/h5&gt;

&lt;p&gt;What's really funny is the &lt;code&gt;S/MIME&lt;/code&gt; protocol has been around since around 2004. But despite that, I have literally only seen it used ONCE, which was an email from some crypto exchange marketing email. And it had a badge in Apple Mail and immediately my reaction was just... what. is. that. I had never seen it before.&lt;/p&gt;

&lt;p&gt;So I saw that when you click on the thing with badge, it says "The sender signed this message with a trusted certificate", and I also looked in the Gmail web interface which said something similar, so I knew it wasn't just an Apple thing. And long story short, after quite a bit of digging, I figured out that it uses that &lt;code&gt;S/MIME&lt;/code&gt; protocol I already mentioned, and specifically you need - tech jargon warning, an: &lt;code&gt;S/MIME&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-are-smime-certificates-"&gt;
  &lt;/a&gt;
  What are S/MIME certificates ?
&lt;/h4&gt;

&lt;p&gt;Email Certificate from a Root Certificate Authority, sometimes just called an "email certificate". And to answer a few more quick things you're probably wondering: It should not matter what service you use for email, whether Gmail, Verizon, AT&amp;amp;T, Comcast, whatever. Instead what matters is the the email client software, such as Outlook, or Apple Mail, whatever.&lt;/p&gt;

&lt;p&gt;Most web interfaces for email services like Gmail do not actually let you add certificates to emails when sending, but if you use Outlook for example to send through gmail it will work.&lt;/p&gt;

&lt;p&gt;Another thing I'll point out is the person on the other end does NOT need to do anything special for the badge to show up, this is supported by default by almost all email clients. Again it will be presented different depending on the client, but considering Apple Mail alone on iOS, iPad, and Mac makes up over 50% of the email client market share, most people will see some kind of badge like this one.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D3sErCl5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/FEuFY6iXsAMH2Uc.jpg" alt="unknown tweet media content"&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yya4I1gj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1459863031748386817/0tj-lnKp_normal.jpg" alt="Noé profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Noé
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @cabannes_noe
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:14 PM - 21 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1462409176387358722" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1462409176387358722" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1462409176387358722" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#what-they-really-mean-"&gt;
  &lt;/a&gt;
  What they really mean ?
&lt;/h4&gt;

&lt;p&gt;Now before I get into how to get one of these certificates and how to set it up, let me quickly and simply explain what it even is, without getting too technical. And yes, it is important to know so just bear with me.&lt;/p&gt;

&lt;p&gt;In the simplest terms possible, an email certificate is like a two-part digital key (made of a public and a private key) that is tied to your email address.&lt;/p&gt;

&lt;p&gt;You can use the certificate to 'sign' your emails in such a way, that the person receiving the email KNOWS that only the person with that original certificate and private key could have done so. The purpose of the public key is to send along&lt;br&gt;
basically as an identifier, you can think of it as.&lt;/p&gt;

&lt;p&gt;But here's the other important part of this. You see, anyone can just create their own certificate and say "uh yea I own this email address".&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#certificate-authorities-role"&gt;
  &lt;/a&gt;
  Certificate Authorities role
&lt;/h5&gt;

&lt;p&gt;That's where the Certificate Authorities come in. These are companies that make all sorts of other certificates like SSL ones for encrypting websites.&lt;/p&gt;

&lt;p&gt;There are only a handful of these companies relatively speaking, and all of them are universally considered trustworthy and secure by every other company around the world. So what these companies do, is they have their own secret so-called &lt;code&gt;root&lt;/code&gt; certificates, again that are universally recognized, and they can use to sign and verify all sorts of other lesser certificates for anyone who wants one, usually for a price though.&lt;/p&gt;

&lt;p&gt;So in the context of this video, a really easy way to understand it, is what happens is we go to a certificate authority, who first confirms we control some email address like "&lt;a href="mailto:whatever@example.com"&gt;whatever@example.com&lt;/a&gt;".&lt;/p&gt;

&lt;p&gt;Then they issue a signed certificate, so that when we send it along with our emails, then Apple, or Gmail, or whatever service sees it, they'll say "ah an email from &lt;a href="mailto:whatever@example.com"&gt;whatever@example.com&lt;/a&gt;, oh what's this? It included a certificate, well it matches the email address, but that doesn't mean much, anyone could have made this... Oh wait I see the certificate was signed by XYZ authority who I do trust..."&lt;/p&gt;

&lt;p&gt;Then they'll check, "hey XYZ authority, did you actually sign this certificate?" to which they'll respond "yea I did it's legit, before I gave them that certificate I made sure they own that email address."&lt;/p&gt;

&lt;p&gt;And then, the email service will be like 'cool' and show the badge that it was a trusted certificate.&lt;/p&gt;

&lt;p&gt;And just a contrary example, if you were to&lt;br&gt;
just send along some random certificate you made yourself, it would look like this on the other hand, because even though it matches the email, the software has no idea where it came from, so it's basically useless.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Warning : this is going to get somewhat technical at times. It's not hard per-se once you know the steps, but you'll soon see why I wanted to explain all the certificate stuff before, because it will make it easier to follow along if you sort of know what's going on at each step. And think of it this way, maybe it's not a bad thing that it's not easy, because it makes it more exclusive for you.&lt;/em&gt;&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#step-1-get-an-smime-email-certificate-from-a-trusted-authority"&gt;
  &lt;/a&gt;
  Step 1 - get an S/MIME Email certificate from a trusted authority
&lt;/h6&gt;

&lt;p&gt;Years ago there were plenty of them offering these certificates for free, so if you were to now search "free &lt;code&gt;S/MIME&lt;/code&gt; email certificates" you'll mostly find older articles, and even an old web page from Comodo who used to offer them, the page is still there, but the links on it are dead and they no longer offer these. And most of the articles and posts I've been reading recently were all saying there is no way to get free certificates anymore, but that is not true.&lt;/p&gt;

&lt;p&gt;I was able to find the last certificate authority that is offering free &lt;code&gt;S/MIME&lt;/code&gt; certificates, and that company is called Actalis.&lt;/p&gt;

&lt;p&gt;They're an Italian certificate authority, but it doesn't matter where they're based, because they're recognized as a root authority globally, that's the whole point. And you can see even on Google's support page listing trusted certificates for &lt;code&gt;S/MIME&lt;/code&gt;, there they are. &lt;a href="https://support.google.com/a/answer/7448393?hl=en"&gt;(Source - Google Workspace)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And real quick by the way, the reason I emphasized&lt;br&gt;
that they're the last one, is if this video becomes popular enough and a ton of demand appears for these certificates, there's nothing guaranteeing they won't start charging in&lt;br&gt;
the future, in which case you'd just have to instead go to the company of your choice and buy one.&lt;/p&gt;

&lt;p&gt;These certificates really aren't expensive anyway, other authorities offer them for only about $20 per year, but still.&lt;/p&gt;

&lt;p&gt;So if you ever need some business services this Actalis company offers, give them a shot. This isn't sponsored or anything, I think we should just support companies that do things we like like offering free certificates when no one else will.&lt;/p&gt;

&lt;p&gt;OK... with all that being said...&lt;/p&gt;

&lt;p&gt;I mean jeeze how long are we into this video and I'm only now starting the walkthrough.&lt;/p&gt;

&lt;p&gt;Well just think of it as filtering out the lazy people, so it's more exclusive for you patient viewers.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#get-the-certificate"&gt;
  &lt;/a&gt;
  Get the certificate
&lt;/h5&gt;

&lt;p&gt;So go to Actalis' page where you'll enter your email you want to verify&lt;/p&gt;

&lt;p&gt;&lt;a href="https://extrassl.actalis.it/portal/uapub/freemail?lang=en"&gt;https://extrassl.actalis.it/portal/uapub/freemail?lang=en&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You just type in your email, prove you're not a robot, and click send the verification email. After a couple minutes you should receive it, but be sure to check your spam box too, it went in there for one of mine.&lt;/p&gt;

&lt;p&gt;Now at first you'll see in the email that it's all in Italian, but just scroll down because they included the same text in English too.&lt;/p&gt;

&lt;p&gt;Though all you need is the long verification code anyway, so just copy that, and paste it into the box back on the first page.&lt;/p&gt;

&lt;p&gt;Then you should "obviously" read the different terms and conditions, and if you agree, check those boxes and click Submit Request.&lt;/p&gt;

&lt;p&gt;Next this critically is important, it will now take you to a page with a password, which you'll need to install the certificates on&lt;br&gt;
your devices.&lt;/p&gt;

&lt;p&gt;This password won't be shown to you ever again and can't be recovered, so make sure you save that in a safe place maybe print it out, we will need it shortly.&lt;/p&gt;

&lt;p&gt;But don't just leave it lying around on your desktop either. Because if someone somehow gets hold of your certificate file we'll look at in a second, they could use the password and that together to impersonate your email address.&lt;/p&gt;

&lt;p&gt;Next you can go to your email and wait for the email with your new certificate attached.&lt;/p&gt;

&lt;p&gt;Now this certificate will be valid for 1 year, and then you'll have to get a new one. 1 year might not seem that long but actually it's pretty good. Even if you were to buy one somewhere, they usually max out at 3 years, and a lot of other free ones used to be for like 30 days.&lt;/p&gt;

&lt;p&gt;Also you actually don't want it to be valid forever, because if somehow it got stolen, someone could just impersonate you forever&lt;br&gt;
until you realize it, or they could save it and use it years down the line at the perfect or worst opportunity.&lt;/p&gt;

&lt;p&gt;Whereas if it expires, even if the worst happens and someone is able to steal it, it's only useful to any bad guys for a limited time. However if you do find out it's stolen, you&lt;br&gt;
can actually report it stolen and they can invalidate it so it can't be used anymore. To do that you just use the link in the email along with the User code and Private code listed there.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#step-2-setup"&gt;
  &lt;/a&gt;
  Step 2 - Setup
&lt;/h6&gt;

&lt;p&gt;So download the zip file and extract the pfx&lt;br&gt;
certificate file somewhere you'll remember, and actually give it's own folder, it will make things easier later. You should also probably back it up, but since it's only valid for 1 year, as long as your email service saves your emails at least that a year, you could always just redownload the attachment.&lt;/p&gt;

&lt;p&gt;But again, you will need that password shown to you before. So now that you have your certificate, next we need to install it on our devices.&lt;/p&gt;

&lt;p&gt;First I'm gonna do on Windows and Outlook, and then on your iOS or mac for Apple Mail, since those are by far the most popular clients. Unfortunately the Gmail web client does not let you attach a certificate to get this verified thing. To be clear again though, that's just the gmail web interface, if you have a gmail email address it's fine, you just have to send the email with supporting software like Outlook or Apple mail or something.&lt;/p&gt;

&lt;p&gt;Alright now no matter what email client you're gonna use, even if you just want to use this on your phone, you'll still need to install this on Windows first, and I'll show you why in a second.&lt;/p&gt;

&lt;p&gt;To install it, just double click the pfx file you downloaded, and select 'current user', then click next.&lt;/p&gt;

&lt;p&gt;Here it will already have the file location entered so you can click next again, and here is where you need to enter the certificate password, which is the one from that page. On the import options, the only one you might want to change, if you want to change the password later, is to check the box to enable&lt;br&gt;
"Mark this key as exportable".&lt;/p&gt;

&lt;p&gt;I'm not going to get into how to re-export the key and all that, that's something you can look up by yourself.&lt;/p&gt;

&lt;p&gt;And that's because as the file is delivered here, it should work on all the devices.&lt;/p&gt;

&lt;p&gt;You might also choose the option that makes you enter the password every time you want to use it, but that might be a pain, so it's up to you, I didn't bother.&lt;/p&gt;

&lt;p&gt;Also I want to be clear the settings you choose are only going to apply on this Windows computer, it's not changing the certificate file in any way, it's just importing it into Windows with these settings.&lt;/p&gt;

&lt;p&gt;On the next page, just let it automatically select the certificate store, hit next, then finish, and it should say import was successful.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#step-3-get-the-intermediate-certificates-for-the-authority"&gt;
  &lt;/a&gt;
  Step 3 - Get the intermediate certificates for the authority
&lt;/h6&gt;

&lt;p&gt;Next, before we configure our email clients, there is one more important step that might be necessary for certain software, which is to get the intermediate certificates for the authority, but don't worry it's way easier than it sounds.&lt;/p&gt;

&lt;p&gt;In the start menu just type &lt;code&gt;certificate&lt;/code&gt; and click the result called &lt;code&gt;Manage User Certificates&lt;/code&gt;. There's another one called &lt;code&gt;manage computer certificates&lt;/code&gt;, but that's different the one we're looking for is not going to show up in there.&lt;/p&gt;

&lt;p&gt;Now this will bring up a window showing any other certificates for the user, which there are many for all sorts of purposes, but we want to go to &lt;code&gt;Personal&lt;/code&gt;, then &lt;code&gt;Certificates&lt;/code&gt;, and look for the one that has our email address.&lt;/p&gt;

&lt;p&gt;If for some reason there's others in there that mentions your email address, just look for the one that says issued by Actalis, and also the expiration date is exactly 1 year from today when you registered it, plus or minus a day because of time zones.&lt;/p&gt;

&lt;p&gt;So double click the correct certificate and then go to the &lt;code&gt;Certification Path&lt;/code&gt; tab. This shows basically the &lt;code&gt;chain of custody&lt;/code&gt;(you can think of it) of signatures on your certificate, leading back to the root authority.&lt;/p&gt;

&lt;p&gt;Our is at the bottom, which was actually signed by an intermediate certificate, which was in turn signed by the root certificate. And yes this will become relevant it wasn't&lt;br&gt;
a useless tangent, but for now we need to actually export the intermediate certificate for later, you'll see why then.&lt;/p&gt;

&lt;p&gt;So click to highlight the middle one, then click &lt;code&gt;View Certificate&lt;/code&gt;, and go to the &lt;code&gt;Details&lt;/code&gt; tab.&lt;/p&gt;

&lt;p&gt;And also drag this window to the side a bit&lt;br&gt;
so it's not on top of the other one, you'll want to be able to read off the bottom one. So in this new window, click 'Copy to File', then click Next, then keep the default format and click next again, and it will ask you where to save it.&lt;/p&gt;

&lt;p&gt;Just browser to wherever you have the main&lt;br&gt;
&lt;code&gt;pfx&lt;/code&gt; file and put it in the same place just so they're together, that's why I suggested to give it's own folder. And for the name, you can just read off the window below and name the file the same as the certificate to make it easy. Then just hit next, then finish, and it will say successful.&lt;/p&gt;

&lt;h6&gt;
  &lt;a href="#optionnal-step"&gt;
  &lt;/a&gt;
  Optionnal step
&lt;/h6&gt;

&lt;p&gt;Now this next bit probably isn't actually be necessary, but I would just do it anyway, which is to do the same thing and export the root certificate also, which is the top one in the chain. Then just put it the folder with the other two and name it as the root name.&lt;/p&gt;

&lt;p&gt;That way you have a copy of the whole chain just in case, but you'll realistically only need the middle one and your personal one.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-4-configuring-the-email-client"&gt;
  &lt;/a&gt;
  Step 4 - Configuring the email client
&lt;/h4&gt;

&lt;p&gt;Alright now we're getting to the good part. At this point we have all the certificates ready to go and organized, so we can actually get into actually configuring the different software to send those emails.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#for-outlook"&gt;
  &lt;/a&gt;
  For Outlook
&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;If you use Apple Mail for Mac or Apple Mail for iOS, skip this part and scroll down.&lt;br&gt;
Don't work with neither Outlook for Web nor Windows mail app.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So now let's configure Outlook to send signed&lt;br&gt;
emails.&lt;/p&gt;

&lt;p&gt;And I'm using Office 365 Outlook specifically, which is the latest version but it should be basically the same for Outlook 2019 and 2016.&lt;/p&gt;

&lt;p&gt;Alright so in Outlook I'm assuming you already connected outlook to your email account so you can send emails from outlook and stuff like that.&lt;/p&gt;

&lt;p&gt;After you do that, go to the top left and click File &amp;gt; &lt;code&gt;Options&lt;/code&gt; at the bottom &amp;gt; Trust Center &amp;gt; &lt;code&gt;Trust Center Settings&lt;/code&gt; button &amp;gt; Email Security.&lt;/p&gt;

&lt;p&gt;The first thing to do is go through a few checkbox options.&lt;/p&gt;

&lt;p&gt;Here, make sure you DO check "Send clear text signed message when sending signed messages".&lt;/p&gt;

&lt;p&gt;This basically makes it like a regular email, we just send the signature along with it, so if the recipient's client for some reason doesn't support &lt;code&gt;S/MIME&lt;/code&gt; protocol, it's no big deal, they'll still be able to read it.&lt;/p&gt;

&lt;p&gt;Finally, if you want to enable signing emails automatically by default, at least for email addresses that have certificates, you can check "Add digital signatures to outgoing messages", but I would hold off on that for now until you've tested it out and made sure everything works first.&lt;/p&gt;

&lt;p&gt;Now what we need to do is click the settings button here.&lt;/p&gt;

&lt;p&gt;The window it pops up will probably be all blank the first time, but if it's not, such as if you're doing this for multiple emails, or maybe there's some other existing security policy in there, if there is, be sure to first click &lt;code&gt;New&lt;/code&gt;, which will create a new separate entry we can use.&lt;/p&gt;

&lt;p&gt;And in that case, if there was an existing one and you click New, the previous entry will be still available through the dropdown.&lt;/p&gt;

&lt;p&gt;Otherwise if you don't click new and just start changing stuff, it would overwrite your existing entry, which you don't want.&lt;/p&gt;

&lt;p&gt;In any case though, once you have a new blank entry, type in a name to make it easy to identify, like your email address then &lt;code&gt;email certificate&lt;/code&gt; or something like that.&lt;/p&gt;

&lt;p&gt;Then Uncheck the top checkbox talking about default security setting.&lt;/p&gt;

&lt;p&gt;We don't want these as default, just for their corresponding email accounts.&lt;/p&gt;

&lt;p&gt;Now, next to where it says 'Signing Certificate', click choose.&lt;/p&gt;

&lt;p&gt;This will bring up a window to select the certificate, you might have to click "more choices", but just look for the same certificate we've been using, which has your email address in it.&lt;/p&gt;

&lt;p&gt;Because we installed it to our Windows profile, it should be right in there, so click to select the right one, make sure it the info at the top is for the correct one, and then click OK.&lt;/p&gt;

&lt;p&gt;Ok this next bit is important so pay attention.&lt;/p&gt;

&lt;p&gt;You'll see it has filled in the rest of the boxes, but where it says "hash algorithm", we need to change that to "SHA256". If you keep it on SHA1, which is an outdated algorithm, it will work for some email software like Apple Mail, but for others it might not.&lt;/p&gt;

&lt;p&gt;In Gmail for example if you use SHA1, it will say "The signature uses an unsupported algorithm. The digital signature is not valid". Which is obviously not good, so make sure these are set to SHA256 and AES 256 Bit.&lt;/p&gt;

&lt;p&gt;Finally, make sure the bottom check box is enabled, the one talking about sending the certificates.&lt;/p&gt;

&lt;p&gt;I think it is on by default, just double check.&lt;/p&gt;

&lt;p&gt;Now we can just click OK on all the windows to go back down, and we are finally ready to test it out!&lt;/p&gt;

&lt;p&gt;So go to your inbox, click New Email, just make sure it's from the right one we just set up. Then add whatever text to the subject and body, this is just going to be a test email to yourself or another email account you have.&lt;/p&gt;

&lt;p&gt;But before you click send, we have to choose to sign it. This can be found at the top in the &lt;code&gt;Options&lt;/code&gt; tab, then look for the &lt;code&gt;Sign&lt;/code&gt; icon that looks like this ribbon. When you click it, it, will darken to show it's enabled, and you're ready to send!&lt;/p&gt;

&lt;p&gt;Before the moment a truth, a couple notes here. If you want to add the Sign button to the main tab for easier access like I did here, just right click the ribbon menu and hit &lt;code&gt;customize ribbon&lt;/code&gt;, then on the right, click &lt;code&gt;New Group&lt;/code&gt; to make a custom group, name it what you want, then on the left, just go to the dropdown to All Commands and scroll down to where you&lt;br&gt;
see the Sign icon.&lt;/p&gt;

&lt;p&gt;Now I have a second orange one which some other software added as a plugin, just ignore that.&lt;/p&gt;

&lt;p&gt;So just make sure the custom group is selected on the right, then click the 'Sign' icon on the left, and hit "Add", then OK. Now it should be right there always easily accessible on the main tab.&lt;/p&gt;

&lt;p&gt;Second note, you will have to remember to click and enable the &lt;code&gt;sign&lt;/code&gt; button for every email you send.&lt;/p&gt;

&lt;p&gt;You can go back to that other setting I showed you before, which will make it enabled by default, then if that's enabled, you can individually select when not to sign.&lt;/p&gt;

&lt;p&gt;Third note, if you do set up multiple certificates with multiple emails, outlook will automatically sign the emails with the correct one for that address, so you don't have to pick which certificate to use every time, it does it automatically.&lt;/p&gt;

&lt;p&gt;And now with that being said, we can click &lt;code&gt;Send&lt;/code&gt; and see what happens. If you sent it to yourself, you'll probably see it show up right in Outlook, and it will have a similar looking ribbon to the right of it.&lt;/p&gt;

&lt;p&gt;If it's a Gmail address, you can also look at the Gmail web interface and make sure it shows up right there too, with the green check. Although unfortunatelly you have to click the dropdown to see the green check, but whatever better than nothing.&lt;/p&gt;

&lt;p&gt;And you can also look on your phone, like Apple mail, and there it should show the check all good. It's also good to check it on your phone because you can be sure it shows up on devices even without any extra certificates installed yet, so you know it will show on everyone elses too.&lt;/p&gt;

&lt;p&gt;Note that on iPhone it will say it was signed with a trusted certificate, but if you click &lt;code&gt;view certificate&lt;/code&gt; it will actually say "Not Trusted". That's not a problem, that just means you personally have not installed that certificate on the phone, but obviously it's still signed by a trusted root certificate so it got the check mark and everything.&lt;/p&gt;

&lt;p&gt;What that feature is basically if you and your friend or someone created your own certificates, you can choose to trust them even if they weren't signed by an authority.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#for-an-ios-device"&gt;
  &lt;/a&gt;
  For an iOS Device
&lt;/h5&gt;

&lt;p&gt;Alright now let's move on to setting this&lt;br&gt;
up on an iOS device which should not take as long, we already did most of the legwork at the computer.&lt;/p&gt;

&lt;p&gt;To get the certificates to your phone, the easiest thing to do is email them to yourself. So take all three from the folder, and attach them to an email to yourself, then just open the email on your iphone.&lt;/p&gt;

&lt;p&gt;First we can install the personal certificate simply by clicking the attachment, and then just choose to install it on the iPhone. Then you need to go into the Settings app, and near the top you'll see a new thing that says "Profile Downloaded", so click into that.&lt;/p&gt;

&lt;p&gt;It should say something like "Identity Certificate", and will probably say "not signed" in red, which is fine we'll fix that. So just click Install, then type in your passcode. Click install again at the top, and then install yet again at the bottom.&lt;/p&gt;

&lt;p&gt;And now it will ask you for that password from before, so type that in. Then you click Next, and it will say "Profile&lt;br&gt;
Installed", so click Done. We're not done yet, but you can find the installed certificates or profiles on iOS, if you go to Settings &amp;gt; General &amp;gt; Profiles. In here notice how if you click into the profile we just installed, it says "Not Verified". That's because for some dumb reason, the iPhone doesn't fetch the intermediate certificate, whereas windows did, so we didn't have to worry about it before.&lt;/p&gt;

&lt;p&gt;If you were to try and send an email now without installing the intermediate certificate, it would actually show up to the other person like this, all in red, with a thing that says "Unstrusted Signature", not a good look, that's worse than nothing at all.&lt;/p&gt;

&lt;p&gt;The solution is really easy though, just go back to the email with the attachements, and click the attachment for the intermediate certificate, which is probably called "Actalis Client Authentication CA G3" or whatever you called it, and do the same thing as before. Click it, install it to the iphone, go to settings, install it from the 'profile downloaded' thing at the top, and it should not require any kind of password because this is a public certificate.&lt;/p&gt;

&lt;p&gt;You'll also notice that this one will probably say "Verified" in green unlike the other one that's red, and that's because this one was actually signed by the root certificate directly, which is preinstalled on basically every device, because it's a root, that's the point.&lt;/p&gt;

&lt;p&gt;And also, now that this one is installed, if you go into your personal certificate profile again, this time it should indeed say "Verified" in green, because now the phone has the whole chain, so it can verify it originally came from the root certificate.&lt;/p&gt;

&lt;p&gt;One quick important question you might have, is "wait a minute, if I had to install the intermediate certificate to make it show up as trusted, won't anyone I send an email to have to do that to on their phone?" and the answer is no. As long as you, the sender, have the whole chain installed, the phone sends the whole chain along with it in the email, so it doesn't matter if it's installed on the receiving device.&lt;/p&gt;

&lt;p&gt;So yes, it is stupid that the phone couldn't get the intermediate certificate automatically when you installed it, when windows can, but whatever.&lt;/p&gt;

&lt;p&gt;I'll also point out that I believe all of these free certificates issued by Actalis have the same intermediate certificate, you&lt;br&gt;
should only have to install that one once on your phone, even if you add more personal certificates for more email addresses.&lt;/p&gt;

&lt;p&gt;Of course you'll want to double check that.&lt;/p&gt;

&lt;p&gt;Also like I've said a couple times, you really should not have to install the third root certificate, but it's still good to check&lt;br&gt;
anyway.&lt;/p&gt;

&lt;p&gt;Alright so now that the certificates are installed,&lt;br&gt;
there's one more step, which is to enable the signing on outgoing emails. To do that, go back to Settings &amp;gt; Mail &amp;gt; Accounts&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Click the relevent one you're setting up &amp;gt; Click 'Account' again &amp;gt; Then 'Advanced'. Here near the bottom you'll see some options under &lt;code&gt;S/MIME&lt;/code&gt;. Click on 'Sign', and make sure you select&lt;br&gt;
the correct certificate for the email address if there are multipl certificate options there. Then toggle the thing to enable signing, and now it should say 'Yes' in the previous one next to sign. Also make sure that next to 'Encrypt by Default'&lt;br&gt;
that says No. We do not want that for our purposes and might&lt;br&gt;
not work at all depending on the recipient's device.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Finally I would just go into your other email accounts and make sure it didn't for some reason enable Signing for any other ones besides the one we just did. It shouldn't have, but just check a couple to make sure they say No.&lt;/p&gt;

&lt;p&gt;And now, we are again ready for the moment of truth. So go back to the Mail app, go into the relevant email account, compose an email and just send it to yourself, and it should come through&lt;br&gt;
and have a check mark next to it. And here's anothing thing, every time you set up a certificate on a new device, make sure you send a test email AND look at the test email on all your other devices. That way you can make sure nothing went wrong&lt;br&gt;
either on the sending side, or any receiving sides.&lt;/p&gt;

&lt;p&gt;The example I gave before, was in Outlook, I had the wrong hash algorithm set, and while it showed up fine in Apple Mail (it didn't care about the outdated algorithm), in Gmail it did give that error, so just check everywhere to be sure.&lt;/p&gt;

&lt;p&gt;Because we just set it up on iPhone, I will point out that on Mac the process is basically the same, you just open the email with the certificates, then you choose to install it to &lt;code&gt;Sign In&lt;/code&gt;, not iCloud like it has by default. For some reason for me it won't work with iCloud. However, for me, my Mac actually did sync&lt;br&gt;
the certificates from my phone to my mac automatically, so you might not even need to install them, you can check.&lt;/p&gt;

&lt;p&gt;Once they're installed on your Mac, now when you go to compose an image, by default you'll see a verification badge on the right next to the subject line to show it will be signed, which you can click to disable if you want. If you're on an android device it should really be a similar process to iPhone, where generally you just open the attachments for the certificates, click them to install them, then it's just a matter of whether your email app will support it.&lt;/p&gt;

&lt;p&gt;And of course no matter what email app you're using, you can just look up the instructions for how to enable signing. And like I said, I don't believe Gmail supports sending with &lt;code&gt;S/MIME&lt;/code&gt; either on Desktop interface, or the Gmail mobile apps.&lt;/p&gt;

&lt;p&gt;So now that you know how to get the badge&lt;br&gt;
set up on your email accounts, the last thing I want to point out is that if you do this on a work email account or work computer, I'm not totally sure if this will work all the time.&lt;/p&gt;

&lt;p&gt;For example, if your email is managed through an Azure Directory or something like that, they might have Microsoft Outlook set on all computers to disable those &lt;code&gt;S/MIME&lt;/code&gt; settings. At the same time, you might still be able to do it on your phone even if it's a work email.&lt;/p&gt;

&lt;p&gt;I really have no idea whether that's something companies can restrict, but I'm just pointing it out as a possibility, because I do know some companies actually use &lt;code&gt;S/MIME&lt;/code&gt; internally. Anyway though, hopefully now all of you learned something new.&lt;/p&gt;

&lt;p&gt;And I bet least a few of you are going to get some questions by people about how you got that cool checkmark next to your email. Be sure to give this post a like and also follow me because I make new videos every week, and let me know what you think in the&lt;br&gt;
comments.&lt;/p&gt;

&lt;p&gt;Noé Cabannes-Michel - &lt;a class="mentioned-user" href="https://dev.to/noe"&gt;@noe&lt;/a&gt;
 &lt;br&gt;
With ThioJoe - youtube.com/c/ThioJoe&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>beginners</category>
      <category>youtube</category>
      <category>smime</category>
    </item>
    <item>
      <title>CSS Pixel Art Generator</title>
      <author>Johnny Simpson</author>
      <pubDate>Sun, 21 Nov 2021 15:54:24 +0000</pubDate>
      <link>https://dev.to/smpnjn/css-pixel-art-generator-5d1</link>
      <guid>https://dev.to/smpnjn/css-pixel-art-generator-5d1</guid>
      <description>&lt;p&gt;Recently, I &lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;read an article&lt;/a&gt; outlining how to create CSS pixel art with box shadows. I thought it was a really cool idea - and thought it'd be interesting to make a generator with Javascript to let you create exportable pixel art from the browser using this effect. &lt;a href="https://codepen.io/smpnjn/pen/OJjGgPM"&gt;In the Codepen demo&lt;/a&gt; (shown below), you can draw your pixel creations, and then click "Generate CSS" to get your pixel art in CSS, which you can copy into your web pages. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-it%C2%A0works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h2&gt;

&lt;p&gt;As described &lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;in the article&lt;/a&gt;, we use scaled up box shadows to act as pixels on the screen. We can scale these up and down to make our pixel art bigger or smaller.&lt;br&gt;
Since each box shadow is 1px by 1px, we can create a piece of pixel art where every "pixel" is 1x1. If we want each pixel to be 20x20, we would simply use transform to scale it by 20x:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nt"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;scale&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="err"&gt;20&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To achieve the effect we are after, we then use Javascript to create a UI which lets us draw our pixel art creations. The code for the UI can be found on codepen here, or if you like, find it below:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/smpnjn/embed/OJjGgPM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview-of-javascript"&gt;
  &lt;/a&gt;
  Overview of Javascript
&lt;/h2&gt;

&lt;p&gt;To get this all to work, we have to use Javascript. The first step was generating a grid of pixels using a simple loop:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;drawing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;eraser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;mousedown&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`calc(&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="mf"&gt;0.825&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;rem + &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;px)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`calc(&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="mf"&gt;0.825&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;rem + &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;px)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-options&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`calc(&lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="mf"&gt;0.825&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;rem + &lt;/span&gt;&lt;span class="p"&gt;${(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;px)`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;createEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-x-coordinate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-y-coordinate&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;createEl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This ultimately creates about 40x40 pixels, or 1600 new HTML elements. You can easily scale this up for bigger experiments, but 40x40 works fine.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tracking-a-users-mouse-movements"&gt;
  &lt;/a&gt;
  Tracking a users mouse movements
&lt;/h2&gt;

&lt;p&gt;We can then track a user's mouse movements with three events: pointerdown, pointermove and pointerup. Since we have to apply this to all pixels, we use a loop to loop over each pixel to add the event.&lt;br&gt;
Then, if a user continues to hold down, we can track which pixel they are over using e.target, which returns the current HTML entity which is being hovered over on pointermove. If they are using the eraser, we can take that into consideration here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointerdown&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`#101532`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pixel-art-area&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointermove&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;drawing&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.pixel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`#101532`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;background&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pointerup&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;events&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mousedown&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we set up a few events on the colors and eraser, so we can track what tool and color is being selected:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.colors &amp;gt; div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.eraser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.colors &amp;gt; div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.color-picker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.colors &amp;gt; div&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;eraser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data-color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;.eraser&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;current&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When I saw the original article, I thought it was really cool to create pixel art with just CSS - but it would be even cooler to create a way to export pixel art creations - and it wasn't so hard with just a little bit of Javascript. Here are some useful links to the source code:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css"&gt;Article on CSS Pixel Art&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/smpnjn/pen/OJjGgPM"&gt;Source Code on Code Pen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/smpnjn/CSS-Pixel-Art"&gt;Source Code on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Singleton design pattern. JS/TS Examples.</title>
      <author>Vlad R</author>
      <pubDate>Sun, 21 Nov 2021 15:47:52 +0000</pubDate>
      <link>https://dev.to/ryabinin/singleton-design-pattern-jsts-examples-2f8l</link>
      <guid>https://dev.to/ryabinin/singleton-design-pattern-jsts-examples-2f8l</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href="#implementation"&gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#pros-and-cons"&gt;Pros and Cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#examples"&gt;Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So why do we need to know design patterns?&lt;/p&gt;

&lt;p&gt;First of all it helps you to save your time. Programming is not a new thing, a lot of problems has been already solved before. Lots of patterns and approaches have been invented and most of them are time tested. If you don't want to reinvent the wheel, you might be interested to know more about those preexisting patterns and approaches.&lt;br&gt;
So &lt;em&gt;design patterns are typical solutions to commonly occurring problems in programming.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In this short article we are going to cover the singleton design pattern. This pattern is a type of creational design patterns and probably one of the simplest ones.&lt;br&gt;
 &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The Singleton pattern is just a way of creating a single object that is shared amongst a bunch of different resources throughout your application without having to recreate that object or losing the information inside of it.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. It ensures that there is only one instance of a given class&lt;/strong&gt;&lt;br&gt;
For example we may create a logger class which prints logs and keeps them inside the class. Following this patters you have to have a single instance of the logger which prevents losing/overwriting the logs list.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. This pattern also provides a way to access the single instance globally&lt;/strong&gt;&lt;br&gt;
Going back to our logger class, it's pretty much obvious that we need it to be accessible from any file in our project. Because errors may appear anywhere and we want to log them.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#pros-and-cons"&gt;
  &lt;/a&gt;
  Pros and Cons &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Pros (Global variables vs Singleton):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Comparing to global variables, Singletons can not be modified(speaking of &lt;code&gt;var&lt;/code&gt; in JS).&lt;/li&gt;
&lt;li&gt;Unlike global variables it doesn't exist until instantiated.&lt;/li&gt;
&lt;li&gt;Another advantage is that you are absolutely sure of the number of instances.&lt;/li&gt;
&lt;li&gt;You can manage the state of that instance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons of using this design pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Someday when you have a lot of parts of your app rely on that Singleton obj it may became hard to change Singleton obj itself.&lt;/li&gt;
&lt;li&gt;As we already know Singleton's methods could be called from different parts of your app simultaneously at the same time which may cause a data/variables within this object to be overwritten/read incorrectly.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;FYI: there are more cons actually, but we're not going to cover all of them in this article.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#examples"&gt;
  &lt;/a&gt;
  Examples &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;JS Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// prevent modifying the instance property,&lt;/span&gt;
  &lt;span class="c1"&gt;// for example set it to null to create a second instance.&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c1"&gt;// prevent modifying/overwriting logs array.&lt;/span&gt;
  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

  &lt;span class="c1"&gt;// classes in JavaScript...&lt;/span&gt;
  &lt;span class="c1"&gt;//    may not have a private field named '#constructor'&lt;/span&gt;
  &lt;span class="c1"&gt;// so it's not possible to disable...&lt;/span&gt;
  &lt;span class="c1"&gt;//    calling constructor() {} in JS.&lt;/span&gt;
  &lt;span class="c1"&gt;// if you try new SingletonLogger()...&lt;/span&gt;
  &lt;span class="c1"&gt;//    with private constructor in TS it will throw an error&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Can not instantiate second singleton&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// getInstance should be static...&lt;/span&gt;
  &lt;span class="c1"&gt;//    to be able to call SingletonLogger.getInstance()&lt;/span&gt;
  &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// since #logs array is private, we need to create a getter&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: first err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;logger2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;logger2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: second err&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;logger2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err, second err]&lt;/span&gt;

&lt;span class="c1"&gt;// const logger3 = new SingletonLogger();&lt;/span&gt;
&lt;span class="c1"&gt;// Error: Can not instantiate second singleton&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;TS example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Usage:&lt;/span&gt;
&lt;span class="c1"&gt;// const singleton = new SingletonLogger(); // ...&lt;/span&gt;
&lt;span class="c1"&gt;//    TS won't let you do this&lt;/span&gt;
&lt;span class="c1"&gt;// Constructor of class 'SingletonLogger' is private...&lt;/span&gt;
&lt;span class="c1"&gt;//    and only accessible within the class declaration.&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;first err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: first err &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err] &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;sameSingleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;SingletonLogger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;second err&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;sameSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: second err &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sameSingleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;logsArray&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// log: [first err, second err] &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;To be honest I haven't found any use cases in Front End development where singleton design pattern would be &lt;strong&gt;really helpful&lt;/strong&gt;. Of course you can create the same logger as we did above or use the cache as a singleton object. But I personally think you will rarely have to use it.&lt;br&gt;
Anyways, this design pattern is a part of &lt;a href="https://en.wikipedia.org/wiki/Design_Patterns"&gt;Gang of Four design patterns&lt;/a&gt; and knowing all these patterns will take you to the next level as a dev.&lt;/p&gt;

&lt;p&gt;Thanks for reading! Any feedback is appreciated!😊&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@campoilucas"&gt;Lucas Campoi&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>oop</category>
      <category>designpatterns</category>
    </item>
    <item>
      <title>Token based authentication in nodejs</title>
      <author>Utkarsh Singh</author>
      <pubDate>Sun, 21 Nov 2021 15:38:27 +0000</pubDate>
      <link>https://dev.to/singhutkarshh/token-based-authentication-in-nodejs-4amm</link>
      <guid>https://dev.to/singhutkarshh/token-based-authentication-in-nodejs-4amm</guid>
      <description>&lt;p&gt;There are times when we need to authenticate the user before giving him access to specific pages on our website.This authentication ensures that user has access to only those data that he has privileges on.&lt;/p&gt;

&lt;p&gt;An entry level programmer would just fetch username and password stored in database at the time of login and if they match would give him access , which is not wrong but only half  a step in the process of authentication.&lt;/p&gt;

&lt;p&gt;It is also necessary to ensure that of all the data stored in database only data related to user is shown.&lt;/p&gt;

&lt;p&gt;This can be achieved in two ways:&lt;br&gt;
1- Token based authentication(using jwt-jsonWebToken)&lt;br&gt;
2- Session based authentication&lt;/p&gt;

&lt;p&gt;Today we will talk and implement token based authentication in NodeJs.&lt;/p&gt;

&lt;p&gt;1- Install following packages and dependencies which we are going to work with - &lt;br&gt;
we will build our server with express , jsonWebToken is library used for creating and verifying tokens and dotenv for storing our secrets in .env file that will not be visible to others.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save express jsonWebToken dotenv
npm install -D nodemon
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;2- .env file contains two things:&lt;br&gt;
1-SECRET_ACCESS_TOKEN&lt;br&gt;
2-REFRESH_TOKEN&lt;/p&gt;

&lt;p&gt;Secret access token is a secret code that  we use to verify ourself as creator of tokens and same secret is used while verifying tokens too.&lt;/p&gt;

&lt;p&gt;Refresh tokens are used to create new access token once they expire.&lt;br&gt;
(We will not be implemeting refresh tokens for now)&lt;br&gt;
e.g. -&lt;br&gt;
These tokens can be created randomly using encrypt library in nodejs.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;SECRET_ACCESS_TOKEN="9c2fa79645d6210a31e1cfb8435f06d5c10d9c7e5e80069e91a52fc870b05409"
SECRET_REFRESH_TOKEN="f1f0e9c17f296226431f4468ed329781b3b774583c86462247576c2d92f01900"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;3-Create a basic server in app.js file containing  following code and start the server with nodemon.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require("dotenv").config();
const express = require("express");
const app = express();
const jwt = require("jsonwebtoken");

app.get("/", (req, res) =&amp;gt; {
    res.status(200).send("This is homepage!");
})

app.listen(process.env.PORT, () =&amp;gt; {
     console.log("Server started!");
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;4- Now we will create a new route("/login) that  will check for user id and password at the time of login and generate token for the same user that  we will pass in headers with every request we make ever after.&lt;br&gt;
After authentication is successful we go ahead and create a token using jwt.sign(user,token) , it signs the token with the user we enter and will return the same user when we will verify the token.&lt;br&gt;
If authentication fails , we tell user to enter correct credentials.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const app = express();
const jwt = require("jsonwebtoken");
require("dotenv").config();

app.get("/", (req, res) =&amp;gt; {
    res.status(200).send("This is homepage!");
})

app.post("/login", (req, res) =&amp;gt; {
    const {username , password} = req.body; //get username and password that we passed client side.

    //Authenticate with username and password stored in database.Do it yourself!

   if(Authentication is successfull)
   {

   //Create a token signed by username

      const user = {name : req.body.username}
      const accessToken = jwt.sign(user , process.env.SECRET_ACCESS_TOKEN);
      res.send({accessToken : accessToken});
   }
   else
    {
      res.send("Wrong Credentials!");
    }
})

app.listen(process.env.PORT, () =&amp;gt; {
     console.log("Server started!");
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;5- Now we have created a token and sent it to client side , this token will be passed in headers  with every request  to authenticate for the user and show him data related to user  only.&lt;br&gt;
For verifying we will create a middleware(autenticateToken).It takes access token from the headers that is passed client side and verifies it using jwt.verify(token , secret-access-token , (error,user)=&amp;gt;{})&lt;br&gt;
.The callback returns user info  that  is saved in res so that it is accessible in our route;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;   if(Authentication is successfull)
   {

   //Create a token signed by username

      const user = {name : req.body.username}
      const accessToken = jwt.sign(user , process.env.SECRET_ACCESS_TOKEN);
      res.send({accessToken : accessToken});
   }
   else
    {
      res.send("Wrong Credentials!");
    }
})

const authenticateToken = (req,res,next) =&amp;gt;{

  // We will pass token in the following format =&amp;gt; "token"

  const accessToken = req.headers['authorization'];

  if (accessToken == null)
  return res.sendStatus(401);

  jwt.verify(accessToken , process.env.SECRET_ACCESS_TOKEN,(err,data)=&amp;gt;{
    if (err) return res.status(402).send(err);
    req.user = data;
    next();
  })
}

app.listen(process.env.PORT, () =&amp;gt; {
     console.log("Server started!");
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;6 -It verifies the token and in callback return error and the user info that we can use to filter out contents from our database , since here we are not connected to a database we will create an array of posts to check if token works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const posts = [{
  {username : "Bob" , title:"superman" , serial : 1},
  {username : "Allen" , title:"Batman" , serial : 2},
  {username : "Ray" , title:"Iron Man" , serial : 3}
 }];
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;7 - We create a new route("/posts") to test our tokens and add this middleware in our "/posts" route and then filter our content out with our username.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt; const posts = [{
  {username : "Bob" , title:"superman" , serial : 1},
  {username : "Allen" , title:"Batman" , serial : 2},
  {username : "Ray" , title:"Iron Man" , serial : 3}
 }];

app.get("/posts", authenticateToken , (req,res)=&amp;gt;{
    res.json(posts.filter((post)=&amp;gt;  post.username == req.user.name));
});


const authenticateToken = (req,res,next) =&amp;gt;{

  // We will pass token in the following format =&amp;gt; "token"

  const accessToken = req.headers['authorization'];

  if (accessToken == null)
  return res.sendStatus(401);

  jwt.verify(accessToken , process.env.SECRET_ACCESS_TOKEN,(err,data)=&amp;gt;{
    if (err) return res.status(402).send(err);
    req.user = data;
    next();
  })
}

app.listen(process.env.PORT, () =&amp;gt; {
     console.log("Server started!");
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;/p&gt;

&lt;p&gt;if we passed username as Bob we get :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{username : "Bob" , title:"superman" , serial : 1}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is how we authenticate using tokens and filter out data of our user.&lt;br&gt;
This token can also be set for automatic expiry of 1 min(or as we like) by passing in  an expiry time jwt.sign(user,SECRET_ACCESS_TOKEN , 3600).&lt;/p&gt;

&lt;p&gt;Complete  Code :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require("express");
const app = express();
const jwt = require("jsonwebtoken");
require("dotenv").config();

 const posts = [{
  {username : "Bob" , title:"superman" , serial : 1},
  {username : "Allen" , title:"Batman" , serial : 2},
  {username : "Ray" , title:"Iron Man" , serial : 3}
 }];

app.get("/posts", authenticateToken , (req,res)=&amp;gt;{
    res.json(posts.filter((post)=&amp;gt;  post.username == req.user.name));
});

app.post("/login", (req, res) =&amp;gt; {
    const {username , password} = req.body; //get username and password that we passed client side.

  //Authenticate with username and password stored in database.Do it yourself!

   if(Authentication is successfull)
   {

   //Create a token signed by username

      const user = {name : req.body.username}
      const accessToken = jwt.sign(user , process.env.SECRET_ACCESS_TOKEN);
      res.send({accessToken : accessToken});
   }
   else
    {
      res.send("Wrong Credentials!");
    }
})

app.get("/", (req, res) =&amp;gt; {
    res.status(200).send("This is homepage!");
})

const authenticateToken = (req,res,next) =&amp;gt;{

  // We will pass token in the following format =&amp;gt; "token"

  const accessToken = req.headers['authorization'];

  if (accessToken == null)
  return res.sendStatus(401);

  jwt.verify(accessToken , process.env.SECRET_ACCESS_TOKEN,(err,data)=&amp;gt;{
    if (err) return res.status(402).send(err);
    req.user = data;
    next();
  })
}



app.listen(process.env.PORT, () =&amp;gt; {
     console.log("Server started!");
});

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;**Important - &lt;/p&gt;

&lt;p&gt;We usually create an access token and refresh token seperately.Access token have an expiry that are refreshed by refresh token by creating a seperate function.**&lt;/p&gt;

&lt;p&gt;Hope it helps!&lt;/p&gt;

</description>
      <category>node</category>
      <category>webdev</category>
      <category>backend</category>
    </item>
    <item>
      <title>Weekly Digest 46/2021</title>
      <author>Marco Biedermann</author>
      <pubDate>Sun, 21 Nov 2021 15:25:50 +0000</pubDate>
      <link>https://dev.to/marcobiedermann/weekly-digest-462021-4hbn</link>
      <guid>https://dev.to/marcobiedermann/weekly-digest-462021-4hbn</guid>
      <description>&lt;p&gt;Welcome to my Weekly Digest #46 of this year.&lt;/p&gt;

&lt;p&gt;This weekly digest contains a lot of interesting and inspiring articles, videos, tweets, podcasts, and designs I consumed during this week.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#interesting-articles-to-read"&gt;
  &lt;/a&gt;
  Interesting articles to read
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#flip-invert-and-reverse"&gt;
  &lt;/a&gt;
  Flip, Invert, and Reverse
&lt;/h3&gt;

&lt;p&gt;Chuan is going to introduce &lt;strong&gt;3&lt;/strong&gt; kinds of transformations for the &lt;em&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/SVG/Element/path"&gt;SVG path&lt;/a&gt;&lt;/em&gt; commands. Specifically for &lt;code&gt;h/H&lt;/code&gt; and &lt;code&gt;v/V&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://yuanchuan.dev/flip-invert-reverse"&gt;Flip, Invert, and Reverse&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-shadow-palette-generator"&gt;
  &lt;/a&gt;
  Introducing “Shadow Palette Generator”
&lt;/h3&gt;

&lt;p&gt;In order to create lush, realistic shadows in CSS, we need to use multiple layers and colors. How do we come up with all of the parameters, though? I've built a tool that'll help.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.joshwcomeau.com/css/introducing-shadow-palette-generator/"&gt;Introducing "Shadow Palette Generator"&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-position-sticky-with-css-grid"&gt;
  &lt;/a&gt;
  Using Position Sticky With CSS Grid
&lt;/h3&gt;

&lt;p&gt;How to make position sticky work with CSS grid items&lt;/p&gt;

&lt;p&gt;&lt;a href="https://ishadeed.com/article/position-sticky-css-grid/"&gt;Using Position Sticky With CSS Grid - Ahmad Shadeed&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#parallax-powered-by-css-custom%C2%A0properties"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Parallax Powered by CSS Custom Properties&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Good friend Kent C. Dodds has recently dropped his &lt;a href="https://kentcdodds.com/"&gt;new website&lt;/a&gt; which had a lot of work go into it. I was fortunate enough that Kent reached out a while back and asked if I could come up with some “whimsy” for the site.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/parallax-powered-by-css-custom-properties/"&gt;Parallax Powered by CSS Custom Properties&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#some-great-videos-i-watched-this-week"&gt;
  &lt;/a&gt;
  Some great videos I watched this week
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#the-new-responsive-design"&gt;
  &lt;/a&gt;
  The new responsive design
&lt;/h3&gt;

&lt;p&gt;Join us as we discuss the latest updates on UI styling, DevTools, and the evolution of responsive design.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dhrX_biPH8c"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#new-in-chrome-96-improvements-for-installed-pwas-priority-hints-and-more"&gt;
  &lt;/a&gt;
  New in Chrome 96: Improvements for installed PWAs, Priority Hints, and more!
&lt;/h3&gt;

&lt;p&gt;Chrome 96 is rolling out now! There are two new properties in the web app manifest. The id property allows you to specify a unique ID for your PWA, and the protocol_handlers property allows you to automatically register your PWA as a protocol handler upon installation.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/PPukHsOH_BI"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/ChromiumDev"&gt;Google Chrome Developers&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#introducing-the-new-pagespeed-insights"&gt;
  &lt;/a&gt;
  Introducing the new PageSpeed Insights
&lt;/h3&gt;

&lt;p&gt;Introducing the new PageSpeed Insights: a more intuitive way to measure performance &amp;amp; improve it using real-world and lab data.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/V6mAT3yZXzA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/addyosmani"&gt;Addy Osmani&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-code-rectangular-collision-detection"&gt;
  &lt;/a&gt;
  How to Code: Rectangular Collision Detection
&lt;/h3&gt;

&lt;p&gt;Rectangular collision detection is a must-know when it comes to video game development. It's a way to tell when two objects touch, so you can call some sort of reactionary event in return, such as gaining a power-up, or ending the game.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/_MyPLZSGS3s"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/christopher4lis"&gt;Chris Courses&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react-location-better-than-react-router"&gt;
  &lt;/a&gt;
  React Location: Better than React Router?
&lt;/h3&gt;

&lt;p&gt;React Router has been the best in class router for years now. But now the creator of React Query, Tanner Linsley, has developed and just released a new router for the Tanstack named React Location.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/i8kner-Yrj0"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jherr"&gt;Jack Herrington&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useful-github-repositories"&gt;
  &lt;/a&gt;
  Useful GitHub repositories
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#yq"&gt;
  &lt;/a&gt;
  yq
&lt;/h3&gt;

&lt;p&gt;yq is a portable command-line YAML processor&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/mikefarah"&gt;
        mikefarah
      &lt;/a&gt; / &lt;a href="https://github.com/mikefarah/yq"&gt;
        yq
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      yq is a portable command-line YAML processor
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
yq&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/mikefarah/yq/workflows/Build/badge.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AO2Sc6KR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/mikefarah/yq/workflows/Build/badge.svg" alt="Build"&gt;&lt;/a&gt;  &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/8b5878aaff796a87e677f801f71328cefbeb3f271667fa905985723edb0edc62/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6d696b6566617261682f79712e737667"&gt;&lt;img src="https://camo.githubusercontent.com/8b5878aaff796a87e677f801f71328cefbeb3f271667fa905985723edb0edc62/68747470733a2f2f696d672e736869656c64732e696f2f646f636b65722f70756c6c732f6d696b6566617261682f79712e737667" alt="Docker Pulls"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/7df9a0536eaceb68de3acf49da40d8b5af4e8f5002519415ecd52fe79a69a1ed/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f6d696b6566617261682f79712f746f74616c2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/7df9a0536eaceb68de3acf49da40d8b5af4e8f5002519415ecd52fe79a69a1ed/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f646f776e6c6f6164732f6d696b6566617261682f79712f746f74616c2e737667" alt="Github Releases (by Release)"&gt;&lt;/a&gt; &lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/48d8e37115639a6bc4f8de92965f06b5c087c3e7e509d27af3b17bde59d787f8/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6d696b6566617261682f7971"&gt;&lt;img src="https://camo.githubusercontent.com/48d8e37115639a6bc4f8de92965f06b5c087c3e7e509d27af3b17bde59d787f8/68747470733a2f2f676f7265706f7274636172642e636f6d2f62616467652f6769746875622e636f6d2f6d696b6566617261682f7971" alt="Go Report"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;a lightweight and portable command-line YAML processor. &lt;code&gt;yq&lt;/code&gt; uses &lt;a href="https://github.com/stedolan/jq"&gt;jq&lt;/a&gt; like syntax but works with yaml files as well as json. It doesn't yet support everything &lt;code&gt;jq&lt;/code&gt; does - but it does support the most common operations and functions, and more is being added continuously.&lt;/p&gt;
&lt;p&gt;yq is written in go - so you can download a dependency free binary for your platform and you are good to go! If you prefer there are a variety of package managers that can be used as well as docker, all listed below.&lt;/p&gt;
&lt;h2&gt;
Quick Usage Guide&lt;/h2&gt;
&lt;p&gt;Read a value:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yq e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.a.b[0].c&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file.yaml&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Pipe from STDIN:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;cat file.yaml &lt;span class="pl-k"&gt;|&lt;/span&gt; yq e &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.a.b[0].c&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; -&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Update a yaml file, inplace&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yq e -i &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.a.b[0].c = "cool"&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file.yaml&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Update using environment variables&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;NAME=mike yq e -i &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;.a.b[0].c = strenv(NAME)&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt; file.yaml&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Merge multiple files&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;yq ea '. as $item&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/mikefarah/yq"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#reactgridlayout"&gt;
  &lt;/a&gt;
  &lt;strong&gt;React-Grid-Layout&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;A draggable and resizable grid layout with responsive breakpoints, for React.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/react-grid-layout"&gt;
        react-grid-layout
      &lt;/a&gt; / &lt;a href="https://github.com/react-grid-layout/react-grid-layout"&gt;
        react-grid-layout
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A draggable and resizable grid layout with responsive breakpoints, for React.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React-Grid-Layout&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://travis-ci.org/STRML/react-grid-layout" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/09a2c167f2be0fb1db94086d3ab8c1dd9244a2219c7b84b23746c560102269a8/68747470733a2f2f7472617669732d63692e6f72672f5354524d4c2f72656163742d677269642d6c61796f75742e7376673f6272616e63683d6d6173746572" alt="travis build"&gt;&lt;/a&gt;
&lt;a href="https://cdnjs.com/libraries/react-grid-layout" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/549729e7443b6070747271afd449d2c058969b767acbbfd8457243ab87a47a3c/68747470733a2f2f696d672e736869656c64732e696f2f63646e6a732f762f72656163742d677269642d6c61796f75742e737667" alt="CDNJS"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.org/package/react-grid-layout" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/bb61e50f931dc704ee9a9fea2fa89d6ca22e65dd8bd148c7abe83d128712775a/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f72656163742d677269642d6c61796f75742e7376673f7374796c653d666c61742d737175617265" alt="npm package"&gt;&lt;/a&gt;
&lt;a href="https://github.com/react-grid-layout/react-grid-layout"&gt;&lt;img src="https://camo.githubusercontent.com/b09194e998b544b06f5333eac725778b43d10d0b2c22f5d6bac81c1560113586/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f72656163742d677269642d6c61796f75742e7376673f6d61784167653d32353932303030" alt="npm downloads"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;React-Grid-Layout is a grid layout system much like &lt;a href="http://packery.metafizzy.co/" rel="nofollow"&gt;Packery&lt;/a&gt; or
&lt;a href="http://dsmorse.github.io/gridster.js/" rel="nofollow"&gt;Gridster&lt;/a&gt;, for React.&lt;/p&gt;
&lt;p&gt;Unlike those systems, it is responsive and supports breakpoints. Breakpoint layouts can be provided by the user
or autogenerated.&lt;/p&gt;
&lt;p&gt;RGL is React-only and does not require jQuery.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c4c5ad848e7f3cbc45c44a115b0ab01ff36e81898893b1177440ae3522e40eb4/687474703a2f2f692e696d6775722e636f6d2f6f6f314e5436632e676966"&gt;&lt;img src="https://camo.githubusercontent.com/c4c5ad848e7f3cbc45c44a115b0ab01ff36e81898893b1177440ae3522e40eb4/687474703a2f2f692e696d6775722e636f6d2f6f6f314e5436632e676966" alt="BitMEX UI"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GIF from production usage on &lt;a href="https://www.bitmex.com" rel="nofollow"&gt;BitMEX.com&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[&lt;strong&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/" rel="nofollow"&gt;Demo&lt;/a&gt; | &lt;a href="https://github.com/react-grid-layout/react-grid-layout/CHANGELOG.md"&gt;Changelog&lt;/a&gt; | &lt;a href="https://codesandbox.io/s/5wy3rz5z1x?module=%2Fsrc%2FShowcaseLayout.js" rel="nofollow"&gt;CodeSandbox Editable demo&lt;/a&gt;&lt;/strong&gt;]&lt;/p&gt;
&lt;h2&gt;
Table of Contents&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#demos"&gt;Demos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#features"&gt;Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#usage"&gt;Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#responsive-usage"&gt;Responsive Usage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#providing-grid-width"&gt;Providing Grid Width&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#grid-layout-props"&gt;Grid Layout Props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#responsive-grid-layout-props"&gt;Responsive Grid Layout Props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#grid-item-props"&gt;Grid Item Props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout../../wiki/Users-recipes"&gt;User Recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#performance"&gt;Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/react-grid-layout/react-grid-layout#todo-list"&gt;TODO List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Demos&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/0-showcase.html" rel="nofollow"&gt;Showcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/1-basic.html" rel="nofollow"&gt;Basic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/2-no-dragging.html" rel="nofollow"&gt;No Dragging/Resizing (Layout Only)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/3-messy.html" rel="nofollow"&gt;Messy Layout Autocorrect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/4-grid-property.html" rel="nofollow"&gt;Layout Defined on Children&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/5-static-elements.html" rel="nofollow"&gt;Static Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/6-dynamic-add-remove.html" rel="nofollow"&gt;Adding/Removing Elements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/7-localstorage.html" rel="nofollow"&gt;Saving Layout to LocalStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/8-localstorage-responsive.html" rel="nofollow"&gt;Saving a Responsive Layout to LocalStorage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/9-min-max-wh.html" rel="nofollow"&gt;Minimum and Maximum Width/Height&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/10-dynamic-min-max-wh.html" rel="nofollow"&gt;Dynamic Minimum and Maximum Width/Height&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/11-no-vertical-compact.html" rel="nofollow"&gt;No Vertical Compacting (Free Movement)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/12-prevent-collision.html" rel="nofollow"&gt;Prevent Collision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/13-error-case.html" rel="nofollow"&gt;Error Case&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/14-toolbox.html" rel="nofollow"&gt;Toolbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/15-drag-from-outside.html" rel="nofollow"&gt;Drag From Outside&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/16-bounded.html" rel="nofollow"&gt;Bounded Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/17-resizable-handles.html" rel="nofollow"&gt;Resizable Handles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/18-scale.html" rel="nofollow"&gt;Scaled Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://react-grid-layout.github.io/react-grid-layout/examples/19-allow-overlap.html" rel="nofollow"&gt;Allow Overlap&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
Projects Using React-Grid-Layout&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.bitmex.com/" rel="nofollow"&gt;BitMEX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/cloudwatch-dashboards-create-use-customized-metrics-views/" rel="nofollow"&gt;AWS CloudFront Dashboards&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/react-grid-layout/react-grid-layout"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#appsmith"&gt;
  &lt;/a&gt;
  Appsmith
&lt;/h3&gt;

&lt;p&gt;Quickly build any custom business software like admin panels, internal tools, dashboards, and more with pre-built UI widgets that connect to any database, GraphQL or REST API, controlling everything with Javascript.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/appsmithorg"&gt;
        appsmithorg
      &lt;/a&gt; / &lt;a href="https://github.com/appsmithorg/appsmith"&gt;
        appsmith
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Quickly build any custom business software like admin panels, internal tools, dashboards and more with pre-built UI widgets that connect to any database, GraphQL or REST API, controlling everything with Javascript.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;&lt;a href="https://app.appsmith.com/signup/?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=website&amp;amp;utm_campaign=null&amp;amp;utm_term=website" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--czrA_qfI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/appsmithorg/appsmithstatic/git-banner-new.png" width="100%" alt="Appsmith - The Frontend Tool for Any Backend"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;b&gt;&lt;a href="https://app.appsmith.com/signup/?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=website&amp;amp;utm_campaign=null&amp;amp;utm_term=website" rel="nofollow"&gt;Get Started&lt;/a&gt;&lt;/b&gt;
  •
  &lt;a href="https://docs.appsmith.com/?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=appsmith_docs&amp;amp;utm_campaign=null&amp;amp;utm_term=appsmith_docs" rel="nofollow"&gt;Docs&lt;/a&gt;
  •
  &lt;a href="https://community.appsmith.com/" rel="nofollow"&gt;Community&lt;/a&gt;
  •
  &lt;a href="https://docs.appsmith.com/tutorials" rel="nofollow"&gt;Tutorials&lt;/a&gt;
  •
  &lt;a href="https://app.appsmith.com/applications/602b8aef12ba0d29d3ec151c/pages/602b8aef12ba0d29d3ec151e" rel="nofollow"&gt;Events&lt;/a&gt;
  •
  &lt;a href="https://www.youtube.com/appsmith" rel="nofollow"&gt;Youtube&lt;/a&gt;
  •
  &lt;a href="https://discord.gg/rBTTVJp" rel="nofollow"&gt;Discord&lt;/a&gt;
  •
  &lt;a href="https://github.com/appsmithorg/appsmith./appsmith_templates.md"&gt;Templates&lt;/a&gt;
  &lt;/h3&gt;
&lt;p&gt;
Turn any datasource into an internal app in minutes. Appsmith lets you drag-and-drop components to build dashboards, write logic with JavaScript objects and connect to any API, database or GraphQL source
&lt;br&gt;
&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/appsmithorg/appsmithstatic/images/integrations.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pixaBd4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/appsmithorg/appsmithstatic/images/integrations.png" width="320px"&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/appsmithorg/appsmithstatic/how-it-works.svg"&gt;&lt;img width="100%" alt="MVC-Github-Readme" src="https://res.cloudinary.com/practicaldev/image/fetch/s--dnSwJ3px--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/appsmithorg/appsmithstatic/how-it-works.svg"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Quick Start&lt;/h2&gt;
&lt;p&gt;The fastest way to start with Appsmith is the cloud-hosted version. When you're ready, you can also host it yourself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Start building apps &lt;em&gt;immediately&lt;/em&gt; with &lt;a href="https://app.appsmith.com/signup/?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=website&amp;amp;utm_campaign=null&amp;amp;utm_term=website" rel="nofollow"&gt;Appsmith Cloud&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Install locally or on a private instance with &lt;a href="https://docs.appsmith.com/setup/docker?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=appsmith_docs&amp;amp;utm_campaign=null&amp;amp;utm_term=appsmith_docs" rel="nofollow"&gt;Docker&lt;/a&gt; &lt;em&gt;(Recommended)&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Deploy on a &lt;a href="https://docs.appsmith.com/setup/kubernetes?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=appsmith_docs&amp;amp;utm_campaign=null&amp;amp;utm_term=appsmith_docs" rel="nofollow"&gt;Kubernetes&lt;/a&gt; cluster&lt;/li&gt;
&lt;li&gt;Deploy to &lt;a href="https://docs.appsmith.com/setup/aws-ami?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=appsmith_docs&amp;amp;utm_campaign=null&amp;amp;utm_term=appsmith_docs" rel="nofollow"&gt;AWS with an AMI&lt;/a&gt; on the marketplace&lt;/li&gt;
&lt;li&gt;One-click deploy to &lt;a href="https://docs.appsmith.com/setup/heroku?utm_source=github&amp;amp;utm_medium=social&amp;amp;utm_content=appsmith_docs&amp;amp;utm_campaign=null&amp;amp;utm_term=appsmith_docs" rel="nofollow"&gt;Heroku&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;a href="https://www.youtube.com/watch?v=mzqK0QIZRLs" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X05xRqtu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/appsmithorg/appsmithstatic/images/build-tool.png" alt="Build an Internal Tool with Appsmith" width="410px"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/appsmithorg/appsmithstatic/animations/widgets.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8NtfiDa---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/appsmithorg/appsmithstatic/animations/widgets.gif" width="100%"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Use &lt;a href="https://docs.appsmith.com/widget-reference/button" rel="nofollow"&gt;ready components&lt;/a&gt; to build workflows in record time. Drag common elements like tables, charts, forms and more right into your app.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Includes text, forms, inputs, buttons, tables, images, charts, checkboxes, switches, radio buttons, datepickers, dropdowns, filepickers, containers, maps, modals, rich text editors, tabs &amp;amp;&lt;/em&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/appsmithorg/appsmith"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dribbble-shots"&gt;
  &lt;/a&gt;
  dribbble shots
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#plus-medicine-website-responsive-mobile"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Plus Medicine - Website Responsive Mobile&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XpqNJM_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2302891/screenshots/16898488/media/a8bc0985bae03824fab05e26b2c5464f.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XpqNJM_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2302891/screenshots/16898488/media/a8bc0985bae03824fab05e26b2c5464f.jpg" alt="by [Adalahreza](https://dribbble.com/shots/16898488-Plus-Medicine-Website-Responsive-Mobile)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16898488-Plus-Medicine-Website-Responsive-Mobile"&gt;Adalahreza&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#audio-books-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Audio Books App&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IxpKXKXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2303657/screenshots/16897169/media/80e2bd8c039aa393edddc3a09f7c2714.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IxpKXKXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2303657/screenshots/16897169/media/80e2bd8c039aa393edddc3a09f7c2714.png" alt="by [Natalia Berdnyk](https://dribbble.com/shots/16897169-Audio-Books-App)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16897169-Audio-Books-App"&gt;Natalia Berdnyk&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dashboard-design"&gt;
  &lt;/a&gt;
  Dashboard Design
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PbkRxVb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2253180/screenshots/16798476/media/d003cf4155d8e3e7dac5aadf255c4fe0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PbkRxVb7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/2253180/screenshots/16798476/media/d003cf4155d8e3e7dac5aadf255c4fe0.jpg" alt="by [AR Shakir](https://dribbble.com/shots/16798476-Dashboard-Design)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16798476-Dashboard-Design"&gt;AR Shakir&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#food-delivery-app"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Food Delivery App&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--euCWplKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5031392/screenshots/16895548/media/0248354bfe7e088dff4e30165be4b436.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--euCWplKb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.dribbble.com/users/5031392/screenshots/16895548/media/0248354bfe7e088dff4e30165be4b436.png" alt="by [Purrweb UI](https://dribbble.com/shots/16895548-Food-Delivery-App)" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://dribbble.com/shots/16895548-Food-Delivery-App"&gt;Purrweb UI&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#tweets"&gt;
  &lt;/a&gt;
  Tweets
&lt;/h2&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FFQmQVr5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1460604015578951681/pu/img/UyIUK6nXmreFsPdv.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--rVrHrktw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1427714836289425414/5iceg0nm_normal.jpg" alt="rauno profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        rauno
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @raunofreiberg
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Rebuilt my personal site into an operating system.&lt;br&gt;&lt;br&gt;&lt;a href="https://t.co/AsFyGToM4i"&gt;rauno.me&lt;/a&gt; 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      13:49 PM - 16 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1460605894635532291" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1460605894635532291" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1460605894635532291" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;



&lt;blockquote class="ltag__twitter-tweet"&gt;
      &lt;div class="ltag__twitter-tweet__media ltag__twitter-tweet__media__video-wrapper"&gt;
        &lt;div class="ltag__twitter-tweet__media--video-preview"&gt;
          &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OvZ7hA0i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/ext_tw_video_thumb/1460760048532180994/pu/img/41U6v8QSdXRKLA5n.jpg" alt="unknown tweet media content"&gt;
          &lt;img src="/assets/play-butt.svg" class="ltag__twitter-tweet__play-butt" alt="Play butt"&gt;
        &lt;/div&gt;
        &lt;div class="ltag__twitter-tweet__video"&gt;
          
            
          
        &lt;/div&gt;
      &lt;/div&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--XRmQuoG5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1460066970653675524/BeFkCnlb_normal.jpg" alt="Paco profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Paco
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/pacocoursey"&gt;@pacocoursey&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      Reading environment 
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      00:02 AM - 17 Nov 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1460760109009752066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1460760109009752066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1460760109009752066" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#picked-pens"&gt;
  &lt;/a&gt;
  Picked Pens
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#snowflakes-with-clippath-trigonometry"&gt;
  &lt;/a&gt;
  Snowflakes with clip-path trigonometry
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/michellebarker/embed/VwKdONM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/MicheBarks"&gt;Michelle Barker&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pure-css-3d-packaging"&gt;
  &lt;/a&gt;
  Pure CSS 3D Packaging
&lt;/h3&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/jh3y/embed/XWaGEgO?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;by &lt;a href="https://twitter.com/jh3yy"&gt;Jhey&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#podcasts-worth-listening"&gt;
  &lt;/a&gt;
  Podcasts worth listening
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#syntax-nextjs-12"&gt;
  &lt;/a&gt;
  Syntax – Next.js 12
&lt;/h3&gt;

&lt;p&gt;In this Hasty Treat, Scott and Wes talk about Next.js 12 and all of its hot new goodness and updates!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/7BiM4HCXAcVk39SAidsUry"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#call-with-kent-versioning-and-dependency-management-for-libraries"&gt;
  &lt;/a&gt;
  Call with Kent – Versioning and dependency management for libraries
&lt;/h3&gt;

&lt;p&gt;How did you approach versioning and dependency management when you were building this reusable component library at PayPal?&lt;/p&gt;

&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/3cjvg2DjKxIirnFR0BvTV9"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;Thank you for reading, talk to you next week, and stay safe! 👋&lt;/p&gt;

</description>
      <category>css</category>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Figma Webhook and Github Action to Automate Your Icon Library</title>
      <author>Akbar Nafisa</author>
      <pubDate>Sun, 21 Nov 2021 14:55:07 +0000</pubDate>
      <link>https://dev.to/akbarnafisa/figma-webhook-and-github-action-to-automate-your-icon-library-41bp</link>
      <guid>https://dev.to/akbarnafisa/figma-webhook-and-github-action-to-automate-your-icon-library-41bp</guid>
      <description>&lt;p&gt;This is the continuation of my &lt;a href="https://dev.to/akbarnafisa/automate-your-vue-icon-library-3a3n"&gt;previous post&lt;/a&gt; about the automation icon library in Vue, in this post I will share the upgrade version of it by using &lt;a href="https://www.figma.com/developers/api#webhooks_v2"&gt;Figma webhook&lt;/a&gt; and &lt;a href="https://docs.github.com/en/actions"&gt;Github action.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the full code and the documentation here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/akbarnafisa/my-icon"&gt;Icon library Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/akbarnafisa/figma-webhook"&gt;Webhook Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://my-icon.vercel.app/"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;p&gt;to build the workflow, I divide the process into several steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part 1: Setup Figma Project

&lt;ul&gt;
&lt;li&gt;create Figma Team&lt;/li&gt;
&lt;li&gt;list icon in Figma file&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Part 2: Setup Figma Webhook

&lt;ul&gt;
&lt;li&gt;listen to change from the file&lt;/li&gt;
&lt;li&gt;hit Github API to trigger the build process&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Part 3: Setup Github Action Workflow

&lt;ul&gt;
&lt;li&gt;export icon from Figma&lt;/li&gt;
&lt;li&gt;build the package and Create PR&lt;/li&gt;
&lt;li&gt;publish Icon to NPM&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Je7OR2j9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8en4ewz1cuz6dybickjs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Je7OR2j9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8en4ewz1cuz6dybickjs.png" alt="Image description" width="880" height="458"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-1-setup-figma-project"&gt;
  &lt;/a&gt;
  Part 1: Setup Figma Project
&lt;/h2&gt;

&lt;p&gt;Figma webhook will allow us to observe when specific events happen in file Figma team project, in each payload will contain file information. Currently, Figma does not have UI for the webhook, thus we must listen to the webhook through API.&lt;/p&gt;

&lt;p&gt;To create a new team, click on "Create new team" on your Figma dashboard, then you need to fill in the team information and team member, for pricing plan select Professional plan to be able to use webhook.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--96ta_6yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dc653ev6sjdqq5lcals.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--96ta_6yi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dc653ev6sjdqq5lcals.png" alt="Image description" width="448" height="628"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, create a new file in the team project and list icons that are going to be generated to the icon library.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BeBOuwPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnyfcs4195kau3ybf50w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BeBOuwPJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nnyfcs4195kau3ybf50w.png" alt="Image description" width="880" height="504"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2-setup-figma-webhook"&gt;
  &lt;/a&gt;
  Part 2: Setup Figma Webhook
&lt;/h2&gt;

&lt;p&gt;Because Figma does not have an interface for webhook we must create our own API to listen to change and notify it to Github.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#listen-to-change-from-the-file"&gt;
  &lt;/a&gt;
  Listen to change from the file
&lt;/h3&gt;

&lt;p&gt;To set up the webhook I learn from this &lt;a href="https://souporserious.com/getting-started-with-figma-webhooks/"&gt;amazing post&lt;/a&gt;, in that post, we will learn how to create a webhook locally and use &lt;a href="https://ngrok.com/"&gt;ngrok&lt;/a&gt; to expose a public URL for our local webserver. For our workflow, we will use &lt;code&gt;FILE_VERSION_UPDATE&lt;/code&gt; to listen to changes when the version of our Figma file is updated, more info about events that available in the webhook &lt;a href="https://www.figma.com/developers/api#webhooks-v2-events"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FIGMA_BASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;X-Figma-Token&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DEV_ACCESS_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FILE_VERSION_UPDATE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;team_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FIGMA_TEAM_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;passcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the request above, the response will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-11-20T04:35:40Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;add share_outline icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;FILE_VERSION_UPDATE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;file_key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;file_key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_team library&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0.0.1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;passcode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;passcode&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;protocol_version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;retries&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;2021-11-20T04:35:41Z&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;triggered_by&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Akbar Nafisa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;version_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;version_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;webhook_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;webhook_id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#hit-github-api-to-trigger-the-build-process"&gt;
  &lt;/a&gt;
  Hit Github API to trigger the build process
&lt;/h3&gt;

&lt;p&gt;Fo each &lt;code&gt;PING&lt;/code&gt;, we will check if the &lt;code&gt;file_name&lt;/code&gt; is a match, then hit Github API to trigger the build, we also send &lt;code&gt;event_type&lt;/code&gt;  to notify what process that we want to do for our Github action&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;passcode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;passcode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;timestamp&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; was updated at &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my_team library&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;ghDispatch&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sendStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;403&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ghDispatch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_BASE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;post&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;token &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Content-Type&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;application/json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;event_type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;update_icon&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;204&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`✅ Dispatch action was emitted`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`❌ Dispatch action was failed to be emitted`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`❌ Dispatch failed, &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the env variables that we use in this Figma webhook project, for full code you can check it &lt;a href="https://github.com/akbarnafisa/figma-webhook"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FIGMA_BASE_URL = https://api.figma.com/v2/webhooks
FIGMA_TEAM_ID = https://www.figma.com/files/team/{FIGMA_TEAM_ID}/{FIGMA_TEAM_NAME}
DEV_ACCESS_TOKEN = Figma token, more info [here](https://www.figma.com/developers/api#access-tokens)
GITHUB_BASE_URL = https://api.github.com/repos/{username}/${repository}/dispatches
GITHUB_TOKEN = Github token, set your token [here](https://github.com/settings/tokens)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#part-3-setup-github-action-workflow"&gt;
  &lt;/a&gt;
  Part 3: Setup Github Action Workflow
&lt;/h2&gt;

&lt;p&gt;We already established on how to build the icon in the &lt;a href="https://dev.to/akbarnafisa/automate-your-vue-icon-library-3a3n"&gt;previous post&lt;/a&gt;, in this step, we will try to export the icon from Figma, build it and publish it to NPM&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#export-icon-from-figma"&gt;
  &lt;/a&gt;
  Export Icon from Figma
&lt;/h3&gt;

&lt;p&gt;I learn how to export the Figma icon from this &lt;a href="https://blog.jacobtan.co/extracting-svgs-using-figma-api/"&gt;amazing article&lt;/a&gt;, the script already handles what we need on how to get all of the icons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fIoGqSwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s0g7rf47cusxpjf17o5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fIoGqSwx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2s0g7rf47cusxpjf17o5.png" alt="Image description" width="880" height="748"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we add the workflow to Github action, for the CI/CD process.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;icon-automation&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;repository_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;update_icon&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;icon_automation&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;figma icon automation&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Export icon&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;FIGMA_BASE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_BASE_URL }}&lt;/span&gt;
          &lt;span class="na"&gt;FIGMA_PROJECT_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_PROJECT_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;FIGMA_PROJECT_NODE_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_PROJECT_NODE_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;DEV_ACCESS_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DEV_ACCESS_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;yarn export-svgs&lt;/span&gt;
          &lt;span class="s"&gt;yarn optimize-svgs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#build-the-package-and-create-pr"&gt;
  &lt;/a&gt;
  Build the package and Create PR
&lt;/h3&gt;

&lt;p&gt;The new icon will be generated as a &lt;code&gt;Vue&lt;/code&gt; component in the &lt;code&gt;Build icon&lt;/code&gt; step, then commit and push the new icon in the &lt;code&gt;Commit SVGs&lt;/code&gt; step, we also get the version history description to use it as a committed label in the step &lt;code&gt;get-commit-label&lt;/code&gt;, but this step is unnecessary, you can use any commit message. Finally, we create a pull request to the main branch to be reviewed in &lt;code&gt;Create Pull Request&lt;/code&gt; step.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;icon-automation&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;repository_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;update_icon&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;icon_automation&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;figma icon automation&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;14'&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Export icon&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;FIGMA_BASE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_BASE_URL }}&lt;/span&gt;
          &lt;span class="na"&gt;FIGMA_PROJECT_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_PROJECT_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;FIGMA_PROJECT_NODE_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_PROJECT_NODE_ID }}&lt;/span&gt;
          &lt;span class="na"&gt;DEV_ACCESS_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DEV_ACCESS_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;yarn export-svgs&lt;/span&gt;
          &lt;span class="s"&gt;yarn optimize-svgs&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build icon&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn generate-svgs&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/github-script@v5&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get-commit-label&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
            &lt;span class="na"&gt;FIGMA_BASE_URL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_BASE_URL }}&lt;/span&gt;
            &lt;span class="na"&gt;FIGMA_PROJECT_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_PROJECT_ID }}&lt;/span&gt;
            &lt;span class="na"&gt;FIGMA_PROJECT_NODE_ID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.FIGMA_PROJECT_NODE_ID }}&lt;/span&gt;
            &lt;span class="na"&gt;DEV_ACCESS_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.DEV_ACCESS_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;script&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;const getCommitLabel = require('./packages/svgs/exporter/getCommitLabel.js')&lt;/span&gt;
            &lt;span class="s"&gt;return await getCommitLabel()&lt;/span&gt;
          &lt;span class="na"&gt;result-encoding&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;string&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Get result&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;echo "${{steps.get-commit-label.outputs.result}}"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Commit SVGs&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;git config user.name github-actions&lt;/span&gt;
          &lt;span class="s"&gt;git config user.email github-actions@github.com&lt;/span&gt;
          &lt;span class="s"&gt;git add .&lt;/span&gt;
          &lt;span class="s"&gt;git commit -m "feat(icon): ${{steps.get-commit-label.outputs.result}}"&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Create Pull Request&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;peter-evans/create-pull-request@v3.11.0&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GH_TOKEN }}&lt;/span&gt;
          &lt;span class="na"&gt;branch-suffix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;short-commit-hash&lt;/span&gt;
          &lt;span class="na"&gt;commit-message&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Auto Pull Request&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Add&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Icon:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;${{steps.get-commit-label.outputs.result}}"&lt;/span&gt;
          &lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Auto-created Pull Request&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The pull request example can be seen &lt;a href="https://github.com/akbarnafisa/my-icon/pull/28"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publish-icon-to-npm"&gt;
  &lt;/a&gt;
  Publish Icon to NPM
&lt;/h3&gt;

&lt;p&gt;Publishing icon to NPM can be automated using Github action, for this workflow, it is only triggered if there is a pull request from &lt;code&gt;create-pull-request/*&lt;/code&gt; branch and it's merged to the main branch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;publish-package&lt;/span&gt;
&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;closed&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;publish-package&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;contains(github.head_ref, 'create-pull-request/') &amp;amp;&amp;amp; github.event.pull_request.merged == &lt;/span&gt;&lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;NODE_AUTH_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.NPM_AUTH_TOKEN }}&lt;/span&gt;
    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# https://stackoverflow.com/a/67581515&lt;/span&gt;
    &lt;span class="c1"&gt;# 1. provide Personal Access Token for checkout@v2&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Checkout&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;submodules&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;recursive&lt;/span&gt;
          &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GH_TOKEN }}&lt;/span&gt;

    &lt;span class="c1"&gt;# 2. setup .npmrc it uses NODE_AUTH_TOKEN&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Setup .npmrc file for publish&lt;/span&gt;
      &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
      &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;12.x'&lt;/span&gt;
        &lt;span class="na"&gt;registry-url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;https://registry.npmjs.org'&lt;/span&gt;

    &lt;span class="c1"&gt;# 3. configure git user used to push tag&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Configure Git User&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.email "ci@your-site.com"&lt;/span&gt;
        &lt;span class="s"&gt;git config --global user.name "ci@$GITHUB_ACTOR"&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install dependencies&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn install&lt;/span&gt;

    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Publish&lt;/span&gt;
      &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;yarn lerna:new-version&lt;/span&gt;
        &lt;span class="s"&gt;yarn lerna:publish&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-it-up"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h2&gt;

&lt;p&gt;The combination of Figma webhook and Github action can be so powerful, compare to the previous workflow, we can update and publish icons without opening our editor, for the new flow we can add the icon, update the version, merge the pull request, and the icon library is already updated. I hope this post can give you some insight on how to automate the process for icon library by using Figma webhook and Github action and also I want you to explore what other workflow that can be automated!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>figma</category>
      <category>github</category>
    </item>
    <item>
      <title>Starting with React-Redux</title>
      <author>Mohit Maroliya</author>
      <pubDate>Sun, 21 Nov 2021 14:45:55 +0000</pubDate>
      <link>https://dev.to/mohitm15/starting-with-react-redux-1dno</link>
      <guid>https://dev.to/mohitm15/starting-with-react-redux-1dno</guid>
      <description>&lt;p&gt;Hello everyone, this is my first post on &lt;strong&gt;Dev.to&lt;/strong&gt;. In this post, I am trying to explain the use of &lt;strong&gt;Redux&lt;/strong&gt; in ReactJS with an example. Here, I have taken some references from YouTube and Google for information. I will first explain to you the need for &lt;strong&gt;Redux&lt;/strong&gt; and explain it with the code. For reference, you can check out Github to view the code anytime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://redux-starter-boilerplate.herokuapp.com/"&gt;View Live Demo&lt;/a&gt;            &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mohitm15/redux-boilerplate/tree/master/redux-boilerplate"&gt;View on Github&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-redux-"&gt;
  &lt;/a&gt;
  Why do we need Redux ?
&lt;/h2&gt;

&lt;p&gt;When a JavaScript Application grows big, it becomes difficult to manage its &lt;strong&gt;state&lt;/strong&gt;. For example, in the given architecture, if I want to use the state defined in Child_C of the Contact.js in the Child_B of the Home.js, then I had to do &lt;strong&gt;prop-drilling&lt;/strong&gt;, where I have to pass the &lt;strong&gt;state&lt;/strong&gt; as props over various components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrdGVNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ugzngpwex7cxfc74n40.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrdGVNV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ugzngpwex7cxfc74n40.png" alt="Prop-drilling in ReactJS" width="880" height="480"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But Redux solves this problem by managing the application's state with the help of a single global object called &lt;code&gt;Store.&lt;/code&gt; This provides consistency to the application and makes testing easy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#redux-architecture"&gt;
  &lt;/a&gt;
  Redux -Architecture
&lt;/h2&gt;

&lt;p&gt;The Architecture consists of &lt;strong&gt;4 components&lt;/strong&gt; mainly - &lt;code&gt;Action, Reducer, Store and View&lt;/code&gt;. And believe me, they work in the same way as their name suggests.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o6c7dVhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm42cl1lpmqwjlya0qn0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o6c7dVhF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rm42cl1lpmqwjlya0qn0.png" alt="Redux Architecture" width="416" height="238"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Action is a plain object that describes the intention to cause change, like adding or deleting a task in a To-do-List app.&lt;/li&gt;
&lt;li&gt;Reducer is a function that determines changes to an application state. Like in the To-do-List app, action will trigger a change in the value of state &lt;code&gt;task_Array&lt;/code&gt; that the reducer will determine. It returns the new state and tells the store how to do it. Simply, it uses the action it receives to determine the change.&lt;/li&gt;
&lt;li&gt;Store projects all the state variables to the view, which is the UI of the application.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's make our hands dirty and start coding with an example to understand &lt;strong&gt;Redux&lt;/strong&gt; more deeply. I will tell you the concept and later, you can start with your stuff to do with it. Also, I have added some tasks for deep understanding in the end.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-redux-boilerplate"&gt;
  &lt;/a&gt;
  Example - Redux Boilerplate.
&lt;/h2&gt;

&lt;p&gt;Here we try &lt;strong&gt;to create a webApp where we define the states in different components and perform onclick events from different components. The states we define are the &lt;code&gt;countValue&lt;/code&gt; and &lt;code&gt;darkMode&lt;/code&gt; enabling.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If you directly want to see the whole code, you can view it on Github. 🤠&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mohitm15/redux-boilerplate/tree/master/redux-boilerplate"&gt;View on Github&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-up-react-app"&gt;
  &lt;/a&gt;
  1. Setting Up React App
&lt;/h3&gt;

&lt;p&gt;Create a folder in your desktop named &lt;code&gt;redux-boilerplate&lt;/code&gt; and open it in the &lt;strong&gt;VSCode&lt;/strong&gt;. Now, open the terminal and create the react app.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npx create-react-app redux-boilerplate&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You’ll need to have Node &amp;gt;= 14.0.0 and npm &amp;gt;= 5.6 on your machine.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now add the Bootstrap by using the CDN link of CSS (&lt;a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/#css"&gt;here&lt;/a&gt;) and script link (&lt;a href="https://getbootstrap.com/docs/5.1/getting-started/introduction/#js"&gt;here&lt;/a&gt;) .&lt;/p&gt;

&lt;p&gt;If you are new , just simply copy the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; from both the links and paste it to the &lt;strong&gt;public&amp;gt;&amp;gt;index.html&lt;/strong&gt; file at appropriate place.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ProTip:&lt;/strong&gt;To check bootstrap added successfully, just simply paste the code to &lt;code&gt;App.js&lt;/code&gt; file and see red colored font.&lt;/p&gt;


&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import './App.css';
function App() {
  return (
    &amp;lt;&amp;gt;
      &amp;lt;h1 className="text-danger"&amp;gt; Hello World!&amp;lt;/h1&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#2-creating-navbar-and-shop-component"&gt;
  &lt;/a&gt;
  2. Creating NavBar and Shop Component
&lt;/h2&gt;

&lt;p&gt;Create a folder &lt;strong&gt;components&lt;/strong&gt; in &lt;code&gt;src&lt;/code&gt; folder. Now create a file &lt;code&gt;Navbar.js&lt;/code&gt; &amp;amp; another file &lt;code&gt;Shop.js&lt;/code&gt; both in components folder.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#navbarjs"&gt;
  &lt;/a&gt;
  NavBar.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from "react";

const Navbar = () =&amp;gt; {

  return (
    &amp;lt;div&amp;gt;
      &amp;lt;nav className="navbar navbar-expand-lg navbar-dark bg-dark"&amp;gt;
        &amp;lt;div className="container-fluid"&amp;gt;
          &amp;lt;a className="navbar-brand" href="/"&amp;gt;
            Redux BoilerPlate
          &amp;lt;/a&amp;gt;
          &amp;lt;button
            className="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent"
            aria-expanded="false"
            aria-label="Toggle navigation"
          &amp;gt;
            &amp;lt;span className="navbar-toggler-icon"&amp;gt;&amp;lt;/span&amp;gt;
          &amp;lt;/button&amp;gt;
          &amp;lt;div className="collapse navbar-collapse" id="navbarSupportedContent"&amp;gt;
            &amp;lt;ul className="navbar-nav me-auto mb-2 mb-lg-0"&amp;gt;
              &amp;lt;li className="nav-item"&amp;gt;
                &amp;lt;a className="nav-link active" aria-current="page" href="/"&amp;gt;
                  Home
                &amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
              &amp;lt;li className="nav-item"&amp;gt;
                &amp;lt;a className="nav-link" href="/about"&amp;gt;
                  About
                &amp;lt;/a&amp;gt;
              &amp;lt;/li&amp;gt;
            &amp;lt;/ul&amp;gt;
          &amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;

                &amp;lt;div className="form-check form-switch mx-4"&amp;gt;
                  &amp;lt;input className="form-check-input" type="checkbox" id="flexSwitchCheckDefault" /&amp;gt;
                  &amp;lt;label className="form-check-label text-light" htmlFor="flexSwitchCheckDefault"&amp;gt;Darkmode&amp;lt;/label&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
          &amp;lt;div&amp;gt;
            &amp;lt;button className="btn btn-info mx-1"&amp;gt;CountValue : 0 &amp;lt;/button&amp;gt;
          &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      &amp;lt;/nav&amp;gt;
    &amp;lt;/div&amp;gt;
  );
};

export default Navbar;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shopjs"&gt;
  &lt;/a&gt;
  Shop.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';

const Shop = () =&amp;gt; {

    return (
        &amp;lt;&amp;gt;
        &amp;lt;div className="container p-3"&amp;gt; 
        &amp;lt;div className={`alert alert-success` } role="alert"&amp;gt;
            &amp;lt;h2&amp;gt;Redux BoilerPlate&amp;lt;/h2&amp;gt;
        &amp;lt;/div&amp;gt;
            &amp;lt;h3 className="my-5"&amp;gt;Simple Starter template for redux-store&amp;lt;/h3&amp;gt;

            &amp;lt;div className="container my-5"&amp;gt;
                &amp;lt;h1 className="display-1"&amp;gt;This is LightMode&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;

            &amp;lt;div className="container d-flex"&amp;gt;
                &amp;lt;button className="btn-lg btn-success mx-4" &amp;gt; + &amp;lt;/button&amp;gt;
                    &amp;lt;h1 className="display-6"&amp;gt;You Count Value = 0 &amp;lt;/h1&amp;gt;
                &amp;lt;button className="btn-lg btn-danger mx-4" &amp;gt; - &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/&amp;gt;
    )
}

export default Shop;


&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Paste the above code in &lt;strong&gt;Navbar.js&lt;/strong&gt; &amp;amp; &lt;strong&gt;Shop.js&lt;/strong&gt; respectively .Add the components in &lt;strong&gt;App.js&lt;/strong&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Navbar from './components/Navbar';
import Shop from './components/Shop';
.
.
.
  return (
    &amp;lt;&amp;gt;
      &amp;lt;Navbar /&amp;gt;
       &amp;lt;div className="container p-3"&amp;gt;
        &amp;lt;Shop /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will show the navbar at top and Shop component on screen.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-installing-redux"&gt;
  &lt;/a&gt;
  3. Installing Redux
&lt;/h3&gt;

&lt;p&gt;To install the redux , just open a new tab in terminal and run &lt;br&gt;
          &lt;code&gt;npm i redux&lt;/code&gt;&lt;br&gt;
          &lt;code&gt;npm i react-redux&lt;/code&gt;&lt;br&gt;
          &lt;code&gt;npm i redux-thunk&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Get more info &lt;a href="https://www.npmjs.com/package/redux"&gt;here&lt;/a&gt; .&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#4-creating-actioncreator-and-reducers"&gt;
  &lt;/a&gt;
  4. Creating Action-Creator and Reducers
&lt;/h3&gt;

&lt;p&gt;Now we'll create action-creators and reducers function which will change the &lt;code&gt;countValue&lt;/code&gt; and enable &lt;code&gt;darkMode&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As discussed, action-creators create the action to change the state variable and reducer is a pure function that takes action &amp;amp; the previous state of the application and returns the new state.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Action consists of &lt;em&gt;type&lt;/em&gt; and &lt;em&gt;payload&lt;/em&gt; to be supplied to Reducer function. The type defines the action-type and the payload defines the value to be substituted with the previous one.&lt;/p&gt;

&lt;p&gt;To do this, we will create a folder name &lt;code&gt;state&lt;/code&gt; inside the &lt;code&gt;src&lt;/code&gt; folder. Inside the &lt;code&gt;src&lt;/code&gt; folder, we create two more folders :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;action-creators&lt;/li&gt;
&lt;li&gt;reducer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--61oJkAzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39n9pch22sbsmfjn9625.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--61oJkAzt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/39n9pch22sbsmfjn9625.png" alt="directory structure" width="167" height="160"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we create &lt;code&gt;index.js&lt;/code&gt; file in &lt;code&gt;action-creators&lt;/code&gt; folder and write code for action-creator. We will create action here.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export const increaseCount = (countValue) =&amp;gt; {
    return (dispatch) =&amp;gt; {
        dispatch ({
            type: 'increase',
            payload: countValue
        })
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;strong&gt;increaseCount&lt;/strong&gt; is a function that returns a function named &lt;code&gt;dispatch&lt;/code&gt; which dispatches type &amp;amp; payload.  &lt;/p&gt;

&lt;p&gt;Try to write action-creators for &lt;code&gt;decreaseCount&lt;/code&gt;, &lt;code&gt;enableDarkMode&lt;/code&gt; and &lt;code&gt;enableLightMode&lt;/code&gt; in the same file.&lt;/p&gt;

&lt;p&gt;You can compare your code with the full code of &lt;code&gt;state/action-creators/index.js&lt;/code&gt; from &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/state/action-creators/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now we make &lt;code&gt;Reducers&lt;/code&gt;. Reducers need not to be a single one, for the different states, we have different reducers. Like here, we'll create two reducers file named &lt;code&gt;countReducer.js&lt;/code&gt; and &lt;code&gt;darkmodeReducer.js&lt;/code&gt; inside &lt;code&gt;reducer&lt;/code&gt; folder, which will look after the &lt;code&gt;countValue&lt;/code&gt; and &lt;code&gt;darkMode&lt;/code&gt; state variables.&lt;/p&gt;

&lt;p&gt;Let's create &lt;code&gt;countReducer.js&lt;/code&gt; to change the count value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const reducer = (state=0, action) =&amp;gt; {
    if(action.type === 'increase') {
        return state +  action.payload;
    }
    else if(action.type === 'decrease') {
        return state - action.payload
    }
    else {
        return state;
    }

}

export default reducer;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see above, it takes the state variable and action from the action creator as a parameter and returns the modified state with the help of the action payload.&lt;/p&gt;

&lt;p&gt;Try to create &lt;code&gt;darkModeReducer.js&lt;/code&gt; by own first and compare your results from below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const reducer = (state= 'OFF', action) =&amp;gt; {
    if(action.type === 'darkmode') {
        state = action.payload;
    }
    else if(action.type === 'lightmode') {
        state = action.payload;
    }
    return state;
}

export default reducer;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h4&gt;

&lt;p&gt;Since for large complex applications, we know that we require many reducers and handling them individually is a messy task. So redux provides us &lt;a href="https://redux.js.org/api/combinereducers"&gt;&lt;code&gt;combineReducers&lt;/code&gt;&lt;/a&gt;, which combines all the reducer functions and export them as a single reducer function.&lt;/p&gt;

&lt;p&gt;For this, create a file &lt;code&gt;index.js&lt;/code&gt; in &lt;code&gt;reducer&lt;/code&gt; folder and paste the below code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { combineReducers } from "redux";
import countValueReducer from './countReducer';
import darkmodeReducer from './darkmodeReducer';

//combinnig all the reducers here
const reducer = combineReducers({
    countValue: countValueReducer,
    darkmode: darkmodeReducer
})

export default reducer;     
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-creating-store"&gt;
  &lt;/a&gt;
  5. Creating Store
&lt;/h3&gt;

&lt;p&gt;To recall, a store is a global place where all the things defined is exposed to all the application. Simply, every part of the application gets access to the store.&lt;/p&gt;

&lt;p&gt;Here, we will create a file &lt;code&gt;store.js&lt;/code&gt; inside the &lt;code&gt;state&lt;/code&gt; directory. Use to code below for &lt;code&gt;store.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { applyMiddleware, createStore } from "redux";
import thunk from "redux-thunk";
import reducer from "./reducer";

export const store = createStore(reducer,{}, applyMiddleware(thunk));

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have seen many new things here, let's understand them one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://redux.js.org/api/createstore"&gt;createStore&lt;/a&gt;&lt;/strong&gt; : It takes the reducers, preloaded state and enhancer function(optional) to create the store. It returns an object that holds the complete state of your app.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://redux.js.org/api/applymiddleware"&gt;applyMiddleware&lt;/a&gt;&lt;/strong&gt; : Returns a store enhancer that applies the given middleware.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/reduxjs/redux-thunk#readme"&gt;redux-thunk&lt;/a&gt;&lt;/strong&gt;: Helps to execute asynchronous functions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hurray! store is created. ✨&lt;/p&gt;

&lt;p&gt;Now I want to give access of store to the overall application. So we go to the file &lt;code&gt;src/index.js&lt;/code&gt; (main index.js file) and import the store here. The file will look like&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import React from 'react';
.
.
.
import { Provider } from 'react-redux';
import { store } from './state/store';

ReactDOM.render(
 .
 .
    &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App /&amp;gt;
    &amp;lt;/Provider&amp;gt;
 .
 .
);

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See complete file &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/index.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also we create a file &lt;code&gt;index.js&lt;/code&gt; inside &lt;code&gt;state&lt;/code&gt; directory.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IaS4mPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgi898gvhcwvrczu0mp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IaS4mPA3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcgi898gvhcwvrczu0mp.png" alt="Image description" width="171" height="114"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will increase the accessbility of action-creators as we export all the action-creators from here to all the components like &lt;em&gt;Navbar.js&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export * as actionCreators from './action-creators/index';

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-second-last-step"&gt;
  &lt;/a&gt;
  6. Second Last Step
&lt;/h3&gt;

&lt;p&gt;As far as now, we have not added any function to the &lt;code&gt;+&lt;/code&gt;/ &lt;code&gt;-&lt;/code&gt; button and &lt;code&gt;darkmode&lt;/code&gt; toggle, but now we got access to the state variables through store, we can use them to display their values on the UI.&lt;/p&gt;

&lt;p&gt;To access the state, we use &lt;a href="https://react-redux.js.org/api/hooks#useselector"&gt;&lt;code&gt;useSelector&lt;/code&gt;&lt;/a&gt; hook. In the &lt;code&gt;navbar.js&lt;/code&gt; file we import the hook first using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector } from "react-redux";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then use it as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.
 const countValue = useSelector((state) =&amp;gt; state.countValue);
 const darkmode = useSelector((state) =&amp;gt; state.darkmode);
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And change the value of countValue from &lt;code&gt;0 to {countValue}&lt;/code&gt;, like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button className="btn btn-info mx-1"&amp;gt;CountValue : {countValue}&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So far we have use the countValue state, we also need to use &lt;code&gt;darkMode&lt;/code&gt; state in &lt;code&gt;App.js&lt;/code&gt; and &lt;code&gt;Shop.js&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#appjs"&gt;
  &lt;/a&gt;
  App.js
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector } from "react-redux";
import './App.css';
import Navbar from './components/Navbar';
import Shop from './components/Shop';

function App() {

const darkmode = useSelector(state =&amp;gt; state.darkmode);

let darkmodeStyle = {
        backgroundColor:'#2d2d2d',
        color:'whitesmoke'
    }

  return (
    &amp;lt;&amp;gt;
      &amp;lt;Navbar /&amp;gt;
      &amp;lt;div className="container p-3" style={darkmodeStyle}&amp;gt;
        &amp;lt;Shop /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/&amp;gt;
  );
}

export default App;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In &lt;code&gt;shop.js&lt;/code&gt;, just simply import the &lt;code&gt;useSelector&lt;/code&gt; hook like in &lt;code&gt;Navbar.js&lt;/code&gt; using&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector } from "react-redux";
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and then use it as inside &lt;code&gt;Shop&lt;/code&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.
 const darkmode = useSelector((state) =&amp;gt; state.darkmode);
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#7-last-step"&gt;
  &lt;/a&gt;
  7. Last Step
&lt;/h3&gt;

&lt;p&gt;Now we have access to the variables that we use to bring the changes on view.&lt;/p&gt;

&lt;p&gt;Here, state values will be first changed by the user from the front-end. Then, we need to generate those actions, which triggers reducer functions and finally alter the values of the state on view.&lt;/p&gt;

&lt;p&gt;To do this we use &lt;a href="https://react-redux.js.org/api/hooks#usedispatch"&gt;&lt;code&gt;useDispatch&lt;/code&gt;&lt;/a&gt; hook, which dispatches the action-creators and &lt;a href="https://redux.js.org/api/bindactioncreators"&gt;&lt;code&gt;bindActionCreators&lt;/code&gt;&lt;/a&gt; to bind all action creators.&lt;/p&gt;

&lt;p&gt;Time to use them!&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;Navbar.js&lt;/code&gt; and &lt;code&gt;Shop.js&lt;/code&gt;, import them as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import { useSelector, useDispatch } from "react-redux";
import { bindActionCreators } from 'redux';
import { actionCreators } from '../state/index';
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in &lt;code&gt;Navbar.js&lt;/code&gt;, we use &lt;code&gt;enableDarkMode&lt;/code&gt; action-creator to dispatch.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dispatch = useDispatch();//to dispacth the action creator functions
  const {enableDarkMode} = bindActionCreators(actionCreators, dispatch);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add this &lt;code&gt;darkMode&lt;/code&gt; functionality to &lt;strong&gt;toggle button&lt;/strong&gt; present in navbar like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;input className="form-check-input" onClick={()=&amp;gt;{darkmode === 'OFF'?enableDarkMode('ON'):enableDarkMode('OFF')}} type="checkbox" id="flexSwitchCheckDefault" /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And add the styling in the &lt;code&gt;App.js&lt;/code&gt; as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
.

const darkmode = useSelector(state =&amp;gt; state.darkmode);
let darkmodeStyle = {}

if(darkmode === 'ON') {
    darkmodeStyle = {
        backgroundColor:'#2d2d2d',
        color:'whitesmoke'
    }
}

  return (
    &amp;lt;&amp;gt;
.
.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also change a &lt;strong&gt;div&lt;/strong&gt; component in &lt;code&gt;Shop.js&lt;/code&gt; to switch the title on the main page from &lt;code&gt;LightMode&lt;/code&gt; to &lt;code&gt;DarkMode&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#shopjs"&gt;
  &lt;/a&gt;
  Shop.js
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="container my-5"&amp;gt;
                &amp;lt;h1 className="display-1"&amp;gt;This is {darkmode === "ON" ? "DarkMode" : "LightMode"}&amp;lt;/h1&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Now you will be able to change background color.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fyr65oyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d13blemrjcym6o6k69be.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fyr65oyH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d13blemrjcym6o6k69be.gif" alt="darkMode GIF" width="600" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;countValue&lt;/code&gt; action-creator to dispatch,  we need to code in &lt;code&gt;Shop.js&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const dispatch = useDispatch();
const balance = useSelector(state =&amp;gt; state.countValue);
const {increaseCount, decreaseCount} = bindActionCreators(actionCreators,dispatch);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will add this &lt;code&gt;increaseCount/decreaseCount&lt;/code&gt; functionality to &lt;strong&gt;+ and - buttons&lt;/strong&gt; present in screen like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div className="container d-flex"&amp;gt;
                &amp;lt;button className="btn-lg btn-success mx-4" onClick={()=&amp;gt;(increaseCount(1))}&amp;gt; + &amp;lt;/button&amp;gt;
                    &amp;lt;h1 className="display-6"&amp;gt;You Count Value = {balance} &amp;lt;/h1&amp;gt;
                &amp;lt;button className="btn-lg btn-danger mx-4" onClick={()=&amp;gt;(decreaseCount(1))}&amp;gt; - &amp;lt;/button&amp;gt;
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;Now you will be able to change the countValue.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--02ub9Ok2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr8qd9e8y9qfbrmcz6qm.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--02ub9Ok2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wr8qd9e8y9qfbrmcz6qm.gif" alt="countValue GIF" width="600" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For reference,&lt;br&gt;
Complete Navbar.js file is &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/components/Navbar.js"&gt;here&lt;/a&gt;.&lt;br&gt;
Complete Shop.js file is &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/components/Shop.js"&gt;here&lt;/a&gt;.&lt;br&gt;
Complete App.js file is &lt;a href="https://github.com/mohitm15/redux-boilerplate/blob/master/redux-boilerplate/src/App.js"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Cheers! 🍻, you have build the basic template for redux. Now you can come up with as many functionalities and components to the application. You can take up some challenges by trying tasks like adding a login page, displaying the profile page, or categorizing the type of users. &lt;/p&gt;

&lt;p&gt;Try to come up with your own ideas and send the PRs over &lt;a href="https://github.com/mohitm15/redux-boilerplate/tree/master/redux-boilerplate"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thank you for your time. Happy Coding ! ☘️&lt;/p&gt;

</description>
      <category>react</category>
      <category>redux</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Visually Review HTML file changes introduced on a Pull Request with Comment Webpage Screenshot GitHub Action</title>
      <author>Maksudul Haque</author>
      <pubDate>Sun, 21 Nov 2021 14:22:56 +0000</pubDate>
      <link>https://dev.to/saadmk11/visually-review-html-file-changes-introduced-on-a-pull-request-with-comment-webpage-screenshot-github-action-43gd</link>
      <guid>https://dev.to/saadmk11/visually-review-html-file-changes-introduced-on-a-pull-request-with-comment-webpage-screenshot-github-action-43gd</guid>
      <description>&lt;h2&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h2&gt;

&lt;p&gt;Comment Webpage Screenshot is a GitHub Action that &lt;strong&gt;captures screenshots of webpages&lt;/strong&gt; and &lt;strong&gt;HTML files&lt;/strong&gt; located in the repository, uploads them to an Image Upload Service and &lt;strong&gt;comments the screenshots&lt;/strong&gt; on the &lt;strong&gt;pull request&lt;/strong&gt; that triggered the action.&lt;/p&gt;

&lt;p&gt;This action helps maintainers &lt;strong&gt;visually review&lt;/strong&gt; HTML file changes introduced on a Pull Request by adding comments with the screenshots of the latest HTML file changes on the Pull Request&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h2&gt;

&lt;p&gt;Maintainer Must-Haves&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h2&gt;

&lt;p&gt;Here are the links for Comment Webpage Screenshot&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GitHub repository:&lt;/strong&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/saadmk11"&gt;
        saadmk11
      &lt;/a&gt; / &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;
        comment-webpage-screenshot
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Comment Webpage Screenshot is a GitHub Action that captures screenshots of web pages and HTML files located in the repository, uploads them to an Image Upload Service and comments the screenshots on the pull request that triggered the action
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Comment Webpage Screenshot&lt;/h1&gt;
&lt;p&gt;Comment Webpage Screenshot is a GitHub Action that &lt;strong&gt;captures screenshots&lt;/strong&gt; of
&lt;strong&gt;web pages&lt;/strong&gt; and &lt;strong&gt;HTML files&lt;/strong&gt; located in the repository
uploads them to an &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot#available-image-upload-services"&gt;Image Upload Service&lt;/a&gt; and
&lt;strong&gt;comments&lt;/strong&gt; the screenshots on the &lt;strong&gt;pull request&lt;/strong&gt; that &lt;strong&gt;triggered&lt;/strong&gt; the action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This Action Only Works on Pull Requests.&lt;/p&gt;
&lt;h2&gt;
Workflow inputs&lt;/h2&gt;
&lt;p&gt;These are the inputs that can be provided on the workflow.&lt;/p&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Required&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;upload_to&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Image Upload Service Name (Options are: &lt;code&gt;github_branch&lt;/code&gt;, &lt;code&gt;imgur&lt;/code&gt;) &lt;strong&gt;&lt;a href="https://github.com/saadmk11/comment-webpage-screenshot#available-image-upload-services"&gt;More Details&lt;/a&gt;&lt;/strong&gt;
&lt;/td&gt;
&lt;td&gt;&lt;code&gt;github_branch&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;capture_changed_html_files&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Enable or Disable Screenshot Capture for Changed HTML Files on the Pull Request (Options are: &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;yes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;capture_html_file_paths&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Comma Seperated paths to the HTML files to be captured (Example: &lt;code&gt;/pages/index.html, about.html&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;capture_urls&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Comma Seperated URLs to be captured (Example: &lt;code&gt;https://dev.example.com, https://dev.example.com/about.html&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;github_token&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;
&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; provided by the workflow run or Personal Access Token (PAT)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;github.token&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Example Workflow&lt;/h2&gt;
&lt;div class="highlight highlight-source-yaml position-relative overflow-auto js-code-highlight"&gt;…
&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Marketplace:&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://github.com/marketplace/actions/comment-webpage-screenshot"&gt;https://github.com/marketplace/actions/comment-webpage-screenshot&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#example-capture-screenshots-for-static-html-pages-built-with-tailwindcss"&gt;
  &lt;/a&gt;
  Example: Capture Screenshots for Static HTML Pages built with TailwindCSS
&lt;/h3&gt;

&lt;p&gt;If your repository contains &lt;strong&gt;only static files&lt;/strong&gt; and does &lt;strong&gt;not require a server&lt;/strong&gt;. You can just put the &lt;strong&gt;file path&lt;/strong&gt; of the &lt;strong&gt;HTML files&lt;/strong&gt; you want to capture screenshot of.&lt;/p&gt;

&lt;p&gt;In this Example I'll show you how I used &lt;code&gt;saadmk11/comment-website-screenshot&lt;/code&gt; GitHub Action to Visually Review Static file Changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WorkFlow:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Capture Webpage Screenshot&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;types&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;opened&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;synchronize&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Capture Webpage Screenshot&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;saadmk11/comment-website-screenshot@v0.5&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;upload_to&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;github_branch&lt;/span&gt;
          &lt;span class="c1"&gt;# Capture Screenshots of Changed HTML Files&lt;/span&gt;
          &lt;span class="na"&gt;capture_changed_html_files&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yes&lt;/span&gt;
          &lt;span class="c1"&gt;# Comma separated paths to any other HTML File&lt;/span&gt;
          &lt;span class="na"&gt;capture_html_file_paths&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;index.html"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Output Screenshot:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K7bXSYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0hm2wu92ionitnrv0va.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K7bXSYA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f0hm2wu92ionitnrv0va.png" alt="comment-webpage-screenshot Example" width="880" height="1944"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The HTML Template Shown in this Example was Taken from Tailwind UI&lt;/strong&gt;&lt;br&gt;
Tailwind UI Provides Awesome Pre-Built TailwindCSS Components. Check them out here: &lt;a href="https://tailwindui.com/"&gt;https://tailwindui.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pull Request:&lt;/strong&gt; &lt;a href="https://github.com/saadmk11/static-page-screenshot-demo/pull/2"&gt;https://github.com/saadmk11/static-page-screenshot-demo/pull/2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Demo Repository:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/saadmk11"&gt;
        saadmk11
      &lt;/a&gt; / &lt;a href="https://github.com/saadmk11/static-page-screenshot-demo"&gt;
        static-page-screenshot-demo
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
static-page-screenshot-demo&lt;/h1&gt;
&lt;p&gt;Templates Collected from Tailwind UI.&lt;/p&gt;
&lt;p&gt;Check it out here: &lt;a href="https://tailwindui.com/" rel="nofollow"&gt;https://tailwindui.com/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/saadmk11/static-page-screenshot-demo"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#note"&gt;
  &lt;/a&gt;
  Note
&lt;/h3&gt;

&lt;p&gt;You can also use this for Dynamic Web Applications. See the &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;saadmk11/comment-webpage-screenshot&lt;/a&gt; documentation for more examples.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I think this action will be really helpful for Open Source Maintainers to provide quick reviews on UI changes. If anyone is interested please try &lt;a href="https://github.com/saadmk11/comment-webpage-screenshot"&gt;saadmk11/comment-webpage-screenshot&lt;/a&gt; out and leave some feedback :)&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
      <category>github</category>
      <category>python</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
