<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Creating an Async API using Postgres - Building a Chess Analysis App (Part 3)</title>
      <author>propelauthblog</author>
      <pubDate>Thu, 18 Nov 2021 01:41:50 +0000</pubDate>
      <link>https://dev.to/propelauth/creating-an-async-api-using-postgres-building-a-chess-analysis-app-part-3-11ke</link>
      <guid>https://dev.to/propelauth/creating-an-async-api-using-postgres-building-a-chess-analysis-app-part-3-11ke</guid>
      <description>&lt;p&gt;In our &lt;a href="https://blog.propelauth.com/chess-analysis-2-flask-and-cerberus/"&gt;last post&lt;/a&gt;, we built a synchronous API that validates and analyzes a chess position. We noted that performing a CPU intensive task synchronously in the web server seems like a bad idea.&lt;/p&gt;

&lt;p&gt;In this post, we'll turn that synchronous API into an asynchronous one using Postgres.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analyzing-the-requests-asynchronously"&gt;
  &lt;/a&gt;
  Analyzing the requests asynchronously
&lt;/h2&gt;

&lt;p&gt;We cannot have our webserver waiting on an analysis. We also, ideally, want to be resilient to a large number of analyses requested at the same time overloading us. This looks like a good time to use a &lt;strong&gt;queue&lt;/strong&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-queue"&gt;
  &lt;/a&gt;
  What is a queue?
&lt;/h3&gt;

&lt;p&gt;The basic idea behind a queue is that instead of analyzing the request immediately, we store it somewhere to be analyzed later, alongside an ID.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MLmk_7Ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4qte27la5dsh8uo9ov3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MLmk_7Ys--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4qte27la5dsh8uo9ov3.png" alt="Placing an item in a queue" width="880" height="243"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The user can use the ID to check if the analysis is ready.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z_OqWBeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1jqzfkcoirmeu2m80p9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z_OqWBeD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o1jqzfkcoirmeu2m80p9.png" alt="Checking the status of an item" width="880" height="254"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Separately, some other service is running. It will read a chess position from the queue, analyze the position, and store the result somewhere. Services that read from queues and process them are typically called &lt;strong&gt;workers&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A4bKAjAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcwr361g2i4an5quy4rw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A4bKAjAb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcwr361g2i4an5quy4rw.png" alt="Worker processing the queue" width="880" height="326"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the many nice things about this approach is that you can scale up or down the number of workers depending on demand.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-make-a-queue"&gt;
  &lt;/a&gt;
  How do we make a queue?
&lt;/h3&gt;

&lt;p&gt;There are a lot of ways to actually implement queues. There are products like &lt;a href="https://kafka.apache.org/"&gt;Kafka&lt;/a&gt; or &lt;a href="https://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;. There are managed services like &lt;a href="https://aws.amazon.com/sqs/"&gt;AWS SQS&lt;/a&gt; or &lt;a href="https://aws.amazon.com/kinesis/"&gt;AWS Kinesis&lt;/a&gt;. There are libraries like &lt;a href="https://docs.celeryproject.org/en/stable/"&gt;Celery&lt;/a&gt; which can be used with Redis or RabbitMQ. For the workers, you can use serverless functions like &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt; or you can have a pool of servers waiting for work.&lt;/p&gt;

&lt;p&gt;In our case, we are going to use &lt;a href="https://www.postgresql.org/"&gt;Postgres&lt;/a&gt; as a queue for two main reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We're going to need a database anyway, so using Postgres as both a queue and a DB means less stuff to manage.&lt;/li&gt;
&lt;li&gt;I personally like debugging queues via SQL. We can get a ton of insight into what's going on in a familiar language.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#using-postgres-as-a-queue"&gt;
  &lt;/a&gt;
  Using Postgres as a queue
&lt;/h3&gt;

&lt;p&gt;To make a simple queue, we ultimately only need three functions:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;add_request_to_queue(request)&lt;/code&gt; - adds the request the queue, so it can be processed later&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;claim_unprocessed_request()&lt;/code&gt; - returns any request that hasn't been processed yet. No one else should be able to claim this request until we are done.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;finish_processing_request(request, result)&lt;/code&gt; - saves the result of processing a request.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It's important that when a worker claims a request, no other worker can also claim it. Otherwise, we are just wasting time having multiple workers doing the same task.&lt;/p&gt;

&lt;p&gt;Imagine we have a table named &lt;code&gt;queue&lt;/code&gt;. &lt;code&gt;add_request_to_queue&lt;/code&gt; for Postgres can be a simple SQL query:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
           &lt;span class="k"&gt;VALUES&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gen_random_uuid&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'unprocessed'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;where &lt;code&gt;:request&lt;/code&gt; is whatever information the worker needs to process the request. In our case, that's the chess position that we want to analyze and any arguments.&lt;/p&gt;

&lt;p&gt;A first pass at &lt;code&gt;claim_unprocessed_request&lt;/code&gt; could be a simple select statement:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'unprocessed'&lt;/span&gt; 
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;
&lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, this doesn't stop anyone else from claiming the same request. &lt;br&gt;
Luckily for us, Postgres has two clauses that can help us out.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;queue&lt;/span&gt; 
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'unprocessed'&lt;/span&gt; 
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;
&lt;span class="k"&gt;FOR&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;SKIP&lt;/span&gt; &lt;span class="n"&gt;LOCKED&lt;/span&gt;
&lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;FOR UPDATE&lt;/code&gt; locks the row because we are planning to update it. &lt;code&gt;SKIP LOCKED&lt;/code&gt; will skip over any rows that are currently locked. With this, no two workers will ever grab the same row.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;finish_processing_request&lt;/code&gt; can be as simple as updating the row with the result of the analysis. We need to do this in the same transaction as our select statement (that is why we are using &lt;code&gt;FOR UPDATE&lt;/code&gt;), so the overall flow becomes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Begin a transaction&lt;/li&gt;
&lt;li&gt;Select a request with &lt;code&gt;FOR UPDATE SKIP LOCKED&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Process the request&lt;/li&gt;
&lt;li&gt;Save the result and make the status no longer 'unprocessed'&lt;/li&gt;
&lt;li&gt;Commit the transaction&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#sqlalchemy"&gt;
  &lt;/a&gt;
  SQLAlchemy
&lt;/h2&gt;

&lt;p&gt;Now that we know what we need to do, let's translate it to python. We'll use the ORM &lt;a href="https://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; to interact with our database and &lt;a href="https://pypi.org/project/psycopg2/"&gt;psycopg2&lt;/a&gt; as our Postgres adapter.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# this is a library which adds some flask-specific features to sqlalchemy&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;flask-sqlalchemy 
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;psycopg2-binary
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll want to set up and install Postgres, which you can do either with Docker or with their &lt;a href="https://www.postgresql.org/download/"&gt;installers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Afterwards, we can set up our database table. In the earlier example, we had a &lt;code&gt;status&lt;/code&gt; column. In this example, we are going to just use a nullable &lt;code&gt;analysis_result&lt;/code&gt; column. This is a little less general since it doesn't allow for error statues, but should be easy to extend.&lt;/p&gt;

&lt;p&gt;We'll put our models in a new file &lt;code&gt;models.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.dialects.postgresql&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;

&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Let the DB generate a UUID for us
&lt;/span&gt;    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;as_uuid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;server_default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sqlalchemy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"gen_random_uuid()"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The 4 parameters to our request
&lt;/span&gt;    &lt;span class="n"&gt;fen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;num_moves_to_return&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FLOAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;depth_limit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# The result of an analysis. Null means we haven't processed it yet
&lt;/span&gt;    &lt;span class="n"&gt;analysis_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="n"&gt;created_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;updated_at&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TIMESTAMP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;onupdate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# A conditional index on created_at, whenever analysis_result is null
&lt;/span&gt;    &lt;span class="n"&gt;__table_args__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'ordered_by_created_at'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;postgresql_where&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;analysis_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can then create this table from the python console.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;python
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; from models import db
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; db.create_all&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#finishing-the-api"&gt;
  &lt;/a&gt;
  Finishing the API
&lt;/h2&gt;

&lt;p&gt;We're almost done with the API. Let's look at the remaining code in &lt;code&gt;app.py&lt;/code&gt; in sections.&lt;/p&gt;

&lt;p&gt;First, make sure we set any SQLALCHEMY config values and call &lt;code&gt;db.init_app(app)&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# ... same as before
&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Analysis&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# This is the default URI for postgres
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SQLALCHEMY_DATABASE_URI'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'postgresql://postgres:postgres@localhost:5432/postgres'&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'SQLALCHEMY_TRACK_MODIFICATIONS'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_app&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll update our &lt;code&gt;analyze&lt;/code&gt; function to no longer analyze synchronously, but instead store the analysis to the database for later processing. The database will return an autogenerated UUID that we will return to the user.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/analyze"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analyze&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# Validate the request, same as before
&lt;/span&gt;    &lt;span class="n"&gt;parsed_request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="c1"&gt;# Save an analysis object to the database
&lt;/span&gt;    &lt;span class="n"&gt;analysis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;fen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"fen"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;num_moves_to_return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"num_moves_to_return"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;time_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"time_limit"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;depth_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;parsed_request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"depth_limit"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# The id is automatically populated after commiting
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we need some way for our users to get their analysis. We'll create a new endpoint that accepts a UUID, validate that they pass in a UUID, and then fetch that UUID from the database. If the database object has &lt;code&gt;analysis_result&lt;/code&gt; set, we know that it has been analyzed. Otherwise, we can say that it's still pending analysis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Can move this to our parsers file
# Make sure the UUID we are provided is valid
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_uuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_uuid&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UUID&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;possible_uuid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/analysis"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"GET"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_analysis&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# 404 if the ID is invalid or not in our database
&lt;/span&gt;    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_uuid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;abort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;analysis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;analysis_result&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"pending"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"done"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"result"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;analysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;analysis_result&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's it for the API. We can submit chess positions to be analyzed, and we get back an ID. We can then poll the ID which will return &lt;code&gt;pending&lt;/code&gt; until the analysis is ready. We can view this in action by running our server and using curl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST 
       &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s2"&gt;"Content-Type: application/json"&lt;/span&gt; 
       &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{"fen": "8/8/6P1/4R3/8/6k1/2r5/6K1 b - - 0 1"}'&lt;/span&gt; localhost:5000/analyze
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"id"&lt;/span&gt;:&lt;span class="s2"&gt;"c5b0a5d9-2427-438c-bd4a-6e9afe135763"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="s2"&gt;"localhost:5000/analysis?id=c5b0a5d9-2427-438c-bd4a-6e9afe135763"&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"status"&lt;/span&gt;:&lt;span class="s2"&gt;"pending"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The only problem now is that there's no worker to actually analyze the chess position. We're going to get back &lt;code&gt;pending&lt;/code&gt; forever. Let's fix that now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-chess-analysis-workers"&gt;
  &lt;/a&gt;
  Creating chess analysis workers
&lt;/h2&gt;

&lt;p&gt;In addition to being a webserver, Flask also supports a &lt;a href="https://flask.palletsprojects.com/en/2.0.x/cli/"&gt;CLI&lt;/a&gt;. We can make a command which loops infinitely reading from the database and processing what it finds. In production, we can use something like systemd to keep the worker alive, and we can control how many processes we spawn to control how many positions can be analyzed in parallel per machine.&lt;/p&gt;

&lt;p&gt;Let's start from the top, by making a &lt;code&gt;worker&lt;/code&gt; command in &lt;code&gt;app.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"worker"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_context&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;run_worker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we'll go implement &lt;code&gt;run_worker&lt;/code&gt; in a new file &lt;code&gt;worker.py&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;chessengine&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;analyze_position&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;

&lt;span class="c1"&gt;# Runs forever
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_worker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;did_work&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetch_and_analyze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c1"&gt;# If there was nothing to analyze, sleep for a bit
&lt;/span&gt;            &lt;span class="c1"&gt;#   to not overload the DB
&lt;/span&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;did_work&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="nb"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;"Unexpected &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetch_and_analyze&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# This is the SQL query we saw before
&lt;/span&gt;    &lt;span class="c1"&gt;# We are looking for rows with no result yet
&lt;/span&gt;    &lt;span class="c1"&gt;#  and we order by created_at to take older requests first
&lt;/span&gt;    &lt;span class="n"&gt;to_be_analyzed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;analysis_result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; \
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;order_by&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Analysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;with_for_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skip_locked&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; \
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;to_be_analyzed&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Use the function we created in our first post in this series
&lt;/span&gt;        &lt;span class="n"&gt;to_be_analyzed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;analysis_result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;analyze_position&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;fen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;to_be_analyzed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;num_moves_to_return&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;to_be_analyzed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;num_moves_to_return&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;depth_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;to_be_analyzed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;depth_limit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;time_limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;to_be_analyzed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_limit&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Analyzed {}"&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to_be_analyzed&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Nothing to analyze"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Do not forget to commit the transaction!
&lt;/span&gt;    &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;to_be_analyzed&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And that's the full worker. Most of the heavy lifting is done by &lt;code&gt;analyze_position&lt;/code&gt; and you can use this &lt;br&gt;
same structure to turn any synchronous API into an asynchronous one.&lt;/p&gt;

&lt;p&gt;Let's test it by running our worker in a new terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source &lt;/span&gt;venv/bin/activate
&lt;span class="o"&gt;(&lt;/span&gt;venv&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;$ &lt;/span&gt;flask worker
Analyzed c5b0a5d9-2427-438c-bd4a-6e9afe135763
Nothing to analyze
Nothing to analyze
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It found the request we made earlier and analyzed it. Let's verify that by hitting our webserver with curl:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl &lt;span class="s2"&gt;"localhost:5000/analysis?id=c5b0a5d9-2427-438c-bd4a-6e9afe135763"&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"result"&lt;/span&gt;:[&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"centipawn_score"&lt;/span&gt;:null,&lt;span class="s2"&gt;"mate_score"&lt;/span&gt;:-2,&lt;span class="s2"&gt;"pv"&lt;/span&gt;:[&lt;span class="s2"&gt;"c2c1"&lt;/span&gt;,&lt;span class="s2"&gt;"e5e1"&lt;/span&gt;,&lt;span class="s2"&gt;"c1e1"&lt;/span&gt;&lt;span class="o"&gt;]}]&lt;/span&gt;,&lt;span class="s2"&gt;"status"&lt;/span&gt;:&lt;span class="s2"&gt;"done"&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we see the status is &lt;code&gt;done&lt;/code&gt; and our result is analysis that we expect.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h2&gt;

&lt;p&gt;We were able to take a clunky synchronous API and make it asynchronous, using Postgres as a work queue. Our users can now submit bursts of chess positions and our servers won't get overloaded.&lt;/p&gt;

&lt;p&gt;In our next post, we'll use NextJS to build a UI for our application. See you then!&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Setter Method Return Values In Ruby</title>
      <author>Kevin Murphy</author>
      <pubDate>Thu, 18 Nov 2021 00:49:28 +0000</pubDate>
      <link>https://dev.to/kevin_j_m/setter-method-return-values-in-ruby-g09</link>
      <guid>https://dev.to/kevin_j_m/setter-method-return-values-in-ruby-g09</guid>
      <description>&lt;h2&gt;
  &lt;a href="#can-i-take-your-order"&gt;
  &lt;/a&gt;
  Can I Take Your Order?
&lt;/h2&gt;

&lt;p&gt;We're opening a brand new diner, and each customer can have their current order set, which will add to their list of orders.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;
  &lt;span class="nb"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:orders&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;
    &lt;span class="vi"&gt;@orders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_order&lt;/span&gt;
    &lt;span class="vi"&gt;@orders&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;last&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@orders&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;new_order&lt;/span&gt;

    &lt;span class="s2"&gt;"thank you for being our valued customer"&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because customer service is our top priority, we provide a message whenever they place an order reminding them how lucky we feel to be serving them their meal.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#negative-reviews"&gt;
  &lt;/a&gt;
  Negative Reviews
&lt;/h2&gt;

&lt;p&gt;After our soft opening, we're excited to read everyone's favorable comments about their food. However, we're getting slammed with bad reviews about our curt interactions with customers when they place an order. We went out of our way to modify the setter's return value to give a special message; what's wrong?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#mystery-shopper"&gt;
  &lt;/a&gt;
  Mystery Shopper
&lt;/h2&gt;

&lt;p&gt;In order to get to the bottom of this, we put on our fake mustache and glasses to go undercover at our own restaurant. What we find &lt;strong&gt;shocks us&lt;/strong&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;definitely_not_the_owner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;definitely_not_the_owner&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pancakes"&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"pancakes"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's not the welcoming experience we explicitly developed! We shouldn't be barking back their order in a matter of fact way; we should be thanking them. Something surprising is happening here; now we need to find what it is.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#training-manual"&gt;
  &lt;/a&gt;
  Training Manual
&lt;/h2&gt;

&lt;p&gt;Our method is explicit about what the return value should be.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;current_order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_order&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="vi"&gt;@orders&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;new_order&lt;/span&gt;

  &lt;span class="s2"&gt;"thank you for being our valued customer"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We expect the last thing evaluated in the method to be what's returned to the caller. And that's the case...most of the time. After consulting Ruby's&lt;br&gt;
&lt;a href="https://ruby-doc.org/core-3.0.1/doc/syntax/methods_rdoc.html#label-Return+Values"&gt;documentation&lt;/a&gt;, we find an exception:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Note that for assignment methods the return value will be ignored when using the assignment syntax. Instead, the argument will be returned&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is our exact case! Our setter method to set the current order is returning the argument passed to it, and not the result of the last line. It's being completely ignored in favor of the argument.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demanding-exceptional-service"&gt;
  &lt;/a&gt;
  Demanding Exceptional Service
&lt;/h2&gt;

&lt;p&gt;The documentation does provide a way in which customers can see our nice message though:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The actual return value will be returned when invoking the method directly&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, while we cannot enforce it, if callers know the right way to ask, we'll thank them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;002&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;current_order&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"pancakes"&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"pancakes"&lt;/span&gt;
&lt;span class="n"&gt;irb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="mo"&gt;003&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;public_send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:current_order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"french toast"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"thank you for being our valued customer"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setting-the-table-for-next-time"&gt;
  &lt;/a&gt;
  Setting The Table For Next Time
&lt;/h2&gt;

&lt;p&gt;Ruby setter, or assignment, methods have a special understanding and expectation for what they'll return. This helps enforce a consistent API, but can lead to surprising results when writing your own setter method.&lt;/p&gt;

&lt;p&gt;Setter methods will return the argument passed to it, regardless of what the last evaluated statement in the method is. Callers can receive the value of the last statement if they call the method in a particular way; however, it would be very unconventional to expect someone to do that.&lt;/p&gt;

&lt;p&gt;In the case of our restaurant, that meant a pivoting in our branding. We started positioning ourselves as an outfit focused on intense efficiency and limited customer interaction - with a secret message any customer in the know can pass us to force a little more welcoming of a response with any new order.&lt;/p&gt;

</description>
      <category>ruby</category>
    </item>
    <item>
      <title>Essential Keyboard Shortcuts For Developers</title>
      <author>Amy Oulton</author>
      <pubDate>Thu, 18 Nov 2021 00:23:59 +0000</pubDate>
      <link>https://dev.to/amyoulton/essential-keyboard-shortcuts-for-developers-plc</link>
      <guid>https://dev.to/amyoulton/essential-keyboard-shortcuts-for-developers-plc</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This post was originally written by me for &lt;a href="//codecast.io"&gt;CodeCast&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We previously made a &lt;a href="https://info.codecast.io/blog/our-favourite-keyboard-shortcuts-for-everyone"&gt;post&lt;/a&gt; about all of our favourite keyboard shortcuts that can help everyone make their daily workflow easier. Now we want to give the developers our favourite shortcuts to make working with your code a breeze. &lt;/p&gt;

&lt;p&gt;We're big fans of &lt;a href="https://info.codecast.io/blog/our-top-10-visual-studio-code-extensions"&gt;Visual Studio Code&lt;/a&gt; at CodeCast, so I can only say for sure that some of these work on there, but working on virtual code editors, I have had most of them work for me with no issue. So, without further ado, let's get started listing some of our favourite keyboard shortcuts for developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start/End of Line&lt;/strong&gt;: This is one I am positive is universal and isn’t tied to any program. I use this everywhere, but it's especially helpful when coding. If you want to quickly move your cursor from where it’s currently positioned to the start or end of the current line, hit &lt;strong&gt;Command + →/←&lt;/strong&gt; (Mac) or &lt;strong&gt;Home/End&lt;/strong&gt; (Windows). &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n7yFr7uL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj49g7akoiojmri1glsi.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n7yFr7uL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sj49g7akoiojmri1glsi.gif" alt="Start of Line Gif" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Find Next Match&lt;/strong&gt;: To find the next instance of a word in your code, you can easily highlight the world and hit &lt;strong&gt;Command + D&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + D&lt;/strong&gt; (Windows). You can continue hitting this until you have every instance you want selected highlighted. From here, you can simply type to change it at every place in your code. This is very helpful when trying to change variable names, for example.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1JZUjnp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaq22enlu1wqyesyo130.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1JZUjnp2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jaq22enlu1wqyesyo130.gif" alt="Find Next Match Gif" width="880" height="294"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note how I skipped the 3rd instance of puppy!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An additional note to this: if you wish to skip over one of the instances when that specific instance is selected, hit &lt;strong&gt;Command + K (Mac)&lt;/strong&gt; or &lt;strong&gt;Ctrl + K&lt;/strong&gt; (Windows). Then continue hitting &lt;strong&gt;Command + D&lt;/strong&gt; (or Ctrl, respectively) and you will go on to select the next instance while skipping over the previous one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Select All Matches&lt;/strong&gt;: If you want to select all the instances of something in a file, hit &lt;strong&gt;Command + Shift + L&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + Shift + L&lt;/strong&gt;, and it will immediately select all instances of it for you! This makes refactoring a breeze. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--q2wmwUUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dv39g2irg9mg9qwj0ew.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--q2wmwUUI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6dv39g2irg9mg9qwj0ew.gif" alt="Select All Matches Gif" width="864" height="367"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Duplicate Code&lt;/strong&gt;: If you have a piece of boilerplate code you want to easily copy, you can highlight the entire block of code (or if its a single line, make sure the cursor is on the line you wish to copy) then hit &lt;strong&gt;Command + Shift + Up/Down&lt;/strong&gt; (Mac) or &lt;strong&gt;Shift + Alt + Up/Down&lt;/strong&gt; (Windows) to copy the code below it, or above it respectively. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bKZliECv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2vor8xdwrjl025y88nk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bKZliECv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h2vor8xdwrjl025y88nk.gif" alt="Duplicate Code Gif" width="864" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Move Code&lt;/strong&gt;: Well you copied the code, but you don’t really want it there. Or you realized this whole function should actually be above where it is now. Easily fixed. Highlight the chunk (or just place the cursor on the specific line for single lines) and hold down &lt;strong&gt;Option&lt;/strong&gt; (Mac) or &lt;strong&gt;Alt&lt;/strong&gt; (Windows) and move it up or down with the &lt;strong&gt;arrow keys&lt;/strong&gt;! Easy peasy.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kDQR-Kon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yora9ng1jti0dy729psb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kDQR-Kon--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yora9ng1jti0dy729psb.gif" alt="Move Code Gif" width="864" height="330"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Indent Code&lt;/strong&gt;: Ever wanted to easily move an entire chunk of code a few indents in without doing it line by line? Just highlight the desired code, then hit &lt;strong&gt;Command + [&lt;/strong&gt;  or &lt;strong&gt;]&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + [&lt;/strong&gt; or &lt;strong&gt;]&lt;/strong&gt; (Windows). &lt;strong&gt;]&lt;/strong&gt; will move it to the right, and &lt;strong&gt;[&lt;/strong&gt; will move it to the left. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--80Cx6W3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbc2joyz7moq3d8i52h0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--80Cx6W3v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bbc2joyz7moq3d8i52h0.gif" alt="Indent Code Gif" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multiple Cursors&lt;/strong&gt;: If you want to insert text in multiple spots in your code, simply hold down &lt;strong&gt;Option&lt;/strong&gt; (Mac) or &lt;strong&gt;Alt&lt;/strong&gt; (Windows) and &lt;strong&gt;click&lt;/strong&gt; in the spot you want to add an additional cursor. Once you have all the places selected, you can type and add content to add the spots at once. To clear the multiple cursors, just click off anywhere.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vFC3POk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3smmi8alxepv2h93ljj4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vFC3POk6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3smmi8alxepv2h93ljj4.gif" alt="Multiple Cursors" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Add Cursor Above/Below&lt;/strong&gt;: Similar to the above shortcut, this one allows you to simply add another cursor to the line above it or below it as the same placement (or the beginning of the line if there is no content on the line). For this, just hit &lt;strong&gt;Command + Option + Up/Down&lt;/strong&gt; (Mac) or &lt;strong&gt;Ctrl + Alt + Up/Down&lt;/strong&gt; (Windows).‍&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gwvk4tP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whf8hjfsxo85dtl18nst.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gwvk4tP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whf8hjfsxo85dtl18nst.gif" alt="Add Cursor Gif" width="880" height="335"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Switch Between Apps&lt;/strong&gt;: You can hit &lt;strong&gt;Command + Tab&lt;/strong&gt; (Mac) or &lt;strong&gt;Alt + Tab&lt;/strong&gt; (Windows) and hold down &lt;strong&gt;Command&lt;/strong&gt; (or &lt;strong&gt;Alt&lt;/strong&gt; respectively) to see a list of all the open apps on your computer. Continue hitting the tab key to navigate to the one you want to switch to. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X4A5EdIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq9qtcdde3z03v887ebg.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X4A5EdIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wq9qtcdde3z03v887ebg.gif" alt="Switch Apps Gif" width="640" height="267"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Another option is using gestures if you’re working with a trackpad on a Mac, and swiping between apps when they’re full screen! This is my default method. Just check your gesture settings!&lt;/p&gt;

&lt;p&gt;That’s a lot of information, but getting a good grasp on some of these will make writing and formatting your code a breeze. If you also use Visual Studio Code, they have a complete list of all their available shortcuts for both &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf?W"&gt;Mac&lt;/a&gt; and &lt;a href="https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf"&gt;Windows&lt;/a&gt;. Happy coding!&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>26 Programming Concepts from A to Z</title>
      <author>Edwin Torres</author>
      <pubDate>Thu, 18 Nov 2021 00:16:12 +0000</pubDate>
      <link>https://dev.to/realedwintorres/26-programming-concepts-from-a-to-z-56am</link>
      <guid>https://dev.to/realedwintorres/26-programming-concepts-from-a-to-z-56am</guid>
      <description>&lt;p&gt;I wrote this blog post to challenge myself to find a programming concept for each letter of the alphabet. It was surprisingly easy 😀.&lt;/p&gt;

&lt;p&gt;Here they are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A&lt;/strong&gt;rray - An array is like a group of variables that have the same name and type. Use the name and an integer index to access one of the variables. An array is very useful, especially when paired with a &lt;code&gt;for&lt;/code&gt; loop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;B&lt;/strong&gt;inary - Computers speak &lt;em&gt;binary&lt;/em&gt;, or 0s and 1s, because of hardware. Computer &lt;a href="https://whatis.techtarget.com/definition/register"&gt;registers&lt;/a&gt; have gates that store either &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. This is programming at the lowest level, and all programming languages build on this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ontinue - The &lt;code&gt;continue&lt;/code&gt; statement alters the flow of execution in a loop. It skips any remaining statements in the loop and immediately goes back to the top.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;D&lt;/strong&gt;ata - Programs process data. Data may come from the user, a file, variables, or other input source. And there are various types of data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;E&lt;/strong&gt;quality - The equality operation checks if two operands are equal. The result is a Boolean true/false value. There are different ways to test for equality. One common equality operator is &lt;code&gt;==&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;or - The &lt;code&gt;for&lt;/code&gt; loop is a repetition structure that repeats statements. &lt;code&gt;for&lt;/code&gt; loops are useful when working with numeric sequences.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;G&lt;/strong&gt;oto - In BASIC programming, the &lt;code&gt;Goto&lt;/code&gt; statement jumps to another line in the program and continues execution from there. Using &lt;code&gt;Goto&lt;/code&gt; statements is considered a &lt;a href="https://en.wikipedia.org/wiki/Goto#Criticism"&gt;bad practice&lt;/a&gt;, because it makes code difficult to understand, modify, and debug.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;H&lt;/strong&gt;ashMap - In Java, the &lt;a href="https://www.w3schools.com/java/java_hashmap.asp"&gt;HashMap&lt;/a&gt; class is a data structure that stores key-value pairs. Each key is unique. There are convenient methods to view and manipulate &lt;code&gt;HashMap&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I&lt;/strong&gt;nteger - The integer data type represents numbers that do not have decimal places. Integer values may be positive, negative, or &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;J&lt;/strong&gt;oin - In relational databases like MySQL or PostgreSQL, the &lt;code&gt;JOIN&lt;/code&gt; command joins records from two tables based on related columns.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;K&lt;/strong&gt;ill - Use the &lt;code&gt;bash&lt;/code&gt; &lt;code&gt;kill&lt;/code&gt; command to terminate a process. This is useful when you need to terminate a program that will not stop on its own.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;L&lt;/strong&gt;ist - In Python, the &lt;a href="https://docs.python.org/3/tutorial/datastructures.html?highlight=list"&gt;list&lt;/a&gt; data structure is the built-in version of an array. It has similar behaviors, with its own set of convenient methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;M&lt;/strong&gt;odulus - The modulus operation calculates the remainder when dividing two numbers. In many languages, the modulus operator is &lt;code&gt;%&lt;/code&gt;. For example, the result of &lt;code&gt;5 % 2&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;N&lt;/strong&gt;ew - In Java, use the &lt;a href="https://www.w3schools.com/java/ref_keyword_new.asp"&gt;new&lt;/a&gt; keyword to create an object. In C++, &lt;code&gt;new&lt;/code&gt; dynamically allocates memory in general.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;O&lt;/strong&gt;perators - Operators operate on data to create new data. Some common arithmetic operators are &lt;em&gt;multiply&lt;/em&gt; &lt;code&gt;*&lt;/code&gt;, &lt;em&gt;divide&lt;/em&gt; &lt;code&gt;/&lt;/code&gt;, &lt;em&gt;add&lt;/em&gt; &lt;code&gt;+&lt;/code&gt;, and &lt;em&gt;subtract&lt;/em&gt; &lt;code&gt;-&lt;/code&gt;. There are operators for other data types and operations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;rint - The Python &lt;code&gt;print()&lt;/code&gt; statement prints a string to &lt;code&gt;stdout&lt;/code&gt;, for example &lt;code&gt;print('Hello, world!')&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q&lt;/strong&gt;ueue - A &lt;a href="https://en.m.wikipedia.org/wiki/Queue_(abstract_data_type)"&gt;queue&lt;/a&gt; is a data structure that stores elements sequentially. Queues are &lt;em&gt;first in, first out&lt;/em&gt; (FIFO). In other words, the first element added to the queue is the first element that is processed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;R&lt;/strong&gt;eturn - The &lt;code&gt;return&lt;/code&gt; statement is a way to return from a procedure or function. A return statement can return a value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;S&lt;/strong&gt;tack - The &lt;a href="https://en.m.wikipedia.org/wiki/Stack_(abstract_data_type)"&gt;stack&lt;/a&gt; is a cousin of the queue. But a stack stores elements in &lt;em&gt;last in, first out&lt;/em&gt; (LIFO) order. The last element added is the first one that is processed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;T&lt;/strong&gt;esting - Testing is a phase of program development where you verify and validate the correctness of your program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;U&lt;/strong&gt;nicode - Unicode is an international coding standard that assigns a numeric value to each character or symbol. Programs can leverage this encoding scheme. The Java programming language supports Unicode.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;V&lt;/strong&gt;ector - In Java, the &lt;code&gt;Vector&lt;/code&gt; class is like the array structure, except that it can increase in size dynamically.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;W&lt;/strong&gt;hile - The &lt;code&gt;while&lt;/code&gt; loop is a programming construct that repeats its statements while a condition is true. It has more flexibility than a &lt;code&gt;for&lt;/code&gt; loop, since its condition can implement a variety of scenarios.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;X&lt;/strong&gt;OR - Exclusive-OR, or XOR, is a logical operator that returns true if exactly one of its operands is true. Otherwise, it returns false. In Java, the XOR operator is &lt;code&gt;^&lt;/code&gt;. For example, &lt;code&gt;true ^ true&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;false ^ true&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Y&lt;/strong&gt;ield - The &lt;code&gt;yield&lt;/code&gt; statement in Python lets you iterate over a sequence of values by returning a generator from a function. This avoids having to store the entire sequence in memory and returning it all at once.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Z&lt;/strong&gt;eros - The Python &lt;code&gt;numpy&lt;/code&gt; function &lt;code&gt;zeros&lt;/code&gt; returns a new array that is filled with zeros.&lt;/p&gt;

&lt;p&gt;That is my &lt;em&gt;A to Z&lt;/em&gt; list. How about yours? 👍🏼&lt;/p&gt;

&lt;p&gt;Thanks for reading. 😁&lt;/p&gt;

&lt;p&gt;Follow me on Twitter &lt;a href="https://twitter.com/realEdwinTorres"&gt;&lt;code&gt;@realEdwinTorres&lt;/code&gt;&lt;/a&gt; for more programming tips.&lt;/p&gt;

</description>
      <category>programming</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Yes, PHP is Worth Learning/Using in $CURRENT_YEAR</title>
      <author>OmegaVesko</author>
      <pubDate>Wed, 17 Nov 2021 23:25:40 +0000</pubDate>
      <link>https://dev.to/omegavesko/yes-php-is-worth-learningusing-in-currentyear-l85</link>
      <guid>https://dev.to/omegavesko/yes-php-is-worth-learningusing-in-currentyear-l85</guid>
      <description>&lt;p&gt;Welcome, dear reader! If you're reading this, you're probably one of the many people who find themselves wondering how much of what they've heard about PHP (a lot of which isn't super positive, I'm sure) is still relevant today. Is PHP a dying language? Should you learn PHP in $CURRENT_YEAR, and/or use it to build your next app? Hopefully, by the end of this post, you'll have the answers to these questions and more.&lt;/p&gt;

&lt;p&gt;Rather than yet another generic overview of the language or a point-by-point refutation of the things people say is wrong with it, what I want this post to be more than anything else is kind of a comprehensive list of ✨good things about PHP✨ (or, well, at least things that I think are good).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-we-got-here"&gt;
  &lt;/a&gt;
  How We Got Here
&lt;/h2&gt;

&lt;p&gt;If you have any preconceptions about PHP at all, they're probably largely shaped by what the discourse around it was during the PHP 4 and PHP 5 days. This was an era where PHP was increasingly seen as a "legacy" platform in contrast to cool new projects like Ruby on Rails and Node.js, and conventional wisdom was that PHP was simply &lt;a href="https://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/"&gt;a "bad" language&lt;/a&gt;, or at least a language a lot of people were writing bad code in.&lt;/p&gt;

&lt;p&gt;You might also have heard that PHP 7 was a big step forward for PHP, though, and this is true. While the story of how PHP got to where it is today is largely one of many incremental improvements, a lot of people would probably agree that the release of PHP 7 in 2015 was the start of the "modern" PHP era. PHP 7 &lt;a href="https://www.php.net/manual/en/migration70.new-features.php"&gt;included&lt;/a&gt;, among other things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20160413094701/http://zend.com/en/resources/php7_infographic"&gt;dramatic performance improvements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a significantly expanded type system (scalar types and return types)&lt;/li&gt;
&lt;li&gt;anonymous classes&lt;/li&gt;
&lt;li&gt;the null coalescing operator (&lt;code&gt;??&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;the spaceship operator (&lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;unicode codepoint escape syntax (&lt;code&gt;echo "\u{2764}";&lt;/code&gt; → ❤️)&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://www.php.net/manual/en/ref.csprng.php"&gt;built-in CSPRNG API&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-php-code-looks-like-today"&gt;
  &lt;/a&gt;
  What PHP Code Looks Like Today
&lt;/h2&gt;

&lt;p&gt;Over the last several years, PHP has become a significantly more ergonomic language, as examples like &lt;a href="https://stitcher.io/blog/evolution-of-a-php-object"&gt;this post&lt;/a&gt; illustrate very well. Let's do a rundown of some of the most significant features PHP has gained over the years, some of which you may or may not recognize from other languages (and some you might even wish your favorite language had!).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-null-coalescing-operator"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.null-coalesce-op"&gt;The null coalescing operator&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// equivalent to:&lt;/span&gt;
&lt;span class="c1"&gt;// $username = isset($_GET['user']) ? $_GET['user'] : 'anonymous';&lt;/span&gt;

&lt;span class="nv"&gt;$username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'user'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="s1"&gt;'anonymous'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-nullsafe-operator"&gt;
  &lt;/a&gt;
  &lt;a href="https://stitcher.io/blog/php-8-nullsafe-operator"&gt;The nullsafe operator&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;// equivalent to:&lt;/span&gt;
&lt;span class="c1"&gt;// $dateTime = $event-&amp;gt;getDateTime();&lt;/span&gt;
&lt;span class="c1"&gt;// $timestamp = $dateTime ? $dateTime-&amp;gt;getTimestamp() : null;&lt;/span&gt;

&lt;span class="nv"&gt;$timestamp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$event&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getDateTime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getTimestamp&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#constructor-property-promotion"&gt;
  &lt;/a&gt;
  &lt;a href="https://stitcher.io/blog/constructor-promotion-in-php-8"&gt;Constructor property promotion&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WidgetManager&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;LoggerInterface&lt;/span&gt; &lt;span class="nv"&gt;$logger&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code is equivalent to:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WidgetManager&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;LoggerInterface&lt;/span&gt; &lt;span class="nv"&gt;$logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;LoggerInterface&lt;/span&gt; &lt;span class="nv"&gt;$logger&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$logger&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-raw-match-endraw-expression"&gt;
  &lt;/a&gt;
  &lt;a href="https://stitcher.io/blog/php-8-match-or-switch"&gt;The &lt;code&gt;match&lt;/code&gt; expression&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SomeError&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;OtherError&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
    &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;UnknownError&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#named-arguments"&gt;
  &lt;/a&gt;
  &lt;a href="https://stitcher.io/blog/php-8-named-arguments"&gt;Named arguments&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;testFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;?string&lt;/span&gt; &lt;span class="nv"&gt;$third&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kt"&gt;?string&lt;/span&gt; &lt;span class="nv"&gt;$fourth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* … */&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nf"&gt;testFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'second value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'first value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;fourth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'fourth value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#arrow-functions"&gt;
  &lt;/a&gt;
  &lt;a href="https://stitcher.io/blog/short-closures-in-php"&gt;Arrow functions&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ArrayCollection&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="nv"&gt;$incremented&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$collection&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// $incremented is [2, 3, 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#attributes"&gt;
  &lt;/a&gt;
  &lt;a href="https://stitcher.io/blog/attributes-in-php-8"&gt;Attributes&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="c1"&gt;#[Route('/greetings')]&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GreetingController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;#[Route('/hello')]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'hello'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-spaceship-operator"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.php.net/manual/en/migration70.new-features.php#migration70.new-features.spaceship-op"&gt;The spaceship operator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;The spaceship operator is a little esoteric (and possibly a little controversial, depending on how confident you are that people reading your code will know what it does without looking it up), but the one thing it's very useful for is writing clear and succinct comparison/sorting functions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"b"&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-spread-operator"&gt;
  &lt;/a&gt;
  &lt;a href="https://wiki.php.net/rfc/spread_operator_for_array"&gt;The spread operator&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$first&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$second&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'c'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'d'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nv"&gt;$merged&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;...&lt;/span&gt;&lt;span class="nv"&gt;$second&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// $merged is ['a' =&amp;gt; 1, 'b' =&amp;gt; 2, 'c' =&amp;gt; 3, 'd' =&amp;gt; 4]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#the-numeric-literal-separator"&gt;
  &lt;/a&gt;
  &lt;a href="https://wiki.php.net/rfc/numeric_literal_separator"&gt;The numeric literal separator&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$withoutSeparators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$withSeparators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1_000_000_000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$withoutSeparators&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nv"&gt;$withSeparators&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#array-destructuring"&gt;
  &lt;/a&gt;
  &lt;a href="https://stitcher.io/blog/array-destructuring-with-list-in-php"&gt;Array destructuring&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="nv"&gt;$list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;$first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$second&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$list&lt;/span&gt;

&lt;span class="c1"&gt;// $first is 1, $second is 2&lt;/span&gt;

&lt;span class="nv"&gt;$array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;$b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$array&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// $a is 1, $b is 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#phps-type-system"&gt;
  &lt;/a&gt;
  PHP's Type System
&lt;/h2&gt;

&lt;p&gt;While it's by no means the strictest type system out there (not to mention entirely optional, much like TypeScript), modern PHP has a robust type system that includes features like &lt;strong&gt;interfaces, scalar and object types, nullable types, union and intersection types, and more&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Code speaks louder than words, so here's an example of what code that takes full advantage of the type system in PHP 8.1 can look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="k"&gt;declare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strict_types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nc"&gt;DateTimeInterface&lt;/span&gt; &lt;span class="nv"&gt;$dateTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="nf"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;public&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt; &lt;span class="nc"&gt;LoggerInterface&lt;/span&gt; &lt;span class="nv"&gt;$logger&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;useUnionTypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $input is guaranteed to be either an int or a string&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;useIntersectionTypes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nc"&gt;Countable&lt;/span&gt; &lt;span class="nv"&gt;$input&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// $input is guaranteed to satisfy the constraints&lt;/span&gt;
        &lt;span class="c1"&gt;// of both `Traversable` AND `Countable`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#package-management"&gt;
  &lt;/a&gt;
  Package Management
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://getcomposer.org/"&gt;Composer&lt;/a&gt; is the de facto standard package manager for modern-day PHP, and has been for about a decade now. It's strongly inspired by other popular package managers, such as &lt;a href="https://www.npmjs.com/"&gt;npm&lt;/a&gt; for JavaScript, so if you've used a modern package manager in any other language, chances are you'll feel right at home with Composer.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://packagist.org/"&gt;Packagist&lt;/a&gt; is the main public package repository for Composer. Like npm, you can also use Packagist to host your private packages for &lt;a href="https://packagist.com/pricing"&gt;a reasonable monthly fee&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What I'd consider the main difference between Composer and npm is actually one of culture, rather than a technical difference — the PHP community doesn't generally have the preference for micropackages that the JavaScript community does, so for better or worse, the average PHP project is more likely to have dozens of larger dependencies than hundreds of smaller ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frameworks"&gt;
  &lt;/a&gt;
  Frameworks
&lt;/h2&gt;

&lt;p&gt;The current PHP landscape is dominated by two web application frameworks: &lt;a href="https://laravel.com/"&gt;Laravel&lt;/a&gt; and &lt;a href="https://symfony.com/"&gt;Symfony&lt;/a&gt;. While a detailed breakdown of the differences and similarities between these is out of scope for this post, suffice to say that they're both modern, expressive frameworks that aim to make it easier to write robust, fast, and maintainable web applications while reducing the need to write boilerplate code as much as possible.&lt;/p&gt;

&lt;p&gt;If you're concerned about frameworks perhaps being "overkill" for what you want to do with PHP, you'll be happy to hear that Symfony is a microframework out of the box (all components outside of the core framework are 100% optional), and Laravel also has a microframework variant called &lt;a href="https://lumen.laravel.com/"&gt;Lumen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To help you get a bit of a feel for these, here's what some typical modern PHP code written with one of these frameworks might look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="kn"&gt;namespace&lt;/span&gt; &lt;span class="nn"&gt;App\Controller&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Symfony\Component\HttpFoundation\Response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Symfony\Component\Routing\Annotation\Route&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleController&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// the RandomNumberGenerator is automatically&lt;/span&gt;
    &lt;span class="c1"&gt;// injected by a service container&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;__construct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kt"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;RandomNumberGenerator&lt;/span&gt; &lt;span class="nv"&gt;$randomNumberGenerator&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="c1"&gt;#[Route('/number')]&lt;/span&gt;
    &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="kt"&gt;Response&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nv"&gt;$number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;randomNumberGenerator&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;generate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;"&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Your lucky number is: &lt;/span&gt;&lt;span class="nv"&gt;$number&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;"&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#the-opensource-ecosystem"&gt;
  &lt;/a&gt;
  The Open-Source Ecosystem
&lt;/h2&gt;

&lt;p&gt;PHP has an incredibly robust open-source ecosystem that I honestly think even a lot of more "respectable" languages can envy.&lt;/p&gt;

&lt;p&gt;There are high-quality, well-maintained open-source libraries available for pretty much everything the average PHP application is likely to need, and many of the most popular packages in the ecosystem are maintained by established vendors or projects rather than &lt;a href="https://xkcd.com/2347/"&gt;individual maintainers&lt;/a&gt;, though of course there's plenty of those, too.&lt;/p&gt;

&lt;p&gt;Anyhow, the following is a &lt;em&gt;very&lt;/em&gt; surface-level overview of some of the most significant packages in the PHP ecosystem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;symfony/*&lt;/code&gt; - the &lt;a href="https://symfony.com/components"&gt;Symfony Components&lt;/a&gt;, a set of incredibly popular PHP packages and the foundation for the &lt;a href="https://symfony.com/doc/current/index.html"&gt;Symfony framework&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;symfony/cache&lt;/code&gt; - a production-ready caching library with support for many different backing stores&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/console&lt;/code&gt; - a CLI library used by many notable PHP projects&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/dependency-injection&lt;/code&gt; - a &lt;a href="https://www.php-fig.org/psr/psr-11/"&gt;PSR-11&lt;/a&gt;-compatible service container&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/dotenv&lt;/code&gt; - a &lt;code&gt;.env&lt;/code&gt; file parser&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/event-dispatcher&lt;/code&gt; - an event dispatcher&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/form&lt;/code&gt; - a library for creating and processing forms (HTML or otherwise)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/http-client&lt;/code&gt; - an HTTP client library&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/mailer&lt;/code&gt; - a multi-transport library for creating and sending emails&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/messenger&lt;/code&gt; - a message bus with support for sync and async message processing&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/notifier&lt;/code&gt; - a tool for sending notifications with first-party support for email, SMS, Slack, Discord, Telegram, push notifications, and more&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/routing&lt;/code&gt; - the router used by the Symfony framework&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/security&lt;/code&gt; - utilities for authentication, authorization, CSRF protection, and other common security needs&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/serializer&lt;/code&gt; - a serialization/deserialization library with support for JSON, XML, YAML, CSV, and more&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;symfony/validator&lt;/code&gt; - a data validation library&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;league/*&lt;/code&gt; - &lt;a href="https://thephpleague.com/"&gt;The League of Extraordinary Packages&lt;/a&gt;, a set of modern, standards-compliant PHP packages developed with the explicit mission of improving the PHP ecosystem

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;league/commonmark&lt;/code&gt; - a CommonMark-compliant Markdown parser&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;league/csv&lt;/code&gt; - read and write CSV documents&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;league/flysystem&lt;/code&gt; - a filesystem abstraction with support for local filesystems, object storage, FTP, and more&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;league/oauth2-server&lt;/code&gt; - an OAuth 2.0 authorization server implementation&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;league/oauth2-client&lt;/code&gt; - an OAuth 2.0 client library with built-in and community support for many common OAuth 2.0 providers, as well as custom providers&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;league/omnipay&lt;/code&gt; - a multi-gateway payment processing library&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;doctrine/*&lt;/code&gt; - packages from &lt;a href="https://www.doctrine-project.org/"&gt;the Doctrine Project&lt;/a&gt;, largely but not exclusively related to working with databases

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;doctrine/collections&lt;/code&gt; - utilities for working with arrays of data&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;doctrine/dbal&lt;/code&gt; - a &lt;strong&gt;d&lt;/strong&gt;ata*&lt;em&gt;b&lt;/em&gt;&lt;em&gt;ase **a&lt;/em&gt;&lt;em&gt;bstraction **l&lt;/em&gt;*ayer with support for MySQL, Oracle, Microsoft SQL Server, PostgreSQL, and SQLite databases&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;doctrine/orm&lt;/code&gt; - the Doctrine ORM, a popular PHP ORM based on the Data Mapper pattern&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;doctrine/migrations&lt;/code&gt; - utilities for database schema versioning (i.e. &lt;a href="https://en.wikipedia.org/wiki/Schema_migration"&gt;database migrations&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phpoffice/*&lt;/code&gt; - packages from the &lt;a href="https://github.com/PHPOffice"&gt;PHPOffice&lt;/a&gt; project, a set of libraries for working with file formats produced by Microsoft Office and other office suites

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;phpoffice/phppresentation&lt;/code&gt; - read and write presentation file formats (e.g. &lt;code&gt;.pptx&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phpoffice/phpspreadsheet&lt;/code&gt; - read and write spreadsheet file formats (e.g. &lt;code&gt;.xlsx&lt;/code&gt;, &lt;code&gt;.csv&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phpoffice/phpword&lt;/code&gt; - read and write document file formats (e.g. &lt;code&gt;.docx&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;guzzlehttp/guzzle&lt;/code&gt; - an HTTP client library based on &lt;a href="https://www.php-fig.org/psr/psr-7/"&gt;PSR-7&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;monolog/monolog&lt;/code&gt; - a very widely-used logging library based on &lt;a href="https://www.php-fig.org/psr/psr-3/"&gt;PSR-3&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phpunit/phpunit&lt;/code&gt; - the de facto standard PHP testing framework, based on the &lt;a href="https://en.wikipedia.org/wiki/XUnit"&gt;xUnit&lt;/a&gt; architecture&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;pestphp/pest&lt;/code&gt; - a modern testing framework built on top of PHPUnit&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nesbot/carbon&lt;/code&gt; - an extension of the PHP &lt;code&gt;DateTime&lt;/code&gt; API&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phpstan/phpstan&lt;/code&gt; - a static analysis tool, the most popular of several active projects&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;twig/twig&lt;/code&gt; - a modern template engine, inspired by Python's Jinja template engine&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#phpfig"&gt;
  &lt;/a&gt;
  PHP-FIG
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.php-fig.org/"&gt;PHP-FIG&lt;/a&gt; — short for "PHP &lt;strong&gt;F&lt;/strong&gt;ramework &lt;strong&gt;I&lt;/strong&gt;nterop &lt;strong&gt;G&lt;/strong&gt;roup" — is a group of influential projects in the PHP community working to push PHP forward by standardizing a bunch of things every project was doing in its own, ever-so-slightly incompatible way.&lt;/p&gt;

&lt;p&gt;Unfortunately, while pretty much all of the most influential projects in the PHP ecosystem &lt;em&gt;were&lt;/em&gt; once members of PHP-FIG, many have since left over concerns that the project was headed in the direction of building a "framework-by-committee" rather than working on relatively simple standards everyone could actually implement. &lt;a href="https://xkcd.com/1095/"&gt;Some things&lt;/a&gt; never change, I guess.&lt;/p&gt;

&lt;p&gt;That being said, PHP-FIG still very much deserves a place in this post, both because it's frankly a pretty unique project I don't think I've seen attempted anywhere else, and also because it's still produced a number of incredibly useful &lt;a href="https://www.php-fig.org/psr/"&gt;PSRs&lt;/a&gt; (&lt;strong&gt;P&lt;/strong&gt;HP &lt;strong&gt;S&lt;/strong&gt;tandard &lt;strong&gt;R&lt;/strong&gt;ecommendations) over the years. These include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;an autoloading standard (&lt;a href="https://www.php-fig.org/psr/psr-4/"&gt;PSR-4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;interfaces for common app/framework components (&lt;a href="https://www.php-fig.org/psr/psr-3/"&gt;PSR-3&lt;/a&gt;, &lt;a href="https://www.php-fig.org/psr/psr-6/"&gt;PSR-6&lt;/a&gt;, &lt;a href="https://www.php-fig.org/psr/psr-11/"&gt;PSR-11&lt;/a&gt;, &lt;a href="https://www.php-fig.org/psr/psr-14/"&gt;PSR-14&lt;/a&gt;, &lt;a href="https://www.php-fig.org/psr/psr-16/"&gt;PSR-16&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;standards for HTTP request/response objects and code that handles them (&lt;a href="https://www.php-fig.org/psr/psr-7/"&gt;PSR-7&lt;/a&gt;, &lt;a href="https://www.php-fig.org/psr/psr-18/"&gt;PSR-18&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;style guides (&lt;a href="https://www.php-fig.org/psr/psr-1/"&gt;PSR-1&lt;/a&gt;, &lt;a href="https://www.php-fig.org/psr/psr-12/"&gt;PSR-12&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#no-compilingtranspiling"&gt;
  &lt;/a&gt;
  No Compiling/Transpiling
&lt;/h2&gt;

&lt;p&gt;One thing you'll probably find refreshing about PHP compared to many comparable languages is that it doesn't require a build step (at least, not one that you have to think about). In fact, due to PHP's typical execution model (more on that later), not only is there no build step, but you don't even have to restart your web server when you change your code — hit save, send the request again and the response you get will be from the code you just saved.&lt;/p&gt;

&lt;p&gt;One major benefit of this (to me, anyway) is that when you install a package through Composer, you're simply downloading the source code of the package, not compiled artifacts or code mangled by some build tool before publishing. What this means for you is that any time you click into, say, a function that comes from a third-party package, you're going to be looking at the actual source code — formatting, comments and all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#php-is-fast"&gt;
  &lt;/a&gt;
  PHP is Fast
&lt;/h2&gt;

&lt;p&gt;While it's hard to make apples-to-apples performance comparisons between programming languages, and you probably shouldn't be worrying about language runtime performance that much anyway (your code is almost always going to be I/O-bound, after all), it's worth pointing out that modern PHP is very fast, handily beating "slow" languages like Ruby in &lt;a href="https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/php-ruby.html"&gt;synthetic benchmarks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;More than anything else, this is thanks to lots of hard work put into improving performance by the PHP team over the years, up to and including adding entirely new features, such as the &lt;a href="https://php.watch/versions/8.0/JIT"&gt;JIT compiler&lt;/a&gt; introduced in PHP 8.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ups-and-downs-of-phps-unique-execution-model"&gt;
  &lt;/a&gt;
  The Ups and Downs of PHP's Unique Execution Model
&lt;/h2&gt;

&lt;p&gt;You might have heard people say that PHP was "doing serverless before serverless was a thing", and this is &lt;em&gt;kind of&lt;/em&gt; true.&lt;/p&gt;

&lt;p&gt;The way people used to write PHP was they'd have a bunch of PHP files where each file corresponded to a page or route (e.g. &lt;code&gt;index.php&lt;/code&gt; for a homepage, &lt;code&gt;item.php&lt;/code&gt; for another page, and so on) and output some HTML. Then they'd upload this code to their server — often a shared hosting provider where all a developer had to do was FTP the files up to the server, and it'd just work. The web server would handle all the parts external to your code, like starting up a PHP process for the request and giving it the right script based on the path.&lt;/p&gt;

&lt;p&gt;There's a lot of sites on the internet that still work this way, and while PHP has since evolved past some parts of this approach, you can probably see how it resembles some patterns that have become popular in recent years, like &lt;a href="https://nextjs.org/docs/routing/introduction"&gt;filesystem-based routing&lt;/a&gt; and &lt;a href="https://vercel.com/docs/concepts/functions/serverless-functions"&gt;serverless functions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The part of this that's most relevant today is the idea that &lt;strong&gt;your app gets initialized and torn down for every request&lt;/strong&gt;. Any variables you set, anything you do to the objects in your app, everything gets wiped out at the end of the request — there's no way to persist data between requests without relying on some sort of external resource, like a database.&lt;/p&gt;

&lt;p&gt;There are naturally some drawbacks to this setup, not the least of which being that it means that putting some data in memory to keep it around for a while is less trivial in PHP than it is in something like Node.js. On the other hand, this setup makes whole classes of bugs impossible at the application level (like meaningful memory leaks), and perhaps more importantly, it means you don't have to worry about writing async code nearly as much as other languages, because you're only ever going to be handling one request per process anyway.&lt;/p&gt;

&lt;p&gt;For instance, making an HTTP request is as simple as writing a blocking call to an HTTP client:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight php"&gt;&lt;code&gt;&lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="nc"&gt;Symfony\Component\HttpClient\HttpClient&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nv"&gt;$client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;HttpClient&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$client&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'GET'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://example.com'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$statusCode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getStatusCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nv"&gt;$content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$response&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nf"&gt;getContent&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In most other languages, code like this would be a huge no-no because you'd be blocking the runtime from handling any other requests while you wait for that call to &lt;code&gt;HttpClient::request()&lt;/code&gt; to finish. In PHP, though, because the assumption that you have the process "to yourself" is built into the language, you can write blocking code like this safely, while avoiding the mental overhead that async code can sometimes involve.&lt;/p&gt;

&lt;p&gt;I should probably cap this section off by mentioning that there &lt;em&gt;has&lt;/em&gt; been a push in recent years to make asynchronous code viable in PHP, and frameworks like &lt;a href="https://amphp.org/"&gt;Amp&lt;/a&gt; have made significant progress in this area. That being said, the vast majority of PHP code is still synchronous, and will be for the foreseeable future.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;If you came into this post with the mindset that PHP is a legacy language nobody in their right mind would want to write code for today, well, I hope I've been able to at least somewhat change your mind on that.&lt;/p&gt;

&lt;p&gt;PHP, of course, still has its share of warts, but more than anything else, what I wanted to convey with this post is that &lt;strong&gt;it's absolutely possible to write reliable, clean, maintainable code in PHP that you and/or your team will be happy with&lt;/strong&gt;. Not only that, but there are parts of PHP that you might even &lt;em&gt;prefer&lt;/em&gt; to how things work in other languages you're familiar with.&lt;/p&gt;

&lt;p&gt;Still not convinced? You're more than welcome to peruse the rest of my site (&lt;a href="https://bulletproofphp.dev"&gt;https://bulletproofphp.dev&lt;/a&gt;) to perhaps get a better feel for what real-world PHP looks like, and if you have concerns you think I overlooked in this post, I'd be happy to talk about it &lt;a href="https://twitter.com/omegavesko"&gt;on Twitter&lt;/a&gt; or in the comments here.&lt;/p&gt;

</description>
      <category>php</category>
      <category>programming</category>
      <category>laravel</category>
    </item>
    <item>
      <title>Learn how to use Git and GitHub in a team like a pro</title>
      <author>Damian Demasi</author>
      <pubDate>Wed, 17 Nov 2021 22:55:55 +0000</pubDate>
      <link>https://dev.to/colocodes/learn-how-to-use-git-and-github-in-a-team-like-a-pro-2dk7</link>
      <guid>https://dev.to/colocodes/learn-how-to-use-git-and-github-in-a-team-like-a-pro-2dk7</guid>
      <description>&lt;p&gt;In this tutorial, you will learn how to work in a team with a central repository on GitHub. You will work on issues, commits, pull requests, code reviews, and more.&lt;/p&gt;

&lt;p&gt;I don't consider myself an expert on Git, but I have learned a lot about it in my first month working as a software developer. This tutorial is the result of my effort in telling you how Git is used in professional environments. Bear in mind that there is not just a single way of using Git, so this is just one approach, and it may differ from what you see in your professional career.&lt;/p&gt;

&lt;p&gt;A good read to start working with Git workflows is the &lt;a href="https://www.atlassian.com/git/tutorials/comparing-workflows"&gt;Comparing Workflows&lt;/a&gt; tutorial by Atlassian.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-project"&gt;
  &lt;/a&gt;
  The project
&lt;/h2&gt;

&lt;p&gt;Harry and Hermione had the great idea of building a SaaS app to allow people to build their own potions online and share them with the rest of the world. They named it &lt;strong&gt;Potionfy&lt;/strong&gt;, and this will be their first start-up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/BttC0fsMuGXVS/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/BttC0fsMuGXVS/giphy.gif" width="500" height="209"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They decided to use GitHub as the central repository in which all their work was going to be stored, and they chose React and Ruby on Rails as the app technology stack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-team"&gt;
  &lt;/a&gt;
  The team
&lt;/h2&gt;

&lt;p&gt;Potionfy will be bootstrapped by Harry and Hermione themselves by using their savings. They will work in the garage of their home and they expect to have an MVP ready in 4 weeks.&lt;/p&gt;

&lt;p&gt;Let's see how they will work together in building the SaaS product and the obstacles they will have to overcome in doing so.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#initial-setup"&gt;
  &lt;/a&gt;
  Initial set-up
&lt;/h2&gt;

&lt;p&gt;This project will use two fictional team members, let's call them Harry and Hermione, with two separate GitHub accounts, so you may want to start creating two accounts on GitHub for this.&lt;/p&gt;

&lt;p&gt;Bonus: in order to simplify things, if you have a Gmail account you can use your Gmail address with a plus and a string after the first part of it, and all email communications will be centralised in one account, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my_email_address+harry@gmail.com
my_email_address+hermione@gmail.com
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;More on this &lt;a href="https://support.google.com/a/users/answer/9308648?hl=en"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-create-two-different-github-accounts"&gt;
  &lt;/a&gt;
  Step 1: create two different GitHub accounts
&lt;/h3&gt;

&lt;p&gt;In order to follow along with this tutorial, you'll need two different GitHub accounts. I chose to create two, but you can just use your own and create another one. Here is how my set-up looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0KWBSM-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8n5im9orxfgn5cf19ch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0KWBSM-d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o8n5im9orxfgn5cf19ch.png" alt="Harry and Hermione GitHub accounts" width="880" height="449"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-local-development-environment"&gt;
  &lt;/a&gt;
  Step 2: local development environment
&lt;/h3&gt;

&lt;p&gt;We are going to use a local development environment and set up Git on it. I decided to use a virtual machine running Linux, but you can use your own environment (I just want to avoid any kind of configuration problem with Git).&lt;/p&gt;

&lt;p&gt;We have to make sure Git is installed in our system:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command should return the version of Git that is installed in our system. In my case, my virtual Ubuntu didn't have it installed, so I ran:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-team-work-considerations"&gt;
  &lt;/a&gt;
  Step 3: team work considerations
&lt;/h3&gt;

&lt;p&gt;Harry will be the one working locally in our development environment, and Hermione will choose to work directly on GitHub by using an online VSCode (more on this later).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#working-on-the-project"&gt;
  &lt;/a&gt;
  Working on the project
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#step-1-creating-the-repository-and-building-the-team-for-free"&gt;
  &lt;/a&gt;
  Step 1: Creating the repository and building the team (for free)
&lt;/h3&gt;

&lt;p&gt;Hermione is the leader of the team, as she is more experienced in coding, so she has decided to create a new repository to host the code for the SaaS product. To create the repository, she simply used the GitHub web interface and clicked on the &lt;code&gt;Repositories&lt;/code&gt; tab, and then on the &lt;code&gt;New&lt;/code&gt; button. She named the repository is &lt;code&gt;potionfy&lt;/code&gt; and she added a short description and a &lt;code&gt;Readme.md&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUaWWJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92a2v6z1asks9og4pows.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUaWWJCN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/92a2v6z1asks9og4pows.png" alt="Potionfy repository" width="855" height="927"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the repository was created, she invited Harry to work on it. To do so, she clicked on the &lt;code&gt;Settings&lt;/code&gt; tab in the &lt;code&gt;potionfy&lt;/code&gt; repository, then in the &lt;code&gt;Manage access&lt;/code&gt; option, and finally in the &lt;code&gt;Add people&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9IHzmCc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3veijbtrpirpxpx5qivl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9IHzmCc5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3veijbtrpirpxpx5qivl.png" alt="Add people to the repository" width="852" height="872"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By entering Harry's GitHub username (or email address) in the pop-up window and clicking on the &lt;code&gt;Add Harry(...) to this repository&lt;/code&gt;, she managed to send the invitation to Harry.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6fCI6cGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o5mdaunh0wnbwil28c4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6fCI6cGj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o5mdaunh0wnbwil28c4.png" alt="Inviting Harry" width="493" height="345"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A couple of seconds later, Harry received the invitation to his email:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wlCPpeAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82utres034fp4hmpvkta.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wlCPpeAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82utres034fp4hmpvkta.png" alt="Invitation email" width="603" height="726"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;He accepter it, and by doing so, both team members were ready to start working on their project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In case the invitation link does not work (as in my case), Harry needs to go to Hermione GitHub profile, click on the &lt;code&gt;potionfy&lt;/code&gt; repository, and accept the invitation there:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AyQFG-0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71u7wj0v3cicwnpinbhw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AyQFG-0p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/71u7wj0v3cicwnpinbhw.png" alt="Accepting invitation (part 1)" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yFsIhZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4d69vm27g19jo6kcvbv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yFsIhZZK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4d69vm27g19jo6kcvbv.png" alt="Accepting invitation (part 2)" width="880" height="603"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-creating-a-file"&gt;
  &lt;/a&gt;
  Step 2: creating a file
&lt;/h3&gt;

&lt;p&gt;Hermione started the project by creating the initial file the Potionfy SaaS product will use: &lt;code&gt;index.html&lt;/code&gt;. In order to do so, she created the file using the GitHub web interface by positioning herself in the repository and clicking on the &lt;code&gt;Add file&lt;/code&gt; &amp;gt; &lt;code&gt;Create new file&lt;/code&gt; buttons.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2IB9FqrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gdlz27zm8k8cpziv7be.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2IB9FqrZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2gdlz27zm8k8cpziv7be.png" alt="Image description" width="852" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then she added the name of the file, its content, and a meaningful commit message. After clicking on the &lt;code&gt;Commit new file&lt;/code&gt; button, the file was created on the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2iZsdaMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si7jxizohz7adle8rtr0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2iZsdaMm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/si7jxizohz7adle8rtr0.png" alt="Creating a file" width="852" height="1296"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-3-creating-an-issue-and-working-on-it"&gt;
  &lt;/a&gt;
  Step 3: creating an issue and working on it
&lt;/h3&gt;

&lt;p&gt;Hermione needs to move on to work on the marketing related to  Potionfy launch, so she told Harry to add a simple landing message to the &lt;code&gt;index.html&lt;/code&gt; file. So, she proceeded to create an &lt;strong&gt;issue&lt;/strong&gt; in the repository by clicking on the &lt;code&gt;Issues&lt;/code&gt; tab and clicking on the &lt;code&gt;New issue&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ8yNFqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rasnvg01wtaxt35p4oa8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uQ8yNFqz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rasnvg01wtaxt35p4oa8.png" alt="New issue" width="852" height="620"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rGZmODep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgf8tpr35i1dbzpnno2l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rGZmODep--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mgf8tpr35i1dbzpnno2l.png" alt="New issue description" width="852" height="727"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the issue was created, Harry took a look at it (also by going to the &lt;code&gt;issues&lt;/code&gt; tab in the Potionfy repository) and let Hermione know that he will be working on it by leaving a comment and assigning the issue to himself.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--irhINinD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n6z1xfed0iy71y3nkpa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--irhINinD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6n6z1xfed0iy71y3nkpa.png" alt="Issue assignment" width="852" height="1063"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By working with this dynamic, the team will know who is working on what.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-4-setting-up-the-local-development-environment"&gt;
  &lt;/a&gt;
  Step 4: setting up the local development environment
&lt;/h3&gt;

&lt;p&gt;In order to work on the project's &lt;code&gt;index.html&lt;/code&gt; file, Harry chose to work locally, so he needed to clone the &lt;code&gt;potionfy&lt;/code&gt; repository in his development environment (the Linux virtual machine).&lt;/p&gt;

&lt;p&gt;The first thing he had to do was set up the SSH keys to work with GitHub. He followed GitHub's &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent"&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt; tutorial to do so. He then added the key to his GitHub account, following the &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account"&gt;Adding a new SSH key to your GitHub account&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;p&gt;Then, Harry opened Hermione repository on GitHub and copied &lt;br&gt;
the link to clone it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PeoQFJOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj9me394xsugdav4wouh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PeoQFJOw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vj9me394xsugdav4wouh.png" alt="Cloning repository" width="852" height="631"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in his local development environment, he created a new directory in which all his work would be centralised:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ~/development
$ cd ~/development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, he cloned the repository by typing &lt;code&gt;git clone&lt;/code&gt; and pasting the code he just copied from GitHub (which is the &lt;em&gt;address&lt;/em&gt; of the repository):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git clone git@github.com:Hermione-Colo-Codes/potionfy.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this way, he now has a local copy of the repository and he is ready to start working on it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ll
total 12
drwxrwxr-x  3 parallels parallels 4096 Nov 17 07:34 ./
drwxr-xr-x 23 parallels parallels 4096 Nov 17 07:33 ../
drwxrwxr-x  3 parallels parallels 4096 Nov 17 07:34 potionfy/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#github-flow"&gt;
  &lt;/a&gt;
  GitHub flow
&lt;/h3&gt;

&lt;p&gt;In order to work on a repository, this is the workflow GitHub recommends:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a branch&lt;/li&gt;
&lt;li&gt;Make changes&lt;/li&gt;
&lt;li&gt;Create a pull request&lt;/li&gt;
&lt;li&gt;Address review comments&lt;/li&gt;
&lt;li&gt;Merge your pull request&lt;/li&gt;
&lt;li&gt;Delete your branch&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For more information about this, you can read &lt;a href="https://docs.github.com/en/get-started/quickstart/github-flow"&gt;this document&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-branching"&gt;
  &lt;/a&gt;
  Step 1: branching
&lt;/h4&gt;

&lt;p&gt;As it is a good practice not to work on the master branch directly, Harry created a new branch related to the issue on which he will be working. He chose to do this on the GitHub repository, but he could have done the same in his local environment using Git commands.&lt;/p&gt;

&lt;p&gt;He chose a meaningful name and prefixed the name with the number of the related issue (which is &lt;code&gt;1&lt;/code&gt;, in this case).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jnp448GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6yne1wb24kctulcw654.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jnp448GF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f6yne1wb24kctulcw654.png" alt="Creating a branch" width="852" height="602"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;More information about how to create a branch on GitHub can be &lt;a href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/creating-and-deleting-branches-within-your-repository"&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-working-on-the-branch-locally"&gt;
  &lt;/a&gt;
  Step 2: working on the branch locally
&lt;/h4&gt;

&lt;p&gt;After the branch was created, Harry started working on it. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-21-raw-git-pull-endraw-"&gt;
  &lt;/a&gt;
  Step 2.1: &lt;code&gt;git pull&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;The first thing he did was a &lt;code&gt;pull&lt;/code&gt; of the whole repository so he could see the branch in his local development environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git pull
Warning: Permanently added the ECDSA host key &lt;span class="k"&gt;for &lt;/span&gt;IP address &lt;span class="s1"&gt;'13.237.44.5'&lt;/span&gt; to the list of known hosts.
From github.com:Hermione-Colo-Codes/potionfy
 &lt;span class="k"&gt;*&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;new branch]      1-add-landing-message -&amp;gt; origin/1-add-landing-message
Already up to date.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#step-22-raw-git-checkout-endraw-"&gt;
  &lt;/a&gt;
  Step 2.2: &lt;code&gt;git checkout&lt;/code&gt;
&lt;/h5&gt;

&lt;p&gt;With the new branch in his environment, he switched to it by using the &lt;code&gt;git checkout &amp;lt;name_of_branch&amp;gt;&lt;/code&gt; command. After doing so, he ensured he was working in the correct branch with the &lt;code&gt;git branch&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout 1-add-landing-message 
Branch &lt;span class="s1"&gt;'1-add-landing-message'&lt;/span&gt; &lt;span class="nb"&gt;set &lt;/span&gt;up to track remote branch &lt;span class="s1"&gt;'1-add-landing-message'&lt;/span&gt; from &lt;span class="s1"&gt;'origin'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;
Switched to a new branch &lt;span class="s1"&gt;'1-add-landing-message'&lt;/span&gt;

~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git branch
&lt;span class="k"&gt;*&lt;/span&gt; 1-add-landing-message
  main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#step-23-solve-the-issue"&gt;
  &lt;/a&gt;
  Step 2.3: solve the issue
&lt;/h5&gt;

&lt;p&gt;Harry started working on solving the issue. In order to do so, he opened the &lt;code&gt;index.html&lt;/code&gt; file and added a &lt;code&gt;h1&lt;/code&gt; header to it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8gT-5rLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rhinjvy8z4ouozekolm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8gT-5rLW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1rhinjvy8z4ouozekolm.png" alt="Making changes to the file" width="880" height="489"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the changes were made, he saw how Git reacted to this change.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git status
On branch 1-add-landing-message
Your branch is up to &lt;span class="nb"&gt;date &lt;/span&gt;with &lt;span class="s1"&gt;'origin/1-add-landing-message'&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt;

Changes not staged &lt;span class="k"&gt;for &lt;/span&gt;commit:
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add &amp;lt;file&amp;gt;..."&lt;/span&gt; to update what will be committed&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git restore &amp;lt;file&amp;gt;..."&lt;/span&gt; to discard changes &lt;span class="k"&gt;in &lt;/span&gt;working directory&lt;span class="o"&gt;)&lt;/span&gt;
    modified:   index.html

no changes added to commit &lt;span class="o"&gt;(&lt;/span&gt;use &lt;span class="s2"&gt;"git add"&lt;/span&gt; and/or &lt;span class="s2"&gt;"git commit -a"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
parallels@parallels-Parallels-Virtual-Platform:~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;He then added the file to the staging area with the &lt;code&gt;git add&lt;/code&gt; command and committed the change with the &lt;code&gt;git commit&lt;/code&gt; command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git add &lt;span class="nb"&gt;.&lt;/span&gt;

~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git commit &lt;span class="nt"&gt;-m&lt;/span&gt; &lt;span class="s2"&gt;"Add landing message. #1"&lt;/span&gt;

~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note how the commit message also includes the id of the issue, which in this case is &lt;code&gt;#1&lt;/code&gt;.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-24-push-to-repository"&gt;
  &lt;/a&gt;
  Step 2.4: push to repository
&lt;/h5&gt;

&lt;p&gt;The next step Harry needs to do is to push the changes to the repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;~/development/potionfy&lt;span class="nv"&gt;$ &lt;/span&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cybptRf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spgnh14xpr1wnqlis2k3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cybptRf3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/spgnh14xpr1wnqlis2k3.png" alt="Pushing changes" width="880" height="739"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#step-25-create-a-pull-request"&gt;
  &lt;/a&gt;
  Step 2.5: create a pull request
&lt;/h5&gt;

&lt;p&gt;Harry then clicked on the &lt;code&gt;Compare and pull request&lt;/code&gt; button in the GitHub repository (making sure his branch was selected in the branch left drop-down menu).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RXN2Yco7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsmrf4fbqloojq41tk0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RXN2Yco7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9nsmrf4fbqloojq41tk0.png" alt="Pull request" width="880" height="912"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This pull request will be analysed by Hermione and she will decide if it can be merged to the master branch or not. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#part-2"&gt;
  &lt;/a&gt;
  Part 2
&lt;/h2&gt;

&lt;p&gt;As this tutorial is becoming huge, I have divided it into two parts. In the next part we are going to see how Hermione reviews Harry's code and deals with the pull request, so stay tuned!&lt;/p&gt;




&lt;p&gt;🗞️ &lt;strong&gt;NEWSLETTER -&lt;/strong&gt; &lt;em&gt;If you want to hear about my latest articles and interesting software development content, &lt;a href="https://chipper-designer-8106.ck.page/1a819bffe8"&gt;subscribe to my newsletter&lt;/a&gt;. &lt;strong&gt;I will be giving away a Udemy course among my newsletter subscribers&lt;/strong&gt; if we go over 100 during the month of November 2021!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;🐦 &lt;strong&gt;TWITTER -&lt;/strong&gt; &lt;em&gt;Follow me on &lt;a href="https://twitter.com/DamianDemasi"&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How to Quickly Improve Your Infrastructure as Code</title>
      <author>Marcin Wyszynski</author>
      <pubDate>Wed, 17 Nov 2021 22:40:00 +0000</pubDate>
      <link>https://dev.to/spacelift/how-to-quickly-improve-your-infrastructure-as-code-3b1o</link>
      <guid>https://dev.to/spacelift/how-to-quickly-improve-your-infrastructure-as-code-3b1o</guid>
      <description>&lt;p&gt;The introduction of &lt;a href="https://spacelift.io/blog/infrastructure-as-code"&gt;Infrastructure as Code&lt;/a&gt; or IaC has transformed the way you can provision and deploy high-performance cloud-based IT infrastructures.&lt;/p&gt;

&lt;p&gt;IaC tools, such as &lt;a href="https://spacelift.io/blog/what-is-terraform"&gt;Terraform&lt;/a&gt;, have been integrated into DevOps toolchains, saving DevOps IaC teams from the excessive manual effort.&lt;/p&gt;

&lt;p&gt;While these tools undoubtedly help accelerate building IT infrastructures, their limitations can impact DevOps’ ability to optimize and improve control of their IaC processes supporting future business needs.&lt;/p&gt;

&lt;p&gt;In this article, you’ll learn about IT infrastructure limitations that IaC DevOps teams deal with on a daily basis and how &lt;a href="https://spacelift.io/"&gt;Spacelift&lt;/a&gt; is able to get past them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-workflow"&gt;
  &lt;/a&gt;
  1) Workflow
&lt;/h1&gt;

&lt;p&gt;One of the most frequent challenges while using more generic IaC tools is the &lt;strong&gt;non-intuitive workflow&lt;/strong&gt; driven by its reliance on pull requests. Some solutions offer multiple workspaces, but the result can be fragile and nondeterministic. &lt;/p&gt;

&lt;p&gt;Since there’s no concept of mapping projects to branches or tags, anyone commenting on an approved pull request can deploy arbitrary code to production, even if the approval was meant for a short-lived experimental environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spacelift does not depend on pull requests.&lt;/strong&gt; It is mostly driven by push and tag events, so building a sophisticated Git flow is much easier. Spacelift reports the outcome of its jobs as commit status checks, allowing you to block merging the code on a failing Spacelift check.&lt;/p&gt;

&lt;p&gt;Triggering a run can be customized using &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;Git push policies&lt;/a&gt;. Thanks to that, Spacelift can provide the same level of comfort and security to teams using one project per repository and those using mono repo with hundreds of interdependent projects. You can read more about our approach to VCS integration &lt;a href="https://docs.spacelift.io/integrations/source-control/github#tracked-branches"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-access-control"&gt;
  &lt;/a&gt;
  2) Access Control
&lt;/h1&gt;

&lt;p&gt;The majority of generic tools don’t offer access control models but rely on comments on pull requests to drive infrastructure deployments. While it is usually fine when a single repository drives a single Terraform project, it becomes a huge liability for more complex scenarios.&lt;/p&gt;

&lt;p&gt;Spacelift ships with a sophisticated mechanism &lt;strong&gt;allowing administrators to declare&lt;/strong&gt; &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;who can log in&lt;/a&gt; (and under what circumstances) and what their &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;level of access&lt;/a&gt; to each of the managed projects should be. Even our &lt;a href="https://docs.spacelift.io/integrations/slack"&gt;Slack integration&lt;/a&gt; can be subject to policy controls, allowing an admin to grant access to a project &lt;a href="https://docs.spacelift.io/integrations/slack#managing-access-to-stacks-with-policies"&gt;based on Slack-specific data&lt;/a&gt; (think team, channel, user, etc.).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-policy-framework"&gt;
  &lt;/a&gt;
  3) Policy Framework
&lt;/h1&gt;

&lt;p&gt;One thing that’s not in scope for most IaC solutions is the way to ensure that your infrastructure is compliant with industry best practices and your company policies.&lt;/p&gt;

&lt;p&gt;Spacelift puts &lt;strong&gt;policy-as-code&lt;/strong&gt; in the center of its value proposition and builds a consistent, &lt;a href="https://docs.spacelift.io/concepts/policy"&gt;robust policy framework&lt;/a&gt; on top of &lt;a href="https://www.openpolicyagent.org/"&gt;Open Policy Agent&lt;/a&gt;. Apart from providing a comprehensive automated change review and ensuring compliance of your &lt;a href="https://docs.spacelift.io/concepts/policy/terraform-plan-policy"&gt;Terraform changes&lt;/a&gt;, Spacelift uses the same approach to allow you to declare rules around the &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;account&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;project access&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;handling push notifications&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/policy/run-initialization-policy"&gt;starting runs&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/task-run-policy"&gt;triggering tasks&lt;/a&gt;, and creating &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;relationships between projects&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-complex-workflows"&gt;
  &lt;/a&gt;
  4) Complex Workflows
&lt;/h1&gt;

&lt;p&gt;Handling interdependencies between projects has always been Terraform’s Achilles’ heel. The usual approach to this problem is adding another layer of abstraction in the form of a Terraform wrapper like &lt;a href="https://terragrunt.gruntwork.io/"&gt;Terragrunt&lt;/a&gt;. But it’s only a partial solution as it breaks the problem into smaller chunks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;Spacelift’s trigger policies&lt;/a&gt; on the other hand provide a smart, &lt;strong&gt;declarative automation layer&lt;/strong&gt; on top of vanilla Terraform. They allow you to plug into state changes of individual projects and declare dependencies that should be resolved, following the changes that have just been applied. Read more &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;here&lt;/a&gt; to discover other exciting possibilities.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-private-module-registry"&gt;
  &lt;/a&gt;
  5) Private Module Registry
&lt;/h1&gt;

&lt;p&gt;Another problem to solve externally when using some of the generic tools is authoring and maintaining reusable &lt;a href="https://spacelift.io/blog/what-are-terraform-modules-and-how-do-they-work"&gt;Terraform modules&lt;/a&gt; for your organization. Terraform is flexible in allowing modules to come from &lt;a href="https://www.terraform.io/docs/language/modules/sources.html"&gt;various sources&lt;/a&gt;, but ensuring confidential access, as well as testing and versioning, are left to you, the user.&lt;/p&gt;

&lt;p&gt;Until now, the golden standard in that regard has been the &lt;a href="https://www.terraform.io/docs/cloud/registry/index.html"&gt;private module registry from HashiCorp&lt;/a&gt;. But Spacelift offers much more. Far from being just a glorified package manager, Spacelift adds a &lt;a href="https://docs.spacelift.io/vendors/terraform/module-registry"&gt;full CI solution for Terraform modules&lt;/a&gt;, out of the box and free of charge. You can thus ensure that your private modules are healthy before you distribute them to the rest of your organization.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-effortless-setup-and-customization"&gt;
  &lt;/a&gt;
  6) Effortless Setup and Customization
&lt;/h1&gt;

&lt;p&gt;If you manage a single or a handful of rarely changing projects, it’s likely that you just set your IaC up once and forget about it. But in a more dynamic environment, where microservices come and go, new environments proliferate and new product teams require their own Terraform workspaces. The need to configure it each and every time become a major nuisance, putting a lot of pressure on your DevOps team.&lt;/p&gt;

&lt;p&gt;Enter Spacelift. In Spacelift, much of the &lt;strong&gt;configuration can be handled by the project owners&lt;/strong&gt; themselves—you can add Terraform and/or &lt;a href="https://docs.spacelift.io/concepts/configuration/environment"&gt;environment variables&lt;/a&gt; and mount files (even inject Terraform code!) programmatically or through the GUI without the need for administrative privileges or changing the central server configuration. For administrators, adding new projects requires minimal hassle since there’s no need to set up webhooks or change any YAML. And it can all be done programmatically using Terraform.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-programmatic-configuration"&gt;
  &lt;/a&gt;
  7) Programmatic Configuration
&lt;/h1&gt;

&lt;p&gt;What comes as a pleasant surprise to users of generic CI tools, Spacelift entities such as stacks, contexts, modules or policies can be managed in a declarative way using your favorite infra-as-code tool (this rule applies also to their configuration). Yes, that’s right—&lt;a href="https://docs.spacelift.io/vendors/terraform/terraform-provider"&gt;Spacelift offers a Terraform provider&lt;/a&gt; that allows you to &lt;strong&gt;programmatically manage the lifecycle of its own resources&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Administrative stacks get credential-less access to the subset of our &lt;a href="https://docs.spacelift.io/integrations/api"&gt;GraphQL API&lt;/a&gt; that does not involve managing the actual infrastructure. For more sophisticated use cases, Spacelift allows you to generate API keys that are subject to the same access controls as normal users are, allowing you to create single-purpose tokens for restricted use by your internal scripts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-drift-detection"&gt;
  &lt;/a&gt;
  8) Drift Detection
&lt;/h1&gt;

&lt;p&gt;Generic IaC platforms do not provide any mechanisms to detect if your infrastructure is undergoing drift. Drift is a condition that represents the difference between the desired and the actual state of the infrastructure managed by your tool of choice – &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, &lt;a href="https://www.pulumi.com/"&gt;Pulumi&lt;/a&gt;, &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt; or another. Drift can be caused by either or a combination of changes directly introduced by external actors – either humans or machines (scripts) or via the dependency of your resources on external data sources. In any case, drift is not good.&lt;/p&gt;

&lt;p&gt;Spacelift has got you covered here. You can configure periodic &lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection"&gt;drift detection&lt;/a&gt; to &lt;strong&gt;notify you whenever drift happens&lt;/strong&gt;, and take immediate action. You can even go a step further with optional automatic &lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection#to-reconcile-or-not-to-reconcile"&gt;reconciliation&lt;/a&gt;, ensuring your infrastructure always resembles your Terraform configuration.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-resource-visualization"&gt;
  &lt;/a&gt;
  9) Resource Visualization
&lt;/h1&gt;

&lt;p&gt;General-purpose CI/CD platforms provide little to no insight into resource utilization from either a real-time or historical perspective. Which resources are over-or underutilized? &lt;/p&gt;

&lt;p&gt;Developers need to be able to intimately understand the material they’re working with. With regards to infra-as-code, the most important part of this story is understanding the managed resources in-depth. Both from the current perspective and through being able to put each resource in its historical context.&lt;/p&gt;

&lt;p&gt;The resources view in Spacelift gives you &lt;strong&gt;greater visibility into each and every resource&lt;/strong&gt;. With this deep insight into resources, DevOps are able to gain an understanding of the lifecycle of each resource managed by Spacelift and document it, regardless of the technology used — &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, &lt;a href="https://github.com/gruntwork-io/terragrunt"&gt;Terragrunt&lt;/a&gt;, &lt;a href="//pulumi.com"&gt;Pulumi&lt;/a&gt;, or &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creature-comforts"&gt;
  &lt;/a&gt;
  Creature Comforts
&lt;/h1&gt;

&lt;p&gt;Last but not least, Spacelift puts an emphasis on great user experience, offering a myriad of creature comforts. &lt;a href="https://docs.spacelift.io/concepts/configuration/context"&gt;Contexts&lt;/a&gt; for example allow you to attach entire collections of configuration to individual stacks and modules. &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;Tasks&lt;/a&gt; provide a powerful audited way of running one-off administrative commands on an initialized Terraform environment – subject to &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;their own policy constraints&lt;/a&gt;. &lt;a href="https://docs.spacelift.io/concepts/stack#stack-locking"&gt;Stack locking&lt;/a&gt; allows a single individual to take exclusive control over a stack to ensure that nobody is able to modify its state while crucial changes are being made. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-spacelift"&gt;
  &lt;/a&gt;
  Why Spacelift
&lt;/h1&gt;

&lt;p&gt;Spacelift is an innovative and sophisticated SaaS product for Infrastructure as Code which helps IaC DevOps develop and deploy new infrastructures or changes quickly and with confidence.&lt;/p&gt;

&lt;p&gt;Spacelift offers a unique set of IaC management capabilities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a more intuitive, &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;versatile&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/run#run-state-machine"&gt;robust&lt;/a&gt; workflow&lt;/li&gt;
&lt;li&gt;extremely granular access controls on &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;account&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;project level&lt;/a&gt; that work well with &lt;a href="https://docs.spacelift.io/integrations/single-sign-on"&gt;an identity provider of your choice&lt;/a&gt; (SSO);&lt;/li&gt;
&lt;li&gt;an &lt;a href="https://docs.spacelift.io/concepts/policy/terraform-plan-policy"&gt;automated code review&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/task-run-policy"&gt;threat detection&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;the ability to &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;declare complex workflows&lt;/a&gt; between projects across multiple repositories&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://docs.spacelift.io/concepts/modules"&gt;built-in private module registry&lt;/a&gt; with a full CI system for modules&lt;/li&gt;
&lt;li&gt;effortless setup and customization with &lt;a href="https://docs.spacelift.io/concepts/configuration/environment"&gt;per-project environment management&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/integrations/docker"&gt;Docker integration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.spacelift.io/integrations/terraform-provider"&gt;programmatic configuration&lt;/a&gt; using Terraform;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection"&gt;drift detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spacelift.io/concepts/resources"&gt;resource visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;… and a myriad of creature comforts like &lt;a href="https://docs.spacelift.io/concepts/configuration/context"&gt;contexts&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;tasks&lt;/a&gt; or &lt;a href="https://docs.spacelift.io/concepts/stack#stack-locking"&gt;stack locking&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#key-points"&gt;
  &lt;/a&gt;
  Key Points
&lt;/h1&gt;

&lt;p&gt;There are many ways of working with Terraform. Each way is different in terms of complexity and offers a different set of features. It is important to keep in mind that choosing one way or another should be based on business and technical requirements. Most often, there is no point in implementing an in-house solution as the cost and effort of building and maintaining it may exceed its potential benefits. It is much easier and more efficient to leverage platforms such as &lt;a href="https://spacelift.io/product"&gt;Spacelift&lt;/a&gt; to provide these features for you instead. You can &lt;a href="https://spacelift.io/free-trial"&gt;try Spacelift for free&lt;/a&gt; or &lt;a href="https://spacelift.io/schedule-demo"&gt;book a demo&lt;/a&gt; with one of our engineers. &lt;/p&gt;

</description>
      <category>devops</category>
      <category>iac</category>
      <category>cicd</category>
      <category>terraform</category>
    </item>
    <item>
      <title>Day 12 of #100daysofcode: Learning and Meetings</title>
      <author>Ryan Whelchel</author>
      <pubDate>Wed, 17 Nov 2021 22:26:04 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-12-of-100daysofcode-learning-and-meetings-2cm0</link>
      <guid>https://dev.to/rydwhelchel/day-12-of-100daysofcode-learning-and-meetings-2cm0</guid>
      <description>&lt;p&gt;Between meetings today, I learned about Django and continued my journey to a Javascript certificate from FreeCodeCamp.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I started today with working on FreeCodeCamp tutorials for about an hour. I then had to prepare for a couple meetings I had today. Between meetings, I learned about Django and some of key differences between Django and Flask.&lt;/p&gt;

&lt;p&gt;At the surface level, it seems like Django is ideal for quickly getting a small project off the ground, while Flask is better and more flexible in larger projects.&lt;/p&gt;

&lt;p&gt;I will discuss Django more after I learn more about it. I am still considering building my next app in Django instead of Flask, if only to learn it.&lt;/p&gt;

&lt;p&gt;I also spent some time on the artist app today. I made a mistake with some git commands and, long story short, I ditched a week's worth of changes. &lt;/p&gt;

&lt;p&gt;A little disheartening, but I was considering trying a different tact for constructing the main page, so I'm not too upset about it. &lt;/p&gt;

&lt;p&gt;A clean slate, a new approach!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I am going to spend some time tomorrow planning the final approach for the artist app. I have already designed most of the elements using React bootstrap, it's really only the structure of the page that I will be focusing on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;Complicated state management between components. I still haven't quite nailed it down.&lt;/p&gt;

&lt;p&gt;That's all for today! Thanks for following, if you have any suggestions, please leave them in the comments below!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Welcome Thread - v151</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 17 Nov 2021 22:24:15 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v151-5dm</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v151-5dm</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/Y8ocCgwtdj29O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Y8ocCgwtdj29O/giphy.gif" alt="Stefan from SNL waving hello" width="444" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Executing Shell Commands In Laravel</title>
      <author>Bertug Korucu</author>
      <pubDate>Wed, 17 Nov 2021 21:45:20 +0000</pubDate>
      <link>https://dev.to/kodeas/executing-shell-commands-in-laravel-1098</link>
      <guid>https://dev.to/kodeas/executing-shell-commands-in-laravel-1098</guid>
      <description>&lt;p&gt;Both &lt;code&gt;shell_exec()&lt;/code&gt; and &lt;code&gt;exec()&lt;/code&gt; do the job - until they don't. &lt;/p&gt;

&lt;p&gt;If your command crash for some reason, you won't know -  &lt;strong&gt;&lt;code&gt;shell_exec()&lt;/code&gt; and &lt;code&gt;exec()&lt;/code&gt; don't throw Exceptions.&lt;/strong&gt; They just fail silently. 😱&lt;/p&gt;

&lt;p&gt;So, here is my solution to encounter this problem:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Symfony\Component\Process\Process;

class ShellCommand
{
    public static function execute($cmd): string
    {
        $process = Process::fromShellCommandline($cmd);

        $processOutput = '';

        $captureOutput = function ($type, $line) use (&amp;amp;$processOutput) {
            $processOutput .= $line;
        };

        $process-&amp;gt;setTimeout(null)
            -&amp;gt;run($captureOutput);

        if ($process-&amp;gt;getExitCode()) {
            $exception = new ShellCommandFailedException($cmd . " - " . $processOutput);
            report($exception);

            throw $exception;
        }

        return $processOutput;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;It utilises Symfony's Process (which comes out of the box to Laravel).&lt;/em&gt; ✨&lt;/p&gt;

&lt;p&gt;With this way, I can throw a custom exception, log the command and the output to investigate, report it to my logs to investigate, etc.&lt;/p&gt;

&lt;p&gt;No more failing silently 😇&lt;/p&gt;

&lt;p&gt;Hope you like this little piece! If you do, please give it a ❤️&lt;/p&gt;

</description>
      <category>laravel</category>
      <category>php</category>
    </item>
    <item>
      <title>Hawk project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Wed, 17 Nov 2021 21:35:55 +0000</pubDate>
      <link>https://dev.to/medpaf/hawk-project-1c59</link>
      <guid>https://dev.to/medpaf/hawk-project-1c59</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as ifconfig, ping, traceroute, port scans (including SYN, TCP, UDP, ACK, comprehensive scan, host discovery (scan for up devices on a local network), MAC address detection (get MAC address of a host IP on a local network), banner grabbing, DNS checks (with geolocation information), WHOIS, subdomain enumeration, vulnerability reconnaissance, packet sniffing, MAC spoofing, IP spoofing, SYN flooding, deauth attack and brute-force attack (beta).&lt;br&gt;
Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos&lt;br&gt;
Link to the repository: &lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Rock, Paper, Scissors, Lizard, Spock</title>
      <author>Scott Gordon</author>
      <pubDate>Wed, 17 Nov 2021 21:15:45 +0000</pubDate>
      <link>https://dev.to/sagordondev/rock-paper-scissors-lizard-spock-3egc</link>
      <guid>https://dev.to/sagordondev/rock-paper-scissors-lizard-spock-3egc</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/sagordon-dev/rock-paper-lizard-spock"&gt;GitHub Repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4D4ZFN-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biuk3vn2s95epzuinelh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4D4ZFN-L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/biuk3vn2s95epzuinelh.png" alt="Console Output" width="422" height="180"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight cpp"&gt;&lt;code&gt;&lt;span class="cm"&gt;/*
    This program emulates the version of rock, paper, scissors popularized 
    by the tv series "Big Bang Theory". This variety utilizes the typical 
    rock, paper and scissors paradigm while adding lizard and spock to the
    equation. (scissors &amp;gt; paper &amp;gt; rock &amp;gt; lizard &amp;gt; spock &amp;gt; scissors &amp;gt; lizard &amp;gt;
    paper &amp;gt; spock &amp;gt; rock &amp;gt; scissors)
*/&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"=================================&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Rock, Paper, Scissors Lizard Spock!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"=================================&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"1)👊 2)✋ 3)✌️ 4)🦎 5)🖖 0)🛑&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Shoot!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;computer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"It's a tie, try again please.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 👊 Computer: ✋&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Computer wins, Paper covers Rock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 👊 Computer: ✌️&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Rock crushes Scissors.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 👊 Computer: 🦎&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Rock crushes Lizard.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 👊 Computer: ️🖖&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Computer wins, Spock vaporizes Rock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✋ Computer: ️👊&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Paper covers Rock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✋ Computer: ️✌️&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Computer wins, Scissors cuts Paper.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✋ Computer: ️🦎&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You lose, Lizard eats Paper.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✋ Computer: ️🖖&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Paper disproves Spock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✌️ Computer: ️👊&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Computer wins, Rock crushes Scissors.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✌️ Computer: ️✋&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Scissors cuts Paper.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✌️ Computer: ️🦎&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Scissors decapitate Lizard.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: ✌️ Computer: ️🖖&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You lose, Spock smashes Scissors.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🦎 Computer: ️👊&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You lose, Rock crushes Lizard.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🦎 Computer: ️✋&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Lizard eats paper.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🦎 Computer: ️✌️&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You lose, Scissors decapitate Lizard.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🦎 Computer: ️🖖&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Lizard poisons Spock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🖖 Computer: ️👊&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Spock vaporizes Rock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🖖 Computer: ️✋&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Computer wins, Paper disproves Spock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🖖 Computer: ️✌️&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You win, Spock smashes scissors.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;computer&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You: 🖖 Computer: ️🦎&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"You lose, Lizard poisons Spock.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"Please enter a valid number.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://www.ziprecruiter.com/verify-skill/4503e8d7/v1:U2FsdGVkX18BWoGFEUF_Y5dn-kbDplm2nrpQxtaiNtUE4GtCW3GE6ZzYqIIBNygnzk5kyr83Zi4/#QyBQcm9ncmFtbWluZw=="&gt;Verify my C++&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@marcus_wallis?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Marcus Wallis&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/rock-paper-scissors?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>computerscience</category>
      <category>beginners</category>
      <category>gamedev</category>
    </item>
  </channel>
</rss>
