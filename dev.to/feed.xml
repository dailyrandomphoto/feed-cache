<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Updates on dev-to clone in Angular - August 27</title>
      <author>Ajit Singh</author>
      <pubDate>Fri, 27 Aug 2021 02:47:38 +0000</pubDate>
      <link>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-august-27-p98</link>
      <guid>https://dev.to/this-is-angular/updates-on-dev-to-clone-in-angular-august-27-p98</guid>
      <description>&lt;h5&gt;
  &lt;a href="#help-me-improve-these-updates-by-giving-suggestions"&gt;
  &lt;/a&gt;
  Help me improve these updates by giving suggestions.
&lt;/h5&gt;

&lt;p&gt;Github Repo - &lt;a href="https://github.com/ajitsinghkaler/devto-clone"&gt;https://github.com/ajitsinghkaler/devto-clone&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Deployed on Firebase - &lt;a href="https://dev-toclone.firebaseapp.com/"&gt;https://dev-toclone.firebaseapp.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Last week we finished details page article section and basic comments section.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aEW6jyTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn6lr72hv93pbss99ieq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aEW6jyTE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dn6lr72hv93pbss99ieq.png" alt="Articles details page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This week I added the complete comments section. It was one the most complex tasks while building the dev.to ui. The comments structure is a bit complex to render. Comments contain a key called children which can again contain comments so it was like a tree like structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;├── comment
│   ├── comment ─── comment
│   │   └── comment
│   ├── comment
│   ├── comment ─── comment ─── comment
│   │   └── comment ─── comment ─── comment
│   └── comment
├── comments
│   ├── comment ─── comment
│   │   └── comment 
│   └── comment 
├──── comment
│   ├── comment
│   └── comment
└──── comments
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How to render an infinite tree. Then I called the comment component from the comment component. To create a recursion like scenario which will render the entire component tree. I've written details about it in this article.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/patel_vimal"&gt;Vimal Patel&lt;/a&gt; has also added &lt;br&gt;
commit lint to the repo so that reading the commit messages is easy. I'm thankful for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-live-stream"&gt;
  &lt;/a&gt;
  First Live stream
&lt;/h2&gt;

&lt;p&gt;I also did my first live stream with &lt;a href="https://twitter.com/SantoshYadavDev"&gt;Santosh&lt;/a&gt; on moving over our app from angular-cli to NxDevTools we did the basics in the stream and I went over a lot of questions that I have to why Nx if you want to see how to move your project over Nx please follow us on &lt;a href="https://www.youtube.com/channel/UCwLr8EHk7A-A89tRqoHSdZw"&gt;This is tech Talks&lt;/a&gt;&lt;br&gt;
 we will be migrating the whole dev.to clone to Nx over the live stream. This was my first talk I was a bit nervous but Santosh made me at ease. Thanks Santosh.&lt;/p&gt;

&lt;p&gt;So this is where we are right now.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iN597FpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10ylwi1auxrz2qdaiwzd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iN597FpX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/10ylwi1auxrz2qdaiwzd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next week I'll start working on the podcast page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue"&gt;
  &lt;/a&gt;
  Issue
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/30"&gt;Create a 404 page&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/32"&gt;Comments section css is a bit off&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/issues/33"&gt;Add number of child comments in comments section&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#commits"&gt;
  &lt;/a&gt;
  Commits
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/0624aa97da384de25cb3f20902e511b2899e60fa"&gt;Commit lint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/9d05fd85b369aea6c92f68ad9407f78152aa0f08"&gt;Basic comments&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ajitsinghkaler/devto-clone/commit/d2a317f15409e5ef13b7fb995cdadb336420ad82"&gt;Comments section completed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>angular</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>typescript</category>
    </item>
    <item>
      <title>Object Oriented PHP (Lesson 3: Inheritance)</title>
      <author>Clean Code Studio</author>
      <pubDate>Fri, 27 Aug 2021 02:41:11 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/object-oriented-php-lesson-3-inheritance-3670</link>
      <guid>https://dev.to/cleancodestudio/object-oriented-php-lesson-3-inheritance-3670</guid>
      <description>&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zFu-SM5v--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/twitter/follow/cleancodestudio.svg%3Fstyle%3Dsocial" alt="Twitter Follow"&gt;&lt;/a&gt; &lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;In object-oriented programming, inheritance is the mechanism of basing an object or class upon another object or class, retaining similar implementation. Also defined as deriving new classes from existing ones such as super class or base class and then forming them into a hierarchy of classes.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#inheritance-extending-a-classes-behavior-and-properties"&gt;
  &lt;/a&gt;
  &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;Inheritance&lt;/a&gt;: Extending a &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/1"&gt;Classes&lt;/a&gt; behavior and properties
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What is &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;inheritance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;How do we implement &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;inheritance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;What is &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;polymorphism&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;How do we implement &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;Polymorphism in PHP&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;What are &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;reasons we would use Inheritance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;How would we implement these, more unique, but really cool &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;implementations of inheritance&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;FormRequest (Request Validation) &lt;a href="https://cleancode.studio/series/object-oriented-php/episodes/3"&gt;extends Request&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/15jGTgxC8wA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;


&lt;center&gt;


&lt;h3&gt;
  &lt;a href="#the-end"&gt;
  &lt;/a&gt;
  The End
&lt;/h3&gt;




&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #343c35 !important;
      color: #f5f5f5 !important;
      border-color: #343c35 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YeAAvjHT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--GeGRizPU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/4f170830-7e2c-4f3e-81fe-b666a90b7e3f.gif" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/design-patterns"&gt;Java Script Design Patterns&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/series/object-oriented-php"&gt;Object Oriented Programming&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/algorithms"&gt;JavaScript Algorithm Examples&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
☕️ Code Tips&lt;br&gt;
☕️ Career Advice&lt;br&gt;
☕️ Developer Memes&lt;br&gt;
&lt;small&gt;Shiny button, Fancy 𝗡𝗲𝘄𝘀𝗹𝗲𝘁𝘁𝗲𝗿 👇, Juicy Dev Tips...wanna join?&lt;/small&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancodestudio.paperform.co/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dgj1OcQv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f7hwc3k4pzedr59fnr9r.png" alt="Yes, I want in! Button to go sign up for clean code studio newsletter"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;(Discover [50+ pages] of my personal FAANG interview notes!)&lt;/small&gt;&lt;/p&gt;




&lt;p&gt;&lt;a href="https://twitter.com/cleancodestudio"&gt;Follow @cleancodestudio on Twitter&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/c/cleancodestudio"&gt;Follow @cleancodestudio on YouTube&lt;/a&gt;&lt;br&gt;
&lt;a href="https://tiktok.com/@cleancodestudio"&gt;Follow @cleancodestudio on TikTok&lt;/a&gt;&lt;br&gt;
&lt;a href="https://facebook.com/cleancodestudio"&gt;Follow @cleancodestudio on Facebook&lt;/a&gt;&lt;br&gt;
&lt;a href="https://instagram.com/cleancodestudio"&gt;Follow @cleancodestudio on Instagram&lt;/a&gt;&lt;br&gt;
&lt;a href="https://linkedin.com/company/cleancodestudio"&gt;Follow @cleancodestudio on LinkedIn&lt;/a&gt;&lt;br&gt;
&lt;a href="https://reddit.com/r/cleancodestudio"&gt;Follow @cleancodestudio on Reddit&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/cleancodestudio"&gt;Follow @cleancodestudio on Dev.to&lt;/a&gt;&lt;br&gt;
&lt;a href="https://stackoverflow.com/users/8541350/clean-code-studio"&gt;Follow @cleancodestudio on Stack Overflow&lt;/a&gt;&lt;br&gt;
&lt;a href="https://npmjs.com/~zhorton999"&gt;Follow @cleancodestudio packages on npm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://packagist.org/packages/clean-code-studio"&gt;Follow @cleancodestudio packages on packagist&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/zhorton34"&gt;Star @cleancodestudio on Github&lt;/a&gt;&lt;/p&gt;




&lt;/center&gt;

</description>
      <category>oop</category>
      <category>php</category>
      <category>laravel</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Technical Interview #3: Is String A Palindrome</title>
      <author>Let's Code</author>
      <pubDate>Fri, 27 Aug 2021 02:33:25 +0000</pubDate>
      <link>https://dev.to/frontendengineer/technical-interview-3-is-string-a-palindrome-2ida</link>
      <guid>https://dev.to/frontendengineer/technical-interview-3-is-string-a-palindrome-2ida</guid>
      <description>&lt;h4&gt;
  &lt;a href="#interview-question-3"&gt;
  &lt;/a&gt;
  Interview Question #3:
&lt;/h4&gt;

&lt;p&gt;Write a function that returns if string a palindrome.🤔❓&lt;br&gt;
Palindrome happens when a string forms the same word when it is reversed.&lt;/p&gt;

&lt;p&gt;Example: &lt;br&gt;
abba =&amp;gt; true&lt;br&gt;
abcba =&amp;gt; true&lt;br&gt;
123xyz =&amp;gt; false&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you need practice, try to solve this on your own. I have included 2 potential solutions below. &lt;/p&gt;

&lt;p&gt;Note: There are many other potential solutions to this problem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#solution-1-array-reverse-and-join-and-methods"&gt;
  &lt;/a&gt;
  Solution #1: Array reverse and join and methods
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#solution-2-array-every"&gt;
  &lt;/a&gt;
  Solution #2: array every
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;isPalindrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;every&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In case you like a video instead of bunch of code 👍😊&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/vTIYUv13XLg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Happy coding and good luck if you are interviewing!&lt;/p&gt;

</description>
      <category>jobinterview</category>
      <category>frontendinterview</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Build a Portfolio Using Next.js, Tailwind, and Vercel with Dark Mode Support</title>
      <author>Nilanth</author>
      <pubDate>Fri, 27 Aug 2021 01:57:47 +0000</pubDate>
      <link>https://dev.to/nilanth/build-a-portfolio-using-next-js-tailwind-and-vercel-4dd8</link>
      <guid>https://dev.to/nilanth/build-a-portfolio-using-next-js-tailwind-and-vercel-4dd8</guid>
      <description>&lt;p&gt;Steps to build a portfolio website using &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; and &lt;a href="https://tailwindcss.com/"&gt;Tailwind&lt;/a&gt; with Dark Mode Support. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;You can build a portfolio like &lt;a href="https://nilanth.vercel.app"&gt;mine&lt;/a&gt; after reading this article.&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A portfolio is a place where you can showcase all your skills to the world. As a developer, you really need a portfolio to showcase your projects, blogs, and much more.&lt;/p&gt;

&lt;p&gt;But why do we need to build a portfolio with Next.js? We all know next.js is react framework with out-of-box performance. So you are not required to worry about your portfolio performance. Everything is taken care of by next.js and Vercel. Let's get into action &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-and-tailwind-configuration"&gt;
  &lt;/a&gt;
  Next.js and Tailwind Configuration
&lt;/h2&gt;

&lt;p&gt;We can configure tailwind with next.js with a single command. As below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-next-app -e with-tailwindcss your-portfolio-name
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The above command automatically configures your Tailwind setup based on the official Next.js example.&lt;/p&gt;

&lt;p&gt;Once the installation is completed navigate to your project folder using &lt;code&gt;cd your-portfolio-name&lt;/code&gt; and start the dev server using &lt;code&gt;yarn dev&lt;/code&gt; command. You can see the below page if you hit &lt;code&gt;http://localhost:3000&lt;/code&gt; in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hZeUSGiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw7fblqfegh7zbck9twq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hZeUSGiL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sw7fblqfegh7zbck9twq.png" alt="welcome"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-navigation-section"&gt;
  &lt;/a&gt;
  Creating Navigation Section
&lt;/h2&gt;

&lt;p&gt;Create a &lt;code&gt;components&lt;/code&gt; folder in the root directory to add your portfolio components. Create a file called &lt;code&gt;Navigation.js&lt;/code&gt; and add the below code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;The navigation component is the header section of your portfolio. In the above code, you can see &lt;code&gt;dark:&lt;/code&gt; class to support dark mode. Add the &lt;code&gt;Navigation&lt;/code&gt; component to &lt;code&gt;_app.js&lt;/code&gt; file as below. MyApp component is used to initialize pages.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#creating-footer%C2%A0section"&gt;
  &lt;/a&gt;
  Creating Footer Section
&lt;/h2&gt;

&lt;p&gt;To add a Footer with social links, Create a Footer.js file in the components folder and add the below code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Add the &lt;code&gt;Footer.js&lt;/code&gt; component to &lt;code&gt;_app.js&lt;/code&gt; file as below&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#about-component"&gt;
  &lt;/a&gt;
  About Component
&lt;/h2&gt;

&lt;p&gt;Create &lt;code&gt;About.js&lt;/code&gt; file inside components folder and add the below code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;I just added some dummy texts above for the demo. Include your profile image from the public folder as above. Placeholder &lt;code&gt;blur&lt;/code&gt; prop in image component is to add loading effects. Import &lt;code&gt;About&lt;/code&gt; component to &lt;code&gt;index.js&lt;/code&gt; file as below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;I have removed the older template code and added the above code. Now your portfolio looks like below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNMA-LnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xvfanljjllcrxfpswm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNMA-LnO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2xvfanljjllcrxfpswm1.png" alt="about-screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dark-mode%C2%A0support"&gt;
  &lt;/a&gt;
  Dark Mode Support
&lt;/h2&gt;

&lt;p&gt;Now let's add dark mode to our portfolio. Adding dark mode is very simple. Create &lt;code&gt;ThemeSwitch&lt;/code&gt; component to add a toggle switch to toggle between Dark Mode and Light Mode. &lt;/p&gt;

&lt;p&gt;To support Dark Mode in Next.js we need to add &lt;code&gt;next-themes&lt;/code&gt; package to our dependency. Now import &lt;code&gt;useTheme&lt;/code&gt; from next-theme to ThemeSwitch Component as below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Add &lt;code&gt;ThemeSwitch&lt;/code&gt; Component to &lt;code&gt;Navigation&lt;/code&gt; component and include &lt;code&gt;next-themes&lt;/code&gt; ThemeProvider in &lt;code&gt;_app.js&lt;/code&gt; as below:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;code&gt;attribute=class&lt;/code&gt; is to enable dark and light mode manually. I have disabled system preference by &lt;code&gt;enableSystem=false&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Change &lt;code&gt;darkMode&lt;/code&gt; option to &lt;code&gt;class&lt;/code&gt; in &lt;code&gt;tailwind.config.js&lt;/code&gt; file to toggle dark mode manually instead of relying on the operating system preference.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After the above changes, our portfolio looks like below:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#light-mode"&gt;
  &lt;/a&gt;
  Light Mode
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_hqKtrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvcrzfaq5pdkpj5qywbq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_hqKtrc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jvcrzfaq5pdkpj5qywbq.png" alt="Light Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dark-mode"&gt;
  &lt;/a&gt;
  Dark Mode
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_p1DPII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npd5s823fd85maxpokai.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_p1DPII--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/npd5s823fd85maxpokai.png" alt="Dark Mode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#deploying-in%C2%A0vercel"&gt;
  &lt;/a&gt;
  Deploying in Vercel
&lt;/h2&gt;

&lt;p&gt;You can deploy your portfolio in Vercel within 2 steps as below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="https://vercel.com/signup"&gt;Vercel Account&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Connect your repository and click deploy.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;You can add multiple pages like projects, blogs by creating new files inside the pages folder. I hope you have found this useful.&lt;/p&gt;

&lt;p&gt;Thank you for reading.&lt;/p&gt;

&lt;p&gt;Get more updates on &lt;a href="https://twitter.com/Nilanth"&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#more-blogs"&gt;
  &lt;/a&gt;
  More Blogs
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-react-packages-with-1k-ui-components-2bf3"&gt;10 React Packages with 1K UI Components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/no-more-import-in-react-2mbo"&gt;No More ../../../ Import in React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/redux-toolkit-the-standard-way-to-write-redux-2g32"&gt;Redux Toolkit - The Standard Way to Write Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/5-packages-to-optimize-and-speed-up-your-react-app-during-development-4h5f"&gt;5 Packages to Optimize and Speed Up Your React App During Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-use-axios-in-an-optimized-and-scalable-way-with-react-518n"&gt;How To Use Axios in an Optimized and Scalable Way With React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/15-custom-hooks-to-make-your-react-component-lightweight-17cd"&gt;15 Custom Hooks to Make your React Component Lightweight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/10-ways-to-host-your-react-app-for-free-27ga"&gt;10 Ways to Host Your React App For Free&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/how-to-secure-jwt-in-a-single-page-application-cko"&gt;How to Secure JWT in a Single-Page Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dev.to/nilanth/redux-auth-starter-a-zero-config-cra-template-9c0"&gt;Redux Auth Starter: A Zero Config CRA Template&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>react</category>
      <category>nextjs</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>What CSS Versions are You Talking About?</title>
      <author>₳GEEK</author>
      <pubDate>Fri, 27 Aug 2021 01:33:22 +0000</pubDate>
      <link>https://dev.to/ageekdev/what-css-versions-are-you-talking-about-4394</link>
      <guid>https://dev.to/ageekdev/what-css-versions-are-you-talking-about-4394</guid>
      <description>&lt;p&gt;There is no official CSS documents for CSS authors &lt;a href="https://ageek.dev/css-evolution"&gt;over the last 3 decades&lt;/a&gt;, the closest things you can find are &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS"&gt;MDN CSS tutorials and references&lt;/a&gt;. There are only &lt;a href="https://www.w3.org/Style/CSS/"&gt;official specifications&lt;/a&gt; for CSS implementers standardized by &lt;a href="http://www.w3.org/"&gt;W3C&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Being able to understand the CSS specifications requires understanding the context, vocabulary, and fundamental concepts that the specifications are built out of. If you want to really understand the specs, good luck with that.&lt;/p&gt;

&lt;p&gt;When your site has a CSS problem which delays upcoming releases, you might have a hard time explaining to your boss about CSS versions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Boss&lt;/strong&gt;: What CSS versions are you talking about?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You&lt;/strong&gt;: CSS3, I guess&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Boss&lt;/strong&gt;: You guess? I heard there is CSS4?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You&lt;/strong&gt;: There is no single, integrated CSS4 specification&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Boss&lt;/strong&gt;: How about modules and snapshots thing?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You&lt;/strong&gt;: It's complicated&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Boss&lt;/strong&gt;: Hit me!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;You&lt;/strong&gt;: %^&amp;amp;*()%$##...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CSS features are controlled and developed by &lt;a href="https://www.w3.org/Style/CSS/members"&gt;CSS Working Group&lt;/a&gt;, belongs to the broader organization &lt;a href="http://www.w3.org/"&gt;W3C&lt;/a&gt;, over the years &lt;a href="https://www.w3.org/Style/CSS/current-work"&gt;across multiple specifications&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A specification is not a user manual or user reference guide. The purpose of a spec is to tell developers who will implement the technology what features it must have, and how they are to be implemented.&lt;/p&gt;

&lt;p&gt;CSS does not have versions in the traditional sense; instead it has levels. Each level of CSS builds on the previous, refining definitions and adding features.&lt;/p&gt;

&lt;p&gt;The feature set of each higher level is a superset of any lower level, and the behavior allowed for a given feature in a higher level is a subset of that allowed in the lower levels. A user agent conforming to a higher level of CSS is thus also conformant to all lower levels.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;CSS Level 1 (CSS1)&lt;/strong&gt;: published in 1996 as a &lt;a href="https://www.w3.org/TR/CSS1/"&gt;single document&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS Level 2 (CSS2)&lt;/strong&gt;: published in 1998 as a &lt;a href="https://www.w3.org/TR/1998/REC-CSS2-19980512"&gt;single document&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS Level 2 Revision 1 (CSS2.1)&lt;/strong&gt;: published in 2011 as a &lt;a href="https://www.w3.org/TR/CSS21/"&gt;single document&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS Level 3 (CSS3)&lt;/strong&gt;: a term is used only to differentiate it from the previous monolithic versions. CSS Working Group chose to adopt a modular approach, where each module defines a part of CSS, rather than to define a single monolithic specification. This breaks the specification into more manageable &lt;a href="https://www.w3.org/Style/CSS/current-work"&gt;60+ modules&lt;/a&gt; and allows more immediate, incremental improvement to CSS.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CSS Level 4 (CSS4) and beyond&lt;/strong&gt;: There is no such thing CSS4. Independent modules can reach level 4 or beyond, but CSS the language no longer has levels.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The main reason for adopting modular approach is that browser vendors implement CSS features at different speeds. To release a monolithic specification, every component part also has to be finished. It doesn’t make sense to draw a line at which all work slowed down by a single stubborn feature.&lt;/p&gt;

&lt;p&gt;When a new technology is added to CSS that is not an extension of something in an earlier CSS specification, it is published in a module that includes the indication &lt;strong&gt;Level 1&lt;/strong&gt; (&lt;a href="https://www.w3.org/TR/css-flexbox-1/"&gt;CSS Flexible Box Layout Module Level 1&lt;/a&gt;, &lt;a href="https://www.w3.org/TR/css-grid-1/"&gt;CSS Grid Layout Module Level 1&lt;/a&gt;, etc.)&lt;/p&gt;

&lt;p&gt;Since different CSS modules are at different levels of stability, the CSS Working Group has chosen to publish the &lt;a href="https://www.w3.org/TR/CSS/"&gt;CSS snapshot&lt;/a&gt; document. It includes only modules that the working group considers stable and for which there is enough implementation experience to be sure of that stability.&lt;/p&gt;

&lt;p&gt;Currently CSS versioning is a mess with countless separate modules. CSS authors should embrace feature or module based thinking by using feature queries (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports"&gt;&lt;code&gt;@supports&lt;/code&gt;&lt;/a&gt;) or automatic tools (&lt;a href="https://github.com/browserslist/browserslist"&gt;browserslist&lt;/a&gt;, &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt;, &lt;a href="https://github.com/postcss/autoprefixer"&gt;autoprefixer&lt;/a&gt;, etc.) to &lt;a href="https://ageek.dev/css-fallback-behavior"&gt;provide fallbacks&lt;/a&gt; or &lt;a href="https://ageek.dev/css-vendor-prefixes"&gt;vendor prefixes&lt;/a&gt; for legacy browsers.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Using the VueJS Composition API to Create Hooks for Supabase Database and Storage</title>
      <author>Aaron K Saunders</author>
      <pubDate>Fri, 27 Aug 2021 00:56:10 +0000</pubDate>
      <link>https://dev.to/aaronksaunders/using-the-vuejs-composition-api-to-create-hooks-for-supabase-database-and-storage-4b14</link>
      <guid>https://dev.to/aaronksaunders/using-the-vuejs-composition-api-to-create-hooks-for-supabase-database-and-storage-4b14</guid>
      <description>&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/pDOD0sjVF9E"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Sample application using &lt;a href="https://v3.vuejs.org/api/composition-api.html"&gt;Composition API&lt;/a&gt; to create "hooks" to interact with the &lt;a href="https://supabase.io/"&gt;supabase api&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;This is a work in progress, but wanted to show the approach I used which might inspire some one to go all the way... This isn't using typescript which I think would be a great next step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;The main objective here is to get isolated the functionality into specific composition functions and take advantage of the reactivity of vue to expose refs for the &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, and &lt;code&gt;loading&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;if you look at one of hooks below&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./sb-hooks&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 * 
 * @param {*} table - table to execute query against
 * @param {*} columns - columns to return
 * @param {*} auto - if true, run query at startup
 * @returns 
 */&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;([]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;loading&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// get supabase client&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="cm"&gt;/**
   * this is the function that does the actual query
   */&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;doQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;qData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;qError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qData&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;qError&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// if auto flag is set, run a startup&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;doQuery&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// reactive variables...&lt;/span&gt;
    &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// function to call to execute query&lt;/span&gt;
    &lt;span class="nx"&gt;doQuery&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;here is how you might use it in your component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;../hooks/sb-hooks-select&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;defineComponent&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;HomePage&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
      &lt;span class="nx"&gt;doQuery&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;products&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and you template would look like this, utilizing the reactive properties from the hook.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"loading"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;LOADING...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-else-if=&lt;/span&gt;&lt;span class="s"&gt;"error"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"error-panel"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{{ error }}&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;v-else-if=&lt;/span&gt;&lt;span class="s"&gt;"data"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"item in data"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"item.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;router-link&lt;/span&gt; &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"`/detail/$&lt;/span&gt;{item.id}`"&amp;gt;
      &lt;span class="nt"&gt;&amp;lt;item-component&lt;/span&gt; &lt;span class="na"&gt;:item=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/router-link&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tons more content on my Youtube Channel &lt;a href="https://www.youtube.com/channel/UCMCcqbJpyL3LAv3PJeYz2bg"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Udemy Courses &lt;a href="https://www.udemy.com/user/aaronsaunders/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;GumRoad Content &lt;a href="https://fiwic.gumroad.com/"&gt;here&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>postgres</category>
      <category>supabase</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Antenatal for ng new - The mother of all angular applications both dead and alive</title>
      <author>Valentine Awe</author>
      <pubDate>Fri, 27 Aug 2021 00:23:09 +0000</pubDate>
      <link>https://dev.to/valoni01/antenatal-for-ng-new-the-mother-of-all-angular-applications-both-dead-and-alive-5dlb</link>
      <guid>https://dev.to/valoni01/antenatal-for-ng-new-the-mother-of-all-angular-applications-both-dead-and-alive-5dlb</guid>
      <description>&lt;p&gt;Before we start, I would like to state that the concepts in this article are not restricted to the Angular framework alone, but can be applied to other frontend frameworks and libraries like Vue and React. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-antenatal"&gt;
  &lt;/a&gt;
  Why antenatal?
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iDZyFFHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gixo3cyr4mfzr0bibhbm.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDZyFFHx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gixo3cyr4mfzr0bibhbm.jpeg" alt="surprise emoji"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Antenatal in the human world relates to the medical care of women when they are expecting a baby. In our case, &lt;code&gt;ng new&lt;/code&gt; is the mother while our yet be created application is the baby. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ng-new-the-mother-of-all-angular-applications-dead-and-alive"&gt;
  &lt;/a&gt;
  ng new : The mother of all angular applications dead and alive.
&lt;/h3&gt;

&lt;p&gt;Why this phrase? this is simply because almost all angular applications started with our glorious command &lt;code&gt;ng new&lt;/code&gt;. &lt;code&gt;ng new&lt;/code&gt; has birthed thousands of applications both the ones currently in development, the ones in production, the ones they have stopped using and the ones that never made it to production.&lt;/p&gt;

&lt;p&gt;The whole idea of antenatal is to ensure that complications are avoided during the pregnancy and delivery process. This directly applies to what you need to do before birthing a new application.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The antenatal care for the &lt;code&gt;ng new&lt;/code&gt; refers to the requirement gathering, research processes, documentation and all that you need to do before you start or create your frontend application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#why-should-you-care"&gt;
  &lt;/a&gt;
  Why Should you Care?
&lt;/h3&gt;

&lt;p&gt;Below are some of the reasons why you would need to do the initial research and documentation of your frontend application before spinning up the project. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;planning the architecture of your application&lt;/li&gt;
&lt;li&gt;Decision on the numbers of resources needed&lt;/li&gt;
&lt;li&gt;Estimating and managing development time&lt;/li&gt;
&lt;li&gt;Easy maintainability and hand over&lt;/li&gt;
&lt;li&gt;Reduce back and forth with product owners and clients&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, whether you are in the consulting space or you work for a specific company, doing this antenatal across all your products makes your development process extra smooth and seamless.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consulting"&gt;
  &lt;/a&gt;
  Consulting
&lt;/h3&gt;

&lt;p&gt;If you fall under this category, there is a chance that you are going to be involved in different types of projects with unique use cases. And it is important to ask the right questions and document all the specific requirements before you start your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#companyspecific"&gt;
  &lt;/a&gt;
  Company-Specific
&lt;/h3&gt;

&lt;p&gt;If you fall under this category, You may have to do this process once in a while because there may be less frequent changes in your application development processes and policies. But it is also very important to have all these  documented so that new employees or consultants can use them as a reference.&lt;/p&gt;

&lt;p&gt;I have listed below with explanations and examples, some of the research and documentation (antenatal) you need to do before starting a new application. &lt;/p&gt;

&lt;p&gt;It is important to know that this is not a cast in stone. while all the below points are important, you can go ahead and pick the ones that suit your need or you can also add more. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Application overview&lt;/li&gt;
&lt;li&gt;Application features &lt;/li&gt;
&lt;li&gt;CSS framework&lt;/li&gt;
&lt;li&gt;External libraries&lt;/li&gt;
&lt;li&gt;Device support&lt;/li&gt;
&lt;li&gt;SEO&lt;/li&gt;
&lt;li&gt;Analytics tool&lt;/li&gt;
&lt;li&gt;Software management methodology&lt;/li&gt;
&lt;li&gt;Internationalisation and Localisation &lt;/li&gt;
&lt;li&gt;   Testing&lt;/li&gt;
&lt;li&gt;   Deployment (Staging and Deployment)&lt;/li&gt;
&lt;li&gt;   Communication &lt;/li&gt;
&lt;li&gt;   Documentation&lt;/li&gt;
&lt;li&gt;   Storage&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-application-overview"&gt;
  &lt;/a&gt;
  1.    Application Overview
&lt;/h3&gt;

&lt;p&gt;This is a detailed explanation of what the product entails  and it should be simple and very easy to understand by anyone who cares to look at the document.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-application-features"&gt;
  &lt;/a&gt;
  2.    Application features
&lt;/h3&gt;

&lt;p&gt;These are the key feature modules in your application. You can derive them from the functional requirement document. Eg. Transaction Management, User, Dashboard, etc. You can further divide this into features module and shared modules. This could help in making decisions around the structure of your application.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-css-framework"&gt;
  &lt;/a&gt;
  3.    CSS Framework
&lt;/h3&gt;

&lt;p&gt;The choice of the CSS framework is one of those things that varies across different products especially when you are working in the freelance or consulting space where each client can have their own preference. Examples include bootstrap, angular material, etc. You can also specify the CSS methodology and the CSS preprocessor.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-external-libraries"&gt;
  &lt;/a&gt;
  4.    External Libraries
&lt;/h3&gt;

&lt;p&gt;These are external libraries apart from the CSS framework. they could range from your charting library, date/time and other critical libraries for company-specific or individual applications. It is important to always keep track of this and it is more useful for people with near static documentation. your consultants or staff will always know the appropriate permissible library to use when starting new projects or adding a new feature that requires an external library.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-device-support"&gt;
  &lt;/a&gt;
  5.    Device support
&lt;/h3&gt;

&lt;p&gt;While it is important to make your application mobile responsive at any point in time. It is also worthy to document the target browsers, resolution information and whether the application has mobile-specific features or views.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-seo"&gt;
  &lt;/a&gt;
  6.    SEO
&lt;/h3&gt;

&lt;p&gt;Here, you will specify how you want to improve the SEO of your application. You can specify the  strategies. Examples includes server side rendering, dynamic rendering or pre-rendering using tools like &lt;a href="https://scully.io/"&gt;scully&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-analytics-tools-and-monitoring"&gt;
  &lt;/a&gt;
  7.    Analytics tools And Monitoring
&lt;/h3&gt;

&lt;p&gt;You can further categorize this into different types of environments eg. for local Performance analysis, you can specify tools like the source map explorer. For production monitoring, you can use &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; and &lt;a href="https://www.pingdom.com/"&gt;Pingdom&lt;/a&gt; &lt;br&gt;
for traffic, you can use mixpanel, fb, google etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-software-management-methodology"&gt;
  &lt;/a&gt;
  8.    Software management methodology
&lt;/h3&gt;

&lt;p&gt;Specify the details of the software management methodology. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-internationalization-and-localization"&gt;
  &lt;/a&gt;
  9.    Internationalization and Localization
&lt;/h3&gt;

&lt;p&gt;You need to specify whether there is a need for  internationalization, specify the locals you want to support and the translation tools you are going to use. This is very important as it is easier to implement this during application development. You also need to decide the localization strategy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-testing"&gt;
  &lt;/a&gt;
  10.    Testing
&lt;/h3&gt;

&lt;p&gt;You can specify everything about the application testing&lt;br&gt;
eg. The type of testing, test runner (Karma,Cypress), the testing framework (Jasmine,Jest), mocking libraries(Testdouble.js, Jasmine). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-deployment"&gt;
  &lt;/a&gt;
  11.    Deployment
&lt;/h3&gt;

&lt;p&gt;You can define the various deployment strategies and environment. Eg. Whether you will be containerizing your application with tools like Docker, the numbers of environments, server details, type of repositories, AOT or JIT etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-communication"&gt;
  &lt;/a&gt;
  12.    Communication;
&lt;/h3&gt;

&lt;p&gt;This includes things like encryption method, message format. Etc.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-storage"&gt;
  &lt;/a&gt;
  13.    Storage
&lt;/h3&gt;

&lt;p&gt;This includes general storage information ranging from application local and global storage eg. NGRX, Ankita, Rxjs,NGRX component store, ngrx-slice, session, local, cookies etc. Also, you can include your assets storage.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-documentation"&gt;
  &lt;/a&gt;
  14. Documentation
&lt;/h3&gt;

&lt;p&gt;This is the actual documentation for you angular application. eg. For components libraries documentation you can specify &lt;a href="https://storybook.js.org/"&gt;Story book&lt;/a&gt; and also &lt;a href="https://compodoc.app/index.html"&gt;compodoc&lt;/a&gt; for the angular application documentation &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;p&gt;I have outlined what I think are the most critical research or document to put in place before you start any new frontend application. I will gladly love to hear your opinion.&lt;/p&gt;

&lt;p&gt;Here is a repo that shows a possible structure of your document&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/valoni01/fe-documentation-guide/blob/main/README.md"&gt;Frontend Documentation Guide&lt;/a&gt;&lt;/p&gt;

</description>
      <category>angular</category>
      <category>react</category>
      <category>vue</category>
      <category>architecture</category>
    </item>
    <item>
      <title>`Proxy` all of the things! Part 1: Counters</title>
      <author>lionel-rowe</author>
      <pubDate>Thu, 26 Aug 2021 23:54:46 +0000</pubDate>
      <link>https://dev.to/lionelrowe/proxy-all-of-the-things-part-1-counters-4l92</link>
      <guid>https://dev.to/lionelrowe/proxy-all-of-the-things-part-1-counters-4l92</guid>
      <description>&lt;p&gt;To celebrate the &lt;a href="https://observer.com/2021/05/internet-explorer-is-officially-dead/"&gt;long-overdue death of Internet Explorer&lt;/a&gt;, I'm writing a series of articles on a massively useful and underused API that's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#browser_compatibility"&gt;available in every other mainstream JavaScript environment&lt;/a&gt;: &lt;code&gt;Proxy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With a &lt;code&gt;Proxy&lt;/code&gt;, you can "intercept and redefine fundamental operations" for an object, such as getters and setters.&lt;/p&gt;

&lt;p&gt;Let's start with a simple example: &lt;strong&gt;counters with a default value&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let's say you're implementing a simple algorithm to count the number of occurrences of each word in a text. In a language like Ruby, you could do that easily like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;word_counts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;counters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/\W+/&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;counters&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_counts&lt;/span&gt; &lt;span class="s1"&gt;'a a a b b c'&lt;/span&gt; &lt;span class="c1"&gt;# {"a" =&amp;gt; 3, "b" =&amp;gt; 2, "c" =&amp;gt; 1}&lt;/span&gt;
&lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'d'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That &lt;code&gt;Hash.new(0)&lt;/code&gt; is really neat: it gives us key-value pairs with a default value of &lt;code&gt;0&lt;/code&gt; that we can increment from.&lt;/p&gt;

&lt;p&gt;JavaScript objects, on the other hand, &lt;em&gt;can't&lt;/em&gt; be given a default value. Passing a parameter to an &lt;code&gt;Object&lt;/code&gt; constructor instead converts that value itself into an object: &lt;code&gt;new Object(0)&lt;/code&gt; returns &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number"&gt;&lt;code&gt;Number {0}&lt;/code&gt;&lt;/a&gt;, which isn't what we want at all.&lt;/p&gt;

&lt;p&gt;However, we can easily mimic Ruby's &lt;code&gt;Hash.new&lt;/code&gt; behavior with a proxy:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * @template T
 * @param {T} defaultVal
 * @returns {Record&amp;lt;string, T&amp;gt;}
 */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;hashWithDefault&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;defaultVal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Proxy&lt;/span&gt;&lt;span class="p"&gt;({},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;??&lt;/span&gt; &lt;span class="nx"&gt;defaultVal&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;target&lt;/code&gt; parameter passed to the getter is the proxied object itself — the first argument passed to the &lt;code&gt;Proxy&lt;/code&gt; constructor. As we didn't override &lt;code&gt;set&lt;/code&gt;, setting simply works as normal — the property is set on that same &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our JavaScript &lt;code&gt;hashWithDefault(0)&lt;/code&gt; now works very similarly to Ruby's &lt;code&gt;Hash.new(0)&lt;/code&gt;. We can now easily and ergonomically write our word count function like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @param {string} text */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wordCounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;counters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hashWithDefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;word&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\W&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;counters&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;word&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;counters&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;wc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;wordCounts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a a a b b c&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Proxy {a: 3, b: 2, c: 1}&lt;/span&gt;
&lt;span class="nx"&gt;wc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;span class="nx"&gt;wc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="c1"&gt;// 0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Cool, no? In a future installment, we'll look at using &lt;code&gt;Proxy&lt;/code&gt; with a setter function as well.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Game Programming Fundamentals</title>
      <author>Otmane Riad</author>
      <pubDate>Thu, 26 Aug 2021 23:11:36 +0000</pubDate>
      <link>https://dev.to/nexteventideas/game-programming-fundamentals-4nn4</link>
      <guid>https://dev.to/nexteventideas/game-programming-fundamentals-4nn4</guid>
      <description>&lt;p&gt;If you are looking for an answer to the question of “How to Develop a Game” , you have come to the right place. First of all, we are not going to talk about the need to learn a programming language or game engines to program video games, because developing a game is about much more than just coding and game engines. In fact, the game industry is a field that includes many different industries, including mathematics, art, psychology, and even cinema. In other words, it is never enough to just master game engines and learn a programming language. So what, exactly. do we need to know?&lt;/p&gt;

&lt;p&gt;This beginner’s guide to video game development will cover everything you need to know to get started creating your own gaming software and apps.&lt;/p&gt;

&lt;p&gt;Video Game Mechanics Explained&lt;br&gt;
One of the biggest reasons why games reach huge audiences today has to do with game mechanics. In order to better understand what game mechanics are, we have to think of a game system. Imagine there are various sub-parts that this system controls. To picture this better, you can examine the diagram below:&lt;/p&gt;

&lt;p&gt;Read More: &lt;a href="https://hitechnoloy.ca/game-programming-fundamentals/"&gt;https://hitechnoloy.ca/game-programming-fundamentals/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>programming</category>
      <category>java</category>
      <category>unity3d</category>
    </item>
    <item>
      <title>Tart up your terminal!</title>
      <author>skino</author>
      <pubDate>Thu, 26 Aug 2021 22:51:25 +0000</pubDate>
      <link>https://dev.to/skino2020/tart-up-your-terminal-16n7</link>
      <guid>https://dev.to/skino2020/tart-up-your-terminal-16n7</guid>
      <description>&lt;p&gt;In the last few blog entries i have about Ubuntu a lot. from building a dev environment from scratch all the way through to how it feels still using it a week on. As i'm getting more and more familiar with Linux again after so many years away from it i want to make my terminal look a little better :)&lt;/p&gt;

&lt;p&gt;Now there is a lot of people who will say this is a waste of time and blah blah blah but its something i like doing, with the PHP and Laravel stuff i do i have a terminal window open pretty much all the time (so i don't need to open the IDE one) so making my terminal look nicer is just a personal preference.&lt;/p&gt;

&lt;p&gt;Check out the full post: &lt;a href="https://raspada-blog.co.uk/blog/tart-up-that-terminal"&gt;Tart up that terminal&lt;/a&gt;&lt;/p&gt;

</description>
      <category>terminal</category>
      <category>linux</category>
      <category>macos</category>
    </item>
    <item>
      <title>How to build a Modal</title>
      <author>Jay Cruz</author>
      <pubDate>Thu, 26 Aug 2021 22:30:43 +0000</pubDate>
      <link>https://dev.to/coderjay06/how-to-build-a-modal-55kh</link>
      <guid>https://dev.to/coderjay06/how-to-build-a-modal-55kh</guid>
      <description>&lt;p&gt;&lt;em&gt;A brief tutorial on how to build a modal using Javascript, HTML, and CSS.&lt;/em&gt;&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-a-modal"&gt;
  &lt;/a&gt;
  What’s a modal?
&lt;/h2&gt;

&lt;p&gt;Modals are pop-up windows or dialog boxes that display some sort of content above everything else on a web page. They usually are triggered by an event such as clicking on a button. They can also pop up automatically (which can be very annoying at times!). We’ve all probably come across one at some point while browsing the web. Many times they will display some content asking you for your email or to sign up for some sort of promotional offer. Well, today we won't be signing up for anything, we’ll be building one ourselves!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-a-modal"&gt;
  &lt;/a&gt;
  Building a Modal
&lt;/h2&gt;

&lt;p&gt;To build our modal we’ll be using plain ol’ Javascript, HTML, and, CSS. To start off we’re going to set up our HTML template. We’ll need several parts to make up our modal. An outer div element that we’ll label with the id overlay. This will be the window our modal box will sit on top of. The modal will contain all of the main content we want to be displayed once the modal opens, including a close button to hide the modal. We also need a button to actually trigger the modal to be opened. Lastly, we’ll link our CSS and Javascript files.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Now we can add some styling to make our modal more visually appealing by styling our buttons and the actual modal itself.&lt;br&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Let’s see what our closed modal is looking like so far.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JmNYlHsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A9fRQuVRZ_h4Fy4X98_4Cng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JmNYlHsi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A9fRQuVRZ_h4Fy4X98_4Cng.png" alt="Green Contact Me button"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Looks great! Now we just have to hook it up using Javascript. We’ll need to listen for click events for when a user clicks the &lt;em&gt;Contact Me&lt;/em&gt; button and when they close the modal.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
This sets up the functionality for opening and closing our modal. Now when a user clicks on the &lt;em&gt;Contact Me&lt;/em&gt; button our user will see the modal with all the contact details displayed.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2-rCtWk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A82mGQ5n1i7WHyiT-cNri9Q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2-rCtWk2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2A82mGQ5n1i7WHyiT-cNri9Q.png" alt="Modal with contact details"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Modals are meant to capture a user’s attention. When modals are triggered everything else on the page becomes temporarily deactivated. This creates an immediate focus on the information the modal is presenting. Sometimes this can enhance the user experience, other times it can do the exact opposite. It all depends on the use case and whether or not the modal presents useful content that’s relevant to the user.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#learn-more-about-modals"&gt;
  &lt;/a&gt;
  Learn more about Modals
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Modal_window"&gt;Modal window (Wikipedia)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://www.w3schools.com/howto/howto_css_modals.asp"&gt;How to create a Modal Box (W3 Schools)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>Recursive Function: What Exactly Is Recursion?</title>
      <author>Oluwatobi Sofela</author>
      <pubDate>Thu, 26 Aug 2021 22:29:35 +0000</pubDate>
      <link>https://dev.to/oluwatobiss/recursive-function-what-exactly-is-recursion-ph6</link>
      <guid>https://dev.to/oluwatobiss/recursive-function-what-exactly-is-recursion-ph6</guid>
      <description>&lt;p&gt;&lt;strong&gt;Recursion&lt;/strong&gt; is a method by which a problem gets solved through iteration.&lt;/p&gt;

&lt;p&gt;In other words, a recursive function is a function that repetitively invokes itself infinitely (or until something stops it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-stuff-to-know-about-recursive-function"&gt;
  &lt;/a&gt;
  Important stuff to know about recursive function
&lt;/h2&gt;

&lt;p&gt;Keep these two essential pieces of info in mind whenever you choose to use recursive functions.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#info-1-recursion-is-not-an-iife"&gt;
  &lt;/a&gt;
  Info 1: Recursion is not an IIFE
&lt;/h3&gt;

&lt;p&gt;A recursive function is different from an &lt;em&gt;Immediately Invoking function Expression&lt;/em&gt; (IIFE).&lt;/p&gt;

&lt;p&gt;An IIFE automatically invokes itself once.&lt;/p&gt;

&lt;p&gt;However, a recursive function automatically invokes itself repeatedly for an unlimited amount of time or until something stops its re-invocation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#info-2-a-recursive-function-needs-a-base-case"&gt;
  &lt;/a&gt;
  Info 2: A recursive function needs a base case
&lt;/h3&gt;

&lt;p&gt;The code written to discontinue the re-invocation of a recursive function is called a base case.&lt;/p&gt;

&lt;p&gt;It is always important to define a base case when creating a recursive function — so that the function will not run endlessly, thereby crashing the browser.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#example-of-a-recursive-function"&gt;
  &lt;/a&gt;
  Example of a recursive function
&lt;/h2&gt;

&lt;p&gt;Below is a &lt;a href="https://www.codesweetly.com/html-css-javascript"&gt;JavaScript&lt;/a&gt; code that returns a &lt;a href="https://en.wikipedia.org/wiki/Concatenation"&gt;concatenation&lt;/a&gt; of all the values returned through the &lt;code&gt;countDown()&lt;/code&gt; function’s recursive invocation.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Create a recursive function:&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Define the base case of this recursive function:&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Recursion Stopped!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="c1"&gt;// Define the recursive case:&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Invoke the countDown() recursive function:&lt;/span&gt;
&lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// The invocation above will return:&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2, 1, 0, Recursion Stopped!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the recursive algorithm above, the &lt;code&gt;countDown(num - 1)&lt;/code&gt; code makes the whole function a recursion because it is the &lt;a href="https://www.codesweetly.com/document-vs-data-vs-code#h-what-is-a-code"&gt;code&lt;/a&gt; that makes &lt;code&gt;countDown()&lt;/code&gt; recall itself repeatedly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#a-look-at-the-events-behind-the-scenes"&gt;
  &lt;/a&gt;
  A look at the events behind the scenes
&lt;/h2&gt;

&lt;p&gt;When we invoked the &lt;code&gt;countDown&lt;/code&gt; function and passed in the value &lt;code&gt;2&lt;/code&gt; (that is, &lt;code&gt;countDown(2)&lt;/code&gt;), the algorithm started running as follows:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-1-check-if-raw-2-endraw-is-less-than-raw-0-endraw-"&gt;
  &lt;/a&gt;
  Step 1: Check if &lt;code&gt;2&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;The computer checked if the value &lt;code&gt;2&lt;/code&gt; — that we passed to the &lt;code&gt;num&lt;/code&gt; parameter of the &lt;code&gt;countDown&lt;/code&gt; function — is less than &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;2&lt;/code&gt; is not less than &lt;code&gt;0&lt;/code&gt;, the computer didn’t execute the &lt;code&gt;if&lt;/code&gt; statement’s code. Instead, it skipped to the next code after the &lt;code&gt;if&lt;/code&gt; statement — which is the recursion code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step-2-execute-the-return-statement"&gt;
  &lt;/a&gt;
  Step 2: Execute the return statement
&lt;/h3&gt;

&lt;p&gt;After skipping the &lt;code&gt;if&lt;/code&gt; statement, the computer executed the &lt;code&gt;return num + " " + countDown(num - 1)&lt;/code&gt; code — but substituted the &lt;code&gt;num&lt;/code&gt; parameter with the parameter’s value (that is, &lt;code&gt;2&lt;/code&gt;) like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-3-execute-only-the-recursive-statement"&gt;
  &lt;/a&gt;
  Step 3: Execute only the recursive statement
&lt;/h3&gt;

&lt;p&gt;In step 2’s code above, notice that the &lt;code&gt;return&lt;/code&gt; command can’t return any value because the &lt;code&gt;return&lt;/code&gt; statement includes a recursive code (&lt;code&gt;countDown(1)&lt;/code&gt;) recalling the &lt;code&gt;countDown&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Therefore, while retaining the other parts of the &lt;code&gt;return&lt;/code&gt; statement (that is, &lt;code&gt;2 + ", " +&lt;/code&gt;), the computer will execute only the recursion code (&lt;code&gt;countDown(1)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;In other words, the &lt;code&gt;countDown(1)&lt;/code&gt; code will automatically invoke the &lt;code&gt;countDown&lt;/code&gt; function while passing in the value &lt;code&gt;1&lt;/code&gt;. Then, the algorithm will start running again by checking if &lt;code&gt;1&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;1&lt;/code&gt; is not less than &lt;code&gt;0&lt;/code&gt;, the computer skipped to the recursion code like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-4-invoke-only-the-recursion-code"&gt;
  &lt;/a&gt;
  Step 4: Invoke only the recursion code
&lt;/h3&gt;

&lt;p&gt;Again, notice that the &lt;code&gt;return&lt;/code&gt; command (in step 3) cannot return any value because the &lt;code&gt;return&lt;/code&gt; statement includes a recursion code (&lt;code&gt;countDown(0)&lt;/code&gt;) that recalls the &lt;code&gt;countDown&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Therefore, while retaining the other parts of the &lt;code&gt;return&lt;/code&gt; statement (that is, &lt;code&gt;2 + ", " + 1 + ", " +&lt;/code&gt;), the computer will execute only the recursion code (&lt;code&gt;countDown(0)&lt;/code&gt;). So, the &lt;code&gt;countDown(0)&lt;/code&gt; code will automatically invoke the &lt;code&gt;countDown&lt;/code&gt; function while passing in the value &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, the function will start running again by checking if &lt;code&gt;0&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;0&lt;/code&gt; is not less than &lt;code&gt;0&lt;/code&gt;, the computer skipped to the recursion code like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;countDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step-5-execute-only-the-recursion-code"&gt;
  &lt;/a&gt;
  Step 5: Execute only the recursion code
&lt;/h3&gt;

&lt;p&gt;Yet again, the &lt;code&gt;return&lt;/code&gt; command (in step 4) can’t return any value because the &lt;code&gt;return&lt;/code&gt; statement includes a recursion code (&lt;code&gt;countDown(-1)&lt;/code&gt;) recalling the &lt;code&gt;countDown&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Therefore, while retaining the other parts of the &lt;code&gt;return&lt;/code&gt; statement (that is, &lt;code&gt;2 + ", " + 1 + ", " + 0 + ", " +&lt;/code&gt;), the computer will execute only the recursion code (&lt;code&gt;countDown(-1)&lt;/code&gt;). So, the &lt;code&gt;countDown(-1)&lt;/code&gt; code will automatically invoke the &lt;code&gt;countDown&lt;/code&gt; function while passing in the value &lt;code&gt;-1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then, the function will start running again by checking if &lt;code&gt;-1&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point, &lt;code&gt;-1&lt;/code&gt; is less than &lt;code&gt;0&lt;/code&gt;. Therefore, the computer will execute the code of the &lt;code&gt;if&lt;/code&gt; statement by returning the value &lt;code&gt;“Recursion Stopped!”&lt;/code&gt; like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Recursion Stopped!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, the &lt;code&gt;return&lt;/code&gt; statement now has values it can validly concatenate and return. Therefore, the returned value from &lt;code&gt;countDown&lt;/code&gt; will be:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;2, 1, 0, Recursion Stopped!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#wrapping-it-up"&gt;
  &lt;/a&gt;
  Wrapping it up
&lt;/h2&gt;

&lt;p&gt;In this article, we learned that a recursive function is a function that repeatedly recalls itself until something stops the recall.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

</description>
      <category>functional</category>
      <category>javascript</category>
      <category>programming</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
