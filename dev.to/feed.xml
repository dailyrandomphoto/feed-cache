<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>🚀10 Trending projects on GitHub for web developers - 1st October 2021</title>
      <author>Iain Freestone</author>
      <pubDate>Fri, 01 Oct 2021 13:41:16 +0000</pubDate>
      <link>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-1st-october-2021-og4</link>
      <guid>https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-1st-october-2021-og4</guid>
      <description>&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-ctcss"&gt;
  &lt;/a&gt;
  1. ct.css
&lt;/h3&gt;

&lt;p&gt;ct.css is a diagnostic CSS snippet that exposes potential performance issues in your page’s &lt;/p&gt; tags.


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/csswizardry"&gt;
        csswizardry
      &lt;/a&gt; / &lt;a href="https://github.com/csswizardry/ct"&gt;
        ct
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Let’s take a look inside your &amp;lt;head&amp;gt;…
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
🧠 &lt;code&gt;ct.css&lt;/code&gt; – Let’s take a look inside your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;Computed tomography of the head uses a series of X-rays in a CT scan of the
head…&lt;br&gt;
— &lt;a href="https://en.wikipedia.org/wiki/Computed_tomography_of_the_head" rel="nofollow"&gt;wikipedia.org/Computed_tomography_of_the_head&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; is the single biggest render-blocking part of your page—ensuring
it is well-formed is critical. &lt;code&gt;ct.css&lt;/code&gt; is a diagnostic CSS snippet that exposes
potential performance issues in your page’s &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
&lt;h2&gt;
Example Output&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/csswizardry/ct./demo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vUuPpfo3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/csswizardry/ct./demo.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Red:&lt;/strong&gt; This is an error and should be addressed.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Orange:&lt;/strong&gt; This could be problematic in certain scenarios.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Green:&lt;/strong&gt; This is fine and is purely informational.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Solid:&lt;/strong&gt; This file is the problem.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Dashed:&lt;/strong&gt; Another file(s) are causing problems with this file.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Simple Usage&lt;/h2&gt;
&lt;p&gt;Paste this anywhere in your HTML:&lt;/p&gt;
&lt;div class="highlight highlight-text-html-basic position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;&amp;lt;&lt;/span&gt;&lt;span class="pl-ent"&gt;link&lt;/span&gt; &lt;span class="pl-c1"&gt;rel&lt;/span&gt;="&lt;span class="pl-s"&gt;stylesheet&lt;/span&gt;" &lt;span class="pl-c1"&gt;href&lt;/span&gt;="&lt;span class="pl-s"&gt;https://csswizardry.com/ct/ct.css&lt;/span&gt;" &lt;span class="pl-c1"&gt;class&lt;/span&gt;="&lt;span class="pl-s"&gt;ct&lt;/span&gt;" /&amp;gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
Chrome Snippet&lt;/h2&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/csswizardry/ct./chrome-snippet.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8e1ShRO1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/csswizardry/ct./chrome-snippet.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/web/tools/chrome-devtools/javascript/snippets" rel="nofollow"&gt;&lt;em&gt;Run Snippets Of JavaScript On Any Page With Chrome DevTools&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;(function(){
  var ct = document.createElement('link')
  ct.rel = 'stylesheet';
  ct.href = 'https://csswizardry.com/ct/ct.css';
  ct.classList.add('ct');&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/csswizardry/ct"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-refine"&gt;
  &lt;/a&gt;
  2. refine
&lt;/h3&gt;

&lt;p&gt;refine is a React-based framework for building data-intensive applications in no time&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pankod"&gt;
        pankod
      &lt;/a&gt; / &lt;a href="https://github.com/pankod/refine"&gt;
        refine
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      refine is a React-based framework for building data-intensive applications in no time ✨ It ships with Ant Design System, an enterprise-level UI toolkit.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
&lt;a href="https://refine.dev/" rel="nofollow"&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C355T-A1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/pankod/refine./logo.png"&gt;
&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;strong&gt;refine&lt;/strong&gt; is a &lt;a href="https://reactjs.org/" rel="nofollow"&gt;React&lt;/a&gt;-based framework for building data-intensive applications in no time ✨ It ships with &lt;a href="https://ant.design/" rel="nofollow"&gt;Ant Design System&lt;/a&gt;, an enterprise-level UI toolkit.&lt;/div&gt;
&lt;br&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://twitter.com/intent/tweet?text=A%20React-based%20framework%20for%20building%20data-intensive%20applications%20in%20no%20time.&amp;amp;url=https://github.com/pankod/refine&amp;amp;hashtags=opensource,react,reactquery,antdesign" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/90bc908826728c0e4261acfff5619fd732c7be2b2a00624fce6363c9a3623c90/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f75726c2f687474702f736869656c64732e696f2e7376673f7374796c653d736f6369616c" alt="Tweet"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://meercode.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/af0757484aa29a61e5baf2c52a8c965e1c06dfb854bbdb836a14be028cb91e17/68747470733a2f2f6d656572636f64652e696f2f62616467652f70616e6b6f642f7375706572706c6174653f747970653d63692d73636f7265266272616e63683d6d617374657226746f6b656e3d325a69543859736f4a677435374a4232334e59775872465933724a485a626f54266c6173744461793d3331" alt="Meercode CI Score"&gt;&lt;/a&gt;
&lt;a href="https://meercode.io/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/3117b4a8f473bbc9b3c42daa3585abc8a5f45c75a4d59af0e6e18bdc85513bc2/68747470733a2f2f6d656572636f64652e696f2f62616467652f70616e6b6f642f7375706572706c6174653f747970653d63692d737563636573732d72617465266272616e63683d6d617374657226746f6b656e3d325a69543859736f4a677435374a4232334e59775872465933724a485a626f54266c6173744461793d3331" alt="Meercode CI Success Rate"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/pankod/refine/maintainability" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/363c19505001be87a60c95df9d6f84236a6fde54eb6ced48010b32a4e3a20bb2/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f39396136356131393162646432366634363031632f6d61696e7461696e6162696c697479" alt="Maintainability"&gt;&lt;/a&gt;
&lt;a href="https://codeclimate.com/github/pankod/refine/test_coverage" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/0a0f6ae65c8c8bb379d975be0d0f0d2b401cfb1fe41e86cf7df8c3c158ac672c/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f39396136356131393162646432366634363031632f746573745f636f766572616765" alt="Test Coverage"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@pankod/refine" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/383e4c646633ae7326c50be824548000e6a4702efabc28823bd4250b40515216/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f4070616e6b6f642f726566696e652e737667" alt="npm version"&gt;&lt;/a&gt;
&lt;a href="https://www.npmjs.com/package/@pankod/refine" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/30c5489a62972de294b53eb1e44e6a6927d0c3fd9d7fc5fe724176fbd088d60c/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f4070616e6b6f642f726566696e65" alt="npm"&gt;&lt;/a&gt;
&lt;a href="https://github.com/pankod/refinecode_of_conduct.md"&gt;&lt;img src="https://camo.githubusercontent.com/9a5e1f5558bc77986d831a81a6f80819da5a94c13d3aca339a0993119f535a06/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f436f6e7472696275746f72253230436f76656e616e742d322e302d3462616161612e737667" alt="Contributor Covenant"&gt;&lt;/a&gt;
&lt;a href="https://discord.gg/UuU3XCc3J5" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fb9c4e789fbe4c17f0c6f89b608da6f7d382f2fdcc5e1ff474a80f012d27804b/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3833373639323632353733373631333336322e7376673f6c6162656c3d266c6f676f3d646973636f7264266c6f676f436f6c6f723d66666666666626636f6c6f723d373338394438266c6162656c436f6c6f723d364137454332" alt="Discord"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
  Created by &lt;a href="https://www.pankod.com" rel="nofollow"&gt;Pankod&lt;/a&gt;
&lt;/div&gt;
&lt;h2&gt;
About&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://refine.dev/" rel="nofollow"&gt;&lt;strong&gt;refine&lt;/strong&gt;&lt;/a&gt; offers lots of out-of-the box functionality for rapid development, without compromising extreme customizability. Use-cases include, but are not limited to &lt;em&gt;admin panels&lt;/em&gt;, &lt;em&gt;B2B applications&lt;/em&gt; and &lt;em&gt;dashboards&lt;/em&gt;.&lt;/p&gt;
&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;For more detailed information and usage, refer to the &lt;a href="https://refine.dev/docs/" rel="nofollow"&gt;refine documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Key features&lt;/h2&gt;
&lt;p&gt;⚙️ &lt;strong&gt;Zero-configuration&lt;/strong&gt;: One-line setup with &lt;a href="https://github.com/pankod/superplate"&gt;superplate&lt;/a&gt;. It takes less than a minute to start a project.&lt;/p&gt;
&lt;p&gt;📦 &lt;strong&gt;Out-of-the-box&lt;/strong&gt; : Routing, networking, authentication, state management, i18n and UI.&lt;/p&gt;
&lt;p&gt;🔌 &lt;strong&gt;Backend Agnostic&lt;/strong&gt; : Connects to any custom backend. Built-in support for &lt;a href="https://github.com/pankod/refine/tree/master/packages/simple-rest"&gt;REST API&lt;/a&gt;, &lt;a href="https://github.com/pankod/refine/tree/master/packages/graphql"&gt;GraphQL&lt;/a&gt;, &lt;a href="https://github.com/pankod/refine/tree/master/packages/nestjsx-crud"&gt;NestJs CRUD&lt;/a&gt;, &lt;a href="https://github.com/pankod/refine/tree/master/packages/airtable"&gt;Airtable&lt;/a&gt;, &lt;a href="https://github.com/pankod/refine/tree/master/packages/strapi"&gt;Strapi&lt;/a&gt;, &lt;a href="https://github.com/pankod/refine/tree/master/packages/strapi-graphql"&gt;Strapi GraphQL&lt;/a&gt;, &lt;a href="https://github.com/pankod/refine/tree/master/packages/supabase"&gt;Supabase&lt;/a&gt; and &lt;a href="https://github.com/pankod/refine/tree/master/packages/altogic"&gt;Altogic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;📝 &lt;strong&gt;Native Typescript Core&lt;/strong&gt; : You can always opt out for plain Javascript.&lt;/p&gt;
&lt;p&gt;🔘 &lt;strong&gt;Decoupled UI&lt;/strong&gt;…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pankod/refine"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#3-partytown"&gt;
  &lt;/a&gt;
  3. Partytown
&lt;/h3&gt;

&lt;p&gt;Relocate resource intensive third-party scripts off of the main thread and into a web worker.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/BuilderIO"&gt;
        BuilderIO
      &lt;/a&gt; / &lt;a href="https://github.com/BuilderIO/partytown"&gt;
        partytown
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Relocate resource intensive third-party scripts off of the main thread and into a web worker. 🎉
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Partytown 🎉
&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://user-images.githubusercontent.com/452425/134568488-f36f4640-9ada-4a78-a969-2b8315cf7f47.png"&gt;&lt;img width="838" alt="Partytown github fit 2x" src="https://res.cloudinary.com/practicaldev/image/fetch/s--nFc0r4SS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/452425/134568488-f36f4640-9ada-4a78-a969-2b8315cf7f47.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://dev.to/adamdbradley/introducing-partytown-run-third-party-scripts-from-a-web-worker-2cnp" rel="nofollow"&gt;Introducing Partytown: Run Third-Party Scripts From a Web Worker&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A fun location for your third-party scripts to hang out&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;⚠️ Warning! This is experimental! ⚠️&lt;/p&gt;
&lt;p&gt;Partytown is a lazy-loaded &lt;code&gt;6kb&lt;/code&gt; library to help relocate resource intensive scripts into a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API" rel="nofollow"&gt;web worker&lt;/a&gt;, and off of the &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Main_thread" rel="nofollow"&gt;main thread&lt;/a&gt;. Its goal is to help speed up sites by dedicating the main thread to your code, and offloading third-party scripts to a web worker.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/BuilderIO/partytown#information"&gt;Information&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#negative-impacts-from-Third-Party-Scripts"&gt;Negative Impacts From Third-Party Scripts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#goals"&gt;Goals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#web-workers"&gt;Web Workers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#browser-window-and-dom-access"&gt;Browser Window And DOM Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#sandboxing"&gt;Sandboxing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#trade-offs"&gt;Trade-Offs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#use-cases"&gt;Use-Cases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#how-does-it-work"&gt;How Does It Work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#browser-features-and-fallback"&gt;Browser Features And Fallback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BuilderIO/partytown#usage"&gt;Usage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#react"&gt;React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#integrations"&gt;Integrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#vanilla"&gt;Vanilla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#copy-tasks"&gt;Copy Task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#distribution"&gt;Distribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/BuilderIO/partytown/blob/main/DEVELOPER.md#local-development"&gt;Development&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown/blob/main/DEVELOPER.md#installation"&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown/blob/main/DEVELOPER.md#submitting-issues-and-writing-tests"&gt;Submitting Issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown/blob/main/DEVELOPER.md#manual-testing"&gt;Manual Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown/blob/main/DEVELOPER.md#e2e-testing"&gt;E2E Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown/blob/main/DEVELOPER.md#deployed-tests"&gt;Deployed Tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#community"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/BuilderIO/partytown#related-projects"&gt;Related Projects&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Information&lt;/h2&gt;
&lt;h3&gt;
Negative Impacts From Third-Party Scripts&lt;/h3&gt;
&lt;p&gt;Even with a fast and highly tuned site and/or app following all of the best practices, it's all too common for your performance…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/BuilderIO/partytown"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#4-nano-colors"&gt;
  &lt;/a&gt;
  4. Nano Colors
&lt;/h3&gt;

&lt;p&gt;A tiny and fast Node.js library to ANSI colors to terminal output. 4x times faster than chalk and use 5x less space in node_modules&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ai"&gt;
        ai
      &lt;/a&gt; / &lt;a href="https://github.com/ai/nanocolors"&gt;
        nanocolors
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      4x times faster than chalk and use 5x less space in node_modules
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Nano Colors&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/ai/nanocolors./img/logo.svg"&gt;&lt;img width="128" height="120" src="https://res.cloudinary.com/practicaldev/image/fetch/s--RlrLEg6_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ai/nanocolors./img/logo.svg" title="Nano Colors logo by Roman Shamin"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A tiny and fast Node.js library to ANSI colors to terminal output.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Started as a fork
of &lt;a href="https://github.com/jorgebucaran/"&gt;&lt;strong&gt;@jorgebucaran&lt;/strong&gt;&lt;/a&gt;’s
&lt;a href="https://github.com/jorgebucaran/colorette"&gt;&lt;code&gt;colorette&lt;/code&gt;&lt;/a&gt; with hacks
from &lt;a href="https://github.com/lukeed/"&gt;&lt;strong&gt;@lukeed&lt;/strong&gt;&lt;/a&gt;’s
&lt;a href="https://github.com/lukeed/kleur"&gt;&lt;code&gt;kleur&lt;/code&gt;&lt;/a&gt;
See &lt;a href="https://github.com/ai/nanocolors/wiki/Colorette-Changes"&gt;changes&lt;/a&gt;
between Nano Colors and &lt;code&gt;colorette&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;It is &lt;strong&gt;4 times faster&lt;/strong&gt; than &lt;code&gt;chalk&lt;/code&gt; for simple use cases.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;No dependencies.&lt;/strong&gt; It takes &lt;strong&gt;5 times less space&lt;/strong&gt; in &lt;code&gt;node_modules&lt;/code&gt;
than &lt;code&gt;chalk&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Actively maintained.&lt;/strong&gt; Used in many big projects
like PostCSS or Browserslist.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Auto-detects color support.&lt;/strong&gt; You can also toggle color mode manually.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tree-shakable.&lt;/strong&gt; We use a dual &lt;a href="https://github.com/ai/nanocolors/blob/main/index.js"&gt;ESM&lt;/a&gt;/&lt;a href="https://github.com/ai/nanocolors/blob/main/index.cjs"&gt;CJS&lt;/a&gt; package.&lt;/li&gt;
&lt;li&gt;Supports Node.js ≥ 6 and universal Node.js/browser projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-k"&gt;import&lt;/span&gt; &lt;span class="pl-kos"&gt;{&lt;/span&gt; &lt;span class="pl-s1"&gt;green&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt; &lt;span class="pl-s1"&gt;bold&lt;/span&gt; &lt;span class="pl-kos"&gt;}&lt;/span&gt; &lt;span class="pl-k"&gt;from&lt;/span&gt; &lt;span class="pl-s"&gt;'nanocolors'&lt;/span&gt;
&lt;span class="pl-smi"&gt;console&lt;/span&gt;&lt;span class="pl-kos"&gt;.&lt;/span&gt;&lt;span class="pl-en"&gt;log&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;
  &lt;span class="pl-en"&gt;green&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;`Task &lt;span class="pl-s1"&gt;&lt;span class="pl-kos"&gt;${&lt;/span&gt;&lt;span class="pl-en"&gt;bold&lt;/span&gt;&lt;span class="pl-kos"&gt;(&lt;/span&gt;&lt;span class="pl-s"&gt;'1'&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;/span&gt; was finished`&lt;/span&gt;&lt;span class="pl-kos"&gt;)&lt;/span&gt;
&lt;span class="pl-kos"&gt;)&lt;/span&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/ai/nanocolors./img/example.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XIIr2ZUa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/ai/nanocolors./img/example.png" alt="Nano Colors output" width="600"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://evilmartians.com/?utm_source=nanocolors" rel="nofollow"&gt;&lt;br&gt;
  &lt;img src="https://camo.githubusercontent.com/e3313339ea3cb39c90da1e389af3b31b3ab754f9e06a115f8bab411854ea460e/68747470733a2f2f6576696c6d61727469616e732e636f6d2f6261646765732f73706f6e736f7265642d62792d6576696c2d6d61727469616e732e737667" alt="Sponsored by Evil Martians" width="236" height="54"&gt;&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Benchmarks&lt;/h2&gt;

&lt;p&gt;Benchmark for simple use case:&lt;/p&gt;

&lt;div class="snippet-clipboard-content position-relative overflow-auto"&gt;
&lt;pre&gt;&lt;code&gt;$ ./test/simple-benchmark.js
chalk         10,242,983 ops/sec
cli-color        723,530 ops/sec
ansi-colors    3,604,458 ops/sec
kleur         13,086,656 ops/sec
kleur/colors  15,955,740 ops/sec
colorette     41,579,227 ops/sec&lt;/code&gt;&lt;/pre&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/ai/nanocolors"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;






&lt;h3&gt;
  &lt;a href="#5-twitter-together"&gt;
  &lt;/a&gt;
  5. Twitter, together!
&lt;/h3&gt;

&lt;p&gt;A GitHub action to tweet from a repository&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/gr2m"&gt;
        gr2m
      &lt;/a&gt; / &lt;a href="https://github.com/gr2m/twitter-together"&gt;
        twitter-together
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      🐦 A GitHub action to tweet from a repository
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a href="https://github.com/gr2m/twitter-together/issues/16"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x6WP5JY2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gr2m/twitter-togetherassets/logo.png" width="150" alt="twitter together logo"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;h1&gt;
Twitter, together!&lt;/h1&gt;
&lt;p&gt;
  &lt;a href="https://action-badges.now.sh" rel="nofollow"&gt;&lt;img alt="Build Status" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ix5RCn_6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/gr2m/twitter-together/workflows/Test/badge.svg"&gt;&lt;/a&gt;
  &lt;a href="https://github.com/gr2m/twitter-together/blob/80c8aab34382347120e22501c2e44f30a7a62174/package.json#L8"&gt;&lt;img alt="Coverage" src="https://camo.githubusercontent.com/92fc1719549aaca4f15aea8c502cff69859402c8ec04d85fd9c6e5725dac19ad/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f7665726167652d3130302532352d677265656e2e737667"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;For Open Source or event maintainers that share a project twitter account, &lt;code&gt;twitter-together&lt;/code&gt; is a GitHub Action that utilizes text files to publish tweets from a GitHub repository. Rather than tweeting directly, GitHub’s pull request review process encourages more collaboration, Twitter activity and editorial contributions by enabling everyone to submit tweet drafts to a project.&lt;/p&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/gr2m/twitter-togetherassets/demo.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cWOtN71a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/gr2m/twitter-togetherassets/demo.gif" alt="Screencast demonstrating twitter-together"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#try-it"&gt;Try it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#twitter-api-compatibility"&gt;Twitter API compatibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#setup"&gt;Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#contribute"&gt;Contribute&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/gr2m/twitter-together#how-it-works"&gt;How it works&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#the-push-event"&gt;The &lt;code&gt;push&lt;/code&gt; event&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#the-pull_request-event"&gt;The &lt;code&gt;pull_request&lt;/code&gt; event&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#motivation"&gt;Motivation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gr2m/twitter-together#license"&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Try it&lt;/h2&gt;
&lt;p&gt;You can submit a tweet to this repository to see the magic happen. Please follow the instructions at &lt;a href="https://github.com/gr2m/twitter-togethertweets/README.md"&gt;tweets/README.md&lt;/a&gt; and mention your own twitter username to the tweet. This repository is setup to tweet from &lt;a href="https://twitter.com/commit2tweet" rel="nofollow"&gt;https://twitter.com/commit2tweet&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
Twitter API compatibility&lt;/h2&gt;
&lt;p&gt;The Twitter Ads API we currently use is the &lt;code&gt;v8&lt;/code&gt; version.&lt;/p&gt;
&lt;h2&gt;
Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/gr2m/twitter-togetherdocs/01-create-twitter-app.md"&gt;Create a twitter app&lt;/a&gt; with your shared twitter account and store the credentials as &lt;code&gt;TWITTER_API_KEY&lt;/code&gt;, &lt;code&gt;TWITTER_API_SECRET_KEY&lt;/code&gt;, &lt;code&gt;TWITTER_ACCESS_TOKEN&lt;/code&gt; and &lt;code&gt;TWITTER_ACCESS_TOKEN_SECRET&lt;/code&gt;…&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/gr2m/twitter-together"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#6-prestige"&gt;
  &lt;/a&gt;
  6. Prestige
&lt;/h3&gt;

&lt;p&gt;A text-based HTTP client in the browser. An interface-less Postman.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/sharat87"&gt;
        sharat87
      &lt;/a&gt; / &lt;a href="https://github.com/sharat87/prestige"&gt;
        prestige
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A text-based HTTP client in the browser. An interface-less Postman.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="markdown"&gt;
&lt;h1&gt;
Prestige &lt;sup&gt;β&lt;/sup&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Just an HTTP client, by &lt;a href="https://sharats.me" rel="nofollow"&gt;@sharat87&lt;/a&gt;. Available at &lt;a href="https://prestigemad.com" rel="nofollow"&gt;prestigemad.com&lt;/a&gt;
(&lt;a href="https://github.com/sharat87/prestige#why-the-domain"&gt;Why that domain?&lt;/a&gt;).&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Under all the abstractions, it's just stardust interacting with text.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a &lt;em&gt;powerful&lt;/em&gt;, &lt;em&gt;text-based&lt;/em&gt;, &lt;em&gt;in-browser&lt;/em&gt;, HTTP client app that I wanted for myself.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://prestigemad.com/docs" rel="nofollow"&gt;User Guide&lt;/a&gt; to learn how Prestige can be a powerful addition to your
toolset.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://news.ycombinator.com/item?id=27412445" rel="nofollow"&gt;Discuss on Hacker News&lt;/a&gt;. Join us on &lt;a href="https://discord.gg/6tc9fMmYRW" rel="nofollow"&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/sharat87/prestige/raw/master/docs/content/img/screenshot.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VlPujjoT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/sharat87/prestige/raw/master/docs/content/img/screenshot.png" alt="Prestige Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why is Prestige labeled as Beta Software?&lt;/strong&gt;: Gaps in documentation, insufficient test coverage, and potential for
backwards-incompatible changes to the syntax.&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Define requests in plain text, hit &lt;code&gt;Ctrl+Enter&lt;/code&gt; (or &lt;code&gt;Cmd+Enter&lt;/code&gt;) to execute and view results.&lt;/li&gt;
&lt;li&gt;Write plain, familiar Javascript for templating within your requests.&lt;/li&gt;
&lt;li&gt;Shows all responses in a redirect chain, if request redirects.&lt;/li&gt;
&lt;li&gt;Save your Prestige documents to Gist.&lt;/li&gt;
&lt;li&gt;Export requests as cURL commands (more export formats coming soon).&lt;/li&gt;
&lt;li&gt;Isolated cookie management.&lt;/li&gt;
&lt;li&gt;Uploading files to…&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/sharat87/prestige"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#7-react-spreadsheet"&gt;
  &lt;/a&gt;
  7. React Spreadsheet
&lt;/h3&gt;

&lt;p&gt;Simple, customizable yet performant spreadsheet for React&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/iddan"&gt;
        iddan
      &lt;/a&gt; / &lt;a href="https://github.com/iddan/react-spreadsheet"&gt;
        react-spreadsheet
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Simple, customizable yet performant spreadsheet for React
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;div&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/iddan/react-spreadsheet/master/assets/logo.svg?sanitize=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6flO0aYp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/iddan/react-spreadsheet/master/assets/logo.svg%3Fsanitize%3Dtrue" height="120"&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;h1&gt;
React Spreadsheet&lt;/h1&gt;
&lt;p&gt;Simple, customizable yet performant spreadsheet for React.&lt;/p&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/iddan/react-spreadsheet/blob/master/assets/screenshot.png?raw=true"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S_gvDL2k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/iddan/react-spreadsheet/raw/master/assets/screenshot.png%3Fraw%3Dtrue" alt="Screenshot"&gt;&lt;/a&gt;
&lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fiddan%2Freact-spreadsheet?ref=badge_shield" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c284eb232fdc7469b9c45fe12cca44ceb7915be827dbcc2de2be17f5b8a981bb/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f6769742532426769746875622e636f6d253246696464616e25324672656163742d73707265616473686565742e7376673f747970653d736869656c64" alt="FOSSA Status"&gt;&lt;/a&gt;
&lt;a href="https://github.com/iddan/react-spreadsheet/actions/workflows/ci.yaml?query=branch%3Amaster"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LVrKP9Wb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/iddan/react-spreadsheet/workflows/CI/badge.svg%3Fbranch%3Dmaster" alt="CI"&gt;&lt;/a&gt;
&lt;a href="https://coveralls.io/github/iddan/react-spreadsheet?branch=master" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/682cd4799843f7f82cb39400c3593dd1168f78baba1283b54ccb0f61e0704aa6/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f696464616e2f72656163742d73707265616473686565742f62616467652e7376673f6272616e63683d6d6173746572" alt="Coverage Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;npm install react react-dom scheduler react-spreadsheet&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;em&gt;or&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;yarn add react react-dom scheduler react-spreadsheet&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Simple straightforward API focusing on common use cases while keeping flexibility&lt;/li&gt;
&lt;li&gt;Performant (yet not virtualized)&lt;/li&gt;
&lt;li&gt;Implements Just Components™&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
&lt;a href="https://iddan.github.io/react-spreadsheet" rel="nofollow"&gt;Demo&lt;/a&gt;
&lt;/h3&gt;
&lt;h3&gt;
&lt;a href="https://iddan.github.io/react-spreadsheet/docs" rel="nofollow"&gt;Docs&lt;/a&gt;
&lt;/h3&gt;
&lt;h2&gt;
License&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://app.fossa.io/projects/git%2Bgithub.com%2Fiddan%2Freact-spreadsheet?ref=badge_large" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/124a7ac85eaab01b6017dd51e4983fd863fc35046da9533156e15fb787b08d3d/68747470733a2f2f6170702e666f7373612e696f2f6170692f70726f6a656374732f6769742532426769746875622e636f6d253246696464616e25324672656163742d73707265616473686565742e7376673f747970653d6c61726765" alt="FOSSA Status"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/iddan/react-spreadsheet"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#8-nanobundle"&gt;
  &lt;/a&gt;
  8. nanobundle
&lt;/h3&gt;

&lt;p&gt;Yet another bundler for tiny modules, powered by esbuild&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cometkim"&gt;
        cometkim
      &lt;/a&gt; / &lt;a href="https://github.com/cometkim/nanobundle"&gt;
        nanobundle
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Yet another bundler for tiny modules, powered by esbuild
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
nanobundle&lt;/h1&gt;
&lt;p&gt;Yet another bundler for tiny modules, powered by &lt;a href="https://esbuild.github.io/" rel="nofollow"&gt;esbuild&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/developit/microbundle"&gt;microbundle&lt;/a&gt; for saving my days, but we can save even more days with &lt;a href="https://esbuild.github.io/" rel="nofollow"&gt;esbuild&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;
Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Support for ESM and CommonJS&lt;/li&gt;
&lt;li&gt;Find and optimize the esbuild options for you&lt;/li&gt;
&lt;li&gt;Only configuration you need is &lt;code&gt;package.json&lt;/code&gt; (and optionally &lt;code&gt;tsconfig.json&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install by running &lt;code&gt;yarn add -D nanobundle&lt;/code&gt; or &lt;code&gt;npm i -D nanobundle&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setup your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight highlight-source-js position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-kos"&gt;{&lt;/span&gt;
  &lt;span class="pl-s"&gt;"name"&lt;/span&gt;: &lt;span class="pl-s"&gt;"your-package-name"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;
  &lt;span class="pl-s"&gt;"source"&lt;/span&gt;: &lt;span class="pl-s"&gt;"./src/foo.ts"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;        &lt;span class="pl-c"&gt;// required, the entry source file&lt;/span&gt;

  &lt;span class="pl-s"&gt;"module"&lt;/span&gt;: &lt;span class="pl-s"&gt;"./dist/foo.mjs"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;    &lt;span class="pl-c"&gt;// where to generate the ESM bundle&lt;/span&gt;
  &lt;span class="pl-s"&gt;"main"&lt;/span&gt;: &lt;span class="pl-s"&gt;"./dist/foo.cjs"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;      &lt;span class="pl-c"&gt;// where to generate the main entry (CommonJS by default, or ESM if `"type": "module"` and not `*.cjs`)&lt;/span&gt;

  &lt;span class="pl-s"&gt;"imports"&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;                   &lt;span class="pl-c"&gt;// import maps for modules/paths alias&lt;/span&gt;
    &lt;span class="pl-c"&gt;// ...&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;

  &lt;span class="pl-s"&gt;"exports"&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;                   &lt;span class="pl-c"&gt;// export maps for multiple/conditional entries&lt;/span&gt;
    &lt;span class="pl-c"&gt;// ...&lt;/span&gt;
  &lt;span class="pl-kos"&gt;}&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;

  &lt;span class="pl-s"&gt;"scripts"&lt;/span&gt;: &lt;span class="pl-kos"&gt;{&lt;/span&gt;
    &lt;span class="pl-s"&gt;"build"&lt;/span&gt;: &lt;span class="pl-s"&gt;"nanobundle build"&lt;/span&gt;&lt;span class="pl-kos"&gt;,&lt;/span&gt;&lt;/pre&gt;…
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/cometkim/nanobundle"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#9-react-js-landing-page-template"&gt;
  &lt;/a&gt;
  9. React JS Landing Page Template
&lt;/h3&gt;

&lt;p&gt;A simple react one page landing page templates for startups/companies. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/issaafalkattan"&gt;
        issaafalkattan
      &lt;/a&gt; / &lt;a href="https://github.com/issaafalkattan/React-Landing-Page-Template"&gt;
        React-Landing-Page-Template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A simple react one page landing page templates for startups/companies
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
React JS Landing Page Template&lt;/h1&gt;
&lt;h3&gt;
&lt;a href="https://react-landing-page-template.herokuapp.com" rel="nofollow"&gt;LIVE DEMO&lt;/a&gt;
&lt;/h3&gt;
&lt;h2&gt;
Description&lt;/h2&gt;
&lt;p&gt;This is a ReactJS based landing page template, fit for a startup company/service with a one page view. The design is inspired by a template from &lt;a href="https://www.free-css.com/assets/files/free-css-templates/preview/page234/interact/" rel="nofollow"&gt;Free-CSS.com &lt;/a&gt;
All 'visual' data can be easily modified by changing the data.json file.&lt;/p&gt;
&lt;h2&gt;
Make it Yours!&lt;/h2&gt;
&lt;h3&gt;
1. Preps&lt;/h3&gt;
&lt;p&gt;You will need to have &lt;a href="https://nodejs.org/" rel="nofollow"&gt;Node JS&lt;/a&gt; installed on your pc.&lt;/p&gt;
&lt;h3&gt;
2. Clone Files&lt;/h3&gt;
&lt;p&gt;After cloning the files, you will have to run &lt;code&gt;yarn&lt;/code&gt; followed by &lt;code&gt;yarn start&lt;/code&gt; in the CLI&lt;/p&gt;
&lt;h3&gt;
3. Add your own data&lt;/h3&gt;
&lt;p&gt;Change the data in the &lt;code&gt;data.json&lt;/code&gt; file as well as add any images to &lt;code&gt;public/img/&lt;/code&gt;
You can also change styles by modifying the &lt;code&gt;public/css&lt;/code&gt; files.&lt;/p&gt;
&lt;h2&gt;
Credits&lt;/h2&gt;
&lt;h5&gt;
Free CSS&lt;/h5&gt;
&lt;p&gt;&lt;a href="https://www.free-css.com/assets/files/free-css-templates/preview/page234/interact/" rel="nofollow"&gt;Free-CSS.com &lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;
Issaaf kattan&lt;/h5&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/issaafalkattan/React-Landing-Page-Template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;





&lt;h3&gt;
  &lt;a href="#10-live-query"&gt;
  &lt;/a&gt;
  10. Live Query
&lt;/h3&gt;

&lt;p&gt;Realtime GraphQL Live Queries with JavaScript&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/n1ru4l"&gt;
        n1ru4l
      &lt;/a&gt; / &lt;a href="https://github.com/n1ru4l/graphql-live-query"&gt;
        graphql-live-query
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Realtime GraphQL Live Queries with JavaScript
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://github.com/n1ru4l/graphql-live-queryassets/logo.svg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mgE0XR6T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/n1ru4l/graphql-live-queryassets/logo.svg" width="250" alt="GraphQL Live Query"&gt;&lt;/a&gt;
   &lt;br&gt;
  &lt;/p&gt;
&lt;p&gt;
  Real-Time with any schema or transport
  &lt;/p&gt;
  &lt;p&gt;
    &lt;a href="https://the-guild.dev/blog/subscriptions-and-live-queries-real-time-with-graphql" rel="nofollow"&gt;Why Live Queries?&lt;/a&gt;
    - &lt;a href="https://dev.to/n1ru4l/graphql-live-queries-with-socket-io-4mh6" rel="nofollow"&gt;Read the introduction Post&lt;/a&gt;
    - &lt;a href="https://dev.to/n1ru4l/collecting-graphql-live-query-resource-identifier-with-graphql-tools-5fm5" rel="nofollow"&gt;Learn how Live Query Tracking works&lt;/a&gt;
  &lt;/p&gt;
  &lt;br&gt;
  &lt;br&gt;
&lt;h2&gt;
Packages in this Repository&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Package&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Stats&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/n1ru4l/graphql-live-querypackages/in-memory-live-query-store"&gt;&lt;code&gt;@n1ru4l/in-memory-live-query-store&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Live query implementation.&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.npmjs.com/package/@n1ru4l/in-memory-live-query-store" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e885ba2f64c16dbed91e295c93b4494368fc1103b1d5918b4f7b8e189c4c3b35/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f406e317275346c2f696e2d6d656d6f72792d6c6976652d71756572792d73746f72652e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@n1ru4l/in-memory-live-query-store" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e118ba545cab37819d3d132cd65eb6d1e79ad2c4c4d09883dd36cf01eac6223e/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f406e317275346c2f696e2d6d656d6f72792d6c6976652d71756572792d73746f72652e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/n1ru4l/graphql-live-querypackages/graphql-live-query"&gt;&lt;code&gt;@n1ru4l/graphql-live-query&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Utilities for live query implementations.&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.npmjs.com/package/@n1ru4l/graphql-live-query" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/eabed6cd926bcde6e92e01407e0997d51ab5d53d21e87c543d052ebf285c42c0/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f406e317275346c2f6772617068716c2d6c6976652d71756572792e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@n1ru4l/graphql-live-query" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/318a0663ee8a5a87814c66118d098a54ef7c4cc47cee4f6d12fbeef577342c48/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f406e317275346c2f6772617068716c2d6c6976652d71756572792e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/n1ru4l/graphql-live-querypackages/graphql-live-query-patch-json-patch"&gt;&lt;code&gt;@n1ru4l/graphql-live-query-patch-json-patch&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Reduce live query payload size with JSON patches&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.npmjs.com/package/@n1ru4l/graphql-live-query-patch-json-patch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/f33e4d37730acb567f6ca6894daaab064d0d6059c44c2dfa260523af5f704d64/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f406e317275346c2f6772617068716c2d6c6976652d71756572792d70617463682d6a736f6e2d70617463682e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@n1ru4l/graphql-live-query-patch-json-patch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/987104c2ecb08b61b70b07eba111620508c6dc53f1f5384536af16384db2b996/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f406e317275346c2f6772617068716c2d6c6976652d71756572792d70617463682d6a736f6e2d70617463682e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/n1ru4l/graphql-live-querypackages/graphql-live-query-patch-jsondiffpatch"&gt;&lt;code&gt;@n1ru4l/graphql-live-query-patch-jsondiffpatch&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Reduce live query payload size with &lt;a href="https://github.com/n1ru4l/graphql-live-query/blob/main/packages/json-patch-plus"&gt;&lt;code&gt;@n1ru4l/json-patch-plus&lt;/code&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.npmjs.com/package/@n1ru4l/graphql-live-query-patch-jsondiffpatch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/705aa3bc956feba74ab7e84f6e751a6ffd376ed7520fc9dbc78070d7fafedfcd/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f406e317275346c2f6772617068716c2d6c6976652d71756572792d70617463682d6a736f6e6469666670617463682e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@n1ru4l/graphql-live-query-patch-jsondiffpatch" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/38949fd8ea1f03c6fc2502ae624c92390b48aac41b9b979689cdce05803e3c16/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f406e317275346c2f6772617068716c2d6c6976652d71756572792d70617463682d6a736f6e6469666670617463682e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/n1ru4l/graphql-live-querypackages/socket-io-graphql-server"&gt;&lt;code&gt;@n1ru4l/socket-io-graphql-server&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GraphQL over Socket.io - Server Middleware&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.npmjs.com/package/@n1ru4l/socket-io-graphql-server" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/c24e34d76ba14f85133a9b24bd027d34101285854b434f598e27da46cf90b0e4/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f406e317275346c2f736f636b65742d696f2d6772617068716c2d7365727665722e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@n1ru4l/socket-io-graphql-server" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/65e2bb1822e7f5b81e71b9bfe34fe2bf04d5451123c3cf09c9139c0fefb11373/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f406e317275346c2f736f636b65742d696f2d6772617068716c2d7365727665722e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/n1ru4l/graphql-live-querypackages/socket-io-graphql-client"&gt;&lt;code&gt;@n1ru4l/socket-io-graphql-client&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;GraphQL over Socket.io - Client&lt;/td&gt;
&lt;td&gt;
&lt;a href="https://www.npmjs.com/package/@n1ru4l/socket-io-graphql-client" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fe8b6fbbd58aa6e56d33a9ebd6ce424060e8d9f75e31294833ddf9b0b4a3f4a9/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f762f406e317275346c2f736f636b65742d696f2d6772617068716c2d636c69656e742e737667" alt="npm version"&gt;&lt;/a&gt; &lt;a href="https://www.npmjs.com/package/@n1ru4l/socket-io-graphql-client" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a8c29e799c0b1e9cf8bdab5a9e77ade392f0b6a36994bbc55ddae1e887295c94/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f646d2f406e317275346c2f736f636b65742d696f2d6772617068716c2d636c69656e742e737667" alt="npm downloads"&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://github.com/n1ru4l/graphql-live-querypackages/todo-example"&gt;&lt;code&gt;todo-example-app&lt;/code&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Todo App with state sync across clients.&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
Motivation&lt;/h2&gt;
&lt;p&gt;There is no mature live query implementation that is not tied to any specific database or SaaS product. This implementation should serve as an example for showcasing how live queries can be added to any GraphQL.js schema with (almost) any GraphQL transport.&lt;/p&gt;
&lt;p&gt;GraphQL already has a solution for real-time: Subscriptions. Those are the right tool for responding to events. E.g. triggering a sound or showing a toast message because someone poked you…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/n1ru4l/graphql-live-query"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#stargazing"&gt;
  &lt;/a&gt;
  Stargazing 📈
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/trimstray/the-book-of-secret-knowledge"&gt;The Book of secret knowledge&lt;/a&gt; +1,464 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/Kristories/awesome-guidelines"&gt;Awesome Guidelines&lt;/a&gt; +765 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +731 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +689 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/sdmg15/Best-websites-a-programmer-should-visit"&gt;Best websites a programmer should visit&lt;/a&gt; +676 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-7-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=weeklyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 7 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/slipHQ/run-wasm"&gt;Run WASM&lt;/a&gt; +250%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/estruyf/vscode-front-matter"&gt;Front Matter&lt;/a&gt; +63%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/reacttips-dev/codebases"&gt;Codebases&lt;/a&gt; +41%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/NitzanHen/agrippa"&gt;Agrippa&lt;/a&gt; +21%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/virtualvivek/react-windows-ui"&gt;React Windows UI&lt;/a&gt; +20%&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-risers-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChange&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top risers over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/public-apis/public-apis"&gt;Public APIs&lt;/a&gt; +6,466 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/EbookFoundation/free-programming-books"&gt;Free Programming Books&lt;/a&gt; +5,110 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/microsoft/ML-For-Beginners"&gt;ML for beginners&lt;/a&gt; +4,940 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/30-seconds/30-seconds-of-code"&gt;30 Seconds of code&lt;/a&gt; +3,971 stars&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/freeCodeCamp/freeCodeCamp"&gt;Free Code Camp&lt;/a&gt; +3,405 stars&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#top-growth-over-last-30-days"&gt;
  &lt;/a&gt;
  &lt;a href="https://stargazing.dev/?owner=&amp;amp;order=monthlyStarChangePercent&amp;amp;minimumStars=0&amp;amp;search=&amp;amp;reverseOrder=false&amp;amp;moreFilters=false"&gt;Top growth(%) over last 30 days&lt;/a&gt;🔗
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;a href="https://github.com/Saul-Mirone/milkdown"&gt;Milkdown&lt;/a&gt; +136%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/lahmatiy/react-render-tracker"&gt;React Render Tracker&lt;/a&gt; +133%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/zenclabs/viteshot"&gt;Viteshot&lt;/a&gt; +81%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/handsontable/hyperformula"&gt;HyperFormula&lt;/a&gt; +46%&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/authelia/authelia"&gt;Authelia&lt;/a&gt; +44%&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For all for the latest rankings please checkout &lt;a href="https://stargazing.dev"&gt;Stargazing.dev&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Trending Projects is available as a weekly newsletter please sign up at &lt;a href="https://stargazing.dev/"&gt;Stargazing.dev&lt;/a&gt; to ensure you never miss an issue.&lt;/p&gt;

&lt;p&gt;If you enjoyed this article you can &lt;a href="https://twitter.com/stargazing_dev"&gt;follow me&lt;/a&gt; on Twitter where I regularly post about HTML, CSS and JavaScript.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Jaeger vs Elastic APM - key differences, features and alternatives</title>
      <author>Ankit Anand ✨</author>
      <pubDate>Fri, 01 Oct 2021 13:03:36 +0000</pubDate>
      <link>https://dev.to/signoz/jaeger-vs-elastic-apm-key-differences-features-and-alternatives-146b</link>
      <guid>https://dev.to/signoz/jaeger-vs-elastic-apm-key-differences-features-and-alternatives-146b</guid>
      <description>&lt;p&gt;Jaeger is an open-source end-to-end distributed tracing tool for microservices architecture. On the other hand, Elastic APM is an application performance monitoring system that is built on top of the ELK Stack (Elasticsearch, Logstash, Kibana, Beats). In this article, let's explore their key features, differences, and alternatives.&lt;/p&gt;

&lt;p&gt;Application performance monitoring is the process of keeping your app's health in check. APM tools enable you to be proactive about meeting the demands of your customers. There are many components to a good APM tool like metrics monitoring, distributed tracing, log management, alert systems, etc.&lt;/p&gt;

&lt;p&gt;Jaeger and Elastic APM are both popular tools in the domain of application performance monitoring. But both have different scope and use-cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-jaeger"&gt;
  &lt;/a&gt;
  Key Features of Jaeger
&lt;/h2&gt;

&lt;p&gt;Jaeger was originally built by teams at Uber and then open-sourced. It is used for end-to-end distributed tracing for microservices. Some of the key features of Jaeger includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed context propagation&lt;/strong&gt;&lt;br&gt;
One of the challenges of distributed systems is to have a standard format for passing context across process boundaries and services. Jaeger provides client libraries that support code instrumentation in multiple languages to propagate context across services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed transaction monitoring&lt;/strong&gt;&lt;br&gt;
Jaeger comes with a web UI written in Javascript. The dashboard can be used to see traces and spans across services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Root Cause Analysis&lt;/strong&gt;&lt;br&gt;
Using traces you can drill down to services causing latency in particular user request.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Server dependency analysis&lt;/strong&gt;&lt;br&gt;
Using Jaeger's web UI, you can see how requests flow through different services and different servers interact while serving user requests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance/latency optimization&lt;/strong&gt;&lt;br&gt;
Once you have identified, which service or query is creating latency, you can use the information to optimize it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PBiBbLYG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/08/jaeger_ui-min.png" alt="Jaeger UI"&gt;&lt;/a&gt;Jaeger UI showing services and corresponding traces&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#key-features-of-elastic-apm"&gt;
  &lt;/a&gt;
  Key features of Elastic APM
&lt;/h2&gt;

&lt;p&gt;Elastic APM consists of four components: APM agents, APM Server, Elasticsearch, and Kibana. Some of you might be familiar with the popular ELK stack which comprises of Elasticsearch, Logstash and Kibana. The ELK stack is used for collecting and analyzing logs. Elastic APM is an effort by &lt;a href="https://www.elastic.co/"&gt;Elastic&lt;/a&gt; to venture into the field of application performance monitoring.&lt;/p&gt;

&lt;p&gt;The four major components of elastic APM has the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Elasticsearch - For data storage and indexing&lt;/li&gt;
&lt;li&gt;Kibana - For analyzing and visualizing the data&lt;/li&gt;
&lt;li&gt;APM agents - Collects the data to send to the APM server&lt;/li&gt;
&lt;li&gt;APM server - Receives data from APM agents and process it for storing in Elasticsearch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E1BDTY-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/elastic_apm_architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E1BDTY-r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/elastic_apm_architecture.png" alt="Elastic APM architecture"&gt;&lt;/a&gt;Elastic APM architecture&lt;/p&gt;

&lt;p&gt;Some of the key features of Elastic APM includes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Root Cause investigations&lt;/strong&gt;&lt;br&gt;
Elastic APM provides a dashboard for showing a service's transactions and dependencies which can be used to identify issues.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Service Maps&lt;/strong&gt;&lt;br&gt;
With service maps, you can see how your services are connected to each other. It provides a convenient way to see which services need optimization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Distributed Tracing&lt;/strong&gt;&lt;br&gt;
Distributed tracing provides an overview of how user requests are performing across services.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Anamoly Detection with machine learning&lt;/strong&gt;&lt;br&gt;
Elastic APM provides machine learning capabilities to find anomalies that suggest abnormal behavior in your application performance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Alerting features&lt;/strong&gt;&lt;br&gt;
Elastic APM provides capabilities to set threshold based alerts through popular channels like Slack, PagerDuty, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Multi-language support&lt;/strong&gt;&lt;br&gt;
Elastic APM provides support for Java, Go, Node.js, Python, PHP, Ruby, .NET and Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#comparing-jaeger-and-elastic-apm"&gt;
  &lt;/a&gt;
  Comparing Jaeger and Elastic APM
&lt;/h2&gt;

&lt;p&gt;From the description above, you might have a good idea about the differences between Jaeger and Elastic APM. The major difference between the two is that Jaeger is specifically meant for distributed tracing, whereas Elastic APM is a full-fledged application performance monitoring tool.&lt;/p&gt;

&lt;p&gt;Summarizing the key differences between Jaeger and Elastic APM:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jaeger is an open-source distributed tracing tool meant for microservices. Elastic APM is an APM tool that provides metrics and log monitoring along with distributed tracing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jaeger's instrumentation libraries are based on OpenTracing APIs, which is an open-source standard for providing vendor-neutral instrumentation libraries. OpenTracing based telemetry data is supported by multiple APM vendors. If you decide to use Elastic APM, your telemetry data can only be used by Elastic APM.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Jaeger is a good tool when it comes to distributed tracing. But only traces is not enough for equipping your engineering teams to solve issues in production. And that's why Jaeger is limited. On the other hand, with Elastic APM, there is a risk of having your data locked in.&lt;/p&gt;

&lt;p&gt;The collection and management of telemetry data are critical to setting up a robust monitoring and observability framework. If you want to have a scalable distributed system, it becomes critical to have a standard format for collecting and managing telemetry data.&lt;/p&gt;

&lt;p&gt;Open-source standards like &lt;a href="https://opentelemetry.io/"&gt;OpenTelemetry&lt;/a&gt; aims to standardize the management of telemetry data. As a project under CNCF, it has got wide community support and is also backed by major cloud vendors like Microsoft and Google.&lt;/p&gt;

&lt;p&gt;So is there a tool that can provide you extensive APM capabilities along with the freedom that comes with open-source standards?&lt;/p&gt;

&lt;p&gt;That's where &lt;a href="https://signoz.io/"&gt;SigNoz&lt;/a&gt; comes into the picture.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternative-to-elastic-apm-and-jaeger-signoz"&gt;
  &lt;/a&gt;
  Alternative to Elastic APM and Jaeger - SigNoz
&lt;/h2&gt;

&lt;p&gt;SigNoz is a full-stack open-source application performance monitoring and observability tool which can be used in place of Elastic APM and Jaeger. It provides advanced distributed tracing capabilities along with metrics under a single dashboard.&lt;/p&gt;

&lt;p&gt;SigNoz is built to support OpenTelemetry natively. &lt;a href="https://opentelemetry.io/" rel="noopener noreferrer nofollow"&gt;&lt;b&gt;OpenTelemetry&lt;/b&gt;&lt;/a&gt;  is becoming the world standard for generating and managing telemetry data (Logs, metrics, and traces). It also provides users flexibility in terms of storage. You can choose between ClickHouse or Kafka + Druid as your backend storage while installing SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6BdjoEB_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/2021/09/SigNoz_architecture_clickhouse.png" alt="Architecture of SigNoz with OpenTelemetry and ClickHouse"&gt;&lt;/a&gt;Architecture of SigNoz with ClickHouse as storage backend and OpenTelemetry for code instrumentatiion&lt;/p&gt;

&lt;p&gt;SigNoz comes with out of box visualization of things like RED metrics.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OKFqZ_PP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_charts_application_metrics.png" alt="SigNoz UI showing the popular RED metrics"&gt;&lt;/a&gt;SigNoz UI showing application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/p&gt;

&lt;p&gt;You can also use flamegraphs to visualize spans from your trace data. All of this comes out of the box with SigNoz.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FOoIlefK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https:/signoz.io/img/blog/common/signoz_flamegraphs.png" alt="Flamegraphs used to visualize spans of distributed tracing in SigNoz UI"&gt;&lt;/a&gt;Flamegraphs showing exact duration taken by each spans - a concept of distributed tracing&lt;/p&gt;

&lt;p&gt;Some of the things SigNoz can help you track:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application overview metrics like RPS, 50th/90th/99th Percentile latencies, and Error Rate&lt;/li&gt;
&lt;li&gt;Slowest endpoints in your application&lt;/li&gt;
&lt;li&gt;See exact request trace to figure out issues in downstream services, slow DB queries, call to 3rd party services like payment gateways, etc&lt;/li&gt;
&lt;li&gt;Filter traces by service name, operation, latency, error, tags/annotations.&lt;/li&gt;
&lt;li&gt;Run aggregates on trace data&lt;/li&gt;
&lt;li&gt;Unified UI for both metrics and traces&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can check out SigNoz's GitHub repo here 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bit.ly/2WkkmL4"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--od2lB_mG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8yroh39ngk6sz6tv3z9y.png" alt="SigNoz GitHub repo"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>elastic</category>
      <category>jaeger</category>
      <category>monitoring</category>
    </item>
    <item>
      <title>Passing Data with React Router using Link</title>
      <author>Med Amine Fh</author>
      <pubDate>Fri, 01 Oct 2021 12:50:52 +0000</pubDate>
      <link>https://dev.to/medaminefh/passing-data-with-react-router-using-link-1h39</link>
      <guid>https://dev.to/medaminefh/passing-data-with-react-router-using-link-1h39</guid>
      <description>&lt;p&gt;If you've used &lt;strong&gt;React Router&lt;/strong&gt; on many projects, definitely you've asked &lt;strong&gt;How i can pass some data or state to other components through a link tag?&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So 1st of all we'll discuss how we can pass data between components in React.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-passing-props"&gt;
  &lt;/a&gt;
  1. Passing props
&lt;/h3&gt;

&lt;p&gt;The 1st one is by passing some props from the parent component to the children components&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WyGtq1nh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/396agklpv95vwyjdkssv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WyGtq1nh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/396agklpv95vwyjdkssv.png" alt="carbon (4)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0yeEzPlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ngo93uqady6u4h0wrv2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0yeEzPlx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8ngo93uqady6u4h0wrv2.png" alt="carbon (3)"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-global-state"&gt;
  &lt;/a&gt;
  2. Global State
&lt;/h3&gt;

&lt;p&gt;2nd one is by making a &lt;strong&gt;Global State&lt;/strong&gt; and make some data accessible by many components.&lt;/p&gt;

&lt;p&gt;You can manage Global State using two main paths:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://redux.js.org"&gt;Redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/context.html"&gt;React context&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#3-using-react-routers-link"&gt;
  &lt;/a&gt;
  3. Using React Router's Link
&lt;/h3&gt;

&lt;p&gt;3rd one is basically when you click on a link(to component), you passing data with that.&lt;/p&gt;

&lt;p&gt;Below we Have a simple React App with some routes&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fF1RA600--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/180gizgnhw3vnvfjw5ti.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fF1RA600--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/180gizgnhw3vnvfjw5ti.png" alt="App"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We Have two routes Here the "&lt;code&gt;/&lt;/code&gt;"(Home) Route and the "&lt;code&gt;/profile&lt;/code&gt;"(Profile) route.&lt;/p&gt;

&lt;p&gt;So the 1st page we'll see if we run &lt;code&gt;yarn start&lt;/code&gt; is the &lt;strong&gt;Home&lt;/strong&gt; Page&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPaiy7N---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ljyvxzhlppovzmbx5mq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPaiy7N---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5ljyvxzhlppovzmbx5mq.png" alt="Home"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xu4UrmOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6zdcjm60ay743rzq24o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xu4UrmOa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c6zdcjm60ay743rzq24o.png" alt="Screenshot from 2021-10-01 13-11-24"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if we go to the &lt;strong&gt;/profile&lt;/strong&gt; route &lt;br&gt;
we'll see the &lt;strong&gt;Profile&lt;/strong&gt; component  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Cnk1E6ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q14kjti8gkvgdbd4jau.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Cnk1E6ON--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0q14kjti8gkvgdbd4jau.png" alt="Profile"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EHUqLXHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bsstxnvrw0ehv6ipthe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EHUqLXHE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7bsstxnvrw0ehv6ipthe.png" alt="Screenshot from 2021-10-01 13-12-15"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;So as you can see we're using the &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; instead of the regular &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag to prevent the refresh of the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#so-how-we-can-send-data-for-exemple-to-the-profile-component-from-the-home-component-"&gt;
  &lt;/a&gt;
  So how we can send data for exemple to the &lt;strong&gt;Profile&lt;/strong&gt; component from the &lt;strong&gt;Home&lt;/strong&gt; component ?
&lt;/h3&gt;

&lt;p&gt;So the cool thing is we can pass an Object to the &lt;strong&gt;to&lt;/strong&gt; property in the &lt;strong&gt;&lt;/strong&gt; and that object must contains a &lt;code&gt;pathname&lt;/code&gt; and optionally a &lt;code&gt;state&lt;/code&gt;, and we can pass the data through that state&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wrGtLzVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n85dxg1uafrgxi4y04cs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wrGtLzVb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n85dxg1uafrgxi4y04cs.png" alt="Screenshot from 2021-10-01 13-41-45"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and we can access that state in the &lt;strong&gt;Profile&lt;/strong&gt; component in the &lt;code&gt;props.location.state&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fgwE-vzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9vc6730qsm35blkqxrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fgwE-vzc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x9vc6730qsm35blkqxrq.png" alt="Screenshot from 2021-10-01 13-45-07"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7t3EKPH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y9dfy4r4fhqva0i9vhi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7t3EKPH1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7y9dfy4r4fhqva0i9vhi.png" alt="Screenshot from 2021-10-01 13-46-47"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for more Info check this &lt;a href="https://reactrouter.com/web/api/Link"&gt;React Router Link&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>7 Common Mistakes Game Developers Make</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Fri, 01 Oct 2021 12:24:09 +0000</pubDate>
      <link>https://dev.to/unitybuddy/7-common-mistakes-game-developers-make-1po8</link>
      <guid>https://dev.to/unitybuddy/7-common-mistakes-game-developers-make-1po8</guid>
      <description>&lt;p&gt;Hello, buddies! First of all, I would like to say "Thanks" for the Games that I played. Sounds like a joke, I know. To be honest, games are the main reason for me to becoming a Game developer and get into the strange world of programmers. &lt;/p&gt;

&lt;p&gt;Anyway, back to the topic.&lt;/p&gt;

&lt;p&gt;After finishing my first ever game, I joined so many game dev teams (not for money) and worked with different kinds of people. Of course, I left some teams. When working with different game developers, I saw a huge number of mistakes they make when developing a game, mostly their first game. So, I think it would be great to document and sharing it here. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-not-starting-or-finishing"&gt;
  &lt;/a&gt;
  1. Not starting (or finishing)
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QTdBMJ-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626867649040/RuJfV6OWE.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QTdBMJ-M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626867649040/RuJfV6OWE.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
There is no greater mistake a game developer can make than not starting. Right next to that is starting a game and not finishing it. .&lt;/p&gt;

&lt;p&gt;Game development is a serious undertaking. You’ll make mistakes, you’ll hit bumps in the road, and you’ll want to take breaks. This is completely normal, and pretty much all game developers experience the same frustrations as you might at some points. But never starting your project, or never finishing it? &lt;/p&gt;

&lt;p&gt;I joined with a very small team with 3 members, and they were making a really good game. We were doing great for 3 or 4 days, but the man who called &lt;em&gt;Leader&lt;/em&gt; messes up his real life and the game. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O7oyB32V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626864414662/BP8FQTe5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7oyB32V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626864414662/BP8FQTe5b.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, a weekend is a okay. But to be honest, he never returned to &lt;em&gt;that&lt;/em&gt; game. 😒 &lt;/p&gt;

&lt;p&gt;There is a number of people who start to develop a game and when it becomes hard, they miss that and get into another project. &lt;/p&gt;

&lt;p&gt;So, when you got an idea for a game, just start it. No need to add new and new features before beginning, start small. It would be great!&lt;/p&gt;

&lt;p&gt;When you started your game, don't let obstacles stop you. Your life is also a Game. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-not-knowing-what-to-focus-on"&gt;
  &lt;/a&gt;
  2. Not Knowing What To Focus On
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k_20GJVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626867775100/6uOsizmZG.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k_20GJVr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626867775100/6uOsizmZG.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Games are developed by creative people with a passion for the art form. And it is often this passion that drives developers to try and cram in as many innovative features as possible.&lt;/p&gt;

&lt;p&gt;During the design phase, you’ll end up with plenty of crazy ideas and concepts that on paper sound great. Some of these ideas are genuinely good for the gameplay experience and should be implemented.&lt;/p&gt;

&lt;p&gt;But a lot of the other stuff is just filler or simply impractical. Because you find something personally appealing, you might try to implement it within the game. This will further be helped by the fact that you’ve been playing your own game since day 1 of development.&lt;/p&gt;

&lt;p&gt;But you also need to think about it from the player’s perspective, one who picks up the game for the first time. Instead of needlessly cluttering the development process and wasting valuable resources, focus on the core of your game. What truly makes it enjoyable, not money. Talk to others in the development team, maybe show a prototype of the ideas to potential players via social media. And consider their feedback, because your personal judgment might be clouded by your love for your creation!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-blatantly-copying-ideas-from-others"&gt;
  &lt;/a&gt;
  3. Blatantly Copying Ideas From Others
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tjZAFCmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626867864726/K6p1vVb2V.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tjZAFCmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626867864726/K6p1vVb2V.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Here’s the deal with the gaming industry- one guy comes up with a brilliant idea that is both innovative and marketable, his game turns into a smash hit. Within months, the market is flooded with rip-offs and clones that use generic assets purchased from online stores.&lt;/p&gt;

&lt;p&gt;No quality control, creativity, or elaborate plan. Just lazy devs trying to make a quick buck off other people’s work. This should not be mistaken with two games sharing the same genre and having similar features, like Fortnite vs PUBG. When asking about the Game before joining the game, they just say &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Have you played Reigns? Our game is the same as that with some improved UI and other stuff..&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They are developing just an updated version of Reigns, then? Never copy the ideas of others. Think creatively and make something new. Just go to Playstore/Appstore and just search 'Among Us'&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VawYalye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626865173260/x_elYwp_0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VawYalye--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626865173260/x_elYwp_0.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;More than 100 games&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is totally okay to get an idea from another game and improve the &lt;em&gt;idea.&lt;/em&gt; Don't just make the updated version of existing games.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-trying-to-create-everything-perfect"&gt;
  &lt;/a&gt;
  4. Trying To Create everything Perfect
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt7kslNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626868239947/4xZFVDEM0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pt7kslNk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626868239947/4xZFVDEM0.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Thomas Edison once said &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have not failed. I’ve just found 10,000 ways that won’t work. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Failure&lt;/em&gt; is not something to be ashamed of, rather an experience to be learned from during the path to success. The greatest games of today were born as weird ideas, that nobody in their right mind would’ve taken seriously before seeing the finished product.&lt;/p&gt;

&lt;p&gt;Halo at its core is a game about genetically modified super soldiers fighting invasive space aliens. Mario is an Italian plumber who eats shrooms and jumps around while collecting coins. The developers for these games didn’t create a coherent, perfect product right from the start.&lt;/p&gt;

&lt;p&gt;They had a concept, tested it out, bounced ideas between team members, and crawled towards success one step at a time. Failing many times along the way. &lt;/p&gt;

&lt;p&gt;A lot of the game developers spend too much time debating if an idea is perfect, and only once they’ve found the perfect idea will they start working on it. But you spend so much time coming up with your version of a “perfect concept” which in the end is just as flawed as any of the other ideas. We are human after all, and making mistakes is part of our nature.&lt;/p&gt;

&lt;p&gt;The best games aren’t perfect, they have flaws. Sometimes flaws create a character and make the game even more enjoyable. Nobody wants a perfect character or weapon; they want to see weaknesses. Weaknesses and challenges are what make the journey exciting, like in every anime ever where the main character is really flawed at the start and becomes super strong by the end.&lt;/p&gt;

&lt;p&gt;Okay, maybe that’s not the best analogy, but you get the point. Don’t be afraid to fail, and always keep iterating upon your ideas. The whole process is about getting closer to perfection with each consecutive step, you don’t start with perfection.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-having-unrealistic-expectations"&gt;
  &lt;/a&gt;
  5.  Having unrealistic expectations
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CJlo63rw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626868392417/L8k31ET7k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CJlo63rw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626868392417/L8k31ET7k.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
Unrealistic expectations are very dangerous because they set your game development career up for failure. Do not put your expectations so high that you force some things to work your way.&lt;/p&gt;

&lt;p&gt;For example, dreaming too big can make you include too many rewards/achievements in your game. As much as rewards are pivotal for improving engagement and keeping users motivated, gamers will not take you seriously if you incorporate rewards in every little achievement they make.&lt;/p&gt;

&lt;p&gt;Instead, you should select specific rewards for specific checkpoints; this way, the players will feel that they’ve made major milestones. Just make a document with simple achievements. As an example, make an achievement as "Greedy" when player got a good amount of coins. Just don't make everything as a checkpoint.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-attempting-to-make-a-big-game"&gt;
  &lt;/a&gt;
  6. Attempting to Make a Big Game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--V7SgVJkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626868537746/aejxQ5SK7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V7SgVJkS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626868537746/aejxQ5SK7.png" alt="image.png"&gt;&lt;/a&gt;&lt;br&gt;
When you are making your first game, there will be an urge to go big. You remember all the epic games you love and decide to create one just like those.&lt;/p&gt;

&lt;p&gt;But soon after finishing development, you realize that the result is not satisfactory. Because the game you made is not even remotely as good as the games that have influenced it. This is because the experience is crucial in game development. Attempting a big game at the beginning is just like trying to lift huge weights before you can even lift small ones. You’ll end up disheartened.&lt;/p&gt;

&lt;p&gt;The key is to make smaller games when you are a beginner. Take your big idea and narrow it down in scope, keeping just a few of the most basic features. &lt;br&gt;
You can make the game bigger, once it becomes a success. You can add all the features you neglected at the beginning in these later stages.&lt;/p&gt;

&lt;p&gt;See Among Us. The programming and the other parts behind it are very very simple than a simple shooting game even. But the idea and the concept is the thing that made it a successful game. Small games also can change the gaming world.&lt;/p&gt;

&lt;p&gt;So buddies, that what I have to share at all. These are my experience with people so this may not helpful for everyone, but for someone 😊😊Also, remember that &lt;em&gt;I'm not an expert, I'm still learning.!&lt;/em&gt; Before you go, read &lt;a href="https://andrewbaisden.hashnode.dev/how-developers-can-learn-from-the-mistakes-of-cyberpunk-2077"&gt;this article&lt;/a&gt; by Andrew Baisden, where he shows you how to learn from the mistakes from Cyberpunk 2077. Happy coding!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://mr-unity-buddy.hashnode.dev/7-common-mistakes-game-developers-make"&gt;Originally&lt;/a&gt; published on Hashnode&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>programming</category>
      <category>productivity</category>
    </item>
    <item>
      <title>To Share Files between Windows-OS and Mac-OS (VirtualBox)</title>
      <author>AKINRO OLAWALE </author>
      <pubDate>Fri, 01 Oct 2021 12:18:38 +0000</pubDate>
      <link>https://dev.to/lexycodestudio/to-share-files-between-windows-os-and-mac-os-virtualbox-537i</link>
      <guid>https://dev.to/lexycodestudio/to-share-files-between-windows-os-and-mac-os-virtualbox-537i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#1-access-mac-files-on-windows"&gt;
  &lt;/a&gt;
  1 Access Mac Files on Windows
&lt;/h1&gt;

&lt;p&gt;Open File Explorer. In the address bar (that is 'This PC') at the top of the window, type \ followed by your Mac’s IP address (Found at System Preference &amp;gt; Sharing &amp;gt; File Sharing' tab) When you're done, it should look something like this: \192.168.1.68, then hit Enter button. &lt;/p&gt;

&lt;p&gt;A new window will pop up asking for a username and password. Enter the &lt;strong&gt;user credentials exactly as they appear on your Mac&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-checkmate"&gt;
  &lt;/a&gt;
  2 Checkmate!
&lt;/h2&gt;

&lt;p&gt;Now you will be viewing your shared Mac directory(files) within Windows File Explorer.&lt;/p&gt;

</description>
      <category>mac</category>
      <category>windows</category>
      <category>os</category>
      <category>virtualbox</category>
    </item>
    <item>
      <title>My First Post. 🚀</title>
      <author>Aditya Sharma</author>
      <pubDate>Fri, 01 Oct 2021 12:03:57 +0000</pubDate>
      <link>https://dev.to/aditya11017/my-first-post-i38</link>
      <guid>https://dev.to/aditya11017/my-first-post-i38</guid>
      <description>&lt;p&gt;My name is Aditya, this is my first post after joining DEV Community. Today I decided to try something new and hope to write some helpful articles in near future.&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>css</category>
      <category>linux</category>
    </item>
    <item>
      <title>VueJS - Drag 'n Drop</title>
      <author>Pablo Veiga</author>
      <pubDate>Fri, 01 Oct 2021 11:58:08 +0000</pubDate>
      <link>https://dev.to/vcpablo/vuejs-drag-n-drop-68k</link>
      <guid>https://dev.to/vcpablo/vuejs-drag-n-drop-68k</guid>
      <description>&lt;p&gt;For some time, it was necessary to write a lot of &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript"&gt;JavaScript&lt;/a&gt; code in order to implement the famous drag 'n drop feature in a web application.&lt;/p&gt;

&lt;p&gt;Fortunately, in &lt;a href="https://www.w3.org/TR/2008/WD-html5-20080122/"&gt;January of 2008&lt;/a&gt;, W3C released the fifth version of &lt;a href="https://html.spec.whatwg.org/multipage/"&gt;HTML&lt;/a&gt; which provides the scripting &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API"&gt;Drag and Drop API&lt;/a&gt; that can be used with JavaScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TL;DR
&lt;/h2&gt;

&lt;p&gt;In this article you're going to learn how to implement a few reusable components in order to add drag and drop capabilities to your next VueJS Project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The whole sample code available in this article is based on &lt;a href="https://v3.vuejs.org/"&gt;VueJS 3&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;p&gt;It's important to mention that you may find several third-party libraries that implement drag and drop features. That's fine and you will probably save time by using them.&lt;br&gt;
The goal here is just to practice a little bit of VueJS, see how HTML 5 Drag and Drop API works and also create your own reusable and lightweight components without the need of any external dependency.&lt;/p&gt;

&lt;p&gt;If you still don't know how to create a VueJS project from scratch, I recommend you to take a look at &lt;a href="https://dev.to/vcpablo/vuejs-one-more-way-of-structuring-your-project-13mj"&gt;this article&lt;/a&gt; through which I explain how I structure my own VueJS projects from scratch.&lt;/p&gt;

&lt;p&gt;Create a new VueJS Project and let's get hands dirty!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#droppable-item"&gt;
  &lt;/a&gt;
  Droppable Item
&lt;/h2&gt;

&lt;p&gt;We're going to start by creating a simple component that will allow other elements to be dragged into it.&lt;/p&gt;

&lt;p&gt;We're going to call it &lt;code&gt;DroppableItem&lt;/code&gt; and it will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dragover=&lt;/span&gt;&lt;span class="s"&gt;"handleOnDragOver"&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dragleave=&lt;/span&gt;&lt;span class="s"&gt;"onDragLeave"&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;drop=&lt;/span&gt;&lt;span class="s"&gt;"onDrop"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DroppableItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onDragOver&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onDragLeave&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;onDrop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleOnDragOver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onDragOver&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onDragOver&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleOnDragOver&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dive deeper into each part of this implementation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;template&lt;/code&gt; is very simple. It is made of a unique &lt;code&gt;span&lt;/code&gt; element with a &lt;code&gt;slot&lt;/code&gt; inside it.&lt;br&gt;
We're going to add some event listeners to this very root element, which are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@dragover&lt;/code&gt;: triggered when dragging an element over it;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@dragleave&lt;/code&gt;: triggered when dragging an element out of it; &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@drop&lt;/code&gt;: triggered when dropping an element into it;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Even though it's not a good practice, we're not defining the prop types in this example just to keep it simple.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Notice that we wrap the &lt;code&gt;onDragOver&lt;/code&gt; event within a &lt;code&gt;handleDragOver&lt;/code&gt; method. We do this to implement the &lt;code&gt;preventDefault()&lt;/code&gt; method and make the component capable of having something dragged over it.&lt;/p&gt;

&lt;p&gt;We are also making use of a &lt;a href="https://v3.vuejs.org/guide/component-slots.html"&gt;&lt;code&gt;slot&lt;/code&gt;&lt;/a&gt; to allow this component to receive HTML content and "assume the form" of any element that is put inside it.&lt;/p&gt;

&lt;p&gt;That's pretty much what's needed to create our &lt;code&gt;DropableItem&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#draggableitem"&gt;
  &lt;/a&gt;
  DraggableItem
&lt;/h2&gt;

&lt;p&gt;Now, let's create the component that will allow us to drag elements around the interface.&lt;br&gt;
This is how it will look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt;
    &lt;span class="na"&gt;draggable=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;dragstart=&lt;/span&gt;&lt;span class="s"&gt;"handleDragStart"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DraggableItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;transferData&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;handleDragStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataTransfer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transferData&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;handleDragStart&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dive deeper into this implementation. Starting with the &lt;code&gt;template&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;draggable&lt;/code&gt; - This attribute informs the browser that this is a draggable element.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initially, we need to set the &lt;code&gt;draggable&lt;/code&gt; attribute as &lt;code&gt;true&lt;/code&gt; to enable the Drag and Drop API for the &lt;code&gt;span&lt;/code&gt; element that is around our &lt;code&gt;slot&lt;/code&gt;. It's important to mention that, in this case, even though we're working with VueJS, we have to set the value "true" explicitly, otherwise it won't work as expected.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@dragstart&lt;/code&gt; - This is the default HTML event listened by VueJS. It is triggered when the user clicks, holds and drags the element.&lt;/p&gt;

&lt;p&gt;Now let's take a look at the component's &lt;code&gt;setup&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;We defined a method named &lt;code&gt;onDragStart&lt;/code&gt; that will be called when the user starts to drag the component.&lt;/p&gt;

&lt;p&gt;In this method, we pass the &lt;code&gt;transferData&lt;/code&gt; prop value to the &lt;code&gt;dataTransfer&lt;/code&gt; property of the &lt;code&gt;dragstart&lt;/code&gt; event.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer"&gt;MDN Web Docs&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;em&gt;DataTransfer&lt;/em&gt; object is used to hold the data that is being dragged during a drag and drop operation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to serialize the value before setting it to &lt;code&gt;dataTransfer&lt;/code&gt;.&lt;br&gt;
This will allow us to retrieve it when the element has been dropped.&lt;/p&gt;



&lt;p&gt;So far, so good!&lt;br&gt;
This is all we need to build generic and reusable wrapper components to drag and drop elements around our application.&lt;/p&gt;

&lt;p&gt;Now, to make use of them, we need to define the content of their default slots.&lt;br&gt;
Let's suppose we want to create draggable circles that can be dragged into a square area.&lt;br&gt;
Assuming they will be implemented in the &lt;code&gt;App&lt;/code&gt; component, here is how it would look like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DraggableItem&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"ball in balls"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"ball.id"&lt;/span&gt; &lt;span class="na"&gt;:transferData=&lt;/span&gt;&lt;span class="s"&gt;"ball"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/DraggableItem&amp;gt;&lt;/span&gt;    
    &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DroppableItem&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"square"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/DroppableItem&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DraggableItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/DraggableItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DroppableItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/components/DroppableItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;DraggableItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;DroppableItem&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;balls&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.square&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we can already drag each one of the balls, but nothing happens when we do it.&lt;br&gt;
In order to make this implementation really work, we need to improve the code to make it more dynamic.&lt;br&gt;
We are going to add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;availableBalls&lt;/code&gt; -  a &lt;em&gt;computed property&lt;/em&gt; that will represent the balls available to be dragged. As the user drags a ball into the square, it will no longer be available to be dragged again.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;selectedBalls&lt;/code&gt; - a &lt;em&gt;reactive variable&lt;/em&gt; that will represent all of the balls that were dragged into the droppable square.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isDroppableItemActive&lt;/code&gt; - a &lt;em&gt;reactive variable&lt;/em&gt; that will represent the state of the droppable square. We will use it to change the background color of the square when an element is being dragged over it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;onDragOver&lt;/code&gt; - a &lt;em&gt;method&lt;/em&gt; that will be called when a ball is dragged over the square. It will be responsible for setting the &lt;code&gt;isDroppableItemActive&lt;/code&gt; variable and changing its background color.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;onDragLeave&lt;/code&gt; - a &lt;em&gt;method&lt;/em&gt; that will be called when a ball is dragged out of the square. It will be responsible for resetting the &lt;code&gt;isDroppableItemActive&lt;/code&gt; variable and its background color.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;onDrop&lt;/code&gt; - a &lt;em&gt;method&lt;/em&gt; that will be called when a ball is dropped into the square. It will reset its background color and update the &lt;code&gt;selectedBalls&lt;/code&gt; variable.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Notice that we use the &lt;code&gt;dataTransfer.getData()&lt;/code&gt; of Drag and Drop API to retrieve the data of that item that was dragged.&lt;br&gt;
As it is a serialized value, we need to use &lt;code&gt;JSON.parse&lt;/code&gt; to "unserialize" it and turn it into a valid object.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We are going to use &lt;a href="https://github.com/lodash/lodash/wiki/FP-Guide"&gt;Lodash FP's&lt;/a&gt; &lt;code&gt;differenceBy&lt;/code&gt; method just for the sake of simplicity but you can implement your own filtering.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is how our &lt;code&gt;App&lt;/code&gt; component will look like after the improvements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DraggableItem&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"ball in availableBalls"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"ball.id"&lt;/span&gt; &lt;span class="na"&gt;:transferData=&lt;/span&gt;&lt;span class="s"&gt;"ball"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; 
    &lt;span class="nt"&gt;&amp;lt;/DraggableItem&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;hr&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;DroppableItem&lt;/span&gt; &lt;span class="na"&gt;v-bind=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;{ onDragOver, onDragLeave, onDrop }"&amp;gt;
      &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"droppableItemClass"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"circle"&lt;/span&gt; &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"ball in selectedBalls"&lt;/span&gt; &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"ball.id"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="si"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;ball&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="si"&gt;}}&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/DroppableItem&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;differenceBy&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/fp&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DraggableItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./DraggableItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;DroppableItem&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./DroppableItem&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;DraggableBalls&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;DraggableItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;DroppableItem&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;balls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;selectedBalls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;([])&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isDroppableItemActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;availableBalls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;differenceBy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;balls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedBalls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;droppableItemClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;square&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;isDroppableItemActive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hover&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDragOver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;isDroppableItemActive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDragLeave&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;isDroppableItemActive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;onDrop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ball&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataTransfer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="nx"&gt;selectedBalls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
          &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;selectedBalls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="nx"&gt;ball&lt;/span&gt;
        &lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="nx"&gt;isDroppableItemActive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;availableBalls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;selectedBalls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;droppableItemClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onDragOver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onDragLeave&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;onDrop&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.circle&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.square&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;dashed&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;172&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;158&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;style&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And this is the visual result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.loom.com/share/97ccd7682699469c8cb23c93ad2432a9"&gt;VueJS - Drag and Drop Example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find a more complete and fully-working example in &lt;a href="https://github.com/vcpablo/vuejs-drag-n-drop"&gt;this repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I hope you liked!&lt;br&gt;
Please, share and comment.&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Cover image by &lt;a href="https://articulate-heroes.s3.amazonaws.com/uploads/rte/xzfjcani_Ways-Help-Learners-Practice-Their-Skills-with-Scenarios-in-Rise-360.png"&gt;E-learning Heroes&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

</description>
      <category>vue</category>
      <category>javascript</category>
      <category>frontend</category>
      <category>beginners</category>
    </item>
    <item>
      <title>5 Lessons Learned In Content Creation As a Developer!</title>
      <author>Ankur Tyagi</author>
      <pubDate>Fri, 01 Oct 2021 11:50:05 +0000</pubDate>
      <link>https://dev.to/tyaga001/5-lessons-learned-in-content-creation-as-a-developer-2cb4</link>
      <guid>https://dev.to/tyaga001/5-lessons-learned-in-content-creation-as-a-developer-2cb4</guid>
      <description>&lt;h2&gt;
  &lt;a href="#life-coding-amp-business-are-full-of-lessons-if-you-look-for-them"&gt;
  &lt;/a&gt;
  Life, coding &amp;amp; business are full of lessons if you look for them.
&lt;/h2&gt;

&lt;p&gt;Some you learn the easy way, and some you learn the hard way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;As a creator, you’re at war with yourself every day.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It's a competition with yourself  not with others.&lt;/p&gt;

&lt;p&gt;Here are the 5 most important lessons (so far) I learned in my journey of sharing/creating content as a developer!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-you-cant-get-far-alone"&gt;
  &lt;/a&gt;
  1. You can’t get far alone:
&lt;/h2&gt;

&lt;p&gt;Fast is fun for a while.&lt;/p&gt;

&lt;p&gt;Alone a youth runs fast, with a mentor/senior may be slow, but together they go far.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A Great Dream Requires A Great Team.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Going far simply can’t be done without people to support you.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-keep-your-heros-human"&gt;
  &lt;/a&gt;
  2. Keep Your Heros Human:
&lt;/h2&gt;

&lt;p&gt;They may be great people, but they are still people.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Heros” still struggle &amp;amp; have limits that everyone else has, they still put their pants on one leg at a time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I let the people I admire be human.&lt;/p&gt;

&lt;p&gt;I find grace and compassion for them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-dont-let-comparison-steal-your-best-work"&gt;
  &lt;/a&gt;
  3. Don’t let comparison steal your best work:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;No matter your talent, there is always someone doing much better than you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It’s hard not to be jealous but try to praise others in similar work.&lt;/p&gt;

&lt;p&gt;If You have something to share or to create.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create it&lt;/li&gt;
&lt;li&gt;Say it&lt;/li&gt;
&lt;li&gt;Build it&lt;/li&gt;
&lt;li&gt;Write it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-dont-avoid-conflicts-learn-from-them"&gt;
  &lt;/a&gt;
  4. Don't avoid conflicts, Learn from them:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;You will not experience life without conflict.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is one of the hardest things I had to experience and learn as early as possible.&lt;/p&gt;

&lt;p&gt;"Society wins when developers learn how to resolve conflicts."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-be-patient-dont-rush"&gt;
  &lt;/a&gt;
  5. Be patient, don’t rush:
&lt;/h2&gt;

&lt;p&gt;“Opportunities don’t happen, you create them.” &lt;/p&gt;

&lt;p&gt;-Chris Grosser&lt;/p&gt;

&lt;p&gt;Patience is so difficult. &lt;/p&gt;

&lt;p&gt;There are things we have no choice but to wait for and there are things we should wait for but choose not to.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Be Patient! Don’t Rush in Your Career Growth.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1&gt;
  &lt;a href="#bonus-tip-batch-write-when-you-can"&gt;
  &lt;/a&gt;
  Bonus Tip: Batch write when you can
&lt;/h1&gt;

&lt;p&gt;Want to gain freedom, time, and flexibility? &lt;/p&gt;

&lt;p&gt;Plan a marathon content creation session.&lt;/p&gt;

&lt;p&gt;The secret to stress-free content production is batching.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#over-to-you-now"&gt;
  &lt;/a&gt;
  Over to you now:
&lt;/h2&gt;

&lt;p&gt;What content creation lessons have you learned since you started your journey? &lt;/p&gt;

&lt;p&gt;Let’s make this post a place to share our best hard-earned lessons.&lt;/p&gt;

&lt;p&gt;Share yours in the comments!&lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;p&gt;If you’re a regular reader, thank you, you’re a big part of the reason I’ve been able to share my life/career experiences with you.&lt;/p&gt;

&lt;p&gt;Connect with me on &lt;a href="https://twitter.com/TheAnkurTyagi"&gt;Twitter &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you like this. I encourage you all to sign up for my newsletter.&lt;/p&gt;

&lt;p&gt;It's free. You can ask me your questions via email.&lt;/p&gt;

&lt;p&gt;Check out today's edition:  &lt;a href="https://www.getrevue.co/profile/AnkurTyagi"&gt;The 2-1-1 Developer Growth Newsletter by Ankur&lt;/a&gt;  &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>codenewbie</category>
      <category>career</category>
    </item>
    <item>
      <title>My code review journey as a Web Security Engineer</title>
      <author>Bour Abdelhadi</author>
      <pubDate>Fri, 01 Oct 2021 11:30:11 +0000</pubDate>
      <link>https://dev.to/bscript/my-code-review-journey-as-a-web-security-engineer-581i</link>
      <guid>https://dev.to/bscript/my-code-review-journey-as-a-web-security-engineer-581i</guid>
      <description>&lt;h1&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#introduction"&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#objectives"&gt;Objectives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-work-effectively-"&gt;How to work effectively?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#input"&gt;Input&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#steps"&gt;Steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#high-level-process-flow"&gt;High-level process flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#rc-sample-code-review-report"&gt;RC sample code review report&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Code review is a part of regular development practices for any corporation. However, adding security elements to the code review is the most effective measure in preventing vulnerabilities, even before the first commit. Additionally, the code review process provides itself with sharing security best practices amongst a development team. Finally, it produces 'lessons' that we can learn to prevent future bugs.&lt;/p&gt;

&lt;p&gt;The primary purpose of security engineers is to work collaboratively with the rest of the team to figure out a way not to reproduce the same vulnerabilities or at least implement a mechanism to minimize them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#objectives"&gt;
  &lt;/a&gt;
  Objectives
&lt;/h2&gt;

&lt;p&gt;By executing the steps in this guide, you will be capable to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify specific security-related flaws within the code.&lt;/li&gt;
&lt;li&gt;Generate a list of security issues found in the code that we should prioritize for mitigation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-work-effectively"&gt;
  &lt;/a&gt;
  How to work effectively?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Set a time frame for your code reviews.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To not lose track of the higher-level security vulnerabilities you are looking for, Set a reasonable time frame on your reviews and use it to keep yourself from getting stuck. If you find yourself spending too much time on one place, mark it for later review and move to the next one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set clear objectives for your review.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A focused review is a helpful review. Spend time at the beginning of your review to understand the RC (Release candidate) tickets, and after that, check the bugs that are possible in the code you are reviewing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Review small and manageable chunks of code.&lt;/li&gt;
&lt;li&gt;Understand well the inputs and outputs for the code you are reviewing.&lt;/li&gt;
&lt;li&gt;Review only for security issues.&lt;/li&gt;
&lt;li&gt;Ask for help from the engineering team in case of missing comments and documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input
&lt;/h2&gt;

&lt;p&gt;The following inputs are crucial to perform an efficient code review:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Architecture diagram&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Use this to understand the high-level functioning of the application to help you identify possible security flaws at the very beginning and mitigate them before starting the development process.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Usage scenarios&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before jumping directly to the code, you must understand the usage and the purpose by reading the content of the tickets on the RC page. Otherwise, the code will be ambiguous.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data flow&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Any external inputs consider dangerous &amp;amp; untrusted; you should always trace the data flow from the &lt;em&gt;source&lt;/em&gt; to the &lt;em&gt;sink&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Inputs and outputs&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Performing &lt;em&gt;dataflow analysis&lt;/em&gt; is necessary to know each type of input and output the codebase has; you must use static analysis tools like &lt;a href="https://sonarqube.com/"&gt;SonarQube&lt;/a&gt; because it will be time-consuming doing this task manually.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Expert help&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you find it challenging to understand the business logic or the technical solution, go to the ticket and ask for more clarification.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output
&lt;/h2&gt;

&lt;p&gt;The code review aims to generate a list of bugs that we can fix to enhance the platform's security. &lt;/p&gt;

&lt;p&gt;For more visibility, your list should contain:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ticket ID&lt;/li&gt;
&lt;li&gt;The vulnerable code snippet.&lt;/li&gt;
&lt;li&gt;Proof of concept including exploitation and the impacts of the vulnerability.&lt;/li&gt;
&lt;li&gt;Recommendations that help shorten the time to remediate vulnerabilities.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6rYxReCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r23szqrathepjjkw8s2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6rYxReCv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r23szqrathepjjkw8s2o.png" alt="Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#steps"&gt;
  &lt;/a&gt;
  Steps
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Static Analysis Scan (SAST)&lt;/strong&gt;&lt;br&gt;
In this step, use a static analysis tool like &lt;a href="https://www.sonarqube.org/"&gt;SonarQube&lt;/a&gt; to analyze the codebase, looking for flaws in these codes that may compromise security.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Threat modeling&lt;/strong&gt;&lt;br&gt;
The threat modeling process will help you understand the application and how it interacts with external entities. It includes creating use-cases to know how the application is working, identifying entry points to see where a potential intruder could interact with the application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Identify code review objectives.&lt;/strong&gt;&lt;br&gt;
Code review objectives are a set of vulnerability types you will be looking for in the application based on its architecture and identified threats. For instance, it is not essential to look for SQL injection bugs if the application has no interactions with a database.&lt;br&gt;
Examples of code review objectives:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;Ensure that all untrusted external inputs are passed to a validation routine before being used.&lt;/li&gt;
&lt;li&gt;Ensure that the application is built to handle all possible errors gracefully. When errors occur, the site should respond with a mainly designed result that is helpful to the user without revealing unnecessary internal details.&lt;/li&gt;
&lt;li&gt;Check cryptographic algorithms to ensure secrets are cleared quickly.&lt;/li&gt;
&lt;li&gt;Check the application routes to see how does user input maps to the application.&lt;/li&gt;
&lt;li&gt;Search for sensitive Keywords, i.e., token, password, select, encode, decode, sanitize, etc.&lt;/li&gt;
&lt;li&gt;Check every result from the SAST (SonarQube), which runs against the target codebase.&lt;/li&gt;
&lt;li&gt;Once you find a valid vulnerability, &lt;em&gt;perform search queries on the codebase for more issues of the same type&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Look for an entry point.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This step will take a detailed look at the code to find as many security vulnerabilities as possible. You should use the set of goals we developed in stages 1,2 and 3 for guidance.&lt;/p&gt;

&lt;p&gt;We should also have the following handy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;List all the Hotspots from step 1.&lt;/li&gt;
&lt;li&gt;Review all the security Hotspots to identify which of the vulnerabilities discovered in the codebase require mitigation steps and which can be treated as "&lt;em&gt;false positives.&lt;/em&gt;" Among those requiring attention, you then need to prioritize the urgency of each vulnerability and plan the implementation of mitigation steps.&lt;/li&gt;
&lt;li&gt;Perform dataflow analysis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What should you focus on analyzing the report generated from SAST?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Inputs&lt;/strong&gt; - Find all the list of inputs and then pair this up to the code you need to review. For example, you should mark all the public interfaces, UI, database interaction, socket interaction, file IO, and other areas where your application can accept data as critical for review.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hard-coded strings&lt;/strong&gt; - Look for any hard-coded sensitive data, such as a password, cryptographic key, outbound communication to external components, or encryption of internal data, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Error handling code&lt;/strong&gt; - Look for all the error handling and see if they are handled securely. Because this may expose sensitive information – sometimes leading to vulnerabilities.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Session Management&lt;/strong&gt; - Look for any weak session identifier generation, session replay, session fixation, etc.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Logical Attacks&lt;/strong&gt; - Understand the business logic of the code because the SAST can't detect things like abuse of functionality, workflow bypass ..etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Code Quality.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Application Resource Handling&lt;/strong&gt; - LFI, XXE, L/RFI, RCE&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#highlevel-process-flow"&gt;
  &lt;/a&gt;
  High-level process flow
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y6lzu_Yj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmfvb0l3pteywb5okm0h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y6lzu_Yj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tmfvb0l3pteywb5okm0h.png" alt="High Level Process Flow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#rc-sample-code-review-report"&gt;
  &lt;/a&gt;
  RC sample code review report
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ticket Link: [T-link]&lt;/li&gt;
&lt;li&gt;Release Version: [R-version]&lt;/li&gt;
&lt;li&gt;Assignee: [Name]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Overview&lt;/strong&gt;&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#NO&lt;/th&gt;
&lt;th&gt;Affected URL/File&lt;/th&gt;
&lt;th&gt;Vulnerability&lt;/th&gt;
&lt;th&gt;Risk Level&lt;/th&gt;
&lt;th&gt;Ticket ID&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codebor.com/index.php?id="&gt;https://codebor.com/index.php?id=&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;SQL INJECTION&lt;/td&gt;
&lt;td&gt;&lt;span&gt;CRITICAL&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;TICK-001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://codebor.com/page.php?c="&gt;https://codebor.com/page.php?c=&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;XSS&lt;/td&gt;
&lt;td&gt;&lt;span&gt;MEDIUM&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;TICK-002&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;#NO&lt;/th&gt;
&lt;th&gt;Vulnerability Class&lt;/th&gt;
&lt;th&gt;Item Tested&lt;/th&gt;
&lt;th&gt;Status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Access Control&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Inadequate Auditing Controls.&lt;/li&gt;
&lt;li&gt;Unlimited Login Attempts.&lt;/li&gt;
&lt;li&gt;Password Complexity Policy&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;PASSED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Session Management&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Weak Session Identifier Generation.&lt;/li&gt;
&lt;li&gt;Session Replay.&lt;/li&gt;
&lt;li&gt;Session Fixation&lt;/li&gt;
&lt;li&gt;Insufficient Session Expiration.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;PASSED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Data Validation&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;&lt;span&gt;Improper Input Validation.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;Dynamic SQL Commands.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Improper Output Encoding.&lt;/li&gt;
&lt;li&gt;Format Strings&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;FAILED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Application Resource Handling&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Path Traversal.&lt;/li&gt;
&lt;li&gt;Predictable Object Identifiers.&lt;/li&gt;
&lt;li&gt;XML Entity Expansion.&lt;/li&gt;
&lt;li&gt;Local &amp;amp; Remote File Inclusion.&lt;/li&gt;
&lt;li&gt;Shell command execution.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;PASSED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Cryptography&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Weak Algorithms.&lt;/li&gt;
&lt;li&gt;Poor Key Management.&lt;/li&gt;
&lt;li&gt;Insecure Data Storage.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;PASSED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Logical Attacks&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Abuse of Functionality.&lt;/li&gt;
&lt;li&gt;Workflow Bypass.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;PASSED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;“Hidden” Functionality&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Debugging Interfaces.&lt;/li&gt;
&lt;li&gt;Undocumented Inputs.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;PASSED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Code Quality&lt;/td&gt;
&lt;td&gt;&lt;ul&gt;
&lt;li&gt;Verbose Error Messages.&lt;/li&gt;
&lt;li&gt;Unused / Dead Code.&lt;/li&gt;
&lt;li&gt;Improper Exception / Error Handling&lt;/li&gt;
&lt;li&gt;Inconsistent Logging.&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;td&gt;&lt;span&gt;PASSED&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;"It's much more useful to think of security as being a vector to follow rather than a point to be reached. Vectors have size and direction, and you should think about the direction you want to go in pursuit of security and how fast you'd like to chase it. However it's path you will continue to walk forever."&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;You can reach me out on LinkedIn if you have questions &lt;a href="https://www.linkedin.com/in/in/bohr"&gt;@Bour Abdelhadi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you want to support me? &amp;gt; &lt;a href="https://www.paypal.com/paypalme/bohrhadi"&gt;💲&lt;/a&gt; Thanks :D&lt;/p&gt;

</description>
      <category>security</category>
      <category>webdev</category>
      <category>agile</category>
    </item>
    <item>
      <title>Flutter styling explained in CSS - LLF #5</title>
      <author>Keff</author>
      <pubDate>Fri, 01 Oct 2021 10:57:37 +0000</pubDate>
      <link>https://dev.to/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm</link>
      <guid>https://dev.to/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hey there&lt;/strong&gt; 👋&lt;/p&gt;

&lt;p&gt;CSS can be weird and confusing, so let me explain Flutter's styling using it as a comparison. Flutter styling is quite straightforward, and that's not acceptable in my book, styling should always be confusing and weird. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--E-eqsWtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxiw3uxo8v0cz3di1cec.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--E-eqsWtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yxiw3uxo8v0cz3di1cec.jpeg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Jokes aside, CSS is widely used so I thought I'd try to explain Flutter's styling using CSS as a comparison example.&lt;/p&gt;

&lt;p&gt;They have a lot of things in common in terms of naming, property (style) values, and the rendered output you'd expect. But as opposed to the web, in Flutter you write styles in the same language as the rest of your application, without needing a separate one for the styles. In the case of Flutter, we write the styles in the Dart language itself. &lt;/p&gt;

&lt;p&gt;Let's take a look at some of the most common styles we will use while building Flutter apps. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There is a repository containing an app with all the flutter code mentioned in this post. Can be found &lt;a href="https://github.com/nombrekeff/lets-learn-flutter/tree/master/apps/llf_5_flutter_style_in_css"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#table-of-contents"&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#layout"&gt;Layout&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#column"&gt;Column&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#row"&gt;Row&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#column-and-row-are-just-flex"&gt;Column and Row are just Flex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#center"&gt;Center&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stack"&gt;Stack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#text"&gt;Text&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#paragraph"&gt;Paragraph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#multiple-styles-in-a-paragraph"&gt;Multiple styles in a paragraph&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#images"&gt;Images&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#network-images"&gt;Network images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asset-images"&gt;Asset images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#in-memory-images"&gt;In memory images:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#file-images"&gt;File images:&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;a href="#box-decorations"&gt;Box decorations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#borders"&gt;Borders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#border-radius"&gt;Border radius&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#gradients"&gt;Gradients&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-more"&gt;Learning more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#layout"&gt;
  &lt;/a&gt;
  Layout
&lt;/h2&gt;

&lt;p&gt;Let's start with layouts. In both flutter and CSS, we can position and organize elements/widgets as we please. Maybe we need to have some items in a row or a column. Or maybe we want to make a scrollable list. &lt;/p&gt;

&lt;p&gt;Let's take a look at some of the more common layouts we will use:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#column"&gt;
  &lt;/a&gt;
  Column
&lt;/h3&gt;

&lt;p&gt;Position a list of elements in a vertical orientation (or column). &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"column"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CSS the above will automatically place the &lt;code&gt;items&lt;/code&gt; in a column. But to better resemble Flutter, let's take an example of how to do this using flex-box:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.column&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see Flutter takes a more composable approach, preferring widgets over properties.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#row"&gt;
  &lt;/a&gt;
  Row
&lt;/h3&gt;

&lt;p&gt;To position items in a row, it's the same drill. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.row&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In CSS we just need to change the flex-direction to &lt;code&gt;row&lt;/code&gt;, this will place all items horizontally side by side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in Flutter we can switch the &lt;code&gt;Column&lt;/code&gt; widget with &lt;code&gt;Row&lt;/code&gt; and we're sorted!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#column-and-row-are-just-flex"&gt;
  &lt;/a&gt;
  Column and Row are just Flex
&lt;/h4&gt;

&lt;p&gt;With some properties set by default, and some forced (like direction). We could use Flex instead of Row or Column, in the following example it will render the same thing as using Column:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Flex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;direction:&lt;/span&gt; &lt;span class="n"&gt;Axis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;vertical&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#center"&gt;
  &lt;/a&gt;
  Center
&lt;/h3&gt;

&lt;p&gt;Yall like centering stuff right? I do, and flutter makes it quite easy to do so. Let's say we want to position an icon in the center of a box.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css there are plenty of different ways to do any single thing, we could use our old friend &lt;code&gt;flex-box&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or, we could use absolute positioning:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;
&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;200px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.center&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;-ms-transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-50%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;Centered Button&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
Like in CSS in flutter we can center stuff on the screen in multiple ways&lt;/p&gt;

&lt;p&gt;Using the Center widget, if we only have a child:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or we could center things inside a Column or Row if we have more than one element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;mainAxisAligment:&lt;/span&gt; &lt;span class="n"&gt;MainAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;crossAxisAligment:&lt;/span&gt; &lt;span class="n"&gt;CrossAxisAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;center&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;This will center all items centered, both horizontally and vertically.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that using this approach we can position items in various ways, like spaceBetween, spaceEvenly, etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stack"&gt;
  &lt;/a&gt;
  Stack
&lt;/h3&gt;

&lt;p&gt;What if we want to position an element on top of another element, or positioned on the top right corner? That's absolutely possible&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we would use absolute positioning&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"child"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="err"&gt;This&lt;/span&gt; &lt;span class="err"&gt;is&lt;/span&gt; &lt;span class="err"&gt;required&lt;/span&gt; &lt;span class="err"&gt;--&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.child&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In flutter we accomplish this by using the &lt;a href="https://api.flutter.dev/flutter/widgets/Stack-class.html"&gt;Stack&lt;/a&gt; widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
  &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;

    &lt;span class="c1"&gt;// This will be rendered on top of previous widgets&lt;/span&gt;
    &lt;span class="n"&gt;Positioned&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;top:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
        &lt;span class="nl"&gt;right:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Icon&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Icons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
  &lt;span class="o"&gt;],&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;: A widget that positions its children relative to the edges of its box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sncxMZPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyed96pjw6hw9wu81yx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sncxMZPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyed96pjw6hw9wu81yx.png" alt="Image if how CSS renders"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is how it looks in CSS&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#text"&gt;
  &lt;/a&gt;
  Text
&lt;/h2&gt;

&lt;p&gt;One of the most important things of any UI is the text, without text, our apps and websites would just be a bunch of boxes and imagery. Let's see how text is added and handled.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paragraph"&gt;
  &lt;/a&gt;
  Paragraph
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we normally use the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    CSS stands for Complicated Sac of Sheets
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What about adding some color? Easy&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    CSS stands for Complicated Sac of Sheets
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.red&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
Flutter also offers a simple widget to help us render text, called Text:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Flutter is a type of arrhythmia'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And coloring it is simple enough too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;'Flutter is a type of arrhythmia'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#multiple-styles-in-a-paragraph"&gt;
  &lt;/a&gt;
  Multiple styles in a paragraph
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we can nest &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; elements inside our &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and give specific styles to each one of them:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    CSS stands for &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"css-description"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Complicated Sac of Sheets&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#666666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;14px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nc"&gt;.css-description&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;brown&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In flutter we must use the RichText widget to be able to do this, let's take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;RichText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="n"&gt;TextSpan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;children:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
            &lt;span class="n"&gt;TextSpan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="s"&gt;'Flutter is'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xff666666&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
                    &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;TextSpan&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                &lt;span class="nl"&gt;text:&lt;/span&gt; &lt;span class="s"&gt;'a type of arrhythmia'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="nl"&gt;style:&lt;/span&gt; &lt;span class="n"&gt;TextStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
                    &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;brown&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                    &lt;span class="nl"&gt;fontSize:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                &lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;],&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see in flutter it's a bit more cumbersome as opposed to CSS. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qvRlXv_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5znyowlfwjwx42x0x0yr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qvRlXv_B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5znyowlfwjwx42x0x0yr.png" alt="Image of how the text from the examples looks like"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is how the text mentioned in the example looks like in CSS&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
Showing images in CSS is easy enough, just add a &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; tag and set the src attribute to the image path or link.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"http://example.images.com/my-image.png"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter it's quite similar, but we create images differently depending on where the image is loaded from.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#network-images"&gt;
  &lt;/a&gt;
  Network images
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'http://example.images.com/my-image.png'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.network.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#asset-images"&gt;
  &lt;/a&gt;
  Asset images
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asset&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'assets/my-image.png'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.asset.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#in-memory-images"&gt;
  &lt;/a&gt;
  In memory images:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.memory.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#file-images"&gt;
  &lt;/a&gt;
  File images:
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;file&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;a href="https://api.flutter.dev/flutter/widgets/Image/Image.file.html"&gt;see more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus meme&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wLZz7a76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll67c3st7esl2wflfuer.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wLZz7a76--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ll67c3st7esl2wflfuer.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;h2&gt;
  &lt;a href="#box-decorations"&gt;
  &lt;/a&gt;
  Box decorations
&lt;/h2&gt;

&lt;p&gt;We all like those boxes with rounded corners, borders, and excessive gradients, right? &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#borders"&gt;
  &lt;/a&gt;
  Borders
&lt;/h3&gt;

&lt;p&gt;In CSS we set the &lt;code&gt;border&lt;/code&gt; property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;green&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter we can add borders to a container by setting the &lt;code&gt;border&lt;/code&gt; in the containers &lt;code&gt;BoxDecoration&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;border:&lt;/span&gt; &lt;span class="n"&gt;Border&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;color:&lt;/span&gt; &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;green&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#border-radius"&gt;
  &lt;/a&gt;
  Border radius
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In css we use the &lt;code&gt;border-radius&lt;/code&gt; property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter we can add rounded corners to a container adding &lt;a href="https://api.flutter.dev/flutter/painting/BorderRadius-class.html"&gt;&lt;code&gt;BorderRadius&lt;/code&gt;&lt;/a&gt; to the containers &lt;a href="https://api.flutter.dev/flutter/painting/BoxDecoration-class.html"&gt;&lt;code&gt;BoxDecoration&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or just adding radius to the top of the container:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;only&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;topLeft:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
            &lt;span class="nl"&gt;topRight:&lt;/span&gt; &lt;span class="n"&gt;Radius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
        &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Want to add rounded corners to any widget? Using &lt;a href="https://api.flutter.dev/flutter/widgets/ClipRRect-class.html"&gt;&lt;code&gt;ClipRRect&lt;/code&gt;&lt;/a&gt; allows us to add round corners to any child widget:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;ClipRRect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;borderRadius:&lt;/span&gt; &lt;span class="n"&gt;BorderRadius&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;circular&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;network&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="s"&gt;'...'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;height:&lt;/span&gt; &lt;span class="mf"&gt;150.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="nl"&gt;width:&lt;/span&gt; &lt;span class="mf"&gt;100.0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#gradients"&gt;
  &lt;/a&gt;
  Gradients
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt;&lt;br&gt;
In CSS we can set a gradient as the background of elements:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class="nc"&gt;.parent&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;70deg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;193&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;195&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;0%&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;253&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;187&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Flutter&lt;/strong&gt;&lt;br&gt;
In Flutter we can add also add &lt;a href="https://api.flutter.dev/flutter/painting/LinearGradient-class.html"&gt;LinearGradient&lt;/a&gt; to the containers &lt;a href="https://api.flutter.dev/flutter/painting/BoxDecoration-class.html"&gt;&lt;code&gt;BoxDecoration&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Container&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nl"&gt;decoration:&lt;/span&gt; &lt;span class="n"&gt;BoxDecoration&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
        &lt;span class="nl"&gt;gradient:&lt;/span&gt; &lt;span class="n"&gt;LinearGradient&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
            &lt;span class="nl"&gt;colors:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
                &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
                &lt;span class="n"&gt;Colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
            &lt;span class="o"&gt;],&lt;/span&gt;
            &lt;span class="nl"&gt;stops:&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; 
        &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="nl"&gt;child:&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#learning-more"&gt;
  &lt;/a&gt;
  Learning more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/cookbook/design/themes"&gt;Flutter's theming guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nombrekeff/lets-learn-flutter/tree/master/apps/llf_5_flutter_style_in_css"&gt;Post example app repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;strong&gt;That's it for this one, I hope you got something out of it and it did not confuse you more than it helped&lt;/strong&gt; 😅&lt;/p&gt;

&lt;p&gt;These are just some of the styles I could compare, so I might convert this into a mini-series if people are interested. &lt;/p&gt;

&lt;p&gt;As always, thanks for reading. And remember to comment if you have any suggestions, doubts, or something you would like me to cover in these posts.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>css</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Explaining SSR &amp; CSR in Javascript</title>
      <author>Zygimantas Sniurevicius</author>
      <pubDate>Fri, 01 Oct 2021 10:35:04 +0000</pubDate>
      <link>https://dev.to/producthackers/explaining-ssr-csr-in-javascript-3iig</link>
      <guid>https://dev.to/producthackers/explaining-ssr-csr-in-javascript-3iig</guid>
      <description>&lt;p&gt;Recently at my job we decided to ditch &lt;strong&gt;React.js&lt;/strong&gt; and go with Javascript vanilla for better perfomance since our website is a &lt;strong&gt;newspaper&lt;/strong&gt; we found it to be difficult justify having React.js for something so uneventful, in the process we talked a lot about CSR, SSR and even a Hybrid approach, I found it hard to understand how these rendering techniques work, after investigating it myself, I decided to create this post with my findings.&lt;/p&gt;

&lt;p&gt;Before going too deep let's first see all the diferent kind of rendering we can expect in Javascript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Client side rendering also known as &lt;strong&gt;CSR&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Server side rendering usually referenced as &lt;strong&gt;SSR&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Hybrid&lt;/strong&gt; rendering a combination of both &lt;strong&gt;CSR&lt;/strong&gt; and &lt;strong&gt;SSR&lt;/strong&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#the-critical-path"&gt;
  &lt;/a&gt;
  The critical path
&lt;/h1&gt;

&lt;p&gt;Let's begin by understanding how the browser paints information on our screen when we visit a website.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l6qhcOkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk2op8egax673fej8j2o.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l6qhcOkn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fk2op8egax673fej8j2o.png" alt="Rendering path"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is a &lt;strong&gt;sequence of events&lt;/strong&gt; that every browser must go through before rendering the initial view of a web page, we won't go into much detail but if you want more information about this topic check these links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path"&gt;Mozilla MDN Critical rendering path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=SmE4OwHztCc"&gt;Ryan Seddon: So how does the browser actually render a website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web"&gt;Rendering on the Web&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, we start with an HTML request, after the server returns the HTML, the browser begins parsing the HTML converting the received bytes to the DOM tree, then initiates requests every time it finds links to external &lt;strong&gt;resources&lt;/strong&gt; (stylesheets, scripts, or embedded image references) until it gets to the end of the file that's when&lt;br&gt;
it builds the CSS object model.&lt;/p&gt;

&lt;p&gt;With the &lt;strong&gt;DOM&lt;/strong&gt; and &lt;strong&gt;CSSOM&lt;/strong&gt; complete, the browser builds the render tree, computing the styles for all the &lt;strong&gt;visible content&lt;/strong&gt;. After the render tree is complete, layout occurs, defining the location and size of all the render tree elements. Once complete, the page is rendered on the screen.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-is-clientside-rendering-"&gt;
  &lt;/a&gt;
  What is Client-side rendering ?
&lt;/h1&gt;

&lt;p&gt;Instead of receiving all the data from the HTML document we use a &lt;strong&gt;barebones version&lt;/strong&gt; with basic information and a link to a Javascript file wich then renders the rest of our web page using the browser.&lt;/p&gt;

&lt;p&gt;This is the default for many frameworks in javascript such as React.js, Angular.js, Vue.js...etc&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;User requests access to our webpage&lt;/li&gt;
&lt;li&gt;Server sends a response to our browser&lt;/li&gt;
&lt;li&gt;Browser downloads the javascript file&lt;/li&gt;
&lt;li&gt;Executes the files content&lt;/li&gt;
&lt;li&gt;Content is visible and you can navigate and interact with the web page&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
  &lt;a href="#what-is-serverside-rendering-"&gt;
  &lt;/a&gt;
  What is Server-side rendering ?
&lt;/h1&gt;

&lt;p&gt;Rather than having a small HTML document wich then calls the assets needed, we move the process of rendering our initial page to the server, there we process the javascript of the website and render it to a &lt;strong&gt;static HTML&lt;/strong&gt; so the clients browser doens't have to.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;User requests access to our webpage&lt;/li&gt;
&lt;li&gt;Server sends ready to go HTML files&lt;/li&gt;
&lt;li&gt;Browser renders the page but its not interactive&lt;/li&gt;
&lt;li&gt;Browser downloads the Javascript&lt;/li&gt;
&lt;li&gt;Execute the Javascript&lt;/li&gt;
&lt;li&gt;Content is interactive&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#difference-in-rendering-between-csr-vs-ssr"&gt;
  &lt;/a&gt;
  Difference in rendering between CSR vs SSR
&lt;/h4&gt;

&lt;p&gt;As you can see the main difference in terms of steps is that with SSR the content is visible sooner but it isn't interactive, meanwhile with CSR the page takes longer to load but its interactive and visible at the same time.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#advantages-of-ssr"&gt;
  &lt;/a&gt;
  Advantages of SSR
&lt;/h1&gt;

&lt;h4&gt;
  &lt;a href="#seo"&gt;
  &lt;/a&gt;
  SEO
&lt;/h4&gt;

&lt;p&gt;The complete page's HTML is rendered, this assures the page metadata and content is always visible and accurate for the web crawlers to scan.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#faster-load"&gt;
  &lt;/a&gt;
  Faster load
&lt;/h4&gt;

&lt;p&gt;Pages have a much faster load time and a quicker first contentful paint because the content is available in the browser sooner.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#social-media"&gt;
  &lt;/a&gt;
  Social media
&lt;/h4&gt;

&lt;p&gt;When someone shares your page on Facebook or Twitter, it includes a preview of the page because we have all the metadata and content pre rendered on our server already.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#discoverability"&gt;
  &lt;/a&gt;
  Discoverability
&lt;/h4&gt;

&lt;p&gt;not long ago google announced that it would give preferential search rankings to the sites with the fastest page load speed (&lt;a href="https://web.dev/vitals/"&gt;See Core Web Vitals&lt;/a&gt;). Meaning that sites with a better user experience will have better search rankings.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final words
&lt;/h1&gt;

&lt;p&gt;I hope this article helped you to understand these concepts a little bit better, if you want to dig deeper remember to check the links I left for you, see you on the next article and have a nice day :D&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpMv7Nqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7resgn2rejbbi8ypiky.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpMv7Nqb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m7resgn2rejbbi8ypiky.gif" alt="Goodbye"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>performance</category>
    </item>
    <item>
      <title>Building a Tailwind CSS button component + variants</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Fri, 01 Oct 2021 10:32:00 +0000</pubDate>
      <link>https://dev.to/themesberg/building-a-tailwind-css-button-component-variants-55dp</link>
      <guid>https://dev.to/themesberg/building-a-tailwind-css-button-component-variants-55dp</guid>
      <description>&lt;p&gt;For the last few projects I've been using Tailwind CSS to build and style the components, sections, and pages for the website.&lt;/p&gt;

&lt;p&gt;One thing that bothers me, however, is that I have to build certain commonly components over and over every time I start a new project.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rfRcj20z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfxx4g5ry0dwe3qxrjb8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rfRcj20z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nfxx4g5ry0dwe3qxrjb8.png" alt="Tailwind CSS buttons"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is why I decided to start a Tailwind CSS Components series here and teach you how to build elements such as buttons, dropdowns, modals, and more.&lt;/p&gt;

&lt;p&gt;A few days ago I showed you how to build a &lt;a href="https://dev.to/themesberg/building-a-tailwind-css-breadcrumb-components-nl8"&gt;Tailwind CSS breadcrumb&lt;/a&gt; component and today I will show you how to build button components.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tailwind-css-button-component"&gt;
  &lt;/a&gt;
  Tailwind CSS button component
&lt;/h2&gt;

&lt;p&gt;First of all, it is important to understand what kind of HTML a button can be. It is most usually used as an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; element, however, you can also use it as a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element too.&lt;/p&gt;

&lt;p&gt;Let's first create the HTML markup for the button:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add some spacing classes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="px-5 py-2.5"&amp;gt;Default&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's add some colors:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 px-5 py-2.5"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's also important to apply text related stylings:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 font-medium text-sm px-5 py-2.5 text-center"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's make the button rounded, but you can keep it squared as well depending on your preferences:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 font-medium rounded-lg text-sm px-5 py-2.5 text-center"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Lastly, let's not forget to add hover and focus styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tailwind-css-outline-button-style"&gt;
  &lt;/a&gt;
  Tailwind CSS outline button style
&lt;/h2&gt;

&lt;p&gt;You can also use the following styles to build a button that doesn't have a solid background:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="rounded-lg border border-gray-200 bg-white text-sm font-medium px-4 py-2 text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-2 focus:ring-blue-700 focus:text-blue-700 mr-3 mb-3"&amp;gt;Flowbite&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tailwind-css-button-with-icon"&gt;
  &lt;/a&gt;
  Tailwind CSS button with icon
&lt;/h2&gt;

&lt;p&gt;You may want to use an icon inside the button as well. I recommend using &lt;code&gt;flex&lt;/code&gt; and SVG icons for the best performance.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;button type="button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center inline-flex items-center mr-3"&amp;gt;
    &amp;lt;svg class="-ml-1 mr-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"&amp;gt;&amp;lt;path d="M3 1a1 1 0 000 2h1.22l.305 1.222a.997.997 0 00.01.042l1.358 5.43-.893.892C3.74 11.846 4.632 14 6.414 14H15a1 1 0 000-2H6.414l1-1H14a1 1 0 00.894-.553l3-6A1 1 0 0017 3H6.28l-.31-1.243A1 1 0 005 1H3zM16 16.5a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM6.5 18a1.5 1.5 0 100-3 1.5 1.5 0 000 3z"&amp;gt;&amp;lt;/path&amp;gt;&amp;lt;/svg&amp;gt;
    Buy now
&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#buttons-as-links"&gt;
  &lt;/a&gt;
  Buttons as links
&lt;/h2&gt;

&lt;p&gt;You can easily use buttons as link by using an &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag instead of a &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; element:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="#" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-3 mb-3"&amp;gt;I'm a link&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! I hope that this tutorial will help you in your Tailwind CSS journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#flowbite-tailwind-css-component-library"&gt;
  &lt;/a&gt;
  Flowbite - Tailwind CSS component library
&lt;/h2&gt;

&lt;p&gt;This &lt;a href="https://flowbite.com/docs/components/buttons/"&gt;Tailwind CSS button&lt;/a&gt; component is part of a larger library called Flowbite, which includes many more variants and components built using the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lk1XVTd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1slpuim8l8e9goudyvg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lk1XVTd_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1slpuim8l8e9goudyvg.png" alt="Tailwind CSS component library"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can learn more and get started with Flowbite by reading the &lt;a href="https://flowbite.com/docs/getting-started/introduction/"&gt;introduction&lt;/a&gt; and &lt;a href="https://flowbite.com/docs/getting-started/quickstart/"&gt;quickstart guide&lt;/a&gt; from the official documentation.&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>tailwindcss</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
