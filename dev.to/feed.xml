<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>You MUST store this Javascript Operator Index</title>
      <author>CodeOz</author>
      <pubDate>Thu, 18 Nov 2021 18:04:09 +0000</pubDate>
      <link>https://dev.to/codeoz/you-must-store-this-javascript-operator-index-2bec</link>
      <guid>https://dev.to/codeoz/you-must-store-this-javascript-operator-index-2bec</guid>
      <description>&lt;p&gt;Here is a list of javascript operator and how to use it!&lt;/p&gt;

&lt;p&gt;You should mark this and use it when you need to know what is this operator!&lt;/p&gt;

&lt;p&gt;In order to naviguate, you can make a &lt;code&gt;cmd + f&lt;/code&gt; or &lt;code&gt;ctrl + f&lt;/code&gt; and put the operator that you need and put &lt;code&gt;:&lt;/code&gt; after this.&lt;/p&gt;

&lt;p&gt;Example: &lt;code&gt;...:&lt;/code&gt; if I'm looking for what is &lt;code&gt;...&lt;/code&gt; operator &lt;/p&gt;

&lt;p&gt;🚨 Popularity is defined by my &lt;strong&gt;OWN&lt;/strong&gt; usage.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#ambidextrous-operator"&gt;
  &lt;/a&gt;
  Ambidextrous operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-addition-unary-plus"&gt;
  &lt;/a&gt;
  &lt;code&gt;+&lt;/code&gt;: &lt;strong&gt;addition | unary plus&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-before-operand-it-will-be-used-as-raw-unary-plus-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;+&lt;/code&gt; operator &lt;strong&gt;BEFORE&lt;/strong&gt; operand, it will be used as &lt;code&gt;unary plus operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;The unary plus operator precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 0&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: NaN&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;📝 Note: If you try to use it with a string that is not a number, it will return NaN (not a number)&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-other-context-will-be-used-as-raw-addition-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;+&lt;/code&gt; operator in other context will be used as &lt;code&gt;addition operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;It Produces the &lt;code&gt;sum of numeric operands&lt;/code&gt; except for &lt;code&gt;string&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📝 Note: It will convert boolean to number, object to number&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;console.log(2 + 4) // 6
console.log(2 + true) // 3
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When you use it with string it will make a &lt;code&gt;string concatenation&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;code oz&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my name is &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;📝 Note: you should use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"&gt;template litterals&lt;/a&gt; string instead of concatenation&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-subtraction-unary-negation"&gt;
  &lt;/a&gt;
  &lt;code&gt;-&lt;/code&gt;: &lt;strong&gt;subtraction | unary negation&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-before-operand-it-will-be-used-as-raw-unary-negation-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;-&lt;/code&gt; operator &lt;strong&gt;BEFORE&lt;/strong&gt; operand, it will be used as &lt;code&gt;unary negation operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;The unary negation operator precedes its operand and negates it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📝 Note: It will convert boolean to number, object to number &amp;amp; string to number&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// -5&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// -1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;📝 Note: If you try to use it with a string that is not a number, it will return NaN (not a number)&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-other-context-will-be-used-as-raw-subtraction-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;-&lt;/code&gt; operator in other context will be used as &lt;code&gt;subtraction operator&lt;/code&gt;.
&lt;/h4&gt;

&lt;p&gt;It subtracts the two operands, producing their difference.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;3.5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -1.5&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: NaN&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-spread-rest"&gt;
  &lt;/a&gt;
  &lt;code&gt;...&lt;/code&gt;: &lt;strong&gt;spread | rest&lt;/strong&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-function-parameters-it-will-be-used-as-raw-rest-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;...&lt;/code&gt; operator in function parameters, it will be used as &lt;code&gt;rest operator&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;It allows us to have an unlimited number of parameter for this function!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// rest parameter is handle as array in the function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;rest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Nice your function can handle different number of parameters !&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#if-you-use-raw-endraw-operator-in-other-context-it-will-be-used-as-raw-spread-operator-endraw-"&gt;
  &lt;/a&gt;
  If you use &lt;code&gt;...&lt;/code&gt; operator in other context, it will be used as &lt;code&gt;spread operator&lt;/code&gt;
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you use it as arguments in function: It will allows an iterable such as an &lt;code&gt;array expression&lt;/code&gt; in function parameters.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getFruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;Fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;f1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;f2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;f3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;getFruits&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Fruits: Apple, Orange and Banana&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;You can also use it for &lt;code&gt;extracting&lt;/code&gt; values from &lt;code&gt;array&lt;/code&gt; or &lt;code&gt;object&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// We extract the first Item of the array into the variable and the others variable in an array named others&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nx"&gt;firstItem&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="c1"&gt;// [ 2, 3, 4 ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 1, we extract the a key from toto object&lt;/span&gt;
&lt;span class="nx"&gt;others&lt;/span&gt; &lt;span class="c1"&gt;// { b: 2, c: 3 }, we extract other key in the object thanks to rest operator &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;📝 Note: When you are doing &lt;code&gt;const toto = { ...anotherObject }&lt;/code&gt; it's equal to &lt;code&gt;const toto = Object.assign({}, anotherObject)&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#logical-operator"&gt;
  &lt;/a&gt;
  Logical operator
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Thing to know: All value in Javascript are falsy or truthy value, it means that you can make Boolean(any value), and you will get boolean value. In Javascript all value are truthy value except 0, null, undefined, NaN, empty string&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-ampamp-endraw-logical-and"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;: &lt;strong&gt;logical AND&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★★&lt;/p&gt;

&lt;p&gt;Use to check if all value (in general value are condition) are truthy.&lt;/p&gt;

&lt;p&gt;It will return the first value falsy, otherwise it will return the final value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="c1"&gt;// will return false &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valueBis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="c1"&gt;// will return false&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// will return 1 since all value before are true (5 &amp;amp; 3)&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;// will return 0 since it's the first falsy value&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstCondition&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;secondCondition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// console log will be shown only if both condition are true!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ampamp-endraw-logical-and-assignement"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&amp;amp;=&lt;/code&gt;: &lt;strong&gt;logical AND assignement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Value is assigned only if value passed is truthy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// toto value will be NOT changed since toto is falsy (0)&lt;/span&gt;
&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;// tutu value will be replaced by 3 since tutu is trusly (2)&lt;/span&gt;

&lt;span class="c1"&gt;// toto &amp;amp;&amp;amp;= 5 It's a shortcut of 👇&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-or"&gt;
  &lt;/a&gt;
  &lt;code&gt;||&lt;/code&gt;: &lt;strong&gt;logical OR&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;p&gt;Use to check if one value (in general value are condition) are truthy among a set of value.&lt;/p&gt;

&lt;p&gt;It will return the first value truthy, otherwise it will return the final value.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="c1"&gt;// will return true &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;valueBis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;isTrue&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isFalse&lt;/span&gt; &lt;span class="c1"&gt;// will return true&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;// will return 5 since it's the first truthy value&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// will return 2 since it's the first truthy value&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstCondition&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;secondCondition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// console log will be shown if one condition matches!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-or-assignement"&gt;
  &lt;/a&gt;
  &lt;code&gt;||=&lt;/code&gt;: &lt;strong&gt;logical OR assignement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Value is assigned only if value passed is falsy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// toto value will be replaced by 5 since toto is falsy (0)&lt;/span&gt;
&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;// tutu value will NOT changed since tutu is not a falsy value (2)&lt;/span&gt;

&lt;span class="c1"&gt;// toto ||= 5 It's a shortcut of 👇&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-nullish-coalescing"&gt;
  &lt;/a&gt;
  &lt;code&gt;??&lt;/code&gt;: &lt;strong&gt;logical Nullish Coalescing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;Returns its &lt;em&gt;right-hand side operand&lt;/em&gt; when its left-hand side operand is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; (nullish value).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 0 since 0 is not equal to nullish value.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// 'hello' since the right-hand side is equal to `null`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// '55 since the right-hand side is equal to `undefined`&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;titi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="c1"&gt;// undefined since the right-hand side is equal to `null`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;⚠️ Be careful: &lt;code&gt;??&lt;/code&gt; operator is different of &lt;code&gt;||&lt;/code&gt;, so when you need to assign a value depending on other value, you should pick the correct operator!&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 55 since 0 is a falsy value&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;titi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 0 since 0 is different of nullish value&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 55 since undefined is a falsy value&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;tata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// 55 since undefined is equal to nullish value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-nullish-assignement"&gt;
  &lt;/a&gt;
  &lt;code&gt;??=&lt;/code&gt;: &lt;strong&gt;logical Nullish assignement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Value is assigned only if value passed is equal to &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; (nullish).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="c1"&gt;// toto is equal to 55 since it's a nullish value (null)&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;
&lt;span class="nx"&gt;tutu&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="c1"&gt;// toto is equal to 90 since it's not a nullish value (90)&lt;/span&gt;
&lt;span class="c1"&gt;// toto ??= 5 It's a shortcut of 👇&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;

&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="p"&gt;??&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// Equal to 5 since toto is equal to null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-logical-not"&gt;
  &lt;/a&gt;
  &lt;code&gt;!&lt;/code&gt;: &lt;strong&gt;logical NOT&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★★&lt;/p&gt;

&lt;p&gt;Swap a &lt;code&gt;true value&lt;/code&gt; into &lt;code&gt;false value&lt;/code&gt; and &lt;code&gt;false value&lt;/code&gt; into &lt;code&gt;true value&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It also &lt;strong&gt;convert any value&lt;/strong&gt; to &lt;strong&gt;boolean value&lt;/strong&gt;. So all &lt;code&gt;truthy&lt;/code&gt; value become &lt;code&gt;falsy&lt;/code&gt; value and vice versa. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;💡 Tips: I use &lt;strong&gt;double logical&lt;/strong&gt; operator a lot in order to convert &lt;strong&gt;any value&lt;/strong&gt; to boolean! It's equal to use Boolean(any value)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="c1"&gt;// My tips 👇&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="c1"&gt;// true, equal to Boolean({})&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt; &lt;span class="c1"&gt;// true, equal to Boolean([])&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// I use a lot in order to check if a value is defined or undefined! (Be careful, if the value is equal to `0` it will be false!)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#special-operator"&gt;
  &lt;/a&gt;
  Special operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-optional-chaining"&gt;
  &lt;/a&gt;
  &lt;code&gt;?.&lt;/code&gt;: &lt;strong&gt;Optional chaining&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;p&gt;It allows to accesses a property on an object without having to check if each reference in the chain is valid.&lt;/p&gt;

&lt;p&gt;It's not really clear? Ok let's have a look 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// { b: 5 }&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="c1"&gt;// Uncaught TypeError: Cannot read properties of undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In fact in you try to access to a property on an undefined property, Javascript engine will trigger an error!&lt;/p&gt;

&lt;p&gt;So to be safe we need to make something like 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// It's safe to use it since we check before if the property exist!&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But it's not really convenient to make this, isn't?&lt;/p&gt;

&lt;p&gt;So &lt;code&gt;opional chaining&lt;/code&gt; is here to save us! 🦸‍♂️&lt;/p&gt;

&lt;p&gt;You can try to access to a property &lt;strong&gt;without check if all property exist before&lt;/strong&gt; as show above! You just need to use this operator on property, if the property doesn't exist, it will return &lt;code&gt;undefined&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 5&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;d&lt;/span&gt; &lt;span class="c1"&gt;// undefined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-ternary"&gt;
  &lt;/a&gt;
  &lt;code&gt;?&lt;/code&gt;: &lt;strong&gt;Ternary&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;p&gt;Is the only operator in Javascript that requires two pseudo operand (&lt;code&gt;?&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt;). It evaluate a condition &lt;strong&gt;depending on&lt;/strong&gt; whether that condition is &lt;code&gt;falsy&lt;/code&gt; or &lt;code&gt;truthy&lt;/code&gt;! It's equivalent to &lt;code&gt;if (...) &amp;amp; else (...)&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 34&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;//  It's a shortcut of 👇&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;not ok&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#comparator-operator"&gt;
  &lt;/a&gt;
  Comparator operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-equality"&gt;
  &lt;/a&gt;
  &lt;code&gt;==&lt;/code&gt;: &lt;strong&gt;Equality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are equal, returning a Boolean result. Unlike the &lt;code&gt;=== (strict equality operator)&lt;/code&gt;, it attempts to convert (make an implicit coercion) and compare operands that are of different types.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;📝 Note: The mechanic of implicit coercion is not easy to understand but you can check it in details at this post &lt;a href="https://dev.to/codeozz/implicit-coercion-in-javascript-neh"&gt;https://dev.to/codeozz/implicit-coercion-in-javascript-neh&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here an exemple of how the implicit corecion is done! 👇&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1) Not the same type so implicit coercion will be made&lt;/span&gt;
&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;

&lt;span class="c1"&gt;// 2) Convert string into number so &lt;/span&gt;
&lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;24&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;

&lt;span class="c1"&gt;// 3) We got an number so we can check value&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="c1"&gt;// true !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general you should use &lt;code&gt;=== (strict equality)&lt;/code&gt; and avoid this operator!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-strict-equality"&gt;
  &lt;/a&gt;
  &lt;code&gt;===&lt;/code&gt;: &lt;strong&gt;Strict Equality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★★&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are equal, returning a Boolean result. Unlike the &lt;code&gt;== (equality operator)&lt;/code&gt;, the strict equality operator always considers operands of different types to be different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should always use this operator instead of &lt;code&gt;== (equality operator)&lt;/code&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-inequality"&gt;
  &lt;/a&gt;
  &lt;code&gt;!=&lt;/code&gt;: &lt;strong&gt;Inequality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are not equal, returning a Boolean result. Unlike the &lt;code&gt;!== (strict inequality operator)&lt;/code&gt;, it attempts to convert and compare operands that are of different types.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In general you should use &lt;code&gt;!== (strict inequality)&lt;/code&gt; and avoid this operator!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-strict-inequality"&gt;
  &lt;/a&gt;
  &lt;code&gt;!==&lt;/code&gt;: &lt;strong&gt;Strict Inequality&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★★&lt;/p&gt;

&lt;p&gt;It checks whether its two operands are not equal, returning a Boolean result. Unlike the &lt;code&gt;(!= inequality operator)&lt;/code&gt;, the strict inequality operator always considers operands of different types to be different.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should always use this operator instead of &lt;code&gt;!= (inequality)&lt;/code&gt;!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-gt-endraw-greater-than"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&lt;/code&gt;: &lt;strong&gt;Greater than&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is greater than the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gt-endraw-greater-than-or-equal-to"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;=&lt;/code&gt;: &lt;strong&gt;Greater than or Equal To&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is greater than or equal to the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-lt-endraw-less-than"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&lt;/code&gt;: &lt;strong&gt;Less than&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is less than the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-lt-endraw-less-than-or-equal-to"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;=&lt;/code&gt;: &lt;strong&gt;Less than or Equal To&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★★☆&lt;/p&gt;

&lt;p&gt;It returns true if the left operand is less than or equal to the right operand, and false otherwise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: false&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="c1"&gt;// Compare bigint to number (note: bigint is not supported in all browsers)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;aa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ab&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arithmetic-operator"&gt;
  &lt;/a&gt;
  Arithmetic operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-addition-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;+=&lt;/code&gt;: &lt;strong&gt;Addition Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Adds&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// b will be equal to 8, since we are adding 5 to b variable!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-subtraction-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;-=&lt;/code&gt;: &lt;strong&gt;Subtraction Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Subtracts&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// b will be equal to 2, since we are subtracting 5 to b variable!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-multiplication"&gt;
  &lt;/a&gt;
  &lt;code&gt;*&lt;/code&gt;: &lt;strong&gt;Multiplication&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;Its produces the product of the operands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-multiplication-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;*=&lt;/code&gt;: &lt;strong&gt;Multiplication Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Multiple&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-division"&gt;
  &lt;/a&gt;
  &lt;code&gt;/&lt;/code&gt;: &lt;strong&gt;Division&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;Its produces the &lt;code&gt;quotient of its operands&lt;/code&gt; where the left operand is the dividend and the right operand is the divisor.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-division-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;/=&lt;/code&gt;: &lt;strong&gt;Division Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Divide&lt;/code&gt; the value of the right operand to a variable and assigns the &lt;code&gt;result to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-exponentiation"&gt;
  &lt;/a&gt;
  &lt;code&gt;**&lt;/code&gt;: &lt;strong&gt;Exponentiation&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;Its returns the result of raising the first operand to the power of the second operand. It is equivalent to &lt;code&gt;Math.pow&lt;/code&gt;, except it also accepts BigInts as operands.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 100, it equals to 10^2 or Math.pow(10, 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-exponentiation-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;**=&lt;/code&gt;: &lt;strong&gt;Exponentiation Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;It &lt;code&gt;raises the value of a variable&lt;/code&gt; to the power of the right operand.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;**=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="c1"&gt;// 1024, it equals to 2^10 or Math.pow(2, 10)&lt;/span&gt;
&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;**=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 100, it equals to 10^2 or Math.pow(10, 2)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-remainder-modulo"&gt;
  &lt;/a&gt;
  &lt;code&gt;%&lt;/code&gt;: &lt;strong&gt;Remainder (modulo)&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Its returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;More information about modulo in mathematic -&amp;gt; &lt;a href="https://simple.wikipedia.org/wiki/Modulo_operation"&gt;https://simple.wikipedia.org/wiki/Modulo_operation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-remainder-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;%=&lt;/code&gt;: &lt;strong&gt;Remainder Assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It &lt;code&gt;divides a variable by the value of the right operand&lt;/code&gt; and assigns the &lt;code&gt;remainder to the variable&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;%=&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="c1"&gt;// 1 it's equal to a % b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;More information about modulo in mathematic -&amp;gt; &lt;a href="https://simple.wikipedia.org/wiki/Modulo_operation"&gt;https://simple.wikipedia.org/wiki/Modulo_operation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-endraw-increment"&gt;
  &lt;/a&gt;
  &lt;code&gt;++&lt;/code&gt;: &lt;strong&gt;Increment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;It increments (adds one to) its operand and returns a value.&lt;/p&gt;

&lt;p&gt;You can use it in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;pre increment&lt;/code&gt;: It increment the value &lt;strong&gt;before&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 56&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 56&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;post increment&lt;/code&gt;: It increment the value &lt;strong&gt;after&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 56&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-decrement"&gt;
  &lt;/a&gt;
  &lt;code&gt;--&lt;/code&gt;: &lt;strong&gt;Decrement&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★★★☆☆&lt;/p&gt;

&lt;p&gt;It decrement (subtracts one to) its operand and returns a value.&lt;/p&gt;

&lt;p&gt;You can use it in two ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;pre decrement&lt;/code&gt;: It decrement the value &lt;strong&gt;before&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 54&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt; As &lt;code&gt;post decrement&lt;/code&gt;: It decrement the value &lt;strong&gt;after&lt;/strong&gt; the operation
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 54&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bits-operator"&gt;
  &lt;/a&gt;
  Bits operator
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-amp-endraw-bitwise-and"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;&lt;/code&gt;: &lt;strong&gt;Bitwise AND&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Returns a 1 in each bit position for which the corresponding bits of both operands are 1s.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;⚠️ Be careful: Don't be confused between &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator! The &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; is the logical operator AND&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5        // 00000000000000000000000000000101
const b = 3        // 00000000000000000000000000000011

console.log(a &amp;amp; b) // 00000000000000000000000000000001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;💡 Tips: If you need to check if a number is even, you can use &lt;code&gt;numberVar &amp;amp; 1&lt;/code&gt;, if the result is equal to &lt;code&gt;0&lt;/code&gt;, your number is even!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#-raw-amp-endraw-bitwise-and-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;amp;=&lt;/code&gt;: &lt;strong&gt;Bitwise AND assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It uses the binary representation of both operands, does a bitwise AND operation on them and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5      // 00000000000000000000000000000101
a &amp;amp;= 3         // 00000000000000000000000000000011

console.log(a) // 00000000000000000000000000000001
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-not"&gt;
  &lt;/a&gt;
  &lt;code&gt;~&lt;/code&gt;: &lt;strong&gt;Bitwise NOT&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It inverts the bits of its operand. Like other bitwise operators, it converts the operand to a 32-bit signed integer&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5     // 00000000000000000000000000000101
const b = -3    // 11111111111111111111111111111101

console.log(~a) // 11111111111111111111111111111010
// expected output: -6

console.log(~b) // 00000000000000000000000000000010
// expected output: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-or"&gt;
  &lt;/a&gt;
  &lt;code&gt;|&lt;/code&gt;: &lt;strong&gt;Bitwise OR&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It returns a 1 in each bit position for which the corresponding bits of either or both operands are 1s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5        // 00000000000000000000000000000101
const b = 3        // 00000000000000000000000000000011

console.log(a | b) // 00000000000000000000000000000111
// expected output: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-or-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;|=&lt;/code&gt;: &lt;strong&gt;Bitwise OR assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It uses the binary representation of both operands, does a bitwise OR operation on them and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5      // 00000000000000000000000000000101
a |= 3         // 00000000000000000000000000000011

console.log(a) // 00000000000000000000000000000111
// expected output: 7
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-xor"&gt;
  &lt;/a&gt;
  &lt;code&gt;^&lt;/code&gt;: &lt;strong&gt;Bitwise XOR&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It returns a 1 in each bit position for which the corresponding bits of either but not both operands are 1s.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const a = 5        // 00000000000000000000000000000101
const b = 3        // 00000000000000000000000000000011

console.log(a ^ b) // 00000000000000000000000000000110
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-endraw-bitwise-xor-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;^=&lt;/code&gt;: &lt;strong&gt;Bitwise XOR assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;It uses the binary representation of both operands, does a bitwise XOR operation on them and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let a = 5      // 00000000000000000000000000000101
a ^= 3         // 00000000000000000000000000000011

console.log(a) // 00000000000000000000000000000110
// expected output: 6
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltlt-endraw-left-shift"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;: &lt;strong&gt;Left shift&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Shifts the first operand the specified number of bits to the left. Excess bits shifted off to the left are discarded. Zero bits are shifted in from the right.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;// 00000000000000000000000000000101&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;         &lt;span class="c1"&gt;// 00000000000000000000000000000010&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 00000000000000000000000000010100&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-ltlt-endraw-left-shift-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;: &lt;strong&gt;Left shift assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Moves the specified amount of bits to the left and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// 00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="c1"&gt;// 00000000000000000000000000010100&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgt-endraw-right-shift"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;: &lt;strong&gt;Right shift&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded. Copies of the leftmost bit are shifted in from the left.&lt;/p&gt;

&lt;p&gt;Since the new leftmost bit has the same value as the previous leftmost bit, the sign bit (the leftmost bit) does not change. Hence the name "sign-propagating".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000010&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;// -00000000000000000000000000000010&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgt-endraw-right-shift-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;: &lt;strong&gt;Right shift assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Moves the specified amount of bits to the right and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;      &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;        &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;        &lt;span class="c1"&gt;// -00000000000000000000000000000010&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: -2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgtgt-endraw-unsigned-right-shift"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;: &lt;strong&gt;Unsigned Right shift&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Shifts the first operand the specified number of bits to the right. Excess bits shifted off to the right are discarded.&lt;/p&gt;

&lt;p&gt;Zero bits are shifted in from the left.&lt;/p&gt;

&lt;p&gt;The sign bit becomes 0, so the result is always non-negative. Unlike the other bitwise operators, zero-fill right shift returns an unsigned 32-bit integer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;          &lt;span class="c1"&gt;//  00000000000000000000000000000010&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//  00111111111111111111111111111110&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1073741822&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#-raw-gtgtgt-endraw-unsigned-right-shift-assignment"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/code&gt;: &lt;strong&gt;Unsigned Right shift assignment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Popularity: ★☆☆☆☆&lt;/p&gt;

&lt;p&gt;Moves the specified amount of bits to the right and assigns the result to the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;//  00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;  &lt;span class="c1"&gt;//  00000000000000000000000000000001&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="c1"&gt;// -00000000000000000000000000000101&lt;/span&gt;

&lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;   &lt;span class="c1"&gt;//  00111111111111111111111111111110&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;// expected output: 1073741822&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>React SketchBoard DevLog #1 - Drawing with mouse, color and width selection and panning.</title>
      <author>NordicBeaver</author>
      <pubDate>Thu, 18 Nov 2021 18:01:11 +0000</pubDate>
      <link>https://dev.to/nordicbeaver/react-sketchboard-devlog-1-drawing-with-mouse-color-and-width-selection-and-panning-5h3o</link>
      <guid>https://dev.to/nordicbeaver/react-sketchboard-devlog-1-drawing-with-mouse-color-and-width-selection-and-panning-5h3o</guid>
      <description>&lt;p&gt;Recently I started developing a react library for drawing in a browser. It turned out that it's not as trivial as it seemed and there is a lot of cool stuff and interesting problems there. So I decided to do a DevLog and share those thing with you.&lt;/p&gt;

&lt;p&gt;I hope you'll enjoy!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/aoPAq-hC0J8"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Beyond Compliance: Fable’s Mission to Improve Digital Accessibility</title>
      <author>Conor Bronsdon</author>
      <pubDate>Thu, 18 Nov 2021 17:58:08 +0000</pubDate>
      <link>https://dev.to/linearb/beyond-compliance-fables-mission-to-improve-digital-accessibility-42c7</link>
      <guid>https://dev.to/linearb/beyond-compliance-fables-mission-to-improve-digital-accessibility-42c7</guid>
      <description>&lt;p&gt;&lt;iframe width="100%" height="232px" src="https://open.spotify.com/embed/episode/7IQ1IE06x2p2X65atJ9NJx"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It's time we recognize that the way we build digital products is broken. That's because the products we use today represent the people who build them more than the people who use them.&lt;/p&gt;

&lt;p&gt;There is a digital divide between the experiences of people with disabilities and people who are able-bodied. Bridging this divide is about more than compliance or checking a box.&lt;/p&gt;

&lt;p&gt;Fable is helping companies practice accessibility at scale with the goal of operationalizing accessibility in the same way we already do for things like DesignOps and DevOps.&lt;/p&gt;

&lt;p&gt;Listen as Fable's CEO and Co-founder, Alwar Pillai, and Fable's Engineering Manager, Perry Trinier, talk about the importance of inclusive design, the need for digital accessibility and how to integrate accessibility into the development process.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#episode-highlights-include"&gt;
  &lt;/a&gt;
  Episode Highlights Include:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Fable's founding story and mission&lt;/li&gt;
&lt;li&gt;The need and importance of inclusive design&lt;/li&gt;
&lt;li&gt;How engineering orgs can improve accessibility&lt;/li&gt;
&lt;li&gt;Making your tech stack more accessible&lt;/li&gt;
&lt;li&gt;Why everyone benefits from inclusive design&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#check-out-the-full-episode-on-our-youtube-channel"&gt;
  &lt;/a&gt;
  Check out the full episode on our YouTube channel:
&lt;/h2&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/CWxatwjSvqs"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-dev-interrupted-community"&gt;
  &lt;/a&gt;
  Join the Dev Interrupted Community
&lt;/h2&gt;

&lt;p&gt;With over 2000 members, the Dev Interrupted Discord Community is the best place for Engineering Leaders to engage in daily conversation. No sales people allowed. &lt;a href="https://discord.com/invite/devinterrupted"&gt;Join the community &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--px9A6zn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w088uiz5p6ekz7arxfvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--px9A6zn7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w088uiz5p6ekz7arxfvi.png" alt="https://discord.com/invite/devinterrupted" width="880" height="182"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Full transcription available at &lt;a href="https://devinterrupted.com/podcast/beyond-compliance-fables-mission-to-improve-digital-accessibility/"&gt;DevInterrupted.com&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>devops</category>
      <category>techtalks</category>
      <category>inclusion</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Data Structures 101</title>
      <author>Max Anselmo</author>
      <pubDate>Thu, 18 Nov 2021 17:56:20 +0000</pubDate>
      <link>https://dev.to/themanselmo/data-structures-101-4h01</link>
      <guid>https://dev.to/themanselmo/data-structures-101-4h01</guid>
      <description>&lt;p&gt;&lt;strong&gt;Welcome to Data Structures 101!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here we will cover a basic overview of concepts you'll need to get started mastering your skills of structuring data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;br&gt;
The Array is the most basic data structure, which we will actually use to construct some of the next structures later in this post!&lt;br&gt;
An array is simply a list of something, for example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Shopping List: Onion, Garlic, Carrots, Milk, Eggs

let shoppingList = ["Onion", "Garlic", "Carrots", "Milk", "Eggs"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Rules for adding items to an array are pretty loose, and elements can usually be added in any order, but this differs for other data structures.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;br&gt;
The Queue is similar to an array in that it is a list, however when adding or removing things to a queue, we have to follow a "&lt;strong&gt;first&lt;/strong&gt; in, &lt;strong&gt;first&lt;/strong&gt; out" order of operations.&lt;br&gt;
Meaning, the &lt;strong&gt;first&lt;/strong&gt; item we insert into a queue, will be the &lt;strong&gt;first&lt;/strong&gt; item to be removed from a queue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gfBqZjvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2011/6/15/1308149463745/People-Waiting-in-Line-Ou-005.jpg%3Fwidth%3D620%26quality%3D85%26auto%3Dformat%26fit%3Dmax%26s%3D51f7746a7aff7ce2dbbe76d0d6d25912" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gfBqZjvG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.guim.co.uk/img/static/sys-images/Guardian/About/General/2011/6/15/1308149463745/People-Waiting-in-Line-Ou-005.jpg%3Fwidth%3D620%26quality%3D85%26auto%3Dformat%26fit%3Dmax%26s%3D51f7746a7aff7ce2dbbe76d0d6d25912" alt="Image description" width="460" height="276"&gt;&lt;/a&gt;&lt;br&gt;
Think of a queue of people waiting in line...&lt;br&gt;
The first person in line is going to be the first person to leave the line!&lt;br&gt;
This means when adding or removing elements from the queue, we are limited to this same way of thinking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;br&gt;
The Stack is also similar to an array, and a brother/sister to the queue, however when adding or removing things to a stack, we have to follow a "&lt;strong&gt;first&lt;/strong&gt; in, &lt;strong&gt;last&lt;/strong&gt; out" order of operations.&lt;br&gt;
Meaning, the &lt;strong&gt;first&lt;/strong&gt; item we insert into a queue, will be the &lt;strong&gt;last&lt;/strong&gt; item to be removed from a queue.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OCQV9vzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.williams-sonoma.com/wp-content/uploads/2020/02/stack-pancakes-blog-post-1000px-680x680.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OCQV9vzF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/http://blog.williams-sonoma.com/wp-content/uploads/2020/02/stack-pancakes-blog-post-1000px-680x680.jpg" alt="Image description" width="680" height="680"&gt;&lt;/a&gt;&lt;br&gt;
Think of a stack of pancakes! &lt;br&gt;
The first pancake added to the plate is going to be the last one to be removed (granted you eat them top to bottom and not just slice through all of the pancakes at once...).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;br&gt;
The Linked List is where things begin to get a little abstract. This structure consists of an element (or node) that has a variable in it that &lt;em&gt;points&lt;/em&gt; to another element in memory. So rather than being contained inside of something like an array, these elements are connected via their own pointer variable that relates them to one another.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3ACvSqMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/970/1%2Af2oDQ0cdY54olxCFOIMIdQ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3ACvSqMB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/970/1%2Af2oDQ0cdY54olxCFOIMIdQ.png" alt="Image description" width="880" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linked lists can be singly linked, meaning they have a head element that points to the next element, and the next, and so on until the reaching an element that has a pointer to NULL.&lt;br&gt;
They can also be doubly linked, meaning each element has a next and previous pointer to their respective next and previous elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tree&lt;/strong&gt;&lt;br&gt;
A tree structure is sort of similar to a linked list in that its elements point to each other in memory, although here instead of having a next and/or previous variable pointing to an element, it has a left and/or right child element. This indicates whether the element being pointed to is to the left or right of said element.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7NQVUqmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.thecrazyprogrammer.com/wp-content/uploads/2019/09/General-Tree-Structure.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7NQVUqmD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.thecrazyprogrammer.com/wp-content/uploads/2019/09/General-Tree-Structure.png" alt="Image description" width="570" height="346"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that is the end of Data Structures 101!&lt;br&gt;
There is a LOT more to learn about each of these structures and the pros and cons of each, but this is just a basic overview to get your digital feet wet.&lt;/p&gt;

&lt;p&gt;Here's some links to additional sources on the topic:&lt;br&gt;
&lt;a href="https://www.tutorialspoint.com/data_structures_algorithms/index.htm"&gt;tutorialspoint: data_structures_algorithms&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>computerscience</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>AWS Cognito Pricing and Features – 2021</title>
      <author>Shivang Chauhan</author>
      <pubDate>Thu, 18 Nov 2021 17:45:08 +0000</pubDate>
      <link>https://dev.to/shivangchauhan7/aws-cognito-pricing-and-features-2021-1ef6</link>
      <guid>https://dev.to/shivangchauhan7/aws-cognito-pricing-and-features-2021-1ef6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-amazon-cognito"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What Is Amazon Cognito?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;It is a service introduced by AWS (Amazon Web Services) which allows users to add authentication to projects, it allows users to sign in with different social identity providers, and scales to millions of users and requests.&lt;/p&gt;

&lt;p&gt;It supports access management standards like OAuth and SAML, users do not have to worry about setting up a UI for authentication as it provides a built-in UI that can be integrated with any application very quickly, this UI can also be customized according to specific requirements of the company.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aws-cognito-pricing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;AWS Cognito Pricing&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;**DISCLAIMER**&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As of today when writing this post, which is &lt;strong&gt;&lt;em&gt;Thursday, November 18, 2021, GMT+0530&lt;/em&gt;&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;(India Standard Time),&lt;/em&gt;&lt;/strong&gt; this is the pricing model for Amazon Cognito.&lt;/p&gt;

&lt;p&gt;For Cognito User Pools Amazon charges on the basis of how many users are active within a month, they call those users MAU (Monthly Active Users), a user is counted as MAU if there is any authentication operation done through that user in a particular month, authentication operations like SignIn, SignUp, Password Change, Refreshing the auth token, any user attribute gets updated in the user pool.&lt;/p&gt;

&lt;p&gt;For users who use enterprise directory through SAML federation to SignIn, there is a different pricing model set by Amazon.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#free-tier-pricing"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Free Tier Pricing&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;50,000 MAU’s for Cognito User Pool users and 50 MAU for users federated through SAML 2.0 based identity providers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-for-users-who-use-user-pool-credentials-or-social-identity-providers-to-signin"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pricing For Users Who Use User Pool Credentials or social Identity Providers To SignIn&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This pricing data is for &lt;strong&gt;&lt;em&gt;US-EAST (Ohio)&lt;/em&gt;&lt;/strong&gt; AWS region.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7n8qJ2VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devswisdom.com/wp-content/uploads/2021/11/aws-cognito-pricing-1-1024x253.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7n8qJ2VJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://devswisdom.com/wp-content/uploads/2021/11/aws-cognito-pricing-1-1024x253.png" alt="aws-cognito-pricing-table" width="880" height="217"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pricing-for-users-who-use-saml-or-oidc-federation-to-signin"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Pricing For Users Who Use SAML or OIDC Federation To SignIn&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;For these types of users, pricing is set to &lt;strong&gt;$0.015&lt;/strong&gt; above the 50 MAU free tier.&lt;/p&gt;

&lt;p&gt;Check the official &lt;a href="https://aws.amazon.com/cognito/pricing/"&gt;AWS Pricing Documentation&lt;/a&gt; for more information or for current accurate numbers related to AWS Cognito Pricing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#features"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Features&lt;/strong&gt;
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#password-security"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Password Security&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;When we are using Amazon Cognito, we as a developer don’t need to worry about doing the password management for our users, meaning we don’t need to Hash, Encrypt/Decrypt passwords, store them because all this is handled by Cognito itself. It stores your passwords following all the top standards for authentication.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#builtin-ui"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Built-in UI&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;It offers users a built-in UI to quickly start with, we can use hosted web UI to quickly launch an authentication-based frontend application which will give us options to SignUp, SignIn, Password Change, and much more, read this &lt;a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-app-integration.html"&gt;AWS official documentation&lt;/a&gt; to know more.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rolebased-access-control"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Role-Based Access Control&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This is one of the greatest features of AWS Cognito, it provides us to do role-based access control for users, it gives us an option to assign different roles with customized privileges, AWS IAM is used to control these roles, different roles can be given to users to access a particular AWS resource, it also provides an option to set default permissions for not authenticated users, read this &lt;a href="https://docs.aws.amazon.com/cognito/latest/developerguide/role-based-access-control.html"&gt;AWS official documentation&lt;/a&gt; to know more.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;All this information mentioned in this post can be outdated at the time someone is reading this, so please regarding these sensitive topics it is always a good idea to refer to the official documentation, this post is just meant to give a brief introduction to the different topics related to Amazon Cognito, finally, this service is an amazing way to delegate the process of authentication to AWS and focus on other parts of the application without having to worry about things like scalability and authentication security.&lt;/p&gt;

&lt;p&gt;The post &lt;a href="https://devswisdom.com/aws-cognito-pricing-and-features-2021/"&gt;AWS Cognito Pricing and Features – 2021&lt;/a&gt; appeared first on &lt;a href="https://devswisdom.com"&gt;DevsWisdom&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>webdev</category>
      <category>serverless</category>
      <category>security</category>
    </item>
    <item>
      <title>Let's not send developers to the accessibility tree tool</title>
      <author>Christian Heilmann</author>
      <pubDate>Thu, 18 Nov 2021 17:34:14 +0000</pubDate>
      <link>https://dev.to/codepo8/lets-not-send-developers-to-the-accessibility-tree-tool-52ch</link>
      <guid>https://dev.to/codepo8/lets-not-send-developers-to-the-accessibility-tree-tool-52ch</guid>
      <description>&lt;p&gt;Testing for accessibility is an incredibly important part of your development process. Products that don't block out users because of easy to avoid issues have more success. And the longer you wait with fixing accessibility problems, the harder it gets. That's why it is annoying when it is hard to find out about accessibility problems.&lt;/p&gt;

&lt;p&gt;Tooling in the accessibility space has gone leaps and bounds in the last years. Screenreaders, high contrast modes and other assistive tools are part of the operating systems. Most even come with in-built tutorials to get you started. &lt;/p&gt;

&lt;p&gt;In the browser tooling space a lot of tutorials on accessibility testing send you to an "Accessibility tab". This is a display of the Accessibility tree and unless you are already in the know, feels rudimentary and daunting. For people who know what to look for, it is exactly what they need, but it feels like a wasted opportunity to get people into accessibility testing. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_kzZEFt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dot30qkpuwh21nr8chl5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_kzZEFt9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dot30qkpuwh21nr8chl5.png" alt="The accessibility tree tool in browser Developer Tools" width="866" height="662"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't think accessibility tooling should be exclusive to accessibility experts. Accessibility is an integral part of any product. That's why accessibility problem reporting should happen where people develop products. &lt;/p&gt;

&lt;p&gt;And it already does. I &lt;a href="https://christianheilmann.com/2021/01/11/seven-ways-to-test-for-accessibility-of-your-web-site-with-browser-developer-tools/"&gt;wrote about this in detail&lt;/a&gt; back in January, and I even have a &lt;a href="https://skl.sh/3eCFWRR"&gt;Skillshare course explaining this&lt;/a&gt; , but here is a quick refresher:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#accessibility-information-in-the-inspector-overlay"&gt;
  &lt;/a&gt;
  Accessibility information in the Inspector overlay
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pcwpHr9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3omvih124qh5dofuv0p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pcwpHr9K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r3omvih124qh5dofuv0p.png" alt="Inspector overlay showing all kind of accessibility information" width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Inspector tool allows you to move your mouse around the document and find out a lot about each element. The on-screen overlay shows you: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How the element is positioned (flexbox or grid showing as an appropriate icon)&lt;/li&gt;
&lt;li&gt;The name of the element, such as a, h1, or div.&lt;/li&gt;
&lt;li&gt;The dimensions of the element, in pixels.&lt;/li&gt;
&lt;li&gt;The colour, as a colour swatch and a formatted value.&lt;/li&gt;
&lt;li&gt;Font information (size and font families).&lt;/li&gt;
&lt;li&gt;Margin and padding, in pixels.&lt;/li&gt;
&lt;li&gt;The contrast of the element and if it is enough (checkbox) or an accessibility problem (exclamation mark)&lt;/li&gt;
&lt;li&gt;The name and the role of the element in the accessibility tree&lt;/li&gt;
&lt;li&gt;If the element is keyboard focusable (checkbox) or not (circle with line through it)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That's a lot more actionable information than the Accessibility tool gives you and you can immediately act on it inside the Elements tool. A button that isn't keyboard accessible is broken, and you find it out by inspecting it. A DIV disguised as a button without keyboard functionality won't even show up in the accessibility tree, which also means that it is broken, but you wouldn't know about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#issue-reporting-in-the-elements-tool-source-code"&gt;
  &lt;/a&gt;
  Issue reporting in the Elements tool source code
&lt;/h2&gt;

&lt;p&gt;The Elements tool highlights HTML elements with issues (accessibility or browser compatibility) by showing a wavy underline. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---hd8U9fO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vbzivnsqjpdveapbv10.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---hd8U9fO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6vbzivnsqjpdveapbv10.png" alt="HTML in the Elements Tool showing a wavy underline" width="880" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you shift-click these, you get to the Issues tool that describes the problem and explains how to fix it with "Further reading" links, although the issue report should be self-explanatory.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--72F9SvME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkhjun71ol4hs8556epv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--72F9SvME--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vkhjun71ol4hs8556epv.png" alt="The issues tool showing what the problem is and how to fix it" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also always go to the Issues tool directly clicking the issues counter in DevTools. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ztbgpw7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pumllow9dd2l75w0tmld.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ztbgpw7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pumllow9dd2l75w0tmld.png" alt="Issues counter and tool open" width="880" height="543"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#live-issue-reporting-in-visual-studio-code"&gt;
  &lt;/a&gt;
  Live issue reporting in Visual Studio Code
&lt;/h2&gt;

&lt;p&gt;These are all reporting tools that kick in after you deployed your product. If you use the &lt;a href="https://aka.ms/devtools-for-code"&gt;Edge Tools for Visual Studio Code&lt;/a&gt; extension, you get the reporting as you write your code. If you - for example - add an image without an alternative text alt attribute, Visual Studio code rightfully adds a wavy underline and explains to you that you should add one. &lt;/p&gt;

&lt;p&gt;You can see this feature in the following video on YouTube:&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/oDVd-SMoNjk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-meet-developers-where-they-are-and-show-them-what-needs-fixing"&gt;
  &lt;/a&gt;
  Let's meet developers where they are and show them what needs fixing
&lt;/h2&gt;

&lt;p&gt;Developers are busy people and we hope that by bringing accessibility information right to the tools they already use we get people to embrace the issue more. &lt;/p&gt;

&lt;p&gt;You can read more in the &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/accessibility/accessibility-testing-in-devtools"&gt;overview of accessibility testing in DevTools&lt;/a&gt; article and we also provide &lt;a href="https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/accessibility/reference"&gt;a list of accessibility issues and which tool to use to test&lt;/a&gt; for these.&lt;/p&gt;

&lt;p&gt;Do you think anything is missing? How can we be even better in doing that?&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>development</category>
      <category>debugging</category>
    </item>
    <item>
      <title>Mesmerizing animation using only CSS rotations 🧘‍♀️</title>
      <author>Mustapha Aouas</author>
      <pubDate>Thu, 18 Nov 2021 17:30:35 +0000</pubDate>
      <link>https://dev.to/mustapha/mesmerizing-animation-using-only-css-rotations-229l</link>
      <guid>https://dev.to/mustapha/mesmerizing-animation-using-only-css-rotations-229l</guid>
      <description>&lt;p&gt;I created an oddly satisfying CSS animation on codepen, using only rotations. It turns out it went a little bit viral on Reddit so I decided to share how I did it here :)&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/TheAngularGuy/embed/oNedJQW?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1"&gt;
  &lt;/a&gt;
  Step 1
&lt;/h2&gt;

&lt;p&gt;Let's skip the intro that no one ever read and jump right into it. The first step is to create a yin yang using CSS. &lt;br&gt;
Because a picture is worth a thousand words, take a look at the illustration below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fx33-8pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r32rpvjsa5a3ab7kpj5m.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fx33-8pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r32rpvjsa5a3ab7kpj5m.gif" alt="animation 1" width="880" height="372"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have the main circle which is a &lt;code&gt;div&lt;/code&gt; and the two small circles are the &lt;code&gt;::before&lt;/code&gt; and &lt;code&gt;::after&lt;/code&gt; pseudo-elements of the &lt;code&gt;div&lt;/code&gt;. The three elements have a &lt;code&gt;border-radius&lt;/code&gt; of 50% to be circles.&lt;/p&gt;

&lt;p&gt;The main div has a &lt;code&gt;background-image&lt;/code&gt; set to this &lt;code&gt;linear-gradient&lt;/code&gt;: &lt;code&gt;(to left, #fff, #fff 50%, #000 50%, #000)&lt;/code&gt;. With this, the div should be half white half black.&lt;/p&gt;

&lt;p&gt;For the two other circles, they have a big &lt;code&gt;border-width&lt;/code&gt;, and their &lt;code&gt;border-color&lt;/code&gt; is the opposite of their background color (eg. white circle with black border). That way we don't need too many html elements and it's easier to place them in the center (one on top of the other).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this, it could be a good exercise to try to do the rest of the animation on your own. You can come back here to compare the implementations ;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;
  &lt;a href="#step-2"&gt;
  &lt;/a&gt;
  Step 2
&lt;/h2&gt;

&lt;p&gt;Next, we need a container &lt;code&gt;div&lt;/code&gt; (also half black half white) and another yin yang (the two should be placed one on top of the other). Have a look:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J-BRPV0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhu59q0iymdnopzq3gzk.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J-BRPV0x--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zhu59q0iymdnopzq3gzk.gif" alt="animation 2" width="880" height="515"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3"&gt;
  &lt;/a&gt;
  Step 3
&lt;/h2&gt;

&lt;p&gt;At this point we are almost done, all we have to do is to animate the yin yangs in the opposite direction of the container &lt;code&gt;div&lt;/code&gt;. For that we can use the &lt;code&gt;animation-direction&lt;/code&gt; CSS property and set it to &lt;code&gt;reverse&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The CSS animation looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@keyframes&lt;/span&gt; &lt;span class="n"&gt;roll&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;from&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-360deg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pRAqmeQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4xyi1iz7wdglpu5lxge.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pRAqmeQA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y4xyi1iz7wdglpu5lxge.gif" alt="animation 3" width="880" height="515"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is the final code:&lt;br&gt;
&lt;iframe height="600" src="https://codepen.io/TheAngularGuy/embed/oNedJQW?height=600&amp;amp;default-tab=css&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;
That's it for this post. I hope you liked it. If you did, please share it with your friends &amp;amp; colleagues and follow me on Twitter at &lt;a href="https://twitter.com/TheAngularGuy"&gt;@theAngularGuy&lt;/a&gt; where I tweet about web development and computer science.&lt;/p&gt;

&lt;p&gt;Have a nice day!&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-to-read-next"&gt;
  &lt;/a&gt;
  What to read next?
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/mustapha" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rogKjLRP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--tXIALQ8l--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/174804/cb831252-9db8-4f7a-a600-0bf8db47b92f.png" alt="mustapha"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/mustapha/7-amazing-css-properties-you-may-not-know-yet-eej" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;7 amazing CSS properties you may not know  (yet)&lt;/h2&gt;
      &lt;h3&gt;Mustapha Aouas ・ Apr 20 '20 ・ 5 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#webdev&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#design&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



</description>
      <category>css</category>
      <category>html</category>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>does this show on cra</title>
      <author>Greg Ross</author>
      <pubDate>Thu, 18 Nov 2021 17:06:27 +0000</pubDate>
      <link>https://dev.to/gregrossdev/does-this-show-on-cra-46n4</link>
      <guid>https://dev.to/gregrossdev/does-this-show-on-cra-46n4</guid>
      <description></description>
    </item>
    <item>
      <title>Mailing a Postcard with JavaScript Part 1</title>
      <author>Lob</author>
      <pubDate>Thu, 18 Nov 2021 16:57:50 +0000</pubDate>
      <link>https://dev.to/lob/mailing-a-postcard-with-javascript-part-1-175h</link>
      <guid>https://dev.to/lob/mailing-a-postcard-with-javascript-part-1-175h</guid>
      <description>&lt;h2&gt;
  &lt;a href="#creating-a-postcard-with-lob-and-nodejs"&gt;
  &lt;/a&gt;
  Creating a Postcard with Lob and Node.js
&lt;/h2&gt;

&lt;p&gt;Lob’s Print &amp;amp; Mail and Address Verification APIs enable developers to interact with Lob’s services programmatically. You can mail a postcard or letter to your customers at critical points in their journey as easily as you might send an email. These physical reminders help you keep in touch with clients, and encourage clients to keep purchasing your products and services.   &lt;/p&gt;

&lt;p&gt;In this three-part tutorial, we’ll create a postcard template, verify our recipient’s address, send a postcard, and track it along its journey. We’ll create a Javascript application to do all this, so our users can access everything they need in one place. &lt;/p&gt;

&lt;p&gt;Complete code for tutorial &lt;a href="https://github.com/lob/lob-node-examples/tree/main/sending-postcard-with-js-part1"&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To follow along, you’ll need your own Lob account. You can &lt;a href="https://dashboard.lob.com/#/register?utm_source=devto&amp;amp;utm_medium=blog&amp;amp;utm_campaign=devrel_tutorial_postcard"&gt;sign up&lt;/a&gt; here and find your API keys in your settings. Take a note of the secret and the publishable API keys. We’ll use the publishable key any time we interact with Lob from the frontend and the secret key anywhere we access the Lob API from the backend.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l0Kgn4Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa2seq57cd450b4tt9iu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l0Kgn4Bp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xa2seq57cd450b4tt9iu.png" alt="Image description" width="880" height="533"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lob’s APIs are well documented, and we can &lt;a href="https://www.github.com/lob/"&gt;choose from SDKs&lt;/a&gt; in various languages. We’ll focus on Node.js in this series, but the overall approach will work in whichever language you choose.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#our-template-creation-app"&gt;
  &lt;/a&gt;
  Our template creation app
&lt;/h2&gt;

&lt;p&gt;Our app comprises two parts: a Vue frontend and a Node backend. In this part of our tutorial, we’ll enable our users to create postcard templates that they can later use to send physical postcards to their customers.&lt;/p&gt;

&lt;p&gt;Our users will create the template with HTML and CSS then store it on the Lob server. This template has the layout and text ready to send to all our user’s customers. Once we submit these templates to Lob, we can use them as many times as we’d like. We could send hundreds — or even thousands — of postcards from a single template.&lt;/p&gt;

&lt;p&gt;Let’s start creating our application by giving our users the ability to build and submit their own templates. In this tutorial, we’ll use one of &lt;a href="https://www.lob.com/template-gallery#postcards"&gt;Lob’s example postcard templates&lt;/a&gt; and allow our users to change the background picture and text.&lt;/p&gt;

&lt;p&gt;Creating the application’s Vue front end&lt;br&gt;
First, let’s instantiate a new Vue application using Vite:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;
&lt;br&gt;
Let’s name our project and select Vue. We won’t use TypeScript.

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0GyMpjWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84eigxqwy9q5v5rhb4si.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0GyMpjWq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/84eigxqwy9q5v5rhb4si.png" alt="Image description" width="880" height="358"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We follow the instructions Vite displays on our screen to install the dependencies and get the starter site up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lwa7bAEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9tkgyhjq3mi21beywim.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lwa7bAEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/s9tkgyhjq3mi21beywim.png" alt="Image description" width="880" height="396"&gt;&lt;/a&gt;         &lt;/p&gt;

&lt;p&gt;Point your browser to localhost:3000 to see the boilerplate app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FqyfSlZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8lc6xws70hhjjd60h19.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FqyfSlZf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k8lc6xws70hhjjd60h19.png" alt="Image description" width="728" height="774"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before we start making our application, create a file called .env to save our environment variables. The Vite framework exposes environment variables that have a “VITE_” prefix. For more information on this, read the Vite documentation. As a developer, you never want to make a commit to Github that contains sensitive login information. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#save-your-env-file-in-the-root-folder"&gt;
  &lt;/a&gt;
  Save your .env file in the root folder.
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, let’s create a new component for our front template, Front.vue, and add the template and styling based on one of Lob’s examples. Specifically, we look at the front of the Product Promotion postcard. We will replace the default HelloWorld component with the new Front component in the App.vue file. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srcappvue"&gt;
  &lt;/a&gt;
  src/App.vue
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#srccomponentsfrontvue"&gt;
  &lt;/a&gt;
  src/components/Front.vue
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f3MYjQ_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn4qws5epugp1hmlg7y1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f3MYjQ_f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nn4qws5epugp1hmlg7y1.png" alt="Image description" width="789" height="643"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We want to allow our users to change each of these elements. We’ll use the Vue composition API to help us do that.&lt;/p&gt;

&lt;p&gt;We add a &amp;lt;script setup&amp;gt; tag to our component and set up some reactive variables. We then set the default values to those the template already uses, so nothing changes on the frontend when we update the template.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we have reactive values, we need to give our users some way to interact with those values. We use the v-model to create a two-way binding between the input and the reactive value for the header and logo text. As we type into these fields, we’ll be able to see the form updating.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TrnFL2Ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/275lloa0ovzxvammcp60.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TrnFL2Ax--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/275lloa0ovzxvammcp60.png" alt="Image description" width="791" height="881"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We then upload the image to a third-party service, like Cloudinary. Cloudinary has a helpful library that provides the upload modal, handles the cloud storage, and provides a URL we can pass into our template.&lt;/p&gt;

&lt;p&gt;We first need to add the script import for Cloudinary to our main index.html file right above the “main.js” script tag that holds our Vue app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;When we instantiate the Cloudinary script, it adds a cloudinary library with an openUploadWidget to our window object. &lt;/p&gt;

&lt;p&gt;Let’s create a handler function to open the widget and update our state when the widget completes. To follow along, sign up for &lt;a href="https://cloudinary.com/users/register/free"&gt;Cloudinary&lt;/a&gt; to get your cloud name and &lt;a href="https://cloudinary.com/documentation/upload_presets"&gt;upload preset&lt;/a&gt;. Put these values in the .env file we created earlier. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, we add a button to our template that will trigger this widget when the user clicks.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The next tasks we need to tackle is to bring some routing to our Vue app. After saving the postcard template, we want the app to redirect to another page that will list all of the templates that we have saved.   &lt;/p&gt;

&lt;p&gt;Add the vue-router package to our project by running the following command: “npm install --save vue-router@4”. Create a new file under src/router/index.js and add the following:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Since we are missing the ListTemplates component, let’s create a stub of this for this time being.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;The last step we need to do is put a reference to the router in the main.js file and update the App.vue component to use the router.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#srcmainjs"&gt;
  &lt;/a&gt;
  src/main.js
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#srcappvue"&gt;
  &lt;/a&gt;
  src/App.vue
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now, we add our template name. Then, we send the template information to our backend.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let’s next hop over to the backend and get our route ready to receive this information.       &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-the-applications-node-backend"&gt;
  &lt;/a&gt;
  Creating the application’s Node backend
&lt;/h2&gt;

&lt;p&gt;To create our back end, we will create a new folder called “backend.” After changing into this directory, we will create a package.json file with the following contents:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;This package.json file lists our dependencies --  express web framework to structure our app; dotenv to keep our environment variables secret; cors to handle data sent to our front end; and nodemon to restart our server every time we save. We added "type": "module" to our package.json to use esm import and export. Run the command “npm install” to install all of our dependencies.&lt;/p&gt;

&lt;p&gt;Let’s next create an index.js file and add a basic web server setup. We also make and import router.js to organize our routes.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#indexjs"&gt;
  &lt;/a&gt;
  index.js
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#routerjs"&gt;
  &lt;/a&gt;
  router.js
&lt;/h3&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;After we set this up, we will need to create a .env file that will hold our Lob API test key. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’ll be sending the variables as query parameters from Vue to our backend. We have the replicated template on the back end and populate it with the user’s front-end data.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We’re effectively adding dynamic values to a large template literal. We’ll use node-fetch, a Node implementation of the browser fetch API, to send our data to Lob. We need to encode the data and identify ourselves with the API correctly. Let’s modify the createTemplateHandler function to add the call to Lob API. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;To keep the third-party packages to a minimum, we use Node’s UrlSearchParams rather than a package such as form-data. UrlSearchParams also sets the headers we need automatically.&lt;br&gt;&lt;br&gt;
We append our description and HTML parameters to the data we send to Lob, then prepare our headers. We use a basic username and password to authenticate ourselves with the Lob API. The username should be our API key, which we get from the environment variable LOB_SECRET_API_KEY, and the password should be blank. This configuration is the same as setting an Authorization header, as the code above shows.&lt;/p&gt;

&lt;p&gt;Once our authentication is successful, we send a message back to our Vue application to let it know we’re done.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we’ve created the template, we make a route to list our templates and consume the route on the frontend. In Node, we use a straightforward GET request using node-fetch:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Now that we have the functionality to grab our saved templates from the Lob API, let’s add that endpoint to the Express app. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;We authenticate ourselves in the same way, then pass that data on to our clients. We want to get that data in Vue and display it to our users. We fetch and process the data using the onMounted function. We then update our reactive value, which triggers our template to rerender. So let’s update the ListTemplates component that we stubbed out earlier.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Using the v-for directive, we iterate over the templates and destructure the more relevant values.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h0-DnDml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlyae2anynt04wa17xyh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h0-DnDml--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zlyae2anynt04wa17xyh.png" alt="Image description" width="832" height="712"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next steps
&lt;/h2&gt;

&lt;p&gt;In this part of the tutorial, we’ve built our application to enable users to create and view templates in Lob. We have the &lt;a href="https://github.com/lob/lob-node-examples/tree/main/sending-postcard-with-js-part1"&gt;project code saved here&lt;/a&gt; for you to review as you carry on to the next part of this tutorial. Next time, we’ll use these templates to send our real-life postcards, changing bits to atoms.&lt;/p&gt;

&lt;p&gt;A well-designed postcard can enhance the relationship between your customers and your brand. &lt;a href="https://www.lob.com/print-mail"&gt;Try Lob’s Print &amp;amp; Mail API&lt;/a&gt; yourself now, or continue to the second part of this tutorial to learn how to verify an address before sending a postcard.&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>javascript</category>
      <category>node</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Prepare for AWS Developer Associate exam (for free?)</title>
      <author>Natalia Marek</author>
      <pubDate>Thu, 18 Nov 2021 16:51:39 +0000</pubDate>
      <link>https://dev.to/aws-builders/prepare-for-aws-developer-associate-exam-for-free-3fnh</link>
      <guid>https://dev.to/aws-builders/prepare-for-aws-developer-associate-exam-for-free-3fnh</guid>
      <description>&lt;p&gt;I have decided to write up a guide on what resources I have used when preparing for the AWS exam, because I have gone through a variety of them before finding the right ones. Additionally, as AWS Developer Associate was my first AWS exam to take, I will write this post from that perspective. Last but certainly not list, I would also like to make this guide as accessible from economic perspective as possible, so majority of resources mentioned here are completely free to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RuNeOa6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fx79qrtbx7t9m6mlyr6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RuNeOa6Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8fx79qrtbx7t9m6mlyr6.png" alt="download" width="512" height="512"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-long-should-i-prepare"&gt;
  &lt;/a&gt;
  How long should I prepare?
&lt;/h3&gt;

&lt;p&gt;The answer to that is - of course - it depends! I have started using AWS in September and sat down to take the exam in July, which makes it around 10 months, but this can easily be done in around 2-3 months - it all depends on the amount of time you have available for learning, and how often you get to work using AWS, and whether you have taken any AWS exams before. &lt;/p&gt;

&lt;p&gt;Especially with the last in mind - if this is not your first AWS exam, you would have gotten used to the way exam questions are phrased, and you would have covered some of the material if you have passed the AWS Solutions Architect Associate exam.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resources-available-for-free"&gt;
  &lt;/a&gt;
  Resources available for free
&lt;/h3&gt;

&lt;p&gt;I would like to start with and mainly focus on resources available, because in my opinion they are absolutely enough to prepare you well for the exam, especially if combined with practical usage of AWS tools and technologies in your everyday work.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://www.youtube.com/watch?v=RrKRN9zRBWs"&gt;AWS Certified Developer - Associate 2020 from FreeCodeCamp and created by Andrew Brown&lt;/a&gt; - this is a very comprehensive 16 hours course, in my opinion better than some paid courses. &lt;a href="https://dev.to/andrewbrown"&gt;Andrew Brown&lt;/a&gt; goes through and covers all the services in detail and at the end of each section there is a cheat sheet/summary available, that I found extremely helpful for the revision just before the exam.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://cloudacademy.com/webinars/"&gt;Cloud Academy webinars&lt;/a&gt; - this is a free webinar, hosted monthly by Cloud Academy instructors and it goes through each domain and exam questions. Some of the past webinars are available on &lt;a href="https://www.youtube.com/channel/UCeRY0LppLWdxWAymRANTb0g"&gt;Cloud Academy YouTube channel&lt;/a&gt;, so you can access them without having to sign up, but I definitely recommend attending live webinar, as you do get a chance to ask questions. This is a great resource to go through before you sit the exam, it highlights what are the things you should look out for, what do you need to focus on in your revision and what resources are useful to look at.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://go.aws/3kKYUbs"&gt;Exam Certification Readiness Webinar&lt;/a&gt; from AWS - official and very thorough live 3=4 hour walk through all of the domains and exam questions. Worth mentioning that they are available for most certification exams and take place live in different time zones, so it makes it easy to find one that fits your schedule.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://d1.awsstatic.com/training-and-certification/ramp-up_guides/Ramp-Up_Guide_Developer.pdf"&gt;AWS Ramp-Up Guide: Developer&lt;/a&gt; - this is by far the best resource, that was recommended during one of the AWS exam prep webinars. Whilst it is not specifically targeted at Developer Associate Exam, it contains links to labs, courses, whitepapers, and many more resources for developers, engineers and DevOps engineers.&lt;br&gt;
*&lt;a href="https://explore.skillbuilder.aws/learn/course/external/view/elearning/9153/aws-certification-official-practice-question-sets-english"&gt;Official Practice Question Set with AWS skills builder &lt;/a&gt;. AWS SkillsBuilder is a new AWS learning center offering free digital courses and learning paths, and this is where you can now find Practice Question Set to get used to the way questions are phrased before you sit the exam.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://explore.skillbuilder.aws/learn/learning_plan/view/84/developer-learning-plan"&gt;Developer Learning Plan with AWS Skill Builder&lt;/a&gt;- AWS designed this to help anyone, who wants to learn how to develop modern applications on AWS. It will help you learn your ways with serverless solutions, containers and DevOps on AWS. TThis Learning Plan can also help prepare you for the AWS Developer Associate certification eExam.&lt;/p&gt;

&lt;p&gt;*&lt;a href="https://d1.awsstatic.com/training-and-certification/docs-dev-associate/AWS-Certified-Developer-Associate_Exam-Guide.pdf"&gt;AWS Certified Developer – Associate Exam Guide&lt;/a&gt;- this documents covers all you need to know about the preparation for your exam, discussing scope of the exam, content, exam domains, technology and tools that might be covered in the exam and services that are out of scope for the exam.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#paid-courses-and-resources"&gt;
  &lt;/a&gt;
  Paid courses and resources
&lt;/h3&gt;

&lt;p&gt;When researching on how to best approach preparation for AWS Developer Associate exam I came across a vast amount of paid courses, however after reading plenty of reviews I have found these courses/resources are the most useful and comprehensive: &lt;/p&gt;

&lt;p&gt;*&lt;a href="https://www.udemy.com/course/aws-certified-developer-associate-dva-c01/"&gt;Ultimate AWS Certified Developer Associate 2021&lt;/a&gt; - this is a 32 hours course that will&lt;br&gt;
thoroughly prepare you to sit the exam. in addition to the course itself you also receive slides that were used in the course, which I used to review the material before the exam day. It also comes with 1 full practice exam.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://amzn.to/3x0NGVj"&gt;AWS Certified Developer Associate Practice Tests [2021]: 390 AWS Practice Exam Questions with Answers &amp;amp; detailed Explanations&lt;/a&gt; - this ebook not only offers you more than enough practice tests, but comes with very detailed explanations to both correct and incorrect answers and walking through each one of them in great details. If there is one resource you are willing to pay for to prepare for the exam - in my opinion that is the one!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h3&gt;

&lt;p&gt;The first thing you should do when starting your exam preparation is book your exam - you probably heard that from other people many times, but it does help with your learning plan, and if anything comes up, you can always reschedule your exam up to two times or cancel it all together for a full refund as long it's more than 24 hours before the exam start date.&lt;a href="https://www.aws.training/Certification"&gt;Book your exam here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, if English is not your first language you can request an extra 30 minutes to be added to your exam.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>cloud</category>
      <category>awscertified</category>
    </item>
    <item>
      <title>Working with NFT Metadata, IPFS, and Pinata</title>
      <author>Rounak Banik</author>
      <pubDate>Thu, 18 Nov 2021 16:50:54 +0000</pubDate>
      <link>https://dev.to/rounakbanik/working-with-nft-metadata-ipfs-and-pinata-3ieh</link>
      <guid>https://dev.to/rounakbanik/working-with-nft-metadata-ipfs-and-pinata-3ieh</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NFca0Jal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1378sjgjblut105ikbpm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NFca0Jal--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1378sjgjblut105ikbpm.png" alt="Pinata" width="700" height="332"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This article serves as a sequel to my tutorial on &lt;a href="https://dev.to/rounakbanik/create-generative-nft-art-with-rarities-1n6f"&gt;creating generative NFT art&lt;/a&gt;. If you haven’t read it, I suggest you do so. I assume your system is already set up (with Python and required packages), and you have used the &lt;a href="https://github.com/rounakbanik/generative-art-nft"&gt;generative-art-nft&lt;/a&gt; library.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hnoaF9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xohh1lzo9bgbm7nj4b4l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hnoaF9fG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xohh1lzo9bgbm7nj4b4l.png" alt="Mekaverse NFTs" width="700" height="233"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the previous tutorial, you learned how to create a generative art collection with custom rarities. If you followed along with your custom artwork (or used my samples), you should now have a collection of PNG images, and a metadata CSV file that contains information on traits for each image. &lt;/p&gt;

&lt;p&gt;This is a great first step towards creating an NFT collection but we still have a long way to go. The images that we generated exist on our local systems and are not really accessible to anyone. The metadata we generated is ideal for analyzing on Excel but is not in a format that adheres to standards (and by extension, cannot be used by an NFT marketplace platform like OpenSea).&lt;/p&gt;

&lt;p&gt;I will be addressing these issues in this article. More specifically, we will show you how to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload Images to IPFS&lt;/li&gt;
&lt;li&gt;Generate compliant JSON NFT metadata&lt;/li&gt;
&lt;li&gt;Upload metadata files to IPFS&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don’t worry if some of these words don’t make sense right now. I will be explaining them as and when required.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-nft-minting-works"&gt;
  &lt;/a&gt;
  How NFT Minting Works
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8qWwR412--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2jufo45pbfcn96agssz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8qWwR412--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o2jufo45pbfcn96agssz.png" alt="Mekaverse NFTs" width="700" height="393"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To understand why we’re doing what we’re doing, we need to understand how NFT minting works. If you know this already, feel free to skip this section.&lt;/p&gt;

&lt;p&gt;Let’s say you want to mint a collection of 10,000 NFTs. What does that really mean?&lt;/p&gt;

&lt;p&gt;This means that you’re writing some code (called a smart contract) that tells the blockchain to initialize a table for you. This table stores ownership and metadata information about your NFTs. More specifically, each row of the table consists of the following information:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The Token Identifier (or ID)&lt;/li&gt;
&lt;li&gt;The Owner of the Token&lt;/li&gt;
&lt;li&gt;The Metadata associated with the token &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is an example table:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yw_TaOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irah15b0q4na6os3h1au.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Yw_TaOD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/irah15b0q4na6os3h1au.png" alt="Table" width="349" height="252"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see here that the &lt;code&gt;ID&lt;/code&gt; is nothing but a unique positive integer that identifies a particular NFT. The &lt;code&gt;Owner&lt;/code&gt; column stores the addresses associated with each NFT’s holder. Finally, the &lt;code&gt;Metadata&lt;/code&gt; is a column that may contain data &lt;em&gt;of&lt;/em&gt; the NFT or &lt;em&gt;about&lt;/em&gt; the NFT. &lt;/p&gt;

&lt;p&gt;It is possible to store the entire image in the &lt;code&gt;Metadata&lt;/code&gt; column of the table. However, &lt;strong&gt;storing data on a blockchain is expensive&lt;/strong&gt;. To give you some context, our collection of 10,000 squirrels occupies a disk space of 600 MB. If we wanted to store 600 MB worth of data on the Ethereum blockchain, it would cost us &lt;strong&gt;$1 million dollars.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is clearly not a great option. Therefore, in most cases, instead of storing data &lt;em&gt;of&lt;/em&gt; the NFT, we instead simply store data &lt;em&gt;about&lt;/em&gt; the NFT. This data (or metadata) is stored in a format called JSON. If you don’t know what JSON is, don’t worry about it. For our purposes, think of them like Python dictionaries (encapsulated in {}) that you encountered in the previous article to define layers.&lt;/p&gt;

&lt;p&gt;This JSON file needs to have information about the NFT such as its name, description, image URL, attributes, etc. In order to make sure that everyone in the ecosystem (including NFT marketplaces like OpenSea) understands what’s in our JSON files, we need to format them in a way that is compliant with the standards. In our case, we will use the &lt;a href="https://docs.opensea.io/docs/metadata-standards"&gt;standards recommended by OpenSea&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is a JSON metadata file for a sample NFT.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my-nft.json

{   
   "description": "Friendly OpenSea Creature",      
   "image": "https://opensea-prod.appspot.com/puffs/3.png",  
   "name": "Dave Starbelly",   
   "attributes": [
       { "trait_type": "Base", "value": "Starfish" },      
       { "trait_type": "Eyes", "value": "Big" },      
       { "trait_type": "Mouth","value": "Surprised" },
   ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Storing metadata in this format on the blockchain is still very expensive. Hence, we add an additional layer of abstraction, and upload this JSON to the cloud as well and simply store a URL pointing to the JSON file.&lt;/p&gt;

&lt;p&gt;Therefore, at the end of the data, all you’re storing on the blockchain is &lt;em&gt;&lt;a href="https://mywebsite.com/my-nft.json"&gt;https://mywebsite.com/my-nft.json&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To summarize, here is what we need to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Upload all our images online and get a URL associated with each image. (This URL will go into our metadata).&lt;/li&gt;
&lt;li&gt;Generate a separate JSON file for each image containing metadata in the standard shown above (Image URL, attributes/traits, name, etc.)&lt;/li&gt;
&lt;li&gt;Upload all the JSON files to the cloud and get a URL associated with each JSON file.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#uploading-images-to-ipfs"&gt;
  &lt;/a&gt;
  Uploading Images to IPFS
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ilB5dBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlnglbcvo70cugw0ukx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ilB5dBv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8qlnglbcvo70cugw0ukx.png" alt="Uploads" width="700" height="334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Uploading images to the internet is pretty simple. We’re sure you must have used a service like Google Drive, GitHub, or AWS to upload folders to the cloud.&lt;/p&gt;

&lt;p&gt;While uploading images to such centralized services (AWS, Google Drive, your own server, etc.) would work, &lt;strong&gt;it would not be a very good idea.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Why not? For two reasons, mainly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centralized-storage-tends-to-be-location-based"&gt;
  &lt;/a&gt;
  Centralized Storage tends to be location based
&lt;/h3&gt;

&lt;p&gt;Imagine you upload an image of a dog (called dog.jpeg) to a centralized storage service. Your dog image would then be available by accessing a URL (something like &lt;em&gt;&lt;a href="https://mystorage.com/dog.jpeg"&gt;https://mystorage.com/dog.jpeg&lt;/a&gt;&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;However, it is very easy to swap this image for another. I could upload another image with the same name (dog.jpeg) that replaces the original image.&lt;/p&gt;

&lt;p&gt;Now, if I visited the same URL as before (&lt;em&gt;&lt;a href="https://mystorage.com/dog.jpeg"&gt;https://mystorage.com/dog.jpeg&lt;/a&gt;&lt;/em&gt;), I will see a different image. You can see why this is not ideal in NFT world. People spend thousands of dollars on NFTs and they would be pissed if you simply replaced an avatar with extremely rare traits with something else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#centralized-storage-can-be-taken-down"&gt;
  &lt;/a&gt;
  Centralized Storage can be taken down
&lt;/h3&gt;

&lt;p&gt;Let’s say you upload an image to a Google Drive or AWS. If you removed the image from these services or the services themselves shut down, the URL pointing to the image would break. Therefore, it is very easy to pull the rug if your images and data exist on a centralized storage service.&lt;/p&gt;

&lt;p&gt;For these reasons, almost every serious NFT project uses a service called &lt;strong&gt;IPFS (or Interplanetary File System).&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;IPFS is a peer-to-peer filesharing system that is decentralized, uses content-based addressing, and is secure.&lt;/p&gt;

&lt;p&gt;If none of the words above make sense, don’t worry. All you need to know is this:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipfs-used-contentbased-addressing"&gt;
  &lt;/a&gt;
  IPFS used content-based addressing
&lt;/h3&gt;

&lt;p&gt;On the IPFS network, the address (URL) of a file will be dependent on the content of the file. If you change the contents of a file, then the address of the file on the IPFS will also change.&lt;/p&gt;

&lt;p&gt;Therefore, on the IPFS network, it is impossible to make one URL point to two different images.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ipfs-never-goes-down"&gt;
  &lt;/a&gt;
  IPFS never goes down
&lt;/h3&gt;

&lt;p&gt;Like most decentralized systems (like blockchains), IPFS never goes down. This means that once you’ve uploaded a file (or image) to IPFS, it will always be available as long as at least one node in the network has the file. This means that you cannot pull the rug at will. Nor is there a threat that the system will be shut down.&lt;/p&gt;

&lt;p&gt;We’re not going to go into the nitty-gritties of how IPFS works. If you’re interested, we suggest you give the following two articles a read:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/a-beginners-guide-to-ipfs-20673fedd3f"&gt;https://hackernoon.com/a-beginners-guide-to-ipfs-20673fedd3f&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.ipfs.io/how-to/mint-nfts-with-ipfs/#a-short-introduction-to-nfts"&gt;https://docs.ipfs.io/how-to/mint-nfts-with-ipfs/#a-short-introduction-to-nfts&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Uploading to IPFS is as easy as uploading to Google Drive, thanks to a service called &lt;a href="https://www.pinata.cloud/"&gt;Pinata&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://app.pinata.cloud/signin"&gt;Go to the Pinata website and create an account&lt;/a&gt;. It’s free if you’re uploading up to 1 GB of data.&lt;/p&gt;

&lt;p&gt;Once you have signed up, you will be taken to the Pin Manager window. Upload your folder using the interface. Once you’ve uploaded your folder, you will get a CID associated with it. It should look something like this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--up7NmPiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1lodkdedmqpiuqthu4f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--up7NmPiu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j1lodkdedmqpiuqthu4f.png" alt="Pinata screen" width="700" height="383"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This CID was generated based on the contents of the folder. If the contents of the folder change (an image removed, an image swapped with another of the same name, etc.), the CID will also change.&lt;/p&gt;

&lt;p&gt;For my folder, the CID is QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo.&lt;/p&gt;

&lt;p&gt;Therefore, the IPFS URL for this folder is ipfs://QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo.&lt;/p&gt;

&lt;p&gt;This URL will not open in a browser. In order to do that, you can use a HTTP URL of an IPFS gateway. Try visiting this link: &lt;a href="https://ipfs.io/ipfs/QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo/00001.png"&gt;https://ipfs.io/ipfs/QmRvSoppQ5MKfsT4p5Snheae1DG3Af2NhYXWpKNZBvz2Eo/00001.png&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will display an image that I named 00001.png and uploaded to my folder.&lt;/p&gt;

&lt;p&gt;Congratulations! That is all there is to uploading images on IPFS using Pinata. For the next step, you will need the CID. Keep that handy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#generate-compliant-nft-json-metadata"&gt;
  &lt;/a&gt;
  Generate compliant NFT JSON metadata
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M5VL8Mzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zlcoejff2kcjb3dis0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M5VL8Mzn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/89zlcoejff2kcjb3dis0.png" alt="Opensea" width="700" height="384"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we uploaded our images to IPFS, we now have IPFS URLs for each and every image.&lt;/p&gt;

&lt;p&gt;Our next task is to create a JSON file for each image and populate it with data (including the image URL) in a format that is compliant and understandable by platforms like NFT marketplaces.&lt;/p&gt;

&lt;p&gt;Fortunately, the &lt;a href="https://github.com/rounakbanik/generative-art-nft"&gt;generative-art-nft library&lt;/a&gt; does all the heavy lifting for you.&lt;/p&gt;

&lt;p&gt;Check that the &lt;code&gt;metadata.py&lt;/code&gt; file exists in the repository. If not, clone the latest version of the repository and transfer the &lt;em&gt;assets&lt;/em&gt; and &lt;em&gt;output&lt;/em&gt; folders into the new repo.&lt;/p&gt;

&lt;p&gt;Open the metadata.py file in a text editor. Don’t worry if you don’t understand the code here. The only things you need to fill are &lt;code&gt;BASE_NAME&lt;/code&gt;, &lt;code&gt;BASE_URL&lt;/code&gt;, and &lt;code&gt;BASE_JSON&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In line 17, replace &lt;code&gt;←Your CID Code →&lt;/code&gt; with the CID code of the image folder you uploaded to Pinata.&lt;/p&gt;

&lt;p&gt;In line 18, add a base name for your NFTs. This is strictly optional. If you do not add a base name, your NFTs will be named 0, 1, 2, and so on. If you put a base name like &lt;em&gt;“Scrappy Squirrel #”&lt;/em&gt;, your NFTs will be named &lt;em&gt;Scrappy Squirrel #0&lt;/em&gt;, &lt;em&gt;Scrappy Squirrel #1&lt;/em&gt;, etc.&lt;/p&gt;

&lt;p&gt;Finally, in line 22, add a description for your collection. Like the base name, this is optional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adZPT9-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64qehqbu8v11zfi5hdcp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adZPT9-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/64qehqbu8v11zfi5hdcp.png" alt="Sample inputs" width="670" height="223"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, open a Terminal in this folder and run the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python metadata.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The program will ask you the edition to generate metadata for. In our case, it was &lt;strong&gt;v2&lt;/strong&gt;, so that’s what we enter.&lt;/p&gt;

&lt;p&gt;It should take less than 15 seconds to generate 10,000+ JSON files. All these files will be conveniently available in a json folder within your edition folder.&lt;/p&gt;

&lt;p&gt;That’s it for step 2!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#upload-json-metadata-files-to-ipfs"&gt;
  &lt;/a&gt;
  Upload JSON metadata files to IPFS
&lt;/h2&gt;

&lt;p&gt;The third step is probably the simplest. Just like you did with the images, upload your &lt;code&gt;json&lt;/code&gt; folder to Pinata.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Congratulations! You now have a very good setup for your NFT metadata. The last and most important step is to write a smart contract that can use this metadata and assign ownership to various holders. That is, however, a topic of a future article. Stay tuned!&lt;/p&gt;

&lt;p&gt;If you have any questions or would like us to add additional features to this library, please reach out to us on our Discord server, or drop them in the comments below. We will try to address as many of them as possible.&lt;/p&gt;

&lt;p&gt;Until next time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-scrappy-squirrels"&gt;
  &lt;/a&gt;
  &lt;em&gt;About Scrappy Squirrels&lt;/em&gt;
&lt;/h3&gt;

&lt;p&gt;Scrappy Squirrels is a collection of 10,000+ randomly generated NFTs. Scrappy Squirrels are meant for buyers, creators, and developers who are completely new to the NFT ecosystem.&lt;/p&gt;

&lt;p&gt;The community is built around learning about the NFT revolution, exploring its current use cases, discovering new applications, and finding members to collaborate on exciting projects with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Join our community here:&lt;/strong&gt; &lt;a href="https://discord.gg/8UqJXTX7Kd"&gt;https://discord.gg/8UqJXTX7Kd&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>blockchain</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Playing With Tuya API: An API for Pythonistas</title>
      <author>Mr. Unity Buddy</author>
      <pubDate>Thu, 18 Nov 2021 16:50:43 +0000</pubDate>
      <link>https://dev.to/unitybuddy/playing-with-tuya-api-an-api-for-pythonistas-2f8c</link>
      <guid>https://dev.to/unitybuddy/playing-with-tuya-api-an-api-for-pythonistas-2f8c</guid>
      <description>&lt;p&gt;Hello, buddies! Recently, I found an interesting API to play with. It's Tuya! Even though Tuya is known for IoT development, there's a hidden side: the Tuya Cloud Development platform, which can help developers in many ways—  especially in marketing your product or whatever.&lt;/p&gt;

&lt;p&gt;Tuya APIs has many services including Email service and SMS service which can be used effectively for marketing and many things. So today we're going to explore how we can use them with Python easily with a few lines of code. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-tuya-exactly"&gt;
  &lt;/a&gt;
  What is Tuya, exactly?
&lt;/h2&gt;

&lt;p&gt;Tuya Smart is a global IoT development platform that builds interconnectivity standards to bridge the intelligent needs of brands, OEMs, developers, and retail chains across a broad range of smart devices and industries.&lt;/p&gt;

&lt;p&gt;Based on the global public cloud, Tuya connects different intelligent scenarios and smart devices by providing hardware development tools, &lt;strong&gt;integrating public cloud services&lt;/strong&gt;, and offering an intelligent business development platform. &lt;/p&gt;

&lt;p&gt;Great, let's go ahead!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Prerequisites
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Tuya Developer Account. Get it here - &lt;a href="https://developer.tuya.com/en/?_source=b0137273d9769517af96e1f625818fe3"&gt;https://developer.tuya.com/en/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;TuyaOpenAPI. To install,
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;pip install tuya-iot-py-sdk
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Some basic Python knowledge.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-tuya"&gt;
  &lt;/a&gt;
  Setting Up Tuya
&lt;/h2&gt;

&lt;p&gt;After signing up, you will head over to the dashboard. From there, go to 'Cloud' and create a project inserting the following information.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6Toq23T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854853118/WcUmOaNkZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6Toq23T4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635854853118/WcUmOaNkZ.png" alt="image.png" width="877" height="562"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use your Data Center Correctly or it will give bugs as a gift!&lt;/p&gt;

&lt;p&gt;Next, you will be asked to Authorize APIs. They give some APIs by default but we don't need them. So you will have to remove most of them and keep only these five. (You should add the Email service and Short Message Service from the other part)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--w1AdfRiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636025698700/NzKhjS9nw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--w1AdfRiE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636025698700/NzKhjS9nw.png" alt="image.png" width="880" height="698"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, it will be a configuration wizard. Follow the given instructions and fill in that too!&lt;/p&gt;

&lt;p&gt;Done, next, it is,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#coding-time"&gt;
  &lt;/a&gt;
  Coding Time!
&lt;/h2&gt;

&lt;p&gt;Great! Now we have set up everything. First, we have to import &lt;code&gt;TuyaOpenAPI&lt;/code&gt; from Tuya Connecter that we installed before.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tuya_connector&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;TuyaOpenAPI&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we have to authorize.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;ACCESS_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*************123"&lt;/span&gt;
&lt;span class="n"&gt;ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"*************56565"&lt;/span&gt;
&lt;span class="n"&gt;API_ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://openapi.tuyain.com"&lt;/span&gt;
&lt;span class="n"&gt;MQ_ENDPOINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"wss://mqe.tuyacn.com:8285/"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait, you can give stars as Input! Your &lt;code&gt;ACCESS_ID&lt;/code&gt; and &lt;code&gt;ACCESS_KEY&lt;/code&gt; are on your Tuya project.&lt;/p&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AnmRZUnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635956265616/nTfQyv0yZ.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AnmRZUnv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1635956265616/nTfQyv0yZ.png" alt="image.png" width="880" height="306"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3rGz-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634213930030/UHXxHnCUR.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q3rGz-ZB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634213930030/UHXxHnCUR.png" alt="image.png" width="670" height="374"&gt;&lt;/a&gt;&lt;br&gt;
Access Secret = Access Key&lt;/p&gt;

&lt;p&gt;Also, make sure that your &lt;code&gt;API_ENDPOINT&lt;/code&gt; is set to your location.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wuu3_Lb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634214091378/wkNf_Kk_l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wuu3_Lb5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1634214091378/wkNf_Kk_l.png" alt="image.png" width="560" height="322"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Great! Now we have Init OpenAPI and connect.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;openapi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TuyaOpenAPI&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_ENDPOINT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ACCESS_KEY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's the foundation for all 3 services. Now let's play with them one by one.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-emails"&gt;
  &lt;/a&gt;
  Send Emails 📧
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/messages/mails/actions/push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;  &lt;span class="s"&gt;"to_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hello@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"template_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"MAIL_1624531323"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"reply_to_address"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"hi@gmail.com"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Don't get confused, lemme explain this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First line of this code is the Request Parameter. Request parameters are used in API operations of the Cloud Development Platform. Tuya supports the following request methods.

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;POST&lt;/code&gt;: Requires the server to perform specified operations.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;GET&lt;/code&gt;: Requests the server to return specified resources.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;PUT&lt;/code&gt;: Requests the server to update specified resources.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;DELETE&lt;/code&gt;: Requires the server to delete specified resources.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every action has its specific Request parameters. When sending emails, we use the above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Next, we give the email address we need to send the email to. &lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;template_id&lt;/code&gt; is the ID of an email template. You can make them yourself(I will show you later) or use a public one. Tuya gives 2 public default templates,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAIL_1624531323&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MAIL_1624531338&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;reply_to_address&lt;/code&gt; means the address that the user will send replies to.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And then you will just have to run the program. If it is a success, the result would be,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'send_status': True}, 'success': True, 't': 1634215134788}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you want to be sure, check your inbox(If you add your email address to the program).&lt;/p&gt;

&lt;p&gt;But it's not possible to use Tuya's default email templates, we should create one for ourselves too. This code will do it, for sure!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;temp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/mails"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Here's your code!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"title"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hello!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"sender_name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Booba"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Hey! You're so pretty btw"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"remark"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Isn't it?"&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, the first line is the request parameter. &lt;code&gt;name&lt;/code&gt; stands for the template name. And the &lt;code&gt;title&lt;/code&gt; is the template title. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;sender_name&lt;/code&gt; is the sender name with 1 to 30 characters. For example, if you set the sender to Buddy, and the sender’s email address to &lt;a href="mailto:yo@example.com"&gt;yo@example.com&lt;/a&gt;. The receiver will see the sender’s address as “Buddy” &lt;a href="mailto:yo@example.com"&gt;yo@example.com&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; is the content, which means the HTML format and Text!&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt; stands for email type. It will handle whether the email should be in the 'Primary' tab or 'Promotions'. There are 3 valid email types,

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt; : verification code. &lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt; : email notification.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;2&lt;/code&gt; : promotional email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;remark&lt;/code&gt; is remarks of the application for the email template. Describe your application scenario here!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And yeah, now you can run this code and see the result as well. If it is successful, the result is gonna be like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'template_id': 'MAIL_0769019106'}, 'success': True, 't': 1634216025543}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Result:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GXAeMzRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878381161/cH6uW6zvl.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GXAeMzRU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878381161/cH6uW6zvl.gif" alt="Screen Recording (11-9-2021 12-42-25 PM).gif" width="" height=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#send-short-messages"&gt;
  &lt;/a&gt;
  Send Short Messages 📱
&lt;/h2&gt;

&lt;p&gt;Tuya's SMS service allows you to deploy the messaging service for application-to-user communication worldwide. There are 3 types of SMS you can send to users by Tuya,  &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;: Verification code.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;1&lt;/code&gt;: Notification
-&lt;code&gt;2&lt;/code&gt;: Promotional messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not like in Emails, first, we have to create an SMS template as below as Tuya doesn't have any default SMS templates.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/sms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"The template of the message verification code"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"You are registering with your phone number. The verification code is: ${code}, valid for 5 minutes."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the same as we created the Email template. the first string is a request parameter. And the dict is for content. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;name&lt;/code&gt; is the name of your template.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;content&lt;/code&gt; stands for the message content.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;type&lt;/code&gt; is for the type of the message— verification code, notification, or promotional.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the end, we print the result and it would be something like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': {'template_id': 'SMS_6195054734'}, 'success': True, 't': 1635956558065}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Not the ned, we just created a template. Kindly note that you won't be able to use this template until it is reviewed and allowed. Don't worry, that process will only take 2 days. After that, you can query the details of the SMS template with the below request parameter&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/msg-templates/sms/{template_id}"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After this, you can continue the process!&lt;/p&gt;

&lt;p&gt;So now we have to send messages by this code,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;openapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/v1.0/iot-03/messages/sms/actions/push"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="s"&gt;"country_code"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"94"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"phone"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"945555555"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s"&gt;"template_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"SMS_3746838509"&lt;/span&gt;&lt;span class="p"&gt;}))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's break this. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;country_code&lt;/code&gt; is for your country code and don't use the &lt;code&gt;+&lt;/code&gt; mark in that.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;phone&lt;/code&gt; stands for the phone number(s) that you need to send messages. The same rule, &lt;em&gt;no symbols&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;template_id&lt;/code&gt; is the Template ID that you made before, which has been approved.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;{'result': 'send_status': True, 'success': True, 't': 1634216025543}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#what-else-to-do-with-tuyaapi"&gt;
  &lt;/a&gt;
  What else to do with TuyaAPI?
&lt;/h2&gt;

&lt;p&gt;Many things! Tuya is for Smart home applications. But we can do a lot with Tuya's cloud development platform as well! Just like,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/cloud/voice-message-service?id=Kaiuye86cq53b"&gt;Voice Message Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/cloud/app-push?id=Kaiuye3tb3yho"&gt;App Push Notification Service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.tuya.com/en/docs/cloud/weather-service?id=Kaiuyesukz1v3"&gt;Weather Service&lt;/a&gt; and many!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Discover more &lt;a href="https://developer.tuya.com/en/docs/cloud"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Almost all of these APIs are used in almost the same manner. Request Parameter and the dict containing everything required. 🕺🕺&lt;/p&gt;

&lt;p&gt;What I love about Tuya is its documentation. They are really clear and easy to understand. Besides, it provides examples and explanations which helps everyone to use it easily! Remember to check them out whenever you're stuck &lt;/p&gt;

&lt;p&gt;So, buddies, that's it! Thanks for reading and Happy Pythoneering!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.tuya.com/en/docs/iot/api-request?id=Ka4a8uuo1j4t4"&gt;https://developer.tuya.com/en/docs/iot/api-request?id=Ka4a8uuo1j4t4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iot.tuya.com/?_source=f117b85de6f7ea6e51c321337da12972"&gt;https://iot.tuya.com/?_source=f117b85de6f7ea6e51c321337da12972&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://iot.tuya.com/cloud/?_source=dcc7e84a3e88f1dc506e812dcff2f781"&gt;https://iot.tuya.com/cloud/?_source=dcc7e84a3e88f1dc506e812dcff2f781&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RVf25NdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878863029/IaRFgaE7T.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RVf25NdS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1636878863029/IaRFgaE7T.png" alt="Copy of STRINGS.png" width="880" height="96"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
