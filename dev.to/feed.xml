<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>The complete guide to becoming a frontend web developer in 2021</title>
      <author>Mehul Mohan</author>
      <pubDate>Sat, 26 Jun 2021 14:18:17 +0000</pubDate>
      <link>https://dev.to/mehulmpt/the-complete-guide-to-becoming-a-frontend-web-developer-in-2021-4cj</link>
      <guid>https://dev.to/mehulmpt/the-complete-guide-to-becoming-a-frontend-web-developer-in-2021-4cj</guid>
      <description>&lt;p&gt;Therefore, it is clear that web development today is a great skill to have. In this blog post, let us look at what do you need to do exactly to become a frontend web developer in 2021 and beyond.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h1&gt;

&lt;p&gt;The problem with the web right now is the information overload and noise. jQuery, Angular, Ember, Vue, React, Next.js, Nuxt.js, TypeScript, Sass, Webpack, NPM, Yarn, ESbuild, snowpack, ...! There are so many things, so many tools, so much you can learn - that often it becomes discouraging to even start.&lt;/p&gt;

&lt;p&gt;Then there's the point of what is relevant today, what will be relevant 3 years from now, etc. Let us clarify a few things in this blog:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-dont-need-to-learn-everything"&gt;
  &lt;/a&gt;
  You don't need to learn everything
&lt;/h2&gt;

&lt;p&gt;A common misconception is that you need to learn everything to be a great developer. This is completely false.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You need to own a "complete" tech stack. A complete tech stack is a stack using which you can create almost any project you'd like.&lt;/li&gt;
&lt;li&gt;You need to be aware of most, if not all popular tools in the ecosystem. Note, this does not mean you need to know how to work with them. But you should know they exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#you-need-to-bet-on-a-stack"&gt;
  &lt;/a&gt;
  You need to bet on a stack
&lt;/h2&gt;

&lt;p&gt;Angular vs React vs Vue vs Svelte vs xyz. This discussion will never end. The truth is, every single popular framework/library out there is popular because people use it and they're good at what they do.&lt;/p&gt;

&lt;p&gt;You can try spending time with different technologies if you'd like. But my personal recommendation is not to switch major libraries/frameworks every month or two.&lt;/p&gt;

&lt;p&gt;Sure, you can switch from React to Angular watching a 4 hour course. However remember that there's a certain mental model you need to develop when you're working with a technology, and that could take weeks if not months to get comfortable with.&lt;/p&gt;

&lt;p&gt;Do not switch to the hottest technology in the market, stick to a tech stack you work with.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#the-framework-to-learn-frontend-web-development-in-2021"&gt;
  &lt;/a&gt;
  The framework to learn frontend web development in 2021
&lt;/h1&gt;

&lt;p&gt;Alright. Now the big question. What do you actually learn from all the noise in the world. Let's split the question in two parts - (What and How) to learn frontend web development. Both are equally important questions as you can save or waste a lot of time depending on the decision you take. Let's start.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#what-to-learn-for-frontend-web-development"&gt;
  &lt;/a&gt;
  What to learn for frontend web development?
&lt;/h1&gt;

&lt;p&gt;This is a no bs list of things you should learn for frontend web development. Please note that this would be opinionated because my experience is heavily with these technologies (the platform you're reading this on, codedamn, has been built with all of these technologies)&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#internet-fundamentals"&gt;
  &lt;/a&gt;
  Internet fundamentals
&lt;/h2&gt;

&lt;p&gt;This might come as a surprise to many. Most sites will recommend starting with HTML/CSS, but I feel even before that, you should understand how the internet and web works on a high level. What are HTML documents, how they're sent from a backend server, what is DNS, what exactly happens when you type google.com in the browser, etc.&lt;/p&gt;

&lt;p&gt;Of course, you should not need to go in depth of any of the topics, but it provides a very solid understanding of things when you're suddenly using dev-servers for development, slightly start shifting to backend, or try to debug network requests later in your journey.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#html5css3"&gt;
  &lt;/a&gt;
  HTML5/CSS3
&lt;/h2&gt;

&lt;p&gt;HTML and CSS are the fundamental building blocks of web. There's no doubt that this should be the first thing you should learn as a frontend developer.&lt;/p&gt;

&lt;p&gt;Some very important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you learn about modern HTML5 syntax&lt;/li&gt;
&lt;li&gt;Try to learn about semantic tags in HTML5 instead of sticking everything inside divs&lt;/li&gt;
&lt;li&gt;Learn about modern layout practices in CSS (flexbox, grid)&lt;/li&gt;
&lt;li&gt;Learn about modern CSS syntax and have a clarity on selectors, media queries, properties, values, etc. - the fundamentals.&lt;/li&gt;
&lt;li&gt;Do not stick with older and deprecated syntax ( center tag, marquee, etc.)&lt;/li&gt;
&lt;li&gt;Do not spend a lot of time learning about old layout practices in CSS with floats, etc.&lt;/li&gt;
&lt;li&gt;Do not try every cutting edge CSS3/4 feature. A lot of them might not be supported in browsers yet. Stick to the widely supported CSS3 features at most.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h2&gt;

&lt;p&gt;JavaScript is super important for interactivity and anything you do beyond a simple static HTML/CSS landing page. It can be used extensively beyond frontend too (in Node.js/Deno/TypeScript) therefore it is essential you get your fundamentals right with JavaScript.&lt;/p&gt;

&lt;p&gt;Some very important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you learn about ES6+ syntax. Do not use var and even follow tutorials using them. They're not needed in most cases. One way to check that is to try following tutorials done after 2017.&lt;/li&gt;
&lt;li&gt;JavaScript has some behaviors that might catch you off guard. For example, why 0.1 + 0.2 is not 0.3, or why null == undefined is true in JS. Remember, there are always reasons for these behaviors. You're a google search away to understand such things.&lt;/li&gt;
&lt;li&gt;JavaScript is fundamentally an asynchronous and non-blocking I/O language. This means you should understand how some core parts of asynchronous things like Promises work in JavaScript.
Learn about DOM API and understand it's an API provided by your browser to your JS code to interact with your HTML/CSS.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#developer-tools"&gt;
  &lt;/a&gt;
  Developer Tools
&lt;/h2&gt;

&lt;p&gt;At this time, you should also start exploring how to work with devtools of your browser. I prefer Chrome devtools because they're great for debugging and working with JavaScript and DOM. Irrespective of your choice, I would prefer building projects and debugging any issues you face using devtools, instead of staring at your code for hours.&lt;/p&gt;

&lt;p&gt;Chrome devtools, just like any other tool in real life or a virtual product, would require a little training and you'll have to spend some time to be maximum efficient with it. However, the time you spend learning browser devtool will pay for itself in orders of magnitude as your developer life goes on.&lt;/p&gt;

&lt;p&gt;Some important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I recommend sticking to Chrome devtools because they're super powerful.&lt;/li&gt;
&lt;li&gt;Learn about DOM manipulation, debugging network requests, setting breakpoints on events, jumping through sources, searching for code in your website assets, throttling network speed, and more.&lt;/li&gt;
&lt;li&gt;This will be an ongoing learning, just like all other technologies. You should not aim to learn devtools at once, simply learn small but important things and move on. You will learn a lot more as you're working with projects, etc.
Git&lt;/li&gt;
&lt;li&gt;You need to learn a Version Control System (VCS), and it should be git. Git is a widely used VCS used by teams and companies to manage their codebases across employees. Git can be super complex to learn, but initially your use case of learning git would be to get your code deployed on GitHub, or a similar site.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is required because when you learn git, you can push to github. When you are able to push to github, you can integrate with many services like GitHub pages, Vercel, Netlify, etc. to create a live preview of your website/project. This live preview then can be shared with your friends, family and even added on your resumes.&lt;/p&gt;

&lt;p&gt;As you get employed, or work with a team of 2+ developers, you'll need git knowledge anyway. But even as a solo developer, it is of utmost importance as it makes your deployment cycle to a live website a breeze.&lt;/p&gt;

&lt;p&gt;Some important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git can get complex super quick. Do not get confused with a lot of git commands. As a solo developer, you'll hardly need anything beyond 5-7 commonly used commands.&lt;/li&gt;
&lt;li&gt;While point 1 is true, you should still understand the overall architecture of how git works, what branches are, what does one mean by remote repositories, etc. This is again, a solid framework of understanding that you should have.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#npmyarn"&gt;
  &lt;/a&gt;
  NPM/Yarn
&lt;/h2&gt;

&lt;p&gt;NPM and Yarn are two most popular package managers for JavaScript. They both exist for the same purpose - managing dependencies in your codebase. A dependency is a package/software usually not developed by you/your team, but you can still use and integrate it inside your app. For example, a design system like bootstrap or tailwind CSS is a dependency.&lt;/p&gt;

&lt;p&gt;If there's any update to the dependency, a bugfix or a security patch, the maintainer of the package updates it on the NPM repo, and you can update the package with your package manager. Alongside this, it also helps with a number of things you'll find out when you learn about NPM and yarn.&lt;/p&gt;

&lt;p&gt;Some important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NPM and yarn are very close concepts-wise. When you learn about npm, you'll also learn about package.json, lockfiles, why they're needed and more. All these things are transferrable to yarn v1 as package manager too.&lt;/li&gt;
&lt;li&gt;Therefore, do not stress a lot about what package manager you should learn. Learn any one (like yarn), and you can automatically switch to another if your project requires.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h2&gt;

&lt;p&gt;At codedamn, we bet heavily on React. Not because we feel like it is superior to others, but this is us following our own advice given in the top of the article - stick to a tech stack.&lt;/p&gt;

&lt;p&gt;I worked with Angular.js in the past (2015 time), switched to Angular 2 - didn't like it much, and then made the switch to React. Since then, I've been using React myself for almost any medium+ complexity frontend project.&lt;/p&gt;

&lt;p&gt;React is an amazing library with a tremendous community support. Any problem/bug you run in with React - chances are someone already did that mistake and asked a question on 1000 websites. Therefore, if you're a good googler, you should not face any problem working with React.&lt;/p&gt;

&lt;p&gt;Some important points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;React looks simple on the surface, but it requires developing a mental model to work at scale. It's not only about concepts and hooks, it's also about how to architect your app, make it maintainable, choosing the right libraries for the ecosystem, etc.&lt;/li&gt;
&lt;li&gt;React does not enforce any standard practices for common tasks, like network requests or UI. But we recommend the following options - react-query for network requests, tailwind CSS or material UI for UI library.&lt;/li&gt;
&lt;li&gt;Do not learn in-depth about class based components unless you have to work on a legacy codebase that requires you to learn about them in depth. Class based components are not the future of React. Run away from tutorials that teach you class based components. Learn about functional components and hooks instead.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#module-bundlers"&gt;
  &lt;/a&gt;
  Module bundlers
&lt;/h2&gt;

&lt;p&gt;Webpack is one of the most popular module bundler that React uses out of the box right now. Again, you don't necessarily need to learn webpack in depth, but you should know about what webpack.config.js file is and what are the top 10 useful options in it, and what they can do.&lt;/p&gt;

&lt;p&gt;ESBuild is also another relatively very very fast module bundler right now, but the plugin support for it isn't great yet. As a beginner, you don't need to worry about ESBuild yet.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code-testing"&gt;
  &lt;/a&gt;
  Code Testing
&lt;/h2&gt;

&lt;p&gt;Last but not least, you should also focus on code testing. I feel people should start with end to end testing because it seems easier and more intuitive as a reason for code testing, compared to snapshot testing or unit testing.&lt;/p&gt;

&lt;p&gt;My recommended tool here is to use Cypress - which has a very friendly syntax to test your applications end to end i.e. your code will act like a user using your app and can pretty much perform any action your user can perform, but in an automated fashion saving your time and energy.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#practice-practice-practice"&gt;
  &lt;/a&gt;
  Practice! Practice! Practice!
&lt;/h2&gt;

&lt;p&gt;One thing not explicitly mentioned in the blog post above is the fact that you need to practice a lot, all the time. Practice is the way to fit concepts in your brain. If you're only watching videos, you are not learning.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-learn-frontend-web-development"&gt;
  &lt;/a&gt;
  How to learn frontend web development?
&lt;/h1&gt;

&lt;p&gt;The above list is not an exhaustive list of topics, but definitely a solid start as a guide. Now the question is how do you learn frontend web development? Here, I have two options for you:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-want-a-structured-learning-approach-with-support-and-practice-modules"&gt;
  &lt;/a&gt;
  You want a structured learning approach with support and practice modules
&lt;/h2&gt;

&lt;p&gt;The purpose of codedamn platform to exist is to solve this structuring, support and practice. We have a full &lt;a href="https://codedamn.com/learning-paths/frontend"&gt;Frontend Web Developer curriculum&lt;/a&gt; of 50+ hours with over 60+ practice sessions including the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Practice projects built in
Interactive learning (completing labs and challenges inside browser)&lt;/li&gt;
&lt;li&gt;Video lectures by top industry experts&lt;/li&gt;
&lt;li&gt;We always keep this curriculum up to date with industry standards with all the things mentioned in the blog post above, and some more.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#you-want-a-free-learning-approach"&gt;
  &lt;/a&gt;
  You want a free learning approach
&lt;/h2&gt;

&lt;p&gt;If you cannot afford codedamn's learning path above with money, you can spend your time on free resources instead. Irrespective of that, using these resources with codedamn learning path is also recommended.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use google, a lot, for learning and doubt clarification.
Watch YouTube videos, but make sure they're relatively new, especially with topics like JavaScript and React.&lt;/li&gt;
&lt;li&gt;Practice on your own, build projects and deploy them online for people to see.&lt;/li&gt;
&lt;li&gt;Take up free courses on codedamn (we have a lot of 100% free courses too), like this react query course.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;Time is money, in fact, sometimes more important than money. &lt;/p&gt;

&lt;p&gt;What you want to spend (or can spend), is upto you. But I'd recommend that even if not codedamn, spending money on your education to get an acceleration and clarity on what you're trying to achieve would definitely be worth it.&lt;/p&gt;

&lt;p&gt;The average salary of a frontend developer is $100,000/year. In fact, a codedamn yearly subscription would pay for itself, probably in the first 10 days of your job as a frontend developer.&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>frontend</category>
    </item>
    <item>
      <title>Simple Javascript Modules - Local Storage Module</title>
      <author>Sooraj</author>
      <pubDate>Sat, 26 Jun 2021 13:50:40 +0000</pubDate>
      <link>https://dev.to/soorajsnblaze333/simple-javascript-modules-local-storage-module-567p</link>
      <guid>https://dev.to/soorajsnblaze333/simple-javascript-modules-local-storage-module-567p</guid>
      <description>&lt;p&gt;Working as a web developer I work on the client side dealing with lots of continuous data from the server. All though it is a good practice to not store data on the client side, there will be many cases where we want to store some information on the client for faster access. A good use case would be the app theme &lt;code&gt;theme: "light"&lt;/code&gt; or &lt;code&gt;theme: "dark"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So that is where we can use Local Storage of the Browser. It is a free storage space available for almost all major browsers and we can save a considerable amount of safe data for quick use in our application. It can be found on almost all major browsers. You can view, modify or delete the local storage data under the Application Tab in your browser followed by Local Storage and clicking your domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ly0uzehW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/advorhz4c96b4nvl3qb5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ly0uzehW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/advorhz4c96b4nvl3qb5.png" alt="Local Storage Description"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// A localStorage object for performing crud operations on window.localstorage with ease&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Storage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// current storage data&lt;/span&gt;
  &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="c1"&gt;// check if local storage is supported on browser&lt;/span&gt;
  &lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localStorage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// you can return anything here as per your need&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// clean up the data instance&lt;/span&gt;
  &lt;span class="nx"&gt;clearData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// get the local storage data of the key&lt;/span&gt;
  &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// add a new data to given key in local storage&lt;/span&gt;
  &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// remove the data by the given key from local storage&lt;/span&gt;
  &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="c1"&gt;// wipe entire local storage of current domain&lt;/span&gt;
  &lt;span class="nx"&gt;wipe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clearData&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see here, I added all the things that we mostly do with local storage. Usually all these functions are separately written in a utility module. But here I have kept it separately so that in any case of change, we just replace the functions inside the module and our application code remains untouched. The whole point of writing these functions together as a module is to keep the code clean, crisp and understandable.&lt;/p&gt;

&lt;p&gt;I have a total of 7 properties on my module here which are as follows.&lt;/p&gt;

&lt;p&gt;1.&lt;code&gt;data&lt;/code&gt; - This is just a temporary storage variable that I am using. You can skip this, but I have kept this for intermediate conversions.&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;exists()&lt;/code&gt; - This is a function that checks if the current browser supports local storage or not. This function can be called separately as &lt;code&gt;Storage.exists()&lt;/code&gt;. This function is also called before every storage action to check if local storage is supported.&lt;/p&gt;

&lt;p&gt;3.&lt;code&gt;clearData()&lt;/code&gt; - This function is used to clear the value of the &lt;code&gt;data&lt;/code&gt; variable. You can skip this too if not needed.&lt;/p&gt;

&lt;p&gt;4.&lt;code&gt;get(key)&lt;/code&gt; - This function is used to get the data that is associated with the key that is sent in the parameters. For example if &lt;code&gt;get("name")&lt;/code&gt; will get you the data that is saved under the name key in local storage. This function calls the window function called &lt;code&gt;localStorage.getItem()&lt;/code&gt; which takes 1 parameter "key".&lt;/p&gt;

&lt;p&gt;5.&lt;code&gt;add(key, data)&lt;/code&gt; - This function is used to add new data to the local storage. The &lt;code&gt;key&lt;/code&gt; attribute specifies to which key the data should be added to and the &lt;code&gt;data&lt;/code&gt; attribute contains the data to be added. This function calls the window function called &lt;code&gt;localStorage.setItem()&lt;/code&gt; which takes 2 parameters "key" and "data". It could be anything like a string, number, array, object etc.&lt;/p&gt;

&lt;p&gt;For example running this =&amp;gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;Storage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;myKey&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sooraj&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will add this under the key called "myKey"&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VcU_AtRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r9tubucxgkzrgtjjaxv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VcU_AtRv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6r9tubucxgkzrgtjjaxv.png" alt="Added Local Storage"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6.&lt;code&gt;remove(key)&lt;/code&gt; - This function is used to remove the data associated with the key that is sent in the parameters. This function calls the window function called &lt;code&gt;localStorage.removeItem()&lt;/code&gt; which takes 1 parameter "key". If &lt;code&gt;remove("myKey")&lt;/code&gt; is called the data that was added before would be cleared from the storage.&lt;/p&gt;

&lt;p&gt;7.&lt;code&gt;wipe()&lt;/code&gt; - This is a method I would not use that many times. This function calls the window function called &lt;code&gt;localStorage.clear()&lt;/code&gt; which takes no parameters. This function clears all the local storage data associated with the client on that domain.&lt;/p&gt;

&lt;p&gt;Well, this is my Storage module. Hope you guys found it useful. Go ahead and try it out...&lt;/p&gt;

</description>
      <category>todayilearned</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>New Person capabilities in Yoast SEO Premium. How to remove them?</title>
      <author>spoilt</author>
      <pubDate>Sat, 26 Jun 2021 13:48:34 +0000</pubDate>
      <link>https://dev.to/devhelper/new-person-capabilities-in-yoast-seo-premium-how-to-remove-them-f65</link>
      <guid>https://dev.to/devhelper/new-person-capabilities-in-yoast-seo-premium-how-to-remove-them-f65</guid>
      <description>&lt;p&gt;New Person capabilities in Yoast SEO Premium. How to remove them? Searched all over internet, but can't find answer, please help!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ecl0KS3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwvgcp5jznpspteggxjt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ecl0KS3B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uwvgcp5jznpspteggxjt.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>wordpress</category>
      <category>php</category>
    </item>
    <item>
      <title>Top 5 books EVERY programmer MUST read!</title>
      <author>Luke Garrigan</author>
      <pubDate>Sat, 26 Jun 2021 13:38:04 +0000</pubDate>
      <link>https://dev.to/lukegarrigan/top-5-books-every-programmer-must-read-50k</link>
      <guid>https://dev.to/lukegarrigan/top-5-books-every-programmer-must-read-50k</guid>
      <description>&lt;h1&gt;
  &lt;a href="#top-5-books-every-programmer-must-read"&gt;
  &lt;/a&gt;
  Top 5 books EVERY programmer MUST read!
&lt;/h1&gt;

&lt;p&gt;We all want to become a better programmer, and there are a tonne of books that’ll help you along your journey. In this blog, I’m going to list my 5 favourite programming books that have had the biggest impact on my thought process, problem-solving and coding ability. All the books chosen are language agnostic, so irrespective of what language you code in, you will gain value out of these books.&lt;/p&gt;

&lt;p&gt;I have also ordered the books based on their importance to me, and by importance I mean: how often I regularly pick the book back up to reread something.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-the-clean-coder"&gt;
  &lt;/a&gt;
  5 –  &lt;a href="https://www.amazon.co.uk/gp/product/0137081073/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0137081073&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=f89035c67519b39e3d8d4404b1ae67e9"&gt;The Clean Coder&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Author: Robert C. Martin&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/gp/product/0137081073/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0137081073&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=75cc21594e488b442431466b8754e6e3"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dwQXvWk1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ws-eu.amazon-adsystem.com/widgets/q%3F_encoding%3DUTF8%26MarketPlace%3DGB%26ASIN%3D0137081073%26ServiceVersion%3D20070822%26ID%3DAsinImage%26WS%3D1%26Format%3D_SL250_%26tag%3Dcodeheir-21" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This book is full of pragmatic advice for a programmer. From how to estimate, how to refactor, how to test, how to be a professional. Uncle Bob outlies his expectations for a professional programmer when it comes to time management, collaboration, management interactions and much more. The book details what you need to know and rules to follow to make the young profession of software development grow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you’ll learn&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  You’ll learn what it means to behave as a true software craftsman&lt;/li&gt;
&lt;li&gt;  How to deal with conflicts, tight schedules&lt;/li&gt;
&lt;li&gt;  How to get into the flow of coding&lt;/li&gt;
&lt;li&gt;  How to handle unrelenting pressure and avoid burnout&lt;/li&gt;
&lt;li&gt;  How to manage time&lt;/li&gt;
&lt;li&gt;  how to create an environment where programmers and teams can thrive&lt;/li&gt;
&lt;li&gt;  When to say “no” – and how to say it&lt;/li&gt;
&lt;li&gt;  When to say “yes” – and how to say it&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#4-the-complete-software-developers-career-guide"&gt;
  &lt;/a&gt;
  4 –  &lt;a href="https://www.amazon.co.uk/gp/product/B073X6GNJ1/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=B073X6GNJ1&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=4d5fa3ac5767fc9396636567b0690942"&gt;The Complete Software Developer’s Career Guide&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Author: John Sonmez&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/gp/product/B073X6GNJ1/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=B073X6GNJ1&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=75af61cd096968482bf996599e2db2da"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lz-3-W1z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ws-eu.amazon-adsystem.com/widgets/q%3F_encoding%3DUTF8%26MarketPlace%3DGB%26ASIN%3DB073X6GNJ1%26ServiceVersion%3D20070822%26ID%3DAsinImage%26WS%3D1%26Format%3D_SL250_%26tag%3Dcodeheir-21" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;r. As the title says, this book is “complete”, with 798 pages filled to the brim with advice on how to succeed in your programming journey. Although I have read every page, you would do well to read the chapters that are most relevant to you in your current career phase.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you’ll learn&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  What technical skills you’ll need to become a successful software developer&lt;/li&gt;
&lt;li&gt;  Which programming languages to learn&lt;/li&gt;
&lt;li&gt;  How to land a job, how to negotiate, how to leave a job and how the recruiting industry works&lt;/li&gt;
&lt;li&gt;  Everything you’ll need to know about software development, from TDD, source control, maintaining old code, etc&lt;/li&gt;
&lt;li&gt;  How to advance your career, creating a reputation, generalist vs specialist, speaking conferences, keeping your skills up to date&lt;/li&gt;
&lt;li&gt;  And so much more&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#3-cracking-the-coding-interview"&gt;
  &lt;/a&gt;
  3 –  &lt;a href="https://www.amazon.co.uk/gp/product/0984782869/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0984782869&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=6329710f6292f1706c732e0f224ef685"&gt;Cracking the Coding Interview&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Author: Gayle Laakmann McDowell&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/gp/product/0984782869/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0984782869&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=1c23f3616b0c896c3a81279e374af611"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ubLE70Ow--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ws-eu.amazon-adsystem.com/widgets/q%3F_encoding%3DUTF8%26MarketPlace%3DGB%26ASIN%3D0984782869%26ServiceVersion%3D20070822%26ID%3DAsinImage%26WS%3D1%26Format%3D_SL250_%26tag%3Dcodeheir-21" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This book is an anomaly in my list. All other books in the list I’d recommend to any engineer at any level, but this one is probably more suited to programmers trying to land their first gig or to programmers trying to land a job a big tech company with a rigorous technical interview.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you’ll learn&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  All about the programming interview process and what goes on behind the scenes&lt;/li&gt;
&lt;li&gt;  Big O notation, time complexity, space complexity, etc&lt;/li&gt;
&lt;li&gt;  How to prepare for technical questions and more importantly, how to solve them&lt;/li&gt;
&lt;li&gt;  How to handle offers and rejections and negotiations&lt;/li&gt;
&lt;li&gt;  A tonne of interview questions and how to solve them&lt;/li&gt;
&lt;li&gt;  Knowledge based questions too, so questions about specific languages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#2-head-first-design-patterns"&gt;
  &lt;/a&gt;
  2 –  &lt;a href="https://www.amazon.co.uk/gp/product/149207800X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=149207800X&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=98b00f76dbb4ea3394250bb39748f1ea"&gt;Head First Design Patterns&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Authors: Eric Freeman, Bert Bates, Kathy Sierra, Elisabeth Robson&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/gp/product/149207800X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=149207800X&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=5dedd0b4c32f7142770917c618576790"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--lAQi3trb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ws-eu.amazon-adsystem.com/widgets/q%3F_encoding%3DUTF8%26MarketPlace%3DGB%26ASIN%3D149207800X%26ServiceVersion%3D20070822%26ID%3DAsinImage%26WS%3D1%26Format%3D_SL250_%26tag%3Dcodeheir-21" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As a software engineer there are certain reoccurring software problems that have well-define solutions, for these problems we use design patterns. Design patterns are important to learn, even if you don’t fully know how to implement a certain design pattern it will do you well just to know its purpose.&lt;/p&gt;

&lt;p&gt;This book was a close second with  &lt;a href="https://www.amazon.co.uk/gp/product/0201633612/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0201633612&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=061e78345cb3bbd3f14c98adbee2e0ad"&gt;The Gang of Four&lt;/a&gt;  design patterns books. I have chosen  &lt;a href="https://www.amazon.co.uk/gp/product/149207800X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=149207800X&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=98b00f76dbb4ea3394250bb39748f1ea"&gt;Head First Design Patterns&lt;/a&gt;  purely for its accessibility, it’s a very easy and even fun read. Anyone can jump in and start writing their own design patterns in minutes.&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;&lt;em&gt;What you’ll learn&lt;/em&gt;&lt;/strong&gt;*:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  The Observer pattern&lt;/li&gt;
&lt;li&gt;  The Decorator pattern&lt;/li&gt;
&lt;li&gt;  The Factory pattern&lt;/li&gt;
&lt;li&gt;  The Singleton pattern&lt;/li&gt;
&lt;li&gt;  The Command pattern&lt;/li&gt;
&lt;li&gt;  The Adapter and Façade patterns&lt;/li&gt;
&lt;li&gt;  The Template Method pattern&lt;/li&gt;
&lt;li&gt;  The Iterator and Composite patterns&lt;/li&gt;
&lt;li&gt;  The State pattern&lt;/li&gt;
&lt;li&gt;  The Proxy pattern&lt;/li&gt;
&lt;li&gt;  Compound patterns&lt;/li&gt;
&lt;li&gt;  Application of patterns in the real world&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#1-clean-code"&gt;
  &lt;/a&gt;
  1 –  &lt;a href="https://www.amazon.co.uk/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0132350882&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=4667dcdd34caabb2050c844142a96b61"&gt;Clean Code&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Author: Robert C. Martin&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.uk/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;amp;camp=1634&amp;amp;creative=6738&amp;amp;creativeASIN=0132350882&amp;amp;linkCode=as2&amp;amp;tag=codeheir-21&amp;amp;linkId=cfebb22caf9dbd2c44361c30aa733d98"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ll6M6BbS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://ws-eu.amazon-adsystem.com/widgets/q%3F_encoding%3DUTF8%26MarketPlace%3DGB%26ASIN%3D0132350882%26ServiceVersion%3D20070822%26ID%3DAsinImage%26WS%3D1%26Format%3D_SL250_%26tag%3Dcodeheir-21" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clean code is the most important book on this list, I’ve even  &lt;a href="https://codeheir.com/2019/08/24/the-one-book-every-developer-must-read/"&gt;dedicated an entire blog to it&lt;/a&gt;. This book gave me a whole new perspective, it has restructured the way I think about each line of code. It made me realise that there is an art to being a software engineer.&lt;/p&gt;

&lt;p&gt;Whenever I’m programming I have Clean Code an arms-reach away as a reference. The book has tonnes of examples of transforming bad code to clean code and the step by step process on how to get there. You’ll actually begin to understand when you’re writing bad code. You’ll look at your old code and wince at its structure, the vertical spacing, the complexity, the out of sync abstractions, the useless comments, and the spaghetti nature.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What you’ll learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  What it really means to write clean code and some principles to follow&lt;/li&gt;
&lt;li&gt;  How to choose meaningful variable/method/class names&lt;/li&gt;
&lt;li&gt;  How to write a beautiful function&lt;/li&gt;
&lt;li&gt;  When to comment and how to comment&lt;/li&gt;
&lt;li&gt;  How to format your code, position of methods, the newspaper metaphor&lt;/li&gt;
&lt;li&gt;  Objects and data structures and data abstraction&lt;/li&gt;
&lt;li&gt;  Appropriate error handling&lt;/li&gt;
&lt;li&gt;  How to write brilliant unit tests&lt;/li&gt;
&lt;li&gt;  How to perform successive refinement&lt;/li&gt;
&lt;li&gt;  And a whole list of code smells&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;I hope you’ve found this list of my favourite programming books &lt;br&gt;
useful, they’ve certainly had the biggest impact on my career so far. Let me know if you’d recommend any books that aren’t listed here.&lt;/p&gt;

&lt;p&gt;Check out my previous blog &lt;a href="https://codeheir.com/2021/06/19/the-game-of-life/"&gt;The Game Of Life&lt;/a&gt; – that was a really fun one.&lt;/p&gt;

&lt;p&gt;I hope you've enjoyed this blog, if you do by some miracle enjoy my blabbering then head over to my blogging site at &lt;a href="//codeheir.com"&gt;codeheir.com&lt;/a&gt; where I write weekly blogs about whatever in the world of programming has my attention!&lt;/p&gt;

</description>
      <category>books</category>
      <category>career</category>
    </item>
    <item>
      <title>Responsive Navigation Bar Tutorial | HTML &amp; CSS</title>
      <author>Chaoo Charles</author>
      <pubDate>Sat, 26 Jun 2021 13:30:53 +0000</pubDate>
      <link>https://dev.to/chaoocharles/responsive-navigation-bar-tutorial-html-css-4ic1</link>
      <guid>https://dev.to/chaoocharles/responsive-navigation-bar-tutorial-html-css-4ic1</guid>
      <description>&lt;p&gt;Hello friends,&lt;/p&gt;

&lt;p&gt;The following tutorial will show you how you can create a responsive navbar using just HTML and CSS. We will also add some cool hover effect on our links.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-sidenav-preview"&gt;
  &lt;/a&gt;
  The side-nav preview
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHE_ruxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2mzghd2gsgvfb229wgp.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHE_ruxA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i2mzghd2gsgvfb229wgp.PNG" alt="Side Nav Preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video-tutorial"&gt;
  &lt;/a&gt;
  Video Tutorial
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/Camwh6hk4wY"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Getting Started with Django</title>
      <author>Raghu Kapur</author>
      <pubDate>Sat, 26 Jun 2021 13:28:07 +0000</pubDate>
      <link>https://dev.to/kapur_raghu/getting-started-with-django-38k6</link>
      <guid>https://dev.to/kapur_raghu/getting-started-with-django-38k6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#takeaways-from-this-article"&gt;
  &lt;/a&gt;
  &lt;u&gt;Takeaways from this article:&lt;/u&gt;
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Setting up python in Ubuntu system.&lt;/li&gt;
&lt;li&gt;Creating a virtual environment in python.&lt;/li&gt;
&lt;li&gt;Creating a sample application with Django Framework.

&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#1-setting-up-python-in-ubuntu-system"&gt;
  &lt;/a&gt;
  1. &lt;u&gt;Setting up python in Ubuntu system.&lt;/u&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#11-check-if-python-exists-in-your-system"&gt;
  &lt;/a&gt;
  1.1 Check if python exists in your system.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If Python is not installed, continue to the next step, else skip to point 2.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#12-update-and-refresh-repository-list"&gt;
  &lt;/a&gt;
  1.2 Update and refresh repository list.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;update&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#13-install-supporting-softwares"&gt;
  &lt;/a&gt;
  1.3 Install supporting softwares.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;software&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#14-install-python-38"&gt;
  &lt;/a&gt;
  1.4 Install python 3.8
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#15-check-installed-python-version"&gt;
  &lt;/a&gt;
  1.5 Check installed python version
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;h3&gt;
  &lt;a href="#2-creating-virtual-environment-in-python"&gt;
  &lt;/a&gt;
  2. &lt;u&gt;Creating virtual environment in python.&lt;/u&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#21-install-pythonpip"&gt;
  &lt;/a&gt;
  2.1 Install python-pip
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#22-install-python-virtualenvironment"&gt;
  &lt;/a&gt;
  2.2 Install python virtual-environment
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#23-create-virtualenvironment"&gt;
  &lt;/a&gt;
  2.3 Create virtual-environment
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;virtual_enviornment_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#24-activate-virtualenvironment"&gt;
  &lt;/a&gt;
  2.4 Activate virtual-environment
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;virtual_enviornment_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;/&lt;/span&gt;&lt;span class="nb"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Your command prompt will now be prefixed with the name of your environment:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;virtual_enviornment_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;raghu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;Projects&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#25-test-your-virtualenvironment"&gt;
  &lt;/a&gt;
  2.5 Test your virtual-environment
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will open a python shell for you.&lt;/p&gt;

&lt;p&gt;Congratulations your virtual environment has been created, let's create our first Django app.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-creating-a-sample-application-with-django-framework"&gt;
  &lt;/a&gt;
  3. &lt;u&gt;Creating a sample application with Django Framework.&lt;/u&gt;
&lt;/h3&gt;
&lt;h4&gt;
  &lt;a href="#31-check-if-django-exists"&gt;
  &lt;/a&gt;
  3.1 Check if Django exists.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;If Django is not installed, continue to the next step, else skip to step 3.3.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#32-install-django"&gt;
  &lt;/a&gt;
  3.2 Install Django
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#33-setting-up-django-and-starting-your-server"&gt;
  &lt;/a&gt;
  3.3 Setting up Django and starting your server.
&lt;/h4&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;admin&lt;/span&gt; &lt;span class="n"&gt;startproject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;project_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This command would have created a folder with your project name. Navigate to the folder using the "cd" command.&lt;/p&gt;

&lt;p&gt;Inside the folder you will see the file "manage.py", a key file in Django projects.&lt;br&gt;
Run the following command to migrate the database(Django uses SQLite by default) and sync your changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;migrate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create some migrations and extra files, which we will discuss in the upcoming blogs.&lt;/p&gt;

&lt;p&gt;For now you can start your webserver using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;runserver&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the terminal you will see the development server starting at &lt;a href="http://127.0.0.1:8000/"&gt;http://127.0.0.1:8000/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can open the same URL in the browser to see your project&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4hvtdOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6633htsr8zmr21kljd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q4hvtdOj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x6633htsr8zmr21kljd3.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-conclusion"&gt;
  &lt;/a&gt;
  4. &lt;u&gt;Conclusion&lt;/u&gt;
&lt;/h3&gt;

&lt;p&gt;In this blog we learned about how to setup a Django Application.&lt;br&gt;
In the upcoming blogs we will learn to create a fully functional application.&lt;/p&gt;

</description>
      <category>django</category>
      <category>python</category>
      <category>programming</category>
      <category>ubuntu</category>
    </item>
    <item>
      <title>How to make a responsive hamburger menu using CSS only?</title>
      <author>Gautam Tiwari</author>
      <pubDate>Sat, 26 Jun 2021 13:14:32 +0000</pubDate>
      <link>https://dev.to/gautamtiwari/how-to-make-a-responsive-hamburger-menu-using-css-only-3pg5</link>
      <guid>https://dev.to/gautamtiwari/how-to-make-a-responsive-hamburger-menu-using-css-only-3pg5</guid>
      <description>&lt;p&gt;Hey everyone ✌.  I am  &lt;a href="https://linkedin.com/in/gautamtiwari003/"&gt;Gautam Tiwari&lt;/a&gt;, a front-end developer and... let's get started.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: Follow along with me in this tutorial&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#why-do-we-need-a-responsive-menu"&gt;
  &lt;/a&gt;
  Why do we need a responsive menu?
&lt;/h2&gt;

&lt;p&gt;THE MAJORITY OF USERS USE MOBILE PHONES.&lt;/p&gt;

&lt;p&gt;Here are few facts to prove that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Over one year, mobile users share increased by over 10%.&lt;/li&gt;
&lt;li&gt;As of 2020, here is the global breakdown of internet traffic: &lt;strong&gt;50.88% mobile&lt;/strong&gt;, 46.39% desktop, 2.74% tablet &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If that's not enough, you can check the global mobile traffic data below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DLoFjdPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624209159642/pAp4_ibLp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DLoFjdPF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624209159642/pAp4_ibLp.png" alt="Mobile usage graph. Mobile usage can be seen to increase"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Source: &lt;a href="https://bit.ly/3xUVMhp"&gt;https://bit.ly/3xUVMhp&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#final-result"&gt;
  &lt;/a&gt;
  Final Result
&lt;/h2&gt;

&lt;p&gt;The main goal here is to help you out with the hamburger menu for the mobile version.&lt;/p&gt;

&lt;p&gt;Here's what we will be building in this tutorial:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AbK6VeNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624346309808/VQJ3prPxG.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AbK6VeNn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624346309808/VQJ3prPxG.gif" alt="responsive hamburger menu demo on small screen size"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Did you notice the glass morphism effect on the menu? We will be doing that too!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-markup-with-explanation"&gt;
  &lt;/a&gt;
  The Markup (with explanation)
&lt;/h2&gt;

&lt;p&gt;Let's set up the HTML for the nav and the menu.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__logo"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;CompanyLogo&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;

  &lt;span class="c"&gt;&amp;lt;!-- focus on this div --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__menucontainer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__listcontainer"&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__menu"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"navmenu"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;About&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__link"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"hamburger"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#navmenu"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-2x fa-hamburger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#!"&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;"close menu"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"nav__hamburgerclose"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-2x fa-times-circle"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Just copy-paste this code (or type it if you an absolute beginner), as its explanation is given below.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Apologies for any semantical mistake and somewhat long class name.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let's understand what we did and why we did it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We have a nav element for our fixed navbar on top of our page. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;nav&amp;gt;&lt;/code&gt; element has two child elements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;We have a &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tag for the company logo to be placed.&lt;/li&gt;
&lt;li&gt;The second child of nav, is our container (&lt;code&gt;&amp;lt;div class="nav__menucontainer"&amp;gt;&lt;/code&gt;) for the menu.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The menu container have two childs:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;div class="nav__listcontainer" tabindex="0"&amp;gt;&lt;/code&gt; to contain the menu list and the hamburger icon&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;&amp;lt;a id="hamburger" href="#navmenu" title="menu" class="nav__hamburger"&amp;gt;&lt;/code&gt; to toggle open state for the menu&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last element to consider is the adjacent sibling of our list container. It is the close icon to toggle close state for the menu&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;NOTE: Do not forget the tabindex="0" on &lt;code&gt;&amp;lt;div class="nav__listcontainer"&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#stylesheet-with-explanation"&gt;
  &lt;/a&gt;
  Stylesheet (with explanation)
&lt;/h2&gt;

&lt;p&gt;Now, let's take a look at the CSS styles:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* most part is for styling, and you can safely ignore it */&lt;/span&gt;
&lt;span class="c"&gt;/* comments are placed wherever necessary */&lt;/span&gt;

&lt;span class="o"&gt;*,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-sizing&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;border-box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f5f5f5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;/* --- You will know what this is --- */&lt;/span&gt;
&lt;span class="nf"&gt;#blobSvg&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;520px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;51&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.85&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#efefef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__logo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;700&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__menucontainer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;80ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/* hiding the hamburger icon on large screen sizes */&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__hamburgerclose&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;min-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;32px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;150ms&lt;/span&gt; &lt;span class="n"&gt;linear&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="c"&gt;/*   hiding the close icon and... */&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* pushing it behind the hamburger icon so that hamburger icon can be clicked */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-wrap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.95rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.nav__link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nc"&gt;.nav__link&lt;/span&gt;&lt;span class="nd"&gt;:focus-visible&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;4px&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;-1px&lt;/span&gt; &lt;span class="m"&gt;#a2e718&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This was for the desktop version of our menu. It works for large screen sizes. So, now let's make it responsive with a media query.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#stylesheet-for-small-screen-sizes"&gt;
  &lt;/a&gt;
  Stylesheet (for small screen sizes)
&lt;/h3&gt;

&lt;p&gt;Have a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="c"&gt;/* ----- smaller screen sizes ----- */&lt;/span&gt;
&lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;520px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* making the hamburger icon visible on smaller screen sizes */&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav__menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* move menu offscreen */&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1000px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c"&gt;/* just some styles */&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#25310c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;30px&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* part of glass morphism effect */&lt;/span&gt;
    &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/* uncomment the line below to activate on hover. */&lt;/span&gt;
  &lt;span class="c"&gt;/*   .nav__listcontainer:hover .nav__menu, */&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="nc"&gt;.nav__menu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus-within&lt;/span&gt; &lt;span class="nc"&gt;.nav__menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;visibility&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;visible&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/*   if the browser supports backdrop-filter property, 
  then add it (for the glass morphism effect) */&lt;/span&gt;
  &lt;span class="k"&gt;@supports&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* uncomment the line below to activate on hover. */&lt;/span&gt;
    &lt;span class="c"&gt;/*     .nav__listcontainer:hover .nav__menu, */&lt;/span&gt;
    &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="nc"&gt;.nav__menu&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus-within&lt;/span&gt; &lt;span class="nc"&gt;.nav__menu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="py"&gt;backdrop-filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav__item&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5rem&lt;/span&gt; &lt;span class="m"&gt;1.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nc"&gt;.nav__link&lt;/span&gt;&lt;span class="nd"&gt;:hover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__link&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#121212&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/*  uncomment the line below to activate on hover. */&lt;/span&gt;
  &lt;span class="c"&gt;/* NOTE: Hover is not recommended, it will have side effects on this */&lt;/span&gt;
  &lt;span class="c"&gt;/*   .nav__listcontainer:hover .nav__hamburger, */&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="nc"&gt;.nav__hamburger&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus-within&lt;/span&gt; &lt;span class="nc"&gt;.nav__hamburger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c"&gt;/* uncomment the line below to activate on hover. */&lt;/span&gt;
  &lt;span class="c"&gt;/* NOTE: Hover is not recommended, it will have side effects on this */&lt;/span&gt;
  &lt;span class="c"&gt;/*   .nav__listcontainer:hover + .nav__hamburgerclose, */&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.nav__hamburgerclose&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
  &lt;span class="nc"&gt;.nav__listcontainer&lt;/span&gt;&lt;span class="nd"&gt;:focus-within&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;.nav__hamburgerclose&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Slow down...Slow down. I know it looks like a lot, but you should know that it was written in SCSS, and then the compiled CSS is used for a beginner-friendly explanation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: Copy-paste all these styles&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#so-whats-happening-here"&gt;
  &lt;/a&gt;
  So what's happening here?
&lt;/h3&gt;

&lt;p&gt;Of course, there is a lot that's happening there, but as the first comment says, you can safely ignore most of it.&lt;/p&gt;

&lt;p&gt;As I said in the beginning, we'll focus on the mobile part.&lt;/p&gt;

&lt;p&gt;So, let's start from here: &lt;code&gt;@media (max-width: 520px) {&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Choose a breakpoint suitable for your menu size&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initially, we had our hamburger and close icon hidden on large screen sizes &lt;code&gt;display: none; opacity: 0;&lt;/code&gt;. But on small screen size, we want to see the hamburger icon. So, we did this: &lt;code&gt;display: flex; opacity: 1;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we moved the menu list (&lt;code&gt;&amp;lt;ul&lt;/code&gt;&amp;gt;) off the screen so that we don't click on it mistakenly. Try inspecting &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; without these (&lt;code&gt;opacity: 0; position: fixed; visibility: none; top: -1000px;&lt;/code&gt;) styles for better understanding of what I am saying.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now, the crucial part for the functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;.nav__listcontainer:focus .nav__menu,
.nav__listcontainer:focus-within .nav__menu {&lt;/code&gt;: This selector says, whenever the listcontainer has focus or if any element within this element has focus, then do some styling for &lt;code&gt;.nav__menu&lt;/code&gt;. We are just displaying the &lt;code&gt;.nav__menu&lt;/code&gt; that we moved offscreen before.&lt;/li&gt;
&lt;li&gt;Skiping to &lt;code&gt;.nav__listcontainer:focus .nav__hamburger,
.nav__listcontainer:focus-within .nav__hamburger {&lt;/code&gt; selector: This selector also says, whenever the listcontainer has focus or if any element within this element has focus, then do some styling for &lt;code&gt;.nav__hamburger&lt;/code&gt;. We are hiding hamburger icon here.&lt;/li&gt;
&lt;li&gt;Now, hopefully, you can tell what the succeeding selector does. Yes, you are right about it. It displays the close icon and brings it in front using &lt;code&gt;z-index: 1;&lt;/code&gt; so that it can be clicked.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;@supports (backdrop-filter: blur(10px)) {&lt;/code&gt;: This (&lt;code&gt;@supports (...)&lt;/code&gt;) rule checks if the property inside the parenthesis () is supported by the browser. If it is supported, then apply the styles inside it. Here we add a partially white background and add a slightly blurry effect for the &lt;strong&gt;GLASS MORPHISM EFFECT&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now, only &lt;code&gt;.nav_&lt;em&gt;item&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;.nav_item:hover, .nav:focus&lt;/code&gt; are left. You can ignore them as they are just adding some styling it them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Wait... there is one more selector left, &lt;code&gt;#blobSvg&lt;/code&gt;. To get this element, go to  &lt;a href="https://blobs.app/"&gt;blobs.app&lt;/a&gt; make a blob that you like and copy-paste the SVG code inside the &lt;code&gt;.container&lt;/code&gt; like so:&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;nav&amp;gt;&lt;/span&gt;
   ...
&lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="c"&gt;&amp;lt;!--   svg is placed to see the glass morphism effect --&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;svg&lt;/span&gt; &lt;span class="na"&gt;viewBox=&lt;/span&gt;&lt;span class="s"&gt;"0 0 500 500"&lt;/span&gt; &lt;span class="na"&gt;xmlns=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/2000/svg"&lt;/span&gt; &lt;span class="na"&gt;xmlns:xlink=&lt;/span&gt;&lt;span class="s"&gt;"http://www.w3.org/1999/xlink"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blobSvg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;defs&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;linearGradient&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"gradient"&lt;/span&gt; &lt;span class="na"&gt;x1=&lt;/span&gt;&lt;span class="s"&gt;"0%"&lt;/span&gt; &lt;span class="na"&gt;y1=&lt;/span&gt;&lt;span class="s"&gt;"0%"&lt;/span&gt; &lt;span class="na"&gt;x2=&lt;/span&gt;&lt;span class="s"&gt;"0%"&lt;/span&gt; &lt;span class="na"&gt;y2=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"0%"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"stop-color: rgb(255, 95, 109);"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;stop&lt;/span&gt; &lt;span class="na"&gt;offset=&lt;/span&gt;&lt;span class="s"&gt;"100%"&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"stop-color: rgb(255, 195, 113);"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/stop&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/linearGradient&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/defs&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"blob"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M365,286Q374,322,337.5,330.5Q301,339,275.5,410.5Q250,482,221.5,415Q193,348,154.5,337.5Q116,327,82,288.5Q48,
                       250,57,197Q66,144,98,93.5Q130,43,190,76Q250,109,304,86Q358,63,361,123.5Q364,184,360,217Q356,250,365,286Z"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"url(#gradient)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/svg&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, paste the styles for &lt;code&gt;&amp;lt;div class="container"&amp;gt;&lt;/code&gt; given below at the end (or somewhere at the top):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* centering elements inside .container */&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;720px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* centering container within its parent */&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt; &lt;span class="m"&gt;1.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it! Check the responsiveness and the glass morphism effect that you just built with me.&lt;/p&gt;

&lt;p&gt;If you face any problem following along, then check the Codepen for this below or ping me on Linkedin or Twitter (@gautamtiwari003):&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/gautam-tiwari/embed/GRWLRdZ?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;HTML and CSS are underrated but are powerful instead. They can do a lot of magic without even involving JavaScript (Don't get me wrong. I love JS❤). &lt;/p&gt;

&lt;p&gt;I hope you learnt and built something with me today.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Keep coding imperfectly. Keep coding experimentally.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>frontend</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>MLH INIT 2022</title>
      <author>Ritvik Shukla</author>
      <pubDate>Sat, 26 Jun 2021 12:59:15 +0000</pubDate>
      <link>https://dev.to/rit_s_here/mlh-init-2022-566o</link>
      <guid>https://dev.to/rit_s_here/mlh-init-2022-566o</guid>
      <description>&lt;p&gt;MLH is organizing INIT 2022, where you will get an opportunity to learn and network with like minded people!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-init"&gt;
  &lt;/a&gt;
  What is INIT?
&lt;/h2&gt;

&lt;p&gt;INIT is a celebration for the start of the 2022 Hackathon Season! This is the first time MLH is running INIT, the format will feel familiar to those who have participated in Local Hack Day. You can expect to complete challenges, hear about BIG community announcements, chat at hacker hangouts, enjoy fun live sessions,network with people, make new memories (and memes) and of course our favorite SWAGS!!&lt;/p&gt;

&lt;p&gt;So If you are Interested, then Register here:&lt;/p&gt;

&lt;p&gt;Registration&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Register for the whole week - &lt;a href="https://hackp.ac/init"&gt;https://hackp.ac/init&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Complete the swag form - &lt;a href="https://hackp.ac/INITswag"&gt;https://hackp.ac/INITswag&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Update your address - &lt;a href="https://hackp.ac/address"&gt;https://hackp.ac/address&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Join Discord and a Guild - &lt;a href="https://discord.mlh.io/"&gt;https://discord.mlh.io/&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And  &lt;strong&gt;Eddiehub&lt;/strong&gt;  would be participating in INIT this season. Join Eddiehub guild!! You will get to learn and network with some awesome folks out there so do not miss this one!!&lt;/p&gt;

&lt;p&gt;Join our guild- &lt;a href="https://discord.mlh.io/"&gt;https://discord.mlh.io/&lt;/a&gt; (Select EddieHub as your guild)&lt;/p&gt;

&lt;p&gt;Join our community on discord also- &lt;a href="https://discord.gg/jgfaD56B"&gt;https://discord.gg/jgfaD56B&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why you can't name a file 'CON' in Windows</title>
      <author>Apoorv Tyagi</author>
      <pubDate>Sat, 26 Jun 2021 12:45:10 +0000</pubDate>
      <link>https://dev.to/apoorvtyagi/why-you-can-t-name-a-file-con-in-windows-41ok</link>
      <guid>https://dev.to/apoorvtyagi/why-you-can-t-name-a-file-con-in-windows-41ok</guid>
      <description>&lt;p&gt;❓ Did you know you can’t name a file “Con” in Windows&lt;/p&gt;

&lt;p&gt;If you’re running a Windows machine, try it right now. &lt;strong&gt;Go to File Explorer -&amp;gt; create a new folder -&amp;gt; name it "Con"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Did it work? Now try with "PRN", "AUX" or "NUL". What did you get?&lt;/p&gt;

&lt;p&gt;Probably this 👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-UaV9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624010275461/kIHbPV7Ij.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O1-UaV9Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624010275461/kIHbPV7Ij.png" alt="Invalid.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The system will not let you do it.&lt;/p&gt;

&lt;p&gt;Con is an English word, and there are a few human names like Connor who goes by the nickname 'Con'. So if you’re trying to save a photo of one of them using their nickname on Windows, you will not able to.&lt;/p&gt;

&lt;p&gt;In fact, the system won't let you name a file or folder &lt;code&gt;CON&lt;/code&gt;, &lt;code&gt;AUX&lt;/code&gt;, &lt;code&gt;PRN&lt;/code&gt;, &lt;code&gt;LST&lt;/code&gt;, &lt;code&gt;COM0&lt;/code&gt; to &lt;code&gt;COM9&lt;/code&gt;, &lt;code&gt;LPT0&lt;/code&gt; to &lt;code&gt;LPT9&lt;/code&gt;, or &lt;code&gt;NUL&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-why-windows-doesnt-allow-this"&gt;
  &lt;/a&gt;
  But why Windows doesn’t allow this?
&lt;/h1&gt;

&lt;p&gt;The reason for that goes back to MS-DOS, one of the oldest command lines from the 80s. In MS-DOS, all those words that are mentioned above are the names of &lt;strong&gt;device files&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;They were a quick and clever way of letting programs on a computer interact with other hardware like printers, keyboards, and basically anything that you can plug in. Rather than every program having to learn to communicate with every possible device, that job was given to a "device driver".&lt;/p&gt;

&lt;p&gt;This was done so that programmers didn’t have to worry about how every single type of hardware device like printers worked. Instead, they could reuse code that they already had for reading and writing files from and to the printer. They would just have to save whatever they wanted to print to this "device file".&lt;/p&gt;

&lt;p&gt;This means that even when a new printer came out with new features in it and if the manufacturer would bundle a new driver with it, all the old programs would still work, in the same way as they always did, and the driver would deal with the dirty stuff.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#backward-compatibility"&gt;
  &lt;/a&gt;
  Backward Compatibility
&lt;/h2&gt;

&lt;p&gt;If you type "dir" in your windows terminal, you’d get a listing on the screen of whatever files were in the current directory or folder. Typing "dir", adding a redirect symbol(&amp;gt;) after that, and mentioning a file name at last, would then save the listing on that file instead of the listing going to the screen.&lt;/p&gt;

&lt;p&gt;But if you tried to save it to a file called "LPT1", the system would spot that file name, and instead of going to the hard disk, your list will be sent to the device driver for the parallel port, the one that was labeled LPT1 on the back of your computer. The place where you have a printer plugged in. So even knowing anything about how the parallel port or printer worked, you could just print stuffs.&lt;/p&gt;

&lt;p&gt;Windows 10 probably don't use parallel port now but the reason why these reserved words still exist till now is because of &lt;strong&gt;backward compatibility&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Windows 10 retains code from the days of Windows 3.1, and Windows 3.1 was created with MS-DOS as basic, so was Windows 95. With Windows NT this did not happen, but still, Microsoft wanted it to be compatible with Windows 95, and Windows 10 is still partly based on Windows NT. So those were the reserved words in MS-DOS in the 80s and they still continue to be reserved words in Windows in 2021&lt;/p&gt;

&lt;p&gt;Almost no one may use a parallel port to connect a printer anymore, but Microsoft chooses to continue to support extremely old software and devices to this day.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we saw why you can't name a file or a folder "Con" in Windows.&lt;/p&gt;

&lt;p&gt;In the early times of MS-DOS, computers were basically a black screen with text and nothing else. So everything worked by writing orders. For a program to interact with other things, such as a printer, a command had to be written using a text file or “device file” that would interact with a driver.&lt;/p&gt;

&lt;p&gt;Depending on the device, it has a name reserved. For example, the parallel ports that printers used to connect to use LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9. The serial ports has reserved COM from COM1 to COM9. "CON" represents the console etc.&lt;/p&gt;

&lt;p&gt;To this day those device names are reserved so that you cannot create usable files or folders with them. If back then you tried to do something like creating a file called LPT1.txt, what you were going to do was send it to the printer or something like that and that’s why they were blocked.&lt;/p&gt;

&lt;p&gt;Hope you learned something new today!&lt;/p&gt;

&lt;p&gt;Thanks for reading :))&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#starting-out-in-web-development"&gt;
  &lt;/a&gt;
  Starting out in web development??
&lt;/h3&gt;

&lt;p&gt;Checkout ▶ &lt;a href="https://gumroad.com/a/316675187"&gt;HTML To React: The Ultimate Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This ebook is a comprehensive guide that teaches you &lt;strong&gt;everything you need to know to be a web developer through a ton of easy-to-understand examples and proven roadmaps&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It contains 👇&lt;/p&gt;

&lt;p&gt;✅  Straight to the point explanations&lt;/p&gt;

&lt;p&gt;✅  Simple code examples&lt;/p&gt;

&lt;p&gt;✅  50+ Interesting project ideas&lt;/p&gt;

&lt;p&gt;✅  3 Checklists of secret resources&lt;/p&gt;

&lt;p&gt;✅  A Bonus Interview prep&lt;/p&gt;

&lt;p&gt;You can even check out &lt;a href="https://drive.google.com/drive/u/0/folders/1GJECqmBUbOwgg5eQvGlMwHcDShqxKISJ"&gt;a free sample from this book&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and here's the &lt;a href="https://gumroad.com/a/316675187"&gt;link&lt;/a&gt; to the complete book, if you want to buy it for yourself &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#also-get-60-off-on-the-original-price"&gt;
  &lt;/a&gt;
  Also, Get 60% off on the original price😉
&lt;/h4&gt;

&lt;p&gt;👇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gumroad.com/a/316675187"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GvQd_5ED--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1618289289910/D--w2qaO3h.png" alt="eBook.png"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>watercooler</category>
      <category>computerscience</category>
      <category>programming</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Making a game: Engine considerations (Unreal vs Godot)</title>
      <author>Seth</author>
      <pubDate>Sat, 26 Jun 2021 11:43:38 +0000</pubDate>
      <link>https://dev.to/saluki/making-a-game-engine-considerations-unreal-vs-godot-1bag</link>
      <guid>https://dev.to/saluki/making-a-game-engine-considerations-unreal-vs-godot-1bag</guid>
      <description>&lt;p&gt;When you want to make a game, one of the first things that you’ll need to consider is whether or not you want to use a game engine for it, and then if you do, which game engine you actually want to use.&lt;/p&gt;

&lt;p&gt;It’s quite easy to spend an excessive amount of time worrying about which engine you’re going to use, and comparing them all down to the last little detail. But at the end of the day the engine isn’t going to make the game – you are. This is something you should keep in mind.&lt;/p&gt;

&lt;p&gt;Everybody has their own opinions on which game engine is best for them, and that’s absoloutely fine. You should always go for the choice that best suits you and your use case. However, in this article I’m going to give a brief overview of my prefered engines to work with. Over the last few years, I have made games using Unity, Godot and Unreal Engine and I have learnt a fair amount about each of these engines, although I would not call myself an expert user in any of them.&lt;/p&gt;

&lt;p&gt;The full article is freely avaliable over here: &lt;a href="https://www.saluki.tech/2021/06/14/making-a-game-engine-considerations/"&gt;https://www.saluki.tech/2021/06/14/making-a-game-engine-considerations/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope you enjoy it, and find something useful there. As always, I'm open to feedback.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Coding Styles: Imperative, Declarative and DSL🤯</title>
      <author>Sameer Kumar</author>
      <pubDate>Sat, 26 Jun 2021 11:28:59 +0000</pubDate>
      <link>https://dev.to/sameer1612/coding-styles-imperative-declarative-and-dsl-emb</link>
      <guid>https://dev.to/sameer1612/coding-styles-imperative-declarative-and-dsl-emb</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Hey You! Don’t be afraid of these terms, read, learn and confuse others! 💁&lt;/p&gt;

&lt;p&gt;The first thing to note is in the title is that I didn’t mention Versus as no soul on this beautiful earth can draw a straight line between them. It’s like the Single Responsibility Principle, where you keep breaking down your application logic and still find it being violated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, what the heck these terms mean, lawyers reading this article please refer &lt;a href="https://en.wikipedia.org/wiki/Imperative_programming"&gt;wikipedia&lt;/a&gt; or something, Nerds focus here: 🤓&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Imperative deals with - How to do it?&lt;br&gt;&lt;br&gt;
Declarative deals with - What to do anyway?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can thank me later for confusing you again!&lt;/p&gt;

&lt;p&gt;The glue that binds these both paradigms is called Abstraction. In simple terms, it just depends on how much you can hide. The more the abstraction, the more you move towards Declarative style. On the other hand, if you focus more on implementation details, you’ll be leaning towards imperative style.&lt;/p&gt;

&lt;p&gt;Take a simple example: We all are engineers some way or other, so once in our college days we must have come across, “Drawing a line using c programming language or any canvas-based system”. That was too Imperative to be happy at the same time.&lt;/p&gt;

&lt;p&gt;Now, come to our beloved HTML land.&lt;/p&gt;

&lt;p&gt;&lt;em&gt; # Ok, Tata, Bye bye.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Conclusion to be drawn that, in HTML we want a line, we ask for a line and get a line. No pixel-level shenanigans.&lt;/p&gt;

&lt;p&gt;So, the new kid on block, React has become even more Declarative than Html itself. When we set the state of a text shown on screen to something else, well have you ever thought about how it happens in the background. In vanilla Html js style, you must have thought about putting an ID and binding it to some Javascript variable and some more ninja stuff to get it done.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4vd8ndgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/956/1%2AKvHlU_yRRG3BoEaIxmo2PA.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4vd8ndgz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://miro.medium.com/max/956/1%2AKvHlU_yRRG3BoEaIxmo2PA.gif" alt="new is always better"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One common example using sql will be like:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#select-from-users-where-namesameer"&gt;
  &lt;/a&gt;
  Select * from users where name=“Sameer”;
&lt;/h2&gt;

&lt;p&gt;Now, have you told sql how to do a match, whether indexes are available or not, what order it should scan table, engine specific implementation or anything such. For that matter anything on how to get data from the db except for what to get.&lt;/p&gt;

&lt;p&gt;Essence here is that you can always make anything more Declarative by putting lot of abstraction makeup on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yw-ncMSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1120/1%2AEETFYldAU_tRqCrVkm6rTg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yw-ncMSF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1120/1%2AEETFYldAU_tRqCrVkm6rTg.jpeg" alt="dsl spongebob"&gt;&lt;/a&gt;And when this makeup reaches ultra pro max level, it becomes a DSL.&lt;/p&gt;

&lt;p&gt;Languages like ruby are fan of DSL. DSL stands for Domain Specific Language. It represents that extremity when a language can fit only one domain.&lt;/p&gt;

&lt;p&gt;Yeah react too has a DSL, yeh you guessed it right JSX, it is so modified version of Javascript that it can only create markup elements. You do a &lt;strong&gt;&lt;em&gt;&lt;/em&gt;&lt;/strong&gt; and then leave it to JSX to handle how original element gets prepared for DOM tree and how that className becomes class.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSX is that branch of js which is only suitable for writing components.&lt;br&gt;&lt;br&gt;
Can we write a javascript generator function in it? Well is it even meant for it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For rubyists: Here in this database migration, we are asking to add a category column to core_notes table.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Do we care about how this will work. Hell no !&lt;br&gt;&lt;br&gt;
Can we use migration syntaxes in general ruby code. Not fully, its made for migrations !&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXflclph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2528/1%2AQIm93bdFZlznihltAqzUkA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXflclph--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/2528/1%2AQIm93bdFZlznihltAqzUkA.png" alt="db migration dsl"&gt;&lt;/a&gt;An example of database migration adding category to notes table.&lt;/p&gt;

&lt;p&gt;So, DSL can be considered as that manifestation of language when its good enough for solving problems in one specific domain.&lt;/p&gt;

&lt;p&gt;That was all for theoretical stand point. What is use for the jargons for us, the developers. 🤔&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Learn to perform top-down decomposition of codebase.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What do I mean by that? Glad you asked.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Imaginary problem time:&lt;br&gt;&lt;br&gt;
We are gonna cook noodles and its gonna be Legen-wait_for_it-dary.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---t-WF_nU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A8JYYqdh7gKKGEjFcH4bjtQ.png" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s---t-WF_nU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2A8JYYqdh7gKKGEjFcH4bjtQ.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just some gibberish code to irritate you.&lt;/p&gt;

&lt;p&gt;If you see above code as algorithm for cooking noodles, will you even be interested in eating after all. Thats a lot imperative but less impressive.&lt;/p&gt;

&lt;p&gt;Let’s write it as civilised human beings now:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2r-6hrUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ASUDK2Xt6_zblggzzDfKTAQ.png" class="article-body-image-wrapper"&gt;&lt;img alt="" src="https://res.cloudinary.com/practicaldev/image/fetch/s--2r-6hrUq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://miro.medium.com/max/1400/1%2ASUDK2Xt6_zblggzzDfKTAQ.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the smooth flow of control.&lt;/p&gt;

&lt;p&gt;The secret for best decomposition is to assume your first function is being read by a business manager or any non technical person and only focused devs will ever reach your last ones.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-we-learnt-today"&gt;
  &lt;/a&gt;
  So, what we learnt today:
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;These paradigms are like a number line, Imperative on left and Declarative on right. You can always move toward one paradigm but never reach the ultimate end. On left you'll find your language to be more general purpose and on right it takes path to become a DSL.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was an attempt to dive into less explored zones of software development and if you like it or otherwise, do provide your suggestions. These things won’t help you start writing codes right away but will definitely upgrade you to a better engineer in some capacity. 👨‍💻&lt;/p&gt;

&lt;p&gt;To connect: &lt;a href="https://www.linkedin.com/in/sameerkumar1612/"&gt;https://www.linkedin.com/in/sameerkumar1612/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>ruby</category>
      <category>codequality</category>
      <category>programming</category>
    </item>
    <item>
      <title>Docker CMD vs ENTRYPOINT: explaining the difference</title>
      <author>Andrea Cappuccio</author>
      <pubDate>Sat, 26 Jun 2021 11:24:31 +0000</pubDate>
      <link>https://dev.to/hood/docker-cmd-vs-entrypoint-explaining-the-difference-55g7</link>
      <guid>https://dev.to/hood/docker-cmd-vs-entrypoint-explaining-the-difference-55g7</guid>
      <description>&lt;p&gt;We IT people &lt;em&gt;LOVE&lt;/em&gt; tinkering with new tech stuff, and Docker is no exception. As a matter of fact,  Docker was ranked as the #1 most wanted platform, #2 most loved platform, and #3 most broadly used platform in the &lt;a href="https://insights.stackoverflow.com/survey/2019#most-loved-dreaded-and-wanted"&gt;2019 Stack Overflow Developer Survey&lt;/a&gt;, and  #1 most wanted platform, #2 most loved platform and #3 most popular platform in &lt;a href="https://insights.stackoverflow.com/survey/2020#overview"&gt;the 2020 edition of the same survey&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you've bumped into this article, chances are that you have been bamboozled by the &lt;del&gt;&lt;a href="https://i.pinimg.com/originals/3d/d6/ee/3dd6ee6d8b5c9979e0cbe1d7daafada9.jpg"&gt;fruit doggo&lt;/a&gt;&lt;/del&gt; difference between the &lt;code&gt;CMD&lt;/code&gt; and &lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions defined in a Dockerfile, used to describe how a Docker container should be run.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#but-whats-a-docker-container"&gt;
  &lt;/a&gt;
  But what's a Docker container?
&lt;/h3&gt;

&lt;p&gt;Containers are lightweight, standalone, executable packages of software designed for running specific tasks, no matter if short-lived or long-running. Therefore, a container's lifecycle depends on the ongoing process inside of it. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once the process stops, the container stops as well.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#ok-but-what-role-is-our-dockerfile-playing-here"&gt;
  &lt;/a&gt;
  Ok, but what role is our Dockerfile playing here?
&lt;/h3&gt;

&lt;p&gt;Containers are dependent on images and use them to construct a run-time environment in order to run an application. A Dockerfile is a script which role is to define the process which leads to the creation of a final image, and how to run a container bound to said image.&lt;/p&gt;

&lt;p&gt;The process of creating a Docker image usually begins with a &lt;code&gt;FROM&lt;/code&gt; command, defining a base image to build our image upon. We usually follow up with a bunch of &lt;code&gt;RUN&lt;/code&gt; instructions, used to run commands which modify the underlying filesystem.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each &lt;code&gt;RUN&lt;/code&gt; instruction creates a new image layer that contains a modification to the filesystem.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#fine-now-what-about-the-cmd-vs-entrypoint-stuff"&gt;
  &lt;/a&gt;
  Fine. Now what about the CMD vs ENTRYPOINT stuff?
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;CMD&lt;/code&gt; and &lt;code&gt;ENTRYPOINT&lt;/code&gt; are two different types of instructions used to define how a Docker container should be run. &lt;br&gt;
Let's dive into the details of each one:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#cmd"&gt;
  &lt;/a&gt;
  CMD
&lt;/h3&gt;

&lt;p&gt;A &lt;code&gt;CMD&lt;/code&gt; instruction defines the default command used to run a Docker container from an image.&lt;/p&gt;

&lt;p&gt;Given a simple image like the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["echo", "Hello, World!"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running it with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker container run my-container
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will yield the following result:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;A Dockerfile can contain multiple &lt;code&gt;CMD&lt;/code&gt; instructions, but every single one of them, except for the last one, will be ignored.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;CMD&lt;/code&gt; instruction can be overridden by the arguments passed to &lt;code&gt;docker container run&lt;/code&gt;, like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;docker container run my-container echo "Hello again!"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will yield:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;Hello again!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#entrypoint"&gt;
  &lt;/a&gt;
  ENTRYPOINT
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions define, just like their CMD siblings, the default command used to start a container.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["echo", "Hello, World!"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Will yield:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#cool-so-whats-the-difference-at-this-point"&gt;
  &lt;/a&gt;
  Cool, so... what's the difference at this point?
&lt;/h3&gt;

&lt;p&gt;Well, the main difference is that, if both a &lt;code&gt;CMD&lt;/code&gt; and &lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions are defined inside a Dockerfile, the &lt;code&gt;CMD&lt;/code&gt; instruction will be concatenated to the &lt;code&gt;ENTRYPOINT&lt;/code&gt; one:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; alpine&lt;/span&gt;
&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt;&lt;span class="s"&gt; ["echo"]&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; ["Hello, World!"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wil lead to us seeing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;Hello, World!
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Also, while &lt;code&gt;CMD&lt;/code&gt; instructions are, by design, made do be easily overridden by passing arguments to &lt;code&gt;docker container run&lt;/code&gt; commands, &lt;code&gt;ENTRYPOINT&lt;/code&gt; have purposely been made harder to override manually, by forcing user to use a &lt;code&gt;--entrypoint&lt;/code&gt; flag.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#this-leads-us-to-a-pattern"&gt;
  &lt;/a&gt;
  This leads us to a pattern
&lt;/h3&gt;

&lt;p&gt;This design leads us to a consistent pattern. And we like patterns, patterns are good for our mental health:&lt;/p&gt;

&lt;p&gt;We can use &lt;code&gt;ENTRYPOINT&lt;/code&gt; to define a base command which always gets executed, and &lt;code&gt;CMD&lt;/code&gt; to  define default arguments for this command, easily overridable by passing custom args to &lt;code&gt;docker container run&lt;/code&gt;.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>kubernetes</category>
      <category>devops</category>
      <category>explainlikeimfive</category>
    </item>
  </channel>
</rss>
