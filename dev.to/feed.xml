<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Javascript academy #1: Primitive value vs reference value</title>
      <author>CodeOz</author>
      <pubDate>Fri, 22 Oct 2021 14:43:34 +0000</pubDate>
      <link>https://dev.to/codeoz/javascript-academy-1-primitive-value-vs-reference-value-1phl</link>
      <guid>https://dev.to/codeoz/javascript-academy-1-primitive-value-vs-reference-value-1phl</guid>
      <description>&lt;p&gt;Welcome to this new academy! In this I will NOT explain you javascript from scratch, the aim of this javascript academy is to explain you some concept in javascript that will help you to understand javascript engine!&lt;/p&gt;

&lt;p&gt;Today I will show you the difference between &lt;code&gt;primitive value&lt;/code&gt; &amp;amp; &lt;code&gt;reference value&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#primitive-value"&gt;
  &lt;/a&gt;
  Primitive value
&lt;/h3&gt;

&lt;p&gt;Primitive value are &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;symbols&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reference-value"&gt;
  &lt;/a&gt;
  Reference value
&lt;/h3&gt;

&lt;p&gt;All others things like &lt;code&gt;plain object {}&lt;/code&gt;, &lt;code&gt;array&lt;/code&gt;, &lt;code&gt;Map&lt;/code&gt;, etc...&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-data-is-stored"&gt;
  &lt;/a&gt;
  How data is stored?
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; the value is store on the &lt;code&gt;stack&lt;/code&gt;, in other word, in the &lt;code&gt;current context!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; the value is store in the &lt;code&gt;heap&lt;/code&gt;, it's a big storage that keep all &lt;code&gt;objects&lt;/code&gt; and each &lt;code&gt;object&lt;/code&gt; has it's own adress! (Like house in a village, each house has its own adress)&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VMS8rRJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbtg7oy5bfm308gq4ekx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VMS8rRJt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dbtg7oy5bfm308gq4ekx.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So in order to get the &lt;code&gt;object&lt;/code&gt; through the &lt;code&gt;Heap&lt;/code&gt; you need to use the adress of this &lt;code&gt;object&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gcn98tW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sccdy2tuo5l73p5epshf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gcn98tW9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sccdy2tuo5l73p5epshf.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fortunately you don't need to manage the &lt;code&gt;adress&lt;/code&gt; yourself!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#declaration-of-variable"&gt;
  &lt;/a&gt;
  Declaration of variable
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; the variable store the value. So you manipulate the &lt;code&gt;actual value&lt;/code&gt; stored in this variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xiF5mt5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3r95z6sqv2tnuiake6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xiF5mt5I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/db3r95z6sqv2tnuiake6.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; unlike primitive value when you manipulate an object you work on the &lt;code&gt;reference&lt;/code&gt; of that object! So you store the &lt;code&gt;reference&lt;/code&gt; of the object in the variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { a: 'hello' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HWd7x-8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvt09t48t7al2q1rqnqy.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HWd7x-8f--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kvt09t48t7al2q1rqnqy.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#copy-a-value"&gt;
  &lt;/a&gt;
  Copy a value
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; when you assign a variable that store &lt;code&gt;primitive value&lt;/code&gt; it will copy the &lt;code&gt;value&lt;/code&gt; into a new variable.&lt;/p&gt;

&lt;p&gt;So if you modify the value into a variable, the other variable value will be not changed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtVidYs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oq0t2t3tcpn0axlsqese.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtVidYs2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oq0t2t3tcpn0axlsqese.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; when you assign a variable that store &lt;code&gt;reference value&lt;/code&gt; it will copy the &lt;strong&gt;reference&lt;/strong&gt; of this object into a new variable.&lt;/p&gt;

&lt;p&gt;So if you modify the value into a variable, the other variable value will change! Since both variable share the same &lt;code&gt;reference&lt;/code&gt;!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;

&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { toto: 'hello' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---voTBrJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s5ohwdwxcyei60l92u1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---voTBrJY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9s5ohwdwxcyei60l92u1.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#working-with-function-parameters"&gt;
  &lt;/a&gt;
  Working with function parameters
&lt;/h3&gt;

&lt;p&gt;For &lt;strong&gt;Primitive value&lt;/strong&gt; when you pass a variable that contains a &lt;code&gt;primitive value&lt;/code&gt; as arguments of your function, it will copy the &lt;code&gt;value&lt;/code&gt; of this variable.&lt;/p&gt;

&lt;p&gt;So if you edit this value into the function, it will not change the value in the original variable!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;55&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;arg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 100&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 55&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For &lt;strong&gt;Reference value&lt;/strong&gt; when you pass a variable that contains a &lt;code&gt;reference value&lt;/code&gt; as arguments of your function, it will copy the &lt;code&gt;reference&lt;/code&gt; of this variable.&lt;/p&gt;

&lt;p&gt;So if you edit this value into the function, it will change the value in the original variable!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;toto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toto&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;changed&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { toto: 'changed' }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { toto: 'changed' }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see when you are working with &lt;code&gt;reference value&lt;/code&gt; you can edit other variable that are sharing this &lt;code&gt;reference value&lt;/code&gt;!&lt;/p&gt;




&lt;p&gt;I hope you like this reading!&lt;/p&gt;

&lt;p&gt;🎁 You can get my new book &lt;code&gt;Underrated skills in javascript, make the difference&lt;/code&gt; for FREE if you follow me on &lt;a href="https://twitter.com/code__oz"&gt;Twitter&lt;/a&gt; and MP me 😁&lt;/p&gt;

&lt;p&gt;Or get it &lt;a href="https://codeoz.gumroad.com/l/RXLYp"&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🎁 &lt;a href="https://www.getrevue.co/profile/code__oz"&gt;MY NEWSLETTER&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;☕️ You can &lt;a href="https://www.buymeacoffee.com/CodeoZ"&gt;SUPPORT MY WORKS&lt;/a&gt; 🙏&lt;/p&gt;

&lt;p&gt;🏃‍♂️ You can follow me on 👇&lt;/p&gt;

&lt;p&gt;🕊 Twitter : &lt;a href="https://twitter.com/code__oz"&gt;https://twitter.com/code__oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;👨‍💻 Github: &lt;a href="https://github.com/Code-Oz"&gt;https://github.com/Code-Oz&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And you can mark 🔖 this article!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>node</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>API Integration Testing Made Easy</title>
      <author>Anudeep</author>
      <pubDate>Fri, 22 Oct 2021 14:37:51 +0000</pubDate>
      <link>https://dev.to/asaianudeep/api-integration-testing-made-easy-1lcp</link>
      <guid>https://dev.to/asaianudeep/api-integration-testing-made-easy-1lcp</guid>
      <description>&lt;p&gt;Writing integration tests for API's is challenging in a micro-services world as it involves multiple API's from multiple components.&lt;/p&gt;

&lt;p&gt;In this article we will be focusing on the two major challenges of writing API Integration Testing. It also talks about how to overcome them by using modern testing tools and techniques. We will be using &lt;strong&gt;PactumJS&lt;/strong&gt; to write automated API integration test cases.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/pactumjs"&gt;
        pactumjs
      &lt;/a&gt; / &lt;a href="https://github.com/pactumjs/pactum"&gt;
        pactum
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      REST API Testing Tool for all levels in a Test Pyramid
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;span&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/61209e8931a18fd1fc1c40367761b9c979a32faacd2a2d17d299b220dce89afd/68747470733a2f2f70616374756d6a732e6769746875622e696f2f5f6d656469612f6c6f676f2d69636f6e2d736d616c6c2e737667"&gt;&lt;img src="https://camo.githubusercontent.com/61209e8931a18fd1fc1c40367761b9c979a32faacd2a2d17d299b220dce89afd/68747470733a2f2f70616374756d6a732e6769746875622e696f2f5f6d656469612f6c6f676f2d69636f6e2d736d616c6c2e737667" alt="logo"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
PactumJS&lt;/h1&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://github.com/pactumjs/pactum/workflows/Build/badge.svg?branch=master"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CrgUMJTA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/pactumjs/pactum/workflows/Build/badge.svg%3Fbranch%3Dmaster" alt="Build"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/f781f113e5665cff6f0f56079cd164ac4174df4b5835840b42bce4a966cb3248/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f636f7665726167652f41536169416e75646565702f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/f781f113e5665cff6f0f56079cd164ac4174df4b5835840b42bce4a966cb3248/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636c696d6174652f636f7665726167652f41536169416e75646565702f70616374756d" alt="Coverage"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/985ec3a7bbfbd58e0e93a2d600ad082ca889f0710eae24c5edeac684384ccbcb/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/985ec3a7bbfbd58e0e93a2d600ad082ca889f0710eae24c5edeac684384ccbcb/68747470733a2f2f696d672e736869656c64732e696f2f6e706d2f64742f70616374756d" alt="Downloads"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/6cced005661e068f85f7b5fbc9bd1e3071a63f8c1102ce2f471d808b9c9c579f/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/6cced005661e068f85f7b5fbc9bd1e3071a63f8c1102ce2f471d808b9c9c579f/68747470733a2f2f696d672e736869656c64732e696f2f62756e646c6570686f6269612f6d696e7a69702f70616374756d" alt="Size"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/c5a39924faef1667603859415235f655385662addbce6030d7941a2f2e2a773e/68747470733a2f2f696d672e736869656c64732e696f2f6e6f64652f762f70616374756d"&gt;&lt;img src="https://camo.githubusercontent.com/c5a39924faef1667603859415235f655385662addbce6030d7941a2f2e2a773e/68747470733a2f2f696d672e736869656c64732e696f2f6e6f64652f762f70616374756d" alt="Platform"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/pactumjs/pactum/stargazers"&gt;&lt;img src="https://camo.githubusercontent.com/d9d21f154f835c3a91a923eb30f79018026b3aa6bf6816abe532c036e788b492/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f70616374756d6a732f70616374756d3f7374796c653d736f6369616c" alt="Stars"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/pactumjs" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/fe1b8dffa1edfeb9926570db3cf0b71589a5652aa0a4349f99f9fc53d210fac2/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f70616374756d6a733f6c6162656c3d466f6c6c6f77267374796c653d736f6369616c" alt="Twitter"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
REST API Testing Tool for all levels in a Test Pyramid&lt;/h4&gt;
&lt;/span&gt;
&lt;br&gt;
&lt;p&gt;&lt;a href="https://pactumjs.github.io" rel="nofollow"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mx2rcYWj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/pactumjs/pactum/master/assets/demo.gif" alt="PactumJS Demo"&gt;&lt;/a&gt;
&lt;/p&gt;



&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;p&gt;&lt;strong&gt;PactumJS&lt;/strong&gt; is a REST API Testing Tool used to automate e2e, integration, contract &amp;amp; component (&lt;em&gt;or service level&lt;/em&gt;) tests.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
⚡ Swift&lt;/li&gt;
&lt;li&gt;
🎈 Lightweight&lt;/li&gt;
&lt;li&gt;
🚀 Simple &amp;amp; Powerful&lt;/li&gt;
&lt;li&gt;
🛠️ Compelling Mock Server&lt;/li&gt;
&lt;li&gt;
💎 Elegant Data Management&lt;/li&gt;
&lt;li&gt;
🔧 Extendable &amp;amp; Customizable&lt;/li&gt;
&lt;li&gt;
📚 Clear &amp;amp; Comprehensive Testing Style&lt;/li&gt;
&lt;li&gt;
🔗 Component, Contract &amp;amp; E2E testing of APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxNpakPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png" alt="----------"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
Documentation&lt;/h2&gt;
&lt;p&gt;This readme offers an basic introduction to the library. Head over to the full documentation at &lt;a href="https://pactumjs.github.io" rel="nofollow"&gt;https://pactumjs.github.io&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/api-testing" rel="nofollow"&gt;API Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/integration-testing" rel="nofollow"&gt;Integration Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/component-testing" rel="nofollow"&gt;Component Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/contract-testing" rel="nofollow"&gt;Contract Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/e2e-testing" rel="nofollow"&gt;E2E Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pactumjs.github.io/#/mock-server" rel="nofollow"&gt;Mock Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
Need Help&lt;/h2&gt;
&lt;p&gt;We use Github &lt;a href="https://github.com/pactumjs/pactum/discussions"&gt;Discussions&lt;/a&gt; to receive feedback, discuss ideas &amp;amp; answer questions.&lt;/p&gt;
&lt;h2&gt;
Installation&lt;/h2&gt;
&lt;div class="highlight highlight-source-shell position-relative overflow-auto js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; install pactum as a dev dependency&lt;/span&gt;
npm install --save-dev pactum
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; install a test runner to run pactum tests&lt;/span&gt;
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt; mocha / jest / cucumber&lt;/span&gt;
npm install --save-dev mocha&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxNpakPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/pactumjs/pactum/master/assets/rainbow.png" alt="----------"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
Usage&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;pactum&lt;/strong&gt; can be used for all levels…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/pactumjs/pactum"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#challenges"&gt;
  &lt;/a&gt;
  Challenges
&lt;/h2&gt;

&lt;p&gt;These are the two things of many that I personally felt challenging while writing API Integration Tests.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Passing data across tests.&lt;/li&gt;
&lt;li&gt;Retry on failed expectations.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#example"&gt;
  &lt;/a&gt;
  Example
&lt;/h2&gt;

&lt;p&gt;It's always better to have an example to understand the core concepts of a topic under discussion.&lt;/p&gt;

&lt;p&gt;Let's take a simple example of an e-commerce application with the following API endpoints for processing an order.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;/api/orders&lt;/code&gt; (&lt;em&gt;for placing an order&lt;/em&gt;) &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;POST&lt;/strong&gt; &lt;code&gt;/api/payments&lt;/code&gt; (&lt;em&gt;for making a payment&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;GET&lt;/strong&gt; &lt;code&gt;/api/payments/{payment_id}&lt;/code&gt; (&lt;em&gt;for fetching the status of payment&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#workflow"&gt;
  &lt;/a&gt;
  Workflow
&lt;/h3&gt;

&lt;p&gt;To make things clear, the requests and responses shown below are overly simplified.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-1-place-order"&gt;
  &lt;/a&gt;
  Step 1 - Place Order
&lt;/h4&gt;

&lt;p&gt;A user comes in and makes a &lt;strong&gt;POST&lt;/strong&gt; request to &lt;code&gt;/api/orders&lt;/code&gt; with the following payload to place an order.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#request-payload"&gt;
  &lt;/a&gt;
  Request Payload
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"product"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"PlayStation 5"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;At the time of writing this article, it's highly impossible to buy the above product. At-least in some places.&lt;/em&gt; 🙂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now the server responds with the following response body which contains the order &lt;code&gt;id&lt;/code&gt;. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#response"&gt;
  &lt;/a&gt;
  Response
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1f4c99e9-12df-45d4-b455-98418f4e3b1e"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This order &lt;code&gt;id&lt;/code&gt; is dynamically generated by the API server. We need to grab it and pass it to the other endpoints like &lt;strong&gt;payments&lt;/strong&gt; to complete the order.&lt;/p&gt;

&lt;p&gt;Using any testing library, we can save the response in a variable and use them later. It works but not efficient. Because when we write integration tests for large scale applications, it forces us to pass significant amount of data between tests and API calls. Declaring intermediary variables will damage the readability of the code.&lt;/p&gt;

&lt;p&gt;To overcome this challenge PactumJS comes with a concept of &lt;a href="https://pactumjs.github.io/#/integration-testing?id=stores"&gt;Data Store&lt;/a&gt; to pass data between API calls across tests.&lt;/p&gt;

&lt;p&gt;Let's look at the test first.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PlayStation 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OrderID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The above test will make a &lt;strong&gt;POST&lt;/strong&gt; request to &lt;code&gt;/api/orders&lt;/code&gt; with given &lt;code&gt;json&lt;/code&gt; payload and once the response is received it expects the status should be &lt;code&gt;200&lt;/code&gt; and &lt;strong&gt;stores&lt;/strong&gt; the value of &lt;code&gt;id&lt;/code&gt; into a special variable called &lt;code&gt;OrderID&lt;/code&gt; which is internal to PactumJS.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-2-make-payment"&gt;
  &lt;/a&gt;
  Step 2 - Make Payment
&lt;/h4&gt;

&lt;p&gt;The next step is to make the payment. Now the user makes a &lt;strong&gt;POST&lt;/strong&gt; request to &lt;code&gt;/api/payments&lt;/code&gt; with the following payload.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#request-payload"&gt;
  &lt;/a&gt;
  Request Payload
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"order_id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1f4c99e9-12df-45d4-b455-98418f4e3b1e"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"card_info"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"number"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"1111-1111-1111-1111"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"expiry"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"11/11"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"cvv"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"111"&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now the API responds with the following response body which contains payment &lt;code&gt;id&lt;/code&gt;. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#response"&gt;
  &lt;/a&gt;
  Response
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"id"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"a32fce50-d4e8-4d95-b16f-57fd13fbb7df"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let's talk about the test case.&lt;/p&gt;

&lt;p&gt;As you observed, the &lt;code&gt;order id&lt;/code&gt; from the previous request is included in the request payload.&lt;/p&gt;

&lt;p&gt;To get the value of special internal variable, PactumJS uses a special pattern - &lt;code&gt;$S{&amp;lt;variable-name&amp;gt;}&lt;/code&gt; to access it.&lt;/p&gt;

&lt;p&gt;Let's look at the test.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;order_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$S{OrderID}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card_info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1111-1111-1111-1111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expiry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;11/11&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cvv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PaymentID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;PactumJS will internally replace &lt;code&gt;$S{OrderID}&lt;/code&gt; with &lt;code&gt;1f4c99e9-12df-45d4-b455-98418f4e3b1e&lt;/code&gt; before making the request.&lt;/p&gt;

&lt;p&gt;In the above test case we are also saving the payment &lt;code&gt;id&lt;/code&gt; into the special variable &lt;code&gt;PaymentId&lt;/code&gt; using the &lt;strong&gt;stores&lt;/strong&gt; method. Using the payment &lt;code&gt;id&lt;/code&gt; we can track the status of the payment. So this brings us to the final step of our integration test.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#step-3-wait-for-payment-to-be-completed"&gt;
  &lt;/a&gt;
  Step 3 - Wait for Payment to be completed.
&lt;/h4&gt;

&lt;p&gt;To get the status of the payment, user makes a &lt;strong&gt;GET&lt;/strong&gt; request to the &lt;code&gt;/api/payments/{payment_id}&lt;/code&gt; endpoint.&lt;/p&gt;

&lt;p&gt;The API responds with the following response body. &lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#response"&gt;
  &lt;/a&gt;
  Response
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"status"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"in-progress"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you see, the status is still &lt;code&gt;in-progress&lt;/code&gt;. We need to wait for few seconds for the payment to be completed.&lt;/p&gt;

&lt;p&gt;Including hard waits is a bad practice in testing. PactumJS comes with a concept of &lt;a href="https://pactumjs.github.io/#/integration-testing?id=retry-mechanism"&gt;retry mechanism&lt;/a&gt; which retries on failed expectations. It is similar to &lt;strong&gt;fluent wait&lt;/strong&gt; in selenium.&lt;/p&gt;

&lt;p&gt;Let's look at the test case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments/{id}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withPathParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$S{PaymentID}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By default it retries &lt;code&gt;3&lt;/code&gt; times with a delay of &lt;code&gt;1000ms&lt;/code&gt; between each retry.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#complete-test"&gt;
  &lt;/a&gt;
  Complete Test
&lt;/h2&gt;

&lt;p&gt;Now let's take a look at the entire test using &lt;a href="https://pactumjs.github.io"&gt;PactumJS&lt;/a&gt; and &lt;a href="https://mochajs.org/"&gt;mocha&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;pactum&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;it&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;order PS5 and make payment&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/orders&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;product&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;PlayStation 5&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;OrderID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;order_id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;$S{OrderID}&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;card_info&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1111-1111-1111-1111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;expiry&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;11/11&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cvv&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;111&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;PaymentID&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;pactum&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/api/payments/{id}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;withPathParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;$S{PaymentID}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expectJson&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;status&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;completed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;retry&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Writing readable and maintainable tests is very important to make API testing productive and enjoyable experience. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://pactumjs.github.io"&gt;PactumJS&lt;/a&gt; abstracts the challenging parts to write tests in an easy and fun way and ultimately making API Integration testing super easy.  &lt;/p&gt;

</description>
      <category>api</category>
      <category>testing</category>
      <category>javascript</category>
      <category>pactumjs</category>
    </item>
    <item>
      <title>Open Source With Hacktoberfest</title>
      <author>Seth Addo</author>
      <pubDate>Fri, 22 Oct 2021 14:36:15 +0000</pubDate>
      <link>https://dev.to/seths10/open-source-with-hacktoberfest-26dp</link>
      <guid>https://dev.to/seths10/open-source-with-hacktoberfest-26dp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-hacktoberfest"&gt;
  &lt;/a&gt;
  What is Hacktoberfest
&lt;/h2&gt;

&lt;p&gt;Open Source is changing the world, one contribution at a time.&lt;br&gt;
&lt;strong&gt;Hacktoberfest&lt;/strong&gt; is a month-long celebration of open source development run by &lt;strong&gt;Digital Ocean&lt;/strong&gt;. It is open to everyone, from firs-time contributors to seasoned open source developers.&lt;br&gt;
Your journey starts with a pull request. After submitting four pull requests, you get the chance to win a &lt;code&gt;T-Shirt&lt;/code&gt; or &lt;code&gt;Plant a tree&lt;/code&gt;&lt;br&gt;
This year's hacktoberfest is presented by &lt;strong&gt;DigitalOcean&lt;/strong&gt;, &lt;strong&gt;AppWrite&lt;/strong&gt;, &lt;strong&gt;Intel&lt;/strong&gt;, &lt;strong&gt;DeepSource&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#contribute"&gt;
  &lt;/a&gt;
  Contribute
&lt;/h2&gt;

&lt;p&gt;Anyone around the globe who desires to help drive the growth of open source and make positive contributions to an ever-growing community. All backgrounds and skill levels are encouraged to participate and learn more.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To contribute, Always look for repositories on GitHub with the #hacktoberfest-2021 or #hactoberfest tag&lt;br&gt;
&lt;a href="https://www.hacktoberfest.digitalocean.com"&gt;Hacktoberfest Link&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;
  &lt;a href="#ways-to-contribute-to-repositories"&gt;
  &lt;/a&gt;
  Ways To Contribute To Repositories:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Bug Fixes&lt;/li&gt;
&lt;li&gt;Writing tests for projects&lt;/li&gt;
&lt;li&gt;Writing of Documentations/Technical Writing&lt;/li&gt;
&lt;li&gt;and many more&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#some-projects-to-contribute"&gt;
  &lt;/a&gt;
  Some Projects To Contribute:
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;Hoppscotch&lt;/strong&gt;:
Hoppscotch is an open source API Development ecosystem. You can test, save, share, collaborate, document API's in real-time and many more.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;
  &lt;a href="#stats-for-hoppscotch"&gt;
  &lt;/a&gt;
  Stats for hoppscotch
&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Used by 500,000+ developers&lt;/li&gt;
&lt;li&gt;Over 32,000 GitHub stars&lt;/li&gt;
&lt;li&gt;21,000+ monthly users
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/hoppscotch"&gt;
        hoppscotch
      &lt;/a&gt; / &lt;a href="https://github.com/hoppscotch/hoppscotch"&gt;
        hoppscotch
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      👽 Open source API development ecosystem https://hoppscotch.io
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2.&lt;strong&gt;TheDevDojo/Wave&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thedevdojo"&gt;
        thedevdojo
      &lt;/a&gt; / &lt;a href="https://github.com/thedevdojo/wave"&gt;
        wave
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Wave - The Software as a Service Starter Kit, designed to help you build the SAAS of your dreams 🚀 💰 
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;3.&lt;strong&gt;TheDevDojo/Tails&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thedevdojo"&gt;
        thedevdojo
      &lt;/a&gt; / &lt;a href="https://github.com/thedevdojo/tails"&gt;
        tails
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      The Tails Open Source Components are a (no-config) copy'n paste free collection of hand-crafted templates and components built in TailwindCSS.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Thanks for your time and don’t forget to be friends with me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitter.com/set_addo"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.github.com/seths10"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>opensource</category>
      <category>webdev</category>
      <category>hacktoberfest</category>
      <category>javascript</category>
    </item>
    <item>
      <title> Game Dev Digest — Issue #115 - Shiny New Stuff</title>
      <author>Game Dev Digest - The Newsletter On Unity Game Dev</author>
      <pubDate>Fri, 22 Oct 2021 14:26:05 +0000</pubDate>
      <link>https://dev.to/gamedevdigest/game-dev-digest-issue-115-shiny-new-stuff-1gl8</link>
      <guid>https://dev.to/gamedevdigest/game-dev-digest-issue-115-shiny-new-stuff-1gl8</guid>
      <description>&lt;h3&gt;
  &lt;a href="#issue-115-shiny-new-stuff"&gt;
  &lt;/a&gt;
  Issue #115 - Shiny New Stuff
&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://gamedevdigest.com/digests/issue-115-shiny-new-stuff.html"&gt;GameDevDigest.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J89GY7M2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-115.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J89GY7M2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/social-posts/issue-115.png" alt="Issue #115 - Shiny New Stuff"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some new announcements and some more of the usual great stuff. Enjoy!&lt;/p&gt;




&lt;p&gt;&lt;a href="https://blog.gamedev.tv/how-to-make-ai-sentient-in-unity/"&gt;&lt;strong&gt;How to make AI sentient in Unity, Part I&lt;/strong&gt;&lt;/a&gt;  - In the first of two parts miniseries about AI senses, I'm going to guide you through an implementation of eyes and ears for NPCs, that takes advantage of inheritance and UnityEvents. In the subsequent part, I'll show you how to create some reactive behaviors using the state pattern.&lt;br&gt;
&lt;a href="https://blog.gamedev.tv/how-to-make-ai-sentient-in-unity/"&gt;&lt;em&gt;blog.gamedev.tv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://bronsonzgeb.com/index.php/2021/10/16/low-power-mode-in-unity/"&gt;&lt;strong&gt;Low Power mode in Unity&lt;/strong&gt;&lt;/a&gt;  - In this article, I’ll show some ways to lower the power consumption of your Unity apps and games. But first, let’s talk about why we might consider doing this.&lt;br&gt;
&lt;a href="https://bronsonzgeb.com/index.php/2021/10/16/low-power-mode-in-unity/"&gt;&lt;em&gt;Bronson Zgeb&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.gamedeveloper.com/production/the-10-rules-for-mobile-game-liveops"&gt;&lt;strong&gt;The 10 Rules For Mobile Game LiveOps&lt;/strong&gt;&lt;/a&gt;  - In this article, we'll get into the pitfalls that catch innocent game professionals like you by surprise over and over again. I get into the hidden dangers and the little-known traps, and I get into the assumptions that could lead to the destruction of everything you’ve worked hard to build.&lt;br&gt;
&lt;a href="https://www.gamedeveloper.com/production/the-10-rules-for-mobile-game-liveops"&gt;&lt;em&gt;Michael Moran&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://longreads.com/2021/10/07/deeper-than-pixels-a-reading-list-on-video-games/?"&gt;&lt;strong&gt;Deeper Than Pixels: A Reading List on Video Games&lt;/strong&gt;&lt;/a&gt;  - Five longreads on the culture and creativity that games have spawned.&lt;br&gt;
&lt;a href="https://longreads.com/2021/10/07/deeper-than-pixels-a-reading-list-on-video-games/?"&gt;&lt;em&gt;longreads.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://80.lv/articles/saber-thing-unity-powered-lightsaber-game-mechanic-for-vr/"&gt;&lt;strong&gt;Saber Thing: Unity-Powered Lightsaber Game Mechanic for VR&lt;/strong&gt;&lt;/a&gt;  - Check out this fun tech demo that allows you to wield a lightsaber in VR.&lt;br&gt;
&lt;a href="https://80.lv/articles/saber-thing-unity-powered-lightsaber-game-mechanic-for-vr/"&gt;&lt;em&gt;80.lv&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/posts/51125313"&gt;&lt;strong&gt;New Shiny Sparkly Shader&lt;/strong&gt;&lt;/a&gt;  - I've made a similar version before but this one is a bit nicer, initially made for Harry Alisavakis' tech art challenge for a foil card effect.&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/51125313"&gt;&lt;em&gt;Minions Art&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.patreon.com/posts/urp-mesh-part-1-55990741"&gt;&lt;strong&gt;URP Mesh Outlines Part 1 : Inky Effect Outline&lt;/strong&gt;&lt;/a&gt;  - A while ago I made 3 mesh-based outline shaders for BIRP: Basic outline with Ink-style option, a directional light rim, and an aura effect. I'm finally converting them to URP.&lt;br&gt;
&lt;a href="https://www.patreon.com/posts/urp-mesh-part-1-55990741"&gt;&lt;em&gt;Minions Art&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://unitycoder.com/blog/2021/10/17/use-custom-editor-fonts/"&gt;&lt;strong&gt;Use custom Editor fonts&lt;/strong&gt;&lt;/a&gt;  - How to use your own fonts for the editor.&lt;br&gt;
&lt;a href="https://unitycoder.com/blog/2021/10/17/use-custom-editor-fonts/"&gt;&lt;em&gt;unitycoder.com&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#videos"&gt;
  &lt;/a&gt;
  Videos
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=n3Qxo79HoZk"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z-dJcxdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/69d01355d954093484b4d45103714795.png" alt="Unity Gaming Services Launched -- It's Free During Beta"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=n3Qxo79HoZk"&gt;&lt;strong&gt;Unity Gaming Services Launched -- It's Free During Beta&lt;/strong&gt;&lt;/a&gt;  - Today Unity have launched Unity Gaming Services today, a huge collection of online services, some new, some existing. Built on the new Unity Networking system and working with NetCode For GameObjects, UGS handles things like networking, peer to peer, authentication, online storage, economy, analytics, IAP, Ads and more.&lt;br&gt;
&lt;em&gt;[Read Unity's own &lt;a href="https://blog.unity.com/games/introducing-unity-gaming-services"&gt;announcement&lt;/a&gt;]&lt;/em&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=n3Qxo79HoZk"&gt;&lt;em&gt;Gamefromscratch&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=QjtQXtxOnmw"&gt;&lt;strong&gt;Rainbow Bridge - Shader Graph Tutorial&lt;/strong&gt;&lt;/a&gt;  - I am trying to branch out and create tutorials about the many Unity features, this time we will take a look at how to create the Bifrost or Rainbow Bridge from the Marvel movies. I hope this was useful for ya! :D&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=QjtQXtxOnmw"&gt;&lt;em&gt;Daitli&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=eyaxqo9JV4w"&gt;&lt;strong&gt;Unity GPU Instancing in less than 7 minutes&lt;/strong&gt;&lt;/a&gt;  - How to use GPU instancing.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=eyaxqo9JV4w"&gt;&lt;em&gt;Flaroon&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=L4t2c1_Szdk"&gt;&lt;strong&gt;Creating a Day/Night Cycle (Unity Tutorial)&lt;/strong&gt;&lt;/a&gt;  - In this Unity game development tutorial we're going to look at how we can create a simple day/night cycle in Unity.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=L4t2c1_Szdk"&gt;&lt;em&gt;Ketra Games&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=wBGykdKd80w"&gt;&lt;strong&gt;Unity Sprite Swap! The perfect 2D workflow&lt;/strong&gt;&lt;/a&gt;  - In this episode, I show you the new Unity sprite swap feature which allows easily swapping out sprites. This can be used for full units, armor sets and even mouths/eyes for dialogue systems.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=wBGykdKd80w"&gt;&lt;em&gt;Tarodev&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=x4ufs1OzPIw"&gt;&lt;strong&gt;Creating a Foliage Shader in Unity URP! Grass, Trees, Flowers, Hedges and More | Game Dev Tutorial&lt;/strong&gt;&lt;/a&gt;  - Plants, foliage and vegetation are really challenging to get right! It requires a custom made shader to tackle issues like translucency and wind. In this tutorial, I show how to create a foliage shader in the Unity URP (Universal Render Pipeline) Shader Graph.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=x4ufs1OzPIw"&gt;&lt;em&gt;Ned Makes Games&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=IZAzckJaSO8"&gt;&lt;strong&gt;Unity VFX Graph - Shield Effect Tutorial&lt;/strong&gt;&lt;/a&gt;  - In this Unity tutorial we are going to create a Sci-Fi Shield with Shader Graph and see how to use it in VFX Graph. We are going to use Blender to create the Shield mesh and Krita for the texture. At the end we have an overview of how to detect collisions!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=IZAzckJaSO8"&gt;&lt;em&gt;Gabriel Aguiar Prod.&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Cl4wkGjtGgw"&gt;&lt;strong&gt;Iridescent Shader Graph tutorial for Unity&lt;/strong&gt;&lt;/a&gt;  - A fancy iridescence shader made with Shader Graph, works both on URP and HDRP. Uses fresnel and some gradient to achieve coolness.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=Cl4wkGjtGgw"&gt;&lt;em&gt;PabloMakes&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=dqySkMFieHE"&gt;&lt;strong&gt;How to Save File with Screenshot! (Unity Tutorial)&lt;/strong&gt;&lt;/a&gt;  - Learn how to save Game Data plus a Screenshot (or any Image) in a single file.&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=dqySkMFieHE"&gt;&lt;em&gt;Code Monkey&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=XCrrjBCgxGQ"&gt;&lt;strong&gt;3 Steam Marketing Tips To Sell More Games&lt;/strong&gt;&lt;/a&gt;  - Rick and I share Steam Marketing tips we've learned over the years! Interested in learning more about indie game marketing? Check out &lt;a href="http://gamemarketingworkshop.com/"&gt;http://gamemarketingworkshop.com/&lt;/a&gt; and use code GDU10 for 10% off!&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=XCrrjBCgxGQ"&gt;&lt;em&gt;Tim Ruswick | Game Dev Underground&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assets"&gt;
  &lt;/a&gt;
  Assets
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/mega-bundles/fill-your-toolbox?aid=1011l8NVc"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRxOnq8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/eddcc813-abbe-8352-07d6-31e0317abdf2.jpeg" alt="Unity Mega Bundle - Fill Your Toolbox"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://assetstore.unity.com/mega-bundles/fill-your-toolbox?aid=1011l8NVc"&gt;&lt;strong&gt;Unity Mega Bundle - Fill Your Toolbox&lt;/strong&gt;&lt;/a&gt;  - Up to 95% Off Tools!&lt;/p&gt;

&lt;p&gt;Powerful tools make users more productive, saving valuable time and effort, so it's not a surprise that the tool category is one of the most popular categories on the Unity Asset Store. From October 13 through October 31, users can save up to 95% off three curated Mega Bundle sets of must-have tools.&lt;/p&gt;

&lt;p&gt;$25 Bundle - save up to 80%&lt;br&gt;
This bundle contains: &lt;a href="https://assetstore.unity.com/packages/tools/gui/enhancedscroller-36378?aid=1011l8NVc"&gt;EnhancedScroller&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/gui/better-ui-79031?aid=1011l8NVc"&gt;Better UI&lt;/a&gt;, and &lt;a href="https://assetstore.unity.com/packages/tools/game-toolkits/vault-inventory-93933?aid=1011l8NVc"&gt;Vault Inventory&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;$35 Bundle - save up to 88%&lt;br&gt;
This bundle contains everything from the $25 bundle, plus &lt;a href="https://assetstore.unity.com/packages/tools/game-toolkits/forever-endless-runner-engine-140926?aid=1011l8NVc"&gt;Forever - Endless Runner Engine for Unity&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/utilities/easy-decal-22867?aid=1011l8NVc"&gt;Easy Decal&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/terrain/terrain-grid-system-47215?aid=1011l8NVc"&gt;Terrain Grid System&lt;/a&gt;, and &lt;a href="https://assetstore.unity.com/packages/tools/utilities/monkey-productivity-commands-119938?aid=1011l8NVc"&gt;MonKey - Productivity Commands&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;$45 Bundle - save up to 95%&lt;br&gt;
This bundle contains everything from the $25 and $35 bundles, plus &lt;a href="https://assetstore.unity.com/packages/tools/utilities/dungeon-architect-53895?aid=1011l8NVc"&gt;Dungeon Architect&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/level-design/space-graphics-toolkit-4160?aid=1011l8NVc"&gt;Space Graphics Toolkit&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/terrain/digger-pro-149753?aid=1011l8NVc"&gt;Digger PRO&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/particles-effects/mudbun-volumetric-vfx-modeling-177891?aid=1011l8NVc"&gt;MudBun: Volumetric VFX and Modeling&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/modeling/mesh-slicer-59618?aid=1011l8NVc"&gt;Mesh Slicer&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/physics/dinofracture-a-dynamic-fracture-library-26599?aid=1011l8NVc"&gt;DinoFracture - A Dynamic Fracture Library&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/animation/motion-matching-for-unity-145624?aid=1011l8NVc"&gt;Motion Matching for Unity&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/utilities/asset-hunter-pro-135296?aid=1011l8NVc"&gt;Asset Hunter PRO&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/utilities/performance-tools-80534?aid=1011l8NVc"&gt;Performance Tools&lt;/a&gt;, &lt;a href="https://assetstore.unity.com/packages/tools/animation/salsa-lipsync-suite-148442?aid=1011l8NVc"&gt;SALSA LipSync Suite&lt;/a&gt;, and &lt;a href="https://assetstore.unity.com/packages/tools/animation/realistic-eye-movements-29168?aid=1011l8NVc"&gt;Realistic Eye Movements&lt;/a&gt;.&lt;br&gt;
&lt;a href="https://assetstore.unity.com/mega-bundles/fill-your-toolbox?aid=1011l8NVc"&gt;&lt;em&gt;Unity&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/naelstrof/SkinnedMeshDecals?"&gt;&lt;strong&gt;Unity Skinned Mesh Renderer Decals&lt;/strong&gt;&lt;/a&gt;  - An example of how to create efficient projected decals on moving skinned meshes. This should work on all render pipelines, though HDRP is what this project is built on.&lt;br&gt;
&lt;a href="https://github.com/naelstrof/SkinnedMeshDecals?"&gt;&lt;em&gt;naelstrof&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/PhilS94/Unity-Procedural-IK-Wall-Walking-Spider?"&gt;&lt;strong&gt;Unity Procedural IK Wall Walking Spider&lt;/strong&gt;&lt;/a&gt;  - A Unity Engine Project in which a controllable wall-walking spider uses inverse kinematics (IK) to position its legs to its surroundings in a smart fashion, such that is moves realistically. The user can freely control the spider, which is able to walk on any surface: walls, corners, ceilings, ... you name it! While moving, the legs dynamically position themselves to the surroundings without the use of any animations, that is all the movement is procedural.&lt;br&gt;
&lt;a href="https://github.com/PhilS94/Unity-Procedural-IK-Wall-Walking-Spider?"&gt;&lt;em&gt;PhilS94&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/JustInvoke/Randomation-Vehicle-Physics?"&gt;&lt;strong&gt;Randomation Vehicle Physics&lt;/strong&gt;&lt;/a&gt;  - This is a vehicle physics system for the Unity engine, originally developed with Unity 5.6. The most recent Unity version it has been tested with is 2019.2.9. It aims to achieve semi-realistic, general-purpose driving mechanics.&lt;br&gt;
&lt;a href="https://github.com/JustInvoke/Randomation-Vehicle-Physics?"&gt;&lt;em&gt;JustInvoke&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SushiWaUmai/Chronity?"&gt;&lt;strong&gt;Chronity&lt;/strong&gt;&lt;/a&gt;  - A library for running functions after a delay in Unity.&lt;br&gt;
&lt;a href="https://github.com/SushiWaUmai/Chronity?"&gt;&lt;em&gt;SushiWaUmai&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ClemGG/Dialogue-Node-System?"&gt;&lt;strong&gt;Dialogue-Node-System&lt;/strong&gt;&lt;/a&gt;  - A Dialogue Node System realized in Unity 2021.1.11.&lt;br&gt;
&lt;a href="https://github.com/ClemGG/Dialogue-Node-System?"&gt;&lt;em&gt;ClemGG&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/danielcmcg/Simple-InGame-Visual-Programming-for-Unity?"&gt;&lt;strong&gt;Simple-InGame-Visual-Programming-for-Unity&lt;/strong&gt;&lt;/a&gt;  - A simple visual programming language using drag and drop blocks for games in unity.&lt;br&gt;
&lt;a href="https://github.com/danielcmcg/Simple-InGame-Visual-Programming-for-Unity?"&gt;&lt;em&gt;danielcmcg&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/komietty/unity-animated-convexhull?"&gt;&lt;strong&gt;unity-animated-convexhull&lt;/strong&gt;&lt;/a&gt;  - Realtime Fast convex generator for Unity.&lt;br&gt;
&lt;a href="https://github.com/komietty/unity-animated-convexhull?"&gt;&lt;em&gt;komietty&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/coryleach/UnitySaveLoad?"&gt;&lt;strong&gt;Gameframe.SaveLoad&lt;/strong&gt;&lt;/a&gt;  - Serialization helper utility that supports save, load and encryption.&lt;br&gt;
&lt;a href="https://github.com/coryleach/UnitySaveLoad?"&gt;&lt;em&gt;coryleach&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/whitesharx/httx"&gt;&lt;strong&gt;X-Force&lt;/strong&gt;&lt;/a&gt;  - X-Force HTTP/REST framework for Unity. Zero dependency, built for Unity. Simple, DSL-like API to compose your requests. Includes reliable Memory/Disk/Bundle cache support. Easily extensible for your custom needs.&lt;br&gt;
&lt;a href="https://github.com/whitesharx/httx?utm_source=pocket_mylist"&gt;&lt;em&gt;whitesharx&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/rito15/Unity-Million-Dust?"&gt;&lt;strong&gt;Million Dust&lt;/strong&gt;&lt;/a&gt;  - Physics-based Dust Simulation.&lt;br&gt;
&lt;a href="https://github.com/rito15/Unity-Million-Dust?"&gt;&lt;em&gt;rito15&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/dwilches/Ardity?"&gt;&lt;strong&gt;Arduino + Unity communication made easy&lt;/strong&gt;&lt;/a&gt;  - And not just Arduino: any hardware/software that communicates over serial (COM) ports !&lt;br&gt;
&lt;a href="https://github.com/dwilches/Ardity?"&gt;&lt;em&gt;dwilches&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/SolidAlloy/ClassTypeReference-for-Unity?"&gt;&lt;strong&gt;Type References for Unity3D&lt;/strong&gt;&lt;/a&gt;  - A plugin that allows you to choose types from a drop-down menu in the inspector.&lt;br&gt;
&lt;a href="https://github.com/SolidAlloy/ClassTypeReference-for-Unity?"&gt;&lt;em&gt;SolidAlloy&lt;/em&gt;&lt;/a&gt; &lt;em&gt;Open Source&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://assetstore.unity.com/packages/tools/level-design/superposition-nondestructive-object-editing-202164?&amp;amp;aid=1011l8NVc"&gt;&lt;strong&gt;SuperPosition - NonDestructive Object Editing&lt;/strong&gt;&lt;/a&gt;  - Save unlimited states of your game objects in a easy nondestructive workflow! From the highly acclaimed developer of Task Atlas, Editor Portals and Perfect F comes another amazing Editor tool!&lt;br&gt;
Launch Discount! Get 50% off right now! Get Perfect F, Editor Portals For $5, or even Task Atlas for only $12.50 after purchasing SuperPosition.&lt;br&gt;
&lt;a href="https://assetstore.unity.com/packages/tools/level-design/superposition-nondestructive-object-editing-202164?&amp;amp;aid=1011l8NVc"&gt;&lt;em&gt;ShrinkRay Entertainment&lt;/em&gt;&lt;/a&gt; &lt;strong&gt;Affiliate&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#spotlight"&gt;
  &lt;/a&gt;
  Spotlight
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://store.steampowered.com/app/1706220/KOBOLOK/?utm_source=pocket_mylist"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--L_OCFPtT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://gamedevdigest.com/assets/images/c971c570c91f75f89a2a0be5f4d16c6b.png" alt="KOBOLOK"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://store.steampowered.com/app/1706220/KOBOLOK/?utm_source=pocket_mylist"&gt;&lt;strong&gt;KOBOLOK&lt;/strong&gt;&lt;/a&gt;  - KOBOLOK is an ethnic PS1 style horror game based on an Eastern European fairytale about round bread "Kolobok" aka "O Koblížkovi" aka "Pannkauken".&lt;br&gt;
&lt;a href="https://store.steampowered.com/app/1706220/KOBOLOK/?utm_source=pocket_mylist"&gt;&lt;em&gt;WooFoo&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;You can subscribe to the free weekly newsletter on &lt;a href="https://gamedevdigest.com"&gt;GameDevDigest.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>unity</category>
      <category>csharp</category>
      <category>news</category>
    </item>
    <item>
      <title>How to build a blog with Next.js 👨‍💻</title>
      <author>Tuomo Kankaanpää</author>
      <pubDate>Fri, 22 Oct 2021 14:18:38 +0000</pubDate>
      <link>https://dev.to/tumee/how-to-build-a-blog-with-nextjs-10e8</link>
      <guid>https://dev.to/tumee/how-to-build-a-blog-with-nextjs-10e8</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="//www.tuomokankaanpaa.com/newsletter"&gt;my newsletter&lt;/a&gt; last week. I publish previous week's newsletter here on the blog. If you want to read these as soon as they are published, &lt;a href="//www.tuomokankaanpaa.com/newsletter"&gt;sign up&lt;/a&gt; for the newsletter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahoy,&lt;/p&gt;

&lt;p&gt;Couple of weeks ago &lt;a href="https://tuomokankaanpaa.com/blog/best-vs-code-features-learning-material-ui"&gt;I wrote&lt;/a&gt; that I was working on a Next.js blog application and planning on making a video about it. I finally got the video done and I published it on the &lt;a href="//www.youtube.com/tuomokankaanpaa"&gt;Youtube channel&lt;/a&gt; last week.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/giHGL3ZppTQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;I ended up making it a two part video. In the first part, that is now published, I teach how to create a basic blog application with Next.js and in the process I will go through some basic concepts of Next.js, that are important to know especially for Next.js beginners.&lt;/p&gt;

&lt;p&gt;The second part I am planning on publishing in the near future (maybe next week). That will be about integrating a headless CMS with the blog. So after that the blog will basically be ready to use in production.&lt;/p&gt;

&lt;p&gt;Ok to be honest, it could use some styling before production, so I might also do another video about styling the blog and making it look a bit more nice. Let me know if this is something you would be interested in!&lt;/p&gt;

&lt;p&gt;Design is really a part that I probably struggle the most. If I have a design ready and I only need to implement it, that's easy. But making the actual design is not my strong suit. So it will be fun to try to implement that to the application and I am sure that I will learn a ton while working on it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#top-picks-for-this-week"&gt;
  &lt;/a&gt;
  Top picks for this week 🎯
&lt;/h2&gt;

&lt;p&gt;⚡ &lt;a href="https://medium.com/quick-code/14-important-rules-that-every-developer-should-follow-9839a574b59e"&gt;14 Rules That Will Make You A Better Developer&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://medium.com/quick-code/15-tips-to-instantly-improve-as-a-programmer-9c9dde55471f"&gt;How to Improve as a Programmer?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;⚡ &lt;a href="https://www.githubuniverse.com/"&gt;Github Universe (Oct 27-28)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's it for this week!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Tuomo&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>jamstack</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Setting up a Data Engineering Environment</title>
      <author>WanjohiChristopher</author>
      <pubDate>Fri, 22 Oct 2021 14:00:43 +0000</pubDate>
      <link>https://dev.to/wanjohichristopher/setting-up-a-data-engineering-environment-55fo</link>
      <guid>https://dev.to/wanjohichristopher/setting-up-a-data-engineering-environment-55fo</guid>
      <description>&lt;p&gt;Welcome back to our Data Engineering Series😊&lt;br&gt;
 Its now time to set up our environment!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#installingconfiguring-and-setting-up-vmware-mssql-serverpostgres-and-adventureworksdwampdb"&gt;
  &lt;/a&gt;
  Installing,Configuring and Setting Up VMware, MSSQL Server,Postgres and AdventureWorksDW&amp;amp;DB
&lt;/h1&gt;

&lt;p&gt;When diving into the data engineering world, it is important for the set up  to be ready.&lt;/p&gt;

&lt;p&gt;To set up a data engineering environment it is advisable to work on Linux Environment. &lt;/p&gt;

&lt;p&gt;To start with we started by using linux as a host machine.&lt;/p&gt;

&lt;p&gt;Then we installed Virtual machine VMware. Then on the Vmware we installed the downloaded Windows operating system.&lt;/p&gt;

&lt;p&gt;Now in order to make communication between host(Ubuntu) and virtual machine(Windows) we need to make configurations and networking on Vmware.You need to enable VNC connections as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cG6D0jP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gye98g1soddd1k182f3r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cG6D0jP9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gye98g1soddd1k182f3r.png" alt="Image description"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-of-mssql-server"&gt;
  &lt;/a&gt;
  Installation of MSSQL Server.
&lt;/h2&gt;

&lt;p&gt;In this guide we walk you through the MSSQL Server installation in Windows on VMware.&lt;br&gt;
The first step is to download SQL SERVER 2012. In this case it's the one we are using currently.&lt;br&gt;
You can download it from here or download a later version. Then follow the instructions to install it,&lt;br&gt;
then launch the SSMS(Sql Server Management Studio).The UI should be something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pxZiTToI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hte93cejk4ic76x8e6hi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pxZiTToI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hte93cejk4ic76x8e6hi.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-of-postgres-database-on-ubuntu-2004"&gt;
  &lt;/a&gt;
  Installation of Postgres Database on Ubuntu 20.04.
&lt;/h2&gt;

&lt;p&gt;We will now install Postgres in our Ubuntu. To install this follow the installation steps here.&lt;/p&gt;

&lt;p&gt;For Postgres configuration steps: &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#to-check-for-postgres-version"&gt;
  &lt;/a&gt;
  To check for Postgres version
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     psql --version&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
&lt;br&gt;
  &lt;a href="#it-is-advisable-to-check-if-the-postgres-is-running-using-this-command-before-you-proceed"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  It is advisable to check if the Postgres is running using this command before you proceed&lt;br&gt;
&lt;/h3&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     sudo systemctl status postgresql&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
&lt;br&gt;
  &lt;a href="#connection-to-postgresql-running"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Connection To PostgreSQL running.&lt;br&gt;
&lt;/h3&gt;
&lt;br&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;     sudo -u postgres psql&lt;br&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
&lt;br&gt;
  &lt;a href="#installation-of-adventureworks2019-and-adventureworksdw2019"&gt;&lt;br&gt;
  &lt;/a&gt;&lt;br&gt;
  Installation of AdventureWorks2019 and AdventureWorksDW2019&lt;br&gt;
&lt;/h2&gt;

&lt;p&gt;First in order to start using the databases we start with installing Adventureworks2019 and DW.&lt;br&gt;
To install follow the steps found here. Once installed we need to configure them in MSSQL Server on a virtual machine using these steps here.&lt;br&gt;
After installation and configuration open SSMS and this should be the UI in SSMS:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---i5QgqFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5u2jw9luvlqhyjvf2yt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---i5QgqFU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m5u2jw9luvlqhyjvf2yt.png" alt="Image description"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks and Happy Learning!&lt;/p&gt;

&lt;p&gt;Article by &lt;br&gt;
&lt;a href="https://www.linkedin.com/in/wanjohichristopher/"&gt;WanjohiChristopher&lt;/a&gt; Notes with &lt;a href="https://www.linkedin.com/in/nicholas-musau-69657186/"&gt;NicholasMusau&lt;/a&gt;&lt;/p&gt;

</description>
      <category>database</category>
      <category>windows</category>
      <category>vmware</category>
      <category>linux</category>
    </item>
    <item>
      <title>Create SVG Spritesheet animations with 1 Template Literal String</title>
      <author>Danny Engelman</author>
      <pubDate>Fri, 22 Oct 2021 13:53:52 +0000</pubDate>
      <link>https://dev.to/dannyengelman/create-svg-spritesheet-animations-with-1-template-literal-string-3hee</link>
      <guid>https://dev.to/dannyengelman/create-svg-spritesheet-animations-with-1-template-literal-string-3hee</guid>
      <description>&lt;h1&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer:
&lt;/h1&gt;

&lt;p&gt;The Online &lt;strong&gt;SpriteMeister Generator&lt;/strong&gt;: &lt;a href="https://Sprite-Meister.github.io"&gt;https://Sprite-Meister.github.io&lt;/a&gt;&lt;br&gt;
is a Working Model v.042 - not intended for Production use. (but you can)&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#only-an-idiot-creates-yet-another-animation-tool"&gt;
  &lt;/a&gt;
  Only an idiot creates yet another animation tool
&lt;/h2&gt;

&lt;p&gt;There comes a point in time when you have to kill your darlings.&lt;br&gt;
Drop development and toss the result in the bin, because you realize you must be the only idiot on &lt;a href="https://jsfiddle.net/WebComponents/samzdpL2/"&gt;this globe&lt;/a&gt; doing what you are doing.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_1Epmxag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/0d/c9/68/0dc968448592a7d533096b74c263cc40.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_1Epmxag--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.pinimg.com/originals/0d/c9/68/0dc968448592a7d533096b74c263cc40.gif" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I can't toss this one in the bin, spent many moons on it, it is too much fun, and the current version satisfies my needs. &lt;/p&gt;

&lt;p&gt;Can other developers use this? I don't know. Let me know!&lt;/p&gt;

&lt;p&gt;I &lt;a href="https://github.com/sprite-meister/sprite-meister.github.io"&gt;donate all my code to the Public Domain&lt;/a&gt;.&lt;br&gt;
Tagged with &lt;strong&gt;the Unlicense&lt;/strong&gt;, so feel free to do whatever you want with it.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#about-spritesheet-animations"&gt;
  &lt;/a&gt;
  About Spritesheet Animations
&lt;/h2&gt;

&lt;p&gt;It all started in &lt;strong&gt;1872&lt;/strong&gt; when photographer &lt;a href="https://en.wikipedia.org/wiki/Eadweard_Muybridge"&gt;Eadweard Muybridge&lt;/a&gt; took a sequence of images. And used a "projector" to quickly show each &lt;em&gt;frame&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="//sprite-meister.github.io/spritesheets/muybridge_horse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="//sprite-meister.github.io/spritesheets/muybridge_horse.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The SpriteMeiser &lt;code&gt;&amp;lt;sprite-animation&amp;gt;&lt;/code&gt; Web Component displays that whole JPG &lt;strong&gt;of 15 frames&lt;/strong&gt; in the Browser. &lt;strong&gt;frame by frame&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//sprite-meister.github.io/elements.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;sprite-animation&lt;/span&gt; 
    &lt;span class="na"&gt;steps=&lt;/span&gt;&lt;span class="s"&gt;"15"&lt;/span&gt;
    &lt;span class="na"&gt;cell=&lt;/span&gt;&lt;span class="s"&gt;"183x122"&lt;/span&gt;
    &lt;span class="na"&gt;duration=&lt;/span&gt;&lt;span class="s"&gt;"1s"&lt;/span&gt;
    &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//sprite-meister.github.io/spritesheets/muybridge_horse.jpg"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/sprite-animation&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Creating a &lt;em&gt;Sprite Sheet&lt;/em&gt; Animation:&lt;/p&gt;

&lt;p&gt;&lt;a href="//sprite-meister.github.io/spritesheets/muybridge_horse.jpg" class="article-body-image-wrapper"&gt;&lt;img src="//sprite-meister.github.io/spritesheets/muybridge_horse.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/cLhn3d2m/embedded/result,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#but-why-stop-there"&gt;
  &lt;/a&gt;
  But why stop there?
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;SVG images can be animated sprite-sheets, &lt;/li&gt;
&lt;li&gt;and SVG can be created &lt;em&gt;&lt;strong&gt;client-side&lt;/strong&gt;&lt;/em&gt;
as I have done with &lt;a href="https://cardmeister.github.io"&gt;Playingcards&lt;/a&gt;, &lt;a href="https://chessmeister.github.io"&gt;Chesspieces&lt;/a&gt;, &lt;a href="https://flagmeister.github.ui"&gt;Flags&lt;/a&gt;, &lt;a href="https://iconmeister.github.io"&gt;Icons&lt;/a&gt; and &lt;a href="https://dev.to/dannyengelman/what-web-technologies-are-required-to-draw-a-pie-chart-in-2021-spoiler-alert-a-standard-web-component-will-do-1j56"&gt;Pie-charts&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-everything-required-to-animate-a-raw-hamburger-endraw-icon-to-an-raw-arrow-endraw-is"&gt;
  &lt;/a&gt;
  So everything required to animate a &lt;code&gt;Hamburger&lt;/code&gt; icon to an &lt;code&gt;Arrow&lt;/code&gt; is:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//sprite-meister.github.io/element.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;sprite-meister&lt;/span&gt; &lt;span class="na"&gt;duration=&lt;/span&gt;&lt;span class="s"&gt;"4s"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ${ setv1( 40-ease({distance:25}) , "top and bottom X position" ) , 
       setv2(    ease({distance:20}) , "top and bottom line to Y=50" )
    }
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"8"&lt;/span&gt; &lt;span class="na"&gt;stroke-linecap=&lt;/span&gt;&lt;span class="s"&gt;"round"&lt;/span&gt; 
       &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"${rotate(180-ease({distance:180}))}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M${v1} 30L85 ${50 - v2}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M15 50L85 50"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M${v1} 70L85 ${50 + v2}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/sprite-meister&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-ltspritemeistergt-endraw-parses-the-string-literal-to-24-default-svg-frames"&gt;
  &lt;/a&gt;
  &lt;code&gt;&amp;lt;sprite-meister&amp;gt;&lt;/code&gt; parses the String Literal to 24 (default) SVG frames:
&lt;/h4&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/k3csj7nz/embedded/result,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#then-pacman-is-just-2-rotating-semicircles"&gt;
  &lt;/a&gt;
  Then PacMan is just 2 rotating semi-circles:
&lt;/h2&gt;

&lt;p&gt;..and a squinting eye!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"//sprite-meister.github.io/element.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;sprite-meister&lt;/span&gt; &lt;span class="na"&gt;duration=&lt;/span&gt;&lt;span class="s"&gt;"1s"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ${ setv1( pulse({mid:45}) ,"rotation" ),
     setv2( ease({distance:1}) ,"squint eye")
  }
  &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"yellow"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"rotate(${ -v1 } 50 50)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"m90 50a1 1 0 0 0 -80 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"60"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"30"&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;"${5 + v2}"&lt;/span&gt; &lt;span class="na"&gt;ry=&lt;/span&gt;&lt;span class="s"&gt;"${5 - v2}"&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ellipse&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"rotate(${v1} 50 50)"&lt;/span&gt; &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"m10 50a1 1 0 0 0 80 0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/sprite-meister&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/Lvxhrn1g/embedded/result,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-true-oop-fashion-1-ghost-is-a-raw-lttemplategt-endraw-"&gt;
  &lt;/a&gt;
  in true OOP fashion, 1 ghost is a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt;:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;spritemeister&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"ghost"&lt;/span&gt; &lt;span class="na"&gt;duration=&lt;/span&gt;&lt;span class="s"&gt;".5s"&lt;/span&gt; &lt;span class="na"&gt;steps=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt; &lt;span class="na"&gt;ghostcolor=&lt;/span&gt;&lt;span class="s"&gt;"hotpink"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  ${setv1(ease({distance:1}),"squeeze eyes")} 
  ${setv2(ease({distance:1}),"bounce eyes")} 
  ${setv3(pulse({mid:2}),"bounce ghost")} 
  ${setv4(pulse({start:0,mid:2}),"wiggle skirt")} 
  &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"skewY(${v3})"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;path&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"${attr('ghostcolor','red')}"&lt;/span&gt;
          &lt;span class="na"&gt;d=&lt;/span&gt;&lt;span class="s"&gt;"M82 94 c7-13 4-44 1-65s-40-55-63-1 c-7 22-7 53-3 66
             l${v4}-11 l7 11l8-13l8 13l8-12l8 12l7-12z"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/path&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;g&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"eye${framenr}"&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"translate(0 ${v2})"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"white"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"${58 + v1}"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"${30 + v1}"&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;"${5 + v1}"&lt;/span&gt; &lt;span class="na"&gt;ry=&lt;/span&gt;&lt;span class="s"&gt;"${5 - v1}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ellipse&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;ellipse&lt;/span&gt; &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"black"&lt;/span&gt; &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"${60 + v1}"&lt;/span&gt; &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"${30 + v1}"&lt;/span&gt; &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;"${1 + v1}"&lt;/span&gt; &lt;span class="na"&gt;ry=&lt;/span&gt;&lt;span class="s"&gt;"${2 - v1}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ellipse&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;use&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"36"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"#eye${framenr}"&lt;/span&gt; &lt;span class="na"&gt;transform=&lt;/span&gt;&lt;span class="s"&gt;"rotate(180 50 50)"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/use&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;"25"&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"75"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;${attr("id")} &lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/g&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#then-4-ghosts-are-created-with"&gt;
  &lt;/a&gt;
  Then 4 ghosts are created with:
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sprite-meister&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Blinky"&lt;/span&gt; &lt;span class="na"&gt;template=&lt;/span&gt;&lt;span class="s"&gt;"ghost"&lt;/span&gt; &lt;span class="na"&gt;ghostcolor=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sprite-meister&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;sprite-meister&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Pinky"&lt;/span&gt;  &lt;span class="na"&gt;template=&lt;/span&gt;&lt;span class="s"&gt;"ghost"&lt;/span&gt; &lt;span class="na"&gt;ghostcolor=&lt;/span&gt;&lt;span class="s"&gt;"hotpink"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sprite-meister&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;sprite-meister&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Inky"&lt;/span&gt;   &lt;span class="na"&gt;template=&lt;/span&gt;&lt;span class="s"&gt;"ghost"&lt;/span&gt; &lt;span class="na"&gt;ghostcolor=&lt;/span&gt;&lt;span class="s"&gt;"cyan"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sprite-meister&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;sprite-meister&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Clyde"&lt;/span&gt;  &lt;span class="na"&gt;template=&lt;/span&gt;&lt;span class="s"&gt;"ghost"&lt;/span&gt; &lt;span class="na"&gt;ghostcolor=&lt;/span&gt;&lt;span class="s"&gt;"orange"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/sprite-meister&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/g0u168fb/embedded/result,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#it-works-for-me"&gt;
  &lt;/a&gt;
  It works for me
&lt;/h1&gt;

&lt;p&gt;The Online &lt;strong&gt;SpriteMeister Generator&lt;/strong&gt;: &lt;a href="https://Sprite-Meister.github.io"&gt;https://Sprite-Meister.github.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;helped me create the spite-sheet animations I needed.&lt;/p&gt;

&lt;p&gt;I hereby donate all my (Working Model) code to the Public Domain.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/sprite-meister/sprite-meister.github.io"&gt;https://github.com/sprite-meister/sprite-meister.github.io&lt;/a&gt;&lt;/p&gt;



&lt;h1&gt;
  &lt;a href="#how-it-is-done"&gt;
  &lt;/a&gt;
  How it is done
&lt;/h1&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;sprite-meister&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"bounce"&lt;/span&gt; &lt;span class="na"&gt;duration=&lt;/span&gt;&lt;span class="s"&gt;"1s"&lt;/span&gt; &lt;span class="na"&gt;steps=&lt;/span&gt;&lt;span class="s"&gt;"24"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ellipse&lt;/span&gt;
    &lt;span class="na"&gt;cx=&lt;/span&gt;&lt;span class="s"&gt;"50"&lt;/span&gt;
    &lt;span class="na"&gt;cy=&lt;/span&gt;&lt;span class="s"&gt;"${70 - ease({distance:36})}"&lt;/span&gt;
    &lt;span class="na"&gt;rx=&lt;/span&gt;&lt;span class="s"&gt;"${ framenr &amp;gt; 11 ? minmax({value:30,min:41 - ease({distance:10})}) : 30}"&lt;/span&gt;
    &lt;span class="na"&gt;ry=&lt;/span&gt;&lt;span class="s"&gt;"${minmax({value:30,min:30 - ease({distance:30})})}"&lt;/span&gt;
    &lt;span class="na"&gt;fill=&lt;/span&gt;&lt;span class="s"&gt;"none"&lt;/span&gt;
    &lt;span class="na"&gt;stroke=&lt;/span&gt;&lt;span class="s"&gt;"red"&lt;/span&gt;
    &lt;span class="na"&gt;stroke-width=&lt;/span&gt;&lt;span class="s"&gt;"5"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/ellipse&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;text&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;"12"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;n:${framenr}&lt;span class="nt"&gt;&amp;lt;/text&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/sprite-meister&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;&amp;lt;sprite-meister&amp;gt;&lt;/code&gt; Web Component reads its content as a String&lt;/li&gt;
&lt;li&gt;The String is passed to a &lt;code&gt;parseStringLiteral&lt;/code&gt; Function&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;together&lt;/strong&gt; with a {} data object containing variables AND functions (see 'ease' in above code)&lt;/li&gt;
&lt;li&gt;every &lt;strong&gt;function&lt;/strong&gt; generates ONE value for every frame-step&lt;/li&gt;
&lt;li&gt;with all data the Web Component creates one SVG (24 framesteps wide)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/WebComponents/fne8kvp5/embedded/result,html//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#known-issues"&gt;
  &lt;/a&gt;
  Known issues
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The Repo is a mess, all code should be refactored&lt;/li&gt;
&lt;li&gt;Because 1 SVG is created for every frame-step, a &lt;strong&gt;Absolute&lt;/strong&gt; reference will always point to frame 1&lt;/li&gt;
&lt;li&gt;Same goes for % Percentages in the X plane&lt;/li&gt;
&lt;li&gt;The SVG is 1 frame high, so Y plane percentages are fine&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Minimal documentation in &lt;a href="https://sprite-meister.github.io/documentation.html"&gt;documentation.html&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I told you, it is a Working Model v.042&lt;/p&gt;

</description>
      <category>webcomponents</category>
      <category>webdev</category>
      <category>svg</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to Submit a web form and Receive instant notifications</title>
      <author>Marc Garcia Torrent</author>
      <pubDate>Fri, 22 Oct 2021 13:51:00 +0000</pubDate>
      <link>https://dev.to/magarrent/how-to-submit-a-web-form-and-receive-instant-notifications-3i9m</link>
      <guid>https://dev.to/magarrent/how-to-submit-a-web-form-and-receive-instant-notifications-3i9m</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--J1NSlOc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AiXKOkgMf6kLc1Uyc1OTEvA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--J1NSlOc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AiXKOkgMf6kLc1Uyc1OTEvA.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;As a developer or web designer, when you create a web form, you need to specify some &lt;em&gt;action.&lt;/em&gt; The action is a URL or endpoint that your form will be sent. Meaning that you need a backend (code) that receives your form and send you email notifications, saves the data, and something else.&lt;/p&gt;

&lt;p&gt;But what happens if I don’t know how to create a backend? Or what happens if I don’t wanna create backend for a simple form?&lt;/p&gt;

&lt;p&gt;For that reason, I’ve created &lt;a href="https://www.actionforms.io/"&gt;ActionForms.io&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#actionformsio-is-a-no-code%E2%80%8A%E2%80%8Ano-backend-form-sender-for-developers"&gt;
  &lt;/a&gt;
  &lt;a href="http://actionforms.io/"&gt;ActionForms.io&lt;/a&gt; is a No code — No backend Form sender for developers.
&lt;/h3&gt;

&lt;p&gt;With &lt;a href="https://www.actionforms.io/"&gt;ActionForms.io&lt;/a&gt;, &lt;strong&gt;you can easily send your&lt;/strong&gt; contact &lt;strong&gt;forms&lt;/strong&gt;, surveys, questions, any form or request that you can imagine &lt;strong&gt;without coding or configuring a backend.&lt;/strong&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#how-to-submit-a-web-form-and-receive-instant-notifications"&gt;
  &lt;/a&gt;
  How to Submit a web form and Receive instant notifications
&lt;/h3&gt;

&lt;p&gt;First of all, you need to create an account in &lt;a href="https://www.actionforms.io/dashboard"&gt;www.ActionForms.io&lt;/a&gt;, you can choose the free plan if you want, or purchase the &lt;strong&gt;Professional plan&lt;/strong&gt; to get &lt;strong&gt;all the power&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Then you’ll need to create an &lt;strong&gt;Endpoint&lt;/strong&gt;. An Endpoint &lt;strong&gt;is a URL where the form will be sent&lt;/strong&gt;, and it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kmc8Q3hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4BZOKlTyr3gTOXGI6p4-zw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kmc8Q3hr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A4BZOKlTyr3gTOXGI6p4-zw.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once we have our endpoint, we should add it to our web form with the action attribute:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;form&lt;/span&gt; &lt;span class="na"&gt;action=&lt;/span&gt;&lt;span class="s"&gt;"https://dev.actionforms.io/e/r/contact-form"&lt;/span&gt; &lt;span class="na"&gt;method=&lt;/span&gt;&lt;span class="s"&gt;"POST"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;label&lt;/span&gt; &lt;span class="na"&gt;for=&lt;/span&gt;&lt;span class="s"&gt;"field_test"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Field test&lt;span class="nt"&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"field_test"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"submit"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Send form&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we submit the form, our submission and all the data will be automatically &lt;strong&gt;stored in&lt;/strong&gt; &lt;a href="http://actionforms.io/"&gt;&lt;strong&gt;ActionForms.io&lt;/strong&gt;&lt;/a&gt; platform, and we can see it at any time.&lt;br&gt;&lt;br&gt;
Now it’s time to receive notifications when somebody sends our form.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-actionformsio-to-receive-form-notifications"&gt;
  &lt;/a&gt;
  Using &lt;a href="http://actionforms.io/"&gt;ActionForms.io&lt;/a&gt; to receive form notifications
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://actionforms.io/"&gt;ActionForms.io&lt;/a&gt; has &lt;strong&gt;many options&lt;/strong&gt; and configurations, but one of I liked the most, are the &lt;strong&gt;Notifications&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are really &lt;strong&gt;simple to use&lt;/strong&gt; and they provide different channel notifications like &lt;strong&gt;Slack&lt;/strong&gt;, &lt;strong&gt;Telegram&lt;/strong&gt;, &lt;strong&gt;Email&lt;/strong&gt;, and more coming.&lt;/p&gt;

&lt;p&gt;To configure notifications, we just need to access to our &lt;em&gt;endpoint settings&lt;/em&gt; and you’ll see the notification channels.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mMSHTFe9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3zr-DIcN09qMZTS6wIFcqg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mMSHTFe9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2A3zr-DIcN09qMZTS6wIFcqg.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4uzAHkaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AOyL8hSJwiGu-D1jlgLUjOg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4uzAHkaW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AOyL8hSJwiGu-D1jlgLUjOg.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can enable as many channels as you want!&lt;/strong&gt; There is no limit, and &lt;strong&gt;you’ll be notified every time a user submits your forms&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mju_Dv_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AGAXW-mIA1cp_vghm4jaM3g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mju_Dv_L--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/800/1%2AGAXW-mIA1cp_vghm4jaM3g.png" alt="enter image description here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Check it out now here: &lt;a href="https://www.actionforms.io/"&gt;https://www.actionforms.io&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-else-can-i-do-with-actionformsio"&gt;
  &lt;/a&gt;
  What else can I do with &lt;a href="http://actionforms.io/"&gt;ActionForms.io&lt;/a&gt;?
&lt;/h3&gt;




&lt;p&gt;We are developing more features every day and improving the platform. These are some of our features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  File uploads up to 20Mb&lt;/li&gt;
&lt;li&gt;  Endpoint fields rules&lt;/li&gt;
&lt;li&gt;  Recaptcha integration&lt;/li&gt;
&lt;li&gt;  Unlimited submissions&lt;/li&gt;
&lt;li&gt;  Unlimited endpoints&lt;/li&gt;
&lt;li&gt;  All notification channels&lt;/li&gt;
&lt;li&gt;  Premium integrations&lt;/li&gt;
&lt;li&gt;  And more coming…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#and-how-much-it-will-cost-me"&gt;
  &lt;/a&gt;
  And… how much it will cost me?
&lt;/h3&gt;

&lt;p&gt;Right now we have to different plans. Free and Premium.&lt;/p&gt;

&lt;p&gt;Our &lt;strong&gt;free plan&lt;/strong&gt; is completely functional and you can use it in all your projects.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Our&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Premium plan&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;has a lot of potential features, you’ll have&lt;/em&gt; &lt;strong&gt;&lt;em&gt;unlimited power and perform incredible web flows throw your form requests.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Stop HERE!&lt;/strong&gt; If you are here, you’ll have a huge discount, use this code to have a &lt;strong&gt;30% lifetime discount&lt;/strong&gt;! “&lt;em&gt;MEDIUMMAGARRENT&lt;/em&gt;”&lt;/p&gt;

&lt;p&gt;Thank you for reading this post. I’m Marc, founder of &lt;a href="https://www.actionforms.io/"&gt;ActionForms.io&lt;/a&gt;, follow me on &lt;a href="https://twitter.com/magarrent"&gt;Twitter&lt;/a&gt; &lt;a class="mentioned-user" href="https://dev.to/magarrent"&gt;@magarrent&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Also, we have a Discord server available for our users, that we share suggestions and questions about the platform, feel free to &lt;a href="https://discord.gg/YyqsCaTw"&gt;Join us here&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Marc,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.actionforms.io/"&gt;ActionForms.io&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>productivity</category>
      <category>webdev</category>
      <category>html</category>
    </item>
    <item>
      <title>Simple Screen Recorder With Vanilla JS</title>
      <author>Seth Addo</author>
      <pubDate>Fri, 22 Oct 2021 13:49:27 +0000</pubDate>
      <link>https://dev.to/seths10/simple-screen-recorder-with-vanilla-js-532c</link>
      <guid>https://dev.to/seths10/simple-screen-recorder-with-vanilla-js-532c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#lets-begin"&gt;
  &lt;/a&gt;
  Let's Begin
&lt;/h2&gt;

&lt;p&gt;In this blog, you are going to learn how to create a screen recorder that does not only record your browser screen. Yes, it can record not only your active tab but the entire screen if you want.&lt;br&gt;
First of all, we will create an &lt;strong&gt;HTML&lt;/strong&gt; file which contains a record button and a video element where you can play the recorded video.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Screen Recorder/title&amp;gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;video&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"video"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"600px"&lt;/span&gt; &lt;span class="na"&gt;controls&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"record-btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;record&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"./index.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And we also need a &lt;strong&gt;JavaScript&lt;/strong&gt; file. Let's create a file and naeme it &lt;strong&gt;index.js&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; You can name your &lt;em&gt;js&lt;/em&gt; file with any other name but make sure you reference the name well in the &lt;strong&gt;HTML&lt;/strong&gt; file.&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.record-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the &lt;strong&gt;JS&lt;/strong&gt; file, type the above code into it. This should print the word &lt;code&gt;hello&lt;/code&gt; when you open your browser. Alright, now instead of &lt;code&gt;console.log&lt;/code&gt;, let us get the stream display&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.record-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDisplayMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after clicking the button, you'll see the screen below:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3Thot54d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8bcdzxsv2zkzs7po048.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3Thot54d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j8bcdzxsv2zkzs7po048.png" alt="Recording mode selector"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that we can select the way to record the video, let's now go into the main implementation, that is how to actually record the video. We will use &lt;strong&gt;MediaRecorder&lt;/strong&gt; to record the video.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.record-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDisplayMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c1"&gt;//needed for better browser support&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTypeSupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
             &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
             &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//we have to start the recorder manually&lt;/span&gt;
    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;While recording, we now need to store the data we got from &lt;code&gt;mediaRecorder&lt;/code&gt; in a variable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.record-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDisplayMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c1"&gt;//needed for better browser support&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTypeSupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
             &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
             &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dataavailable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//we have to start the recorder manually&lt;/span&gt;
    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add the code to make the video play in the video element after we are done recording&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.record-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDisplayMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c1"&gt;//needed for better browser support&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTypeSupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
             &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
             &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dataavailable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//we have to start the recorder manually&lt;/span&gt;
    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Okay, we are almost done. Now let's add some finishing touches to make the video video download itself automatically after recording has been stopped.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.record-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mediaDevices&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getDisplayMedia&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;video&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

  &lt;span class="c1"&gt;//needed for better browser support&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isTypeSupported&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
             &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm; codecs=vp9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; 
             &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video/webm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;MediaRecorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;mimeType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;mime&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;chunks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;dataavailable&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;stop&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;blob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Blob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;chunks&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectURL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;blob&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;video&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;video&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;src&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;

      &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;
      &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;download&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;video.webm&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
      &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//we have to start the recorder manually&lt;/span&gt;
    &lt;span class="nx"&gt;mediaRecorder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We are finally done, Hope it worked for you.&lt;/p&gt;

&lt;p&gt;Thanks for your time and don’t forget to be friends with me on:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.twitter.com/set_addo"&gt;Twitter&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/seth-addo-034327190"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.github.com/seths10"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Divtober Day 21: Magic</title>
      <author>Alvaro Montoro</author>
      <pubDate>Fri, 22 Oct 2021 13:48:03 +0000</pubDate>
      <link>https://dev.to/alvaromontoro/divtober-day-21-magic-40p1</link>
      <guid>https://dev.to/alvaromontoro/divtober-day-21-magic-40p1</guid>
      <description>&lt;p&gt;I forgot to publish this yesterday, but here it is... The word of the day was "Magic" so I coded a magic trick in CSS, with a single HTML element and no JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/alvaromontoro/embed/zYdowmM?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;It started just with a &lt;a href="https://codepen.io/alvaromontoro/pen/VwzKxMB"&gt;drawing of the magician&lt;/a&gt; and then I extended to look like this other &lt;a href="https://codepen.io/alvaromontoro/pen/xagVOa"&gt;demo I created way back&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because it changes the value of the &lt;code&gt;content&lt;/code&gt; property inside an animation, the demo will not work on Safari. Maybe I could modify it a little so instead of animating &lt;code&gt;content&lt;/code&gt;, I could add some spacing and move the text around instead. 🤔&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>divtober</category>
      <category>css</category>
      <category>art</category>
    </item>
    <item>
      <title>How to Install Git On Ubuntu 20.04</title>
      <author>Suresh Ramani</author>
      <pubDate>Fri, 22 Oct 2021 13:47:50 +0000</pubDate>
      <link>https://dev.to/sureshramani/how-to-install-git-on-ubuntu-2004-24fc</link>
      <guid>https://dev.to/sureshramani/how-to-install-git-on-ubuntu-2004-24fc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Git is the world's most popular distributed version control system used by many open-source and commercial projects. It allows you to collaborate on projects with your fellow developers, keep track of your code changes, revert to previous stages, create branches, and more. Linus Torvalds (the creator of Linux) developed Git.&lt;/p&gt;

&lt;p&gt;A version control system is a system that keeps a record of the changes in a file (or multiple files) over a period. This is so that a user may return to a previous version of the system's software whenever necessary. This article shows you how to install and configure Git in Ubuntu 20.04 LTS.&lt;/p&gt;

&lt;p&gt;In this article, you will learn how to install and configure Git on Ubuntu 20.04 via the Command line.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-prerequisites"&gt;
  &lt;/a&gt;
  1. Prerequisites
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;The operating system running Ubuntu 20.04 Linux&lt;/li&gt;
&lt;li&gt;A root or non-root user with Sudo privileges&lt;/li&gt;
&lt;li&gt;Has stable internet connection&lt;/li&gt;
&lt;li&gt;Terminal window / Command line&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#2-update-local-repositories"&gt;
  &lt;/a&gt;
  2. Update Local Repositories
&lt;/h3&gt;

&lt;p&gt;Update all system packages to the latest, Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get upadate
sudo apt-get upgrade -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-install-git"&gt;
  &lt;/a&gt;
  3. Install GIT
&lt;/h3&gt;

&lt;p&gt;The Git utility package is available in ubuntu software sources, which can be installed by APT-GET. Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-check-git-version"&gt;
  &lt;/a&gt;
  4. Check GIT Version
&lt;/h3&gt;

&lt;p&gt;Verify the installation, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git --version
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s it, you have successfully installed Git on your Ubuntu, and you can start using it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-configure-git"&gt;
  &lt;/a&gt;
  5. Configure GIT
&lt;/h3&gt;

&lt;p&gt;Set your global user name and email. Run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git config --global user.name "&amp;lt;YOUR NAME&amp;gt;"
git config --global user.email "&amp;lt;YOUR EMAIL ADDRESS&amp;gt;"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thank you for reading this blog.&lt;/p&gt;

</description>
      <category>ubuntu</category>
      <category>linux</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Keeping Up With CSS</title>
      <author>Stephanie Eckles</author>
      <pubDate>Fri, 22 Oct 2021 13:43:08 +0000</pubDate>
      <link>https://dev.to/5t3ph/keeping-up-with-css-3f20</link>
      <guid>https://dev.to/5t3ph/keeping-up-with-css-3f20</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;The following was originally sent out in &lt;a href="https://moderncss.dev/newsletter"&gt;my weekly newsletter&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're reading this, you're probably at least a little bit interested in CSS 😉 And you may have noticed it's moving a record pace in the last couple of years. Chris Coyier did &lt;a href="https://css-tricks.com/css-is-going-gosh-darned-hog-wild-i-tell-ya-what/"&gt;a real quick round-up&lt;/a&gt; of some things on their way and even newly supported or with experimental status. Also at the recent TPAC (Technical Plenary and Advisory Committee - aka the W3C Annual Conference) Miriam Suzanne shared &lt;a href="https://www.w3.org/2021/10/TPAC/demos/css-architecture.html"&gt;a ~6min presentation on the specs&lt;/a&gt; she's working on: cascade layers, container queries, and scope.&lt;/p&gt;

&lt;p&gt;A frequent question I'm asked is how to keep up with the changes in CSS. Before we get into tactics, keep in mind: while the changes can seem overwhelming, the actual stage of a spec mean that it could be a long ways off before support is great enough to start using the new hotness. That said, if you are interested about something, it's not futile to generate excitement about it! As I've heard Jen Simmons say, browser makers &lt;em&gt;are&lt;/em&gt; listening.&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--66CYnaCb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1433687120204337152/w4S8YTx__normal.jpg" alt="MiAAAAAAAh (is Terrifying) profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        MiAAAAAAAh (is Terrifying)
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        @terriblemia
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      🥳 what's now well-established in all browsers?&lt;br&gt;🤩 what's new somewhere, but still needs progressive-enhancement?&lt;br&gt;🤗 what's available to try, but still too experimental for production?&lt;br&gt;😅 what's coming out somewhere soon?&lt;br&gt;🤯 what's exciting, but actually a long way off?
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      18:28 PM - 26 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1397620650513104900" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1397620650513104900" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1397620650513104900" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;blockquote&gt;
&lt;p&gt;Also check out &lt;a href="https://twitter.com/brad_frost/status/1451522745825640448"&gt;this perspective-altering Twitter thread&lt;/a&gt; from Brad Frost. TL;DR - &lt;strong&gt;it's not about learning everything right now, it's about having awareness of what's possible to help you develop a solution when you need it&lt;/strong&gt;!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Did you know &lt;a href="https://github.com/w3c/csswg-drafts"&gt;the CSSWG posts all their work as issues on GitHub&lt;/a&gt;? So one way to discover the status of something is to search there. Then you can actually use the emoji reacts on comments or even add your own comment if you have helpful feedback on the proposal. You can also add your own issue for discussion. And, you can subscribe to issues to keep track of ones you're really interested in.&lt;/p&gt;

&lt;p&gt;You can also follow the &lt;a href="https://twitter.com/csswg"&gt;CSS Working Group on Twitter&lt;/a&gt; and/or subscibe to their &lt;a href="https://www.w3.org/blog/CSS/feed/atom/"&gt;blog RSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I rely a lot on a few folks to surface what's going new and upcoming as well as early demos and explainers. In particular, the following individuals come to mind to follow on Twitter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/TerribleMia"&gt;Miriam Suzanne&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jensimmons"&gt;Jen Simmons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/bramus"&gt;Bramus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/argyleink"&gt;Adam Argyle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/Una"&gt;Una Kravets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/shadeed9"&gt;Ahmad Shadeed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/CSSInRealLife"&gt;Michelle Barker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also subscribe to several newsletters, with the following being my favorites for CSS news:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://frontendfoc.us/"&gt;Frontend Focus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://csslayout.news/"&gt;CSS Layout News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://codepen.io/spark"&gt;The CodePen Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.smashingmagazine.com/the-smashing-newsletter/"&gt;Smashing Magazine Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-tricks.com/newsletters/"&gt;CSS-Tricks Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://css-weekly.com/"&gt;CSS Weekly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What's missing from my list of folks or sources to follow? I've grown my network a lot this past year but I'm sure I'm missing some amazing content! Comment and let me know!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I'm the author of &lt;a href="https://moderncss.dev"&gt;ModernCSS.dev&lt;/a&gt;, an in-depth tutorial series intended to help you upgrade your CSS toolbox. &lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>css</category>
      <category>webdev</category>
    </item>
  </channel>
</rss>
