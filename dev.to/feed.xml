<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to build a chat into an Angular app with TalkJS</title>
      <author>Aswin Rajeev</author>
      <pubDate>Fri, 01 Oct 2021 10:03:15 +0000</pubDate>
      <link>https://dev.to/talkjs/how-to-build-a-chat-into-an-angular-app-with-talkjs-1moo</link>
      <guid>https://dev.to/talkjs/how-to-build-a-chat-into-an-angular-app-with-talkjs-1moo</guid>
      <description>&lt;p&gt;In today’s tutorial, we will take a look at how we can integrate the &lt;a href="https://talkjs.com/"&gt;TalkJS Chat API&lt;/a&gt; into an existing Angular application. AllParts is an imaginary e-commerce website that specializes in automobile spare parts and accessories. They have an Angular application that is integrated with Firebase. It allows users to authenticate themselves using Google and then purchase spare parts and essentials for automobiles. It is not a full-fledged application but goes well with this tutorial. You can set up your project from &lt;a href="https://github.com/aswinrajeevofficial/TalkJS-Angular"&gt;GitHub&lt;/a&gt; before getting started and if you’ve already done that, let’s get going.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o0dUFtVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2lqf8nd1ajhiz4qv2gq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o0dUFtVv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q2lqf8nd1ajhiz4qv2gq.png" alt="Angular application with TalkJS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-talkjs-to-an-angular-application"&gt;
  &lt;/a&gt;
  Adding TalkJS to an Angular application
&lt;/h2&gt;

&lt;p&gt;To add TalkJS to your Angular application, use the following command:&lt;br&gt;
&lt;code&gt;npm install talkjs –save&lt;/code&gt;&lt;br&gt;
This will add the TalkJS dependency to your current project. Next, we will add a component and a service to the project. A service in Angular is used to separate out the component code from functions that are used commonly and also to keep the code modular and scalable. To create a new service, we use the following command:&lt;br&gt;
&lt;code&gt;ng generate service talk&lt;/code&gt;&lt;br&gt;
There is also a shorthand equivalent of this command which is &lt;code&gt;ng g s talk&lt;/code&gt;. This will create a new service called &lt;code&gt;TalkService&lt;/code&gt;. Once that is created we will also create a component for our live chat. To create a new component, we will use the following command:&lt;br&gt;
&lt;code&gt;ng generate component talkjs&lt;/code&gt;&lt;br&gt;
Just like before, the shorthand equivalent of this command is &lt;code&gt;ng g c talkjs&lt;/code&gt;. Once these prerequisite steps are out of the way, we can get started with the actual integration.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#application-walkthrough"&gt;
  &lt;/a&gt;
  Application walkthrough
&lt;/h2&gt;

&lt;p&gt;Before we integrate TalkJS into our application, let’s take a look at the existing application itself. It is intended to be an e-commerce website specializing in automobile spare parts and accessories. Customers can sign in with Google and view products from different manufacturers which they can purchase. The application has a home page with a simple banner and also the products page which only logged-in users can access.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#using-talkjs-to-add-live-chat"&gt;
  &lt;/a&gt;
  Using TalkJS to add live chat
&lt;/h2&gt;

&lt;p&gt;Our service code looks like this right now.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;Injectable&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="na"&gt;providedIn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;root&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TalkService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have added a variable for the current user which is of the TalkJS User type. We will create 4 methods inside it. They are given below.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-1-async-createuserapplicatonuser-any"&gt;
  &lt;/a&gt;
  Method 1: async createUser(applicatonUser: any)
&lt;/h3&gt;

&lt;p&gt;The code for this method is given below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;applicationUser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;role&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This method is used to map the users in the application to a TalkJS User object. This allows TalkJS to identify the users in the system. It also allows keeping track of their conversations. In our case, the user logged in through Google will be mapped to this object so that his name and photo appear inside the chatbox.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-2-async-createcurrentsession"&gt;
  &lt;/a&gt;
  Method 2: async createCurrentSession()
&lt;/h3&gt;

&lt;p&gt;This method is used to initialize the user’s current active session and also authenticate TalkJS. TalkJS has an &lt;code&gt;appId&lt;/code&gt; that is assigned to each account which is used to authenticate it. To find your appId, simply login to your TalkJS dashboard and you should see it under the Settings tab. You have different appIds for your test environment as well as your live environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createCurrentSession&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;uid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;displayName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;photoURL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
         &lt;span class="na"&gt;appId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOUR_APP_ID_HERE&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;me&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is also where we initialize our currently logged-in user. If you look at the code above, you can see that we have retrieved the current user using &lt;code&gt;this.user$&lt;/code&gt; and the attributes from it match the one returned from Google after successfully signing in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#method-3-async-getorcreateconversationsession-talksession-otherapplicationuser-any"&gt;
  &lt;/a&gt;
  Method 3: async getOrCreateConversation(session: Talk.Session, otherApplicationUser: any)
&lt;/h3&gt;

&lt;p&gt;This function creates the conversation between the current user and the other user and also links it up with the session that was created before. This is where you set the participants for the conversation. System messages in TalkJS can also be set up here by adding the &lt;code&gt;conversation.setAttributes()&lt;/code&gt; method and setting an array of strings to a property called &lt;code&gt;welcomeMessages&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getOrCreateConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;otherApplicationUser&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;otherUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createUser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherApplicationUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conversation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOrCreateConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oneOnOneId&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;otherUser&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;currentUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setParticipant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;otherUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttributes&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
      &lt;span class="na"&gt;welcomeMessages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Welcome to AllParts Support Chat!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Leave your message here and one of our support agents will assist you soon.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#method-4-async-createpopupsession-talksession"&gt;
  &lt;/a&gt;
  Method 4: async createPopup(session: Talk.Session)
&lt;/h3&gt;

&lt;p&gt;The last method is to create a popup chat towards the right bottom corner of our screen. The popup UI provided by TalkJS out-of-the-box is really handy in scenarios like this. If you require a full-fledged chatbox or an inbox, they are also provided within TalkJS.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;  &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;supportUser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;username&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sebastien&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sebastian@allparts.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;photoUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://randomuser.me/api/portraits/men/71.jpg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;role&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;default&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;conversation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getOrCreateConversation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;supportUser&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conversation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;keepOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above, the support user is hardcoded, but when you have your live application, you can use the credentials of actual people that the users can talk to.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#talkjs-component-walkthrough"&gt;
  &lt;/a&gt;
  TalkJS Component Walkthrough
&lt;/h2&gt;

&lt;p&gt;We have completed writing up all our helper methods, now we just need to set up our TalkJS component that will contain the popup chatbox. The TalkjsComponent consists of just a single line that has a &lt;code&gt;div&lt;/code&gt; with an id of &lt;code&gt;talkjsContainer&lt;/code&gt;. It also has the &lt;code&gt;*ngIf&lt;/code&gt; directive that checks if the user is logged in or not. For unauthenticated users, the chatbox will not appear.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;*ngIf = &lt;/span&gt;&lt;span class="s"&gt;"auth.user$ | async"&lt;/span&gt; &lt;span class="na"&gt;#talkjsContainer&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"height: 500px"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Inside the TypeScript file for the component, we have the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;TalkjsComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Popup&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Talk&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;ViewChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;talkjsContainer&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;talkjsContainer&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;ElementRef&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nx"&gt;talkService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;TalkService&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nx"&gt;auth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;AuthService&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;ngOnInit&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCurrentSession&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createPopup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;popup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;talkjsContainer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;nativeElement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We use the &lt;code&gt;@ViewChild&lt;/code&gt; decorator to access the HTML element from the component code to mount our chatbox. We have the AuthService which is used for authenticating the user. The component implements the &lt;code&gt;OnInit&lt;/code&gt; interface which provides the lifecycle hook of &lt;code&gt;ngOnInit()&lt;/code&gt;. This gets triggered after component initialization and this is where we call the &lt;code&gt;createPopup()&lt;/code&gt; method to create the chatbox and mount it to our component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#full-demo"&gt;
  &lt;/a&gt;
  Full Demo
&lt;/h2&gt;

&lt;p&gt;Below is a full demo of the application. We can see that the user is logged in and his username is displayed at the top. For authenticated users, the chatbox option is available at the bottom right corner and they can also view the products.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tHiKoLJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plsz6zq8iqqhcoojdu9k.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tHiKoLJG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/plsz6zq8iqqhcoojdu9k.gif" alt="Angular app with TalkJS Full Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;There you have it. We have successfully integrated TalkJS to our existing Angular application called AllParts. We didn’t go over the Angular code much in-depth and the tutorial assumes that the user has some basic knowledge of Angular. The entire code is available on &lt;a href="https://github.com/aswinrajeevofficial/TalkJS-Angular"&gt;GitHub&lt;/a&gt;. Make sure you create a Firebase project on Firebase Console and use the credentials provided there to authenticate your application with Firebase.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>angular</category>
      <category>tutorial</category>
      <category>typescript</category>
    </item>
    <item>
      <title>GitHub Issue Forms</title>
      <author>Anish De</author>
      <pubDate>Fri, 01 Oct 2021 09:34:02 +0000</pubDate>
      <link>https://dev.to/byteslash/github-issue-forms-3n14</link>
      <guid>https://dev.to/byteslash/github-issue-forms-3n14</guid>
      <description>&lt;p&gt;&lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; allowed us to make pre-build issue templates in the form of markdown files which the person reporting the bug could fill out. This was better than presenting the person reporting the bug with a blank textbox but it could get a bit clumsy at times and many wouldn't follow the format. GitHub now has got an option to build a form that one can fill out as a bug report. Note that Issue forms are in beta currently.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#getting-started"&gt;
  &lt;/a&gt;
  Getting Started
&lt;/h2&gt;

&lt;p&gt;GitHub Issue forms are currently only available for public repositories so we need a public repository to work with.&lt;/p&gt;

&lt;p&gt;Next, we need to create a folder called &lt;code&gt;.github/ISSUE_TEMPLATE&lt;/code&gt; and then add a &lt;code&gt;yml&lt;/code&gt; file. Let us call this &lt;code&gt;bug_report.yml&lt;/code&gt;.&lt;br&gt;
Our path will be &lt;code&gt;.github/ISSUE_TEMPLATE/bug_report.yml&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#filling-out-the-template-raw-yml-endraw-file"&gt;
  &lt;/a&gt;
  Filling out the template &lt;code&gt;yml&lt;/code&gt; file
&lt;/h2&gt;

&lt;p&gt;We are going to make a simple form to file a bug report so let's get started&lt;/p&gt;

&lt;p&gt;First, let us add a name:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;🐛Bug Report&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will also add a description, title, and some labels&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;File a bug report here&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[BUG]:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bug"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also add an assignee (this is optional) -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;assignees&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AnishDe12020"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we are done with metadata, let us start with the body of the issue - &lt;/p&gt;

&lt;p&gt;Let us start with adding a small text -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;markdown&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;Thanks for taking the time to fill out this bug report!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't want the user to file a bug report if a report for that bug already exists so let us add a checkbox&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt; &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;checkboxes&lt;/span&gt;
    &lt;span class="s"&gt;id&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt; &lt;span class="s"&gt;new-bug&lt;/span&gt;
    &lt;span class="s"&gt;attributes&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Is there an existing issue for this?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please search to see if an issue already exists for the bug you encountered.&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;I have searched the existing issues&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have specified the &lt;code&gt;type&lt;/code&gt; as a checkbox and added the &lt;code&gt;label&lt;/code&gt; parameter and &lt;code&gt;description&lt;/code&gt; attributes. We have then added a &lt;code&gt;label&lt;/code&gt; parameter to the checkbox and made it a required field as we always want it to be checked by the user.&lt;/p&gt;

&lt;p&gt;Now let us ask the user for a description of the bug -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bug-description&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Description of the bug&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tell us what bug you encountered and what should have happened&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how we add an &lt;code&gt;id&lt;/code&gt; to the field (this is optional) and we have also added a &lt;code&gt;description&lt;/code&gt; attribute. We can also add a &lt;code&gt;placeholder&lt;/code&gt; attribute but let us leave that for this one. We have also made the field required by setting the &lt;code&gt;required&lt;/code&gt; parameter to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;validations&lt;/code&gt; section. The &lt;code&gt;label&lt;/code&gt; attribute is the only required parameter.&lt;/p&gt;

&lt;p&gt;We can also ask them to tell is the steps to reproduce the bug&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps-to-reproduce&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps To Reproduce&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps to reproduce the behavior.&lt;/span&gt;
      &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please write the steps in a list form&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is similar to the &lt;code&gt;bug-report&lt;/code&gt; field but we have added a &lt;code&gt;placeholder&lt;/code&gt; this time.&lt;/p&gt;

&lt;p&gt;Now let us see how we can add a dropdown. Say we got 5 versions of our apps and want the users to tell us in which version of the app the issue is occurring. We will also give them the option to choose multiple versions in case the issue is occurring on more than 1 version&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dropdown&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;versions&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Which version of the app are you using?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;If this issue is occurring on more than 1 version of the app, select the appropriate versions.&lt;/span&gt;
      &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.1.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.2.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.1.0&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At last, this is how our &lt;code&gt;bug_report.yml&lt;/code&gt; should look like -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;🐛Bug Report&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;File a bug report here&lt;/span&gt;
&lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;[BUG]:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;span class="na"&gt;labels&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;bug"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;assignees&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;AnishDe12020"&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;
&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;markdown&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
        &lt;span class="s"&gt;Thanks for taking the time to fill out this bug report!!!&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;checkboxes&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;new-bug&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Is there an existing issue for this?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please search to see if an issue already exists for the bug you encountered.&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;I have searched the existing issues&lt;/span&gt;
        &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;bug-description&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Description of the bug&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Tell us what bug you encountered and what should have happened&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;textarea&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;steps-to-reproduce&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps To Reproduce&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Steps to reproduce the behavior.&lt;/span&gt;
      &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Please write the steps in a list form&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;dropdown&lt;/span&gt;
    &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;versions&lt;/span&gt;
    &lt;span class="na"&gt;attributes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Which version of the app are you using?&lt;/span&gt;
      &lt;span class="na"&gt;description&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;If this issue is occurring on more than 1 version of the app, select the appropriate versions.&lt;/span&gt;
      &lt;span class="na"&gt;multiple&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
      &lt;span class="na"&gt;options&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.1.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;1.2.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.0.0&lt;/span&gt;
       &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;2.1.0&lt;/span&gt;
    &lt;span class="na"&gt;validations&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you should commit the file.&lt;/p&gt;

&lt;p&gt;Now if we try to create an issue, we will be presented with this page - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FmqZUrSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067377439/effLTQIx9p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FmqZUrSh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067377439/effLTQIx9p.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We would see multiple options if we made more templates but we have only one right now so let us see if it works&lt;/p&gt;

&lt;p&gt;Notice how the label and assignee has been added - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r8iaqpzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067599150/BU5zmoXbr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r8iaqpzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067599150/BU5zmoXbr.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On submitting the issue, it will be created like any other issue - &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hIO8JsFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067665394/dVguetkPb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hIO8JsFb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633067665394/dVguetkPb.png" alt="image.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can see the repository for this tutorial &lt;a href="https://github.com/AnishDe12020/issue-forms"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also see the schema for GitHub issue forms &lt;a href="https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/syntax-for-githubs-form-schema"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
    </item>
    <item>
      <title>React.js : beginner guide, Where To Start</title>
      <author>Shreyansh sheth</author>
      <pubDate>Fri, 01 Oct 2021 09:03:33 +0000</pubDate>
      <link>https://dev.to/shreyanshsheth/react-js-beginner-guide-where-to-start-3jgc</link>
      <guid>https://dev.to/shreyanshsheth/react-js-beginner-guide-where-to-start-3jgc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-react"&gt;What Is React&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-it-works"&gt;How It Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#suitable"&gt;Is It Suitable For You&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#roadmap"&gt;Roadmap To Learn React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-is-react"&gt;
  &lt;/a&gt;
  What Is React &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;React Is A Javascript Library To Build User Interfaces. Think Of It As Simple Web Library That You Can Inject Through &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; Tag. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#main-features-of-react-that-attracts-peoples"&gt;
  &lt;/a&gt;
  Main Features Of React That Attracts Peoples
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;It Has Huge Community&lt;/li&gt;
&lt;li&gt;Library Is Declarative And Easy-To-Understand&lt;/li&gt;
&lt;li&gt;It Is Component Base&lt;/li&gt;
&lt;li&gt;Back By Facebook And Used In Many Morden Web Applications&lt;/li&gt;
&lt;li&gt;Different Production Ready Frameworks Build upon It&lt;/li&gt;
&lt;li&gt;You Can Use JSX To Write Components And It Makes It So Much Easy Rather Than Using Templates&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How It Works &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;It Uses Virtual Dom To Handle State And All Its Component And React Based On State Changes. And Updating Virtual Dom Update Browser Dom.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;React&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;heading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hey reader&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;React Is Just Library And If You Want To Work With Its True Potential You Have To Use Bable To Transpile All JSX into browser-javascript&lt;/p&gt;

&lt;p&gt;Above Component In Jsx is littraly&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'heading'&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;hey reader&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But You Don't Have To Worry About This Transpiling Things Because All The Framework Build On Top Of React Just Do That Automatically.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-it-suitable-for-you"&gt;
  &lt;/a&gt;
  Is It Suitable For You &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;For Most Cases React Is Completely Suitable To Work With Because It Provides 1000s' Of Open-Sources Community Library That Is Help To Solve So Many Problems.&lt;/p&gt;

&lt;p&gt;But, It Is Recommended To Just See What You Want To Achieve And It Is Too Overkill To Use React In That Scenario.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#roadmap-to-learn-react"&gt;
  &lt;/a&gt;
  Roadmap To Learn React &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#overview-of-react"&gt;
  &lt;/a&gt;
  Overview Of React
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=Tn6-PIqc4UM"&gt;Fireship 100 Seconds Of React&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#learning-material-for-react"&gt;
  &lt;/a&gt;
  Learning Material For React
&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;I Am Recommending This Because I Have Used It For Myself Also&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://btholt.github.io/complete-intro-to-react-v6/"&gt;Brain Hold FrontEnd Masters Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://reactjs.org/docs/getting-started.html"&gt;React Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#list-of-things-to-learn"&gt;
  &lt;/a&gt;
  List Of Things To Learn
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Follow List To Get Better Understanding&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;I Have Bias In Some Library Than Other Just Because I Have Learned It And My Experience With That Libraries&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Starter Project (Vite.js, Create-React-App)&lt;/li&gt;
&lt;li&gt;How JSX &amp;amp; Babel Works With Bundlers&lt;/li&gt;
&lt;li&gt;React Functional Components (&lt;em&gt;You Can Use Class Components But Functional Is Easy To Use &amp;amp; Learn&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Lifecycle In Functional Components&lt;/li&gt;
&lt;li&gt;UseState Hook In Functional Component&lt;/li&gt;
&lt;li&gt;Props In React&lt;/li&gt;
&lt;li&gt;Build Todo Application With It With Each Todo item is its own component. Use State &amp;amp; lifecycle Hooks Along With Props.&lt;/li&gt;
&lt;li&gt;Learn UseContext Hook &amp;amp; Improve Above Todo App With This Hook&lt;/li&gt;
&lt;li&gt;Learn UseMemo, UseReducer Hooks&lt;/li&gt;
&lt;li&gt;Learn About React-Router Or Reach Router To Create Different Pages And Make Use Of Them In Above Application&lt;/li&gt;
&lt;li&gt;Learn Different CSS &amp;amp; Components Library To Style Above Application.&lt;/li&gt;
&lt;li&gt;Learn About State Management Like Recoil &amp;amp; Redux (&lt;em&gt;"Redux Is Too Complicated And Takes Lots Of Time And Also You Probably Don't Need Redux So Be Careful &amp;amp; Select One You Like"&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Learn About Single Page App, Static Site Generation And Server-Side Rendering&lt;/li&gt;
&lt;li&gt;Use Gatsby Or Next.js For Simple Project And Learn About Them.&lt;/li&gt;
&lt;li&gt;Use Typescript With React.&lt;/li&gt;
&lt;li&gt;Learn About One Last Thing That Is Datafetching And Error Handling

&lt;ul&gt;
&lt;li&gt;use ReactQuery Or Swr For Datafetching And Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Feel Free To Comment About Your Opinions &amp;amp; Improvement In This List And Blog&lt;/em&gt; &lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>MLOps: Deploying Machine Learning Models with Docker and Google Cloud Platform (Part 2)</title>
      <author>Idowuilekura</author>
      <pubDate>Fri, 01 Oct 2021 08:35:42 +0000</pubDate>
      <link>https://dev.to/idowuilekura1/mlops-deploying-machine-learning-models-with-docker-and-google-cloud-platform-part-2-3024</link>
      <guid>https://dev.to/idowuilekura1/mlops-deploying-machine-learning-models-with-docker-and-google-cloud-platform-part-2-3024</guid>
      <description>&lt;ul&gt;
&lt;li&gt;
&lt;a href="#introduction"&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#model-deployment"&gt;&lt;strong&gt;Model Deployment&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#what-on-earth-is-flask"&gt;&lt;strong&gt;What on earth is Flask?&lt;/strong&gt;&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started-with-flask"&gt;&lt;strong&gt;Getting Started with Flask&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#getting-started-with-swagger"&gt;&lt;strong&gt;Getting Started with Swagger&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-machine-learning-model-with-flask-and-swagger"&gt;&lt;strong&gt;Deploying Machine Learning Model with Flask and Swagger&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#conclusion"&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="#reference-resources"&gt;&lt;strong&gt;Reference/ Resources&lt;/strong&gt;&lt;/a&gt;
&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Introduction&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;In the previous &lt;a href="https://dev.to/idowuilekura1/mlops-deploying-machine-learning-models-with-docker-and-google-cloud-platform-part-1-37m2"&gt;article&lt;/a&gt;, we learned about Machine Learning, the importance of Machine Learning Operations (MLOps) in the Machine Learning Lifecycle. We also learned how to frame a problem statement, gather required data, build a Machine Learning model, evaluate the model and save the model for future use. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this article, we will look into the process of deploying a Machine Learning Model with Flask and Swagger.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#model-deployment"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Model Deployment&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;We have already discussed Model Deployment in the previous article, but to give a recap. Model Deployment is the process of making Machine Learning models accessible to others through different interfaces like Websites, Mobile Phones, Embedded Systems e.t.c. &lt;br&gt;
Flask and Swagger will be used to deploy the model in this article, but what are Flask and Swagger?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#what-on-earth-is-flask"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What on earth is Flask?&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;According to Wikipedia &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Flask is simply a framework that helps python developers to build websites, without the need to learn Javascript. With flask, full-fledged websites can be built with python, HTML &amp;amp; CSS  &lt;/p&gt;
&lt;h5&gt;
  &lt;a href="#getting-started-with-flask"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Getting Started with Flask&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;Now that we understand the functionality of flask, let us dive into a practical example.&lt;br&gt;
You will need an Integrated Development Environment like &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt;, &lt;a href="https://pycharm-community-edition.en.softonic.com/download"&gt;PyCharm&lt;/a&gt; e.t.c to follow along. You will also need to install Flask, you can install Flask by navigating to your command prompt/terminal and type&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flask&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have the necessary tools to work with flask, let's dive into flask. We will write a simple program that will return your name with a greeting. The code below will &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the Flask class from the flask module&lt;/li&gt;
&lt;li&gt; Initialize a Flask() object with the name of the current file &lt;code&gt;__name__&lt;/code&gt;, &lt;code&gt;__name__&lt;/code&gt; will help python to locate where to load other dependencies into (in this case into our script). You can read this article from &lt;a href="https://stackoverflow.com/questions/39393926/flaskapplication-versus-flask-name#:~:text=1%20Answer&amp;amp;text=__name__%20is%20just,files%2C%20instance%20folder%2C%20etc."&gt;StackOverflow&lt;/a&gt; to understand the purpose of &lt;code&gt;__name__&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt; declare a variable to store my name(replace with your name)&lt;/li&gt;
&lt;li&gt; initialize a decorator, the decorator will be called when users click on the homepage URL of the website  (this is what is called when you click on &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt;). You can read this &lt;a href="https://www.datacamp.com/community/tutorials/decorators-python"&gt;article&lt;/a&gt; from Datacamp to learn more about Decorators.&lt;/li&gt;
&lt;li&gt;define a function that binds to the decorator (the decorator will return the function whenever it is called). The function can return a HTML File or just a text.&lt;/li&gt;
&lt;li&gt;write an if conditional statement that restricts the execution of the application to the current script(I.e if you import the script into another script the application won't run). You can read this &lt;a href="https://www.geeksforgeeks.org/what-does-the-if-__name__-__main__-do/#:~:text=if%20__name__%20%3D%3D%20%E2%80%9Cmain%E2%80%9D%3A%20is%20used%20to,run%20directly%2C%20and%20not%20imported."&gt;article&lt;/a&gt; from GeeksForGeeks to understand the importance of &lt;code&gt;if __name__== '__main__'&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Importing the Flask module from flask library
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;

&lt;span class="c1"&gt;# initializing our application with the name of our module
&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Variable to store my name( change to your name)
&lt;/span&gt;&lt;span class="n"&gt;my_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'idowu'&lt;/span&gt;

&lt;span class="c1"&gt;# Initializing the homepage route
&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="c1"&gt;# function that will be returned
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;my_name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Copy the code above and save it inside a file, you can name the file my_flask.py . Now navigate to where you saved the file using the command line, and type python my_flask.py.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;my_flask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or just by clicking on the run icon if you are using Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---dxZ347a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135066441-db79fa6c-41b1-44c6-97a6-e02577eda28e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---dxZ347a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135066441-db79fa6c-41b1-44c6-97a6-e02577eda28e.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 1 How to run python file with VSCode (Image by Author)&lt;/p&gt;

&lt;p&gt;After running the file either with the command line/terminal or with VSCode you will be presented with this screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--acM0vHQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135067355-dfd5fbfe-59e9-433d-824c-cb2c95643e49.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--acM0vHQN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135067355-dfd5fbfe-59e9-433d-824c-cb2c95643e49.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 2 Image displaying information about flask (Image by Author)&lt;/p&gt;

&lt;p&gt;Click on the link (&lt;a href="http://127.0.0.1:5000/),once"&gt;http://127.0.0.1:5000/),once&lt;/a&gt; you click on the link you will see the screen below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxgXGE0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135072139-4e8a7318-257b-4c89-bc83-506836e3ef35.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxgXGE0e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135072139-4e8a7318-257b-4c89-bc83-506836e3ef35.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig.3 Image showing the output of the greet function (Image by Author)&lt;/p&gt;

&lt;p&gt;When you clicked on the link (&lt;a href="http://127.0.0.1:5000/"&gt;http://127.0.0.1:5000/&lt;/a&gt;), flask automatically called the &lt;code&gt;@app.route('/')&lt;/code&gt; decorator, this is because you are trying to access the homepage (which is &lt;code&gt;/&lt;/code&gt;). The @app.route decorator will automatically call the &lt;code&gt;greet&lt;/code&gt; function and the output of the function will be returned. You will notice that, we hardcoded the variable name into our script, which is not intuitive. What if we want to accept the name from users and return &lt;code&gt;Hello + user_name&lt;/code&gt;, &lt;br&gt;
we can do this by creating another index for the name.&lt;br&gt;
We need to rewrite the programs in our script.&lt;br&gt;
The code below will &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bind a welcome function to the home route (&lt;code&gt;/&lt;/code&gt;) &lt;/li&gt;
&lt;li&gt;Bind a different function greet_name to the &lt;code&gt;/greet/name&lt;/code&gt; decorator. This decorator will allow users to insert their names ( this is similar to &lt;a href="http://www.google.com/search/query"&gt;www.google.com/search/query&lt;/a&gt;). &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt; is the home route url while &lt;code&gt;/search&lt;/code&gt; is for the search route.
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello welcome to my first flask website'&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/greet/&amp;lt;name&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello '&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Delete the previous codes in my_flask.py and copy the above code into my_flask.py (ensure you save the file)&lt;/p&gt;

&lt;p&gt;Now try to run &lt;code&gt;my_flask.py&lt;/code&gt; and click on the homepage url.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;python my_flask.py
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will be presented with the screen below&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vPG3Asfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135098506-fd19dad8-11de-4ad6-9d5c-78c94183e589.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vPG3Asfv--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135098506-fd19dad8-11de-4ad6-9d5c-78c94183e589.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 4 Home page of the website (Image by Author)&lt;/p&gt;

&lt;p&gt;Now, for users to insert their names, the users will need to add &lt;code&gt;/greet/their_name&lt;/code&gt; after the homepage url i.e (&lt;a href="http://127.0.0.1:5000/greet/their_username"&gt;http://127.0.0.1:5000/greet/their_username&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;While still on the homepage, try and add &lt;code&gt;/greet/your_name[replace with your name]&lt;/code&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSJ0NXqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135100295-ee41b9b9-31c0-4750-92ec-8e7ef79c6946.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZSJ0NXqs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135100295-ee41b9b9-31c0-4750-92ec-8e7ef79c6946.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 5 Image showing the response from greet route&lt;/p&gt;

&lt;p&gt;You will agree with me that this process is quite tedious. What if we can have an interface that accepts responses from a form, sends the responses to flask and return the responses. To achieve this, we can build a form with HTML that accepts parameters. Luckily, instead of writing a HTML program, we can leverage the Swagger module to do that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Swagger allows you to describe the structure of your APIs so that machines can read them. The ability of APIs to describe their own structure is the root of all awesomeness in Swagger. Why is it so great? Well, by reading your API’s structure, we can automatically build beautiful and interactive API documentation.&lt;br&gt;
&lt;a href="https://swagger.io/docs/specification/2-0/what-is-swagger/"&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;
  &lt;a href="#getting-started-with-swagger"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Getting Started with Swagger&lt;/strong&gt;
&lt;/h5&gt;

&lt;p&gt;You will need to install flasgger module, which can be done with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;flasgger&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code below will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Import the request and Flask module from flask. &lt;/li&gt;
&lt;li&gt;Import swagger from flasgger&lt;/li&gt;
&lt;li&gt;Initialize the Flask object &lt;/li&gt;
&lt;li&gt;Wrap the flask object application with Swagger. This helps our application to inherit properties from Swagger.&lt;/li&gt;
&lt;li&gt;create a decorator for our homepage url&lt;/li&gt;
&lt;li&gt;create a decorator for our greet url. If you notice we have something different from what we have been defining previously. The &lt;code&gt;@app.route()&lt;/code&gt; decorator for the greet url takes in a methods parameter with the value Get. There are two major methods that &lt;code&gt;@app.route&lt;/code&gt; receives

&lt;ul&gt;
&lt;li&gt;The Get Method (The get method is used when you want to receive something, when you navigate to &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt; you are indirectly calling the Get method to return the HTML file for the homepage)&lt;/li&gt;
&lt;li&gt;The Post Method is used to send information to a server. You can read this &lt;a href="https://www.geeksforgeeks.org/get-post-requests-using-python/"&gt;article&lt;/a&gt; from GeeksforGeeks to learn more about Post and Get Methods.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;Inside the &lt;code&gt;greet_name()&lt;/code&gt; function, you will have to use docstring to define the Swagger interface. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The interface expects the;&lt;/li&gt;
&lt;li&gt;title of the query&lt;/li&gt;
&lt;li&gt;information about the query&lt;/li&gt;
&lt;li&gt;parameters that will be inputted. The parameter fields expects

&lt;ul&gt;
&lt;li&gt;the name of the field&lt;/li&gt;
&lt;li&gt;the mode in which the parameter will be entered, it can be manually inserted as values(query) or by inserting a path to the value.&lt;/li&gt;
&lt;li&gt;the type of the parameter ( it can be an integer or string)&lt;/li&gt;
&lt;li&gt;if the parameter is compulsory or not( if it is required then the parameter can't be omitted) &lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;the responses. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;N.B&lt;/em&gt; Make sure you indent the docstring with four spaces, also you will need to indent the details under the parameters and responses else swagger won't render the display.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;To access the user_name under the parameters, you will need to use the request module to access the parameter&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, you can return the greeting and the user_name.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Copy the code below into my_flask.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flasgger&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Swagger&lt;/span&gt; 
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello, welcome to my first flask website'&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/greet'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Get"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet_name&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Greetings
    This is using docstrings for specifications.
    ---
    parameters:
        - name: user_name
          in: query
          type: string
          required: true
    responses:
      200:
         description: "greetings with user's name"
    """&lt;/span&gt;

    &lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user_name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;"Hello "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;user_name&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, try to run my_flask.py with&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;my_flask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MXNAz6mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135226479-150500d8-8e41-46e9-80d2-33d2eb986939.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MXNAz6mC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135226479-150500d8-8e41-46e9-80d2-33d2eb986939.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 6 Image showing the homepage (Image by Author)&lt;/p&gt;

&lt;p&gt;To access the Swagger User Interface, append &lt;code&gt;/apidocs&lt;/code&gt; after the homepage url i.e &lt;code&gt;http://127.0.0.1:5000/apidocs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--e7zYPRCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227423-a33e3573-1585-4c68-8169-3701cb696601.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--e7zYPRCX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227423-a33e3573-1585-4c68-8169-3701cb696601.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 7 Image showing the Swagger UI (Image by Author)&lt;/p&gt;

&lt;p&gt;To interact with the UI, click on the GET button, which will present you with this screen &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 8 Image showing the UI under the GET button. &lt;/p&gt;

&lt;p&gt;If you notice, you can't insert any parameter inside the user_name, to insert value into the user_name field you will need to click on the Try it out button. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s8y2Do4P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135227925-9fa390c7-f847-48c8-add8-7a6937adf95c.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can now insert any name into the user_name field and once you are click on the &lt;code&gt;Execute&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FLUKMEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135229761-36f5881f-f2bd-4072-aac4-be759ac5c752.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FLUKMEC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135229761-36f5881f-f2bd-4072-aac4-be759ac5c752.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 9 Image showing the Response &lt;/p&gt;

&lt;p&gt;The response body display's the response from the greet function. Now that we have all the prerequisite for deploying our model, we can move n to cracking our main task which is to deploy a house price prediction model for Mowaale. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#deploying-machine-learning-models-with-flask-and-swagger"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Deploying Machine Learning Models with Flask and Swagger&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;To successfully deploy the model, we will need to build a simple pipeline that will receive users inputs and make prediction.&lt;br&gt;
We need to rewrite our Swagger program, to accommodate more information.&lt;br&gt;
The code below will&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;import Flask &amp;amp; request from flask&lt;/li&gt;
&lt;li&gt;import Swagger from flasgger&lt;/li&gt;
&lt;li&gt;import joblib(this will be useful later)&lt;/li&gt;
&lt;li&gt;load the previously saved label-encoder for sale condition and save into lb_salecond variable &lt;/li&gt;
&lt;li&gt;load the previously saved label-encoder for sale type and save into lb_saletype variable&lt;/li&gt;
&lt;li&gt;load the previously saved linear regression model and save into model variable&lt;/li&gt;
&lt;li&gt;Initialize our Flask application object&lt;/li&gt;
&lt;li&gt;Wrap the application object with Swagger &lt;/li&gt;
&lt;li&gt;define a route for the homepage.&lt;/li&gt;
&lt;li&gt;define another route for the predict_price index.&lt;/li&gt;
&lt;li&gt;define the name of each parameters and other information that was discussed previously. The default is to specify a default parameter and the enum is to create a dropdown list of values.&lt;/li&gt;
&lt;li&gt;use the request module to get each parameters that was inputted.&lt;/li&gt;
&lt;li&gt;transform the salecondition from a string to a number (this was discussed in part 1)&lt;/li&gt;
&lt;li&gt;transform the sale type from a string it a number.&lt;/li&gt;
&lt;li&gt;store all the parameters into a list&lt;/li&gt;
&lt;li&gt;use the model to make predictions and return the predicted price for the house.
Copy the code into my_flask.py
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flasgger&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Swagger&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;joblib&lt;/span&gt; 
&lt;span class="n"&gt;lb_salecond&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lb_sc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;lb_saletype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lb_st'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;joblib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'lr_model'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Swagger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'Hello welcome to my first flask website'&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'Normal'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Partial'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Abnorml'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Family'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Alloca'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'AdjLand'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'/predict_price'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Get"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;predict_prices&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="s"&gt;"""Welcome to Moowale House Prediction Website
    This is using docstrings for specifications.
    ---
    parameters:
        - name: MSSubClass
          in: query
          type: integer
          required: true
        - name: LotFrontage
          in: query
          type: integer
          required: true
        - name: Year_sold
          in: query
          type: integer
          required: true
        - name: Sale_type
          in: query
          type: string
          required: true
          default: New
          enum: ['WD', 'New', 'COD', 'ConLD', 'ConLI', 'ConLw', 'CWD', 'Oth', 'Con']
        - name: Sale_condition
          in: query
          type: string
          default: Normal
          enum: ['Normal', 'Partial', 'Abnorml', 'Family', 'Alloca', 'AdjLand']
    responses:
      200:
         description: House Price Prediction
    """&lt;/span&gt;

    &lt;span class="n"&gt;mssubclass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"MSSubClass"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lotfrontage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"LotFrontage"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;year_sold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Year_sold"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;saletype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sale_type"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;salecondition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sale_condition"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;label_encode_sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lb_salecond&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;salecondition&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;label_encode_st&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lb_saletype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;saletype&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;columns_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mssubclass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lotfrontage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;year_sold&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label_encode_sc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;label_encode_st&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;columns_list&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s"&gt;'The predicted price is $&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;:.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Run my_flask.py,click on the url and attach &lt;code&gt;/apidocs&lt;/code&gt; after the homepage url. You will see the screen below,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--I7nY3AyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135260572-c54e24f5-6a57-4adc-98f9-94d6af7ce503.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--I7nY3AyV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135260572-c54e24f5-6a57-4adc-98f9-94d6af7ce503.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig. 10 Image showing the UI of moowale (Image by Author) &lt;/p&gt;

&lt;p&gt;Click on Try it out, and insert these values for MSSUbClass insert 20, for Lotfrontage insert 80, for Year_sold insert 2007, for Sale type &amp;amp; SaleCondition leave as the default and click on Execute.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeF9NGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135262953-c9f028e6-eec0-48f8-9371-012a5651a94d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sOeF9NGN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/38056084/135262953-c9f028e6-eec0-48f8-9371-012a5651a94d.png" alt="image"&gt;&lt;/a&gt;&lt;br&gt;
Fig.11 Image showing the prediction (Image by Author)&lt;/p&gt;

&lt;p&gt;Now that we have our model deployed, we have come to the end of the second article in this series.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Conclusion&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;This article has introduced you to the process of deploying machine learning models with flask and building interactive visuals with Swagger. In part 3 of this series, you will learn how to containerize the Api with Docker and Deploy on Google Cloud Platform. &lt;br&gt;
You can connect with me on &lt;a href="https://www.linkedin.com/in/ilekuraidowu/"&gt;Linkedin&lt;/a&gt;  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#reference-resources"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Reference/ Resources&lt;/strong&gt;
&lt;/h4&gt;

&lt;p&gt;Video from Krish Naik &lt;a href="https://www.youtube.com/watch?v=8vNBW98LbfI&amp;amp;list=PLZoTAELRMXVNKtpy0U_Mx9N26w8n0hIbs&amp;amp;index=3"&gt;channel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/flasgger/flasgger"&gt;Flasgger&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>devops</category>
      <category>python</category>
      <category>googlecloud</category>
    </item>
    <item>
      <title>Introduction to Flutter</title>
      <author>Baransel</author>
      <pubDate>Fri, 01 Oct 2021 08:17:08 +0000</pubDate>
      <link>https://dev.to/baransel/introduction-to-flutter-263p</link>
      <guid>https://dev.to/baransel/introduction-to-flutter-263p</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-flutter"&gt;
  &lt;/a&gt;
  What is Flutter?
&lt;/h3&gt;

&lt;p&gt;Flutter is a framework developed by Google. It is used to develop applications on cross-platform. So our application we wrote with Flutter; web and performs on both ios and android devices. In other words, we can have an application that can run on many platforms with a single code. In this way, we can save both cost and time. Google first used Flutter when developing the &lt;strong&gt;&lt;em&gt;&lt;a href="https://fuchsia.dev/" rel="nofollow"&gt;Fuschia&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; operating system.&lt;/p&gt;

&lt;p&gt;Flutter doesn't work with any development tools, but includes editor plugins for &lt;strong&gt;Visual Studio Code&lt;/strong&gt; and &lt;strong&gt;IntelliJ/Android Studio&lt;/strong&gt;. It is also open source. You can review their code on &lt;em&gt;&lt;strong&gt;&lt;a href="https://github.com/flutter/flutter" rel="nofollow"&gt;GitHub&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;, and you can contribute by adding code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-flutter"&gt;
  &lt;/a&gt;
  Why Flutter?
&lt;/h3&gt;

&lt;p&gt;Continue this post on my blog! &lt;a href="https://baransel.dev/post/what-is-flutter/"&gt;Introduction to Flutter&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Getting started with Laravel and Vue js</title>
      <author>John Wanjema</author>
      <pubDate>Fri, 01 Oct 2021 08:15:58 +0000</pubDate>
      <link>https://dev.to/1njema/getting-started-with-laravel-and-vue-js-2hc6</link>
      <guid>https://dev.to/1njema/getting-started-with-laravel-and-vue-js-2hc6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#ever-wondered-how-to-setup-vue-in-your-laravel-project"&gt;
  &lt;/a&gt;
  Ever wondered how to setup Vue in your laravel project.
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvAAScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmtm25h4rb9sgsw3505z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FpvAAScs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rmtm25h4rb9sgsw3505z.png" alt="laravel and vue js"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  Laravel
&lt;/h2&gt;

&lt;p&gt;Laravel is a web application framework with expressive, elegant syntax. We’ve already laid the foundation — freeing you to create without sweating the small things.&lt;br&gt;
Here is a link to their Documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#laravel"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x"&gt;Laravel&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#vue"&gt;
  &lt;/a&gt;
  Vue
&lt;/h2&gt;

&lt;p&gt;Vue.js is a progressive, incrementally-adoptable JavaScript framework for building UI on the web.&lt;br&gt;
Here is the link to their documentation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#vue-js"&gt;
  &lt;/a&gt;
  &lt;a href="https://vuejs.org/"&gt;Vue js&lt;/a&gt;
&lt;/h3&gt;

&lt;h2&gt;
  &lt;a href="#why-use-laravel-with-vue"&gt;
  &lt;/a&gt;
  Why use Laravel with Vue
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#streamline-the-development-process"&gt;
  &lt;/a&gt;
  Streamline the Development Process
&lt;/h3&gt;

&lt;p&gt;This structure allows for one to be a full stack developer within a single project&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#singlepage-application-development"&gt;
  &lt;/a&gt;
  Single-Page Application Development
&lt;/h3&gt;

&lt;p&gt;Both Vue js and Laravel support single page applications.This allows the application assets get loaded once, all that your application does as the user engages with it is request data which typically requires low bandwidth to fulfill.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#building-optimal-complex-frontend-pages"&gt;
  &lt;/a&gt;
  Building Optimal Complex Front-end Pages
&lt;/h3&gt;

&lt;p&gt;With Vuejs a developer does not need to use jquery to manipulate blade templates.Vue allows for easier managment of DOM using a virtual Dom.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#easy-to-learn-and-use"&gt;
  &lt;/a&gt;
  Easy to Learn and Use
&lt;/h3&gt;

&lt;p&gt;Both Laravel and Vue have a robust documentation that is easy to learn and integrate.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#first-ensure-that-laravel-is-installed"&gt;
  &lt;/a&gt;
  First ensure that Laravel is installed.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#here-is-link-to-install-laravel-if-you-havent"&gt;
  &lt;/a&gt;
  Here is link to install Laravel if you haven't.
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#laravel-8-installation"&gt;
  &lt;/a&gt;
  &lt;a href="https://laravel.com/docs/8.x/installation"&gt;Laravel 8 Installation&lt;/a&gt;
&lt;/h4&gt;

&lt;h2&gt;
  &lt;a href="#create-a-laravel-project"&gt;
  &lt;/a&gt;
  Create a laravel project
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer create-project laravel/laravel laravel-vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#scaffolding-vue-js"&gt;
  &lt;/a&gt;
  Scaffolding Vue js
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-laravelui-package"&gt;
  &lt;/a&gt;
  Install laravel/ui package
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;composer require laravel/ui
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#install-the-frontend-scaffolding-using-the-ui-artisan-command"&gt;
  &lt;/a&gt;
  Install the frontend scaffolding using the ui Artisan command
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#basic-scaffolding"&gt;
  &lt;/a&gt;
  Basic scaffolding
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan ui vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#generate-auth-scaffolding"&gt;
  &lt;/a&gt;
  Generate Auth scaffolding.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;php artisan ui vue
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#compile-your-fresh-scaffolding"&gt;
  &lt;/a&gt;
  Compile your fresh scaffolding.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#configure-blade"&gt;
  &lt;/a&gt;
  Configure Blade
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#import-appjs-and-add-app-id"&gt;
  &lt;/a&gt;
  Import app.js and add app id
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;doctype html&amp;gt;
&amp;lt;html &lt;span class="nv"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ str_replace('_', '-', app()-&amp;gt;getLocale()) }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"viewport"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"width=device-width, initial-scale=1"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; CSRF Token &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;meta &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"csrf-token"&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ csrf_token() }}"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;title&amp;gt;Laravel Vue&amp;lt;/title&amp;gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Scripts &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;script &lt;span class="nv"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ asset('js/app.js') }}"&lt;/span&gt; defer&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Fonts &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"//fonts.gstatic.com"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"https://fonts.googleapis.com/css?family=Nunito"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;--&lt;/span&gt; Styles &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &amp;lt;&lt;span class="nb"&gt;link &lt;/span&gt;&lt;span class="nv"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"{{ asset('css/app.css') }}"&lt;/span&gt; &lt;span class="nv"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"stylesheet"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"app"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &amp;lt;main &lt;span class="nv"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"py-3"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
            &amp;lt;h3&amp;gt;Laravel Vue&amp;lt;/h3&amp;gt;
            &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
        &amp;lt;/main&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-vue-components"&gt;
  &lt;/a&gt;
  Add Vue components
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#add-new-vuejs-file-in-resourcesjscomponents-called-appvue-and-add-the-following-code"&gt;
  &lt;/a&gt;
  Add new vue.js file in resources/js/components called app.vue and add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &lt;span class="o"&gt;{{&lt;/span&gt;message&lt;span class="o"&gt;}}&lt;/span&gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&amp;lt;script&amp;gt;
&lt;span class="nb"&gt;export &lt;/span&gt;default &lt;span class="o"&gt;{&lt;/span&gt;
    data&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            message: &lt;span class="s1"&gt;'Hello World'&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#setup-vue-router"&gt;
  &lt;/a&gt;
  Setup Vue router
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#install-vue-router"&gt;
  &lt;/a&gt;
  Install Vue router
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install vue-router --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#create-a-routes-folder-and-add-a-homejs-fileadd-the-following-code"&gt;
  &lt;/a&gt;
  Create a routes folder and add a home.js file.Add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const home = () =&amp;gt;import ( '../components/app.vue')

export default [
    {
        path: '/home',
        component: home,
        name: 'home',
    },
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#head-over-to-the-resourcesjs-folder-and-create-a-file-called-routesjs-and-add-the-following-code"&gt;
  &lt;/a&gt;
  Head over to the resources/js folder and create a file called routes.js and add the following code.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import Vue from 'vue'
import VueRouter from 'vue-router'
import home from './routes/home';

Vue.use(VueRouter);
export default new VueRouter({
    mode: 'history',
    scrollBehavior: (to, from, savedPosition) =&amp;gt; ({ y: 0 }), 
    routes: [
        ...home,
    ],
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#add-routes-to-appjs"&gt;
  &lt;/a&gt;
  Add routes to app.js
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#replace-the-code-in-your-resourcesjsappjs-with-the-code-below"&gt;
  &lt;/a&gt;
  Replace the code in your resources/js/app.js with the code below.
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;require('./bootstrap');
require('../sass/app.scss')
import Vue from 'vue'

window.Vue = require('vue');

// router
import router from './routes.js';
window.router = router;
window.Fire = new Vue();

const app = new Vue({
    el: '#app',
    router,
}).$mount('#app');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#setup-laravel-routes"&gt;
  &lt;/a&gt;
  Setup Laravel routes
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#update-laravel-routes-in-webphp"&gt;
  &lt;/a&gt;
  Update Laravel routes in web.php
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Route::get('/{any?}', [
    function () {
        return view('welcome');
    }
])-&amp;gt;where('any', '.*');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#run-the-application"&gt;
  &lt;/a&gt;
  Run the application
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#start-laravel-app"&gt;
  &lt;/a&gt;
  Start Laravel app
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;php artisan serve
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#compile-components"&gt;
  &lt;/a&gt;
  Compile components
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#access-the-application-at-localhost8000"&gt;
  &lt;/a&gt;
  Access the application at localhost:8000
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#open-localhost8000"&gt;
  &lt;/a&gt;
  Open &lt;a href="http://localhost:8000/"&gt;localhost:8000&lt;/a&gt;
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#link-to-github-repo"&gt;
  &lt;/a&gt;
  Link to Github repo.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#github-repository"&gt;
  &lt;/a&gt;
  &lt;a href="https://github.com/johnwanjema/Getting-startes-with-Laravel-and-Vue-js"&gt;Github repository&lt;/a&gt;
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy coding
&lt;/h3&gt;

</description>
      <category>laravel</category>
      <category>vue</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Building a Chrome Extension in Minutes</title>
      <author>Saji Wang</author>
      <pubDate>Fri, 01 Oct 2021 07:52:35 +0000</pubDate>
      <link>https://dev.to/codesphere/building-a-chrome-extension-in-minutes-3662</link>
      <guid>https://dev.to/codesphere/building-a-chrome-extension-in-minutes-3662</guid>
      <description>&lt;p&gt;Ever wondered how you can build your own Chrome Extension? It's not as hard as you might think!&lt;/p&gt;

&lt;p&gt;In this tutorial, we'll create a simple Chrome Extension that converts all the text on a webpage into comic sans. Why would you ever want to do that? Because some people just like to see the world burn.&lt;/p&gt;

&lt;p&gt;Let's get started!&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#setting-up-our%C2%A0manifest"&gt;
  &lt;/a&gt;
  Setting up Our Manifest
&lt;/h3&gt;

&lt;p&gt;First, let's create an empty folder to house the contents of our extension. The minimum necessary file to define your extension is your manifest, which tells Chrome the defining characteristics of your extension.&lt;/p&gt;

&lt;p&gt;Create a file in your folder called &lt;code&gt;manifest.json&lt;/code&gt; and fill it with the following fields:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Let's go over what the non-straightforward ones mean:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Manifest_version&lt;/strong&gt;: You're most likely going to want to put 3, but in case you might need to have your manifest in a different format you can check out the other Manifest versions that Chrome accepts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;: Here you can put scripts that run in the background of your extension&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Permissions&lt;/strong&gt;: These are the APIs that you are accessing with your extension. Here we are going to use &lt;em&gt;storage&lt;/em&gt;, to store persistent data, &lt;em&gt;activeTab&lt;/em&gt;, to check the active tab, and &lt;em&gt;scripting&lt;/em&gt;, to run operations on our active tab&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Action&lt;/strong&gt;: Here you can put different types of components of your extension. For this example, we are just going to create a popup menu, and tell Chrome to grab the popup menu from &lt;code&gt;popup.html&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#the-code"&gt;
  &lt;/a&gt;
  The Code
&lt;/h3&gt;

&lt;p&gt;The first part of this is by no means necessary, but I think it's helpful to show you how persistent data storage and background scripts work. Let's create a file called &lt;code&gt;background.js&lt;/code&gt;.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Next, let's create our &lt;code&gt;popup.html&lt;/code&gt; file. You can of course create a separate CSS file, but for simplicity's sake, we'll just use style tags.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;Finally, let's actually do the conversion to Comic Sans when the button is pressed. Create a &lt;code&gt;popup.js&lt;/code&gt; file with the following code:&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;And there you have it! The next step is loading it into Chrome.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#using-our-extension"&gt;
  &lt;/a&gt;
  Using Our Extension
&lt;/h3&gt;

&lt;p&gt;Loading our extension into chrome couldn't be easier. Go to the extensions menu with the url:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chrome://extensions/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make sure developer mode is enabled (can be done in the top right corner), and then press "Load unpacked".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ReIZGKrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/641jfkygw95jvd7490v9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ReIZGKrK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/641jfkygw95jvd7490v9.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;From there, you can select the folder where all of our extension files are, and the extension will be loaded in!&lt;/p&gt;

&lt;p&gt;We can now use it like so:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DQE1f26o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gygftv2fu0iuc53e8rq.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DQE1f26o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gygftv2fu0iuc53e8rq.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uploading-to-the-chrome%C2%A0store"&gt;
  &lt;/a&gt;
  Uploading to the Chrome Store
&lt;/h3&gt;

&lt;p&gt;Getting your app in the public Chrome store is a whole different ordeal, that Chrome documents very well. You can learn more about that here:&lt;br&gt;
&lt;a href="https://developer.chrome.com/docs/webstore/publish/"&gt;https://developer.chrome.com/docs/webstore/publish/&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;

&lt;p&gt;So what extension are you going to make? At Codesphere, we actually just released an extension that allows you to open a Github repo in Codesphere straight from Github. You can check it out &lt;a href="https://chrome.google.com/webstore/detail/open-in-codesphere/ckanolmgmldllabkgmnalmgjhihohhog?hl=en-US"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--luDUHHHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58l1wpxx3pm9jkmdemfu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--luDUHHHd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/58l1wpxx3pm9jkmdemfu.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading! Happy Coding from your good friends at &lt;a href="https://link.codesphere.com/EE"&gt;Codesphere&lt;/a&gt;, the next-generation cloud platform.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>programming</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Django Channels - A Simple Chat App Part 2</title>
      <author>Hannah</author>
      <pubDate>Fri, 01 Oct 2021 07:50:53 +0000</pubDate>
      <link>https://dev.to/earthcomfy/django-channels-a-simple-chat-app-part-2-eh9</link>
      <guid>https://dev.to/earthcomfy/django-channels-a-simple-chat-app-part-2-eh9</guid>
      <description>&lt;p&gt;Hello guys. In the last part of the tutorial we created the index view that allows users to type in the chat room they want to join. Buckle up since we are going to continue from where we left off.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#channel-layer"&gt;
  &lt;/a&gt;
  Channel Layer
&lt;/h3&gt;

&lt;p&gt;The basic feature of a modern chat app is that messages are sent and received in &lt;strong&gt;real-time&lt;/strong&gt;. Imagine what a bad UX and storage unfriendly it would be to store these messages in a database before sending them to the other client! Querying the database every time you need to get your messages is inefficient. Real-time chat apps don't do this, but this doesn't mean they don't use any kind of transport mechanism to pass messages from senders to receivers.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Django Channels use something called a &lt;strong&gt;channel layer&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Channel layers allow you to talk between different instances of an application. They’re a useful part of making a distributed real-time application if you don’t want to have to shuttle all of your messages or events through a database.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means that channel layers are the middle man that passes messages from senders to receivers. To achieve this functionality channels provide two options to use as layers; &lt;code&gt;channels_redis&lt;/code&gt; and &lt;code&gt;InMemoryChannelLayer&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Even though I'm going to use the &lt;code&gt;InMemoryChannelLayer&lt;/code&gt; as a channel layer for the chat app, I'll show you how you can set up &lt;code&gt;channels_redis&lt;/code&gt; as well.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#configuration-using-raw-channelsredis-endraw-"&gt;
  &lt;/a&gt;
  Configuration Using &lt;code&gt;channels_redis&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;channels_redis&lt;/code&gt; is an officially maintained channel layer that uses Redis as its backing store. &lt;/p&gt;

&lt;p&gt;For those of you who don't know what Redis is let me explain it a bit here.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#redis"&gt;
  &lt;/a&gt;
  Redis
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Redis is an open source, in-memory data structure store, used as a database, cache, and message broker.&lt;/li&gt;
&lt;li&gt;Redis stores data in memory for high performance data retrieval and storage purposes.&lt;/li&gt;
&lt;li&gt;Retrieving data from a database upon request might take some time leading to a bad UX. Redis comes into play to solve this problem. Instead of querying from the database directly, we can store data inside of a redis cache instance and make retrieval directly from memory of a server that's running the redis service.&lt;/li&gt;
&lt;li&gt;Using Redis we can save chat messages in a queue before sending them to the receiver.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;channels_redis&lt;/code&gt; uses Redis as its backing store.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How can we set this up?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;First you need to install Redis. There are different ways to do this depending on the operating system you are using. For this you can check out the &lt;a href="https://redis.io/topics/quickstart"&gt;official documentation&lt;/a&gt; and google your way through it.&lt;/p&gt;

&lt;p&gt;Next, install the &lt;code&gt;channels_redis&lt;/code&gt; package in the chat app so that Django channels knows how to interface with redis.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
pip install channels_redis

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, channel layers are configured via the CHANNEL_LAYERS Django setting so head over to the chat app's settings and add the following.&lt;/p&gt;

&lt;p&gt;settings.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;CHANNEL_LAYERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"BACKEND"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"channels_redis.core.RedisChannelLayer"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"CONFIG"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;"hosts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s"&gt;"127.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Redis is running on localhost (127.0.0.1) port 6379:&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#configuration-using-raw-inmemorychannellayer-endraw-"&gt;
  &lt;/a&gt;
  Configuration Using &lt;code&gt;InMemoryChannelLayer&lt;/code&gt;
&lt;/h3&gt;

&lt;p&gt;For testing and in local development, we can alternatively use the channels &lt;strong&gt;in-memory layer&lt;/strong&gt;, but you shouldn't use this layer in production because:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In-memory channel layers operate with each process as a separate layer. This means that no cross-process messaging is possible. As the core value of channel layers is to provide distributed messaging, in-memory usage will result in sub-optimal performance, and ultimately data-loss in a multi-instance environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;How can we set this up?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;settings.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;CHANNEL_LAYERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"default"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"BACKEND"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"channels.layers.InMemoryChannelLayer"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Since we are on development phase and we are building a very simple chat app, am going to use the second method which doesn't require Redis.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Alright, now that we are done setting the channel layer let's proceed to the next part.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#creating-the-room-view"&gt;
  &lt;/a&gt;
  Creating the room view
&lt;/h3&gt;

&lt;p&gt;As we talked about in the last part, the room view is the view that lets users in the same connection to see messages posted in that chat room. It uses a WebSocket to communicate with the Django server and listen for any messages that are posted.&lt;/p&gt;

&lt;p&gt;Alright, let's first create the route for this view.&lt;/p&gt;

&lt;p&gt;chat/urls.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'&amp;lt;str:room_name&amp;gt;/'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;room&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'room'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Since we want part of the URL which is the &lt;code&gt;room_name&lt;/code&gt; to be used in a view function, we captured it as you can see from the above code. The url parameter (&lt;code&gt;room_name&lt;/code&gt;) is only captured if the provided value matches the given path converter which is &lt;code&gt;str&lt;/code&gt; for string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We haven't created the room view yet, so let's go ahead and do that to handle the logic.&lt;/p&gt;

&lt;p&gt;views.py&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;room&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;room_name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'chat/room.html'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'room_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;room_name&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;In the above view function, we added an additional parameter called &lt;code&gt;room_name&lt;/code&gt; which is the parameter passed by the url. It's important to note that the names of url parameters must match the names of the view method arguments.&lt;/li&gt;
&lt;li&gt;Now that the view method has access to the url parameter - &lt;code&gt;room_name&lt;/code&gt;, it will pass it to the room template for presentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore, within the templates directory of our chat app, create a file named room.html and add the following.&lt;/p&gt;

&lt;p&gt;room.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;!&lt;/span&gt;&lt;span class="nx"&gt;DOCTYPE&lt;/span&gt; &lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;html&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;meta&lt;/span&gt; &lt;span class="nx"&gt;charset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;utf-8&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Chat&lt;/span&gt; &lt;span class="nx"&gt;Room&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/title&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/head&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;textarea&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chat-log&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;cols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;rows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/textarea&amp;gt;&amp;lt;br&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chat-message-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;100&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;br&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;chat-message-submit&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Send&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;room_name&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="na"&gt;json_script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;room-name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;room-name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;chatSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ws://&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/ws/chat/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;roomName&lt;/span&gt;
            &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// onmessage - An event listener to be called when a message is received from the server.&lt;/span&gt;
        &lt;span class="nx"&gt;chatSocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onmessage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// JSON.parse() converts the JSON object back into the original object,&lt;/span&gt;
            &lt;span class="c1"&gt;// then examine and act upon its contents.&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#chat-log&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="c1"&gt;// onclose - An event listener to be called when the connection is closed.&lt;/span&gt;
        &lt;span class="nx"&gt;chatSocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onclose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Chat socket closed unexpectedly&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#chat-message-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#chat-message-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onkeyup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="c1"&gt;// enter, return&lt;/span&gt;
                &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#chat-message-submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#chat-message-submit&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;onclick&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;messageInputDom&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#chat-message-input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;messageInputDom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

            &lt;span class="c1"&gt;// Send the msg object as a JSON-formatted string.&lt;/span&gt;
            &lt;span class="nx"&gt;chatSocket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;
            &lt;span class="p"&gt;}));&lt;/span&gt;

            &lt;span class="c1"&gt;// Blank the text input element, ready to receive the next line of text from the user.&lt;/span&gt;
            &lt;span class="nx"&gt;messageInputDom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/body&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/html&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Let me explain what's going on in the above code. First the template captures the &lt;code&gt;room_name&lt;/code&gt; that is passed to it by the view. The template filter &lt;code&gt;json_script&lt;/code&gt; outputs the Python object (&lt;code&gt;room_name&lt;/code&gt;) as JSON inside of our script.&lt;/li&gt;
&lt;li&gt;Next we parsed the JSON object &lt;code&gt;room-name&lt;/code&gt; and created a WebSocket connection within that room &lt;code&gt;ws://127.0.0.1:8000/ws/chat/room-name/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then we attached different even listeners on the WebSocket object. We have seen this in my last &lt;a href="https://dev.to/earthcomfy/getting-started-with-django-channels-a-simple-chat-app-2a7m"&gt;article&lt;/a&gt; and I've explained them in comments too.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Time too run the development server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
python manage.py runserver

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfTj7E5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exhs88rormneydfvzn82.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfTj7E5w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/exhs88rormneydfvzn82.gif" alt="Run Server"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="http://127.0.0.1:8000/chat/"&gt;http://127.0.0.1:8000/chat/&lt;/a&gt; in your browser. You will be presented with the index page we created in the previous part of the series. Type in the room and press enter.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a2Nam_Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czda181gc8w7wn3qmti0.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a2Nam_Fp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czda181gc8w7wn3qmti0.PNG" alt="Index Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You will be redirected to &lt;code&gt;http://127.0.0.1:8000/chat/hannah/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XM-SVePK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhl84cnpi6obmy4p273a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XM-SVePK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhl84cnpi6obmy4p273a.PNG" alt="Room Page"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Type any message you want and press enter.&lt;/p&gt;

&lt;p&gt;Nothing happens right? But don't freak out. The room view opened a web socket connection but we haven’t created a consumer that accepts WebSocket connections yet which is why nothing is displayed. If you open the JavaScript console, you will see the error.&lt;/p&gt;

&lt;p&gt;That being said, to fix this issue we will write a consumer that will accept WebSocket connection, but that's to be done in an upcoming tutorial, so stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Reference - &lt;a href="https://channels.readthedocs.io/en/stable/"&gt;https://channels.readthedocs.io/en/stable/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Till next time 👋&lt;/em&gt;&lt;/p&gt;

</description>
      <category>python</category>
      <category>django</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How I landed a job at Daily.dev</title>
      <author>Chris Bongers</author>
      <pubDate>Fri, 01 Oct 2021 07:49:22 +0000</pubDate>
      <link>https://dev.to/dailydevtips1/how-i-landed-a-job-at-daily-dev-50ii</link>
      <guid>https://dev.to/dailydevtips1/how-i-landed-a-job-at-daily-dev-50ii</guid>
      <description>&lt;p&gt;You read it right. I got a new job!&lt;br&gt;
I'm now a software engineer at &lt;a href="http://daily.dev/"&gt;daily.dev&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I decided to write this article about getting hired and how it all came to be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-before"&gt;
  &lt;/a&gt;
  The before
&lt;/h2&gt;

&lt;p&gt;Let's first take some time to sketch my previous job.&lt;br&gt;
I was a senior full-stack developer working in the healthcare sector. Mainly focused on building apps (web/mobile) with PHP backends.&lt;/p&gt;

&lt;p&gt;And I really loved doing it!&lt;/p&gt;

&lt;p&gt;However, I also really like writing articles, being an active community member, and developing in general.&lt;/p&gt;

&lt;p&gt;It's the 5th of August, and daily.dev posted a job ad on Twitter, saying they were searching for a dev advocate.&lt;/p&gt;

&lt;p&gt;It sounded like the exact thing I was looking for. However, I knew I had no experience being an advocate.&lt;br&gt;
What I do have is years of experience in development and a major interest in being one.&lt;/p&gt;

&lt;p&gt;Besides that, I love their product. I've written about it, written for them, and I enjoy what they are doing for the developer community.&lt;/p&gt;

&lt;p&gt;So I applied for the job!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-waiting-game"&gt;
  &lt;/a&gt;
  The waiting game
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sEpQ4M9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1513530534585-c7b1394c6d51%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1471%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sEpQ4M9Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1513530534585-c7b1394c6d51%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1471%26q%3D80" alt="Man waiting for results"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Seeing as I wasn't too sure if the job I applied for would fit me, I had a chat with my boss at the time, and we discussed my current contract.&lt;/p&gt;

&lt;p&gt;He offered me a permanent contract, which was amazing!&lt;br&gt;
I was over the moon as this gives one so much stability and recognition for the hard work.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;🎉 I got offered a permanent contract 🎉&lt;/p&gt;— Chris Bongers 🤓💻⚡️ (&lt;a class="mentioned-user" href="https://dev.to/dailydevtips1"&gt;@dailydevtips1&lt;/a&gt;
) &lt;a href="https://twitter.com/DailyDevTips1/status/1428639004157677568?ref_src=twsrc%5Etfw"&gt;August 20, 2021&lt;/a&gt;
&lt;/blockquote&gt; 
&lt;h2&gt;
  &lt;a href="#back-to-the-process"&gt;
  &lt;/a&gt;
  Back to the process
&lt;/h2&gt;

&lt;p&gt;Between applying and getting this offer, I got invited to a chat with the CTO daily.dev Ido Shamun.&lt;/p&gt;

&lt;p&gt;I was excited to make it to this step, as I was sure many people applied for the position.&lt;/p&gt;

&lt;p&gt;This first chat was quite casual. Ido has some questions for me, and we talked about my skills, views on things, and general things.&lt;/p&gt;

&lt;p&gt;Together we also talked about the fact I had no experience in the dev advocate world. Ido mentioned they also had an opening coming up for a developer.&lt;/p&gt;

&lt;p&gt;That sparked my interest! And we discussed if that would be a better fit for me.&lt;/p&gt;

&lt;p&gt;Perhaps you remember that tweet I sent out about getting the permanent contract?&lt;br&gt;
Ido saw that as well and mailed me back congratulating me, but also mentioning they would also like to offer me a position.&lt;/p&gt;

&lt;p&gt;And that we could progress to the technical interview step!&lt;/p&gt;

&lt;p&gt;I was over the moon but also a bit in doubt about what to do next.&lt;/p&gt;

&lt;p&gt;I had this permanent contract on one side and this fantastic dream job on the other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-technical-interview"&gt;
  &lt;/a&gt;
  The technical interview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--690j-kzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1472%26q%3D80" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--690j-kzK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.unsplash.com/photo-1486312338219-ce68d2c6f44d%3Fixid%3DMnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1472%26q%3D80" alt="Technical interview process"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, it was a no-brainer to continue to the technical interview as that might stop the whole process.&lt;/p&gt;

&lt;p&gt;For this interview, a zoom meeting was planned for three hours. I would have to build a new feature on the daily.dev codebase.&lt;/p&gt;

&lt;p&gt;Seeing it was a lot of time investment, the guys over at daily.dev offered a 100$ for the session. I think this gives them as a company such cool and modern character!&lt;/p&gt;

&lt;p&gt;They value people and their time, even in interview steps.&lt;/p&gt;

&lt;p&gt;The interview started, and I was pretty nervous. By this time, I set up the codebase on my laptop with Ido's help because of some M1 issues.&lt;/p&gt;

&lt;p&gt;I was guided through the element I was making. Ido shared an online design file. At first, we talked about what needed to be done and how to tackle the process.&lt;/p&gt;

&lt;p&gt;From there, it was up to me to develop this new element.&lt;br&gt;
I had some guidance and was able to reflect with Ido on some of the ideas.&lt;/p&gt;

&lt;p&gt;In the end, we had a working new feature!&lt;/p&gt;

&lt;p&gt;It didn't all go according to plan, as my React was a bit rusty 😅.&lt;/p&gt;

&lt;p&gt;However, I think we both enjoyed the process and were on the same mind about it all.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#now-what"&gt;
  &lt;/a&gt;
  Now what?
&lt;/h2&gt;

&lt;p&gt;After the technical interview, I might even be more nervous because now what?&lt;/p&gt;

&lt;p&gt;At this time, I got even more excited about this fantastic company, and having worked on the codebase made me super excited.&lt;/p&gt;

&lt;p&gt;Luckily, I didn't have to wait long, as the next day I got an email with the subject line: You made it 🚀&lt;/p&gt;

&lt;p&gt;It stated Ido found it great working with me and felt my technical skills.&lt;br&gt;
It did mention some concerns about my rusty React fundamentals, but nothing major.&lt;/p&gt;

&lt;p&gt;And that they would like to process to the next step: the CEO interview with Nimrod!&lt;/p&gt;

&lt;p&gt;I was super stoked!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-ceo-interview"&gt;
  &lt;/a&gt;
  The CEO interview
&lt;/h2&gt;

&lt;p&gt;We didn't waste much time, and that same day I had a chat with Nimrod Kramer, CEO of daily.dev.&lt;/p&gt;

&lt;p&gt;This, again, was a pretty informal talk. Nimrod talked about the company, where they are at, and where they want to grow to.&lt;/p&gt;

&lt;p&gt;He had some questions to evaluate me as a person, and eventually, there was time for some questions from my side.&lt;/p&gt;

&lt;p&gt;In the end, I was super happy with the talk, and I felt like Nimrod had a mutual feeling about it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#and-boom"&gt;
  &lt;/a&gt;
  And boom 💥
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lbZDYc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632723236785/YwR1KtVKT.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lbZDYc8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632723236785/YwR1KtVKT.jpeg" alt="Chris celebrating new job"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just like that, another day later, I got the fantastic news that all that was left to do was to send me an offer!&lt;/p&gt;

&lt;p&gt;And here we are. Today is my first day at daily.dev.&lt;br&gt;
I can't express how happy I am to be here and start my work as a software engineer for daily.dev.&lt;/p&gt;

&lt;p&gt;I would also like to thank Ido and Nimrod for this fantastic process.&lt;br&gt;
Even if I didn't get the job, I would have been happy with how they approached this. They value people and see them as actual people instead of resumes.&lt;/p&gt;

&lt;p&gt;It was a first going through a process like this, and I must say this is a way of hiring that many companies can learn from!&lt;/p&gt;

&lt;p&gt;Thank you, guys, and happy to be part of the team ❤️&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thank-you-for-reading-and-lets-connect"&gt;
  &lt;/a&gt;
  Thank you for reading, and let's connect!
&lt;/h3&gt;

&lt;p&gt;Thank you for reading my blog. Feel free to subscribe to my email newsletter and connect on &lt;a href="https://www.facebook.com/DailyDevTipsBlog"&gt;Facebook&lt;/a&gt; or &lt;a href="https://twitter.com/DailyDevTips1"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>watercooler</category>
    </item>
    <item>
      <title>Adopt the right testing strategies for AI/ML applications</title>
      <author>GravelSoft</author>
      <pubDate>Fri, 01 Oct 2021 07:21:44 +0000</pubDate>
      <link>https://dev.to/gravelsoft/adopt-the-right-testing-strategies-for-ai-ml-applications-22m7</link>
      <guid>https://dev.to/gravelsoft/adopt-the-right-testing-strategies-for-ai-ml-applications-22m7</guid>
      <description>&lt;p&gt;The reception of frameworks dependent on Artificial Intelligence (AI) and Machine Learning (ML) has seen a dramatic ascent in the beyond couple of years and is relied upon to keep on doing as such. According to the figure by Markets and Markets, the worldwide AI market size will develop from USD 58.3 billion out of 2021 to USD 309.6 billion by 2026, at a CAGR of 39.7% during the previously mentioned conjecture time frame. In a new Algorithmia Survey, 71% of respondents referenced an increment in spending plans for AI/ML drives. A few associations are in any event, checking out multiplying their interests there. With the inconsistent development in these applications, the QA practices and testing techniques for AI/ML applications models likewise need to keep pace. &lt;/p&gt;

&lt;p&gt;A ML model life-cycle includes various advances. The first is preparing the model dependent on a bunch of capabilities. The second includes conveying the model, surveying model execution, and changing the model continually to make more exact forecasts. This is unique in relation to the conventional applications, where the model's result isn't really a precise number yet can be correct contingent upon the capabilities utilized for its preparation. The ML motor is based on certain prescient results from datasets and centers around consistent refining dependent on genuine information. Further, since it's difficult to get all potential information for a model, utilizing a little level of information to sum up outcomes for the bigger picture is foremost. &lt;/p&gt;

&lt;p&gt;Since ML frameworks have their design saturated with consistent change, customary QA strategies should be supplanted with those zeroing in on bringing the accompanying subtleties into the image. &lt;/p&gt;

&lt;p&gt;The QA approach in ML &lt;/p&gt;

&lt;p&gt;Conventional QA approaches require a well-informed authority to comprehend conceivable use case situations and results. These cases across modules and applications are reported in reality, which makes it simpler for experiment creation. Here the accentuation is more on understanding the usefulness and conduct of the application under test. Further, computerized instruments that draw from information bases empower the fast making of experiments with blended information. In a Machine Learning (ML) world, the attention is fundamentally on the choice made by the model and understanding the different situations/information that might have prompted that choice. This requires an inside and out comprehension of the potential results that lead to an end and information on information science. &lt;/p&gt;

&lt;p&gt;Besides, the information that is accessible for making a Machine Learning model is a subset of this present reality information. Subsequently, there is a requirement for the model to be re-designed reliably through genuine information. A thoroughness of manual follow-up is fundamental once the model is sent to upgrade the model's forecast abilities persistently. This additionally assists with beating trust issues inside the model as the choice would have been taken through human intercession, all things considered. QA concentrate should be more toward this path with the goal that the model is nearer to true precision. &lt;/p&gt;

&lt;p&gt;At long last, business acknowledgment testing in a conventional QA approach includes the making of an executable module and being tried underway. This customary QA approach is more unsurprising as similar arrangement of situations keep on being tried until another expansion is made to the application. In any case, the situation is distinctive with ML motors. Business acknowledgment testing, in such cases, ought to be viewed as a fundamental piece of refining the model to work on its precision, utilizing true utilization of the model.&lt;br&gt;
&lt;a href="https://gravelsoft.com/contact-us"&gt;https://gravelsoft.com/contact-us&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>AWS Database Migration</title>
      <author>john methew</author>
      <pubDate>Fri, 01 Oct 2021 06:55:14 +0000</pubDate>
      <link>https://dev.to/johnmethew18/aws-database-migration-2gjm</link>
      <guid>https://dev.to/johnmethew18/aws-database-migration-2gjm</guid>
      <description>&lt;p&gt;The word cloud is most commonly people are hearing now a days because of its technology revolutionize. Cloud technology is biggest change in IT industry as its reduce your almost all tress of infrastructure management including server, database, security, on time support team and etc. &lt;/p&gt;

&lt;p&gt;Cloud technology is one advance technique where just you can access all your business operation features in remote location with full security of database transformation.&lt;/p&gt;

&lt;p&gt;If you are looking for such a &lt;b&gt;expert cloud migration service&lt;/b&gt; for migrating your on side server database to cloud then Amazon AWS is the best option. &lt;/p&gt;

&lt;p&gt;Before you choose any &lt;a href="https://www.devitpl.com/cloud-migration/"&gt;AWS database migration service provider&lt;/a&gt; you should know some benefits of AWS database.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cost Effective&lt;/li&gt;
&lt;li&gt;Easy &lt;/li&gt;
&lt;li&gt;Reliable &lt;/li&gt;
&lt;li&gt;Minimal Downtime&lt;/li&gt;
&lt;li&gt;Supports a wide range of Databases&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Types of AWS Database Migration&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Homogeneous Database Migration&lt;/li&gt;
&lt;li&gt;Heterogeneous Database Migration&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Read full post with require screenshot about &lt;b&gt;&lt;a href="https://www.blog.devitpl.com/a-step-by-step-guide-to-aws-database-migration/"&gt;Step By Step Guide To AWS Database Migration&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
      <category>awsdatabasemigration</category>
      <category>cloudmigration</category>
      <category>devit</category>
      <category>cloudapplicationmigration</category>
    </item>
    <item>
      <title>Fullstack app (workshop) with distributed tracing, logging and monitoring</title>
      <author>Dalibor Kundrat</author>
      <pubDate>Fri, 01 Oct 2021 06:41:48 +0000</pubDate>
      <link>https://dev.to/damikun/fullstack-app-workshop-with-distributed-tracing-and-monitoring-3i45</link>
      <guid>https://dev.to/damikun/fullstack-app-workshop-with-distributed-tracing-and-monitoring-3i45</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;I would like to announce the OpenSource Fullstack App Example (Workshop) that shows a specific stack implementation from frontend to backend, including identity and distributed tracing, logging and monitoring.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z1RKqHd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxc3x0zgrgpzumpxpfqp.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z1RKqHd6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bxc3x0zgrgpzumpxpfqp.gif" alt="Fullstack NetCore and React workshop"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-the-idea-behind-this"&gt;
  &lt;/a&gt;
  What is the idea behind this?
&lt;/h3&gt;

&lt;p&gt;There are many courses, trainings (paid/opensource) online that show you specific things, but not many that show you a fullstack implementation. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gJ14qwRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvyisv7tybemytl0zdkk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJ14qwRa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bvyisv7tybemytl0zdkk.png" alt="TroubleTraining architecture example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is not perfectly done! Take this as my notes. Some parts were exported from my custom CCMS that I use for factory automation field, and I remember when I was just starting out and did not have snippets to help me solve certain problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-its-about"&gt;
  &lt;/a&gt;
  What it's about.
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Showing simple frontend integration for a webhooks management app with login/logout via backend bff using React, Relay, Typescript.&lt;/li&gt;
&lt;li&gt;Shows exporting telemetry and logs to distributed monitoring endpoints with Opentelemetry and ElasticStack&lt;/li&gt;
&lt;li&gt;Shows a full backend implementation for webhooks, including self-hosted identityServer and protected Graphql API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JL76dKNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00va17s6ipyj99gmnq6q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JL76dKNE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/00va17s6ipyj99gmnq6q.png" alt="FullStack request distributed tracing example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-who-it-is"&gt;
  &lt;/a&gt;
  For who it is
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;You are a full-stack developer (an attempt is made to explain advanced topics).&lt;/li&gt;
&lt;li&gt;You are a .Net developer and use modern technologies.&lt;/li&gt;
&lt;li&gt;Or you are implementing a modern React and Relay frontend based on a .Net backend.&lt;/li&gt;
&lt;li&gt;You want to understand the advanced concept of security patterns as BFF.&lt;/li&gt;
&lt;li&gt;You want to know how to trace and monitor a distributed application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#topics"&gt;
  &lt;/a&gt;
  Topics
&lt;/h3&gt;

&lt;p&gt;This release contains 4 main topics that you can read about in detail:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/Logging.md"&gt;Configuring Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/OpenTelemetry.md"&gt;Configuring Telemetry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/Identity.md"&gt;Configure identity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/damikun/trouble-training/blob/main/Doc/ElasticSearch.md"&gt;Configure Monitoring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(Some topics are language specific, others relate to a specific platform).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repository"&gt;
  &lt;/a&gt;
  Repository:
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/damikun/trouble-training"&gt;https://github.com/damikun/trouble-training&lt;/a&gt;&lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>webdev</category>
      <category>showdev</category>
      <category>monitoring</category>
    </item>
  </channel>
</rss>
