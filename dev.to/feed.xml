<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>AWS EKS With Amazon EC2 Spot Instances</title>
      <author>Vu Dao</author>
      <pubDate>Sun, 25 Jul 2021 05:53:57 +0000</pubDate>
      <link>https://dev.to/awscommunity-asean/aws-eks-with-amazon-ec2-spot-instances-405o</link>
      <guid>https://dev.to/awscommunity-asean/aws-eks-with-amazon-ec2-spot-instances-405o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#abstract"&gt;
  &lt;/a&gt;
  Abstract
&lt;/h2&gt;

&lt;p&gt;This post provides an overview of Amazon EC2 Spot Instances, as well as best practices for using them on AWS EKS effectively&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#What-to-know-about-spot-instances?"&gt;What to know about spot instances?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#The-life-cycle-of-a-Spot-Instance"&gt;The life cycle of a Spot Instance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#How-to-Launch-Spot-Instances?"&gt;How to Launch Spot Instances&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Spot-Instance-Termination-Notice"&gt;Spot Instance Termination Notice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Deploy-the-node-termination-handler"&gt;Deploy the node termination handler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Spot-Instance-Best-Practices"&gt;Spot Instance Best Practices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#Solution"&gt;Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#-Conclusion"&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#what-to-know-about-spot-instances"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;What to know about spot instances?&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxQRXqpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/spot_intro.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxQRXqpd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/spot_intro.png%3Fraw%3Dtrue" alt="Alt-Test"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-life-cycle-of-a-spot-instance"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;The life cycle of a Spot Instance&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. You (or an application running on your behalf) submits a bid to run a desired number of EC2 instances of a particular type. The bid includes the price that you are willing to pay to use the instance for an hour.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. When your bid price exceeds the current Spot price (which varies based on supply and demand), your instances are run.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Spot instance is interrupted or reclaimed for one of following reasons:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Price – The Spot price is greater than your maximum price.&lt;/li&gt;
&lt;li&gt;Capacity – If there are not enough unused EC2 instances to meet the demand for On-Demand Instances, Amazon EC2 interrupts Spot Instances. The order in which the instances are interrupted is determined by Amazon EC2.&lt;/li&gt;
&lt;li&gt;Constraints – If your request includes a constraint such as a launch group or an Availability Zone group, these Spot Instances are terminated as a group when the constraint can no longer be met.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#how-to-launch-spot-instances"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;How to Launch Spot Instances&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The most recommended service for launching Spot Instances is Amazon EC2 Auto Scaling especially Amazon EKS node group&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you require more flexibility, have built your own instance launch workflows, or want to control individual aspects of the instance launches or the scaling mechanisms, you can use EC2 Fleet in Instant mode.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sf6Mj_4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/launch_spot.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sf6Mj_4r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/launch_spot.png%3Fraw%3Dtrue" alt="Alt-text"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#spot-instance-termination-notice"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Spot Instance Termination Notice&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The best way for you to gracefully handle Spot Instance interruptions is to architect your application to be fault-tolerant. To accomplish this, you can take advantage of Spot Instance interruption notices. A Spot Instance interruption notice is a warning that is issued &lt;strong&gt;two minutes&lt;/strong&gt; before Amazon EC2 stops or terminates your Spot Instance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It's recommended to check for these interruption notices every 5 seconds. eg. &lt;code&gt;Polling http://169.254.169.254/latest/meta-data/spot/termination-time every 5 second(s)&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#deploy-the-node-termination-handler"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Deploy the node termination handler&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We will deploy a pod on each Spot Instance to detect the instance termination notification signal so that we can both terminate gracefully any pod that was running on that node, drain from load balancers and redeploy applications elsewhere in the cluster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Helm chart we will use to deploy AWS Node Termination Handler on each Spot Instance uses a DaemonSet. This will monitor the EC2 meta-data service on each of the EC2 Spot Instances to capture EC2 interruption notices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Within the Node Termination Handler DaemonSet, the workflow can be summarized as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Identify that a Spot Instance is being reclaimed.&lt;/li&gt;
&lt;li&gt;Use the 2-minute notification window to gracefully prepare the node for termination.&lt;/li&gt;
&lt;li&gt;Taint the node and cordon it off to prevent new pods from being placed.&lt;/li&gt;
&lt;li&gt;Drain connections on the running pods.&lt;/li&gt;
&lt;li&gt;Replace the pods on remaining nodes to maintain the desired capacity.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In this post, I would like to enable SpotInterruptionDraining on SPOT instances only. Read more &lt;a href="https://github.com/aws/aws-node-termination-handler"&gt;AWS Node Termination Handler&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using helm deploy &lt;code&gt;aws-node-termination-handler&lt;/code&gt; with enable &lt;code&gt;enableSpotInterruptionDraining&lt;/code&gt; and &lt;code&gt;enableRebalanceMonitoring&lt;/code&gt;, plus webhookURL to send notification to slack, apply for spot instances only. We use &lt;code&gt;--set nodeSelector.lifecycle=spot&lt;/code&gt; to tell the all daemon sets where to place the node-termination-handler pods but the autoscaling group need to add the label &lt;code&gt;lifecycle=spot&lt;/code&gt; to it nodes or you can use any labels that matche the requirement&lt;br&gt;&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;helm repo add eks https://aws.github.io/eks-charts
helm upgrade --install aws-node-termination-handler \
  --namespace kube-system \
  --set enableSpotInterruptionDraining="true" \
  --set enableRebalanceMonitoring="true" \
  --set enableScheduledEventDraining="false" \
  --set nodeSelector.lifecycle=spot \
  --set webhookURL=https://hooks.slack.com/services/&amp;lt;ID&amp;gt; \
  eks/aws-node-termination-handler
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Check the pods
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ kubectl get pod -n kube-system |grep aws-node-termination-handler
aws-node-termination-handler-2gsq2              1/1     Running   0          2m      10.3.254.49    ip-10-3-254-49.ap-northeast-2.compute.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
aws-node-termination-handler-8tn5w              1/1     Running   0          2m      10.3.158.85    ip-10-3-158-85.ap-northeast-2.compute.internal    &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
aws-node-termination-handler-j8xf6              1/1     Running   0          2m      10.3.141.203   ip-10-3-141-203.ap-northeast-2.compute.internal   &amp;lt;none&amp;gt;           &amp;lt;none&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Slack alarm&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Rebalance recommendation
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_n4sCILR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/slack1.png%3Fraw%3Dtrue" alt="slack"&gt;
&lt;/li&gt;
&lt;li&gt;Spot interruption event
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EKDwQjmB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/spot_interrupt.jpg%3Fraw%3Dtrue" alt="interrupt"&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check CPU and mem cost by the pod&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kG6Z7bK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/cpu_mem_cost.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kG6Z7bK3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/cpu_mem_cost.png%3Fraw%3Dtrue" alt="cost"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#spot-instance-best-practices"&gt;
  &lt;/a&gt;
  🚀 &lt;strong&gt;Spot Instance Best Practices&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Flexible about instance types, for example, my applications almost run in java and they require much memory so I choose R5 type and its family could be r5.xlarge, r5a.xlarge, etc.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flexible of Availability Zone, here I give the case of using EKS node group.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Configure multiple node groups, scope each group to a single Availability Zone, and enable the &lt;code&gt;--balance-similar-node-groups&lt;/code&gt; feature in &lt;a href="https://dev.to/awscommunity-asean/kubernetes-cluster-autoscaler-with-irsa-3bg5"&gt;cluster autoscaler&lt;/a&gt; so that we will have at least each node in different zones and guarentee the HA. Especially when the PVC is attached to an AZ, the pod need to be start on a spot instance in same zone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;eg. Create two node groups in different AZ using AWS cdk&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;        self.eks_cluster.add_nodegroup_capacity(
        id="EksNodeGroupStateless",
        capacity_type=eks.CapacityType.SPOT,
        desired_size=1,
        disk_size=20,
        instance_types=[ec2.InstanceType("r5a.xlarge"), ec2.InstanceType("r5.xlarge")],
        labels={'role': 'worker', 'type': 'stateless', 'lifecycle': 'spot'},
        max_size=2,
        min_size=1,
        nodegroup_name='eks-node-group',
        node_role=worker_role,
        subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE, availability_zones=['ap-northeast-2a'])
        )

        self.eks_cluster.add_nodegroup_capacity(
        id="EksNodeGroupStateful",
        capacity_type=eks.CapacityType.SPOT,
        desired_size=1,
        disk_size=20,
        instance_types=[ec2.InstanceType("r5a.xlarge"), ec2.InstanceType("r5.xlarge")],
        labels={'role': 'worker', 'type': 'stateful', 'lifecycle': 'spot'},
        max_size=2,
        min_size=1,
        nodegroup_name='eks-node-group-stateful',
        node_role=worker_role,
        subnets=ec2.SubnetSelection(subnet_type=ec2.SubnetType.PRIVATE, availability_zones=['ap-northeast-2b'])
        )
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prepare individual instances for interruptions: The best way for you to gracefully handle Spot Instance interruptions is to architect your application to be fault-tolerant, in EKS we can use HPA to ensure the number of available pods if one node down, and use cluster autoscaler to request new node.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Max price&lt;/strong&gt;: We recommend that you do not specify a maximum price, but rather let the maximum price default to the On-Demand price. A high maximum price does not increase your chances of launching a Spot Instance. See &lt;a href="https://aws.amazon.com/blogs/compute/new-amazon-ec2-spot-pricing/"&gt;EC2 Spot pricing model&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPDNzwVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/pricing_history.png%3Fraw%3Dtrue" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZPDNzwVd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/vumdao/aws-eks-the-hard-way/blob/master/spot-instance/img/pricing_history.png%3Fraw%3Dtrue" alt="Spot Instance pricing history"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Ref:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/awsmenacommunity/overview-of-amazon-ec2-spot-instances-3kph"&gt;https://dev.to/awsmenacommunity/overview-of-amazon-ec2-spot-instances-3kph&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://instances.vantage.sh/"&gt;https://instances.vantage.sh/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://d1.awsstatic.com/events/reinvent/2019/REPEAT_1_Save_up_to_90_percent_and_run_production_workloads_on_Spot_Instances_CMP331-R1.pdf"&gt;https://d1.awsstatic.com/events/reinvent/2019/REPEAT_1_Save_up_to_90_percent_and_run_production_workloads_on_Spot_Instances_CMP331-R1.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;div class="ltag__user ltag__user__id__512906"&gt;
  
    .ltag__user__id__512906 .follow-action-button {
      background-color: #000000 !important;
      color: #62df88 !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/vumdao" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bGwkUMWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--ugeYdWM---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/512906/2472752c-cfd5-4e02-b3d8-55b790178884.png" alt="vumdao image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/vumdao"&gt;Vu Dao&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/vumdao"&gt;Awesome Devops || AWS SA || CloudOpz&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;




&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/vumdao"&gt;
        vumdao
      &lt;/a&gt; / &lt;a href="https://github.com/vumdao/vumdao"&gt;
        vumdao
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


</description>
      <category>aws</category>
      <category>eks</category>
      <category>cloudopz</category>
      <category>spot</category>
    </item>
    <item>
      <title>5 UI Tips to Become a Better Front End Developer</title>
      <author>Tapajyoti Bose</author>
      <pubDate>Sun, 25 Jul 2021 05:43:29 +0000</pubDate>
      <link>https://dev.to/ruppysuppy/5-ui-tips-to-become-a-better-front-end-developer-1ae1</link>
      <guid>https://dev.to/ruppysuppy/5-ui-tips-to-become-a-better-front-end-developer-1ae1</guid>
      <description>&lt;p&gt;Often while starting out, beginners struggle to create &lt;em&gt;captivating&lt;/em&gt; &lt;strong&gt;UI&lt;/strong&gt; that gets users hooked to their applications. Today we are going to fix just that. &lt;/p&gt;

&lt;p&gt;But before starting I would like to point out that there is no &lt;strong&gt;One Right Answer&lt;/strong&gt; to Designing, anything that looks pleasing to the eye of a large majority of the people is considered &lt;em&gt;good design&lt;/em&gt;. In this article, we would go over 5 Tips that are considered &lt;em&gt;Good Design Practices&lt;/em&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-maintain-consistent-alignment"&gt;
  &lt;/a&gt;
  1. Maintain Consistent Alignment
&lt;/h1&gt;

&lt;p&gt;A lot of sites follow &lt;em&gt;Inconsistent Alignment&lt;/em&gt;, with different alignments for the &lt;em&gt;Navbar&lt;/em&gt; and the &lt;em&gt;Main Content&lt;/em&gt; of the site. This leads the websites to look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bol43x1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brj26gmvhhh9k0vuxywx.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bol43x1k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/brj26gmvhhh9k0vuxywx.PNG" alt="Alignment Issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The example below looks much more structured:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxNvmE6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maak0kguwy4j4yofaj3s.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxNvmE6S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/maak0kguwy4j4yofaj3s.PNG" alt="Alignment Fix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-space-out-your-content"&gt;
  &lt;/a&gt;
  2. Space Out Your Content
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--btBxw7nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e6keqxr8zrnbs2q90vk.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--btBxw7nf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0e6keqxr8zrnbs2q90vk.PNG" alt="Spacing Issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rjer6Q----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwn14a58fy7th26rue27.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rjer6Q----/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lwn14a58fy7th26rue27.PNG" alt="Spacing Fix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is one of the things you develop an eye for by default, as you gain more experience in developing more websites. As you can see here, the one with more spaced-out content looks much more professional. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; More spacing isn't always what is required, for example, you can get away with little spacing between the &lt;em&gt;Title&lt;/em&gt; and &lt;em&gt;Date&lt;/em&gt; in the case of a Blog website. &lt;/p&gt;

&lt;p&gt;Something that goes hand-in-hand with the previous point, maintain consistent spacing: the &lt;em&gt;padding/margin&lt;/em&gt; in the left &amp;amp; right sides should be equal, same is the case for the &lt;em&gt;padding/margin&lt;/em&gt; in the top &amp;amp; bottom.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-color-and-contrast"&gt;
  &lt;/a&gt;
  3. Color and Contrast
&lt;/h1&gt;

&lt;p&gt;Color is an inherent part of design and is simply the most important thing to keep in mind while developing a modern &lt;strong&gt;UI&lt;/strong&gt;, without proper Color &amp;amp; Contrast, even the websites with the best &lt;strong&gt;UI&lt;/strong&gt; end up looking like crap. You can see the significant improvement in the picture below, just by changing the colors:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D9zoEl5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/130grpl85ak7ddem42jz.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D9zoEl5---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/130grpl85ak7ddem42jz.PNG" alt="Color Issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AEiQ1T-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7serm7wplr2nih18715y.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AEiQ1T-z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7serm7wplr2nih18715y.PNG" alt="Color Fix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use Tools like &lt;a href="https://coolors.co/6e2594-ecd444-808080-000000-ffffff"&gt;Coolors&lt;/a&gt; to generate colors that go well with each other. It's a good idea to limit the &lt;em&gt;number of colors&lt;/em&gt; you use to &lt;strong&gt;Two&lt;/strong&gt; (you can very well use different &lt;em&gt;hues&lt;/em&gt; of the same colors and some generic colors like &lt;em&gt;white&lt;/em&gt;, &lt;em&gt;black&lt;/em&gt; &amp;amp; &lt;em&gt;grey&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;For &lt;strong&gt;Web Accessibility&lt;/strong&gt;, &lt;strong&gt;WCAG 2.0 level AA&lt;/strong&gt; requires a contrast ratio of at least &lt;strong&gt;4.5:1&lt;/strong&gt; for normal text and &lt;strong&gt;3:1&lt;/strong&gt; for large text. &lt;strong&gt;WCAG 2.1&lt;/strong&gt; requires a contrast ratio of at least &lt;strong&gt;3:1&lt;/strong&gt; for graphics and user interface components (such as form input borders). &lt;strong&gt;WCAG Level AAA&lt;/strong&gt; requires a contrast ratio of at least &lt;strong&gt;7:1&lt;/strong&gt; for normal text and &lt;strong&gt;4.5:1&lt;/strong&gt; for large text.&lt;/p&gt;

&lt;p&gt;To check your Website's &lt;strong&gt;Accessibility&lt;/strong&gt;, you can use tools like &lt;strong&gt;Lighthouse&lt;/strong&gt; (from &lt;strong&gt;Chrome Dev Tools&lt;/strong&gt;) and &lt;a href="https://wave.webaim.org/"&gt;Wave&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-typography"&gt;
  &lt;/a&gt;
  4. Typography
&lt;/h1&gt;

&lt;p&gt;You can easily get away with using only one &lt;strong&gt;Font Family&lt;/strong&gt; for your entire website. At most you should try to keep the &lt;strong&gt;Font Families&lt;/strong&gt; limited to &lt;strong&gt;Two&lt;/strong&gt; as using multiple &lt;strong&gt;fonts&lt;/strong&gt; can easily overwhelm the user and even make the website look unstructured and unprofessional.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X6Ip4qET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubevxxbtkftdasb1fc0n.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X6Ip4qET--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ubevxxbtkftdasb1fc0n.PNG" alt="Typography Issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--83TzbB16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5bzcw2tvxrwu32jl0jb.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--83TzbB16--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5bzcw2tvxrwu32jl0jb.PNG" alt="Typography Fix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-visual-hierarchy"&gt;
  &lt;/a&gt;
  5. Visual Hierarchy
&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Visual Hierarchy&lt;/strong&gt; is also one of the most crucial components of an amazing &lt;strong&gt;UI&lt;/strong&gt;. There is a great quote by a &lt;em&gt;Great Developer&lt;/em&gt; (read: By Me 😜):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A great developer is someone who makes implied actions evident&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Visual Hierarchy&lt;/strong&gt; is used to highlight certain parts of the Website which you want the users to focus on. You can employ several tactics for making users focus on a part of the site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Focus&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQBsiBfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7ewpawl3x88nt0by6u0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZQBsiBfS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7ewpawl3x88nt0by6u0.png" alt="No Focus"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus using Contrast&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h1gaYOmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l8q3zgmt0xy6vqmae3t.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h1gaYOmd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1l8q3zgmt0xy6vqmae3t.png" alt="Focus using Contrast"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus using Color&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ydZj0c9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmb3m84r0ctm9e3kt75a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ydZj0c9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmb3m84r0ctm9e3kt75a.png" alt="Focus using Color"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus using Scale&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--S0bMMl08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wky5cy2jlokf1vxvo7w0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S0bMMl08--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wky5cy2jlokf1vxvo7w0.png" alt="Focus using Scale"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Focus using Contrast, Color &amp;amp; Scale&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yrXYAjLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hcaq2u9bdmcxdx3bdlt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yrXYAjLz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3hcaq2u9bdmcxdx3bdlt.png" alt="Focus using Contrast, Color &amp;amp; Scale"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Visual Hierarchy&lt;/strong&gt; provides information to the users where they should look at&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmJgBJLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0mkh6f49887msf28kd6.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmJgBJLo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/y0mkh6f49887msf28kd6.PNG" alt="Visual Hierarchy Issue"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this example, it's not evident in one glance where we should focus our attention on. This can easily be improved by making some minor changes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0WX5-JUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fad4wub4bhkqp9bxcar2.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0WX5-JUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fad4wub4bhkqp9bxcar2.PNG" alt="Visual Hierarchy Fix"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this article, we went through some &lt;strong&gt;UI&lt;/strong&gt; concepts that help you develop a more attractive &lt;strong&gt;UI&lt;/strong&gt;. I would like to remind you &lt;strong&gt;UI&lt;/strong&gt; design is quite subjective and as stated in the &lt;em&gt;Intro&lt;/em&gt;, there is no &lt;strong&gt;ONE&lt;/strong&gt; correct answer. Hope you will employ these concepts in your applications and make awe-inspiring websites :)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h1&gt;

&lt;p&gt;Want to work together? Contact me on &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Want to see what I am working on? Check out my &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am a freelancer who will start off as a Digital Nomad in mid-2022. Want to catch the journey? Follow me on &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Follow my blogs for weekly new tidbits on &lt;a href="https://dev.to/ruppysuppy"&gt;Dev&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;FAQ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For the past few weeks, I had a lot of people reach out to me asking these questions hundreds of times, so I decided to add a dedicated &lt;strong&gt;FAQ&lt;/strong&gt; section for them&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;I am a beginner, how should I learn Front-End Web Dev?&lt;/strong&gt;&lt;br&gt;
First get the fundamentals of &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;CSS&lt;/strong&gt;, &lt;strong&gt;JS&lt;/strong&gt; down; Learn any &lt;em&gt;front-end framework/library&lt;/em&gt; (&lt;strong&gt;React&lt;/strong&gt;, &lt;strong&gt;Vue&lt;/strong&gt;, &lt;strong&gt;Angular&lt;/strong&gt;); Then keep making &lt;strong&gt;Projects&lt;/strong&gt; or make &lt;strong&gt;Open Source Contributions&lt;/strong&gt; to attain mastery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Relevant Article Links&lt;/strong&gt;&lt;br&gt;
    1. &lt;a href="https://dev.to/ruppysuppy/5-projects-to-master-front-end-development-57p"&gt;Front End Project Ideas&lt;/a&gt;&lt;br&gt;
    2. &lt;a href="https://dev.to/ruppysuppy/zero-to-hero-get-started-with-open-source-10b7"&gt;Get Started With Open Source&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Would you mentor me?&lt;/strong&gt;&lt;br&gt;
Sorry, I already am under a lot of workload and would not have the time to mentor anyone.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Connect to me on&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://www.linkedin.com/in/tapajyoti-bose-429a601a0"&gt;LinkedIn&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://tapajyoti-bose.vercel.app"&gt;Portfolio&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.upwork.com/o/profiles/users/~01c12e516ee1d35044/"&gt;Upwork&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://github.com/ruppysuppy"&gt;GitHub&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://www.instagram.com/tapajyotib/"&gt;Instagram&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>ui</category>
      <category>ux</category>
      <category>webdesign</category>
    </item>
    <item>
      <title>What is  Anchor tag ?</title>
      <author>Hrushikesh41</author>
      <pubDate>Sun, 25 Jul 2021 05:09:01 +0000</pubDate>
      <link>https://dev.to/hrushikesh41/what-is-a-tag-553j</link>
      <guid>https://dev.to/hrushikesh41/what-is-a-tag-553j</guid>
      <description>&lt;p&gt;Hello Guy's&lt;/p&gt;

&lt;p&gt;I'm back with another post. As mentioned in my previous post that my next post will be on anchor tags. Hope you liked my previous post.&lt;/p&gt;

&lt;p&gt;So let's start 👍&lt;/p&gt;

&lt;p&gt;Let's take for example that whenever you visit any site it asks you to login. But sometimes it happens that you forget your password. So you click on the forgot password link which redirects you to another page.&lt;/p&gt;

&lt;p&gt;Ever wondered how does it happens ??&lt;/p&gt;

&lt;p&gt;It is done with the help of anchor tag.&lt;/p&gt;

&lt;p&gt;Anchor tag means hyperlink. It is used to link one HTML page to another. &lt;/p&gt;

&lt;p&gt;The main attribute in this element is &lt;b&gt;href&lt;/b&gt;. In this &lt;b&gt;href&lt;/b&gt; attribute we specify the location of the file. Whenever the user will click on the link, user will be redirected to the page that you have provided in &lt;b&gt;href&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Let's see it practically 👩‍💻👩‍💻&lt;/p&gt;

&lt;p&gt;HTML&lt;/p&gt;

&lt;p&gt;anchor tag is created by writing just a letter in arrows. The href attribute is placed inside the &lt;b&gt;a tag&lt;/b&gt;. You can see the code below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v-8w9IfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j6mjr734tzvvtmvcclq.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v-8w9IfB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1j6mjr734tzvvtmvcclq.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your hyperlink will be seen like this :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gQMJ-Wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f41fsp0z1jz0neag0o98.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gQMJ-Wm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f41fsp0z1jz0neag0o98.PNG" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now in the Above HTML code you might have noticed that I have written "#" in href attribute. this means that hyperlink will be created but will not redirect to any link. &lt;/p&gt;

&lt;p&gt;It's time to add a file in href attribute.&lt;/p&gt;

&lt;p&gt;Now there are multiple ways to give location. Select the file that you want to give in href and press right click copy the entire file location. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--n0dol9hy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyuj8mdoq67ewxxlwxuu.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--n0dol9hy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jyuj8mdoq67ewxxlwxuu.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now just paste the file location in href attribute.&lt;/p&gt;

&lt;p&gt;Second method: If you have multiple files or folder in your project just write "./" in href attribute and you can see the files and folder. Just select it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0_bcZy2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/995arqdiubk8aep7g1li.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0_bcZy2X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/995arqdiubk8aep7g1li.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now when you click on the hyperlink it redirect user to the new page that you gave in href. &lt;/p&gt;

&lt;p&gt;You can see the output below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gz5P7oC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oktj13escsk9fkt40gyo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gz5P7oC1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oktj13escsk9fkt40gyo.gif" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So here how you can create a hyperlink in your page. &lt;/p&gt;

&lt;p&gt;Give it try in your navbar. Just create some pages and place the file locations in href. &lt;/p&gt;

&lt;p&gt;If you don't know how to create navbar have a look on my previous post. &lt;/p&gt;

&lt;p&gt;See you in next post. &lt;/p&gt;

&lt;p&gt;Happy Coding 👩‍💻👩‍💻👩‍💻&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>vscode</category>
    </item>
    <item>
      <title>8 Useful HTML input Attributes, You must know.</title>
      <author>SAIFULLAH🇮🇳</author>
      <pubDate>Sun, 25 Jul 2021 03:30:36 +0000</pubDate>
      <link>https://dev.to/saifullah/8-useful-html-input-attributes-you-must-know-24k8</link>
      <guid>https://dev.to/saifullah/8-useful-html-input-attributes-you-must-know-24k8</guid>
      <description>&lt;p&gt;When we built forms in our HTML web page then we came across with this type of situation where we want to pop a message to user for there ease.&lt;br&gt;
So here is 8 HTML  Attributes that you must know as a web developer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-required-attribute"&gt;
  &lt;/a&gt;
  1. Required attribute
&lt;/h1&gt;

&lt;p&gt;This attribute will check whether the input field is filled or not on hitting submit button and shows a massage.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BA41p77B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szp94bp4n0szrtvaehlq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BA41p77B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/szp94bp4n0szrtvaehlq.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-autofocus-attribute"&gt;
  &lt;/a&gt;
  2. autofocus attribute
&lt;/h1&gt;

&lt;p&gt;This attribute will automatic- ally give focus on to the input field when page loads. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GHw6JfoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xeyxnn8mt11bfjisahbh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GHw6JfoU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xeyxnn8mt11bfjisahbh.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-read-only-attribute"&gt;
  &lt;/a&gt;
  3. read only attribute
&lt;/h1&gt;

&lt;p&gt;This attribute tells that an input field should be read only (cannot be changed).&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jKCT4Mq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m8skaas5wqn9ijju6tn.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jKCT4Mq6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5m8skaas5wqn9ijju6tn.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-pattern-attribute"&gt;
  &lt;/a&gt;
  4. pattern attribute
&lt;/h1&gt;

&lt;p&gt;This attribute checks whether the input field value matched the pattern format or not.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mWLxm1l3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk4s87bf8w1r6yi4r7n6.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mWLxm1l3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yk4s87bf8w1r6yi4r7n6.jpg" alt="Pattern attribute"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-placeholder-attribute"&gt;
  &lt;/a&gt;
  5. placeholder attribute
&lt;/h1&gt;

&lt;p&gt;This attribute shows the hint that what should be the value in the input field.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zc8lyrdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt8n6mhwebxa07zr52mt.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zc8lyrdx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jt8n6mhwebxa07zr52mt.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-maxlength-attribute"&gt;
  &lt;/a&gt;
  6. maxlength attribute
&lt;/h1&gt;

&lt;p&gt;This attribute tells the maximum number of characters that are allowed in that input field.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-size-attribute"&gt;
  &lt;/a&gt;
  7. Size Attribute
&lt;/h1&gt;

&lt;p&gt;This attribute specify what should be the width of the input type. Default width size is 20.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5tEUz4Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vhdm2txovtpnc0i3b7m.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5tEUz4Yf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4vhdm2txovtpnc0i3b7m.jpg" alt="Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-min-and-max-attribute"&gt;
  &lt;/a&gt;
  8. min and max attribute
&lt;/h1&gt;

&lt;p&gt;The min and max attributes specify the minimum and maximum values for an input element.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdT6Tzyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydwl4xllfb0lej09bv1g.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdT6Tzyr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ydwl4xllfb0lej09bv1g.jpg" alt="Max Min Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So that's it hope you find it helpful.&lt;br&gt;
If you know something else I'm happy to hear suggest me below.&lt;br&gt;
Thank you.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>webpack</category>
      <category>codenewbie</category>
      <category>devops</category>
    </item>
    <item>
      <title>Interactive Fuzzy Finding in Vim without Plugins</title>
      <author>Peter Benjamin</author>
      <pubDate>Sun, 25 Jul 2021 03:11:02 +0000</pubDate>
      <link>https://dev.to/pbnj/interactive-fuzzy-finding-in-vim-without-plugins-4kkj</link>
      <guid>https://dev.to/pbnj/interactive-fuzzy-finding-in-vim-without-plugins-4kkj</guid>
      <description>&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#overview"&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-setup"&gt;The Setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#bonus"&gt;Bonus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#caveat"&gt;Caveat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#summary"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/junegunn/fzf"&gt;FZF&lt;/a&gt; is a great command-line fuzzy-finder and there is &lt;a href="https://github.com/junegunn/fzf.vim"&gt;fzf.vim&lt;/a&gt; plugin that integrates with Vim to provide features, like &lt;a href="https://github.com/junegunn/fzf.vim/blob/e34f6c129d39b90db44df1107c8b7dfacfd18946/doc/fzf-vim.txt#L118"&gt;&lt;code&gt;:Files&lt;/code&gt;&lt;/a&gt; to fuzzy search over files and &lt;a href="https://github.com/junegunn/fzf.vim/blob/e34f6c129d39b90db44df1107c8b7dfacfd18946/doc/fzf-vim.txt#L124"&gt;&lt;code&gt;:Rg&lt;/code&gt;&lt;/a&gt; to fuzzy search over text using &lt;a href="https://github.com/BurntSushi/ripgrep"&gt;&lt;code&gt;ripgrep&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Recently, however, I have been experimenting with a plugin-free Vim setup and while &lt;a href="http://vimdoc.sourceforge.net/htmldoc/editing.html#:find"&gt;&lt;code&gt;:find&lt;/code&gt;&lt;/a&gt; is sufficient for some use-cases, I found myself quitting vim and running &lt;code&gt;fzf&lt;/code&gt; to find deeply nested files in new or large projects. &lt;/p&gt;

&lt;p&gt;There has to be a simple way to integrate a command-line program with a command-line editor, right?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-setup"&gt;
  &lt;/a&gt;
  The Setup
&lt;/h2&gt;

&lt;p&gt;This setup is simple and it leverages a feature in vim called &lt;a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#quickfix"&gt;quickfix&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The flow is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;fzf&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Format the output to make it compatible with &lt;a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#errorformats"&gt;&lt;code&gt;errorformat&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Write the results to a temporary file&lt;/li&gt;
&lt;li&gt;Load the results into Vim's quickfix list with &lt;a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#:cfile"&gt;&lt;code&gt;:cfile&lt;/code&gt;&lt;/a&gt; or &lt;a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#:cgetfile"&gt;&lt;code&gt;:cgetfile&lt;/code&gt;&lt;/a&gt;, so that we can navigate through the results with &lt;a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#:cnext"&gt;&lt;code&gt;:cnext&lt;/code&gt;&lt;/a&gt;/&lt;code&gt;:cprevious&lt;/code&gt; or &lt;a href="http://vimdoc.sourceforge.net/htmldoc/quickfix.html#:copen"&gt;&lt;code&gt;:copen&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Clean up temporary file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here is what the final vimscript looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; FZF&lt;span class="p"&gt;()&lt;/span&gt; abort
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tempname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c"&gt;" fzf | awk '{ print $1":1:0" }' &amp;gt; file&lt;/span&gt;
    &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'silent !fzf --multi '&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;'| awk ''{ print $1":1:0" }'' &amp;gt; '&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;fnameescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'cfile '&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endtry&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;" :Files&lt;/span&gt;
command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;* Files &lt;span class="k"&gt;call&lt;/span&gt; FZF&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;" \ff&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;ff&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;Files&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;A quick breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;let l:tempname = tempname()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Generate a path to a temporary file and store it in a variable.&lt;/li&gt;
&lt;li&gt;See &lt;a href="http://vimdoc.sourceforge.net/htmldoc/eval.html#tempname()"&gt;&lt;code&gt;:h tempname()&lt;/code&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;execute 'silent !fzf --multi ' . '| awk ''{ print $1":1:0" }'' &amp;gt; ' . fnameescape(l:tempname)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Call &lt;code&gt;fzf&lt;/code&gt; with &lt;code&gt;--multi&lt;/code&gt; to allow for selecting multiple files&lt;/li&gt;
&lt;li&gt;Pipe to &lt;code&gt;awk&lt;/code&gt; to append &lt;code&gt;:1:0&lt;/code&gt; to fzf results to make them &lt;code&gt;errorformat&lt;/code&gt;-compatible.&lt;/li&gt;
&lt;li&gt;Note: you can drop this &lt;code&gt;awk&lt;/code&gt; command if you &lt;code&gt;set errorformat+=%f&lt;/code&gt; in your vimrc, but I found &lt;code&gt;%f&lt;/code&gt; to capture a lot of false-positives from other programs' outputs and therefore &lt;code&gt;:cnext&lt;/code&gt;/&lt;code&gt;:cprevious&lt;/code&gt; don't function on these false-positive results.&lt;/li&gt;
&lt;li&gt;Finally, direct the results into the temp file&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;execute 'cfile ' . l:tempname&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Load results from temp file into quickfix list and jump to the 1st result.&lt;/li&gt;
&lt;li&gt;Note #1: you may use &lt;code&gt;:cgetfile&lt;/code&gt; to only load results into quickfix list without jumping to the 1st result.&lt;/li&gt;
&lt;li&gt;Note #2: you may replace &lt;code&gt;:cfile&lt;/code&gt;/&lt;code&gt;:cgetfile&lt;/code&gt; with &lt;code&gt;:lfile&lt;/code&gt;/&lt;code&gt;:lgetfile&lt;/code&gt; to use location list instead of quickfix list. Location lists are window-specific, whereas quickfix lists are global. So if you prefer to have different set of results per vim window, then use &lt;code&gt;:lfile&lt;/code&gt;/&lt;code&gt;:lgetfile&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;call delete(l:tempname)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Clean up by deleting the temp file&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;command! -nargs=* Files call FZF()&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Invoke &lt;code&gt;FZF()&lt;/code&gt; function when we call &lt;code&gt;:Files&lt;/code&gt; in vim&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;nnoremap &amp;lt;leader&amp;gt;ff :Files&amp;lt;cr&amp;gt;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Normal-mode mapping so that we can trigger this flow with &lt;code&gt;&amp;lt;leader&amp;gt;ff&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h2&gt;

&lt;p&gt;While &lt;code&gt;:set grepprg=rg\ --vimgrep&lt;/code&gt; is again sufficient for most of my use-cases, those who have used &lt;code&gt;:Rg&lt;/code&gt; in fzf.vim will appreciate the interactive fuzzy grepping experience and the ability to preview results before opening files in vim.&lt;/p&gt;

&lt;p&gt;Well, here is a similar experience with pure vim (&lt;em&gt;obviously, &lt;code&gt;fzf&lt;/code&gt; and &lt;code&gt;rg&lt;/code&gt; binaries are still required&lt;/em&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight viml"&gt;&lt;code&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt; RG&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; abort
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tempname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;pattern &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'.'&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a:args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;pattern &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;a:args&lt;/span&gt;
    &lt;span class="k"&gt;endif&lt;/span&gt;
    &lt;span class="c"&gt;" rg --vimgrep &amp;lt;pattern&amp;gt; | fzf -m &amp;gt; file&lt;/span&gt;
    &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'silent !rg --vimgrep '''&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;pattern &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="s1"&gt;''' | fzf -m &amp;gt; '&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nb"&gt;fnameescape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;
        &lt;span class="nb"&gt;execute&lt;/span&gt; &lt;span class="s1"&gt;'cfile '&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt;
        &lt;span class="k"&gt;redraw&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
    &lt;span class="k"&gt;finally&lt;/span&gt;
        &lt;span class="k"&gt;call&lt;/span&gt; &lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;l&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;tempname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;endtry&lt;/span&gt;
&lt;span class="k"&gt;endfunction&lt;/span&gt;

&lt;span class="c"&gt;" :Rg [pattern]&lt;/span&gt;
command&lt;span class="p"&gt;!&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;nargs&lt;span class="p"&gt;=&lt;/span&gt;* Rg &lt;span class="k"&gt;call&lt;/span&gt; RG&lt;span class="p"&gt;(&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;q&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="k"&gt;args&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt;

&lt;span class="c"&gt;" \fs&lt;/span&gt;
nnoremap &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;leader&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;fs&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;Rg&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;cr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This offers the same experience where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:Rg&lt;/code&gt; without arguments will load all text into vim and allow users to interactively type and preview results before selecting files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:Rg [pattern]&lt;/code&gt; will pre-filter results to just ones that match &lt;code&gt;[pattern]&lt;/code&gt; before passing them to &lt;code&gt;fzf&lt;/code&gt; for further fuzzy searching.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#caveat"&gt;
  &lt;/a&gt;
  Caveat
&lt;/h2&gt;

&lt;p&gt;In my testing, I found one major caveat that did not impact me too much, but it is still worth calling out here:&lt;/p&gt;

&lt;p&gt;Executing shell commands in vim with bangs, like &lt;code&gt;:!fzf&lt;/code&gt;, is not meant to be interactive (at least, not out of the box). This could be a problem in GVim/MacVim. The vim &lt;a href="http://vimdoc.sourceforge.net/htmldoc/various.html#:!"&gt;docs&lt;/a&gt; mention the following workaround:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On Unix the command normally runs in a non-interactive shell.  If you want an interactive shell to be used (to use aliases) set 'shellcmdflag' to "-ic".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Setting &lt;code&gt;shellcmdflag=-ic&lt;/code&gt; could incur a time penalty, depending on your shell startup/initialization times.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Vim is extremely versatile and customizable. &lt;/p&gt;

&lt;p&gt;With some knowledge of vim concepts (e.g. quickfix, &lt;code&gt;:cfile&lt;/code&gt;/&lt;code&gt;:lfile&lt;/code&gt;) and a little bit of (vim &amp;amp; bash) scripting, you can achieve a richer experience and pleasant integrations to enhance your productivity in a way that suits you and your workflow.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this post and I hope it inspires you to develop and share your productivity tips and tricks in vim.&lt;/p&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>vim</category>
    </item>
    <item>
      <title>Generating Encrypted Key Pairs In Python</title>
      <author>Aaron Berry</author>
      <pubDate>Sun, 25 Jul 2021 02:54:35 +0000</pubDate>
      <link>https://dev.to/aaronktberry/generating-encrypted-key-pairs-in-python-69b</link>
      <guid>https://dev.to/aaronktberry/generating-encrypted-key-pairs-in-python-69b</guid>
      <description>&lt;p&gt;I recently had a requirement to produce some code that can generate encrypted PEM encoded RSA key pairs that can be used for snowflake key pair authentication for service accounts. I didn't find a lot of clear documentation on what the best practice was to do this in a python environment, so ill share what I came up with that allows you to produce an RSA key pair with the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is a PEM encoded format for both public and private keys&lt;/li&gt;
&lt;li&gt;PEM encoded Private key is encrypted with a password for further security and to align with snowflakes recommendations&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To achieve this, I used the &lt;a href="https://cryptography.io/en/latest/"&gt;python cryptography package&lt;/a&gt;. It has all the necessary backends we need for PEM encoded keys and for applying our encrypted password. I found that some other common crypt packages did not expose configuration in their python classes that are available in the underlying OpenSSL binary. Our intended outputs from this process will be a password for our private key, an encrypted PEM encoded RSA key, and a PEM encoded public key.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Aaron-K-T-Berry/python-encrypted-rsa-keys-demo"&gt;You can use the repo I have created if you wish to follow along with the example.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#creating-an-encrypted-pem-encoded-rsa-key-pair"&gt;
  &lt;/a&gt;
  Creating an Encrypted PEM Encoded RSA Key Pair
&lt;/h2&gt;

&lt;p&gt;The first thing we will want to do is generate an RSA key pair with the python cryptography library. You are strongly recommended to use the defaults for this module for the security implications, but you may configure as you need and know the impact of those changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cryptography.hazmat.primitives.asymmetric&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt;

&lt;span class="n"&gt;private_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_private_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;public_exponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;65537&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With your key pair object, you will then be able to encode it in your desired format. We will use the PEM encoding for our key pair and produce the required bytes for our PEM encoded public and private keys. Take note of us passing the bytes for our private key password when calling &lt;code&gt;private_key.private_bytes&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serialization&lt;/span&gt;

&lt;span class="n"&gt;private_key_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"your-password"&lt;/span&gt;

&lt;span class="n"&gt;encrypted_pem_private_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;private_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PEM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrivateFormat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PKCS8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;encryption_algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BestAvailableEncryption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;private_key_pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encrypted_pem_private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# b'-----BEGIN ENCRYPTED PRIVATE KEY-----'
&lt;/span&gt;
&lt;span class="n"&gt;pem_public_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;public_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PEM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PublicFormat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubjectPublicKeyInfo&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pem_public_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# b'-----BEGIN PUBLIC KEY-----'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not require an encrypted private key file, you can always pass no encryption for the key like so.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serialization&lt;/span&gt;

&lt;span class="n"&gt;unencrypted_pem_private_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;private_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PEM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrivateFormat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TraditionalOpenSSL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;encryption_algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NoEncryption&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unencrypted_pem_private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;# b'-----BEGIN RSA PRIVATE KEY-----'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With our PEM encoded public and private key bytes, we can generate them into strings if you wish to write to file or save them in another service.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;private_key_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"example-rsa.pem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;private_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encrypted_pem_private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;private_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;public_key_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"example-rsa.pub"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;public_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pem_public_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;public_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we put all these pieces together, we get the following completed code example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cryptography.hazmat.primitives.asymmetric&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;cryptography.hazmat.primitives&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;serialization&lt;/span&gt;

&lt;span class="n"&gt;private_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rsa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_private_key&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;public_exponent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;65537&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;key_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;private_key_pass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s"&gt;"your-password"&lt;/span&gt;

&lt;span class="n"&gt;encrypted_pem_private_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;private_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PEM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PrivateFormat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PKCS8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;encryption_algorithm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BestAvailableEncryption&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;private_key_pass&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;pem_public_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;public_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Encoding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PEM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;serialization&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PublicFormat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SubjectPublicKeyInfo&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;private_key_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"example-rsa.pem"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;private_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;encrypted_pem_private_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;private_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;public_key_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"example-rsa.pub"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"w"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;public_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pem_public_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;public_key_file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#further-reading"&gt;
  &lt;/a&gt;
  Further Reading
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://cryptography.io/en/latest/"&gt;You can find the documentation for the python cryptography library here.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The documentation can answer most of your questions once you work out what objects must be passed at each stage of the key generation process. By intention, the library is very flexible with many modules to change things out for your use cases requirements from crypto backends to serialization formats.&lt;/p&gt;

&lt;p&gt;With your generated private and public key bytes, you can create your keys in any encoding format you need for your consuming client. In the projects I have worked on, we have found that it is most helpful for us to store these keys in a standard format in a secret storage service like SSM as base64 encoded strings to preserve the formatting of the keys. This shifts the responsibility of formatting the key to the necessary format to the consumers of the key pair by them either writing the key to file or store it in other formats depending on their use case with a simple decode of the base 64 string from SSM. The flow for this process would look something like in the diagram below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s----JAkhsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5b9aj7mnj6ee3wgd942.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s----JAkhsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a5b9aj7mnj6ee3wgd942.png" alt="Key generation client to consumer workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the use cases for this process, some services require keys in this format. A notable example and what triggered me to look into this was snowflake's requirement for keys formatted in this way for key-pair authentication for snowflake service accounts in an automated key rotation process. However, snowflake does allow you to use non-encrypted key pairs with most of their SDK's now as well as supporting unencrypted keys too, although snowflake does still recommend using encrypted keys as best practice for their service. I do generally agree with them if you're looking for the most secure setup for your key pairs as it allows for another layer of protection for private keys saved on disk or fetched with the need for a password rather than just relying on file-based access control or your secret provider's security only.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#connect-further"&gt;
  &lt;/a&gt;
  Connect further
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Read more articles over on my &lt;a href="https://dev.to/aaronktberry"&gt;dev.to&lt;/a&gt; blog, or on my &lt;a href="https://aaron-kt-berry.medium.com/"&gt;medium&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Feel free to send me a message on &lt;a href="https://www.linkedin.com/in/aaron-kt-berry/"&gt;LinkedIn&lt;/a&gt; if you want to chat.&lt;/li&gt;
&lt;li&gt;If you are interested in server components and hardware check out my store &lt;a href="https://serverlabs.com.au"&gt;Server Labs Aus&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>todayilearned</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>What is the Virtual DOM?</title>
      <author>Utsho Sadhak Joy </author>
      <pubDate>Sun, 25 Jul 2021 02:12:11 +0000</pubDate>
      <link>https://dev.to/iamusj/what-is-the-virtual-dom-2e0a</link>
      <guid>https://dev.to/iamusj/what-is-the-virtual-dom-2e0a</guid>
      <description>&lt;p&gt;The Virtual DOM (VDOM) is an in-memory representation of Real DOM. The representation of a UI is kept in memory and synced with the "real" DOM. It's a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called reconciliation.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.linkedin.com/in/utsho-sadhak-joy-a79b971ba/"&gt;Follow me here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
    </item>
    <item>
      <title>Persist Vuex State between Page Reloads with LocalStorage and IndexedDB</title>
      <author>Xiaoyang Liu</author>
      <pubDate>Sun, 25 Jul 2021 01:53:31 +0000</pubDate>
      <link>https://dev.to/siujoeng_lau/persist-vuex-state-between-page-reloads-with-localstorage-and-indexeddb-2g21</link>
      <guid>https://dev.to/siujoeng_lau/persist-vuex-state-between-page-reloads-with-localstorage-and-indexeddb-2g21</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kqq24h0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd75oyntg4rjljgughr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kqq24h0G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rcd75oyntg4rjljgughr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.wortharead.app/"&gt;Wortharead&lt;/a&gt;, a blogs aggregator app that assembled the largest DB of 20,000+ Substack newsletters, uses Vuex to store and manage the shared state of all Vue components, such as the articles in the Today Feed, feeds followed by the user, and articles recommended in the Explore section. However, when using Vuex out-of-the-box, the Vuex state is lost and reset to default when the page is refreshed, causing unnecessary network requests.&lt;/p&gt;

&lt;p&gt;This article will talk about how we initially solved this problem using LocalStorage and later how and why we migrated to IndexedDB (hint: LocalStorage only lets you store 5MB of data).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#localstorage"&gt;
  &lt;/a&gt;
  LocalStorage
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rwtgunuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx3lp958540zzes0h8ng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rwtgunuh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wx3lp958540zzes0h8ng.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To persist and rehydrate the Vuex state between page reloads, we initially chose to save the state to LocalStorage after each mutation and read the data from it when the page is reloaded. The vuex-persist plugin implements this functionality and provides extensive TypeScript type declaration.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save vuex-persist
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To use it, install the plugin and import &lt;code&gt;VuexPersistence&lt;/code&gt; from &lt;code&gt;vuex-persist&lt;/code&gt;. Set &lt;code&gt;storage&lt;/code&gt; to &lt;code&gt;window.localStorage&lt;/code&gt; and register &lt;code&gt;vuexLocal.plugin&lt;/code&gt; as a Vuex plugin. Refresh the page and then the state will be saved to LocalStorage.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vuexLocal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VuexPersistence&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vuexLocal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#indexeddb"&gt;
  &lt;/a&gt;
  IndexedDB
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--He1CQ1rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hno81ig1fcr2u0wjbmx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--He1CQ1rq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7hno81ig1fcr2u0wjbmx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After several iterations, Wortharead decided to save article content storage in Vuex to ensure that users can read cached articles offline. Since LocalStorage is limited to about 5MB, the large amount of article data quickly exhausted the storage quota, causing unpredictable errors. Therefore, we chose to migrate the persisted state to IndexedDB.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install --save localforage
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;code&gt;localForage&lt;/code&gt; implements a simple, localStorage-like API for IndexedDB, which is compatible with vuex-persist. Import &lt;code&gt;localForage&lt;/code&gt; from the package and set &lt;code&gt;storage&lt;/code&gt; to &lt;code&gt;localForage&lt;/code&gt;. Since &lt;code&gt;localForage&lt;/code&gt; storage is asynchronous, set the &lt;code&gt;asyncStorage&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;VuexPersistence&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vuex-persist&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;localForage&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;localforage&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vuexLocal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;VuexPersistence&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;storage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;localForage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;asyncStorage&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Vuex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;State&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;state&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;mutations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;plugins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vuexLocal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;plugin&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When we first attempted to use this library, it seemed to work: data was being successfully stored and the app worked. However, on a page refresh, the data disappeared. We worried that the migration to IndexedDB may not be so easy. After some exploration though, we figured out the issue.&lt;/p&gt;

&lt;p&gt;Since &lt;code&gt;localForage&lt;/code&gt; is promise-based storage, the state will not be immediately restored into Vuex. It will go into the event loop and will finish when the JS thread is empty, which could invoke a delay of few seconds. &lt;code&gt;vuex-persist&lt;/code&gt; injected a &lt;code&gt;restored&lt;/code&gt; property to the &lt;code&gt;store&lt;/code&gt; object, which contains a Promise that will be resolved after the state is restored. The &lt;code&gt;beforeEach()&lt;/code&gt; hook in &lt;code&gt;vue-router&lt;/code&gt; could cause the app to wait for &lt;code&gt;vuex-persist&lt;/code&gt; to restore the state before taking any further actions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-router&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@/store&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// the location of Vuex store&lt;/span&gt;

&lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Router&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="c1"&gt;// define the routes&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;beforeEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;restored&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;next&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>vue</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Closures and their practical uses</title>
      <author>Sekab</author>
      <pubDate>Sun, 25 Jul 2021 01:43:27 +0000</pubDate>
      <link>https://dev.to/amrtaher1234/closures-and-their-practical-uses-19fm</link>
      <guid>https://dev.to/amrtaher1234/closures-and-their-practical-uses-19fm</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-the-heck-are-closures-anyways"&gt;
  &lt;/a&gt;
  What the heck are closures anyways?
&lt;/h3&gt;

&lt;p&gt;According to the official Mozilla website closure is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When I first read this the first time I couldn't fully understand what it actually means or how closures function in JavaScript or pretty much any other programming language.&lt;/p&gt;

&lt;p&gt;I would have loved it if someone explained it to me in a simpler way.&lt;br&gt;
Basically, a closure is a way that allows functions that are living inside outer functions to access the outer function's scope, the scope could be either variables or even other functions that live inside of it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above snippet there is a declaration of a function called &lt;code&gt;outer&lt;/code&gt; and inside of it we declared two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A variable called name &lt;/li&gt;
&lt;li&gt;Another function called inner&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We then invoked the inner function inside the outer function scope and logged the variable name, if we thought about the output of such code we would think that this code snippet is wrong because there is no variable called name inside the &lt;strong&gt;inner&lt;/strong&gt; function scope, thus the console would definitely output &lt;strong&gt;undefined&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;At this exact point closure shines, the idea here is that function &lt;strong&gt;inner&lt;/strong&gt; has an access to the scope of the outer function, meaning that it actually sees the variables or objects declared inside of our beloved &lt;strong&gt;outer&lt;/strong&gt; function and this also would work if we did something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Amr&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;inner&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;innerFunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;outer&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;innerFunc&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After returning the inner function when invoking the outer function, we could invoke the inner function and still get the value declared before in our outer function and that is the whole point of closures.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#uses-of-closures"&gt;
  &lt;/a&gt;
  Uses of closures
&lt;/h3&gt;

&lt;p&gt;Now comes the fun part, where on earth on our codebase could we use such a strong feature?&lt;/p&gt;

&lt;p&gt;Let us start by thinking about a very basic scenario, what if we have an application that contained a counter, and whenever the user does something (let us say clicks a button ) the counter is incremented by 1. &lt;/p&gt;

&lt;p&gt;A basic solution for such a scenario would be like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;incrementCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we defined a global variable for our counter and a function called &lt;strong&gt;incrementCounter&lt;/strong&gt; that increments our counter by one. &lt;br&gt;
This solution would work but the problem here is that our counter is defined globally and this could allow other functions to manipulate the counter current value thus making our code less maintainable and at risk of bugs.&lt;/p&gt;

&lt;p&gt;Here closures would solve such problem by the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterClosure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counterClosure&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we defined our counter variable inside a function called &lt;strong&gt;counterClosure&lt;/strong&gt; and whenever we want to increment it we can simply call the inner function which is called &lt;strong&gt;increment&lt;/strong&gt; and the counter variable would be enclosed and not manipulated by other functions.&lt;/p&gt;

&lt;p&gt;this could even be refactored a little bit:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;counterClosure&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCounter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;getCounter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;getCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;getCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;increment&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;counterClosure&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;increment&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;getCounter&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can get access to our counter using the &lt;strong&gt;getCounter&lt;/strong&gt; function returned.&lt;/p&gt;

&lt;p&gt;Another use case which I personally used before if what if we needed to create HTML elements and pass content to these elements whenever we are creating them? &lt;br&gt;
lets look at how closures would solve this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;elementCreator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elementCreator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;elementCreator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;headerContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello this is a header&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;headerContent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// &amp;lt;header&amp;gt; Hello this is a header&amp;lt;/header&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we defined a function that simply returns another function that takes content as a param, this is very handy as we now created functions for creating &lt;strong&gt;div&lt;/strong&gt; and &lt;strong&gt;header&lt;/strong&gt; elements and we just need to pass content to such functions, we could also use composition to even pass another element inside, for example, the div element like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;divWithHeader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;lt;header&amp;gt; &amp;lt;div&amp;gt; hello div &amp;lt;/div&amp;gt; &amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;This is it for this post about closures, there are numerous other uses of closures that I did not cover today but in the end, I would definitely encourage using closures in scenarios like encapsulating logic ( defining private variables ) and in composition ( This comes very handy if you are in love with functional programming ) &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>explainlikeimfive</category>
      <category>codenewbie</category>
      <category>functional</category>
    </item>
    <item>
      <title>4 JavaScript Projects To Build FAST And Get Job In 1 Month</title>
      <author>techlivly</author>
      <pubDate>Sun, 25 Jul 2021 00:37:55 +0000</pubDate>
      <link>https://dev.to/techlivly/4-javascript-projects-to-build-fast-and-get-job-in-1-month-19f2</link>
      <guid>https://dev.to/techlivly/4-javascript-projects-to-build-fast-and-get-job-in-1-month-19f2</guid>
      <description>&lt;p&gt; &lt;span&gt;If you're starting to apply for your first web developer junior position, then you might want to consider building out one of the 4 (if not all) projects.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Why?&lt;/span&gt;&lt;br&gt;The projects were thought out based on daily tasks that many web developers (including seniors) face every day.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;1. Consume API (Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OmxLGMC2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obc8e656beknp5kdw1sd.jpg"&gt;&lt;img alt="douglas-lopes-ehyV_XOZ4iA-unsplash" src="https://res.cloudinary.com/practicaldev/image/fetch/s--em7GDdeT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--OmxLGMC2--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/obc8e656beknp5kdw1sd.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you consume someone else's API, you are talking to a third party outside of your system. You could choose what type of data you want to get, should you validate it, how do you want to store it in your database, etc.&lt;/p&gt;
&lt;p&gt;This is where you could throw in your imagination and do whatever you want with the data. You could also perform a small CRUD system once you've retrieved the data.&lt;/p&gt;
&lt;p&gt;To give you an idea, you could consume Yelp or SpaceX API (but there is a lot more out there):&lt;/p&gt;
&lt;p&gt;SpaceX API&lt;br&gt;&lt;a href="https://docs.spacexdata.com/"&gt;https://docs.spacexdata.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Yelp API&lt;br&gt;&lt;a href="https://www.yelp.com/developers/documentation/v3/get_started"&gt;https://www.yelp.com/developers/documentation/v3/get_started&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;2. 10 Hour Challenge (Frontend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N8wZ05Rs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y5ip1xxlrg5glui1d3l.jpg"&gt;&lt;img alt="sonja-langford-eIkbSc3SDtI-unsplash" src="https://res.cloudinary.com/practicaldev/image/fetch/s--lMol7XG6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N8wZ05Rs--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3y5ip1xxlrg5glui1d3l.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is my personal favorite if you're planning to be a front-end developer.&lt;/p&gt;
&lt;p&gt;Within 10 hours, you should build a single-page application using a framework that you've never used before. It has to be responsive, look good/decent, and deployed onto a hosting service.&lt;/p&gt;
&lt;p&gt;Having something like on the resume will impress every person on the interview as you will demonstrate how fast you can learn, implement, and not get destructed in the process. But again, the key is to finish it in 10 hours.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;3. Building Blog Post (Frontend, Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HCZREIm9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yff1vbzjxzzz0dfv2wzj.jpg"&gt;&lt;img alt="blog" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kv75KipP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--HCZREIm9--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yff1vbzjxzzz0dfv2wzj.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You've probably heard this already, but there is one key element that many developers don't implement.&lt;/p&gt;
&lt;p&gt;When we build projects with X number of records on a single page, we follow a specific process that allows us to load a specific number of records instead of loading all records at once. This process is called &lt;span&gt;pagination&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--lBJZQ_bL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utjwq9qt37krz1yo7vd8.PNG"&gt;&lt;img alt="pagination" src="https://res.cloudinary.com/practicaldev/image/fetch/s--JLx-iErZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lBJZQ_bL--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/utjwq9qt37krz1yo7vd8.PNG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Have you seen something like this at the bottom of any e-commerce website? Well, that is pagination! So when you are building out a blog page, you're focusing on implementation the pagination functionality.&lt;/p&gt;
&lt;p&gt;Suppose you don't have a blog, no problem. You could talk to Yelp API or the database that you've built for the first project.&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;em&gt;4. Hotel System (Frontend, Backend)&lt;/em&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rvrgwgeH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kh8adybznrtwhoow6hm.jpg"&gt;&lt;img alt="comp" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ckhkOgdV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--rvrgwgeH--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6kh8adybznrtwhoow6hm.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This one will be a bit more complex and time-consuming as you will be building out the frontend, backend, database, and most importantly, building out the features.&lt;/p&gt;
&lt;p&gt;Every hotel has a specific number of available rooms, included in the packages (this is up to your imagination), for how long the guest will be staying, and a lot more.&lt;/p&gt;
&lt;p&gt;Don't go overboard and build out the Hilton system, but focus on maybe 3 to 4 features that you know could be fun to demonstrate during the interview and do small calculations.&lt;/p&gt;
&lt;p&gt;These are the four projects that could help you stand out during the interview and help you to land a job much faster than you think. You may not even get a coding challenge because you will demonstrate excellent work (that's what happened to me).&lt;/p&gt;
&lt;p&gt;More: &lt;b&gt;&lt;a href="https://bit.ly/3iCFfIU"&gt;Javascript Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Top Nodejs Project For Beginners</title>
      <author>techlivly</author>
      <pubDate>Sun, 25 Jul 2021 00:19:16 +0000</pubDate>
      <link>https://dev.to/techlivly/top-nodejs-project-for-beginners-24a4</link>
      <guid>https://dev.to/techlivly/top-nodejs-project-for-beginners-24a4</guid>
      <description>&lt;p&gt;If you have decided to build your career in &lt;span&gt;NodeJS &lt;/span&gt;development, we have gathered a list of &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; for all node enthusiasts to build highly scalable web applications.&lt;/p&gt;
&lt;p&gt;These best &lt;span&gt;nodeJS projects for beginners&lt;/span&gt; will help you gain knowledge about core node concepts, train your skill level, build a superb work portfolio, and get hired for your dream job.&lt;/p&gt;
&lt;p&gt;When you start building your first projects, it’s highly recommended for beginners in coding to create a repository for each of your projects so you will be able to learn &lt;em&gt;git&lt;/em&gt; and show your coding expertise to future employers.&lt;/p&gt;
&lt;p id="nodejs-project-ideas-additional-information"&gt;&lt;span&gt;NodeJS&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;NodeJS is a runtime environment that executes Javascript code out of the browser, and it’s commonly used to create back-end. NodeJS is often used with additional frameworks like Express or Nest.js. that can be used in some cases and make the development process much easier and faster. &lt;/p&gt;
&lt;p&gt;Knowledge about these frameworks will be greatly advantageous for your future projects. So start focusing on learning these as well-&lt;/p&gt;
&lt;p&gt;&lt;span&gt;&lt;b&gt;Originally Published&lt;/b&gt;: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://bit.ly/3znOVhs"&gt;Nodejs Project For Beginners&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;







</description>
      <category>javascript</category>
    </item>
    <item>
      <title>5 Helpful Python Random Module Methods</title>
      <author>Aya Bouchiha</author>
      <pubDate>Sat, 24 Jul 2021 23:29:58 +0000</pubDate>
      <link>https://dev.to/ayabouchiha/5-helpful-python-random-module-methods-10g1</link>
      <guid>https://dev.to/ayabouchiha/5-helpful-python-random-module-methods-10g1</guid>
      <description>&lt;p&gt;Hello, I'm &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;, today, I'm going to share with you 5 useful &amp;amp; helpful methods from a random module.&lt;/p&gt;

&lt;p&gt;Firstly, we need to know that the Random module is built-in in python for helping you to create random numbers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#random"&gt;
  &lt;/a&gt;
  random()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;random()&lt;/strong&gt;: returns a random float n where &lt;code&gt;0 &amp;lt;= n &amp;lt; 1&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# 0.7291047713945417
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#randint"&gt;
  &lt;/a&gt;
  randint()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;randint(a, b)&lt;/strong&gt;: returns a random integer between the given range. &lt;code&gt;a &amp;lt;= n &amp;lt;= b&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 7
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# -10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#uniform"&gt;
  &lt;/a&gt;
  uniform()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;uniform(a, b)&lt;/strong&gt;: returns a random float between the given range. &lt;code&gt;a &amp;lt;= n &amp;lt;= b&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;5.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 10.096664083501162
&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;100.2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# 95.00994365426938
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#shuffle"&gt;
  &lt;/a&gt;
  shuffle()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;shuffle(sequence, func = random.random)&lt;/strong&gt;: this method shuffle the giving sequence.In addition, It updates the giving sequence and does not return a new one.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'aya'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'simon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'john'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# ['john', 'aya', 'simon']
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#choice"&gt;
  &lt;/a&gt;
  choice()
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;choice(sequence)&lt;/strong&gt;: returns a random element from the giving sequence.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;users&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'aya'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'john'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'simon'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'kyle'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;winner&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;winner&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# aya :)
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;random()&lt;/strong&gt;: returns a random float n where &lt;code&gt;0 &amp;lt;= n &amp;lt; 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;randint(a, b)&lt;/strong&gt;: returns a random integer between the given range. &lt;code&gt;a &amp;lt;= n &amp;lt;= b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;uniform(a, b)&lt;/strong&gt;: returns a random float between the given range. &lt;code&gt;a &amp;lt;= n &amp;lt;= b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;shuffle(sequence, func = random.random)&lt;/strong&gt;: this method shuffle the giving sequence.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;choice(sequence)&lt;/strong&gt;: returns a random element from the giving sequence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references-amp-useful-ressources"&gt;
  &lt;/a&gt;
  References &amp;amp; useful Ressources
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.python.org/3/library/random.html"&gt;https://docs.python.org/3/library/random.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.w3schools.com/python/ref_random_choice.asp"&gt;https://www.w3schools.com/python/ref_random_choice.asp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=KzqSDvzOFNA"&gt;https://www.youtube.com/watch?v=KzqSDvzOFNA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Happy coding!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;email: &lt;a href="mailto:developer.aya.b@gmail.com"&gt;developer.aya.b@gmail.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;telegram: &lt;a href="https://t.me/AyaBouchiha"&gt;Aya Bouchiha&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
  </channel>
</rss>
