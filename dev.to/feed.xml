<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>URL Shortener with Rust, Svelte, &amp; AWS (5/): Frontend</title>
      <author>Miles Watson</author>
      <pubDate>Wed, 29 Sep 2021 17:04:06 +0000</pubDate>
      <link>https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-5-frontend-p0n</link>
      <guid>https://dev.to/mileswatson/url-shortener-with-rust-svelte-aws-5-frontend-p0n</guid>
      <description>&lt;p&gt;In the last post, we worked on containerizing the backend of our application, so that we can deploy it with a single command. In this post, we will create a static front-end application with &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt; + &lt;a href="https://bulma.io/"&gt;Bulma&lt;/a&gt;, and then integrate it into our Rust code + Dockerfile. I will be using the &lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt; package manager, but feel free to use &lt;code&gt;npm&lt;/code&gt; if you prefer.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cloning-the-template"&gt;
  &lt;/a&gt;
  Cloning the Template
&lt;/h3&gt;

&lt;p&gt;First, run the following command in the root of your repo. This will create a directory called &lt;code&gt;svelte&lt;/code&gt; which contains a template that we'll use to build a simple frontend for our API.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm init svelte@next svelte
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Select the &lt;code&gt;Skeleton project&lt;/code&gt; template, &lt;code&gt;Yes&lt;/code&gt; to Typescript, and then &lt;code&gt;No&lt;/code&gt; to all the other questions.&lt;/p&gt;

&lt;p&gt;Inside the &lt;code&gt;svelte&lt;/code&gt; directory, run &lt;code&gt;yarn install&lt;/code&gt; to install dependencies, and then &lt;code&gt;yarn dev&lt;/code&gt; to start a dev server. By going to &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; you should see a simple message:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8yk-eIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrnua1zzka9velle7acb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8yk-eIH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jrnua1zzka9velle7acb.png" alt="template welcome page"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#adding-a-static-adapter"&gt;
  &lt;/a&gt;
  Adding a Static Adapter
&lt;/h3&gt;

&lt;p&gt;Before we can deploy the site, we need to adapt it to our deployment target. SvelteKit provides a number of different adapters for platforms like Cloudflare Workers, Netlify, and Vercel. In our case, however, we will be using &lt;code&gt;adapter-static&lt;/code&gt; to prerender our entire site. &lt;/p&gt;

&lt;p&gt;First, we need to install the adapter using Yarn.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;yarn add &lt;span class="nt"&gt;--dev&lt;/span&gt; @sveltejs/adapter-static@next
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we need to change the &lt;code&gt;svelte.config.js&lt;/code&gt; file to configure the adapter. Import the adapter...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;@sveltejs/adapter-static&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;...then update &lt;code&gt;config.kit&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// hydrate the &amp;lt;div id="svelte"&amp;gt; element in src/app.html&lt;/span&gt;
    &lt;span class="nl"&gt;target&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// prerender the pages so they can be served statically&lt;/span&gt;
    &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By running &lt;code&gt;yarn build&lt;/code&gt;, you should see that the &lt;code&gt;/svelte/build&lt;/code&gt; directory is populated with an &lt;code&gt;index.html&lt;/code&gt; file (among some other files / folders).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serving-with-rocket"&gt;
  &lt;/a&gt;
  Serving with Rocket
&lt;/h3&gt;

&lt;p&gt;Now that we have statically built our application, we can serve it with Rocket. To do so, simply change our launch function to the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[launch]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;_&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nn"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;.manage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;DashMap&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;u32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="nf"&gt;.mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;routes!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;shorten&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="nf"&gt;.mount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nd"&gt;cfg!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug_assertions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// debug mode, therefore serve relative to crate root&lt;/span&gt;
                &lt;span class="nn"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nn"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;relative!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/svelte/build"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c"&gt;// dockerized, therefore serve from absolute path&lt;/span&gt;
                &lt;span class="nn"&gt;FileServer&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/app/static"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;if cfg!(debug...&lt;/code&gt; statement will become clearer later on, when we update the Dockerfile.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fixing-tests"&gt;
  &lt;/a&gt;
  Fixing Tests
&lt;/h3&gt;

&lt;p&gt;Unfortunately, you may get an email saying that your Github Actions tests have failed. If you look at the logs, it should be apparent that the &lt;code&gt;FileServer&lt;/code&gt; failed to mount, because it couldn't find the provided directory. To fix this, we can add steps to install yarn, install dependencies, and then build the static site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Rust&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cargo build&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Yarn&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install --global yarn&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Install Dependencies&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd svelte install&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Build Svelte&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;yarn --cwd svelte run build&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Run Tests&lt;/span&gt;
    &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;cargo test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For the sake of completion, I also added a simple test to check that the static site is being served as expected.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;#[test]&lt;/span&gt;
&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;static_site&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nn"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;tracked&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;rocket&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="nf"&gt;.expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"valid rocket instance"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="nf"&gt;.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"/"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;.dispatch&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="nf"&gt;.status&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nn"&gt;Status&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nb"&gt;Ok&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Tests should now pass as expected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-the-dockerfile"&gt;
  &lt;/a&gt;
  Updating the Dockerfile
&lt;/h3&gt;

&lt;p&gt;Currently our Dockerfile uses two images - one to build the Rust project, and the second to run the executable. Now we need to add a third one for building the static site.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;
&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;cargo &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--offline&lt;/span&gt; &lt;span class="nt"&gt;--path&lt;/span&gt; .

&lt;span class="c"&gt;# use a node image for building the site&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:16 as static&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /svelte&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; ./svelte .&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;yarn &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; yarn build

&lt;span class="c"&gt;# use a slim image for actually running the container.&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; rust:slim&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=build /usr/local/cargo/bin/aws-rust-api /usr/local/bin/aws-rust-api&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; --from=static /svelte/build/ ./static&lt;/span&gt;

&lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should now be able to start your application using &lt;code&gt;docker-compose --build&lt;/code&gt; and see your site when you go to &lt;a href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-functionality"&gt;
  &lt;/a&gt;
  Adding Functionality
&lt;/h3&gt;

&lt;p&gt;Although our site is being served statically, we still don't have any functionality! First, we will add support for simple Bulma styling to the &lt;code&gt;app.html&lt;/code&gt; &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tags.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will be using &lt;a href="https://www.npmjs.com/package/superagent"&gt;SuperAgent&lt;/a&gt; for making API requests, so let's add it to our dependency list.&lt;br&gt;
&lt;code&gt;yarn add superagent&lt;/code&gt;&lt;br&gt;
Next, we will create a &lt;code&gt;routes/__layout.svelte&lt;/code&gt; file, which will wrap around any of the routes in the directory.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"svelte"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"container is-fluid my-5"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar is-dark"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-brand"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"navbar-item ml-5 is-dark"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/favicon.png"&lt;/span&gt; &lt;span class="na"&gt;width=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt; &lt;span class="na"&gt;height=&lt;/span&gt;&lt;span class="s"&gt;"32"&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;"logo"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;h1&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"title is-2 navbar-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;URL Shortener&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;slot&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will give us a simple, function-less navbar to go across the top of the screen.&lt;br&gt;
Next, change the &lt;code&gt;index.svelte&lt;/code&gt; file to contain the following script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;superagent&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;superagent&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;superagent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`/api/shorten?url=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getUrl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`http://&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Finally, we can bind to these variables / functions by appending the following to the &lt;code&gt;index.svelte&lt;/code&gt; file:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {#if request == null}
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"field has-addons"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt;
                    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"input"&lt;/span&gt;
                    &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text"&lt;/span&gt;
                    &lt;span class="na"&gt;bind:value=&lt;/span&gt;&lt;span class="s"&gt;{url}&lt;/span&gt;
                    &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;"URL"&lt;/span&gt;
                &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"control"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"button is-info"&lt;/span&gt; &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{click}&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Shorten&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    {:else}
        {#await request}
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Loading...&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {:then response}
            &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;header&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-header-title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Done!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
                        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;
                        &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;{getUrl(response.text)}&lt;/span&gt;
                        &lt;span class="na"&gt;target=&lt;/span&gt;&lt;span class="s"&gt;"_blank"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;{getUrl(response.text)}&lt;span class="nt"&gt;&amp;lt;/a&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;footer&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-footer"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
                        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-footer-item button"&lt;/span&gt;
                        &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; (request = null)}&amp;gt;Back&lt;span class="nt"&gt;&amp;lt;/button&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt;
                        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"card-footer-item button is-info"&lt;/span&gt;
                        &lt;span class="na"&gt;on:click=&lt;/span&gt;&lt;span class="s"&gt;{()&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            navigator.clipboard.writeText(
                                getUrl(response.text)
                            )}&amp;gt;Copy&lt;span class="nt"&gt;&amp;lt;/button&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/footer&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        {:catch}
            &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Something went wrong!&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        {/await}
    {/if}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;bind:value={url}&lt;/code&gt; is one of Svelte's special two-way bindings - updating the textbox will update the variable, and vice versa.&lt;/p&gt;

&lt;p&gt;When the user clicks the button, the &lt;code&gt;click&lt;/code&gt; function will start an asynchronous request to the API, and set the &lt;code&gt;request&lt;/code&gt; variable to the uncompleted promise.&lt;/p&gt;

&lt;p&gt;This will then cause the page to show &lt;code&gt;Loading...&lt;/code&gt; until the request completes, at which point the shortened URL is displayed (with some buttons).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-product"&gt;
  &lt;/a&gt;
  Final Product
&lt;/h3&gt;

&lt;p&gt;If you did everything correctly, you should be able to run &lt;code&gt;docker-compose up --build&lt;/code&gt; and use your site at &lt;a href="http://127.0.0.1"&gt;http://127.0.0.1&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--biP6IqYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/GmSKZx4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--biP6IqYr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://i.imgur.com/GmSKZx4.gif" alt="URL Shortener Demo"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for this post! If you have any issues, make sure to check out the &lt;a href="https://github.com/mileswatson/url-shortener/tree/part-5"&gt;part-5 tag&lt;/a&gt; of my repo.&lt;/p&gt;

&lt;p&gt;In the next post, we will cover the basics of EB, and set up a CD pipeline for automatically deploying your program to the cloud. Make sure to click the "Follow" button if you want to be alerted when the next part is available!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#footnote"&gt;
  &lt;/a&gt;
  Footnote
&lt;/h4&gt;

&lt;p&gt;If you enjoyed reading this, then consider dropping a like or following me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dev.to/mileswatson"&gt;DEV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/watsonmiles"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/miles__watson"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/mileswatson"&gt;Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'm just starting out, so the support is greatly appreciated!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer - I'm a (mostly) self-taught programmer, and I use my blog to share things that I've learnt on my journey to becoming a better developer. Because of this, I apologize in advance for any inaccuracies I might have made - criticism and corrections are welcome!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>rust</category>
      <category>svelte</category>
      <category>aws</category>
      <category>docker</category>
    </item>
    <item>
      <title>Flowrift - Tailwind CSS UI blocks</title>
      <author>Sergej Samsonenko</author>
      <pubDate>Wed, 29 Sep 2021 17:02:18 +0000</pubDate>
      <link>https://dev.to/sergejcodes/flowrift-tailwind-css-ui-blocks-4fdb</link>
      <guid>https://dev.to/sergejcodes/flowrift-tailwind-css-ui-blocks-4fdb</guid>
      <description>&lt;p&gt;Introducing &lt;a href="https://flowrift.com?utm_source=devto&amp;amp;utm_medium=organic"&gt;Flowrift&lt;/a&gt;, an assistant library made of beautifully designed Tailwind CSS UI blocks. All blocks are vanilla HTML and work with Tailwind CSS' default configuration. Go big or go small: Stack blocks on top of each other to build full-page layouts, or selectively copy small code snippets. Your imagination is the only limit.&lt;/p&gt;

&lt;p&gt;All blocks are well organized inside a highly performant app. Just &lt;em&gt;view, copy &amp;amp; customize&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are you Busy?&lt;/li&gt;
&lt;li&gt;Missing a section in your design?&lt;/li&gt;
&lt;li&gt;Lacking inspiration?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We got you covered.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdgGIQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twfb5tjwix3s6ksmm6hl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JCdgGIQq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/twfb5tjwix3s6ksmm6hl.png" alt="Flowrift UI Blocks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Some highlights:&lt;/strong&gt;&lt;br&gt;
⭐ Growing Library&lt;br&gt;
⭐ Responsive Preview&lt;br&gt;
⭐ Code View&lt;br&gt;
⭐ Keyboard Shortcuts&lt;br&gt;
⭐ Randomizer&lt;/p&gt;

&lt;p&gt;👉 &lt;a href="https://flowrift.com?utm_source=devto&amp;amp;utm_medium=organic"&gt;Go to the Flowrift App&lt;/a&gt;&lt;br&gt;
👉 &lt;a href="https://about.flowrift.com?utm_source=devto&amp;amp;utm_medium=organic"&gt;More about Flowrift&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tailwindcss</category>
      <category>css</category>
      <category>frontend</category>
      <category>webdev</category>
    </item>
    <item>
      <title>JavaScript reduce() method – Simple Explanation with Simple Examples</title>
      <author>Kingsley Ubah</author>
      <pubDate>Wed, 29 Sep 2021 16:55:12 +0000</pubDate>
      <link>https://dev.to/ubahthebuilder/javascript-reduce-method-simple-explanation-with-simple-examples-4pf2</link>
      <guid>https://dev.to/ubahthebuilder/javascript-reduce-method-simple-explanation-with-simple-examples-4pf2</guid>
      <description>&lt;p&gt;Understanding how the JavaScript &lt;code&gt;reduce()&lt;/code&gt; method works is tricky. However, when properly understood, the method can be used to perform some really powerful tasks.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;reduce()&lt;/code&gt; method &lt;strong&gt;reduces&lt;/strong&gt; an array to a single value. Technically, the method can be used to reduce an array to absolutely anything and everything. &lt;/p&gt;

&lt;p&gt;Reduces takes four arguments, but we will only be focusing on the two important ones. The first argument is the &lt;strong&gt;accumulator&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;The accumulator is a callback function. The reducer function essentially creates a cycle of value accumulation. In simple terms, the callback function does the following, in specified order:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt; It takes a value and returns an &lt;em&gt;accumulator value one&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;On second iteration, It accepts that &lt;em&gt;accumulator value one&lt;/em&gt; and returns &lt;em&gt;accumulator value two&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;On third iteration, It accepts the &lt;em&gt;accumulator value two&lt;/em&gt; and returns &lt;em&gt;accumulator value three&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;This goes on until all elements in the array is iterated upon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The second argument is an &lt;strong&gt;initial value&lt;/strong&gt;. If passed, the initial value is initialized as the accumulator. If omitted, the first item in the array will be used as the accumulator.&lt;/p&gt;

&lt;p&gt;To demonstrate all of this, let's consider some simple, yet eye-opening examples&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-sum-up-numbers-with-reduce"&gt;
  &lt;/a&gt;
  How to sum up numbers with reduce()
&lt;/h3&gt;

&lt;p&gt;Perhaps the most common use case is for summing up an array of numbers. I personally think this is a great example for learning how &lt;code&gt;reduce()&lt;/code&gt; truly works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;accValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currValue&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 23&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the first iteration, the callback function will add accumulator value (2) with current value (5), and will return total (7). &lt;/p&gt;

&lt;p&gt;On the second iteration, the callback function will add accumulator value (7) with current value (7), and will return total (14). &lt;/p&gt;

&lt;p&gt;On third iteration, the callback function will add accumulator value (14) with current value (9), and will return total (23).&lt;/p&gt;

&lt;p&gt;Since there is no more item in the &lt;code&gt;numbers&lt;/code&gt; array, &lt;code&gt;reduce()&lt;/code&gt; will return 23.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#passing-in-an-initial-value-to-reduce"&gt;
  &lt;/a&gt;
  Passing in an initial value to reduce()
&lt;/h4&gt;

&lt;p&gt;Notice something though. No initial value (second parameter) was passed into &lt;code&gt;reduce()&lt;/code&gt;. In this case, the method will use the first item (2) as the accumulator value.&lt;/p&gt;

&lt;p&gt;In the following example, we will be passing a second parameter to &lt;code&gt;reduce()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;accValue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;accValue&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;currValue&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;total&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we set the initial value to 1, that value will be used as the default accumulator on the first iteration. So it will become 1+2 =3. Then 3+5=7 and so on.&lt;/p&gt;

&lt;p&gt;In this case, the array simply wraps the accumulated value. Any object can also be used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-reduce-to-get-unique-values"&gt;
  &lt;/a&gt;
  Using reduce() to get unique values.
&lt;/h3&gt;

&lt;p&gt;We can also reduce an array with duplicate content to an array with unique content.&lt;br&gt;
Though you should use a &lt;code&gt;Set&lt;/code&gt; collection to achieve this. I thought it was a great example to show a more different use case.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Andrew&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ben&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Chris&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Daniel&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;uniqueNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;uniqueNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniqueNames&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;uniqueNames&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;uniqueNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;currentPerson&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;uniqueNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// ["Andrew", "Ben", "Chris", "Daniel"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have an array called &lt;code&gt;list&lt;/code&gt;. This list has duplicate content (Andrew). On each iteration, we check if the accumulator (an array) already has the &lt;code&gt;current name&lt;/code&gt; inside of it. If it does, then we ignore the current name and just return the accumulator the way we received it. This will help us avoid adding a duplicate.&lt;/p&gt;

&lt;p&gt;If the current name doesn’t exist in the accumulator, then we will add that name into the accumulator (using spread) and return the accumulator.&lt;/p&gt;

&lt;p&gt;In the end, the accumulator (uniqueNames) will have only unique names, and no duplicates. &lt;/p&gt;

&lt;p&gt;Notice that we had set our initial value or an array literal &lt;code&gt;[]&lt;/code&gt;. In this case, the accumulator is passed into the array.&lt;/p&gt;

&lt;p&gt;So in the end, we transform an array which contains duplicate content to &lt;strong&gt;another&lt;/strong&gt; array which has unique content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping up
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;reduce()&lt;/code&gt; usually can feels difficult to understand, though it doesn't have to be. The method gets even more powerful when used to reduce arrays to other data types, like objects.&lt;/p&gt;

&lt;p&gt;To summarize, the method performs a consistent accumulative action on every item within an array. &lt;/p&gt;

&lt;p&gt;Make sure to join my  &lt;a href="https://www.getrevue.co/profile/ubahthebuilder"&gt;newsletter&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Thanks for reading.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;P/S: If you are learning JavaScript, I created an eBook which teaches 50 topics in JavaScript with hand-drawn digital notes. Check it out  &lt;a href="//gum.co/js-50"&gt;here&lt;/a&gt; .&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How does visual management improve team efficiency?</title>
      <author>Julien Calixte</author>
      <pubDate>Wed, 29 Sep 2021 16:51:53 +0000</pubDate>
      <link>https://dev.to/jcalixte/how-does-visual-management-improve-team-efficiency-4kgd</link>
      <guid>https://dev.to/jcalixte/how-does-visual-management-improve-team-efficiency-4kgd</guid>
      <description>&lt;p&gt;When I started my career as a developer 8 years ago I struggled to have a global view and see the big picture in my missions. I developed many projects and sometimes reverted my work depending on what I was asked for. &lt;br&gt;
It was frustrating and counterproductive. Discovering Visual Management has been a game changer in my career.&lt;/p&gt;

&lt;p&gt;We'll see together how visual management can drastically help a team to get a clearer vision, to be more aware of improvements and accountable for the project’s main goals.&lt;br&gt;
Visual management tries to solve ambiguity&lt;br&gt;
Hi, my name is Julien. I'm a manager at BAM and my goal is to bring the team to succeed in every challenge and mission. And that’s not an easy job! At BAM, we are able to simplify the task through what we call Visual Management.&lt;/p&gt;

&lt;p&gt;Let me clarify the problem we want to solve: how can we onboard people, have a common vision and share as much information as possible within the team to make better decisions?&lt;/p&gt;

&lt;p&gt;This is a really ambitious goal. The good news is every step going forward is a small improvement in team comprehension about the product and how the product is made. In order to achieve that we divide it in two main steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Show your flow&lt;/li&gt;
&lt;li&gt;Show your challenges&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#first-step-start-with-the-flow"&gt;
  &lt;/a&gt;
  First step: start with the flow
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#draw-the-steps"&gt;
  &lt;/a&gt;
  Draw the steps
&lt;/h3&gt;

&lt;p&gt;Let's say you are developing a product. This product has a set of features. "Show your flow" means displaying everything a feature needs to achieve before ending in the users' hands. Yes, we are talking about Kanban here. So how does the team achieve that goal?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Name the steps,&lt;/li&gt;
&lt;li&gt;make a list of the prerequisites to complete these steps,&lt;/li&gt;
&lt;li&gt;define the output required in each step,&lt;/li&gt;
&lt;li&gt;clarify who needs to complete these steps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You may need some good tips:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;start from the end,&lt;/li&gt;
&lt;li&gt;prerequisites and outputs should be understood by every one,&lt;/li&gt;
&lt;li&gt;set up the process for a specific feature, then find a more generic flow,&lt;/li&gt;
&lt;li&gt;set up detailed and specific steps into place even if few features need them,&lt;/li&gt;
&lt;li&gt;go as far as you can to define the outputs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;There are many tools you can use as a board: Miro, Notion, Trello, Fibery, use whichever fits you. Here is an example of what it can look like:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6EnL7j1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50s4u78txvha849u07zg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6EnL7j1Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/50s4u78txvha849u07zg.png" alt="Visual Management with Kanban"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is a board of how you develop an app at BAM but it can be done in every profession.&lt;/p&gt;

&lt;p&gt;The board allows you to show the progress of every feature and how close they are to being done. On the one hand it helps clarify the process with your team too and on the other hand it challenges your decisions as a team leader – “why do you start a new feature if we haven’t finished this one yet?”. Trust me, you would be surprised by how much people's thinking process diverges.&lt;/p&gt;

&lt;p&gt;Be as specific as possible, this is not about how your team works but how the product is made. If the product depends on another team, add this information as a step and define what you expect from them. We want to see each team working on the product as blackboxes with inputs and outputs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consolidate-and-simplify-your-visual-management"&gt;
  &lt;/a&gt;
  Consolidate and simplify your visual management
&lt;/h3&gt;

&lt;p&gt;Make sure the inputs and outputs are feasible and that every step can be done without going backwards in the process. Then look for simplification: are we able to remove steps? Can we postpone some of them? Are all the team members attending meetings and are those sufficient? Are we able to know if all the prerequisites are outputs from previous steps?&lt;/p&gt;

&lt;p&gt;Then on a daily basis, the team updates the feature status and sets up rules on how to prioritize tasks: pull system, minimum or maximum stock for each step, etc. These rules are your North star and help your daily decision making.&lt;/p&gt;

&lt;p&gt;This is why it is called visual management. It helps you manage a project as it shows you the next thing to do according to your set rules. This is really powerful: the decision process shifts from one manager to a whole team using the information at its disposal to make the best possible decision. And because information is so crucial to making a decision, we can come up with a new project standard: “every shared idea must be written down and available to everyone”.&lt;/p&gt;

&lt;p&gt;Once you are able to create a board with daily updates the real power of visual management is to be able to improve the efficiency of the team which will require you to implement the following mandatory step.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-key-in-visual-management-is-to-show-problems"&gt;
  &lt;/a&gt;
  The key in visual management is to show problems
&lt;/h2&gt;

&lt;p&gt;Visual management will help you with efficiency  as it will highlight the struggles of your team in the development of a product. There are multiple kinds of problems the team will face and wants to address: steps taking too long, rework, too many features stuck in a particular step, waiting for another team to complete their tasks.&lt;/p&gt;

&lt;p&gt;However, to be able to solve problems, we first need to acknowledge them and see them. Let’s take a look at rework.&lt;/p&gt;

&lt;p&gt;Add a line in your flow called “red bins”. Every time you need to go back to complete a task, create a red bin mentioning the problem and the reason why you need to go back. Red bins are waste that can be prevented in the future if the team solves the root cause of the problem and learns from them.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jVSalb_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xb1rhyi9gzyispwzaak.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jVSalb_t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8xb1rhyi9gzyispwzaak.png" alt="Red bins in Kanban"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After a while, it will become clear which columns the team needs to focus on. Red bins will start to stack in particular steps. Find out what can be improved and check if red bins are still occuring for similar reasons.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#visual-management-really-shines-in-the-long-run"&gt;
  &lt;/a&gt;
  Visual management really shines in the long run
&lt;/h2&gt;

&lt;p&gt;Achieving a clear visual process of your work will take some time. The path may not be completely obvious yet but knowing where the improvement lies is the first step to dive into it, transform your entire work dynamic and give you a clear and common vision.&lt;/p&gt;

&lt;p&gt;The more a team is autonomous and proactive on what action to take next, the more the manager's role evolves. He or she takes on a support role in the team, improving and solving problems along the way.&lt;/p&gt;

&lt;p&gt;Finally, visual management is like a map you update every day: it guides you through what you know and what you don't know yet. Having red bins is expected and this is OK, what matters most is that you stick on a continuous improving path!&lt;/p&gt;

</description>
      <category>lean</category>
      <category>visualmanagement</category>
    </item>
    <item>
      <title>I wrote a fully-functioning File Explorer, using TypeScript</title>
      <author>John doe</author>
      <pubDate>Wed, 29 Sep 2021 16:49:39 +0000</pubDate>
      <link>https://dev.to/5gqjwj/i-wrote-a-fully-functioning-file-explorer-using-typescript-40jc</link>
      <guid>https://dev.to/5gqjwj/i-wrote-a-fully-functioning-file-explorer-using-typescript-40jc</guid>
      <description>&lt;p&gt;I am very happy to introduce &lt;a href="https://xplorer.vercel.app/"&gt;Xplorer&lt;/a&gt; to help you organize your files and/or folders.&lt;br&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;img alt="Xplorer win" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hBmk6MCp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--N3Tr9i8d--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ecv6gk12ld5lij18gmeu.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;br&gt;&lt;/h2&gt;
&lt;h2&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#features"&gt;&lt;/a&gt;Features&lt;/h2&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#designed-out-of-the-box"&gt;&lt;/a&gt;Designed Out Of The Box&lt;/h3&gt;
&lt;p&gt;Xplorer is not written on traditional language like C, C++ or C#. It is written on TypeScript, HTML and SCSS, using the Electron framework, this makes Xplorer looks much more modern, and it will support theme customization in the future release. There are four available default themes for now.&lt;/p&gt;
&lt;h3&gt;
&lt;a href="https://dev.to/kimlimjustin/i-wrote-a-fully-functioning-file-explorer-using-typescript-1e4n#cross-platform"&gt;&lt;/a&gt;Cross Platform&lt;/h3&gt;
&lt;p&gt;As I mentioned, Xplorer is powered by the web because it's written with the Electron framework, this makes it possible to run Xplorer from any platform. &lt;/p&gt;

&lt;p&gt;Read More: &lt;b&gt;&lt;a href="https://www.google.com/url?sa=t&amp;amp;source=web&amp;amp;rct=j&amp;amp;url=https://www.codelivly.com/ethical-hacking-roadmap-a-beginners-guide/&amp;amp;ved=2ahUKEwjPiI64s6PzAhW4wjgGHTZOBx0QFnoECB8QAQ&amp;amp;usg=AOvVaw3-vFooaWUJypOS-FfvXpjK"&gt;I wrote a fully-functioning File Explorer, using TypeScript&lt;/a&gt;&lt;/b&gt;. &lt;/p&gt;






</description>
    </item>
    <item>
      <title>Custom Scrollbar</title>
      <author>Sanket Bodake</author>
      <pubDate>Wed, 29 Sep 2021 16:48:05 +0000</pubDate>
      <link>https://dev.to/sanketbodake/custom-scrollbar-26kb</link>
      <guid>https://dev.to/sanketbodake/custom-scrollbar-26kb</guid>
      <description>&lt;p&gt;Custom scrollbar using CSS&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/sanketbodke/embed/dyRagjm?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
    </item>
    <item>
      <title>Why Render</title>
      <author>Anurag Goel</author>
      <pubDate>Wed, 29 Sep 2021 16:46:02 +0000</pubDate>
      <link>https://dev.to/render/why-render-2hl5</link>
      <guid>https://dev.to/render/why-render-2hl5</guid>
      <description>&lt;p&gt;When I joined Stripe in 2011, the company had four full-time engineers. Even then, one of them was focused exclusively on managing our AWS infrastructure. By the time I left in 2016, the engineering organization had grown to 120, and the team that managed AWS to 25. We had one of the strongest engineering teams on the planet, but more than a fifth of it was focused on undifferentiated AWS heavy lifting that our customers didn’t know or care about.&lt;/p&gt;

&lt;p&gt;Assuming a typical Bay Area cost-to-company of $200K per engineer, managing AWS likely cost Stripe at least $5 million in 2016. This was in addition to their AWS bill, equity compensation, and the often ignored organizational overhead that increases with every new hire.&lt;/p&gt;

&lt;p&gt;Stripe is hardly alone in spending millions of dollars on DevOps each year. According to data published by the U.S. Bureau of Labor Statistics, businesses spent $78 billion on DevOps salaries in 2020. Ironically, this number is greater than &lt;em&gt;global&lt;/em&gt; spending on public cloud providers, estimated at $65 billion in 2020.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EsNcouzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq0xcr43qoogb26h7mlj.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EsNcouzZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rq0xcr43qoogb26h7mlj.png" alt="2020 US DevOps Salaries ($78B) vs Global Cloud Spend ($65B)"&gt;&lt;/a&gt;&lt;br&gt;DevOps engineers cost much more than the cloud providers they manage.
  &lt;/p&gt;

&lt;p&gt;What do we get for $78 billion? Most DevOps time is spent on tasks that are painfully similar across every organization. Nearly every software stack requires the same infrastructure, tooling, and automation to operate reliably and to enable developers to focus on unique business concerns. There are, of course, minor yet important differences across companies, but the decision to build an internal deployment platform is typically made well before these differences emerge, and is often based on what’s fashionable or familiar. As a result, businesses end up with an ever-expanding DevOps footprint to maintain and expand undifferentiated platforms. Sadly, all this effort and expense is irrelevant and invisible to their customers.&lt;/p&gt;

&lt;p&gt;Why don’t more companies choose to scale on a platform like Heroku that minimizes the need for DevOps engineers? When it launched in 2007, Heroku provided a uniquely incredible experience for developers building web apps with an up-and-coming framework called Ruby on Rails. In many ways, this power duo of technologies focused on the developer experience helped usher in Web 2.0 and all the innovation that accompanied it. Sadly, after Salesforce &lt;a href="https://techcrunch.com/2010/12/08/breaking-salesforce-buys-heroku-for-212-million-in-cash/"&gt;acquired Heroku&lt;/a&gt; in 2010, the rate of innovation on the platform began to slow, eventually coming to a standstill in recent years. For companies that needed more than a simple web app, Heroku’s feature set was often incomplete. The lack of persistent disks meant tools like Elasticsearch couldn’t run on Heroku; missing private networking was a deal breaker for security-conscious companies. Websockets support came very late, and HTTP/2 didn’t show up at all. In contrast, AWS kept adding new features and products at an incredible pace, ultimately conditioning new companies to skip Heroku and go straight to AWS while resigning themselves to poor developer experience and reduced iteration speed.&lt;/p&gt;

&lt;p&gt;Fast-forward to today, and most new applications are being packaged and deployed as containers, often with &lt;a href="https://kubernetes.io/"&gt;Kubernetes&lt;/a&gt;. Let loose on the world by Google in 2015, it has quickly replaced VMs as the target management layer for infrastructure, promising portability and automation for containerized workloads. Large corporate marketing budgets have certainly helped, making Kubernetes the tool of choice for DevOps teams managing applications in the cloud. However, in adopting Kubernetes we have traded the mostly well-understood complexity of AWS for a &lt;a href="https://landscape.cncf.io/"&gt;labyrinthian ecosystem&lt;/a&gt; that is as convoluted as it is inconsistent in quality. This has forced every company to build their own internal PaaS so application developers can focus on code. Ironically, these custom platforms look more similar than ever, since they're all based on Kubernetes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;This is the $78 billion question: if every internal PaaS looks the same, why waste inordinate amounts of time and money on building and managing these platforms at every company?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Render is the answer to this question: we’re building the modern PaaS every team and company needs to ship better software faster, effectively becoming the ever-expanding devops team for our customers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--adw33F0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4pbo87t6iq8s9t89b07.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--adw33F0z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z4pbo87t6iq8s9t89b07.png" alt="Render has come a long way since 2017, with over 300,000 services created since launch."&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our relentless focus on developer experience is matched only by our resolve to offer customers all the infrastructure flexibility they need without the associated complexity. This has helped us evolve from what started as a passion project in late 2017 to something that looks very different today:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tens of thousands of developers and businesses have created more than 300,000 services on Render. In addition to APIs and full stack apps, we now support static sites, cron jobs, managed PostgreSQL databases, background workers, private services, and of course, Docker containers, with more managed services on the way.&lt;/li&gt;
&lt;li&gt;We've launched multiple industry-firsts in the PaaS market, including private networking, persistent storage, managed wildcard SSL, and true resource-based autoscaling, effectively blurring the boundaries between PaaS and IaaS.&lt;/li&gt;
&lt;li&gt;Most importantly, Render has grown to include immensely talented, kind, and diverse humans with stellar backgrounds at companies like Stripe, Twitter, Uber, Lyft, Twitch, LinkedIn, and Heroku. We're &lt;a href="https://render.com/careers"&gt;always hiring&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we grow, our goal remains the same: empower developers and businesses to ship better products faster by eliminating DevOps. We’re working to end the tyranny of complexity forced on developers by cloud providers who’d rather sell certifications than focus on developer productivity. We are deprecating antiquated definitions of PaaS and IaaS, combining delightful developer experiences with the flexibility today's applications need. Most importantly, we are asking developers around the world to expect much more from the cloud. &lt;a href="https://dashboard.render.com/register"&gt;Let's get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>startup</category>
      <category>news</category>
      <category>devops</category>
      <category>ux</category>
    </item>
    <item>
      <title>Top 15 VS Code Extensions For Web Development</title>
      <author>Ramesh chandra pola</author>
      <pubDate>Wed, 29 Sep 2021 16:45:36 +0000</pubDate>
      <link>https://dev.to/byteslash/top-15-vs-code-extensions-for-web-development-4d20</link>
      <guid>https://dev.to/byteslash/top-15-vs-code-extensions-for-web-development-4d20</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone! 🧡
&lt;/h2&gt;

&lt;p&gt;In this article, we look into 15 useful VS Code extensions for web development.&lt;/p&gt;

&lt;p&gt;Visual Studio Code has become one of the highly used IDE now Because of its huge library of extensions that increase developer productivity. Here are Top VS Code Extensions Every Developer Should Use. If your favorites aren't listed here, comment down below. Would love to add those to this list.🧡&lt;/p&gt;

&lt;p&gt;Here’s how to install an extension via the VS Code Marketplace:&lt;br&gt;
Click on the “Extensions” icon in the Activity Bar on the side of VS Code. Alternatively, you can use the shortcut ( Ctrl+Shift+X ) to open the “Extensions” screen.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mrnLg9ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632913408451/EWw2Ox_lT.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mrnLg9ES--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632913408451/EWw2Ox_lT.png" alt="extensions.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started🤩
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-live-share"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare-pack"&gt;1. Live Share&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This extension helps you to start collaboratively editing and debugging in real-time, including integrated audio and text chat with your team. This provides you to begin pair programming, performing remote code reviews, driving interactive lectures, and more, without needing to leave Visual Studio Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvyMC59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632913952440/wbw30ygkD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZvyMC59B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632913952440/wbw30ygkD.png" alt="live share.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2live-server"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;2.Live Server&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This is a useful extension for web developers as it enforces auto-reload and makes our work easier by displaying our code results immediately on Our web browser without refreshing the page and It prevents us from going through the stress of always saving our work in the editor and then refresh our browser every time before seeing changes.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JlGcJymj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632914577475/nW2mFUDZf.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JlGcJymj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632914577475/nW2mFUDZf.gif" alt="vscode-live-server-animated-demo.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3javascript-es6"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets"&gt;3.JavaScript (ES6)&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This extension provides various commonly used code snippets for JavaScript in ES6 syntax for Vs Code editor. It supports both JavaScript and TypeScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VLoCpEsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632914818305/0HxGtghV0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VLoCpEsA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632914818305/0HxGtghV0.png" alt="js es6.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4bracket-pair-colorizer"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2"&gt;4.Bracket Pair Colorizer&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This extension allows matching brackets to be identified with colors. This extension helps you identify which closing bracket belongs to which functions when you have more than one or two closing brackets.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BxNoPADl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916176663/RHD8uBx_q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BxNoPADl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916176663/RHD8uBx_q.png" alt="bracket pair.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5path-intellisense"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense"&gt;5.Path Intellisense&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;VS Code plugin that autocompletes filenames. If You type the name of the file in statements and it will search and give you suggestions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aFP3JCKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916280732/ozkk9LrF-.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aFP3JCKl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916280732/ozkk9LrF-.gif" alt="path intelliesense.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6codesnap"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=adpyke.codesnap"&gt;6.CodeSnap&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;CodeSnap provides you to Take beautiful screenshots of your code in VS Code!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2PYcmgnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916411086/5L2gRgDM6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2PYcmgnV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916411086/5L2gRgDM6.png" alt="codesnap ss.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7auto-rename-tag"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag"&gt;7.Auto Rename Tag&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This extension makes it possible for us to rename both opening and closing tags at once. when you change the opening or closing tag it will automatically change the other tag as well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6GRj1ddM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916488959/YB1A6foJt.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6GRj1ddM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916488959/YB1A6foJt.gif" alt="autorename.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8gitlens-git-supercharged"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;8.GitLens — Git supercharged&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;GitLens supercharges the Git capabilities of VS Code. This is a powerful extension that allows you to see who, why, and how lines of code have changed over time (among lots of other features) &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3VrN3Kz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916557304/nXfiKf8JQ.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3VrN3Kz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632916557304/nXfiKf8JQ.gif" alt="gitlenns.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9quokka"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=WallabyJs.quokka-vscode"&gt;9.Quokka&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Quokka is used for testing JavaScript code in the Visual Studio code editor. With Quokka, you don't have to console.log()` everything. It works like a live server for your JavaScript or TypeScript code. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Vz2L0Y0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917105846/ub4rRApiy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vz2L0Y0c--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917105846/ub4rRApiy.gif" alt="quokka.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10peacock"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock"&gt;10.Peacock&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;we have used two editors open and coded in the wrong one. Peacock helps us differentiate between different workspaces by setting a different color theme to VS Code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--svX5SpEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917156409/UaP2hwIZ3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svX5SpEb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917156409/UaP2hwIZ3.png" alt="peacock.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11turbo-console-log"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ChakrounAnas.turbo-console-log"&gt;11.Turbo Console Log&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Easily log variable names and their values to the console with a keyboard shortcut. Can be configured to include things like file name and line number in the log for easier debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B8I7o10Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917203764/VxFmflb2W.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B8I7o10Y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917203764/VxFmflb2W.gif" alt="turbo console log.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12markdown-preview-enhanced"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced"&gt;12.Markdown Preview Enhanced &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;You just start writing Markdown text, then this extension helps you with a live preview of the markdown file&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gSeXOxyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917319238/q0twvafcg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gSeXOxyD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917319238/q0twvafcg.png" alt="md preview.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13css-peek"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=pranaygp.vscode-css-peek"&gt;13.CSS Peek &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Allow peeking to CSS ID and class strings as definitions from HTML files to respective CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MQWXzkgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917370902/sx3mQ7NQVd.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MQWXzkgP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917370902/sx3mQ7NQVd.gif" alt="css peek.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14snippet-creator"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=ryanolsonx.snippet-creator"&gt;14.Snippet Creator&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;There are many snippets extensions that help us saving time, but this extension helps you to make your own custom snippets. While creating, it auto-detects which language you’re using.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qrLjFMz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917430146/SaGBWpPm8.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qrLjFMz2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917430146/SaGBWpPm8.gif" alt="snippet creator.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15random-everything"&gt;
  &lt;/a&gt;
  &lt;a href="https://marketplace.visualstudio.com/items?itemName=helixquar.randomeverything"&gt;15.Random Everything&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;This extension generates random ints, floats, strings, words, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9qxu9vcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917645662/ALYKMF0MU.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9qxu9vcF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1632917645662/ALYKMF0MU.gif" alt="random everything.gif"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all for today! 😁 You reached the end of the article 😍&lt;/p&gt;

&lt;p&gt;I hope all that are listed here will increase your productivity. If you found this article helpful, please like and share it 🧡. What's your favorite VS-Code extension? Let me know in the comments 👇 😊&lt;/p&gt;

&lt;p&gt;Don’t forget to share this article with your friends or colleagues. Feel free to connect with me on any of the platforms below!🧡&lt;br&gt;&lt;br&gt;
 &lt;a href="https://github.com/Rameshchandrapola"&gt;GitHub&lt;/a&gt;  &lt;a href="https://www.linkedin.com/in/pola-ramesh-chandra-b78347202/"&gt;LinkedIn&lt;/a&gt; &lt;/p&gt;

</description>
      <category>vscode</category>
      <category>extension</category>
    </item>
    <item>
      <title>Ordinalize: Adding "-st", "-nd", "-rd", "-th" to dates</title>
      <author>matt swanson</author>
      <pubDate>Wed, 29 Sep 2021 16:44:29 +0000</pubDate>
      <link>https://dev.to/swanson/ordinalize-adding-st-nd-rd-th-to-dates-12am</link>
      <guid>https://dev.to/swanson/ordinalize-adding-st-nd-rd-th-to-dates-12am</guid>
      <description>&lt;p&gt;Ever written a giant case statement to add "-st", "-nd", "-rd", "-th" to display dates like "March 7th" or "September 1st"?&lt;/p&gt;

&lt;p&gt;Converting numbers like 1, 2, 7, 19 into "1st", "2nd", "7th", "19th" is called ordinalizing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;ordinalize(number)&lt;br&gt;
Turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Instead of manually add special cases, check if your language, library, or framework has a helper built-in.&lt;/p&gt;

&lt;p&gt;For example, in Rails, you can call the &lt;code&gt;ordinalize&lt;/code&gt; method on a number or use the &lt;code&gt;long_ordinal&lt;/code&gt; date format.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ordinalize&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"3rd"&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;today&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:long_ordinal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;"September 29th, 2021"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Happy hacking!&lt;/p&gt;

</description>
      <category>rails</category>
      <category>javascript</category>
      <category>programming</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Map Structures (Dictionary) in Dart</title>
      <author>Baransel</author>
      <pubDate>Wed, 29 Sep 2021 16:40:55 +0000</pubDate>
      <link>https://dev.to/baransel/map-structures-dictionary-in-dart-3cbo</link>
      <guid>https://dev.to/baransel/map-structures-dictionary-in-dart-3cbo</guid>
      <description>&lt;p&gt;The map structure is one of the list types that allows us to keep more than one data. The most important features of&lt;br&gt;
Map:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It works as key – value.&lt;/li&gt;
&lt;li&gt;unordered&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can think of this structure as a dictionary. A word has only one meaning. Here too, &lt;code&gt;word=key&lt;/code&gt;, &lt;code&gt;meaning=value&lt;/code&gt;&lt;br&gt;
corresponding to the word.&lt;/p&gt;

&lt;p&gt;It is also important because we use the Map structure a lot when &lt;em&gt;using a database&lt;/em&gt;. Below are examples of uses of the&lt;br&gt;
map structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'zero'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'two'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Map&lt;/span&gt; &lt;span class="n"&gt;map2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'zero'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'I'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'X'&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;map3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'zero'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'I'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'one'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'X'&lt;/span&gt;&lt;span class="o"&gt;};&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map3&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{zero: 0, one: 1, two: 2}
{zero: 0, I: one, 10: X}
{zero: 0, I: one, 10: X}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt; &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;letters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'I'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'V'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'X'&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

  &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;fromIterables&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;letters&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{I: 1, V: 5, X: 10}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Follow my blog for more &lt;a href="https://baransel.dev/"&gt;baransel.dev&lt;/a&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Why can't you break out of the forEach loop?</title>
      <author>mayankav</author>
      <pubDate>Wed, 29 Sep 2021 16:26:09 +0000</pubDate>
      <link>https://dev.to/mayankav/why-you-can-t-break-out-of-the-foreach-loop-n5e</link>
      <guid>https://dev.to/mayankav/why-you-can-t-break-out-of-the-foreach-loop-n5e</guid>
      <description>&lt;p&gt;This is one of the many things I keep forgetting every now and then. Other things like taking out clothes from the washing machine, watering my plants, okay but this post is not about me being forgetful. I am sure lot many of you reading this post do know this but still its not until you try to break out of the "&lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt;" loop that you realize you made the same mistake once again. This post is just a reminder for most of us and maybe a short clarification for the rest of us.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SORZEkJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5foi98ggws96c1vi2rzs.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SORZEkJ1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5foi98ggws96c1vi2rzs.jpg" alt="Forgetful"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moving ahead with an example because examples are the quickest way to explain stuff. Lets say we have &lt;strong&gt;&lt;em&gt;an array of flowers&lt;/em&gt;&lt;/strong&gt; and we want to collect all the flowers unto my favorite "&lt;strong&gt;&lt;em&gt;Tulip&lt;/em&gt;&lt;/strong&gt;" starting from the first one. Yes, please dont make it complicated by throwing in scenarios like what if there are multiple "&lt;strong&gt;&lt;em&gt;Tulips&lt;/em&gt;&lt;/strong&gt;". We have an array of flowers, where &lt;strong&gt;&lt;em&gt;each flower appears once&lt;/em&gt;&lt;/strong&gt; like so:&lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
  &lt;/code&gt;
  &lt;code&gt;
    
const flowers = ["Rose", "Lily", "Marigold", "Jasmine", "Tulip", "Lotus", "Orchid", "Daffodil", "Sunflower", "Poppy"];

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;p&gt;How would you do it? If I were you I'd rush to get the "&lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt;" loop down first but not this time. Lets use the &lt;strong&gt;&lt;em&gt;conventional for loop&lt;/em&gt;&lt;/strong&gt; and get this done first. Silly but helpful. Easy said, easy done! Then we shall also try that out with my favorite "&lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt;" loop. Take a look at the following snippets.&lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
  &lt;/code&gt;
  &lt;code&gt;
    
const flowers = ["Rose", "Lily", "Marigold", "Jasmine", "Tulip", "Lotus", "Orchid", "Daffodil", "Sunflower", "Poppy"];

let vase = [];
//collect all flowers unto "Tulip"
for(let i=0; i &amp;lt; flowers.length; i++) {
  vase.push(flowers[i]);
  if(flowers[i]==="Tulip") break;
}
console.log(vase); // ["Rose","Lily","Marigold","Jasmine","Tulip"]

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
  &lt;/code&gt;
  &lt;code&gt;
    
const flowers = ["Rose", "Lily", "Marigold", "Jasmine", "Tulip", "Lotus", "Orchid", "Daffodil", "Sunflower", "Poppy"];

let vase = [];
//collect all flowers unto "Tulip"
flowers.forEach(flower =&amp;gt; {
  vase.push(flower);
  if(flower==="Tulip") {
    break; //Illegal break statement
  }
});

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;p&gt;Had you tried that on your own, you'd have come across this error that says "&lt;strong&gt;&lt;em&gt;Illegal break statement&lt;/em&gt;&lt;/strong&gt;". You can't break out of the forEach loop after you're done collecting "&lt;strong&gt;&lt;em&gt;Tulip&lt;/em&gt;&lt;/strong&gt;". You may have already figured out but don't worry if you haven't and let me tell you how does the forEach loop differ from all the conventional loops. "&lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt;" more than being a loop, is a function call and you know it right from the syntax. This function takes another &lt;strong&gt;&lt;em&gt;callback function&lt;/em&gt;&lt;/strong&gt; and mind it, the callback function has to be a &lt;strong&gt;&lt;em&gt;synchronous&lt;/em&gt;&lt;/strong&gt; function. The synchronous callback function essentially is then called in interation on the array on which you did call the "&lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt;" loop. I understand, that this may not sound very intuitive. So, let me try explaining this with a demo polyfill of the "&lt;strong&gt;&lt;em&gt;forEach&lt;/em&gt;&lt;/strong&gt;" function. You can easily make it go crazy throwing errors but for a quick example, it should suffice. For complete implementation you can &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#polyfill"&gt;see this&lt;/a&gt;.&lt;/p&gt;


&lt;div class="runkit-element"&gt;
  &lt;code&gt;
    
  &lt;/code&gt;
  &lt;code&gt;
    
// forEach polyfill
Array.prototype.customForEach = function(callback) {
  const arr = this;
  // internal loop
  for(let i=0; i&amp;lt;arr.length; i++) {
    const x = arr[i];
    callback.call(arr, x);
    // only if we could add a break here, but we can't reach this place
  }
}

const callback = function(x) {
  console.log(x);
  // break; // Illegal break statement
}

// using custom forEach
const flowers = ["Rose", "Lily", "Marigold", "Jasmine", "Tulip", "Lotus", "Orchid", "Daffodil", "Sunflower", "Poppy"];
flowers.customForEach(callback);

  &lt;/code&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;p&gt;Now when you look at the &lt;strong&gt;&lt;em&gt;poyfill&lt;/em&gt;&lt;/strong&gt; (customForEach), you'll be able to comprehend the situation much clear. You'd also agree how placing a "&lt;strong&gt;&lt;em&gt;break&lt;/em&gt;&lt;/strong&gt;" statement inside a function (named callback) is inappropriate. &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break#:~:text=A%20break%20statement%2C%20with%20or%20without%20a%20following%20label%2C%20cannot%20be%20used%20within%20the%20body%20of%20a%20function%20that%20is%20itself%20nested%20within%20the%20current%20loop%2C%20switch%2C%20or%20label%20statement%20that%20the%20break%20statement%20is%20intended%20to%20break%20out%20of."&gt;Read what MDN docs say&lt;/a&gt;. Even if you assumed that something like a "&lt;strong&gt;&lt;em&gt;break&lt;/em&gt;&lt;/strong&gt;" statement was valid inside a function (which indeed isn't the case), you'd see that it would not be able to break out of the loop, since there's no way you can add a "&lt;strong&gt;&lt;em&gt;break&lt;/em&gt;&lt;/strong&gt;" statement inside the internal loop. Why? because &lt;strong&gt;&lt;em&gt;you simply cannot access it from outside&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Accomplishing the task we took as an example here for this post, is not a tough job. There are numerous ways this can be done but apart from this example, for your use-case checkout the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#:~:text=There%20is%20no%20way%20to%20stop%20or%20break%20a%20forEach()%20loop%20other%20than%20by%20throwing%20an%20exception.%20If%20you%20need%20such%20behavior%2C%20the%20forEach()%20method%20is%20the%20wrong%20tool"&gt;alternatives available&lt;/a&gt; at your disposal. Again, this is not an exhasutive list but then the purpose of this post is served and anything beyond this would only stretch the content unnecessarily I believe. Also since I have now written this post, I think I won't repeat this mistake &lt;strong&gt;&lt;em&gt;or will I&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--K3QZYzck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq7ifmuwg796quwqk7hi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K3QZYzck--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eq7ifmuwg796quwqk7hi.png" alt="Do not forget"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;h2&gt;
  &lt;a href="#originally-posted-here-"&gt;
  &lt;/a&gt;
  Originally Posted Here -
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://mayankav.webflow.io/blog/you-cant-break-the-foreach-loop"&gt;https://mayankav.webflow.io/blog/you-cant-break-the-foreach-loop&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>vue</category>
    </item>
    <item>
      <title>JavaScript Refactoring in Action: Replace Nested If-Else with Guards</title>
      <author>Lars Grammel</author>
      <pubDate>Wed, 29 Sep 2021 16:17:43 +0000</pubDate>
      <link>https://dev.to/p42/javascript-refactoring-in-action-replace-nested-if-else-with-guards-41nl</link>
      <guid>https://dev.to/p42/javascript-refactoring-in-action-replace-nested-if-else-with-guards-41nl</guid>
      <description>&lt;p&gt;&lt;strong&gt;Nested if-else statements can make it unnecessarily complicated to reason about the different executions paths and results of a function&lt;/strong&gt;. A loss of productivity and the introduction of bugs due to misunderstandings can be the outcome.&lt;/p&gt;

&lt;p&gt;The refactoring "&lt;a href="https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html"&gt;Replace Nested Conditional with Guard Clauses&lt;/a&gt;" from Martin Fowler's book "&lt;a href="https://martinfowler.com/articles/refactoring-2nd-ed.html"&gt;Refactoring - Improving the Design of Existing Code (2nd Edition)&lt;/a&gt;" can help in those situations.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;guard clause&lt;/strong&gt; checks for a condition and returns from the function if the condition is true, potentially doing some computation and returning a result. It makes it easier to reason about the function by ending one execution path early. &lt;/p&gt;

&lt;p&gt;Here is an example function (from &lt;a href="https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html"&gt;Replace Nested Conditional with Guard Clauses&lt;/a&gt;, Martin Fowler) before refactoring:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPayAmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;deadAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isSeparated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;separatedAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRetired&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;retiredAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;normalPayAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, three nested if-else statements check different conditions (e.g., &lt;code&gt;isSeparated&lt;/code&gt;) and update a variable &lt;code&gt;result&lt;/code&gt;. The variable is returned at the end of the function.&lt;/p&gt;

&lt;p&gt;The goal is to refactor the function into the following version:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getPayAmount&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isDead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;deadAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isSeparated&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;separatedAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isRetired&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;retiredAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;normalPayAmount&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The refactored function uses guard clauses instead of nested if-else statements. The variable &lt;code&gt;result&lt;/code&gt; is not necessary anymore and has been removed. The refactored code is easier to understand because there is less state (no variable) and each execution path returns early.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can the original function be refactored step-by-step?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can simplify the original code by applying two refactorings to each condition:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://p42.ai/documentation/code-action/inline-return"&gt;Inline return&lt;/a&gt;&lt;/strong&gt; converts a variable assignment to a return statement. Such a conversion is possible when the following statement after the assignment in the control flow returns the variable.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;a href="https://p42.ai/documentation/code-action/convert-if-else-to-guard-clause"&gt;Convert if-else to guard clause&lt;/a&gt;&lt;/strong&gt; changes an if-else statement with &lt;code&gt;return&lt;/code&gt; statements inside into to guard clauses, removing the indentation around the else block.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can carry out these steps manually or with automation. The &lt;a href="https://marketplace.visualstudio.com/items?itemName=p42ai.refactor"&gt;P42 JavaScript Assistant for VS Code&lt;/a&gt; is a refactoring tool that supports both operations. P42 indicates improvement opportunities with blue squiggly underlines. &lt;strong&gt;With refactoring automation, the code can be improved in a matter of seconds&lt;/strong&gt;. After a final formatting step, the function has been refactored into the simplified version. &lt;/p&gt;

&lt;p&gt;Here is how refactoring the code looks like in VS Code with P42:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfil_4eW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-29-javascript-refactoring-in-action-replace-nested-if-else-with-guards/refactor-fowler-replace-nested-conditional-with-guard-clauses.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Xfil_4eW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://p42.ai/image/blog/2021-09-29-javascript-refactoring-in-action-replace-nested-if-else-with-guards/refactor-fowler-replace-nested-conditional-with-guard-clauses.gif" alt='Refactor "Replace Nested Conditional with Guard Clauses" Example'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Refactoring is essential for maintaining a healthy codebase, and many small improvements go a long way. By introducing guard clauses, you can often simplify nested if-else statements and make your codebase a little bit better. &lt;/p&gt;

&lt;p&gt;Happy refactoring!&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>typescript</category>
    </item>
  </channel>
</rss>
