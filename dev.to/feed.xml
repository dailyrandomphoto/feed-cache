<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to download You Tube video using Python</title>
      <author>Dheeraj-programmer</author>
      <pubDate>Wed, 22 Dec 2021 11:21:02 +0000</pubDate>
      <link>https://dev.to/dheerajprogrammer/how-to-download-you-tube-video-using-python-52mp</link>
      <guid>https://dev.to/dheerajprogrammer/how-to-download-you-tube-video-using-python-52mp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;In this post you know about how to download youtube vidoes very easily in only in only four lines of code!!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#save-your-time-watch-video"&gt;
  &lt;/a&gt;
  Save your time watch video!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://youtu.be/2Wb2313oHxc"&gt;Watch now&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirments"&gt;
  &lt;/a&gt;
  Requirments
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;pip install pytube&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pytube:&lt;/strong&gt; Pytube is a very serious, lightweight, dependency-free Python library (and command-line utility) for downloading YouTube Videos. If You want to know more about pytube take a look of &lt;a href="//pytube.io"&gt;documentaion&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-code"&gt;
  &lt;/a&gt;
  Let's code
&lt;/h2&gt;

&lt;p&gt;First import youtube from pytube&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from pytube import YouTube
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Make a variable and paste the web url link of any video don't use the link which you get click on share button.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;youtube = YouTube('https://www.youtube.com/watch?v=2Wb2313oHxc')
video = youtube.streams.first()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The streams function is fetch video description, title, thumbnail and all these things but only for download video use first() with streams&lt;/p&gt;

&lt;p&gt;Then finally use the download function to download the video and give the directory path where you want to download video&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;video.download('C:/Users/96650/Desktop/')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The all code look like this!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from pytube import YouTube
youtube = YouTube('https://www.youtube.com/watch?v=2Wb2313oHxc')
video = youtube.streams.first()
video.download('C:/Users/96650/Desktop/')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;If you still reading here please like my content&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy coding!
&lt;/h2&gt;

</description>
      <category>python</category>
      <category>beginners</category>
      <category>programming</category>
      <category>projectbenatar</category>
    </item>
    <item>
      <title>React's new Context API and Actions
</title>
      <author>MD.Tajkier Haque Raiyan</author>
      <pubDate>Wed, 22 Dec 2021 11:10:21 +0000</pubDate>
      <link>https://dev.to/coderboyraiyan/reacts-new-context-api-and-actions-4hi9</link>
      <guid>https://dev.to/coderboyraiyan/reacts-new-context-api-and-actions-4hi9</guid>
      <description>&lt;p&gt;Context API seems interesting. Context API comes with several solutions in react.  The solutions are : &lt;br&gt;
It provides a single source of truth for data that can be directly accessed by components that are interested, which means:&lt;br&gt;
It avoids the "prop-drilling" problem, where components receive data only to pass it on to their children, making it hard to reason about where changes to state are (or aren't) happening.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-context-do"&gt;
  &lt;/a&gt;
  What's Context do?
&lt;/h2&gt;

&lt;p&gt;There are many articles on how the context api works. So you can check there. I’m here to tell you how to use the context api with some of my examples. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#simple-context-example"&gt;
  &lt;/a&gt;
  Simple Context Example?
&lt;/h2&gt;

&lt;p&gt;First of all, we have to create a custom component. And wrap the App.js. Here app.js will be children of the custom wrapper component. In the component, we have to create a context using createContext(). Like So: &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5xPIFTAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o71hbfwh58dt4r3uhah9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5xPIFTAV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o71hbfwh58dt4r3uhah9.png" alt="Image description" width="678" height="452"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we can use the DuckifyConsumer to read that state.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#passing-functions"&gt;
  &lt;/a&gt;
  Passing Functions:
&lt;/h2&gt;

&lt;p&gt;In javascript, functions are known as “first-class”, meaning we can treat them as objects and pass them, around even in state and the providers value prop. The maintainers didn’t use state prop they uses the value prop. Because they want to separate the concepts of value and state. In this case, we can add an dispatch function to the DuckifyProvider state. dispatch will take in an action (defined as a simple object), and call a reducer function (see below) to update the Provider's state (I saw this method of implementing a redux-like reducer without redux somewhere, but I'm not sure where. If you know where, let me know so I can properly credit the source!).&lt;br&gt;
We pass the state into the value for the Provider, so the consumer will have access to that dispatch function as well.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>vscode</category>
    </item>
    <item>
      <title>NEUMORPHIC PRELOADER | CSS</title>
      <author>yusuf._ch</author>
      <pubDate>Wed, 22 Dec 2021 10:53:44 +0000</pubDate>
      <link>https://dev.to/charroufyoussef/neumorphic-preloader-css-4216</link>
      <guid>https://dev.to/charroufyoussef/neumorphic-preloader-css-4216</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/yusuf-_ch/embed/bGooGGp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>programming</category>
      <category>beginners</category>
      <category>css</category>
    </item>
    <item>
      <title>MUSIC LOADER |</title>
      <author>yusuf._ch</author>
      <pubDate>Wed, 22 Dec 2021 10:48:31 +0000</pubDate>
      <link>https://dev.to/charroufyoussef/music-loader--4ecb</link>
      <guid>https://dev.to/charroufyoussef/music-loader--4ecb</guid>
      <description>&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/yusuf-_ch/embed/abLLoKE?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Welcome to DEV, CLOUD TECH!</title>
      <author>Adit Modi</author>
      <pubDate>Wed, 22 Dec 2021 10:23:59 +0000</pubDate>
      <link>https://dev.to/cloudtech/welcome-to-dev-cloud-tech-1fja</link>
      <guid>https://dev.to/cloudtech/welcome-to-dev-cloud-tech-1fja</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-to-our-devto-blog"&gt;
  &lt;/a&gt;
  Welcome to our Dev.to blog!
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Everything about Cloud &amp;amp; Tech&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;At &lt;strong&gt;CloudTech&lt;/strong&gt;, Our Goal is Built a community of self reliant Cloud Architects, Builders and Developers who are eager to help people get started with cloud along with building and developing applications which impact people around us. &lt;/p&gt;

&lt;p&gt;We share latest news and articles related to Different Cloud Providers like AWS , Azure , GCP etc and much more.&lt;/p&gt;

&lt;p&gt;We have decided to start this blog to help members in contributing to the community. Every member has a story to tell and by starting this blog, we aim to encourage each member to share their story and help inspire the next generation of cloud professionals and enthusiasts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-contribute"&gt;
  &lt;/a&gt;
  How do I contribute?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#1-join-our-cloud-tech-community"&gt;
  &lt;/a&gt;
  [1] Join our Cloud Tech Community
&lt;/h3&gt;

&lt;p&gt;To contribute, you must be part of our Cloud Tech Community.&lt;br&gt;
Join our Community &lt;a href="https://join.slack.com/t/cloudtechcommunity/shared_invite/zt-wptacj2f-Eu4PPvq6WEkBTHg7PR2ncA"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-create-an-account-here-in-devto-if-you-havent"&gt;
  &lt;/a&gt;
  [2] Create an account here in Dev.to (if you haven't)
&lt;/h3&gt;

&lt;p&gt;Dev.to is an awesome platform where developers are able to share their ideas. Sign up here for an account.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-fill-up-the-form"&gt;
  &lt;/a&gt;
  [3] Fill up the form
&lt;/h3&gt;

&lt;p&gt;Fill up this &lt;a href="https://airtable.com/shrqKuPOMh1Y0Kjg8"&gt;form&lt;/a&gt; so we can properly contact you and add you to the group of Blog Contributors. We will also share with you the unique token that you will use to be able to post content in the Dev.to website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-lets-get-writing"&gt;
  &lt;/a&gt;
  [4] Let's get writing!
&lt;/h3&gt;

&lt;p&gt;Once you are part of the community, you will be able to post to the Cloud Tech. We will strictly enforce our house rules below to ensure the community remains a safe space where members can share their ideas and start a discourse.&lt;/p&gt;

&lt;p&gt;TLDR: Posts should be related to Cloud. It doesn't have to be technical in nature but it does need to somehow connect to above mentioned keywords. There should be no mention of competing products and it should not threaten or harass others.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-you-go-here-are-some-house-rules"&gt;
  &lt;/a&gt;
  Before you go, here are some house rules
&lt;/h2&gt;

&lt;p&gt;The Cloud Tech is a safe space where people of any gender, nationality, association, sexual orientation can express their ideas and have a platform to share them with the world. But every community needs a set of rules to make sure everyone can take part in the community. Here are our house rules.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each post should comply with the code of conduct of our platform, dev.to. You can view the document here: &lt;a href="https://dev.to/code-of-conduct"&gt;https://dev.to/code-of-conduct&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;On top of the platform code of conduct, our core team will also enforce:

&lt;ul&gt;
&lt;li&gt;Each post should be related to Cloud. 
The community is a safe place. Any post that threatens, harass, causes harm to any member of the community or the dev.to user base in general will be taken down.&lt;/li&gt;
&lt;li&gt;Any post that blatantly sells products without regard to the community's objectives of sharing knowledge and promoting discourse will be taken down.&lt;/li&gt;
&lt;li&gt;We have no tolerance for plagiarized content. It will be taken down.&lt;/li&gt;
&lt;li&gt;The community is not a platform for users to reflect or assert their political and social views. Therefore, posts with political or social commentary will be taken down.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-bloggin"&gt;
  &lt;/a&gt;
  Let's get bloggin' 🥂
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qMwP1FQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ssgjc01qbpgyymyb3ag.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qMwP1FQi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2ssgjc01qbpgyymyb3ag.jpg" alt="Alt Text" width="400" height="400"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>career</category>
      <category>codenewbie</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Lifecycle Story of React Components</title>
      <author>Shoieb Alam</author>
      <pubDate>Wed, 22 Dec 2021 10:01:24 +0000</pubDate>
      <link>https://dev.to/shoiebalam/lifecycle-story-of-react-components-3ne0</link>
      <guid>https://dev.to/shoiebalam/lifecycle-story-of-react-components-3ne0</guid>
      <description>&lt;p&gt;Components are used in React applications to break and isolate distinct aspects of the online user experience into separate pieces. These components work independently and return React elements in JSX using a render method. These elements specify how the user should be presented with that part.&lt;/p&gt;

&lt;p&gt;Some of the earlier lifecycle methods have been judged to be inappropriate to use in recent React versions and will be deprecated in React 17. We shall not learn about the soon-to-be deprecated unsafe lifecycle methods here.&lt;/p&gt;

&lt;p&gt;The React component lifetime is made up of these three milestones. Mounting, updating, and unmounting are the three steps that each component goes through. You can think of it as our natural life cycle, in which we are born, grow, and eventually die. React components are generated by mounting them on the DOM, then changing or growing them through updates, and lastly removing or unmounting them from the DOM.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Mz4EKDXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6r5ij9pvu44877l9n5l.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Mz4EKDXQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l6r5ij9pvu44877l9n5l.png" alt="Image description" width="880" height="462"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The whole modern lifespan of React components is shown here, along with the necessary lifecycle functions. Specific lifecycle methods are provided by React and can be used to conduct specific tasks in different phases. React component lifecycle methods are what they're named.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-1-mounting"&gt;
  &lt;/a&gt;
  Phase 1: Mounting
&lt;/h2&gt;

&lt;p&gt;The creation of the component is the subject of this phase. The component is added to the DOM at this point.&lt;br&gt;
For this phase, the following lifecycle techniques are available:&lt;/p&gt;

&lt;p&gt;*&lt;em&gt;constructor(): *&lt;/em&gt;&lt;br&gt;
We may need to use a constructor() method to initialize our component before we begin the mounting step. When we need to initialize state and bind methods to our component, we use this. This is the only location where this.state is assigned explicitly.&lt;/p&gt;

&lt;p&gt;static getDerivedStateFromProps()&lt;br&gt;
This is one of the more recent lifecycle methods to be introduced by the React team.&lt;br&gt;
This will be a safer replacement to the previous componentWillReceiveProps() lifecycle function.&lt;br&gt;
It is invoked right before the render() method is called.&lt;/p&gt;

&lt;p&gt;This is a static function that does not have access to the "this" variable. getDerivedStateFromProps() generates a state-updating object in response to prop changes. It may return null if there is no change in status.&lt;/p&gt;

&lt;p&gt;This approach is likewise only available in rare circumstances where the state of a component is affected by changes in its props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;render():&lt;/strong&gt;&lt;br&gt;
The render() method seems to be the most commonly used method in the lifecycle. It can be found in all React classes. This is due to the fact that with React, the only needed function within a class component is render().&lt;/p&gt;

&lt;p&gt;It manages the rendering of your component to the user interface, as the name implies. It happens while you're installing and upgrading your component.&lt;/p&gt;

&lt;p&gt;An example of a simple render() in React is shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--InePA16V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxednvh78mssthopc15m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--InePA16V--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxednvh78mssthopc15m.png" alt="Image description" width="880" height="465"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The render() function, as you can see in the sample above, returns JSX that is shown in the UI. If there is nothing to render for that component, render() might also return null.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;componentDidMount():&lt;/strong&gt;&lt;br&gt;
componentDidMount() is the last function in this phase. After the render function has completed, this method will be called immediately. This is where we interface directly with the browser if we need to. We can perform an API request and use the answer to update the state of the components. We can populate the content with information obtained from another endpoint. SetState() should be used in this case since it will re-call the render method and manage asynchronous activities like fetch requests.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-2-updating"&gt;
  &lt;/a&gt;
  Phase 2: Updating
&lt;/h2&gt;

&lt;p&gt;This second phase illustrates when a component's props or state change and it has to update. These modifications can be made within the component or via the backend. The render function will be triggered again as a result of these modifications.&lt;/p&gt;

&lt;p&gt;The first method called in this phase is getDeprivedStateFromProps(). This is the same procedure that was employed during the mounting process. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;shouldComponentUpdate():&lt;/strong&gt;&lt;br&gt;
When you don't want React to render your state or prop updates, this lifecycle might be useful.&lt;/p&gt;

&lt;p&gt;By default, the component re-renders whenever setState() is used. The shouldComponentUpdate() function informs React whether or not a component is impacted by state and prop changes.&lt;/p&gt;

&lt;p&gt;Keep in mind that this lifecycle function should only be utilized when specific speed enhancements are required. In the shouldComponentUpdate() lifecycle, you can't change the state of a component.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;getSnapshotBeforeUpdate()&lt;/strong&gt;&lt;br&gt;
Another interesting lifecycle function released in React lately is getSnapshotBeforeUpdate(). &lt;/p&gt;

&lt;p&gt;It's called just when the DOM is about to be changed. componentDidUpdate() receives the value returned from getSnapshotBeforeUpdate().&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;componentDidUpdate():&lt;/strong&gt;&lt;br&gt;
This is the last method called in this phase. It accepts the same props and state variables as the previous method, but it also accepts the return value getSnapshotBeforeUpdate() as a third argument (if present).&lt;/p&gt;

&lt;p&gt;It's usually utilized to perform extra fetch queries if the current and previous props and state values are compared. As a result, setState may be used within a conditional expression.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#phase-3-unmounting"&gt;
  &lt;/a&gt;
  Phase 3: Unmounting
&lt;/h2&gt;

&lt;p&gt;The component is finally unmounted from the DOM in the unmounting process. The lifespan of a component comes to an end at this point. We only have one lifecycle method accessible to us at this time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;componentWillUnmount():&lt;/strong&gt;&lt;br&gt;
This lifecycle method is invoked shortly before the component is unmounted and deleted, as the name implies. If you need to undertake any cleanup work, this is the place to do it.&lt;/p&gt;

&lt;p&gt;We can't execute setState() during this lifecycle function since this component will never be re-rendered.&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>React Virtual DOM and diffing- algorithm Simplified</title>
      <author>Nasirul Islam</author>
      <pubDate>Wed, 22 Dec 2021 09:56:08 +0000</pubDate>
      <link>https://dev.to/nasirulislam/react-virtual-dom-and-diffing-algorithm-simplified-6l1</link>
      <guid>https://dev.to/nasirulislam/react-virtual-dom-and-diffing-algorithm-simplified-6l1</guid>
      <description>&lt;h2&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React:
&lt;/h2&gt;

&lt;p&gt;React is JavaScript open-source library. Using which we can make various interactions in the UI. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsx"&gt;
  &lt;/a&gt;
  JSX:
&lt;/h2&gt;

&lt;p&gt;React gives us a markup syntax of its own, with which we can create a react element, called JSX. That is, JavaScript XML. It looks like HTML but not HTML. &lt;/p&gt;

&lt;p&gt;React generates HTML code with JSX. Although we write the syntax of JSX inside the JavaScript file, although JavaScript does not understand JSX, we have to use a transpiler. For example Babel. Babel converts JSX codes to JavaScript. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#virtual-dom"&gt;
  &lt;/a&gt;
  Virtual DOM:
&lt;/h2&gt;

&lt;p&gt;React creates elements for itself using its createsElements () function. By combining all the elements, he creates a separate dom inside himself. This dom is called Virtual Dom. React's virtual dom basically renders as much as the browser's dom has changed. &lt;/p&gt;

&lt;p&gt;We can imagine the Virtual Dom as a simple tree. The different notes of which are one component. Whenever we change the state of a component, a tree is created first. Where the modified component and its child components are reconstructed. That is, React has two representations of the virtual dom. One is the state before it, and the other is the state after the change. React compares these two conditions. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diffingalgorithm"&gt;
  &lt;/a&gt;
  Diffing-Algorithm:
&lt;/h2&gt;

&lt;p&gt;React uses the "Diff" algorithm to do this comparison. With that, React can understand which places have changed. React then changes only the part of the dom where the change was made. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion:
&lt;/h2&gt;

&lt;p&gt;Attempts have been made to simply explain the virtual DOM and diffing-algorithm without any explanation.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Reach out to me on:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://nasirul-islam.netlify.app/"&gt;Portfolio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Nasirul-Islam"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/nasirul866/"&gt;LinkedIn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>How To Get Hired Without Applying</title>
      <author>Yehezkiel Gunawan</author>
      <pubDate>Wed, 22 Dec 2021 09:54:55 +0000</pubDate>
      <link>https://dev.to/yehezkielgunawan/how-to-get-hired-without-applying-lak</link>
      <guid>https://dev.to/yehezkielgunawan/how-to-get-hired-without-applying-lak</guid>
      <description>&lt;h2&gt;
  &lt;a href="#disclaimer"&gt;
  &lt;/a&gt;
  Disclaimer
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;This is just my experience when finding a new job as a front-end engineer. Maybe it seems opinionated, but at least it can be a reference for you. I will tell my story from a front-end engineer perspective.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;The story starts when I was graduated from college in 2020. That is the moment when the Covid-19 pandemic began. I have no idea what to do after graduating because I feel overwhelmed with what subject can be focused on.&lt;/p&gt;

&lt;p&gt;It changes when a friend told me that there's a free scholarship course at &lt;a href="https://www.dicoding.com/"&gt;Dicoding Indonesia&lt;/a&gt;. So I registered for that scholarship and got free access to the class. I found that I enjoy crafting something using HTML, CSS, and Javascript at that time.&lt;/p&gt;

&lt;p&gt;Soon, I decided to learn some frontend frameworks like Angular, Vue, and React. I started to learn those frameworks by making a simple to-do list. Actually, among those frameworks, I mostly like React as my main framework, but suddenly I got an offer from a company that uses Angular in their codebase. I worked there for about 1 year and 3 months.&lt;/p&gt;

&lt;p&gt;During my first journey as a full-time front-end engineer, I realized that the bigger the community of a framework or library, the bigger also the support system. I struggled enough when I have to do some troubleshooting using Angular and it takes more time than when I used React (in my personal project).&lt;/p&gt;

&lt;p&gt;So, I started to re-learn React again after working for a year. Luckily, the company also considered migrating to React because some of the frontend engineers complained and told the same reason as I think before. We learned to React together at the office almost every day then.&lt;/p&gt;

&lt;p&gt;I learn React by making some mini-projects and publishing them on Linkedin. Then, many jobs offers come to me through phone calls and email until I finally found the suitable one for me. Actually, most of the projects are not spectacular, I even made it just for myself at first.&lt;/p&gt;

&lt;p&gt;I think similar things may work for you if currently, you're searching for a new job as a developer. Here are my tips based on my experiences. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#start-with-crud"&gt;
  &lt;/a&gt;
  Start with CRUD
&lt;/h2&gt;

&lt;p&gt;Everything in the developing world is about to Create, Read, Update, and Delete &lt;strong&gt;(CRUD)&lt;/strong&gt;. When I re-learned React again after a long time, I started again with CRUD. I just follow the &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Tools_and_testing/Client-side_JavaScript_frameworks/React_getting_started"&gt;MDN React To-do list tutorial&lt;/a&gt; and re-code it in my VS Code. This seems very mainstream, but it helps me so much when I make a new project.&lt;/p&gt;

&lt;p&gt;This trick also works when you're learning a new framework. You can only need to think about how to Create, Read, Update, and Delete the data using the framework you learn while you trying to understand the syntax too.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#build-your-online-presence"&gt;
  &lt;/a&gt;
  Build Your Online Presence
&lt;/h2&gt;

&lt;p&gt;If you want to get recognized by the recruiter, you have to make yourself recognizable by building your online presence. As a developer, you can start by building your own site, developing &amp;amp; publishing your project on Linkedin and Github, and writing some articles or blogs.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#build-your-own-site"&gt;
  &lt;/a&gt;
  Build Your Own Site
&lt;/h3&gt;

&lt;p&gt;As a frontend engineer, you can start building it by making your own personal site using your framework or library preferences. For example, after I learned the basic CRUD, I push myself to build my own website using Next.js. You can access it at &lt;a href="https://yehezgun.com"&gt;yehezgun.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You don't have to make a spectacular one, just be yourself. Your site is your playground, don't be too a perfectionist. I even still trial and error in modifying something at my current personal site.&lt;/p&gt;

&lt;p&gt;You may be asked, &lt;code&gt;Why do I need to make my own site?&lt;/code&gt;.  Actually, there are no formal rules here, back to your preferences. For me, I can do some experiments on my own website because it's mine and &lt;strong&gt;I have full control of it.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-some-mini-projects"&gt;
  &lt;/a&gt;
  Make Some Mini Projects
&lt;/h3&gt;

&lt;p&gt;In my opinion, this is the most effective way to understand the technical concept and even get hired. If you're confused about what project you should make, you can &lt;strong&gt;start to make a project that can be used by yourself.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For example, I started to make my own Next.js starter template. You can check it at &lt;a href="https://yehez-nextchakra-starter.yehezgun.com/"&gt;https://yehez-nextchakra-starter.yehezgun.com/&lt;/a&gt;. Why did I make it? The story began when I need to make a new project using Next.js, I wasted my time just doing some repetitive things like ESLint &amp;amp; husky config, base navbar, and base layout. So I decided to make my own starter template as a base template, so I can focus on the development process. You can read the details on my past article &lt;a href="https://yehezgun.com/articles/why-making-a-starter-template-matters"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#publish-your-project"&gt;
  &lt;/a&gt;
  Publish Your Project
&lt;/h3&gt;

&lt;p&gt;The next step is &lt;strong&gt;show your work&lt;/strong&gt;. I have to say, it's mandatory for a developer to have a Github (or Gitlab) account. GitHub is a great way to showcase your projects and show what other technologies you are interested in — by forking, starring, or contributing to them. It also gives other people an idea about the amount of work you have been putting in, by the number of contributions shown on your profile &lt;a href="https://medium.com/streamwriter/creating-an-online-presence-as-a-developer-369ec79fb311"&gt;(Mircea Oprea, 2019)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The other way to publish your project is through Linkedin. You can use this platform to attract the recruiter when they see your published project and offer you the job. For example, I re-code my personal site and publish it as a Linkedin Post &lt;a href="https://www.linkedin.com/feed/update/urn:li:activity:6878601141693886465/"&gt;here&lt;/a&gt;. Just in several days, I got so many private chats on Linkedin which are job offers. And finally, I can get a new job because of this simple thing.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#share-your-idea-or-story-through-article"&gt;
  &lt;/a&gt;
  Share Your Idea or Story Through Article
&lt;/h3&gt;

&lt;p&gt;Why does writing a blog matter? By writing a tech blog that contains some tutorial, story, or just an idea, you're helping other developers out there to generate new insight or even help them to solve their problems. In other words, you have contributed to the developer world when you write a technical blog.&lt;/p&gt;

&lt;p&gt;You can start writing a blog by writing a process while making a project or making some simple tutorials. For example, I wrote an article about how to self-host the Notion API Worker, you can read it &lt;a href="https://yehezgun.com/articles/how-to-self-host-notion-api-worker"&gt;here&lt;/a&gt;. Without realizing it, I've helped some developers to self-host their own Notion API Worker when they want to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For me, writing can sharpen my understanding of something,&lt;/strong&gt; because you read twice or even several times when you write. You will surely read your own writings before publishing them and make sure the readers understand them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#join-the-developers-community-or-event"&gt;
  &lt;/a&gt;
  Join The Developers Community or Event
&lt;/h2&gt;

&lt;p&gt;This also gives a significant impact on my career as a front-end engineer. In early 2021, I joined a big event in Indonesia held by Google and the partner companies. Yes, you're right I joined Bangkit Academy as a volunteer.&lt;/p&gt;

&lt;p&gt;Yeah I know, I got nervous and feel inferior because of too many pro developers who join as volunteers. The most challenging moment is when I have to co-assist my partner in a live teaching session. His coding and technical skill amazed me because he can explain all the technical processes fluently. But, I'm proud for joining this event because I can &lt;strong&gt;enlarge my networking with other developers&lt;/strong&gt; and learn a lot of things from them.&lt;/p&gt;

&lt;p&gt;Sometimes this thing can give you a new opportunity if they offer a new job in their working place.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing"&gt;
  &lt;/a&gt;
  Closing
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Build and strengthen your online presence. Soon or later, the opportunity will reach you. Just be consistent and keep going!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I did all those tips since September 2021, and &lt;strong&gt;it works&lt;/strong&gt;. Finally, after I struggled to find a new job opportunity, I found one. I even didn't apply it by myself. A recruiter reached me through my Linkedin and I follow the recruitment process. Indeed, I didn't need to do the live code session because I showed my previous work in the user interview session. So it can be called a &lt;em&gt;live code review session&lt;/em&gt; because they just review my previous works.&lt;/p&gt;

&lt;p&gt;Hope my story can inspire you, especially those who struggled to find a new job. Sorry if there's some grammar error here, I'm still an amateur at writing articles in English.&lt;/p&gt;

</description>
      <category>portfolio</category>
      <category>frontend</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How To Event Stream Data From Your Nuxt.Js App Using RudderStack</title>
      <author>RudderStack</author>
      <pubDate>Wed, 22 Dec 2021 09:53:03 +0000</pubDate>
      <link>https://dev.to/rudderstack/how-to-event-stream-data-from-your-nuxtjs-app-using-rudderstack-4a61</link>
      <guid>https://dev.to/rudderstack/how-to-event-stream-data-from-your-nuxtjs-app-using-rudderstack-4a61</guid>
      <description>&lt;p&gt;&lt;a href="https://rudderstack.com/"&gt;RudderStack&lt;/a&gt; is an open-source Customer Data Pipeline that enables you to track events from your web, mobile, and server-side sources and send them to your whole customer data stack in real-time. We have also open-sourced our primary GitHub repository - &lt;a href="https://github.com/rudderlabs/rudder-server"&gt;rudder-server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This blog is a guide that will help you to easily integrate your &lt;a href="https://nuxtjs.org/"&gt;Nuxt.js&lt;/a&gt; app with RudderStack using our &lt;a href="https://github.com/rudderlabs/rudder-sdk-js"&gt;JavaScript SDK&lt;/a&gt;. This integration allows you to track real-time user events and send them to your preferred destinations.&lt;/p&gt;

&lt;p&gt;You can instrument event streams on your Nuxt.js app using the following three key steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt; Integrate Nuxt.js app with RudderStack JavaScript SDK and set up the tracking code&lt;/li&gt;
&lt;li&gt; Set up a tool or warehouse destination in RudderStack to route all the event data in real-time&lt;/li&gt;
&lt;li&gt; Deploy your Nuxt.js app and verify the event stream&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-Requisites
&lt;/h2&gt;

&lt;p&gt;We assume you have installed and set up your Nuxt.js app. If you haven't, visit the &lt;a href="https://nuxtjs.org/docs/2.x/get-started/installation/"&gt;official Nuxt.js documentation&lt;/a&gt; to get started.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-integrating-your-nuxtjs-app-with-rudderstack-javascript-sdk"&gt;
  &lt;/a&gt;
  Step 1: Integrating Your Nuxt.Js App With RudderStack JavaScript SDK
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#creating-a-source-in-rudderstack"&gt;
  &lt;/a&gt;
  Creating A Source In RudderStack
&lt;/h3&gt;

&lt;p&gt;First, you will need to set up a JavaScript source in your RudderStack dashboard that you will use to track events from your Nuxt.js app. Follow these steps to set up the source:&lt;/p&gt;

&lt;p&gt;1. Log into your &lt;a href="https://app.rudderstack.com/"&gt;RudderStack dashboard&lt;/a&gt;. (If you're new to RudderStack, &lt;a href="https://app.rudderlabs.com/signup?type=freetrial"&gt;sign up here&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;2. On successful login, you should see the following dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y0-hftpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d103d2c6452dcee6f44c27ee8087e864cdbb84a2-630x319.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y0-hftpu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d103d2c6452dcee6f44c27ee8087e864cdbb84a2-630x319.png" alt="" width="630" height="319"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3. Make a note of the Data Plane URL. You will need this URL to integrate your Nuxt.js app with RudderStack.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--STXHj_U2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/654cffa6fa2c334832f4281927f69d3d6ce49fd7-518x194.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--STXHj_U2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/654cffa6fa2c334832f4281927f69d3d6ce49fd7-518x194.png" alt="" width="518" height="194"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4. Next, create a Source by simply clicking on the Add Source button. You can also click on the Directory option in the left nav bar and select Event Streams under Sources, as shown. Then, select JavaScript.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6bnqtScS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/e906f26d6b0132d870057e3700cff46b4f9a107c-630x327.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6bnqtScS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/e906f26d6b0132d870057e3700cff46b4f9a107c-630x327.png" alt="" width="630" height="327"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5. Assign a name to your Source and click on Next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2wshxJYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d0e2ef39955da5294c0984f3bba7f429c52dd18c-630x195.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2wshxJYM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d0e2ef39955da5294c0984f3bba7f429c52dd18c-630x195.png" alt="" width="630" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6. Your JavaScript source is now configured and ready to track events. Note the Write Key associated with this source. You will need it to set up the RudderStack integration with your Nuxt.js app.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--EOrMCYcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/00105d7adc808d9f3f0323050edbcb516d7703ae-630x149.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EOrMCYcc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/00105d7adc808d9f3f0323050edbcb516d7703ae-630x149.png" alt="" width="630" height="149"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#integrating-your-nuxtjs-app-with-rudderstack"&gt;
  &lt;/a&gt;
  Integrating Your Nuxt.Js App With RudderStack
&lt;/h3&gt;

&lt;p&gt;Integrate RudderStack with your Nuxt.js app and set up the tracking code following steps given below:&lt;/p&gt;

&lt;p&gt;Modify the &lt;code&gt;nuxt.config.js&lt;/code&gt; file in your app's folder to include the following script:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gist:Veenap/3626e9bac218dde5a66fc2583eb31bd1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sJnxV-gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/0087b9aa1e78b4493063269ba9253ff8df9c9cd4-1318x951.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sJnxV-gT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/0087b9aa1e78b4493063269ba9253ff8df9c9cd4-1318x951.png" alt="" width="880" height="635"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Important: You can refer to our sample Nuxt.js app present in our &lt;a href="https://github.com/rudderlabs/rudder-analytics-nuxt"&gt;RudderStack Nuxt.js repository&lt;/a&gt; for more information on modifying these files.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-2-creating-a-destination-tool-in-rudderstack-for-routing-your-nuxtjs-app-events"&gt;
  &lt;/a&gt;
  Step 2: Creating A Destination Tool In RudderStack For Routing Your Nuxt.Js App Events
&lt;/h2&gt;

&lt;p&gt;RudderStack supports over &lt;a href="https://rudderstack.com/integration/"&gt;80 third-party tools&lt;/a&gt; and platforms to which you can securely send your tracked events. In this tutorial, we will route the Nuxt.js app events to &lt;a href="https://docs.rudderstack.com/destinations/google-analytics-ga"&gt;Google Analytics&lt;/a&gt;. To add Google Analytics as a destination in RudderStack, follow the steps given below:&lt;/p&gt;

&lt;p&gt;1. In the left navigation bar of your Rudderstack dashboard, click on Destinations and select Add Destination. Since we have already configured a source, you can simply click on the source and click on the Add Destination option, as shown:&lt;/p&gt;

&lt;p&gt;Note: You can use Connect Destinations option if you have already configured a destination in RudderStack and want to send your event data to that platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GJbjexJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/bb027d1e3ad7665d7f7bdf68bd3df7da833daae8-630x316.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GJbjexJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/bb027d1e3ad7665d7f7bdf68bd3df7da833daae8-630x316.png" alt="" width="630" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2. Next, choose Google Analytics as your Destination.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---aZ1R3Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/dee0813b1679e76a5fb623df69bfd21dafd7e804-630x316.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---aZ1R3Z8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/dee0813b1679e76a5fb623df69bfd21dafd7e804-630x316.png" alt="" width="630" height="316"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3. Add a name to your destination and click on Next, as shown:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SAFrrq3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/638e3e2ef556357ec424b5ec30d3943504fb9827-630x317.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SAFrrq3h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/638e3e2ef556357ec424b5ec30d3943504fb9827-630x317.png" alt="" width="630" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4. Now, connect the JavaScript source that we have already configured for this tutorial.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7qCLpcF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/22da8027cb80f55cc4c81cc56e8e49aa30996b89-630x317.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7qCLpcF4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/22da8027cb80f55cc4c81cc56e8e49aa30996b89-630x317.png" alt="" width="630" height="317"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5. In the Connection Settings, configure your Google Analytics destination with your Google Analytics Tracking ID and other optional settings, as shown below. Then, click on Next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kvP1GbtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/53654b0aee376a392973f2b0f7c55b66a2749272-630x334.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kvP1GbtH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/53654b0aee376a392973f2b0f7c55b66a2749272-630x334.png" alt="" width="630" height="334"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6. You can also transform your events before sending them to Google Analytics. For more information on this feature, check out our &lt;a href="https://docs.rudderstack.com/adding-a-new-user-transformation-in-rudderstack"&gt;documentation&lt;/a&gt; on User Transformations.&lt;/p&gt;

&lt;p&gt;7. Voila! Google Analytics is now configured as a destination. You should now see the following source-destination connection in your dashboard:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CnC7s9Pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/6cd115d36f1604e2a795e207d55fd4c9f2f96f3b-630x244.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CnC7s9Pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/6cd115d36f1604e2a795e207d55fd4c9f2f96f3b-630x244.png" alt="" width="630" height="244"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#alternate-step-2-create-a-warehouse-destination-in-rudderstack-for-your-nuxtjs-app-events"&gt;
  &lt;/a&gt;
  (Alternate) Step 2: Create A Warehouse Destination In RudderStack For Your Nuxt.Js App Events
&lt;/h2&gt;

&lt;p&gt;mportant: &lt;em&gt;Before you configure a data warehouse as a destination in RudderStack, you will need to set up a new project in your data warehouse. Also, you need to create a new RudderStack user role with the relevant permissions.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Follow our&lt;/em&gt; &lt;a href="https://docs.rudderstack.com/data-warehouse-integrations"&gt;&lt;em&gt;docs&lt;/em&gt;&lt;/a&gt; &lt;em&gt;to get detailed and step-by-step instructions on how to do it for your preferred data warehouse.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We will set up a &lt;a href="https://rudderstack.com/integration/bigquery/on"&gt;Google BigQuery warehouse destination&lt;/a&gt; for this tutorial to route all the events from our Nuxt.js app. You can set up a BigQuery project with the required permissions for the service account by following &lt;a href="https://docs.rudderstack.com/data-warehouse-integrations/google-bigquery"&gt;our documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have set up the project and assigned the required user permissions, follow these steps:&lt;/p&gt;

&lt;p&gt;1. From the Destinations Directory, select Google BigQuery:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--p_8LoYr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d901af95b4b3a046ea62b4e7354473f7a4932deb-630x328.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--p_8LoYr4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d901af95b4b3a046ea62b4e7354473f7a4932deb-630x328.png" alt="" width="630" height="328"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2. Add a name to your Destination and click on Next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4W26QLJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/fdf892d0f37e4c6c9ec4c31bd48253b26a6da774-630x290.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4W26QLJB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/fdf892d0f37e4c6c9ec4c31bd48253b26a6da774-630x290.png" alt="" width="630" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3. Connect to JavaScript source from which we will track our Nuxt.js app events. Then, click on Next.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--19unrcX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/ae4a58bd7965bf9088d15e2b85233639fd7fbc67-630x290.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--19unrcX---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/ae4a58bd7965bf9088d15e2b85233639fd7fbc67-630x290.png" alt="" width="630" height="290"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4. Specify the Connection Credentials. Enter the BigQuery Project ID and the Staging Bucket Name. You can refer to these &lt;a href="https://docs.rudderstack.com/data-warehouse-integrations/google-bigquery#setting-up-google-bigquery"&gt;instructions&lt;/a&gt; to get this information.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rDqV_qPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/e92473af23c60ee47bdaef090e8131796594864c-357x834.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rDqV_qPo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/e92473af23c60ee47bdaef090e8131796594864c-357x834.png" alt="" width="357" height="834"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5. Lastly, copy the contents of the private JSON file. Find more information on how to do this in our &lt;a href="https://docs.rudderstack.com/data-warehouse-integrations/google-bigquery#setting-up-the-service-account-for-rudderstack"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That's all! You have successfully set up BigQuery as a warehouse destination in RudderStack.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-3-deploying-your-nuxtjs-app-and-verifying-the-event-stream"&gt;
  &lt;/a&gt;
  Step 3: Deploying Your Nuxt.Js App And Verifying The Event Stream
&lt;/h2&gt;

&lt;p&gt;We have successfully configured our event source and destination. Let's verify if our event stream works correctly. To do so, let's deploy our Nuxt.js application and test if the events are tracked by the JavaScript source and delivered to our Google Analytics destination.&lt;/p&gt;

&lt;p&gt;Follow these steps to find:&lt;/p&gt;

&lt;p&gt;1. On your Terminal or cmd, navigate to the folder containing your Nuxt.js app.&lt;/p&gt;

&lt;p&gt;2. To deploy the app, run &lt;code&gt;npm run dev&lt;/code&gt; command, as shown:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9Xqkjo0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/44544a627fb9d27f96e100470809ebe5928ef0da-1232x777.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9Xqkjo0T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/44544a627fb9d27f96e100470809ebe5928ef0da-1232x777.png" alt="" width="880" height="555"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3. Open your Nuxt.js app by visiting the URL &lt;a href="http://localhost:3000/"&gt;http://localhost:3000&lt;/a&gt; on your browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kIScsJEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d2b35ef623efbb081ad36bdf0bd4437a928c2e20-1545x944.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kIScsJEc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/d2b35ef623efbb081ad36bdf0bd4437a928c2e20-1545x944.png" alt="" width="880" height="538"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;4. To verify if &lt;code&gt;rudder-analytics.js&lt;/code&gt; (RudderStack's JavaScript SDK) has loaded correctly, go to your browser's Developer tools and navigate to the Network tab. The following screenshot highlights this option for Google Chrome:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SlsiFsaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/60eec290ea67ce500b5705ce5226cb7fcc030449-680x623.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SlsiFsaL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/60eec290ea67ce500b5705ce5226cb7fcc030449-680x623.png" alt="" width="680" height="623"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;5. Check if RudderStack can track the different pageviews and clicks by clicking on the Live Events tab of your JavaScript source on the RudderStack dashboard page:&lt;/p&gt;

&lt;p&gt;Note: After deploying your app, there can sometimes be a lag before events start sending and are visible in your dashboard and destination. Don't worry. All events are captured and sent; just be aware that they can take a few minutes to show up.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C-NycAIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/1859e5a94847c323bd450e19b15fcb46b8973bee-630x272.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C-NycAIc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/1859e5a94847c323bd450e19b15fcb46b8973bee-630x272.jpg" alt="" width="630" height="272"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;6. Brilliant! RudderStack has successfully tracked and captured the events:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A8cYnK9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/c29ed69dbb0935d032f269528f9e7e1d02ded4e8-1600x828.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A8cYnK9u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/c29ed69dbb0935d032f269528f9e7e1d02ded4e8-1600x828.png" alt="" width="880" height="455"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;7. Next, let's check if the events are sent to our Google Analytics destination. Go to your Google Analytics dashboard and navigate to the Realtime - Events option.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cXkmtlex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/c97b3127233624468b8655d287efcc380b5236ad-1600x505.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cXkmtlex--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.sanity.io/images/mwovquhr/production/c97b3127233624468b8655d287efcc380b5236ad-1600x505.png" alt="" width="880" height="278"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We can see one active user on our Nuxt.js app, and the track event is visible too. This shows that the event has been tracked and delivered successfully. Similarly, you should also receive the event in your Google BigQuery warehouse.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;Monitoring in-app data is crucial to understand the real performance of your app and the user behavior. The insights you gain from this monitoring enable you to update your app to your customers' needs. Continuously adapting your app to maintain likeability is an important trait of a successful app. RudderStack helps you achieve this securely.&lt;/p&gt;

&lt;p&gt;In this tutorial, we learned how to instrument real-time event data on your Nuxt.js App using RudderStack. We integrated the Nuxt.js app with RudderStack JS SDK and learned how to set up the tracking code. We also set up Google Analytics as a destination in RudderStack to route all event streams in real-time and also verify successful delivery of the event streams.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign Up For Free And Start Sending Data
&lt;/h3&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial"&gt;Get Started&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nuxt</category>
      <category>eventstream</category>
      <category>dataanalytics</category>
      <category>cdp</category>
    </item>
    <item>
      <title>RudderStack JavaScript SDK Enhancements: Beacon Support</title>
      <author>RudderStack</author>
      <pubDate>Wed, 22 Dec 2021 09:47:36 +0000</pubDate>
      <link>https://dev.to/rudderstack/rudderstack-javascript-sdk-enhancements-beacon-support-2lk2</link>
      <guid>https://dev.to/rudderstack/rudderstack-javascript-sdk-enhancements-beacon-support-2lk2</guid>
      <description>&lt;p&gt;The &lt;a href="https://docs.rudderstack.com/rudderstack-sdk-integration-guides/rudderstack-javascript-sdk/"&gt;RudderStack Javascript SDK&lt;/a&gt;, at its core, is built to provide guaranteed delivery of events. The main challenges around this are tracking event data on the server and network failure, page unloads, etc. This post will talk about our latest enhancement to the JS SDK - adding Beacon support making it more efficient, fast, and easy to use.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#different-mechanisms-we-use-to-mitigate-challenges-around-tracking-event-data"&gt;
  &lt;/a&gt;
  Different Mechanisms we use to Mitigate Challenges Around Tracking Event Data.
&lt;/h2&gt;

&lt;p&gt;Until recently, we were only supporting sending event data to the server using &lt;code&gt;XMLHttpRequest&lt;/code&gt; with a persistent queue. Whenever the SDK receives an event, it offloads it to the queue and returns immediately. The queue keeps on pulling event data and sends it to the server using &lt;code&gt;XMLHttpRequest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To keep in sync with other popular event tracking tags out there, we enhanced our SDK to support sending event data using the browser &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon/"&gt;Beacon API&lt;/a&gt;. We have now added support for sending the event payload using &lt;code&gt;the navigator.sendBeacon&lt;/code&gt; browser utility, which asynchronously sends a small amount of data over HTTP to the RudderStack server.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros-and-cons-of-using-beacon-api"&gt;
  &lt;/a&gt;
  Pros and Cons of Using Beacon API
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  With all the benefits it has over fetch and &lt;code&gt;XMLHttpRequest&lt;/code&gt;, like being a more performant, Beacon queue to process sending events when the browser is less busy, etc.&lt;/li&gt;
&lt;li&gt;  Our SDK is sending event data as JSON, which allowed CORS optimization on the Beacon's part.&lt;/li&gt;
&lt;li&gt;  Lesser instrumentation code compared to other event sending mechanisms, leading to less compile time for the SDK. We wanted to drop our persistent queue further to reduce the SDK size further, but we are still using it due to the below-mentioned limitation; we can call it the wrapper queue.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#cons"&gt;
  &lt;/a&gt;
  Cons
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;  Failed event retries are not possible with a Beacon request as it doesn't support getting the response code.&lt;/li&gt;
&lt;li&gt;  Beacon requests have a size limit.&lt;/li&gt;
&lt;li&gt;  The Beacon queue can get full (related to point 2 above). We wanted our SDK to support sending events for this scenario. When we failed to push event data to the Beacon queue, we kept our persistent queue to retry, pushing such failed events to the Beacon queue. Once some events are being sent to the server, Beacon can accept more events. This is required for sites that track more events/sec through our SDK than Beacon can dequeue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pushing events to the Beacon queue is faster compared to the XHR instrumentation. You may see some performance improvements in the JavaScript SDK.&lt;/p&gt;

&lt;p&gt;The Beacon requests are optimized because the browser waits until the CPU load is lower or until the network is free before making the actual requests. This can lead to better website performance.&lt;/p&gt;

&lt;p&gt;Read more about other JavaScript SDK enhancements in our &lt;a href="https://docs.rudderstack.com/rudderstack-sdk-integration-guides/rudderstack-javascript-sdk/javascript-sdk-enhancements#why-use-sendbeacon-to-send-your-event-payload/"&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#sign-up-for-free-and-start-sending-data"&gt;
  &lt;/a&gt;
  Sign up for Free and Start Sending Data
&lt;/h2&gt;

&lt;p&gt;Test out our event stream, ELT, and reverse-ETL pipelines. Use our HTTP source to send data in less than 5 minutes, or install one of our 12 SDKs in your website or app. &lt;a href="https://app.rudderlabs.com/signup?type=freetrial/"&gt;Get started&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>beaconsupport</category>
      <category>datawarehouse</category>
      <category>cdp</category>
    </item>
    <item>
      <title>6 Blog Writing Tips Beginners Should Keep on Their Tips</title>
      <author>Steve smith</author>
      <pubDate>Wed, 22 Dec 2021 09:39:56 +0000</pubDate>
      <link>https://dev.to/steve088smith/6-blog-writing-tips-beginners-should-keep-on-their-tips-ooc</link>
      <guid>https://dev.to/steve088smith/6-blog-writing-tips-beginners-should-keep-on-their-tips-ooc</guid>
      <description>&lt;p&gt;The internet has endless possibilities, and it is an invaluable resource for those who want a platform to showcase their content creation skills. One such category of content are the blogs.&lt;/p&gt;

&lt;p&gt;Blogging is a great way to fulfil your love for writing. It gives you an unmatched artistic freedom where you get to choose what you write or how you write, while being free of judgments. However, like all other activities, the initial phase of &lt;a href="https://www.contentwriting.us/blog-writing-services"&gt;blog writing&lt;/a&gt; can get a bit tricky. That is where we come in.&lt;/p&gt;

&lt;p&gt;If you’re new to the domain of blog writing services and struggling to get a hold of the basics, then we have got you covered.&lt;/p&gt;

&lt;p&gt;We present you with &lt;a href="https://www.contentwriting.us/blog-writing-services"&gt;blog writing tips&lt;/a&gt; that would make your work easier. Go through them to develop a clear idea of what your thought process should be before you start to put in words to your thoughts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#here-are-the-6-blog-writing-tips-to-simplify-the-beginners-work"&gt;
  &lt;/a&gt;
  Here are the 6 blog writing tips to simplify the beginner’s work:
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Outline before you scribe -&lt;/strong&gt; In a blog, you are the one who begins and ends. This means there is no one to organize or divide your content. To make your work easier, create a skeleton draft or plan up your content to make it easier for you to fill it up later. This not only makes it simplifies your work, rather it also assists your readers to comprehend what you want to convey.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write what you like -&lt;/strong&gt; We can understand that there is a clash between what you want and what you have to do, but then creativity isn’t something that can be forced upon, right? Communicate directly to the higher echelon with regard to getting allocated what you want to write on, trust us this would be beneficial for both parties. How to convince them? Well for that you have to consult your peer mates and seniors.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time is of the essence -&lt;/strong&gt; I wasn’t surprised when I got to know that writers are the worst procrastinators. Might be because I myself ain’t no exception to it. However, this issue might be bypassed, if not entirely cured. Use simple tricks like setting up a timer, working on an unplugged laptop, or starting to work at a certain time before you have a plan to go out with your friends, family, or paramour. The last way might have a few repercussions, but trust me, it works.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speak directly to the audience -&lt;/strong&gt;The best feature about a blog, you don’t have to worry about a set writing trend or pattern. Blogs writing styles evolve continually and there is no set course that you need to follow. Speak directly to the audience like you are sitting right in front of them. This in turn enhances your blog’s connection and the engagement quotient that keeps the audience hooked.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keep Jargon in Check -&lt;/strong&gt; The netizens who are visiting your blog are doing so with the hopes of getting some help. Your duty is to make it easier for them, and not putting in a bunch of technicalities does not help. Keep your jargons at an arm’s length and do ensure that if you’re using them then you at least provide a footnote or an explanation which would help the readers to comprehend it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prune before you submit -&lt;/strong&gt; Once you’re done putting in the last full stop, don’t just shut down your laptop and do the victory walk. Take some time post completion, and make the necessary tweaks which would trim down the content to keep it relevant and engaging for the viewer.&lt;/p&gt;

&lt;p&gt;To sum it all up, blog writing provides you with a lot of freedom. But when you’re professionally engaged in &lt;a href="https://www.contentwriting.us/blog-writing-services"&gt;blog writing services&lt;/a&gt; then you have to follow a few guidelines. This is by no way a shackle, rather they are a beacon which in turn help you to develop your content writing skills further.&lt;/p&gt;

&lt;p&gt;Ref URL - &lt;a href="https://contentwriting950500.blogspot.com/2021/12/6-blog-writing-tips-beginners-should-keep-on-their-tips.html"&gt;https://contentwriting950500.blogspot.com/2021/12/6-blog-writing-tips-beginners-should-keep-on-their-tips.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>blogwriting</category>
      <category>blogwritingtips</category>
      <category>blogwritingservices</category>
      <category>writingblog</category>
    </item>
    <item>
      <title>Free Fire React JS Concepts </title>
      <author>Emon Ahmed</author>
      <pubDate>Wed, 22 Dec 2021 09:21:52 +0000</pubDate>
      <link>https://dev.to/emonahmed/free-fire-react-js-concepts-4id9</link>
      <guid>https://dev.to/emonahmed/free-fire-react-js-concepts-4id9</guid>
      <description>&lt;p&gt;Free Fire React JS Concepts. Today's Topic Discussion is &lt;code&gt;ReactJS&lt;/code&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
