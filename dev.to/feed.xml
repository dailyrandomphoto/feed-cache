<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What Are React Server Components?</title>
      <author>Kinga Hunyadi</author>
      <pubDate>Thu, 07 Jan 2021 11:00:15 +0000</pubDate>
      <link>https://dev.to/kingahunyadi/what-are-react-server-components-5g09</link>
      <guid>https://dev.to/kingahunyadi/what-are-react-server-components-5g09</guid>
      <description>&lt;p&gt;At the end of 2020 the React team shared with us their upcoming feature, called &lt;em&gt;React Server Components&lt;/em&gt;. This feature is still in research and development, it should not be used in production yet, but we can play around with it. You can find a talk and a demo shared by them &lt;a href="https://reactjs.org/blog/2020/12/21/data-fetching-with-react-server-components.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LEAofYVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/cf6ce0cd56b56cc30c2582c8f5c9b2ee/42cbc/image-1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LEAofYVz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.frontendlove.blog/static/cf6ce0cd56b56cc30c2582c8f5c9b2ee/42cbc/image-1.png" alt="server-components" title="server-components"&gt;&lt;/a&gt;&lt;/p&gt;
Created with &lt;a href="https://sketch.io/sketchpad"&gt;Sketchpad&lt;/a&gt;



&lt;p&gt;&lt;em&gt;React Server Components&lt;/em&gt; are normal React components (with some limitations, i.e. they can not use state or effects), that execute on the server. The main pain points that &lt;em&gt;Server Components&lt;/em&gt; try to improve are &lt;strong&gt;performance&lt;/strong&gt; and &lt;strong&gt;data fetching&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You might wonder how are these different from Server-Side Rendering (SSR), but actually they are complementary. SSR produces an HTML, but we still need to download all the JavaScript code. &lt;em&gt;Server Components&lt;/em&gt; use a different format, which will be then translated to HTML. This format allows to refetch our components. The state of &lt;em&gt;Client Components&lt;/em&gt; (regular components) will be preserved on refetch.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-performance" class="anchor"&gt;
  &lt;/a&gt;
  About Performance
&lt;/h3&gt;

&lt;p&gt;Almost every React application uses some third-party packages, resulting in increased bundle size and reduced performance. Of course, there are some ways to improve these problems client-side: we can include only part of the packages in our bundles or we can implement the features ourselves instead, but it might be time-consuming.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Server Components&lt;/em&gt; allow us to import third-party libraries on the server, without increasing our application’s bundle size. So we can say that &lt;em&gt;Server Components&lt;/em&gt; are &lt;strong&gt;Zero-Bundle-Size Components&lt;/strong&gt;. Components that are non-interactive and only render static content could be easily migrated to the server.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#about-data-fetching" class="anchor"&gt;
  &lt;/a&gt;
  About Data Fetching
&lt;/h3&gt;

&lt;p&gt;Another benefit is that &lt;em&gt;Server Components&lt;/em&gt; have &lt;strong&gt;full access to the backend&lt;/strong&gt;. We all know that endpoints are not always designed with the UI in mind, and we have to do additional processing on the client. By using &lt;em&gt;Server Components&lt;/em&gt; we can move the complexity to the server (but also reduce it by taking advantage of direct backend access), leaving our client-side components cleaner.&lt;/p&gt;

&lt;p&gt;We could mention many other benefits, like automatic code splitting, UX improvements, etc., but I recommend you read the &lt;a href="https://github.com/josephsavona/rfcs/blob/server-components/text/0000-server-components.md"&gt;RFC&lt;/a&gt; for an in-depth explanation. For now, let’s see an example, so we can better understand how these components work.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#before-we-begin" class="anchor"&gt;
  &lt;/a&gt;
  Before we begin...
&lt;/h3&gt;

&lt;p&gt;Two new concepts will be introduced besides &lt;em&gt;Server Components&lt;/em&gt;. Our regular React components will be called &lt;em&gt;Client Components&lt;/em&gt;, but nothing changes in how we define them. Some components do not use state, effects or backend resources, they just transform some data, we will call them &lt;em&gt;Shared Components&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As a convention, they will have suffixes that show their type:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Component.client.js (or .jsx, .tsx) - client component&lt;/li&gt;
&lt;li&gt;Component.server.js - server component&lt;/li&gt;
&lt;li&gt;Component.js - shared component&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Shared Components&lt;/em&gt;, as the name suggests, can be imported both client and server-side. &lt;em&gt;Server Components&lt;/em&gt; can import &lt;em&gt;Server&lt;/em&gt; or &lt;em&gt;Client Components&lt;/em&gt;, but &lt;em&gt;Client Components&lt;/em&gt; can not import &lt;em&gt;Server Components&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-migrate-components-to-the-server" class="anchor"&gt;
  &lt;/a&gt;
  How to Migrate Components to the Server?
&lt;/h3&gt;

&lt;p&gt;Let’s say we have a component similar to the one below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Article.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleHeader&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleHeader&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleDeatails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleDetails&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;artileId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`my-api/articles/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postedAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mm/dd/yy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleHeader&lt;/span&gt; &lt;span class="na"&gt;postedAt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleDetails&lt;/span&gt; &lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;We can see it fetches the current article from our API, it transforms the article’s date with the help of a third-party library, then renders two components (header and details). We could move &lt;em&gt;Article&lt;/em&gt; to the server, as it does not have any interaction, it only reads some data, transforms it, and renders two other components. We will ignore the other two components now, let’s say we want to keep them on the client. As we know, our server component can still import them. So the only thing we need in this case, is to add the &lt;em&gt;server&lt;/em&gt; and &lt;em&gt;client&lt;/em&gt; suffixes:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Article.server.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-fetch&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;date-fns&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleHeader&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleHeader.client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ArticleDeatails&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./ArticleDetails.client&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;artileId&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`my-api/articles/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;articleId&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;postedAt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;created_at&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mm/dd/yy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleHeader&lt;/span&gt; &lt;span class="na"&gt;postedAt&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;postedAt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ArticleDetails&lt;/span&gt; &lt;span class="na"&gt;article&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;article&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Easy, right? Of course, our applications might have more complex components and we need to think about how to better structure them in order to fully enjoy the benefits of &lt;em&gt;Server Components&lt;/em&gt;. We can combine &lt;em&gt;Server Components&lt;/em&gt; with SSR to have an even better performance. This is a really exciting feature, which could bring many benefits for us, developers, but most importantly for our users.&lt;/p&gt;

&lt;p&gt;Thank you for reading this article, I hope I made you curious and you try it out yourself. You can find the official demo &lt;a href="http://github.com/reactjs/server-components-demo"&gt;here&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>frontend</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>White-labeling React application with SASS and CSS variables</title>
      <author>Kristijan Pajtasev</author>
      <pubDate>Thu, 07 Jan 2021 09:44:08 +0000</pubDate>
      <link>https://dev.to/chriss/white-labeling-react-application-with-sass-and-css-variables-241k</link>
      <guid>https://dev.to/chriss/white-labeling-react-application-with-sass-and-css-variables-241k</guid>
      <description>&lt;p&gt;White-labeling is one of the more difficult problems in UI development. And for a reason. The good news is that with CSS variables, this task became much more manageable. And even better, they can also be used with SASS. In this post, you can see my solution for white-label support in a ReactJS application using CSS variables and SASS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-design-book" class="anchor"&gt;
  &lt;/a&gt;
  Make a design book
&lt;/h3&gt;

&lt;p&gt;You don't need to go into huge details and get a professional designer to make it. But you need to put some proper structure. Define your paddings, margins, font sizes, and colors. If every part of your website has different padding, you can't customize it efficiently. There would be just too many variables.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#project-setup" class="anchor"&gt;
  &lt;/a&gt;
  Project setup
&lt;/h3&gt;

&lt;p&gt;For this example, I am starting with a basic React application, and you can create it by executing:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app whitelabel-example-app
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Also, install node-sass for SASS support by running the next command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install node-sass
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;There was an issue with the latest version of the node-sass package(v5). You can fix this problem by downgrading to version four.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#initial-styling" class="anchor"&gt;
  &lt;/a&gt;
  Initial styling
&lt;/h3&gt;

&lt;p&gt;The first step is to rename the App.css file into App.scss. This change enables us to use SASS for styling. It would all work with CSS, but I want to show how CSS variables can work with SASS. After rename, you need to fix the import of that file in the App.js file. The last thing is deleting all styling in the SASS file and defining background color for the App class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-a-sass-variable" class="anchor"&gt;
  &lt;/a&gt;
  Create a SASS variable
&lt;/h3&gt;

&lt;p&gt;We could improve the code above by creating a SASS variable for the background color. By doing that, it is easier to make changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nv"&gt;$main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;$main-color&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#create-css-variables-folder" class="anchor"&gt;
  &lt;/a&gt;
  Create CSS variables folder
&lt;/h3&gt;

&lt;p&gt;Defining CSS variables doesn't work in the SASS file. But you can use them. So first, create a file called theme.css located in the public folder. To use it, you also need to update the index.html file and add the following code in the head section.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"text/css"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"theme.css"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"theme"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now when we are using this file, we can define the CSS variables inside. You define CSS variable like any CSS rule but prepended by two dash signs. Also, it would be best to place it under the :root pseudo-selector.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nd"&gt;:root&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;--main-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grey&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#using-variables" class="anchor"&gt;
  &lt;/a&gt;
  Using variables
&lt;/h3&gt;

&lt;p&gt;Now when we linked the CSS file, we can use a variable anywhere under the root. You do that by using the variable name in a var function as a rule value. With that update, file App.scss has the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="nc"&gt;.App&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;main-color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;What you can see in this example is one background controlled with one CSS variable. On the application of that scale, it may not make a big difference. On the more complex application, the improvement is noticeable. Instead of changing individual files around, all you need to do is replace top-level CSS containing all the variables. Like this, you can also have multiple themes. You can find code from this post in this &lt;a href="https://github.com/kristijan-pajtasev/react-whitelabel"&gt;Git repository&lt;/a&gt;.&lt;/p&gt;




&lt;p&gt;For more, you can follow me on &lt;a href="https://twitter.com/hi_iam_chris_"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/kpajtasev/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/kristijan-pajtasev/"&gt;GitHub&lt;/a&gt;, or &lt;a href="https://www.instagram.com/hi_iam_chris_/"&gt;Instagram&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>tutorial</category>
      <category>design</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Display your PWA / website fullscreen</title>
      <author>Manuel Sommerhalder</author>
      <pubDate>Thu, 07 Jan 2021 09:43:11 +0000</pubDate>
      <link>https://dev.to/oncode/display-your-pwa-website-fullscreen-4776</link>
      <guid>https://dev.to/oncode/display-your-pwa-website-fullscreen-4776</guid>
      <description>&lt;p&gt;In this short article I will show you how to expand your installed PWA to the full edge of the screen of a mobile device and how to take care of design issues that might occur.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#standalone-mode" class="anchor"&gt;
  &lt;/a&gt;
  Standalone mode
&lt;/h1&gt;

&lt;p&gt;As soon as the user has added your PWA to the home screen and opened it, it runs in a standalone mode, where e.g. the navigation bar of the browser will disappear and we can produce more app-like designs.&lt;/p&gt;

&lt;p&gt;We can detect if the PWA is running in standalone mode inside our application like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// on iOS Safari&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;standalone&lt;/span&gt;

&lt;span class="c1"&gt;// on Android Chrome&lt;/span&gt;
&lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;matchMedia&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;(display-mode: standalone)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;matches&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Because of the platform difference, a more popular approach is to define a &lt;code&gt;start_url&lt;/code&gt; inside your &lt;code&gt;manifest.json&lt;/code&gt; file, where we can add a parameter that will be added, when the app is started in standalone mode. Then we can check for the parameter inside our application to make changes to our UI.&lt;/p&gt;

&lt;p&gt;To display it fullscreen and remove native control elements, we also have to add the &lt;code&gt;display&lt;/code&gt; property with the value &lt;code&gt;standalone&lt;/code&gt; (&lt;code&gt;fullscreen&lt;/code&gt; won't work). Here's our current manifest:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;manifest.json&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Example App"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"display"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"standalone"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"start_url"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"/?standalone=true"&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#meta-tags" class="anchor"&gt;
  &lt;/a&gt;
  Meta Tags
&lt;/h1&gt;

&lt;p&gt;To display your app fullscreen, we will also have to add a few meta tags.&lt;/p&gt;

&lt;p&gt;You might already have a &lt;code&gt;viewport&lt;/code&gt; meta tag, but make sure &lt;code&gt;viewport-fit=cover&lt;/code&gt; is inside it (separated by &lt;code&gt;;&lt;/code&gt;):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width; initial-scale=1; viewport-fit=cover"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Then we have to add the &lt;code&gt;mobile-web-app-capable&lt;/code&gt; and &lt;code&gt;status-bar-style&lt;/code&gt; meta tags:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-capable"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"yes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- possible content values: default, black or black-translucent --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"apple-mobile-web-app-status-bar-style"&lt;/span&gt;
    &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"black-translucent"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Note that we can decide, whether the status bar should have a white (default), black or transparent (with white color) background. Take into account that this meta tag is only used when the app starts, so it's app-wide and we can't modify the meta tag later to change the color dynamically.&lt;/p&gt;

&lt;p&gt;Because we also want to be able to display content underneath the status bar, we'll use the transparent background (&lt;code&gt;black-translucent&lt;/code&gt;). This will also shift our app up to the top of the screen.&lt;/p&gt;

&lt;p&gt;Now we can produce fancy headers that look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjLLmQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16ndalhtlp5zp00ikk7f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wwjLLmQr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/16ndalhtlp5zp00ikk7f.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#safe-area" class="anchor"&gt;
  &lt;/a&gt;
  Safe Area
&lt;/h1&gt;

&lt;p&gt;Since we can display content underneath the status bar now, we'll have to make sure that the white text will always be readable (e.g. with a decorative shadow or ensuring dark background colors) and that there will be no interactive elements underneath. Also we might have to take the notch into account, which some newer iOS versions have:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--puVRhApS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ofha1w80q6vpy3uqi4x7.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--puVRhApS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ofha1w80q6vpy3uqi4x7.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To solve those problems we can utilize the &lt;code&gt;safe-area&lt;/code&gt; CSS env variables (supported since iOS &amp;gt;= 11.1 and Chrome &amp;gt;= 69):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.element&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-left&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-right&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;you&lt;/span&gt; &lt;span class="err"&gt;can&lt;/span&gt; &lt;span class="err"&gt;also&lt;/span&gt; &lt;span class="err"&gt;use&lt;/span&gt; &lt;span class="err"&gt;fallback&lt;/span&gt; &lt;span class="err"&gt;values&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-bottom&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;As an example, I implemented a sticky navigation bar vue component for my app, which has an element with the top safe-area applied as height. It will be transparent as long as the &lt;code&gt;transparent&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt; and the user has not scrolled down. Here's the crucial of the component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- NavigationBar.vue --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sticky top-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
        &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-safe-area-inset-top"&lt;/span&gt;
        &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"{
            'bg-black': !transparent
                        || (transparent &amp;amp;&amp;amp; scrollTop &amp;gt; 0)
        }"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    ...
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.h-safe-area-inset-top&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;safe-area-inset-top&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.bg-black&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;scrollListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollTop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;mounted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scroll&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;scrollListener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;If you have a question, don't hesitate to leave a comment. Happy coding and designing! 👨🏼‍💻&lt;/p&gt;

</description>
      <category>pwa</category>
      <category>javascript</category>
      <category>html</category>
      <category>css</category>
    </item>
    <item>
      <title>How To Use TypeScript In A Node.js and Express Project</title>
      <author>Catalin Pit</author>
      <pubDate>Thu, 07 Jan 2021 09:28:27 +0000</pubDate>
      <link>https://dev.to/catalinmpit/how-to-use-typescript-in-a-node-js-and-express-project-kdc</link>
      <guid>https://dev.to/catalinmpit/how-to-use-typescript-in-a-node-js-and-express-project-kdc</guid>
      <description>&lt;p&gt;&lt;a href="https://catalins.tech/youtube"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5DVdz3IX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/ivskd3ka7wry6ednarok.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;In this tutorial, you will learn how to use Typescript in a Node.js and Express project. The purpose of the tutorial is to show how to create a project with the mentioned technologies. Its purpose is not to debate whether you should add TypeScript or not.&lt;/p&gt;

&lt;p&gt;Before going further, the prerequisites are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Basic knowledge in Typescript, Node.js and Express&lt;/li&gt;
&lt;li&gt;Having a Node version from v12 upwards, including Node 12.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;
  &lt;a href="#1-set-up-the-project" class="anchor"&gt;
  &lt;/a&gt;
  1. Set up the project
&lt;/h1&gt;

&lt;p&gt;The first step is to create a directory for the project and initialise it. Run the following commands to create an empty directory called &lt;code&gt;typescript-nodejs&lt;/code&gt;, and change the current directory to it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir typescript-nodejs
cd typescript-nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now that you are in the &lt;code&gt;typescript-nodejs&lt;/code&gt; directory, you have to initialise the Node project. To do so, run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm init -y
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Using the &lt;code&gt;-y&lt;/code&gt; flag in the above command generates the &lt;code&gt;package.json&lt;/code&gt; file with the default values. Instead of adding information like the name and description of the project ourselves, npm initialises the file with default values.&lt;/p&gt;

&lt;p&gt;The project is initialised, and thus you can move to the next section - adding the project dependencies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-add-dependencies" class="anchor"&gt;
  &lt;/a&gt;
  2. Add dependencies
&lt;/h1&gt;

&lt;p&gt;The next step is to add the project dependencies. Those are the Express framework and Typescript. Add these dependencies by running the following commands:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install express
npm install typescript ts-node @types/node @types/express --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Why save everything Typescript-related as &lt;code&gt;devDependencies&lt;/code&gt;? Even though you write the code using Typescript, the code gets compiled back to vanilla JavaScript. Typescript is not needed per se to run the application. Thus, since Typescript is used only by developers, it's saved as a dev dependency.&lt;/p&gt;

&lt;p&gt;Moving forward, your &lt;code&gt;package.json&lt;/code&gt; should look as follows after installing all the dependencies:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;typescript-nodejs&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;version&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1.0.0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;main&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.17.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;devDependencies&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@types/express&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.17.9&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;@types/node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^14.14.20&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ts-node&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^9.1.1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;typescript&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;^4.1.3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;scripts&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;test&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;echo &lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt;Error: no test specified&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s2"&gt; &amp;amp;&amp;amp; exit 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keywords&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;author&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;license&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ISC&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-configure-typescript" class="anchor"&gt;
  &lt;/a&gt;
  3. Configure TypeScript
&lt;/h1&gt;

&lt;p&gt;So far, you only installed Typescript, but you cannot use it yet. The reason is that you need to configure it. You need to create a file called &lt;code&gt;tsconfig.json&lt;/code&gt;, which indicates that the directory is the root of a TypeScript or JavaScript project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tsc --init
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Running the above command creates the &lt;code&gt;tsconfig.json&lt;/code&gt; file where we can customise the Typescript configuration. The newly created file contains lots of code, most of which is commented out. However, there are some settings you need to know about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;target&lt;/strong&gt; -&amp;gt; using this option, you can specify wich ECMAScript version to use in your project. For instance, if you set the &lt;code&gt;target&lt;/code&gt; to ES5 and then you use arrow functions, the code is compiled to an equivalent ES5 function. The available versions are 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;module&lt;/strong&gt; -&amp;gt; with this option, you can specify which module manager to use in the generated JavaScript code. You can choose between the following values 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. The most common module manager and the default one is &lt;code&gt;commonjs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;outDir&lt;/strong&gt; -&amp;gt; with this option, we can specify where to output the vanilla JavaScript code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;rootDir&lt;/strong&gt; -&amp;gt; the option specifies where are the TypeScript files located.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;strict&lt;/strong&gt; -&amp;gt; the option is enabled by default, and it enabes strict type-checking options.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;esModuleInterop&lt;/strong&gt; -&amp;gt; this option is true by default, and it enables interoperability between CommonJS and ES modules. How does it do it? It does it by creating namespace objects for all imports.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For in-depth information about all the options available, I recommend checking the &lt;a href="https://www.staging-typescript.org/tsconfig"&gt;TypeScript TSConfig Reference&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-create-express-server" class="anchor"&gt;
  &lt;/a&gt;
  4. Create Express server
&lt;/h1&gt;

&lt;p&gt;With TypeScript configured, it's time to create the Express web server. First of all, create the file &lt;code&gt;index.ts&lt;/code&gt; (attention to the file extension) by running &lt;code&gt;touch index.ts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After creating the file, write the following code inside:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;express&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;express&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Well done!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;The application is listening on port 3000!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you have a simple web server that shows "Well done!" when you access &lt;code&gt;localhost:3000&lt;/code&gt;. The server is super simple, and without taking advantage of TypeScript. However, the purpose of this tutorial is to make the technologies work together and create a boilerplate. From here, you can build any application you want.&lt;/p&gt;

&lt;p&gt;Whenever you make changes and want to run the application, you need to compile TypeScript to vanilla JavaScript. To do that, you need to run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx tsc --project ./
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The command &lt;code&gt;tsc&lt;/code&gt; compiles TypeScript to JavaScript. The flag &lt;code&gt;--project&lt;/code&gt; specifies from where to pick the TS files. Lastly, &lt;code&gt;./&lt;/code&gt; specifies the root of the project.&lt;/p&gt;

&lt;p&gt;If you go into the &lt;code&gt;build&lt;/code&gt; folder, you should see the compiled JavaScript code. That is, the code compiled from the TypeScript code you wrote.&lt;/p&gt;

&lt;p&gt;However, we can simplify the process a little bit, and you will see how in the next section.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-create-scripts" class="anchor"&gt;
  &lt;/a&gt;
  5. Create scripts
&lt;/h1&gt;

&lt;p&gt;It can be tedious to write &lt;code&gt;npx tsc --project ./&lt;/code&gt; each time you want to compile your code. As a result, we can add a script in &lt;code&gt;package.json&lt;/code&gt; to make the process easier. &lt;/p&gt;

&lt;p&gt;Add the following line of code in &lt;code&gt;package.json&lt;/code&gt; under &lt;code&gt;scripts&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;"build": "tsc --project ./"
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now you can run &lt;code&gt;npm run build&lt;/code&gt; to compile your code. This way, it's simpler and quicker.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;In this tutorial, you learnt how to create a TypeScript + Node.js + Express boilerplate. This is just the tip of the iceberg, so you can build any application you want from here.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Insert Header and Footer to Word using Java</title>
      <author>Jane</author>
      <pubDate>Thu, 07 Jan 2021 08:43:39 +0000</pubDate>
      <link>https://dev.to/jazzzzz/insert-header-and-footer-to-word-using-java-2lc8</link>
      <guid>https://dev.to/jazzzzz/insert-header-and-footer-to-word-using-java-2lc8</guid>
      <description>&lt;p&gt;Headers and footers are sections that appear in the top/ bottom margin of a Word document. They are usually used to add additional information such as title, file name, company logo as well as page numbers to a Word document and their presence makes the document more organized. This article will introduce how to insert the header and footer that contains text, images, lines and page numbers to a Word document with a 3rd party free Java API.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1#&lt;/strong&gt; First you need to import the jar dependency to your Java application (2 methods)&lt;/p&gt;

&lt;p&gt;● Download the free API (&lt;a href="https://www.e-iceblue.com/Download/doc-for-java-free.html"&gt;Free Spire.Doc for Java&lt;/a&gt;) and unzip it, then add the Spire.Doc.jar file to your Java application as dependency.&lt;/p&gt;

&lt;p&gt;● Directly add the jar dependency to maven project by adding the following configurations to the pom.xml.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;id&amp;gt;&lt;/span&gt;com.e-iceblue&lt;span class="nt"&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;name&amp;gt;&lt;/span&gt;e-iceblue&lt;span class="nt"&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;url&amp;gt;&lt;/span&gt;http://repo.e-iceblue.com/nexus/content/groups/public/&lt;span class="nt"&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;e-iceblue&lt;span class="nt"&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spire.doc.free&lt;span class="nt"&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.9.0&lt;span class="nt"&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2#&lt;/strong&gt; The relevant code snippet of inserting header and footer to Word document:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.doc.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.doc.documents.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.doc.fields.DocPicture&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.spire.doc.fields.TextRange&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InsertHeaderAndFooter&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Load a Word document&lt;/span&gt;
        &lt;span class="nc"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;loadFromFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"sample0.docx"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Get the first section&lt;/span&gt;
        &lt;span class="nc"&gt;Section&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSections&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Call insertHeaderAndFooter method to add header and footer to the section&lt;/span&gt;
        &lt;span class="n"&gt;insertHeaderAndFooter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Save to file&lt;/span&gt;
        &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;saveToFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"out/HeaderAndFooter.docx"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FileFormat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Docx&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;insertHeaderAndFooter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Section&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="c1"&gt;//Get header and footer from a section&lt;/span&gt;
        &lt;span class="nc"&gt;HeaderFooter&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHeadersFooters&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getHeader&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="nc"&gt;HeaderFooter&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;section&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getHeadersFooters&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getFooter&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;//Add a paragraph to header&lt;/span&gt;
        &lt;span class="nc"&gt;Paragraph&lt;/span&gt; &lt;span class="n"&gt;headerParagraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addParagraph&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;//Insert a picture to header paragraph and set its position&lt;/span&gt;
        &lt;span class="nc"&gt;DocPicture&lt;/span&gt; &lt;span class="n"&gt;headerPicture&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendPicture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"C:\\Users\\Administrator\\Desktop\\mars.jpg"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;headerPicture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setHorizontalAlignment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ShapeHorizontalAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Left&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;headerPicture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setVerticalOrigin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;VerticalOrigin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Top_Margin_Area&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;headerPicture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setVerticalAlignment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ShapeVerticalAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Center&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Add text to header paragraph&lt;/span&gt;
        &lt;span class="nc"&gt;TextRange&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;headerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Introduction of Mars"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCharacterFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setFontName&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Arial"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCharacterFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setFontSize&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCharacterFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setItalic&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCharacterFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setBold&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;headerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setHorizontalAlignment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Set text wrapping to behind&lt;/span&gt;
        &lt;span class="n"&gt;headerPicture&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setTextWrappingStyle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TextWrappingStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Behind&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Set the bottom border style of the header paragraph&lt;/span&gt;
        &lt;span class="n"&gt;headerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getBorders&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getBottom&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setBorderType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BorderStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Single&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;headerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getBorders&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getBottom&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setLineWidth&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Add a paragraph to footer&lt;/span&gt;
        &lt;span class="nc"&gt;Paragraph&lt;/span&gt; &lt;span class="n"&gt;footerParagraph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;footer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addParagraph&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="c1"&gt;//Add Field_Page and Field_Num_Pages fields to the footer paragraph&lt;/span&gt;
        &lt;span class="n"&gt;footerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"page number"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FieldType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Field_Page&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;footerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendText&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;" of "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;footerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;appendField&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"number of pages"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FieldType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Field_Num_Pages&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;footerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setHorizontalAlignment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;HorizontalAlignment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Right&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;//Set the top border style of the footer paragraph&lt;/span&gt;
        &lt;span class="n"&gt;footerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getBorders&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getTop&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setBorderType&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;BorderStyle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Single&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;footerParagraph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFormat&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getBorders&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getTop&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;setLineWidth&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3#&lt;/strong&gt; The generated Word document is shown as below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Dds7KdCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fd1tavqz17hee3gyl3di.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Dds7KdCT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/fd1tavqz17hee3gyl3di.png" alt=""&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>header</category>
      <category>footer</category>
      <category>word</category>
    </item>
    <item>
      <title>Go in 2 minutes</title>
      <author>Hardik Chopra</author>
      <pubDate>Thu, 07 Jan 2021 07:19:16 +0000</pubDate>
      <link>https://dev.to/hardikchopra242/introduction-to-go-374o</link>
      <guid>https://dev.to/hardikchopra242/introduction-to-go-374o</guid>
      <description>&lt;p&gt;Golang or Go was developed at Google as an open-source programming language and is one of the most trending programming languages among developers. Used by Google, Netflix, Twitter, and millions of users let's take a look at it.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-go" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Go?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Golang is a &lt;strong&gt;procedural and statically typed programming language&lt;/strong&gt;. The goal was to create a language, loosely based on the syntax of C. It can be used in place of Python, Node.js, or PHP in the backend. &lt;/p&gt;

&lt;p&gt;Go is not a free-form language, its conventions specify many formatting details, including how &lt;em&gt;indentation and spaces&lt;/em&gt; are to be used. The language requires that none of its declared variables or imported libraries are unused, and all return statements are compulsory.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-go" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Why Go?&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Go is a general-purpose language so it can be used for almost anything.&lt;/li&gt;
&lt;li&gt;Mostly for &lt;strong&gt;scalable&lt;/strong&gt; and &lt;strong&gt;efficient&lt;/strong&gt; (web) services.&lt;/li&gt;
&lt;li&gt;Another area is &lt;strong&gt;cloud applications&lt;/strong&gt;. Google has high hopes for it becoming the defacto cloud language&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#some-features-of-go" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Some features of Go&lt;/strong&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One defining feature of Go is &lt;strong&gt;concurrency&lt;/strong&gt;, which means that multiple processes can be executed at the same time, which makes Go an efficient language.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It’s compilation time is very &lt;strong&gt;fast&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It supports the patterns which adapt to the surrounding environment similar to dynamic languages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It supports the &lt;strong&gt;interfaces&lt;/strong&gt; and &lt;strong&gt;embedded types&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It doesn’t require any external dependencies for the production of the statically linked native binaries.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#statistics" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Statistics&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Here are some stats from &lt;em&gt;Stack Overflow 2020 Developer Survey&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;From last year, Go has jumped from 10th position to 5th position, making it in the list of &lt;strong&gt;Top 5 most loved programming language&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iDCcBnk8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/n2po1wnon8kuajcg7c91.png" alt="Alt Text"&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;blockquote&gt;
&lt;p&gt;Go is also one of the &lt;strong&gt;Top 3 languages associated with the highest salaries globally&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kv_DE-5S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/bferwhncgvpg6tg05unm.png" alt="Alt Text"&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#bonus-fire" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Bonus 🔥&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;So up to this point, we have seen and understand what is Go and why to use go, now let's see how to write Go. It is a beginner's guide so we will just write code for everyone's favorite, Hello World!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#input" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;INPUT&lt;/strong&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="s"&gt;"fmt"&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello World !"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#output" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;OUTPUT&lt;/strong&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello World !&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;If you got to learn something new and useful show some love by giving this post a ❤️&lt;/p&gt;

&lt;p&gt;If you have read so far, save this post and share it with your programming buddies 😃&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#resources-crown" class="anchor"&gt;
  &lt;/a&gt;
  &lt;strong&gt;Resources 👑&lt;/strong&gt;
&lt;/h3&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/digitalocean_staff" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4nodu17o--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--5ytpt8k6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/64516/a0c9989b-6d18-46c7-bc66-4c2c1580534e.jpg" alt="digitalocean_staff image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/digitalocean/how-to-code-in-go-32p0" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;How to Code in Go (Tutorial Series)&lt;/h2&gt;
      &lt;h3&gt;DigitalOcean ・ Dec 30 '19 ・ 11 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#series&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;div class="ltag__link"&gt;
  &lt;a href="/jeremycmorgan" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hHUT1kK4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--AUb1WjlD--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/48220/509bdb41-2b32-4513-83dc-3a0c7276d6f2.jpg" alt="jeremycmorgan image"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/pluralsight/the-top-10-places-to-learn-go-3lhp" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;The Top 10 Places to Learn Go&lt;/h2&gt;
      &lt;h3&gt;Jeremy Morgan ・ Nov 23 '19 ・ 3 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#go&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#programming&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;






&lt;p&gt;Do you something else about Go? Do share that with the community in the comment section 💬&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>go</category>
      <category>tutorial</category>
      <category>devops</category>
    </item>
    <item>
      <title>Understanding closures</title>
      <author>M V Ganesh Kumar</author>
      <pubDate>Thu, 07 Jan 2021 03:14:30 +0000</pubDate>
      <link>https://dev.to/mvganeshkumar06/understanding-closures-57dh</link>
      <guid>https://dev.to/mvganeshkumar06/understanding-closures-57dh</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction" class="anchor"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Before trying to understand what are closures and how it works we have to understand what is scope, lexical environment, scope chain, and how they work.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scope" class="anchor"&gt;
  &lt;/a&gt;
  Scope
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Everything that is present in the current execution context is said to be in the current scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note if you don't know what an execution context is and how JavaScript reads and executes code, I highly recommend you to read my previous post &lt;a href="https://dev.to/mvganeshkumar06/understanding-hoisting-2jdb" alt="Understanding Hoisting"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's take an example to understand the scope.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Welcome John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;During the execution of the above code, a global execution context is created and pushed onto the call stack.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The global execution context contains the variable name with the value of John.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the greet function is invoked a new local execution context is created and push on top of the global execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This local execution context contains the variable surname with a value Smith.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now the surname is said to have a &lt;code&gt;local scope&lt;/code&gt; or in other words, the scope of surname is inside the greet function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is because the surname is available only inside the local execution context created by the greet function and it will accessible only inside this function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Also the variable name is said to have a &lt;code&gt;global scope&lt;/code&gt; or in other words, the scope of name is global.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is because the variable name is available inside the global execution context and it will accessible everywhere.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lexical-environment" class="anchor"&gt;
  &lt;/a&gt;
  Lexical environment
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Whenever an execution context is created a lexical environment is also created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lexical environment is the execution context along with the reference to the lexical environment of the parent execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Think of it as a container that consists of the current execution context and a reference to the lexical environment of the parent execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We'll see a visual example of how the lexical environment works using the below code.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="nx"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Welcome John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Below is the representation of the lexical environments formed during the execution of the above code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf4Cffjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eaj20wsdhepgk8z9smu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rf4Cffjk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/9eaj20wsdhepgk8z9smu.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The first container is the lexical environment for the greet function. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It consists of a local execution context where the variable surname exists and it has a reference to the parent lexical environment which is for the introduce function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The lexical environment of the introduce function contains the variable name and the function greet.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also has a reference to its parent which is the global lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The global lexical environment contains the variable welcome and it has a reference to its parent which is null.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#scope-chain" class="anchor"&gt;
  &lt;/a&gt;
  Scope chain
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The above image representing multiple lexical environments linked together by references is what is called the scope chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Whenever you are trying to access a variable, the JavaScript engine searches for that variable in the current scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it is not found it uses the reference in the lexical environment and moves a level above in the scope chain and searches for the variable in the parent scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is repeated until the variable is found or the scope chain is exhausted.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is the role of the scope chain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Now that we have covered the required prerequisites let us look at closures.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#closures" class="anchor"&gt;
  &lt;/a&gt;
  Closures
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A lexical environment is what is called as closure or in other words it is referred to as a function bundled together along with the surrounding scope.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since a closure is just a lexical environment every function in JavaScript forms a closure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Let's see the same example again to understand closures.&lt;br&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Smith&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Welcome &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;surname&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;welcome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;introduce&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 

&lt;span class="nx"&gt;welcome&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// Welcome John Smith&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Here the function greet forms a closure. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It will have access to all the variables present inside the current scope as well as in the parent scope even after the parent function has finished its execution.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generally, when a function is done with its execution all the memory will be removed or garbage collected in order to save memory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But here due to closure when invoking the function welcome the greet function will be executed and it will still have access to the variable name even after the function introduce is done with its execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-the-use-of-closures" class="anchor"&gt;
  &lt;/a&gt;
  What is the use of closures
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One of the main use of closures is to have data privacy where the variables inside the outer function will be accessible only by the inner function.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the above case the variable name is private and only the greet function can access it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is because the greet function is returned and when it is invoked later it still remembers the variable name due to closures.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Note that closures may lead to memory wastage as the variables that are present in the outer function will not be removed even after the execution of the outer function.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But modern JavaScript engines like V8 tend to optimize this and they remove those variables that are not reachable by any reference.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion" class="anchor"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A scope refers to the variable and functions present in the current execution context.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A lexical environment is the current execution context along with the reference of the parent lexical environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is created whenever an execution context is created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A scope chain is the chain of multiple lexical environments linked together by references.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript engine uses the scope chain to identify whether the variable is accessible or not.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A closure is just a lexical environment or in other words, it is a function bundled together along with the surrounding scope.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What is useCallback hook in React? </title>
      <author>Rahul</author>
      <pubDate>Thu, 07 Jan 2021 02:21:08 +0000</pubDate>
      <link>https://dev.to/rahxuls/what-is-usecallback-hook-in-react-1o4f</link>
      <guid>https://dev.to/rahxuls/what-is-usecallback-hook-in-react-1o4f</guid>
      <description>&lt;p&gt;New post in the React series about the &lt;strong&gt;useCallback&lt;/strong&gt; hook. Everything you need to know. &lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#what-is-usecallback" class="anchor"&gt;
  &lt;/a&gt;
  What is useCallback?
&lt;/h3&gt;

&lt;p&gt;Do you remember the useMemo hook which we saw in the last post? The useCallback hook is also very similar and it returns a memoized callback. &lt;/p&gt;

&lt;p&gt;The useCallback hook is very useful in dealing with referential equality situations to prevent unnecessary renders. &lt;/p&gt;

&lt;p&gt;Let's understand this in a good way: &lt;/p&gt;

&lt;p&gt;Consider a case where we have to maintain two counters inside a single component. Each counter has its independent control. &lt;/p&gt;

&lt;p&gt;Now, even if you increment one counter, the other one will rerender(because they are in the same component). &lt;/p&gt;

&lt;p&gt;This may not be an issue in the case of a simple counter, however. if it is a slow and expensive function, you would want to avoid this. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-the-usecallback-hook" class="anchor"&gt;
  &lt;/a&gt;
  How to use the &lt;em&gt;useCallback&lt;/em&gt; hook?
&lt;/h3&gt;

&lt;p&gt;The ideal solution in the previous case is that, if the state value of the other counter remains unchanged then it should not be rendered. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mlnvWTuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609985967484/PevALZ1Cb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mlnvWTuC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1609985967484/PevALZ1Cb.png" alt="Black Gold Stars Glitter Happy New Year Card.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;// Counter 1 -&amp;gt; If you increment this, the other counter function will be recreated. &lt;br&gt;
// Counter 2 -&amp;gt; Similarly, if you increment this, the whole component will rerender and the other counter function will be recreated. &lt;/p&gt;

&lt;p&gt;So to fix this issue, can wrap both the counter functions in a &lt;strong&gt;useCallback&lt;/strong&gt;. The only when the state is changed the function will be recreated. &lt;/p&gt;

&lt;p&gt;Syntax:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;memoizedCallback&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;useCallback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//Memoized callback function&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="c1"&gt;//Dependency array: The function will rerun only if any of the value from this array changes.&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The concept of remembering the function so that we don't have to recreate it on every render is known as Memoization. &lt;/p&gt;

&lt;p&gt;As we saw in the last post that we already have &lt;strong&gt;useMemo&lt;/strong&gt; hook for this. When why is &lt;strong&gt;useCallback&lt;/strong&gt; even required? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-the-usecallback-hook" class="anchor"&gt;
  &lt;/a&gt;
  When to use the useCallback hook?
&lt;/h3&gt;

&lt;p&gt;The major difference between useMemo and useCallback is that useMemo returns a memoized value, whereas useCallback returns a memoized function. &lt;/p&gt;

&lt;p&gt;So if your memoized function is receiving some external parameters and performing some calculation based on that, then it makes sense to use the useCallback hook. &lt;/p&gt;

&lt;p&gt;However, if you are only concerned about the memoized value, then probably useMemo is the best option. &lt;/p&gt;

&lt;p&gt;MOST OF THE TIME YOU SHOULD NOT BOTHER OPTIMIZING UNNECESSARY RERENDERS. &lt;/p&gt;

&lt;p&gt;However, there are situations when rendering can take a substantial amount of time (think highly interactive Graphs/ Charts/ Animations). Thanks to the pragmatic nature of React, there's an escape hatch via useMemo and useCallback. &lt;/p&gt;




&lt;p&gt;😎Thanks For Reading | Happy Coding ⚡&lt;/p&gt;

&lt;p&gt;%%[bmc]&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>webdev</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>How MongoDB Makes Frontend Easier and Backend More Efficient</title>
      <author>Kevin Mezu</author>
      <pubDate>Thu, 07 Jan 2021 02:15:01 +0000</pubDate>
      <link>https://dev.to/uzomezu/mongodb-is-weird-but-i-like-it-25b</link>
      <guid>https://dev.to/uzomezu/mongodb-is-weird-but-i-like-it-25b</guid>
      <description>&lt;p&gt;A document database like MongoDB used mostly within the MERN stack, makes for some interesting design choices in fullstack development. Methods like &lt;code&gt;remove()&lt;/code&gt; or &lt;code&gt;findByIdAndDelete()&lt;/code&gt; are mysterious and almost &lt;em&gt;too&lt;/em&gt; simple, but it definitely allows for cleaner, more consistent relay between front and backend. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#todo-lists-deleting-tasks" class="anchor"&gt;
  &lt;/a&gt;
  To-Do Lists - Deleting Tasks
&lt;/h2&gt;

&lt;p&gt;One of the fundamentals of MERN projects are To-Do lists. I read a post once that compared all of React Development basically to making a To-Do list. JavaScript has Arrays and Objects as methods of storing data. Adding to both of these things is quite simple. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#add-to-an-array" class="anchor"&gt;
  &lt;/a&gt;
  Add to an Array
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//declare an array using brackets&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;starBursts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;//Add strawberry to the array&lt;/span&gt;
&lt;span class="nx"&gt;starBursts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;strawberry&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;starBursts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In the console we would see:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; ['apple', 'orange', 'banana', 'strawberry']
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;In similar fashion for a redux reducer we would find it easy to append an array&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;toDoReducer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ADD-TO-DO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;toDoReducer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#deleting-todos" class="anchor"&gt;
  &lt;/a&gt;
  Deleting To-Dos
&lt;/h3&gt;

&lt;p&gt;Adding to JavaScript arrays is quite simple, yet deleting items may become an arduous task.&lt;/p&gt;

&lt;p&gt;Suppose I want to delete a specific To-Do Object from a todoList array. JavaScript has a few options for this with &lt;code&gt;.pop()&lt;/code&gt;, &lt;code&gt;.splice()&lt;/code&gt;, and &lt;code&gt;.shift()&lt;/code&gt; methods. The most popular way, in our case, would use &lt;code&gt;.IndexOf()&lt;/code&gt; and &lt;code&gt;.splice()&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// array = [2, 9]&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;array&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;The above notation is a common way to remove information from an Array. However involving redux, we quickly begin to see how this is a problem when we call the entire state using &lt;code&gt;[...state]&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#mongodb" class="anchor"&gt;
  &lt;/a&gt;
  MongoDB
&lt;/h3&gt;

&lt;p&gt;Mongo Db solves this issue using the &lt;code&gt;remove()&lt;/code&gt; function. Mongoose is full of appropriately named functions like these, that turn our JavaScript acrobatics into simple Async functions. Using Id's MongoDB is able to simplify our complex Data needs without nesting data into tables. &lt;/p&gt;

&lt;p&gt;Assume we pass an object with a specified ID to the backend and wish to delete it. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#example" class="anchor"&gt;
  &lt;/a&gt;
  Example
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//express router for deletion&lt;/span&gt;
&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/deleteTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//grab the correct todo from database&lt;/span&gt;
     &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deletedToDo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;deletedToDo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//use async await to avoid issues in event loop&lt;/span&gt;
&lt;span class="c1"&gt;//remove using .remove() function&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;deletedToDo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Todo was Deleted&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Error in Deletion.&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Now with Mongoose CRUD methods, our Frontend Engineer would have a simpler time creating a redux store, and relaying data to the backend. We could even go further and utilize &lt;code&gt;findByIdAndDelete()&lt;/code&gt; to delete a specific model without disturbing the current route. &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#for-example" class="anchor"&gt;
  &lt;/a&gt;
  For Example:
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/deleteTodo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteTodo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Todo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findByIdAndDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Deleted : &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;div class="highlight__panel js-actions-panel"&gt;
&lt;div class="highlight__panel-action js-fullscreen-code-action"&gt;
    Enter fullscreen mode
    


    Exit fullscreen mode
    


&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Having functions within the API frees up space to make more attractive and interactive Frontend/User Interface. &lt;/p&gt;




&lt;p&gt;Resources: &lt;/p&gt;

&lt;p&gt;Mongoose: FindByIdAndDelete() Function. (2020, May 20). Retrieved January 07, 2021, from &lt;a href="https://www.geeksforgeeks.org/mongoose-findbyidanddelete-function/"&gt;https://www.geeksforgeeks.org/mongoose-findbyidanddelete-function/&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>mongodb</category>
      <category>node</category>
    </item>
    <item>
      <title>65 Things I wish I knew when I started to Code 🌱🚀</title>
      <author>Madza</author>
      <pubDate>Wed, 06 Jan 2021 21:52:44 +0000</pubDate>
      <link>https://dev.to/madza/65-things-i-wish-i-knew-when-i-started-to-code-20ka</link>
      <guid>https://dev.to/madza/65-things-i-wish-i-knew-when-i-started-to-code-20ka</guid>
      <description>&lt;p&gt;No success story is the same, we all have had our ups and downs in the learning process and things we wish we knew when we started out.&lt;/p&gt;

&lt;p&gt;If you are a new, aspiring developer, these 65 things will prepare you for the long journey ahead. Use them as a shortcut in your own learning path.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#1-coding-is-about-problemsolving" class="anchor"&gt;
  &lt;/a&gt;
  1. Coding is about problem-solving.
&lt;/h3&gt;

&lt;p&gt;Being a programmer is way more than sitting in front of the computer and randomly pressing buttons on the keyboard. It's a powerful tool to solve a lot of real-world problems and make people's lives easier. If you are capable to do it, you will always be looked after.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-the-golden-rule-is-planning" class="anchor"&gt;
  &lt;/a&gt;
  2. The golden rule is planning.
&lt;/h3&gt;

&lt;p&gt;Each and every successful project starts with lots of planning. Make sure you identify the goal, define tasks, know your audience, etc. Use a pen and paper or any online wireframing tool and try to come up with a clear schema of what your solution would look like. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-the-content-is-king" class="anchor"&gt;
  &lt;/a&gt;
  3. The content is king.
&lt;/h3&gt;

&lt;p&gt;Without content your site is empty. If you are dealing with static content, make sure it is well presented. If the content is dynamic always try to project what type of content you will create or receive and design your layout, code, and database structures based on that. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-coding-should-be-the-last-phase-of-a-project" class="anchor"&gt;
  &lt;/a&gt;
  4. Coding should be the last phase of a project.
&lt;/h3&gt;

&lt;p&gt;Beginners may think that every project always starts with coding. It's actually just the technical implementation of all the planning that was done before and should be the last step of solving the problem.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-you-have-everything-at-your-fingertips" class="anchor"&gt;
  &lt;/a&gt;
  5. You have everything at your fingertips.
&lt;/h3&gt;

&lt;p&gt;It's not the 50s or 60s anymore, where you would have to go to the library to study some topic. All the info you need is within reach of the hand. Use your brain and the internet.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-you-dont-need-extreme-hardware-to-code" class="anchor"&gt;
  &lt;/a&gt;
  6. You don't need extreme hardware to code.
&lt;/h3&gt;

&lt;p&gt;Cutting edge processor, massive amounts of RAM, and 5 monitors are all optional. A mid-range laptop is more than enough to get started out.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#7-you-dont-need-to-be-great-at-math" class="anchor"&gt;
  &lt;/a&gt;
  7. You don't need to be great at math.
&lt;/h3&gt;

&lt;p&gt;Coding has often been associated with some geniuses with a 200+ IQ, based on the movies we have seen. It could get math-heavy in topics like artificial intelligence, robotics, cryptography, etc, but in order to start, you need to know just the basic operations. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#8-finding-the-right-workflow-is-not-easy" class="anchor"&gt;
  &lt;/a&gt;
  8. Finding the right workflow is not easy.
&lt;/h3&gt;

&lt;p&gt;Each of us has different preferences. Experiment with different extensions and settings. It will take lots of time to understand what works for you and how to tie everything together. But it will be very rewarding for your productivity later on.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#9-the-perfect-timing-is-now" class="anchor"&gt;
  &lt;/a&gt;
  9. The perfect timing is now.
&lt;/h3&gt;

&lt;p&gt;Saving in bookmarks is just a fancy word for procrastination. Your best bet to be productive is to do it now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#10-syncing-makes-you-mobile" class="anchor"&gt;
  &lt;/a&gt;
  10. Syncing makes you mobile.
&lt;/h3&gt;

&lt;p&gt;Sync all the browser and IDE/code editor extensions and settings on every machine you work on. It will assure that you work in the same environment wherever you are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#11-there-are-multiple-ways-of-achieving" class="anchor"&gt;
  &lt;/a&gt;
  11. There are multiple ways of achieving.
&lt;/h3&gt;

&lt;p&gt;Once I started to code, I thought the logic in code is very strict and has to follow a certain pattern. In reality, the only strict variable is the syntax of the language used.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#12-naming-things-is-hard" class="anchor"&gt;
  &lt;/a&gt;
  12. Naming things is hard.
&lt;/h3&gt;

&lt;p&gt;It might sound like an easy task at the beginning, but you will find out how challenging it can be, especially for larger-scale projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#13-take-mistakes-as-lessons" class="anchor"&gt;
  &lt;/a&gt;
  13. Take mistakes as lessons.
&lt;/h3&gt;

&lt;p&gt;If you take any success story, you will find it's actually a continuous try and error pattern, persistence and curiosity are the keys.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#14-recreating-is-10x-easier-than-writing-groundup" class="anchor"&gt;
  &lt;/a&gt;
  14. Recreating is 10X easier than writing ground-up.
&lt;/h3&gt;

&lt;p&gt;When re-creating an existing app, you have a clear understanding of the layout and building principles of the project. And those are often the most challenging parts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#15-its-important-to-find-your-niche" class="anchor"&gt;
  &lt;/a&gt;
  15. It's important to find your niche.
&lt;/h3&gt;

&lt;p&gt;Wandering around from niche to niche will take you nowhere. Define your interest and research the fields available before jumping into one.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#16-be-curious-about-why-things-work" class="anchor"&gt;
  &lt;/a&gt;
  16. Be curious about why things work.
&lt;/h3&gt;

&lt;p&gt;Always try to discover the under-the-hood stuff. Don't be enough with seeing stuff somehow magically working.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#17-tools-are-your-keys-to-productivity" class="anchor"&gt;
  &lt;/a&gt;
  17. Tools are your keys to productivity.
&lt;/h3&gt;

&lt;p&gt;A man/woman is only as good as his/her tools. Invest time in creating a proper tool-stack as it pays off big time!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#18-passionate-projects-keep-you-going" class="anchor"&gt;
  &lt;/a&gt;
  18. Passionate projects keep you going.
&lt;/h3&gt;

&lt;p&gt;When it comes to side project ideas, pick something you are truly interested in. This will boost your motivation as you care for the end result.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#19-its-a-marathon-not-a-sprint" class="anchor"&gt;
  &lt;/a&gt;
  19. It's a marathon, not a sprint.
&lt;/h3&gt;

&lt;p&gt;The development space is constantly evolving, so prepare yourself for continuous learning. By starting too fast, you will get tired quickly.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#20-people-you-follow-are-the-information-you-consume" class="anchor"&gt;
  &lt;/a&gt;
  20. People you follow are the information you consume.
&lt;/h3&gt;

&lt;p&gt;Pay attention to the people you follow on social media. That dictates the quality of the feed you read and the information you take in.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#21-do-not-reinvent-the-wheel" class="anchor"&gt;
  &lt;/a&gt;
  21. Do not reinvent the wheel.
&lt;/h3&gt;

&lt;p&gt;Before jumping into the project, take a look at what other developers have used to solve similar problems. There should already be the solution for virtually anything, it's just a matter of how good are you at searching.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#22-its-easy-to-get-carried-away" class="anchor"&gt;
  &lt;/a&gt;
  22. It's easy to get carried away.
&lt;/h3&gt;

&lt;p&gt;Being active in the community is a great thing, but be aware it will often lead you to discover more optimized technologies, more modern-looking UIs, etc. That does not always mean your current stack is bad and you should switch it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#23-tutorials-often-mislead-you" class="anchor"&gt;
  &lt;/a&gt;
  23. Tutorials often mislead you.
&lt;/h3&gt;

&lt;p&gt;Tutorials are mostly based on already pre-coded and re-factored code. Once you start comparing yourself to it, you get desperate, cause you can not come up with the solutions that fast and write as clean code on the first go. Be aware it's only a bright side of a coin and the creators struggled, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#24-tutorials-wont-make-you-independent" class="anchor"&gt;
  &lt;/a&gt;
  24. Tutorials won't make you independent.
&lt;/h3&gt;

&lt;p&gt;Watching or reading a tutorial might be good for getting an overview of the tech, but they will not help you to stand up on your feet. Try to read official docs besides to develop your analytical thinking and try to come up with your own solutions. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#25-no-tech-is-perfect" class="anchor"&gt;
  &lt;/a&gt;
  25. No tech is perfect.
&lt;/h3&gt;

&lt;p&gt;Each and every tech has it's own advantages and disadvantages. When in doubt, put your alternatives side by side, do some research on them, and compare how they tackle particular tasks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#26-your-ability-to-pick-up-stuff-matters" class="anchor"&gt;
  &lt;/a&gt;
  26. Your ability to pick up stuff matters.
&lt;/h3&gt;

&lt;p&gt;When applying for a company, the chances are you are not gonna be familiar with their tech stack. What matters is not how many technologies you know but how fast you can pick up the particular tech you come across.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#27-version-control-is-a-must" class="anchor"&gt;
  &lt;/a&gt;
  27. Version control is a must.
&lt;/h3&gt;

&lt;p&gt;Clients often ask for previous designs and are undecided on features. Version control is a must to save you and also assures your code is always backed up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#28-bugs-can-be-really-intimidating" class="anchor"&gt;
  &lt;/a&gt;
  28. Bugs can be really intimidating.
&lt;/h3&gt;

&lt;p&gt;Be prepared for challenging bugs that can take hours or even days to fix. You will be intimidated by the low productivity levels during those times but will be elevated once you fix them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#29-learn-what-not-to-learn" class="anchor"&gt;
  &lt;/a&gt;
  29. Learn what not to learn.
&lt;/h3&gt;

&lt;p&gt;Nowadays it's easy to get confused in the vast ocean of technologies. Ironically, one of the best skills today is to learn what not to learn.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#30-reading-code-makes-you-better-too" class="anchor"&gt;
  &lt;/a&gt;
  30. Reading code makes you better, too.
&lt;/h3&gt;

&lt;p&gt;By writing your own code, you are reflecting on what you know. It's important to read code by other devs, to learn different design patterns and best practices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#31-be-humble-and-others-will-respect-you" class="anchor"&gt;
  &lt;/a&gt;
  31. Be humble and others will respect you.
&lt;/h3&gt;

&lt;p&gt;Celebrate your achievements inside, but be humble about them outside. Bragging won't get you far.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#32-being-a-perfectionist-will-slow-you-down" class="anchor"&gt;
  &lt;/a&gt;
  32. Being a perfectionist will slow you down.
&lt;/h3&gt;

&lt;p&gt;Aiming for quality over quantity is a great thing. Tho don't over exaggerate, as you will end up with hundreds of unfinished projects.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#33-open-source-is-awesome" class="anchor"&gt;
  &lt;/a&gt;
  33. Open source is awesome.
&lt;/h3&gt;

&lt;p&gt;From individuals to large companies, open-source has bloomed in the community. It's a wonderful thing and I believe together we are making better projects. Make sure you study the best practices and design patterns used by other people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#34-the-diploma-is-optional" class="anchor"&gt;
  &lt;/a&gt;
  34. The diploma is optional.
&lt;/h3&gt;

&lt;p&gt;Clients often do not care about the diploma, but your practical ability to solve their problems.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#35-break-it-down-when-you-get-stuck" class="anchor"&gt;
  &lt;/a&gt;
  35. Break it down when you get stuck.
&lt;/h3&gt;

&lt;p&gt;Often times coming up with a solution may seem hard as the problem is too comprehensive. Break it down into chunks and tackle each piece bit by bit.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#36-corporate-companies-need-you-for-crud-apps" class="anchor"&gt;
  &lt;/a&gt;
  36. Corporate companies need you for CRUD apps.
&lt;/h3&gt;

&lt;p&gt;The heart of corporate companies is mostly CRUD operations. Learn and be ready to work with them daily, if you are planning to apply. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#37-the-project-is-never-fully-finished" class="anchor"&gt;
  &lt;/a&gt;
  37. The project is never fully finished.
&lt;/h3&gt;

&lt;p&gt;There will always be ways to improve and optimize each project. Think of it more like the project meets the requirements and is good enough for being shipped.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#38-good-code-is-easy-to-read-and-maintain" class="anchor"&gt;
  &lt;/a&gt;
  38. Good code is easy to read and maintain.
&lt;/h3&gt;

&lt;p&gt;Whether or not you are working alone, always try to write code as somebody else will work with it. In trickier parts leave some comments, explaining the working principles.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#39-the-first-language-is-always-the-hardest" class="anchor"&gt;
  &lt;/a&gt;
  39. The first language is always the hardest.
&lt;/h3&gt;

&lt;p&gt;I've seen people often asking what's the hardest language to learn. In reality, the difficulty is related to your experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#40-googling-and-using-stack-overflow-is-acceptable" class="anchor"&gt;
  &lt;/a&gt;
  40. Googling and using Stack Overflow is acceptable.
&lt;/h3&gt;

&lt;p&gt;Those resources are there for you to help. Don't be ashamed of Googling or reading SO in front of someone. Know for a fact, they do, too.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#41-communication-skills-are-underrated" class="anchor"&gt;
  &lt;/a&gt;
  41. Communication skills are underrated.
&lt;/h3&gt;

&lt;p&gt;The code alone will not always determine your success. It's important to practice interaction with people.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#42-sharpen-your-negotiation-skills" class="anchor"&gt;
  &lt;/a&gt;
  42. Sharpen your negotiation skills.
&lt;/h3&gt;

&lt;p&gt;Knowing all the cutting edge tech has no power if you do not know how to negotiate. They need you not the other way around.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#43-having-an-online-presence-is-important" class="anchor"&gt;
  &lt;/a&gt;
  43. Having an online presence is important.
&lt;/h3&gt;

&lt;p&gt;Dozens of local projects have no meaning if no one knows about them. Build yourself a great online presence to promote them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#44-always-be-aware-of-the-2080-rule" class="anchor"&gt;
  &lt;/a&gt;
  44. Always be aware of the 20/80 rule.
&lt;/h3&gt;

&lt;p&gt;Keep in mind that the last 20% of a project takes 80% of the time. So think twice before reporting any progress updates to a client.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#45-dont-overengineer-without-a-cause" class="anchor"&gt;
  &lt;/a&gt;
  45. Don't over-engineer without a cause.
&lt;/h3&gt;

&lt;p&gt;It's always a good practice to aim for a state where there are no more features to remove rather than add.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#46-frameworks-come-and-go" class="anchor"&gt;
  &lt;/a&gt;
  46. Frameworks come and go.
&lt;/h3&gt;

&lt;p&gt;It is 10X more valuable to learn a tech that they are based on, this way you are all set to pick up a particular framework if the necessity arises.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#47-knowing-something-well-is-better-than-pretend-to-know-a-bit-of-everything" class="anchor"&gt;
  &lt;/a&gt;
  47. Knowing something well is better than pretend to know a bit of everything.
&lt;/h3&gt;

&lt;p&gt;Instead of trying to pick up and master everything, do some research on the field you are interested in, study the available stacks, pick one and master it to the core. Trying to become a jack of all trades will ultimately leave you a master of none.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#48-testing-is-there-for-a-reason" class="anchor"&gt;
  &lt;/a&gt;
  48. Testing is there for a reason.
&lt;/h3&gt;

&lt;p&gt;Make a good habit of writing tests. Despite you might feel you are doing unnecessary work at first, they will help you save lots of time, especially in large code-bases.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#49-achievements-boost-your-motivation-best" class="anchor"&gt;
  &lt;/a&gt;
  49. Achievements boost your motivation best.
&lt;/h3&gt;

&lt;p&gt;Appreciate all those 'a-ha' moments when learning, finally getting challenging features to work, seeing people being amazed, and feeling valuable.  Treat them as fuel for your motivation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#50-do-not-put-up-more-than-you-can-carry" class="anchor"&gt;
  &lt;/a&gt;
  50. Do not put up more than you can carry.
&lt;/h3&gt;

&lt;p&gt;Find a fine line between choosing a problem of a scale, that is challenging enough for you to learn something new, but also narrow enough to be solvable.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#51-do-not-compare-yourself-to-others" class="anchor"&gt;
  &lt;/a&gt;
  51. Do not compare yourself to others.
&lt;/h3&gt;

&lt;p&gt;It's easy to get frustrated if you compare yourself to the achievements of other devs. You learn at your own rate and it's perfectly fine.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#52-do-not-take-criticism-personally" class="anchor"&gt;
  &lt;/a&gt;
  52. Do not take criticism personally.
&lt;/h3&gt;

&lt;p&gt;Constructive criticism is valuable feedback, pointing out the mistakes or improvements you did not see yourself. Ultimately it will lead to a better quality product. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#53-everyone-has-written-a-bad-code" class="anchor"&gt;
  &lt;/a&gt;
  53. Everyone has written a bad code.
&lt;/h3&gt;

&lt;p&gt;Don't worry about looking at the code you have written a few years back from now. It might seem like you don't believe your eyes and you might feel shame. Tho remember it's actually a clear sign, that you have progressed.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#54-one-finished-project-is-better-than-10-halffinished-ones" class="anchor"&gt;
  &lt;/a&gt;
  54. One finished project is better than 10 half-finished ones.
&lt;/h3&gt;

&lt;p&gt;Try to work on one or a couple of projects at a time and try to follow the idea-execution pattern. Remember that deployed projects are those that count.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#55-the-best-way-to-learn-is-by-teaching-others" class="anchor"&gt;
  &lt;/a&gt;
  55. The best way to learn is by teaching others.
&lt;/h3&gt;

&lt;p&gt;In order to teach others, you have to study the concept yourself. This assures you get to know the concept to the core and is a win-win as you share your knowledge.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#56-you-are-never-ready-to-apply-for-a-job" class="anchor"&gt;
  &lt;/a&gt;
  56. You are never ready to apply for a job.
&lt;/h3&gt;

&lt;p&gt;Learning to code is a journey, not a destination, so you will always feel like being in the middle to achieve something. Don't let that fool you and apply anyway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#57-the-hype-train-is-real" class="anchor"&gt;
  &lt;/a&gt;
  57. The hype train is real.
&lt;/h3&gt;

&lt;p&gt;Be aware of the trends, but only to the point, where you understand their main working principles and use cases. That way you will know which problems it solves best and will pick up the actual tool just when the necessity arises. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#58-practice-leads-to-mastery" class="anchor"&gt;
  &lt;/a&gt;
  58. Practice leads to mastery.
&lt;/h3&gt;

&lt;p&gt;Repetition is the mother of all knowledge and one of your safest bets to master something is to be persistent in practicing it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#59-focus-on-the-indexes-not-the-content" class="anchor"&gt;
  &lt;/a&gt;
  59. Focus on the indexes, not the content.
&lt;/h3&gt;

&lt;p&gt;Nowadays what matters is to find information fast. If you know what you need and where to look, it's only a matter of time to pick it up.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#60-be-a-sponge-for-knowledge" class="anchor"&gt;
  &lt;/a&gt;
  60. Be a sponge for knowledge.
&lt;/h3&gt;

&lt;p&gt;Develop a habit to learn each and every day in order to stay competitive and knowledgeable. Pay attention to whom you subscribe to. Seek quality over quantity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#61-learn-to-say-no" class="anchor"&gt;
  &lt;/a&gt;
  61. Learn to say no.
&lt;/h3&gt;

&lt;p&gt;If you will never say no to anything, others will start to take advantage of it sooner or later and you will end up working more than you should often.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#62-notetaking-is-your-rescue-for-writing-block" class="anchor"&gt;
  &lt;/a&gt;
  62. Note-taking is your rescue for writing block.
&lt;/h3&gt;

&lt;p&gt;Whatever you do and wherever you are, always try to track down your ideas. Create a back-log of information for the times you are feeling less inspired.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#63-schedule-the-week-and-prioritize" class="anchor"&gt;
  &lt;/a&gt;
  63. Schedule the week and prioritize.
&lt;/h3&gt;

&lt;p&gt;Try to dedicate some time to plan ahead. That way it is easier to identify all the tasks you deal with and prioritize the execution order of them. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#64-taking-breaks-make-wonders" class="anchor"&gt;
  &lt;/a&gt;
  64. Taking breaks make wonders.
&lt;/h3&gt;

&lt;p&gt;If you get stuck, try to do nothing coding-related for a while. Spend time with your family, or practice your hobbies or go for a jog. Often times you will re-visit the project and come up with the solution easily.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#65-sports-and-proper-sleep-boost-productivity" class="anchor"&gt;
  &lt;/a&gt;
  65. Sports and proper sleep boost productivity.
&lt;/h3&gt;

&lt;p&gt;When it comes to productivity, you will often do more with 8 hours of sleep and 4 hours of work, than the other way around. Combine it with regular physical activities for the full effort. &lt;/p&gt;




&lt;p&gt;Writing has always been my passion and it gives me pleasure to help and inspire people. If you have any questions, feel free to reach out!&lt;/p&gt;

&lt;p&gt;Connect me on &lt;a href="https://twitter.com/madzadev"&gt;Twitter&lt;/a&gt;, &lt;a href="https://www.linkedin.com/in/madzadev/"&gt;LinkedIn&lt;/a&gt;, &lt;a href="https://github.com/madzadev"&gt;GitHub&lt;/a&gt; and &lt;a href="https://dev.to/madza"&gt;DEV&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Subscribe to my &lt;a href="https://blog.madza.dev"&gt;Blog&lt;/a&gt; for more articles like this.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>career</category>
      <category>productivity</category>
      <category>beginners</category>
    </item>
    <item>
      <title>How long does it take to learn Python</title>
      <author>Simon Holdorf</author>
      <pubDate>Wed, 06 Jan 2021 21:41:15 +0000</pubDate>
      <link>https://dev.to/thesmartcoder/how-long-does-it-take-to-learn-python-237j</link>
      <guid>https://dev.to/thesmartcoder/how-long-does-it-take-to-learn-python-237j</guid>
      <description>&lt;p&gt;In this post I want to elaborate on how long it takes to learn the basics of the Python programming language. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#content-overview" class="anchor"&gt;
  &lt;/a&gt;
  Content Overview
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#chapter-1"&gt;What is Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-2"&gt;Why Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-3"&gt;How long does it take to learn Python?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chapter-4"&gt;Why Python is a great choice for beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-python" class="anchor"&gt;
  &lt;/a&gt;
  What is Python? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Python is a powerful, dynamic, and flexible programming language. It has an elegant syntax that is easy to read. It supports multiple programming paradigms, including functional, object-oriented, and procedural. &lt;/p&gt;

&lt;p&gt;Its design philosophy emphasizes code readability, and its syntax allows programmers to express concepts in fewer lines of code than would be possible in languages such as C++ or Java. The language provides constructs intended to enable clear programs on both a small and large scale.&lt;/p&gt;

&lt;p&gt;The language was conceived in the late 1980s by Guido van Rossum during his work on the ABC programming language, though it began to take its current form in 1990. Van Rossum's aim was to create a "highly readable" programming language that would also be successful in an educational setting (the original ABC was based around the concept of teaching programming as a second language). In 1989, Guido van Rossum created the first implementation of this new programming language: originally named "Python", but renamed "Python 1" before its public release. This initial implementation was written in C and ran on Unix workstations (although not on any Unix kernel versions released earlier than 2.2).&lt;/p&gt;

&lt;p&gt;You can use Python to do just about anything from web development, systems administration, machine learning, artificial intelligence (AI), and scientific computing. &lt;/p&gt;

&lt;p&gt;It’s also commonly used for scripting applications and creating desktop applications.  &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#why-python" class="anchor"&gt;
  &lt;/a&gt;
  Why Python? &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Python is an excellent language for beginners in computer science. It's free and open-source (as opposed to commercial languages such as Java) so there are no licensing fees. You can get started with Python easily as it comes with an interactive shell (known as the Python interpreter). &lt;/p&gt;

&lt;p&gt;It's readable, which means that the code is easy for anyone to understand, even if they have no background in programming. &lt;/p&gt;

&lt;p&gt;Python has the concept of “batteries included” which means it comes with modules that are pre-written and ready for use right out of the box. And it's object-oriented which helps programmers organize their code and think about problems from multiple angles.&lt;/p&gt;

&lt;p&gt;Python also has a very active community of developers and users. Every new release of Python has improved the performance of the language. Python runs on Windows, Mac OS X/macOS, Linux/Unix, and many other platforms. &lt;/p&gt;

&lt;p&gt;Additionally, since Python is used by Google, YouTube, Pinterest, and Dropbox, for example, there are plenty of job opportunities for those who learn the technology well. This probably isn't going to be your only programming language - most developers are polyglots who know several languages well - but it's a great place to start!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#how-long-does-it-take-to-learn-python" class="anchor"&gt;
  &lt;/a&gt;
  How long does it take to learn Python? &lt;a href="name-3"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;In general, around 8 weeks. It depends on the amount of time and effort you’re willing to put into learning the language, as well as your prior programming experience. Python has a very friendly syntax, so it's easy to get started. But if you want to be a serious Python developer, you'll have to constantly learn and sharpen your skills.&lt;/p&gt;

&lt;p&gt;With that said, if you are capable of committing between 10 and 15 hours per week for about eight weeks to learn Python, then you will likely learn enough of the fundamentals to be productive with the language within that time frame. You should also expect this learning curve to improve your computer programming skills in general. &lt;/p&gt;

&lt;p&gt;Here are some tips for when learning Python:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learn how to use the interpreter. You can simply type "python" in your terminal and start playing with it. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn how variables work. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn about classes, methods, and functions. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand the basics of OOP (Object Oriented Programming). If you don't know what that means, don't worry! It will all make sense later.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn about lists, dictionaries, and tuples. Those are some of the most common data structures used in Python programming. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand basic list operations such as slicing and concatenation (combining lists). That will save you some time when writing code!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Practice making your own programs from scratch! Don't just copy-paste code from tutorials or Stack Overflow answers into your projects without understanding what they do! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get familiar with common errors like SyntaxError, IndentationError, NameError, AttributeError, TypeError, etc… These errors are usually caused by typos or bad syntax – so make sure every line of code is correct before moving on with your program! &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use IDEs like PyCharm or Spyder for easier editing / debugging / testing of your programs. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn how modules work in Python – Modules are files containing classes/functions/variables that can be imported into other python scripts/projects.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-python-is-a-great-choice-for-beginners" class="anchor"&gt;
  &lt;/a&gt;
  Why Python is a great choice for beginners &lt;a href="name-4"&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;There are many reasons why Python is a fantastic choice for beginners:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It is easy to learn and use. &lt;/li&gt;
&lt;li&gt;It is powerful enough for most applications. &lt;/li&gt;
&lt;li&gt;There are lots of resources available.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s take a look at the reasons above in more detail:  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy to Learn and Use&lt;/strong&gt;&lt;br&gt;
Python was designed with an emphasis on readability, so it is easier to learn than many other languages (including C++). It is also free of some quirks and oddities that make other languages difficult to learn (such as C++’s unneeded complexity). &lt;/p&gt;

&lt;p&gt;In addition, Python has an active community that contributes to documentation, tutorials, and other educational materials to help new users get started quickly. So you can spend your time learning Python instead of fighting it! &lt;/p&gt;

&lt;p&gt;And when you do run into problems, there are plenty of people who can help you out on the internet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Powerful Enough for Most Applications&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
Python has all the power needed for most common tasks: You can read and write files, access databases such as MySQL or Oracle, create GUIs, parse XML or JSON data, handle email messages or network requests, etc. &lt;/p&gt;

&lt;p&gt;However Python doesn’t have some features that are often used in low-level programming (e.g., pointers), so it is not appropriate for every application domain; in particular, it may be too high-level for systems programming or graphics programming. &lt;/p&gt;

&lt;p&gt;But this isn’t much of a limitation since there are good alternatives for these domains. And if you do need something that Python doesn’t have, you can always use a lower-level language (e.g., C) in conjunction with Python.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lots of Resources Available&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
There are lots of resources available to help you learn the language: You can find lots of tutorials, books, and other educational materials online. And there are many communities where you can ask questions or get help when you run into problems.&lt;/p&gt;




&lt;p&gt;I hope you learned that Python is a great choice for beginners and that you can learn the basic concepts in a short period of time if you are willing to put the hours in. However, if you want to become really good in Python, much as in other programming languages you have to constantly learn and adapt!&lt;/p&gt;

</description>
      <category>python</category>
      <category>webdev</category>
      <category>todayilearned</category>
      <category>programming</category>
    </item>
    <item>
      <title>How would you design a tiered plan backend?</title>
      <author>Dogushan Kaya</author>
      <pubDate>Wed, 06 Jan 2021 20:54:30 +0000</pubDate>
      <link>https://dev.to/dogushankaya/how-would-you-design-a-tiered-plan-backend-1p3l</link>
      <guid>https://dev.to/dogushankaya/how-would-you-design-a-tiered-plan-backend-1p3l</guid>
      <description>&lt;p&gt;Hello everybody, i want to learn about a plan based access and rate limiting of rest services. How would you design this system with spring boot? Any suggestions are welcome. Thank you ! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dVkVz0EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/drwk9ilgoj4tnte09uqh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dVkVz0EI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/drwk9ilgoj4tnte09uqh.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>java</category>
      <category>architecture</category>
      <category>help</category>
    </item>
  </channel>
</rss>
