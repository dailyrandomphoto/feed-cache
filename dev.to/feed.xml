<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>10 VS Code extensions every Frontend Developer should Must Use</title>
      <author>Coding</author>
      <pubDate>Tue, 14 Sep 2021 05:22:14 +0000</pubDate>
      <link>https://dev.to/coderzzz/10-vs-code-extensions-every-frontend-developer-should-must-use-fig</link>
      <guid>https://dev.to/coderzzz/10-vs-code-extensions-every-frontend-developer-should-must-use-fig</guid>
      <description>&lt;p&gt;Hello everyone, my name is Vansh and I'm a frontend developer. In this blog post, I would like to share 10 VS code extensions that every frontend developer should use. The purpose of using these extensions is to write faster, cleaner, and more consistent code. Let's Jump in!¬†&lt;/p&gt;
&lt;br&gt;Read More: &lt;b&gt;&lt;a href="https://www.codelivly.com/10-vs-code-extensions-every-frontend-developer-should-use/"&gt;10 VS Code extensions every Frontend Developer should use&lt;/a&gt;&lt;/b&gt;

</description>
    </item>
    <item>
      <title>Array.forEach() Method  in JavaScript üöÄ</title>
      <author>Shubham Jadhav</author>
      <pubDate>Tue, 14 Sep 2021 05:18:39 +0000</pubDate>
      <link>https://dev.to/dev_shubham/array-foreach-method-in-javascript-4k9d</link>
      <guid>https://dev.to/dev_shubham/array-foreach-method-in-javascript-4k9d</guid>
      <description>&lt;p&gt;How can we iterate array items through a loop in JavaScript ?? &lt;/p&gt;

&lt;p&gt;If you know the above question answer then give the answer in comment section. &lt;/p&gt;

&lt;p&gt;Today we are learning the most important method in JavaScript. &lt;/p&gt;

&lt;p&gt;Array.forEach();&lt;/p&gt;

&lt;p&gt;‚Ä¢ What is Array.forEach() &lt;br&gt;
   method ?&lt;br&gt;
 =&amp;gt; In which method we can &lt;br&gt;
   iterate array items through &lt;br&gt;
   a loop it's called &lt;br&gt;
   Array.forEach() method. &lt;/p&gt;

&lt;p&gt;‚Ä¢ Syntax of Array.forEach()&lt;br&gt;
 =&amp;gt; arr.forEach((item, index) &lt;br&gt;
    =&amp;gt; { // code here.. })&lt;/p&gt;

&lt;p&gt;This method return a callback function.&lt;/p&gt;

&lt;p&gt;‚Ä¢ Example &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2eGWGUBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/408p0t55ft6dtm8rrp8z.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2eGWGUBK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/408p0t55ft6dtm8rrp8z.jpg" alt="example 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¢ Explanation &lt;br&gt;
  (1) Let's create an array and give any name as per you but I gave 'arr' as name. &lt;br&gt;
  (2) Now, I used here in next step arr.forEach() method. &lt;br&gt;
  (3) As we know this method return a callback function and this has two parameters 'item' and 'index'as shown above example. &lt;br&gt;
  (4) The forEach method iterate all items like a for loop one by one. &lt;/p&gt;

&lt;p&gt;‚Ä¢ Advantages of forEach() method&lt;br&gt;
  (1) It has a clear syntax. &lt;br&gt;
  (2) the forEach method keeps the variables from the callback function bound to the local scope&lt;br&gt;
  (3) The forEach method is less error prone. &lt;/p&gt;

&lt;p&gt;üôè Thank you for reading... &lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Create a responsive popup modal with CSS &amp; JavaScript</title>
      <author>Michael Burrows</author>
      <pubDate>Tue, 14 Sep 2021 05:10:05 +0000</pubDate>
      <link>https://dev.to/michaelburrows/create-a-responsive-popup-modal-with-css-javascript-2l88</link>
      <guid>https://dev.to/michaelburrows/create-a-responsive-popup-modal-with-css-javascript-2l88</guid>
      <description>&lt;p&gt;A popup modal is a UI element that appears in the foreground of a website. They‚Äôre usually triggered by the user allowing them to view more information or complete an action without having to navigate to another URL. In this tutorial we‚Äôll be creating a responsive popup modal styled with CSS and JavaScript functionality.&lt;/p&gt;

&lt;p&gt;Let‚Äôs get start by creating the required HTML markup:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"demo-modal"&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal"&lt;/span&gt; &lt;span class="na"&gt;role=&lt;/span&gt;&lt;span class="s"&gt;"dialog"&lt;/span&gt; &lt;span class="na"&gt;tabindex=&lt;/span&gt;&lt;span class="s"&gt;"-1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"model-inner"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal-header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;Hello World&lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal-close"&lt;/span&gt; &lt;span class="na"&gt;data-id=&lt;/span&gt;&lt;span class="s"&gt;"demo-modal"&lt;/span&gt; &lt;span class="na"&gt;aria-label=&lt;/span&gt;&lt;span class="s"&gt;"Close"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="ni"&gt;&amp;amp;times;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
      Natus earum velit ab nobis eos. Sed et exercitationem voluptatum omnis
      dolor voluptates. Velit ut ipsam sunt ipsam nostrum. Maiores officia
      accusamus qui sapiente. Dolor qui vel placeat dolor nesciunt quo dolor
      dolores. Quo accusamus hic atque nisi minima.
    &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"modal-open"&lt;/span&gt; &lt;span class="na"&gt;data-id=&lt;/span&gt;&lt;span class="s"&gt;"demo-modal"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Display Modal&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All of the content within the &lt;code&gt;demo-modal&lt;/code&gt; is optional and included for the purposes of this tutorial, you could replace with whatever content you like when using this on a real website. There is also a button to trigger the popup and display of the model.&lt;/p&gt;

&lt;p&gt;Note: We‚Äôre building this in a way that would allow us to include multiple modals in a single page. We do this by using matching &lt;code&gt;id&lt;/code&gt; / &lt;code&gt;data-id&lt;/code&gt; attributes on each modal and the corresponding open and close buttons.&lt;/p&gt;

&lt;p&gt;Next we‚Äôll tackle the JavaScript functionality starting with an event listener for when users click on the open and close buttons.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;modal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataset&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;openModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;className&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-close&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;closeModal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This code detects if the user clicked either the open or close button (based on the button class), then triggers the relevant function. We‚Äôll start with the &lt;code&gt;openModal&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;openModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hidden&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;escClose&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;overlay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;div&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appendChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;overlay&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And for the &lt;code&gt;closeModal&lt;/code&gt; function:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;closeModal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;overflow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;auto&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;modal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;open&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;keydown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;escClose&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;body&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;removeChild&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;modal-overlay&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You may have noticed an &lt;code&gt;escClose&lt;/code&gt; event listener in the previous two functions. This is so the the modal can be closed by pressing the escape key, here‚Äôs the code for that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;escClose&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;keyCode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;closeModal&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Each key on a keyboard has it‚Äôs own unique &lt;code&gt;keyCode&lt;/code&gt; for the ‚Äúescape‚Äù key it‚Äôs &lt;code&gt;27&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That‚Äôs all for the JavaScript we can now move onto the CSS:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.modal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.modal&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;open&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.model-inner&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;600px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.modal-header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;space-between&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nf"&gt;#modal-overlay&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And here‚Äôs what the finished popup modal looks like once complete:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c_vi6HpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rrgab0u61pz2qhmxljp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c_vi6HpV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3rrgab0u61pz2qhmxljp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That‚Äôs all for this tutorial. By following along you‚Äôll have learnt how to build a modal popup without having to rely on any external JavasScript plugins or libraries. A full working version of this modal can be found on &lt;a href="https://codepen.io/w3collective/pen/jOBvRgY"&gt;CodePen&lt;/a&gt; and the source code is also available on &lt;a href="https://github.com/w3collective/responsive-popup-modal"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Overcoming the Fear of LOCO(Lines of Coding)</title>
      <author>Riean Esteves</author>
      <pubDate>Tue, 14 Sep 2021 04:26:17 +0000</pubDate>
      <link>https://dev.to/rieesteves/overcoming-the-fear-of-loco-lines-of-coding-2hjh</link>
      <guid>https://dev.to/rieesteves/overcoming-the-fear-of-loco-lines-of-coding-2hjh</guid>
      <description>&lt;p&gt;A little more than 250 lines under font-size of 18pxl,the worse fear rather nightmare for beginners. And if there is a comma or a semi-colon missing, the slightest error of spelling and the whole program goes for a toss. Fear of LOCO (Lines of coding)/ Coding is not exactly a fear but a mindset which sets you feared.&lt;br&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--znvNjyVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5begpmyto35j8ynisc7.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--znvNjyVD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f5begpmyto35j8ynisc7.jpg" alt="FEAR of a huge program"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Attributes, arguments ,class ,method, objects ,function, parameter's and more....&lt;/strong&gt;&lt;/em&gt; and end-list list of these technical jargons. How frightening are these to hear and understand initially; but gradually with time one can &lt;em&gt;ACE&lt;/em&gt; it and code with &lt;strong&gt;EASE!&lt;/strong&gt; These are building blocks of a code and structure the program efficiently.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fear-of-locolines-of-coding"&gt;
  &lt;/a&gt;
  FEAR of LOCO(Lines of Coding)!!!
&lt;/h3&gt;

&lt;p&gt;As a beginner a new IDE( &lt;em&gt;text editors for coding&lt;/em&gt;) with some fancy language and amazing colors fascinating at first as complexity of code increases it increase the fear!&lt;br&gt;
 &lt;em&gt;Now this fear, is it &lt;strong&gt;Fear of length of code? Confused with concepts? thinking its out of ones capability! afraid to mess up the hard work? tendency to error up as having knowledge of too many languages(java, c, python, html, etc)&lt;/strong&gt; whatever the option the bottom line thereafter lies happiness when the code successfully runs at the wink of your eye!&lt;/em&gt; This lost happiness can be easily found if this minor fear is over-come. Coding is not an easy task like having a &lt;em&gt;piece of cake&lt;/em&gt; and one should be in the attitude of &lt;em&gt;"Oh ! This is not my cup of tea !"&lt;/em&gt; , this is where the fear begins in us.&lt;/p&gt;




&lt;p&gt;The Question now arises : &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-do-we-overcome-"&gt;
  &lt;/a&gt;
  How do we overcome ????
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.Keep a positive attitude and  well planned structural idea in mind&lt;/strong&gt;&lt;br&gt;
Before one starts to code keep a rough structure jotted down. This will help to keep a track of your work pending/done , also  it will help in building up your self confidence and esteem.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.Learn coding from Good Resources&lt;/strong&gt;&lt;br&gt;
With Online being  better preferred option rather than the tradition books learning ,there are various open source learning platform's that help you get better in this field&lt;br&gt;
As a beginner / even later these are some sights I find very helpful to learn new ways/styles to clear a concept and to tackle a statement.( &lt;em&gt;*The resources are attached at the end&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.Master one Language at a time.&lt;/strong&gt;&lt;br&gt;
Don't be the jack of all and master on none, learn one language either &lt;a href="https://www.w3schools.com/cpp/default.asp"&gt;C++&lt;/a&gt; , &lt;a href="https://www.w3schools.com/java/default.asp"&gt;Java&lt;/a&gt; , &lt;a href="https://www.w3schools.com/python/default.asp"&gt;Python&lt;/a&gt; ;or whichever you feel easy the best. &lt;br&gt;
No one is 100% perfect to learn everything in a short span of time and remember it at the wink of an eye . However there is no harm in re-watching videos or reading articles again to understand a concept. The outcome should be whatever the problem may be one has an ideal technical logic in-order to come up with a solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.Don't Worry about the near future&lt;/strong&gt;&lt;br&gt;
Coders usually tend to worry and question themselves with &lt;em&gt;What If?!&lt;/em&gt; This attitude is not very heathy always .Thinking about the future whether a code runs or no will affect one currently typing and having a clear idea set also one can tend to end up with multiple silly typo-errors. It might lead to a break in the flow of the process which eventually can create a mess in your code so &lt;em&gt;Just stay calm and keep typing!!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.Begin with Small Steps&lt;/strong&gt;&lt;br&gt;
However experienced one may be , in whichever aspect a small start has always lead to a wonderful turnover. Similarly with coding; Don't just get super-fascinated after learning some concepts and jump to a conclusion you know it all! and try doing something out of hand out of thought and get caught up with fear of LOCO. &lt;br&gt;
Start small by this I mean break the complex problem in simple easy solvable steps &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Qj8TXwPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx78zs5fue5jm8eys0uo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qj8TXwPK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xx78zs5fue5jm8eys0uo.png" alt="Steps "&gt;&lt;/a&gt;&lt;br&gt;
click&lt;a href="https://nickjanetakis.com/blog/breaking-down-problems-is-the-number-1-software-developer-skill"&gt;here to read more&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.Google the best companion&lt;/strong&gt;&lt;br&gt;
You know the best answers to the solution is Ok Google!!&lt;br&gt;
Searching and learning via google is no harm but yes one should know the subject and research more and not just 'Ctrl + C' &amp;amp; 'Ctrl + V'. but understand and add you own twist in it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.Reach Out&lt;/strong&gt;&lt;br&gt;
Reach out to the professional/ your peers.&lt;br&gt;
*Teachers/ Professors (School /college/University)&lt;br&gt;
*Peers&lt;br&gt;
*community learning &lt;br&gt;
You lend a hand for help and then reach out to those who seek. A best two way learning process and most helpful way to overcome fear of coding.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8. Coding everyday helps the LOCO fear go Away!&lt;/strong&gt;&lt;br&gt;
Yes indeed, a small amount of coding daily helps you get a better in logical thinking as well as increases your typing speed. Some may find it funny with a bustling busy schedule &lt;em&gt;how can I code everyday?&lt;/em&gt; But if one gets to this practice, there is no fear that can overpower your will power. &lt;/p&gt;




&lt;p&gt;Lastly, LOCO fear isn't a harm ; well unless you overstress, and overthink about the outcome in future . Lines of coding gradually increases with experience and professional status  or work load  so.. break you work , and code with Ease. Remember to overcome LOCO you need to defeat he fear in your mind your hand will automatically work smoothly. As beginners just be a master of one and not a jack of all; it eventually helps you with clear idea of usage of tags parameters etc in your code. &lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  Links to the online resources
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;a href="https://www.w3schools.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8bGVkgdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eptqoii4sgva4b9n99op.jpeg" alt="link1"&gt;&lt;/a&gt;  &lt;a href="https://www.codecademy.com/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cxKkT2IO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i4pj3f8m8jrw8f8xppdb.png" alt="link2"&gt;&lt;/a&gt;   &lt;a href="https://github.com/"&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oqs3r6Ce--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vqgungcyadgruuxaedix.jpg" alt="link3"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>codereview</category>
      <category>coding</category>
      <category>challenge</category>
    </item>
    <item>
      <title>Building a Virtual Conference Ticket with Begin, AWS &amp; Puppeteer</title>
      <author>üÖ≤üÖ∞üÜÅüÜÉüÖ¥üÜÅ</author>
      <pubDate>Tue, 14 Sep 2021 03:44:47 +0000</pubDate>
      <link>https://dev.to/crtr0/building-a-virtual-conference-ticket-with-begin-aws-puppeteer-hgk</link>
      <guid>https://dev.to/crtr0/building-a-virtual-conference-ticket-with-begin-aws-puppeteer-hgk</guid>
      <description>&lt;p&gt;This year, inspired by the folks at Next.js Conf, I decided to build &lt;a href="https://2021.cascadiajs.com/tickets/140"&gt;virtual tickets&lt;/a&gt; for my conference &lt;a href="https://2021.cascadiajs.com"&gt;CascadiaJS&lt;/a&gt;. It's a fun feature for attendees because they get to help spread the word about an event they're excited about.&lt;/p&gt;

&lt;p&gt;Here is the user flow for attendees choosing to create a virtual ticket:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;They click a link to create the virtual ticket.&lt;/li&gt;
&lt;li&gt;This sends them to Github for an OAuth flow.&lt;/li&gt;
&lt;li&gt;On success, Github returns with OAuth code.&lt;/li&gt;
&lt;li&gt;Web app stores success marker in DB for this attendee.&lt;/li&gt;
&lt;li&gt;Web app fires event to generate the virtual ticket image.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's walk through each of these steps!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#0-using-begin-to-build-on-aws"&gt;
  &lt;/a&gt;
  0. Using Begin to build on AWS
&lt;/h2&gt;

&lt;p&gt;The &lt;a href="https://github.com/cascadiajs/cascadiajs-2021"&gt;CascadiaJS 2021 web app&lt;/a&gt; is built on a framework called &lt;a href="http://arc.codes"&gt;Arc&lt;/a&gt; and hosted on AWS via a new platform called &lt;a href="http://begin.com"&gt;Begin&lt;/a&gt;. The combination of Arc and Begin make it easy to build a full-stack web application that takes full advantage of AWS services like Lambda, DynamoDB and SNS without 99% of the boilerplate.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-creating-the-github-oauth-link"&gt;
  &lt;/a&gt;
  1. Creating the Github OAuth link.
&lt;/h2&gt;

&lt;p&gt;First, you'll need to go to Github and &lt;a href="https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app"&gt;create an OAuth application&lt;/a&gt;. Once you do this, you'll be provided with a &lt;code&gt;Client ID&lt;/code&gt; and you can create a &lt;code&gt;Client Secret&lt;/code&gt;. Store both of these values in your &lt;a href="https://learn.begin.com/basic/state/env"&gt;environment variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Building the link to kick-off a Github OAuth flow is as simple as constructing the URL below with your &lt;code&gt;Client ID&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;a href="https://github.com/login/oauth/authorize?client_id=${ clientID }"&amp;gt;Get Added to Directory&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#2-this-sends-them-to-github-for-an-oauth-flow"&gt;
  &lt;/a&gt;
  2. This sends them to Github for an OAuth flow.
&lt;/h2&gt;

&lt;p&gt;When the user lands on this page, they'll see the name of your Github OAuth app and the logo you've uploaded. Make sure these are things that folks will trust. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-on-success-github-returns-with-oauth-code"&gt;
  &lt;/a&gt;
  3. On success, Github returns with OAuth code.
&lt;/h2&gt;

&lt;p&gt;Once the user authorizes this connection, Github will redirect to the &lt;code&gt;Authorization callback URL&lt;/code&gt; that you will have configured and will pass along a &lt;code&gt;code&lt;/code&gt; as a query parameter.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-web-app-stores-success-marker-in-db-for-this-attendee"&gt;
  &lt;/a&gt;
  4. Web app stores success marker in DB for this attendee.
&lt;/h2&gt;

&lt;p&gt;In the HTTP function that handles the OAuth callback, we use the code passed in the request to &lt;a href="https://github.com/cascadiajs/cascadiajs-2021/blob/main/src/http/get-home-000view/github.js"&gt;retrieve the public information&lt;/a&gt; for this Github user. We then update the attendees ticket record to store their Github username and avatar:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let info = await github(req)
await data.set({ table: 'tickets', ...ticket, github: info.login, avatar: info.avatar })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#5-web-app-fires-event-to-generate-the-virtual-ticket-image"&gt;
  &lt;/a&gt;
  5. Web app fires event to generate the virtual ticket image.
&lt;/h3&gt;

&lt;p&gt;Finally, the stuff you've &lt;em&gt;really&lt;/em&gt; been waiting for: generating dynamic images!&lt;/p&gt;

&lt;p&gt;First, since this image generation process can take time, I chose to kick-off an asynchronous job using &lt;a href="https://docs.begin.com/en/event-functions/provisioning"&gt;Arc events&lt;/a&gt; which are sugar for more easily using AWS SNS. This way the HTTP functions returns to the user immediately, while imagine generation happens in the background.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const name = 'ticket-shared'
const payload = { number: ticket.number }
await arc.events.publish({ name, payload })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The event function, when invoked, is provided with the unique ticket number for this attendee. It uses this number to generate the image of virtual ticket:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;let file = await screenshot({ number })
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's dig into the &lt;code&gt;screenshot&lt;/code&gt; module, since that's where the magic happens:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const chromium = require('chrome-aws-lambda')
require('puppeteer-core')

function getBaseUrl() {
  let url
  if (process.env.NODE_ENV === 'testing') {
      url = 'http://localhost:3333'
  }
  else  {
      url = `https://${ process.env.NODE_ENV === 'staging' ? 'staging.' : '' }2021.cascadiajs.com`
  }
  return url
}

module.exports = async function screencap({ number }) {
    let browser
    let baseUrl = getBaseUrl()
    // set-up headless browser
    let height = 628
    let width = 1200
    let deviceScaleFactor = 1
    try {
      browser = await chromium.puppeteer.launch({
        args: chromium.args,
        defaultViewport: {
          height, width, deviceScaleFactor
        },
        executablePath: await chromium.executablePath,
        headless: chromium.headless,
        ignoreHTTPSErrors: true,
      })
      let page = await browser.newPage()
      await page.goto(`${ baseUrl }/tickets/${ number }?social`)
      const file = await page.screenshot()
      await browser.close()
      return file
    } finally {
      if (browser) {
        await browser.close()
      }
    }
  }

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This module uses &lt;code&gt;chrome-aws-lambda&lt;/code&gt; and &lt;code&gt;puppeteer-core&lt;/code&gt; to fire up a headless Chrome browser and navigate to a webpage that dynamically builds a page for the &lt;a href="https://2021.cascadiajs.com/tickets/140?social"&gt;attendee's virtual ticket&lt;/a&gt;. It then takes a screenshot of this webpage and returns the buffer of bytes.&lt;/p&gt;

&lt;p&gt;This is a good time to note that you want to configure the Lambda associated with this event handler to be pretty beefy and not to timeout too quickly. You can accomplish by setting properties in &lt;code&gt;arc.config&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@aws
runtime nodejs14.x
timeout 90
memory 3008
@arc
shared false
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;shared false&lt;/code&gt; command tells Arc not to build and include code and dependencies from the applications shared folder. This is really important because Lambda has a hard 250MB limit on code/deps and &lt;code&gt;chrome-aws-lambda&lt;/code&gt; and &lt;code&gt;puppeteer-core&lt;/code&gt; gobble up a ton of that space.&lt;/p&gt;

&lt;p&gt;We then save this generated screen to s3:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    const s3 = new AWS.S3()
    let fileName = `ticket-${ number }.png`
    await s3
      .putObject({
        Bucket: process.env.ARC_STATIC_BUCKET,
        Key : process.env.ARC_STATIC_PREFIX + '/' + fileName,
        ContentType: 'image/png',
        Body: file,
        ACL: 'public-read',
      })
      .promise()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;ARC_STATIC_BUCKET&lt;/code&gt; and &lt;code&gt;ARC_STATIC_PREFIX&lt;/code&gt; are automatically available in your app's environment variables thanks to Begin.&lt;/p&gt;

&lt;p&gt;The last step is to attach this beautiful image to the attendee's custom ticketing page. If you go to &lt;a href="https://2021.cascadiajs.com/tickets/140"&gt;my ticketing page&lt;/a&gt; and view the source you'll see &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt; tags for Open Graph and Twitter image URLs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;    &amp;lt;meta property="og:image" content="${ socialUrl }" /&amp;gt;
    &amp;lt;meta name="twitter:image" content="${ socialUrl }"&amp;gt;
    &amp;lt;meta name="twitter:card" content="summary_large_image"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Phew! I'm sure I skipped a few steps, but you get the gist of how this works and find this helpful! The source code for the CascadiaJS web app can be found on Github at:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/cascadiajs/cascadiajs-2021"&gt;https://github.com/cascadiajs/cascadiajs-2021&lt;/a&gt;&lt;/p&gt;

</description>
      <category>aws</category>
      <category>node</category>
      <category>webdev</category>
      <category>serverless</category>
    </item>
    <item>
      <title>Frameworks War</title>
      <author>Farmin F</author>
      <pubDate>Tue, 14 Sep 2021 02:47:25 +0000</pubDate>
      <link>https://dev.to/farminfarzin/frameworks-war-3mak</link>
      <guid>https://dev.to/farminfarzin/frameworks-war-3mak</guid>
      <description>&lt;p&gt;Last year we started building our portal from the scratch and we had the luxury of using any technologies, framework or library that we wanted to.&lt;/p&gt;

&lt;p&gt;We didn't have a lot of time so we just wanted to speed up and write the business logic rather than wasting time on the configuration of tools together. &lt;br&gt;
Our only restriction was the fact that we were all JS devs and we wanted to write JavaScript or TypeScript and also from the DevOps side, we knew we'll use K8s (As much as I love Serverless, unfortunately, it was out from the picture  - Maybe another blog for another time to talk about this).&lt;/p&gt;

&lt;p&gt;We had a list of suggestions and in there we had frameworks or multiple libs working together. We decided to pull out the libraries since we wanted an opinionated framework to give us the power to focus on writing the code for logic from the first day. Of course, there's a trade-off between those approaches as you would have the freedom to choose the best libraries (or the ones that you're comfortable with) or you can just limit yourself to a framework and its conventions/patterns.&lt;/p&gt;

&lt;p&gt;This was very controversial as some people believe in the convention over configurations and some people believe in freedom of using whatever they want and configuring them as they want.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DfIl_TGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x9s4ea8890b9daoh8ss.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DfIl_TGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3x9s4ea8890b9daoh8ss.gif" alt='alt=""'&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-how-we-could-decide"&gt;
  &lt;/a&gt;
  But How We Could Decide?
&lt;/h2&gt;

&lt;p&gt;We prepared a list of features and considerations that we liked to have from the framework or library and gave them points.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Only Backend/Frontend or Full-Stack&lt;/strong&gt; Some frameworks offer the Frontend in their architecture too, so there's no need to have a separated project but again, you'd be limited to their patterns.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Stable Version&lt;/strong&gt; There are a lot of amazing frameworks out there, but not that all of them are production-ready!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Community Support&lt;/strong&gt; You'd be surprised how much this matters. When you face a weird bug and want to scream and leave your job, you can just search it on the internet or open an issue on Github and people will help you.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Documentation&lt;/strong&gt; No need to mention how much important it is.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;DB Migration&lt;/strong&gt; So this is one of the underrated features that will save your skin. The ability to manage your migrations, revert them, or apply them to new environments.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Debugging&lt;/strong&gt; Easy debugging would save a lot of time from devs and make your delivery pipeline faster.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Learning Curve&lt;/strong&gt; As always, the time constraint is the biggest issue in any product development and this will help for ramping up quickly as you code.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Testing&lt;/strong&gt; There's always a way to test your code with the technology that you want. It depends on what type of testing. I would love to see the framework offering unit testing out of the box but for integration or end-to-end I might go with my solution.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Logging&lt;/strong&gt; Any production application needs good logging. Get you out of trouble when your users are reporting bugs.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Configuration&lt;/strong&gt; How much time we'll spend on the configuration of a project to have it set up? is it high or it's just a matter of running a command?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;CLI tooling&lt;/strong&gt; A lot of frameworks offer CLI commands which makes it easy to generate and scaffold a lot of code and saves a lot of time.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Backend API protocol&lt;/strong&gt; We were looking for having Restful but some offer Graphql too!&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Typescript support&lt;/strong&gt; This was optional when we were making the decision but if I go back, I'd make it required.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Career&lt;/strong&gt; One of my considerations when I want to learn technology X is "what is the future of X?". This time not for me but also the team, would devs be happy when they become experts of that framework? When we want to hire new devs, are they going to be excited working on it?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#so-which-frameworks"&gt;
  &lt;/a&gt;
  So Which Frameworks?
&lt;/h2&gt;

&lt;p&gt;Our final list of frameworks were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://expressjs.com/"&gt;Express&lt;/a&gt; + &lt;a href="https://www.prisma.io/"&gt;Prisma&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://koajs.com/"&gt;KoaJ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blitzjs.com/"&gt;BlitzJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redwoodjs.com/"&gt;RedwoodJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nestjs.com/"&gt;NestJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sailsjs.com/"&gt;SailsJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adonisjs.com/"&gt;Adonis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nextjs.org/"&gt;NextJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#decisions"&gt;
  &lt;/a&gt;
  Decisions
&lt;/h2&gt;

&lt;p&gt;The first decision that we made was around the first item on the list: &lt;code&gt;Only Backend or Full-Stack&lt;/code&gt;.&lt;br&gt;
We wanted to scale and we knew we're going to have multiple web apps consuming our API so we decided to have our Frontend separated. &lt;br&gt;
It was easy, &lt;strong&gt;Next.js&lt;/strong&gt; was the winner since it offers a ton on the frontend and satisfies most of our items on the list.&lt;/p&gt;

&lt;p&gt;Then we took out the ones that didn't have production-ready version. Unfortunately &lt;code&gt;Blitz&lt;/code&gt; and &lt;code&gt;Redwood&lt;/code&gt; got eliminated and it was a pity honestly. I loved RedwoodJS so much that I started doing my side project just because I didn't want to miss learning it.&lt;/p&gt;

&lt;p&gt;Later we got rid of &lt;code&gt;Express + Prisma&lt;/code&gt; because for making it ready we needed to have a lot of configuration and adding a lot of other libraries for future requirements.&lt;/p&gt;

&lt;p&gt;So we had the final list of Frameworks which had 'Stable Version', 'Community Support' and good 'Documentation'. &lt;br&gt;
I'm not going to review those frameworks but as we researched and looked into them, not all of them had good tooling or CLI commands or DB migration management capability.&lt;/p&gt;

&lt;p&gt;Between those we chose &lt;strong&gt;NestJS&lt;/strong&gt;: it had almost all of the points that we wanted, the only issue at that time was Prisma which wasn't production-ready and its migration was experimental but right now after more than a year, we are super happy for the call that we made!&lt;br&gt;
We have scaled 10x on the product side and 4x on the dev side and NestJs scaled very well, plus Prisma released a lot of features and made it easier for us to scale on the DB side.&lt;br&gt;
Talking to devs on the team, they are super happy too. They have learned frameworks (both NextJs and NestJs) that are great for their career!&lt;/p&gt;

</description>
      <category>framework</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Design patterns in Javascript: Publish-Subscribe or PubSub</title>
      <author>Anish Kumar</author>
      <pubDate>Tue, 14 Sep 2021 02:40:42 +0000</pubDate>
      <link>https://dev.to/anishkumar/design-patterns-in-javascript-publish-subscribe-or-pubsub-20gf</link>
      <guid>https://dev.to/anishkumar/design-patterns-in-javascript-publish-subscribe-or-pubsub-20gf</guid>
      <description>&lt;p&gt;What's a design pattern in software engineering? It's a &lt;strong&gt;general repeatable solution&lt;/strong&gt; to a commonly occurring problem in software design. In this article, we'll be looking at one of such common design patterns and see how it can be put to use in real world applications.&lt;/p&gt;

&lt;p&gt;This pattern is referred to as Publish-Subscribe or PubSub. Let's start with the overall notion behind this pattern before writing some code.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vyXhT7Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631540738187/qmkcqTo2D.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vyXhT7Fy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1631540738187/qmkcqTo2D.png" alt="pubsub.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The image above describes the general idea behind this pattern:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We have a PubSub 'container' that maintains a list of &lt;code&gt;subscribers&lt;/code&gt; (a subscriber is just a function)&lt;/li&gt;
&lt;li&gt;A new subscription can be created by using the &lt;code&gt;subscribe(subscriber)&lt;/code&gt; method, which essentially adds the &lt;code&gt;subscriber&lt;/code&gt; into our PubSub container&lt;/li&gt;
&lt;li&gt;We can use &lt;code&gt;publish(payload)&lt;/code&gt; to call all the existing &lt;code&gt;subscribers&lt;/code&gt; in the PubSub container with &lt;code&gt;payload&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Any specific &lt;code&gt;subscriber&lt;/code&gt; can be removed from the container, at any point in time, using the &lt;code&gt;unsubscribe(subscriber)&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#implementation"&gt;
  &lt;/a&gt;
  Implementation
&lt;/h2&gt;

&lt;p&gt;Looking at the points above it's pretty straightforward to come up with a simple implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pubsub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;// this is where we maintain list of subscribers for our PubSub&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="c1"&gt;// add the subscriber to existing list&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// remove the subscriber from existing list&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="c1"&gt;// publish payload to existing subscribers by invoking them&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's add a bit of error handling to this implementation:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// pubsub.js&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a valid argument for subscribe method, expected a function instead`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is not a valid argument for unsubscribe method, expected a function instead`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;sub&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;sub&lt;/span&gt;&lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;

&lt;p&gt;We can use this implementation as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./PubSub&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;PubSub&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, elsewhere in the application, we can publish and subscribe using this instance:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;//app.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something here&lt;/span&gt;
  &lt;span class="nx"&gt;showMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// home.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;pubSubInstance&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./main.js&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;pubSubInstance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;message&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Hola!&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#is-it-useful-in-real-applications"&gt;
  &lt;/a&gt;
  Is it useful in real applications?
&lt;/h2&gt;

&lt;p&gt;Yes. In fact, there are many libraries that use it under the hood and you may not have realized it so far.  Let's take the example of the popular state management library for ReactJS - &lt;strong&gt;Redux&lt;/strong&gt;. Of course, its implementation is not as simple as ours, since it's been implemented to handle many other nuances and use-cases. Nevertheless, the underlying concept remains the same.&lt;/p&gt;

&lt;p&gt;Looking at the &lt;a href="http://redux.js.org/docs/api/Store.html#store-methods"&gt;methods offered by Redux&lt;/a&gt;, You would see &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;subscribe()&lt;/code&gt; methods which are equivalent to &lt;code&gt;publish()&lt;/code&gt; and &lt;code&gt;subscribe()&lt;/code&gt; methods we implemented above. You usually won't see &lt;code&gt;subscribe()&lt;/code&gt; method getting used directly, this part is abstracted away behind &lt;code&gt;connect()&lt;/code&gt; method offered by react-redux library. You can follow the implementation details &lt;a href="https://github.com/reduxjs/react-redux/blob/4.x/src/components/connect.js#L199"&gt;here&lt;/a&gt; if that interests you. &lt;/p&gt;

&lt;p&gt;In summary, all react components using &lt;code&gt;connect()&lt;/code&gt; method act as subscribers. Any component using &lt;code&gt;dispatch()&lt;/code&gt; acts as the publisher. And that explains why dispatching an action from any component causes all &lt;code&gt;connected&lt;/code&gt; components to rerender. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-next"&gt;
  &lt;/a&gt;
  What's next
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;We'll see how the idea behind PubSub can be extended further to build a state management library like redux from scratch.&lt;/li&gt;
&lt;li&gt;We'll also see how an Event Emitter can be built from scratch, using similar notion as PubSub&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;This article has been originally published at &lt;a href="https://stackfull.dev/design-patterns-in-javascript-publish-subscribe-or-pubsub-1"&gt;StackFull.dev&lt;/a&gt;. If you enjoyed reading this, you may want to opt for my &lt;a href="https://stackfull.dev"&gt;newsletter&lt;/a&gt;. It would let me reach out to you whenever I publish a new thought!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>redux</category>
      <category>pubsub</category>
      <category>designpatterns</category>
    </item>
    <item>
      <title>Don't make these DevOps MISTAKES! We made them for you so you don't have to</title>
      <author>Davide 'CoderDave' Benvegn√π</author>
      <pubDate>Tue, 14 Sep 2021 02:00:30 +0000</pubDate>
      <link>https://dev.to/n3wt0n/don-t-make-this-devops-mistakes-we-made-them-for-you-2ih7</link>
      <guid>https://dev.to/n3wt0n/don-t-make-this-devops-mistakes-we-made-them-for-you-2ih7</guid>
      <description>&lt;p&gt;&lt;strong&gt;DevOps is Hard&lt;/strong&gt;! And there are many common DevOps mistakes new engineers make. &lt;/p&gt;

&lt;p&gt;What if we have a way for you to &lt;strong&gt;avoid those most common mistakes&lt;/strong&gt;?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h3&gt;

&lt;p&gt;One question that I get over and over again is: &lt;strong&gt;&lt;em&gt;How can I get better at DevOps&lt;/em&gt;&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;And so I've teamed up with a group of &lt;strong&gt;awesome DevOps experts&lt;/strong&gt; and content creators, and in this video we are gonna be going through some things you need to think about when starting your DevOps career, or even if you're already into DevOps.&lt;/p&gt;

&lt;p&gt;And we are also going through &lt;strong&gt;our mistakes we made&lt;/strong&gt; starting out &lt;strong&gt;so you don't make the same mistakes&lt;/strong&gt; on your DevOps journey.&lt;/p&gt;

&lt;p&gt;ü¶âWe made these devops mistakes in our early career stages, and if you follow our advice you won't make them too.&lt;/p&gt;

&lt;p&gt;ü§©This video is the biggest collaboration on CoderDave's channel yet! You will find below all the links to these experts profiles and channels, make sure you check them out after you have finished here.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-video"&gt;
  &lt;/a&gt;
  The Video
&lt;/h3&gt;

&lt;p&gt;Alright, let's get into some of the biggest mistakes we made.&lt;/p&gt;

&lt;p&gt;Enjoy the watch!&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VaEFosTY7FU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/VaEFosTY7FU"&gt;Link to the video: https://youtu.be/VaEFosTY7FU&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;I hope us talking about our mistakes was valuable for you. We've tried to &lt;strong&gt;share those mistakes&lt;/strong&gt; we made and how to avoid them &lt;strong&gt;so you don't have to make them as well&lt;/strong&gt;, and you can jump start your DevOps career.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you have any questions about the points we have covered and go check out the awesome people that contributed to this video, you can find all of their info below.&lt;/p&gt;

&lt;p&gt;You may also want to watch &lt;a href="https://youtu.be/LrQRpiPjIwc"&gt;this video here&lt;/a&gt;, in which I've teamed up with another group of DevOps experts and shared their mistakes and how to avoid them.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#experts-profiles"&gt;
  &lt;/a&gt;
  Experts profiles
&lt;/h3&gt;

&lt;p&gt;üë≤üèª DevOps Experts in this video (appearance order):&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sid-palas-devops-directive"&gt;
  &lt;/a&gt;
  Sid Palas - DevOps Directive
&lt;/h4&gt;

&lt;p&gt;‚ñ∫ YouTube: &lt;a href="https://www.youtube.com/c/DevOpsDirective/"&gt;https://www.youtube.com/c/DevOpsDirective/&lt;/a&gt;&lt;br&gt;
‚ñ∫ Twitter: &lt;a href="https://twitter.com/sidpalas"&gt;https://twitter.com/sidpalas&lt;/a&gt;&lt;br&gt;
‚ñ∫ Website: &lt;a href="https://devopsdirective.com/"&gt;https://devopsdirective.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#viktor-farcic-devops-toolkit"&gt;
  &lt;/a&gt;
  Viktor Farcic - DevOps Toolkit
&lt;/h4&gt;

&lt;p&gt;‚ñ∫ YouTube: &lt;a href="https://youtube.com/c/devopstoolkit"&gt;https://youtube.com/c/devopstoolkit&lt;/a&gt;&lt;br&gt;
‚ñ∫ Twitter: &lt;a href="https://twitter.com/vfarcic"&gt;https://twitter.com/vfarcic&lt;/a&gt;&lt;br&gt;
‚ñ∫ LinkedIn: &lt;a href="https://www.linkedin.com/in/viktorfarcic/"&gt;https://www.linkedin.com/in/viktorfarcic/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#anais-urlichs"&gt;
  &lt;/a&gt;
  Anais Urlichs
&lt;/h4&gt;

&lt;p&gt;‚ñ∫ YouTube: &lt;a href="https://www.youtube.com/c/AnaisUrlichs"&gt;https://www.youtube.com/c/AnaisUrlichs&lt;/a&gt;&lt;br&gt;
‚ñ∫ Twitter: &lt;a href="https://twitter.com/urlichsanais"&gt;https://twitter.com/urlichsanais&lt;/a&gt;&lt;br&gt;
‚ñ∫ Newsletter: &lt;a href="https://anaisurl.com/"&gt;https://anaisurl.com/&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#christian-lempa-the-digital-life"&gt;
  &lt;/a&gt;
  Christian Lempa - The Digital Life
&lt;/h4&gt;

&lt;p&gt;‚ñ∫ YouTube: &lt;a href="https://www.youtube.com/thedigitallifetech"&gt;https://www.youtube.com/thedigitallifetech&lt;/a&gt;&lt;br&gt;
‚ñ∫ Twitter: &lt;a href="https://twitter.com/christian_tdl"&gt;https://twitter.com/christian_tdl&lt;/a&gt;&lt;br&gt;
‚ñ∫ Instagram: &lt;a href="https://www.instagram.com/christian_tdl/"&gt;https://www.instagram.com/christian_tdl/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; üöÄ for more content:&lt;/p&gt;

&lt;p&gt;üìΩ &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
‚òï &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
üíñ &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
üìß &lt;a href="https://coderdave.io/newsletter"&gt;Newsletter&lt;/a&gt;&lt;br&gt;
üåê &lt;a href="https://coderdave.io"&gt;CoderDave.io Website&lt;/a&gt;&lt;br&gt;
üëï &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
üë¶üèª &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
üê±‚Äçüíª &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
üë≤üèª &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
üë¥üèª &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
üîâ &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/CoderDave"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/VaEFosTY7FU"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>codenewbie</category>
      <category>tips</category>
      <category>experts</category>
    </item>
    <item>
      <title>Append method with URLSearchParams</title>
      <author>Ice Calee</author>
      <pubDate>Tue, 14 Sep 2021 01:41:02 +0000</pubDate>
      <link>https://dev.to/alive2020/append-method-with-urlsearchparams-4o2a</link>
      <guid>https://dev.to/alive2020/append-method-with-urlsearchparams-4o2a</guid>
      <description>&lt;p&gt;Just for the sake of learning and not to forget, &lt;br&gt;
I am sharing this chunk of code of the implementation of Append method with URLSearchParams.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="nx"&gt;getCategoryMains&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;assign&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;itemsPerPage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;options&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;categoryType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;VIDEO&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;appPublishId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getAllCategoryMains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categoryMainData&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categoryMainCount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;x-total-count&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;handleSetCategoryMainId&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Api code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getAllCategoryMains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;URLSearchParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;page&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;page&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
  &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;size&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;getSearchParams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;Vue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s2"&gt;`/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/contents/api/category-mains?sort=id,desc`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;headers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;Authorization&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Bearer &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;session&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;access_token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getSearchParams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;sort&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appPublishId&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appPublishId&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appPublishId&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
      &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appPublishId&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appPublishId.in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;appPublishId.equals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;appPublishId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;name.contains&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activated&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activated&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;activated.equals&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activated&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categoryType&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categoryType&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;categoryType.in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;categoryType&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;string&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;params&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;tagId.in&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;search&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;category&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I'm a junior frontend developer with 5 months of work experience, so if you know any better suggestions for rewriting this code please leave comments.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Testing Library and why I use React Testing Library.</title>
      <author>Tony Kharioki</author>
      <pubDate>Tue, 14 Sep 2021 01:02:23 +0000</pubDate>
      <link>https://dev.to/kharioki/testing-library-and-why-i-use-react-testing-library-9d5</link>
      <guid>https://dev.to/kharioki/testing-library-and-why-i-use-react-testing-library-9d5</guid>
      <description>&lt;p&gt;The testing library is a family of packages that help you test UI components in a user-centric way.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The more your test resembles the way your software is used, the more confidence they can give you.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-problems-does-testing-library-solve"&gt;
  &lt;/a&gt;
  What problems does Testing Library solve?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You want to write tests that tell you your components are working for users.&lt;/li&gt;
&lt;li&gt;You want your tests to avoid including implementation details so changes on components do not break your tests or slow down the team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#so-why-pick-testing-library"&gt;
  &lt;/a&gt;
  So why pick Testing Library?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The core library &lt;strong&gt;Dom Testing Library&lt;/strong&gt; is a lightweight solution for testing pages by querying and interacting with DOM nodes.&lt;/li&gt;
&lt;li&gt;The main utilities it provides include querying the DOM for nodes in a way that's similar to how the user finds elements on the page.&lt;/li&gt;
&lt;li&gt;The core library has been wrapped to provide ergonomic APIs for several frameworks including React, Angular, Vue and also for React Native.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;DOM Testing Library works with any environment that provides DOM APIs such as Jest, Mocha + JSDOM or a real browser.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#what-this-library-is-not-"&gt;
  &lt;/a&gt;
  What this library is not :(
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A test runner or framework - RTL is different from Jest(I'll explain later)&lt;/li&gt;
&lt;li&gt;Specific to a testing framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-should-you-avoid-with-testing-library"&gt;
  &lt;/a&gt;
  What should you avoid with Testing Library?
&lt;/h3&gt;

&lt;p&gt;Avoid testing implementation details like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Internal state of a component&lt;/li&gt;
&lt;li&gt;Internal methods of a component&lt;/li&gt;
&lt;li&gt;Lifecycle methods of a component&lt;/li&gt;
&lt;li&gt;Child components&lt;/li&gt;
&lt;/ol&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;for the sake of this write up, I'll introduce React Testing Library&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#react-testing-libraryrtl"&gt;
  &lt;/a&gt;
  React Testing Library(RTL)
&lt;/h2&gt;

&lt;p&gt;React Testing Library builds on top of DOM Testing Library by adding APIs for working with React components&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;CRA projects have out-of-the-box support for RTL.&lt;br&gt;
You can also install it via &lt;code&gt;npm&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;npm install --save -dev @testing-library/react&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-do-tests-with-react-testing-library"&gt;
  &lt;/a&gt;
  Why do tests with React Testing Library?
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Catch bugs&lt;/strong&gt; - allows you to catch bugs easily.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Increases confidence in application&lt;/strong&gt; - if all your tests pass, means all the parts of your applications are working correctly hence increasing the confidence in your application. This also translates to an increase customer satisfaction.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Speeds up QA time&lt;/strong&gt; - if we were running a huge application and we implement a new feature, we'd have to manually test. If we write tests then all we have to do is run tests.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Tests can serve as documentation&lt;/strong&gt; - if you're working with larger teams, sometimes code can be very confusing especially to new developers and by looking at tests, new devs can easily understand what the team is trying to accomplish.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#types-of-tests"&gt;
  &lt;/a&gt;
  Types of Tests
&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Before we continue, lets understand the different types of tests that there are.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Static tests&lt;/em&gt;&lt;/strong&gt; - catch typos and type errors as you write code. Usually how a linter works e.g ESlint, TSlint&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Unit tests&lt;/em&gt;&lt;/strong&gt; - they test a piece of code/component in complete isolation. Basically testing a single unit works as expected.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;Integration tests&lt;/em&gt;&lt;/strong&gt; - test how different units/components interact.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;&lt;em&gt;E2E(End to End) tests&lt;/em&gt;&lt;/strong&gt; - They simulate what the user flow would be like. It tests beginning to end.
&amp;gt; RTL does not test end to end. For that you can use &lt;strong&gt;Puppeteer&lt;/strong&gt; or &lt;strong&gt;Cypress&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-tests"&gt;
  &lt;/a&gt;
  Structure of Tests
&lt;/h3&gt;

&lt;p&gt;To better understand tests, we need to know what goes into a test; &lt;em&gt;describe blocks&lt;/em&gt;, &lt;em&gt;test blocks&lt;/em&gt;, and &lt;em&gt;assertions&lt;/em&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;describe block&lt;/strong&gt; - is a test suite that specifies a larger component or function. A test suite can have multiple test cases.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pdtKmpvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jv6qsgujaruawmja6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pdtKmpvQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4w2jv6qsgujaruawmja6.png" alt="describe block"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;test block&lt;/strong&gt; - (also called &lt;em&gt;it block&lt;/em&gt; since its defined by an &lt;code&gt;it&lt;/code&gt; function) is a test case.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4K0lFa_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/424k6zt6z39yjfd3vhur.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4K0lFa_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/424k6zt6z39yjfd3vhur.png" alt="it block"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assertions&lt;/strong&gt; - assertions are basically what we put in the test block. They can be successful or erroneous. In the above example we use the &lt;code&gt;expect&lt;/code&gt; function.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;before we continue, lets see how we run tests and how RTL works alongside jest&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you're using create-react-app, React Testing Library and Jest come installed out-of-the-box. However if you're using another react framework or you've built your app with custom react and webpack configuration, you'll need to install jest and react testing library yourself.&lt;/p&gt;

&lt;p&gt;Under the hood, jest test-runner will match all files with suffix &lt;code&gt;test.js&lt;/code&gt; or &lt;code&gt;spec.js&lt;/code&gt; or as per your own configuration.Jest then runs the tests in these files once you run the command &lt;code&gt;npm run test&lt;/code&gt; or &lt;code&gt;yarn test&lt;/code&gt; (again, or whatever test script you may have in your package.json)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Like I mentioned earlier, &lt;strong&gt;Jest&lt;/strong&gt; is a test-runner, which gives you ability to run tests with Jest in the command line. On the other hand &lt;strong&gt;React Testing Library&lt;/strong&gt; is a testing library to test react components, just like &lt;em&gt;Enzyme&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While Jest provides us with a whole lot of functions; test suites, test cases and assertions, RTL provides more functionality that is geared towards DOM testing for react components e.g render, screen, query methods, assertion methods, and many more.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;To better understand this, lets use some of my code and see a real-life example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JM1m_qO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apil3qim0g2u7bux3d7v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JM1m_qO_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/apil3qim0g2u7bux3d7v.png" alt="sample code"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets dive into the above test suite;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;render&lt;/strong&gt; - inside the test suite we first render the component we want to test. We use &lt;code&gt;{ render }&lt;/code&gt; method from &lt;code&gt;@testing-library/react&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;screen&lt;/strong&gt; - then we find the elements we want to interact with. Again we use &lt;code&gt;{ screen }&lt;/code&gt; method from &lt;code&gt;@testing-library/react&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the next step is to interact with these elements.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;assert&lt;/strong&gt; -  then we assert the results as expected. we use &lt;code&gt;expect()&lt;/code&gt; method.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Query methods&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;okay now, lets look at some of those Query methods I mentioned earlier, some of which I have used in the figure above&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;getBy&lt;/th&gt;
&lt;th&gt;findBy&lt;/th&gt;
&lt;th&gt;queryBy&lt;/th&gt;
&lt;th&gt;getAllBy&lt;/th&gt;
&lt;th&gt;findAllBy&lt;/th&gt;
&lt;th&gt;queryAllBy&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0 match&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1 match&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;return&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1+ match&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;error&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;td&gt;array&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Await&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;td&gt;yes&lt;/td&gt;
&lt;td&gt;no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;getBy&lt;/em&gt;, &lt;em&gt;findBy&lt;/em&gt;, and &lt;em&gt;queryBy&lt;/em&gt;&lt;/strong&gt; - these methods get only one element. If they get more than one element, they throw an error.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;getAllBy&lt;/em&gt;, &lt;em&gt;findAllBy&lt;/em&gt;, and &lt;em&gt;queryAllBy&lt;/em&gt;&lt;/strong&gt; - Always return an array if they get multiple elements they return all elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;findBy&lt;/em&gt;, &lt;em&gt;findAllBy&lt;/em&gt;&lt;/strong&gt; - we can use these methods if we are rendering items asynchronously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;queryBy&lt;/em&gt;&lt;/strong&gt; - does not work with async, returns only one element and if no match it still passes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prioritising attributes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In react-testing library, we want to mimic the user interactions as much as possible inside of our tests.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;so we utilize the attributes that follow that e.g:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Attributes accessible by everyone&lt;/strong&gt; - &lt;em&gt;getByRole&lt;/em&gt; (e.g. button, heading), &lt;em&gt;getByLabelText&lt;/em&gt;, &lt;em&gt;getByPlaceholderText&lt;/em&gt;, &lt;em&gt;getByText&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic Queries attributes&lt;/strong&gt; - these are for when we have implemented certain a11y accessibility rules  - &lt;em&gt;getByAltText&lt;/em&gt;, &lt;em&gt;getByTitle&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using TestID&lt;/strong&gt; - in react sometimes we may need to test a specific component that has a unique testId. in such instances we use &lt;em&gt;getByTestId&lt;/em&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is already getting too long. I'll stop it here for now. I'll attach some links to certain articles that helped me prepare and improve my testing skills. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://www.robinwieruch.de/react-testing-library"&gt;This cool article&lt;/a&gt;&lt;br&gt;
&lt;a href="https://kentcdodds.com/blog/static-vs-unit-vs-integration-vs-e2e-tests"&gt;This other article&lt;/a&gt;&lt;br&gt;
&lt;a href="https://testing-library.com/docs/react-testing-library/intro"&gt;These official docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://youtube.com/playlist?list=PL4cUxeGkcC9gm4_-5UsNmLqMosM-dzuvQ"&gt;This youtube playlist&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;That's all for now, till next time, have a great time testing your applications. One more thing before I go, here's a sample implementation of how I use Testing Library with react-native.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G2GjAH4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fasx1v9962bqjd6bmokd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G2GjAH4d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fasx1v9962bqjd6bmokd.png" alt="rn code"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>tdd</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Looking for a Forestry alternative?</title>
      <author>David Large</author>
      <pubDate>Tue, 14 Sep 2021 00:27:51 +0000</pubDate>
      <link>https://dev.to/cloudcannon/looking-for-a-forestry-alternative-4c3o</link>
      <guid>https://dev.to/cloudcannon/looking-for-a-forestry-alternative-4c3o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#your-cms-for-jekyll-hugo-and-eleventy"&gt;
  &lt;/a&gt;
  Your CMS for Jekyll, Hugo, and Eleventy
&lt;/h2&gt;

&lt;p&gt;Forestry announced in April 2021 that they'd be &lt;a href="https://forestry.io/blog/tina-cloud-the-next-forestry/"&gt;sunsetting their CMS&lt;/a&gt; in favour of TinaCMS and Tina Cloud, which is currently limited to React-based sites. If you've been looking for an alternative to Forestry for your Jekyll, Hugo, and Eleventy static sites, CloudCannon is here to help.&lt;/p&gt;

&lt;p&gt;So how does CloudCannon compare?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#visual-editing"&gt;
  &lt;/a&gt;
  Visual editing
&lt;/h3&gt;

&lt;p&gt;CMSs exist to help editing teams manage a website's contents. The simpler the editing experience, the more your editing team will be empowered to make updates without the help of a developer. CloudCannon puts the editor's experience first and foremost, with a fully-featured visual editor that developers can configure for optimal editing.&lt;/p&gt;

&lt;p&gt;With CloudCannon, content writers can write and update content directly on the website ‚Äî what could be more intuitive than that?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JSPmUOoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdyd766xp1y82kzou7ob.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JSPmUOoL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sdyd766xp1y82kzou7ob.gif" alt="Editable regions in CloudCannon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#component-page-building"&gt;
  &lt;/a&gt;
  Component page building
&lt;/h3&gt;

&lt;p&gt;Markdown is fantastic, but it's too restrictive for complex marketing content, especially when content editors prefer a visual approach. That's where using components ‚Äî which can be pieced together to build a page ‚Äî are a great idea. On CloudCannon, components are called &lt;a href="https://cloudcannon.com/documentation/edit/editing/configuration/#array-structures"&gt;array structures&lt;/a&gt;. You start by defining a label and the data fields in your component, and you're free to use the &lt;a href="https://cloudcannon.com/documentation/edit/interfaces/inputs/#inputs"&gt;full range of field types&lt;/a&gt; available on CloudCannon; you can even nest array structures! Once configured, editors can use these components to piece together content on a page.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ5pQUwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vyr9m69o28r2cs4pcsw.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NJ5pQUwZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5vyr9m69o28r2cs4pcsw.gif" alt="Page building process in CloudCannon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#gitbased"&gt;
  &lt;/a&gt;
  Git-based
&lt;/h3&gt;

&lt;p&gt;CloudCannon is a Git-based CMS. All changes in your repository automatically sync to CloudCannon, and all changes editors make will commit back to the repository. We're working towards providing editors access to the full power of Git; currently editors can create a branch or copy of a site to make large-scale changes that can be merged in through a branch merge or pull request at a later date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nYv2YiJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tzw4d6ivc9sm7cnxr34.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nYv2YiJd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tzw4d6ivc9sm7cnxr34.png" alt="The Git sync/save process in CloudCannon's CMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosting-included"&gt;
  &lt;/a&gt;
  Hosting included
&lt;/h3&gt;

&lt;p&gt;All sites on CloudCannon have access to reliable, high-performance hosting through our partner CloudFlare. Configure your custom domain and host your production site directly on CloudCannon, or use our hosting just for your staging environment and host production on your own hosting provider ‚Äî the choice is yours.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-on-the-roadmap"&gt;
  &lt;/a&gt;
  What's on the roadmap?
&lt;/h2&gt;

&lt;p&gt;We believe simple, elegant, and performant SSGs such as Jekyll, Hugo, and Eleventy are the best way to build most marketing and brand websites. We're constantly refining our support for these SSGs and iterating on the editing and publishing experience.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#more-intuitive-visual-editing"&gt;
  &lt;/a&gt;
  More intuitive visual editing
&lt;/h3&gt;

&lt;p&gt;Visual editing is at the core of CloudCannon. We're working on making more functionality available in the visual editor to provide an even more intuitive editing experience. Our ultimate goal is twofold: first, to give the developer the complete flexibility to model content however they'd like ‚Äî using front matter, collections, markdown, or HTML. For non-technical editors, our aim is to abstract how a site's content is stored and managed, allowing them to create and maintain complex content structures in a SSG &lt;em&gt;without&lt;/em&gt; needing to know everything about how it all works.¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#managing-components"&gt;
  &lt;/a&gt;
  Managing components
&lt;/h3&gt;

&lt;p&gt;Later this month we'll be announcing a new open-source framework for managing HTML components. (Think &lt;a href="https://github.com/storybookjs/storybook"&gt;Storybook&lt;/a&gt;, but made especially for HTML-based SSGs.) This new framework will have a tight integration into CloudCannon, giving developers a clear structure for creating components, and giving editors the ability to add, rearrange and update components with a live preview. Stay tuned for more details.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#git-for-all"&gt;
  &lt;/a&gt;
  Git for all
&lt;/h3&gt;

&lt;p&gt;The final piece of the puzzle is Git workflows. Git has changed how web developers collaborate on content. We want to bring the power and flexibility of these workflows to content editors, and we're well on the way there. Our plan is to see just how far we can push this without content editors needing to know anything about Git.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-get-started"&gt;
  &lt;/a&gt;
  How do I get started?
&lt;/h2&gt;

&lt;p&gt;You can start transferring your sites in a few minutes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://app.cloudcannon.com/register"&gt;Create a free account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a site&lt;/li&gt;
&lt;li&gt;Connect your Git repository to your site ‚Äî we support GitHub, Bitbucket and GitLab.&lt;/li&gt;
&lt;li&gt;Configure your &lt;a href="https://cloudcannon.com/documentation/build/setup/configuration/#configuration"&gt;build options&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That's it! CloudCannon will automatically build your site every time your repository changes.&lt;/p&gt;

&lt;p&gt;CloudCannon provides a basic level of editing by default. To configure more intuitive editing for your content editors you can look at the following configurable options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/html/#editable-regions"&gt;Editable regions&lt;/a&gt; ‚Äî Add inline editing to HTML content.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/html/#editable-regions"&gt;Editor links&lt;/a&gt; ‚Äî Add buttons and links to the visual editing interface to link to data in the front matter, collections or data files.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/interfaces/inputs/#inputs"&gt;Inputs&lt;/a&gt; ‚Äî Configure the editing interface for different content types.&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://cloudcannon.com/documentation/edit/editing/configuration/#array-structures"&gt;Array structures&lt;/a&gt; ‚Äî Create your own components, which editors can use to build their own pages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#haere-mai-welcome"&gt;
  &lt;/a&gt;
  Haere mai! Welcome!
&lt;/h2&gt;

&lt;p&gt;We'd love to hear from you! If you're interested in trying out CloudCannon, &lt;a href="https://cloudcannon.com/contact/"&gt;reach out and say hello&lt;/a&gt;! We're here to help and we're always ready to listen.&lt;/p&gt;

</description>
      <category>jamstack</category>
      <category>webdev</category>
      <category>cms</category>
      <category>git</category>
    </item>
    <item>
      <title>The Collab Lab TCL-28: The Road to Lettuce Know</title>
      <author>Luis Augusto</author>
      <pubDate>Tue, 14 Sep 2021 00:11:24 +0000</pubDate>
      <link>https://dev.to/the-collab-lab/the-collab-lab-tcl-28-the-road-to-lettuce-know-4nj6</link>
      <guid>https://dev.to/the-collab-lab/the-collab-lab-tcl-28-the-road-to-lettuce-know-4nj6</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;For 8 weeks, TCL 28 cohort members worked together with the guidance of their mentors to create Lettuce Know, a smart shopping list application with a friendly UI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#who-are-the-tcl-28-collabies-and-mentors"&gt;
  &lt;/a&gt;
  Who are the &lt;a href="https://the-collab-lab.codes/who-we-are/"&gt;TCL 28 Collabies&lt;/a&gt; and Mentors?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;The Developers a.k.a. Collabies&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/kelsey-siman/"&gt;Kelsey Siman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/isa-abutaa/"&gt;Isa Abutaa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/hulya-karakaya/"&gt;Hulya Karakaya&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/sandydaii/"&gt;Sandy Dai&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;The Mentors&lt;/strong&gt;: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/meganesu/"&gt;Megan Sullivan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/luisbaugusto/"&gt;Luis Augusto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/in/scottdreu/"&gt;Scott Reu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-they-do"&gt;
  &lt;/a&gt;
  What did they do?
&lt;/h2&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/the-collab-lab"&gt;
        the-collab-lab
      &lt;/a&gt; / &lt;a href="https://github.com/the-collab-lab/tcl-28-smart-shopping-list"&gt;
        tcl-28-smart-shopping-list
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Overview&lt;/h1&gt;
&lt;h2&gt;
What is this project?&lt;/h2&gt;
&lt;p&gt;The goal of this project is to collaborate with your Collab Lab team to create a ‚Äúsmart‚Äù shopping list app that learns your buying habits and helps you remember what you‚Äôre likely to need to buy on your next trip to the store.&lt;/p&gt;
&lt;h2&gt;
How does it work?&lt;/h2&gt;
&lt;p&gt;As a user, you will enter items (e.g., ‚ÄúGreek yogurt‚Äù or ‚ÄúPaper towels‚Äù) into your list. Each time you buy the item, you mark it as purchased in the list. Over time, the app comes to understand the intervals at which you buy different items. If an item is likely to be due to be bought soon, it rises to the top of the shopping list.&lt;/p&gt;
&lt;h2&gt;
Check out an example&lt;/h2&gt;
&lt;p&gt;The app will work in many of the same ways as &lt;a href="https://app.ineedtobuy.xyz/" rel="nofollow"&gt;iNeedToBuy.xyz&lt;/a&gt; (on which our project is based) with the exception that we will not be implementing barcode‚Ä¶&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/the-collab-lab/tcl-28-smart-shopping-list"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Over the span of 8 weeks, TCL 28 collaborated together remotely to create &lt;a href="https://lettuce-know.web.app/"&gt;Lettuce Know&lt;/a&gt;, a smart shopping list which learns the user‚Äôs shopping habits and predicts when items are due for the next purchase using React, Firebase &amp;amp; Material UI.&lt;/p&gt;

&lt;p&gt;What did that collaboration look like, exactly? Well, each week the Collabies would pair off in twos so they could work together on an assigned issue or story. They would be responsible for working through that story, asking for help from their fellow Collabies or mentors if needed, creating a descriptive pull request on GitHub which outlines what changes were made, completing code reviews, and then finally, merging the pull requests to the main branch.&lt;/p&gt;

&lt;p&gt;Here are a sample of the various tickets that the Collabies worked on together:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Generated a new, unique token for users, and stored it inside Firebase Firestore. Also, users can share their tokens with their friends and make changes to their shopping lists.&lt;/li&gt;
&lt;li&gt;Implemented a feature to mark an item on the shopping list as purchased so the app can learn how often the user buys different items. When a purchase is recorded, the estimated number of days until the next purchase date is calculated and recorded in the database.&lt;/li&gt;
&lt;li&gt;Created a feature for sorting shopping list items in order of how soon the user is likely to need to buy each of them again so that it‚Äôs clear what the user needs to buy soon.&lt;/li&gt;
&lt;li&gt;Created items schema and stored the item information and connected to user tokens.&lt;/li&gt;
&lt;li&gt;Created a feature for preventing the user from typing a duplicate item, duplicate items are not added to Firestore.&lt;/li&gt;
&lt;li&gt;Added a feature to filter the user's shopping list to make it easier to locate an item in the list.&lt;/li&gt;
&lt;li&gt;Used accessibility tests (a11y) to make sure the app is accessible to all users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-did-they-learn"&gt;
  &lt;/a&gt;
  What did they learn?
&lt;/h2&gt;

&lt;p&gt;Before participating in The Collab Lab, our Collabies all had experience with frontend and backend development with varying technologies, however, they all shared experience with HTML, CSS, JavaScript, and React. In addition to using those skills to build their app, they also used some new technologies ‚Äî Cloud Firestore, a NoSQL document-oriented online database,  Material-UI, and SweetAlert.&lt;/p&gt;

&lt;p&gt;But aside from learning to use Cloud Firestore and query documents in the database, the most important skills that the Collabies learned were communication and remote collaboration. With everyone living in various time zones and having different responsibilities during the week, communication was essential to being successful as a team. The Collabies utilized Slack and GitHub to schedule pair-programming sessions and communicate what changes were being made to the codebase at any given time. When one pair had a question on the story they were working on, they communicated that to the group and received the feedback they needed to continue solving the problem. &lt;/p&gt;

&lt;p&gt;It wasn‚Äôt only essential to communicate progress on the project, but also to communicate our successes. Every two weeks, the Collabies and mentors participated in a retrospective, where everyone had the opportunity to share their appreciation for each other, what they thought went well, and what they thought could be better. There was always a lot of love that was shared during those meetings.&lt;/p&gt;

&lt;p&gt;Week after week, the quality of code reviews, pull requests, merges, and communication skills improved. Pair-programming helped them talk through their code and articulate their thought processes verbally. By the time the cohort was just about wrapped, the group was getting weekly requirements knocked out early and started opening their own issues and making tickets.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#collabie-experience-highlight"&gt;
  &lt;/a&gt;
  Collabie Experience Highlight
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;During our first day, I immediately felt welcomed by both Andrew and Stacie‚Äôs positive radiance. I soon was introduced to the rest of my fellow Collabies and mentors. Ever since I met them, everyone has been super respectful, helpful, and supportive from start to finish. Throughout our pair programming sessions, our office hours on the weekdays, and our code reviews on Saturday, I soon fell in love with the routine I had for 8 weeks. Working together felt adventurous, as we tackled different issues together and admired our accomplishments at the end of each session. From their working style to their coding knowledge, I learned so much from each one of my talented teammates. Even though there may be times we do run into a bug, the other pair and mentors were there for guidance. Our mentors were super responsive, patient, and insightful, I am still shocked how they were able to do all this while balancing a job. Looking back, I really do think this is one of the best teams I have ever been on, and I am so thankful for this experience. :) ‚Äî &lt;em&gt;Sandy Dai&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#lettuce-know-project-demo"&gt;
  &lt;/a&gt;
  Lettuce Know Project Demo
&lt;/h2&gt;

&lt;p&gt;You can check out our project demo here!&lt;br&gt;
&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5ALvZ9s8Y0k"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>webdev</category>
      <category>react</category>
      <category>firebase</category>
    </item>
  </channel>
</rss>
