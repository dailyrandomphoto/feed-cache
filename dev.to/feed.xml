<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Transitioning from Monolith to Microservices</title>
      <author>Michael Bogan</author>
      <pubDate>Mon, 11 Oct 2021 15:03:36 +0000</pubDate>
      <link>https://dev.to/mbogan/transitioning-from-monolith-to-microservices-11mc</link>
      <guid>https://dev.to/mbogan/transitioning-from-monolith-to-microservices-11mc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-did-we-get-here"&gt;
  &lt;/a&gt;
  How did we get here?
&lt;/h2&gt;

&lt;p&gt;In the large &lt;a href="https://konghq.com/learning-center/microservices/monolith-vs-microservices/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;monolithic&lt;/a&gt; application development days of yesteryear, deploying an application was no trivial task. It started with a purchase order for multiple servers, followed by several days of racking, wiring, and configuring. If you were lucky, your deployment worked on the first try because all of the parties involved thought of nearly everything that could go wrong. These parameters set the stage for monoliths by requiring the fewest number of simple steps to get an application deployed.&lt;/p&gt;

&lt;p&gt;Fast forward to today—where you can provision massive amounts of infrastructure at the click of a button in the cloud—and you find yourself living in the golden age of infrastructure automation tools. This dramatic shift in infrastructure availability is one of the main catalysts for the advent of &lt;a href="https://konghq.com/learning-center/microservices/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;microservices&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#you-might-not-need-microservices-architecture-if"&gt;
  &lt;/a&gt;
  You might &lt;em&gt;not&lt;/em&gt; need microservices architecture if…
&lt;/h2&gt;

&lt;p&gt;The popularity of microservices is evident. You’d be hard-pressed to find a developer-centric vendor that doesn’t have some mention of microservices in their blog roll or documentation. For example, Kong's offerings of &lt;a href="https://konghq.com/kong/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Gateway&lt;/a&gt; and &lt;a href="https://konghq.com/kong-mesh/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Kong Mesh&lt;/a&gt; specialize in supporting businesses moving from a monolith to &lt;a href="https://konghq.com/learning-center/microservices/microservices-architectures/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;microservices architecture&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, it’s important to know that microservices aren’t a magic bullet for every business application. Here are some good indicators that your current monolith architecture may be sufficient.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#youre-not-having-trouble-scaling"&gt;
  &lt;/a&gt;
  You’re not having trouble scaling.
&lt;/h3&gt;

&lt;p&gt;There are business domains with relatively steady traffic to their application and might not need the dynamic scaling that comes with using a microservices architecture. A key benefit to microservices is the ability to scale on demand. If scaling isn’t a challenge for your business, you may not need microservices.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#your-monolithic-architecture-is-already-flexible-enough-to-meet-market-demands"&gt;
  &lt;/a&gt;
  Your monolithic architecture is already flexible enough to meet market demands.
&lt;/h3&gt;

&lt;p&gt;Maybe you’ve had enough foresight to keep your application flexible and isolate functionality as needed. The ability to introduce new features and functionality quickly is another key tenet of microservices. If you’re already able to do this, excellent job!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#youre-not-having-issues-with-deploying-your-application"&gt;
  &lt;/a&gt;
  You’re not having issues with deploying your application.
&lt;/h3&gt;

&lt;p&gt;Speed of deployment is another key benefit of microservices. If your deployment pipeline is already fast enough for your business needs, you may not need microservices.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-should-i-switch-to-a-microservices-architecture"&gt;
  &lt;/a&gt;
  Why should I switch to a microservices architecture?
&lt;/h2&gt;

&lt;p&gt;After evaluating your business context, you may decide that perhaps there is some room for improvement. You may recall a time when a spike in traffic overloaded your application. You also may remember that time when some backlogged technical debt needed to be rectified and blew up your delivery timeline. Then, there may have been that one time when your sales team sold a new feature to be integrated and available in months when in reality, it would take over a year to get right.&lt;/p&gt;

&lt;p&gt;If any of those situations resonate with you, your application may benefit from transitioning to microservices. Let’s consider some key roles in your organization, along with key benefits for each role.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Corporate Stakeholder&lt;/strong&gt;—this person cares about competitive positioning, market characteristics, and &lt;a href="https://konghq.com/blog/leader-2021-gartner-mq-api-management/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;Gartner Magic Quadrant&lt;/a&gt;. Developing well-defined microservices allows your company to deploy functionality faster, meet market needs, and position itself as an industry leader rather than a follower.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product/Project Manager&lt;/strong&gt;—this person cares about team morale, accurate timelines, and supporting the business needs. Developing well-defined microservices allows your managers to give better timelines and keep the development team morale up by reducing technical debt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt;—this person wants to work on interesting problems, write new features, and receive recognition for their business impact. Developing well-defined microservices reduces the need to troubleshoot issues in one large, complex code base and keeps them happier by reducing the stress associated with monolith development and deployment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-drives-the-transition-to-microservices"&gt;
  &lt;/a&gt;
  What drives the transition to microservices?
&lt;/h3&gt;

&lt;p&gt;Each of the above key players can be a driver to implementing microservices, but most often, the development team drives the transition. After all, developers implement the microservices. Discussions between the personas that lead to individual microservice development are often very abstract, so it’s important to read between the lines.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Corporate Stakeholder&lt;/strong&gt;: &lt;em&gt;We need to be able to respond to the market faster! Competitor A already has feature X!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Product/Project Manager&lt;/strong&gt;: &lt;em&gt;We’re doing our best. There are a lot of challenges with microservices deployment and development planning.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer&lt;/strong&gt;: &lt;em&gt;If we didn’t have so much technical debt, we’d be able to add new features more quickly.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;These sentiments—and you've likely heard statements similar to those in your organization—highlight the need to implement microservices without ever using the word microservices!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-measure-the-success-of-this-transition"&gt;
  &lt;/a&gt;
  How do I measure the success of this transition?
&lt;/h2&gt;

&lt;p&gt;To gauge whether or not you’re successful in your monolith to microservice transition, you &lt;em&gt;must&lt;/em&gt; measure, measure, measure. If there’s no return on investment (ROI), there’s no reason to transition. You can only measure ROI successfully if you have the proper metrics in place for it. Let’s consider several important metrics.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-long-does-it-take-to-get-one-code-change-into-production"&gt;
  &lt;/a&gt;
  How long does it take to get one code change into production?
&lt;/h3&gt;

&lt;p&gt;This is an important one! With a monolith, even a relatively simple code change necessitates multi-layer testing efforts to prevent regressions. Consider how long those tests take and the person-power involved with running those tests. Then, there's the actual deployment once the tests all pass. Start your stopwatch as soon as the code commits and stop it once the change is live in production. &lt;em&gt;That&lt;/em&gt; will be the metric to beat with your microservice development.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#are-you-hitting-your-sla"&gt;
  &lt;/a&gt;
  Are you hitting your SLA?
&lt;/h3&gt;

&lt;p&gt;We’re using SLA in a relatively liberal sense since the term means different things to different businesses. Put simply, let's define an SLA as the time you need to be actively serving your primary business need. For example, if your business runs an API service for bank fraud alerts, how reliably has your service responded to customer API requests over the past month or year? &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#important-immeasurables"&gt;
  &lt;/a&gt;
  Important immeasurables
&lt;/h3&gt;

&lt;p&gt;While hard numbers are important, there are other metrics that are very important but difficult to measure formally. Take periodic straw polls of the team to check in on morale and gauge the team’s overall energy. Do they feel excited to sling code and deploy? Are they more energized by their work? A happy development team is a productive development team!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-make-the-transition-to-microservices"&gt;
  &lt;/a&gt;
  How do I make the transition to microservices?
&lt;/h2&gt;

&lt;p&gt;Not every business will take the same approach to the microservices transition. However, at a high level, every organization needs a plan, supporting infrastructure, supporting metrics, and some (gasp!) culture change. With those items as our baseline, let’s get into the details!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#make-a-plan"&gt;
  &lt;/a&gt;
  Make a plan
&lt;/h3&gt;

&lt;p&gt;At its most basic, your plan of attack should include the following steps:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Start by identifying low-impact functionality in your monolith.&lt;/strong&gt; Begin with low-impact functions, not business-critical ones. There is a slight learning curve—and with that, an element of risk—that comes with making this transition for the first time.&lt;/p&gt;

&lt;p&gt;If you’re running an online bookstore, you probably don’t want to migrate your inventory or purchasing systems first, as these are inherently business-critical functions. Moving your book ratings or user comments to your own microservice would be a lower risk.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Determine the key components and the traffic flow involved between components.&lt;/strong&gt; Having identified the functionality, what components in the monolith code base do you need to extract out to the microservice? Will the user be able to reach the microservice directly, or will the monolith proxy the request?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Put all of these details into a high-level objective, codifying all of the implementation steps.&lt;/strong&gt; By anticipating and documenting your transition process for a single functionality, you set yourself up for better auditing and repeatability of that process.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-an-api-gateway"&gt;
  &lt;/a&gt;
  Use an API gateway
&lt;/h3&gt;

&lt;p&gt;Your monolith application had a single, “front door” of entry for your users. With microservices, it can seem like you now have to keep track of several “front doors.” Facilitating communication between microservices and with the outside world may seem like a daunting task.&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://konghq.com/learning-center/api-gateway/?utm_source=guest&amp;amp;utm_medium=devspotlight&amp;amp;utm_campaign=community"&gt;API gateway&lt;/a&gt; abstracts away the details of calling the microservices backing your business functionality, providing once again that single, “front door” through which all requests must enter. The API gateway handles authentication, authorization, and traffic routing to the correct microservice destination. Kong Gateway makes this incredibly simple. With a few commands, you’ll have the complexities of communication traffic abstracted away.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#measure-measure-measure"&gt;
  &lt;/a&gt;
  Measure, measure, measure
&lt;/h3&gt;

&lt;p&gt;While there are many goals for a microservice architecture, the key wins are &lt;strong&gt;flexibility&lt;/strong&gt;, &lt;strong&gt;delivery speed&lt;/strong&gt;, and &lt;strong&gt;resiliency&lt;/strong&gt;. After establishing your baseline for the delta between code commit and production deployment completion, measure the same process for a microservice.&lt;/p&gt;

&lt;p&gt;Similarly, establish a baseline for “business uptime” and compare it to that of your post-microservice implementation. “Business uptime” is the uptime required by necessary components in your architecture as it relates to your primary business goals.&lt;/p&gt;

&lt;p&gt;With a monolith, you deploy all of your components together, so a fault in one component could affect your entire monolithic application. As you transition to microservices, the pieces that remain in the monolith should be minimally affected, if at all, by the microservice components that you’re creating. &lt;/p&gt;

&lt;p&gt;For example, if your business is a bookstore, your critical pieces of business are the products (books) and the payments system. Suppose you’ve abstracted your book ratings into a microservice. In that case, your business can still function—and would be minimally impacted if the book ratings service goes down—since what your customers primarily want to do is buy books.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#do-devops"&gt;
  &lt;/a&gt;
  Do DevOps
&lt;/h3&gt;

&lt;p&gt;The last but immensely important piece of the transition is related to &lt;strong&gt;culture&lt;/strong&gt;. Culture change is difficult, but it’s necessary for success in this microservices transition. No longer does the development team write an application and toss it over the wall to operations to deploy. The new normal includes CI/CD pipelines, automation, metrics, monitoring, and much more. Every team member needs to be cross-functional and collaborate heavily to achieve success!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demonstration-by-example"&gt;
  &lt;/a&gt;
  Demonstration by example
&lt;/h2&gt;

&lt;p&gt;For our example, we’ll take a &lt;em&gt;very&lt;/em&gt; common monolith architecture which consists of frontend and backend code, and show how you can extract part of the functionality into its own microservice. &lt;/p&gt;

&lt;p&gt;In this case, we’ll use a Django application backed by an SQLite database that has two “apps”: movies and ratings. We’ll extract the ratings app into its own microservice hosted behind Kong Gateway, which we’ve set up using the &lt;a href="https://hub.docker.com/_/kong"&gt;instructions for the official Kong image&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#setting-up"&gt;
  &lt;/a&gt;
  Setting up
&lt;/h3&gt;

&lt;p&gt;We won’t go into too much detail on each of the commands in this section since the only goal is to get a project template set up for you to follow along.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir moviedb &amp;amp;&amp;amp; cd moviedb/
$ python3 -m venv venv &amp;amp;&amp;amp; source venv/bin/activate
$ pip install django &amp;amp;&amp;amp; pip freeze &amp;gt;&amp;gt; requirements.txt
$ django-admin startproject moviedb .
$ ./manage.py startapp movies
$ ./manage.py startapp ratings
$ ./manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, we have a full Django setup with a default SQLite database and all of our migrations in place. We’ll start with two models:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# movies/models.py
from django.db import models

class Movie(models.Model):
  title = models.CharField(max_length=300, null=False)
  released = models.DateField()
  description = models.CharField(max_length=1000)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ratings/models.py
from django.db import models
from django.core.validators import MinValueValidator, MaxValueValidator
from movies.models import Movie

class Rating(models.Model):
  movie = models.ForeignKey(Movie, on_delete=models.CASCADE)
  created_at = models.DateTimeField(auto_now_add=True)
  explanation = models.CharField(max_length=5000)
  rating_value = models.IntegerField(
    null=False,
    validators=[MinValueValidator(1), MaxValueValidator(10)]
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To explain briefly, we have two models which get persisted to the database: &lt;code&gt;Movie&lt;/code&gt; and &lt;code&gt;Rating&lt;/code&gt;. &lt;code&gt;Rating&lt;/code&gt; has a field of &lt;code&gt;movie&lt;/code&gt; which relates to the &lt;code&gt;Movie&lt;/code&gt; model to establish a relationship between these two models. In most cases, you’ll have one movie with many ratings. Operationally, that means the load will increase as the number of ratings increases, which will slow down your page loads. Instead of letting the ratings for a movie slow down the website, we’ll move ratings to their own microservice behind Kong Gateway.&lt;/p&gt;

&lt;p&gt;For the sake of simplicity, we’ll move the &lt;code&gt;ratings&lt;/code&gt; code into its own Django project (called &lt;code&gt;ratings_service&lt;/code&gt;) separate from the &lt;code&gt;moviedb&lt;/code&gt; code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ratings_service &amp;amp;&amp;amp; cd ratings_service/
$ python3 -m venv venv &amp;amp;&amp;amp; source venv/bin/activate
$ pip install django &amp;amp;&amp;amp; pip freeze &amp;gt;&amp;gt; requirements.txt
$ django-admin startproject ratings_service .
$ ./manage.py startapp ratings
$ ./manage.py migrate
$ cp ../moviedb/ratings/models.py ./ratings/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The critical piece we need to copy over is the &lt;code&gt;ratings/models.py&lt;/code&gt; file. From there, the entire &lt;code&gt;ratings&lt;/code&gt; app can be removed from the &lt;code&gt;moviedb&lt;/code&gt; project.&lt;/p&gt;

&lt;p&gt;However, we do need to make one adjustment to the &lt;code&gt;Ratings&lt;/code&gt; model now that we no longer have the hard dependency on &lt;code&gt;Movie&lt;/code&gt;. All we need to change is the foreign key reference to a text field in ratings.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class Rating(models.Model):
  movie = models.CharField(max_length=5000)
  created_at = models.DateTimeField(auto_now_add=True)
  explanation = models.CharField(max_length=5000)
  rating_value = models.IntegerField(
    null=False,
    validators=[MinValueValidator(1), MaxValueValidator(10)]
  )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After making that adjustment to the model, we create and run the migration for the model changes.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ ./manage.py makemigrations
$ ./manage.py migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It’s important to explain why we’re making this change. &lt;strong&gt;Specializing in function but generalizing in operation&lt;/strong&gt; will help you derive the most benefit from a microservices approach. In this case, our new microservice specializes in ratings management, but it's generalized such that it can take any movie title and save a rating for it. To make the ratings more unique—if there are multiple movies with the same name—we could alternatively use an &lt;a href="https://en.wikipedia.org/wiki/EIDR"&gt;EIDR&lt;/a&gt; number. Taking it a step further, we could even change the &lt;code&gt;movie&lt;/code&gt; field to something more generic and save ratings for data objects besides just movies!&lt;/p&gt;

&lt;p&gt;There’s one last code change we need to make. With the ratings code out of the &lt;code&gt;moviedb&lt;/code&gt; project, we need to make an HTTP request since we can’t do a database-level join on &lt;code&gt;Movies&lt;/code&gt; and &lt;code&gt;Ratings&lt;/code&gt;. In our view for the movie list, we need to update the view class from this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MovieListView(ListView):
  model = Movie

  def get_queryset(self):
    return Movie.objects.all().select_related()
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;to this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;class MovieListView(ListView):
  model = Movie

  def get_context_data(self, **kwargs):
    data = super().get_context_data(**kwargs)

    # localhost:8000 is our locally running Kong Gateway
    data['ratings'] = requests.get(
      'http://localhost:8000',
      headers={'Host': 'ratings-service.local'}
    )
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that this is technically still a blocking call since the page will wait for results. However, this approach removes the hard dependency and allows you to write logic around this specific request.&lt;/p&gt;

&lt;p&gt;Lastly, we’ll create a small &lt;code&gt;Dockerfile&lt;/code&gt; in our &lt;code&gt;ratings_service&lt;/code&gt; to run alongside Kong in the container runtime.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# Dockerfile
FROM python:3
WORKDIR /home/chad/ratings_service
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
CMD [ "python", "manage.py", "runserver", "0.0.0.0:9000" ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ll also need to set &lt;code&gt;ALLOWED_HOSTS = ["*"]&lt;/code&gt; in the settings for the &lt;code&gt;ratings_service&lt;/code&gt; to ensure the traffic is allowed through.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# ratings_service/ratings_service/settings.py
ALLOWED_HOSTS = ["*"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ docker build -t ratings_service .
$ docker run -d -p 9000:9000 ratings_service
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that we have our &lt;code&gt;moviedb&lt;/code&gt; and &lt;code&gt;ratings_service&lt;/code&gt; separated, we need to tell Kong how to serve the traffic. We’ll add a service and route, so Kong knows how to proxy our requests:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -i -X POST http://localhost:8001/services/ -d 'name=ratings-service' -d 'url=http://host.docker.internal:9000'
HTTP/1.1 201 Created

$ curl -i -X POST http://localhost:8001/services/ratings-service/routes -d 'hosts=ratings-service.local' -d 'paths=/'
HTTP/1.1 201 Created
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we can access our ratings service!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ curl -i -X GET --url http://localhost:8000/ --header "Host: ratings-service.local"
[{
    "movie": "Gone with the Wind",
    "created_at": "2021-08-08 16:01:46",
    "explanation": "Classic movie!",
    "rating_value": 9
}, {
    "movie": "The Little Shop of Horrors",
    "created_at": "2021-08-08 16:01:46",
    "explanation": "I'm a mean green mother from outer space and I'm bad!",
    "rating_value": 7
}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We’ve intentionally skipped over the data loading steps, as they aren’t terribly important for the sake of this example. You undoubtedly already have a wealth of data to test with; the main point here is how to pick a piece of a monolith’s functionality, extract it, and put it into its own code base, then serve it as a microservice application behind Kong Gateway.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-next"&gt;
  &lt;/a&gt;
  What next?
&lt;/h3&gt;

&lt;p&gt;We’ve covered a lot of ground in this complex topic of transitioning from the monolith to microservices! First, we considered some of the cases where microservices may &lt;em&gt;not&lt;/em&gt; be appropriate for your business context. Then, we looked at the stakeholders involved in an organization’s transition to microservices, followed by the metrics an organization needs to capture to determine whether their transition was successful. Lastly, we covered some of the key practices to adopt to make this transition, walking through a concrete example of how to get started.&lt;/p&gt;

&lt;p&gt;There is much more to cover in practice than what we could get to in this example. However, we were able to highlight the importance of incorporating a mature and resilient API gateway like the one offered by Kong. Once you’ve implemented Kong Gateway, you can also leverage the plugin ecosystem to gain more of the benefits of microservices like &lt;a href="https://docs.konghq.com/hub/#analytics-monitoring"&gt;metrics or monitoring&lt;/a&gt; and enabling DevOps through &lt;a href="https://docs.konghq.com/hub/#deployment"&gt;deployment automation&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>microservices</category>
      <category>architecture</category>
      <category>webdev</category>
    </item>
    <item>
      <title>If I were to restart JavaScript again from scratch then I will follow this roadmap.</title>
      <author>Ankur Tyagi</author>
      <pubDate>Mon, 11 Oct 2021 15:00:15 +0000</pubDate>
      <link>https://dev.to/tyaga001/if-i-were-to-restart-javascript-again-from-scratch-then-i-will-follow-this-roadmap-5c02</link>
      <guid>https://dev.to/tyaga001/if-i-were-to-restart-javascript-again-from-scratch-then-i-will-follow-this-roadmap-5c02</guid>
      <description>&lt;h3&gt;
  &lt;a href="#every-time-i-work-in-a-new-javascript-framework-i-learn-a-bit-more-about-javascript-fundamentals"&gt;
  &lt;/a&gt;
  Every time I work in a new JavaScript framework I learn a bit more about JavaScript Fundamentals.
&lt;/h3&gt;


&lt;blockquote&gt;
&lt;p&gt;Every time I work in a new JavaScript framework I learn a bit more about JavaScript Fundamentals. &lt;br&gt;&lt;br&gt;If I were to restart Javascript again from scratch then I will follow this roadmap. &lt;br&gt;&lt;br&gt;A Thread... &lt;a href="https://t.co/LptUXS7jui"&gt;pic.twitter.com/LptUXS7jui&lt;/a&gt;&lt;/p&gt;— Ankur💻🎧💪 (@TheAnkurTyagi) &lt;a href="https://twitter.com/TheAnkurTyagi/status/1445737829296861204?ref_src=twsrc%5Etfw"&gt;October 6, 2021&lt;/a&gt;
&lt;/blockquote&gt;  

&lt;p&gt;If I were to restart Javascript again from scratch then I will follow this roadmap. &lt;/p&gt;

&lt;p&gt;It is worth noting that as a beginner in the subject, much of the learner’s interest lies in the hands of the tutor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;An inefficient tutor can pretty quickly lead to the learner losing interest in the subject. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This can have implications for your career growth.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#javascript-basic-steps"&gt;
  &lt;/a&gt;
  JavaScript basic steps:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;What is JavaScript?&lt;/li&gt;
&lt;li&gt;Declaring JavaScript Variables: var, let, and const&lt;/li&gt;
&lt;li&gt;Basic math in JavaScript — Numbers and operators&lt;/li&gt;
&lt;li&gt;JavaScript syntax&lt;/li&gt;
&lt;li&gt;ES6 let VS const variables&lt;/li&gt;
&lt;li&gt;Arrays, Data Types, Strings&lt;/li&gt;
&lt;li&gt;Conditionals &amp;amp; Looping code&lt;/li&gt;
&lt;li&gt;Object basics&lt;/li&gt;
&lt;li&gt;this&lt;/li&gt;
&lt;li&gt;Objects and Classes&lt;/li&gt;
&lt;li&gt;Functions &amp;amp; Scope&lt;/li&gt;
&lt;li&gt;Functions — Reusable blocks of code&lt;/li&gt;
&lt;li&gt;Function return values&lt;/li&gt;
&lt;li&gt;Arrow Functions&lt;/li&gt;
&lt;li&gt;Reference vs. Copy&lt;/li&gt;
&lt;li&gt;Inheritance in JavaScript&lt;/li&gt;
&lt;li&gt;Working with JSON data&lt;/li&gt;
&lt;li&gt;JavaScript Dates&lt;/li&gt;
&lt;li&gt;JavaScript Timers&lt;/li&gt;
&lt;li&gt;DOM &amp;amp; Events &lt;/li&gt;
&lt;li&gt;Asynchronous JavaScript From Callbacks to Promises, to Async/Await. &lt;/li&gt;
&lt;li&gt;JavaScript Event Loop&lt;/li&gt;
&lt;li&gt;UI Events&lt;/li&gt;
&lt;li&gt;Forms, controls&lt;/li&gt;
&lt;li&gt;Document and resource loading&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#advanced-topics"&gt;
  &lt;/a&gt;
  Advanced Topics:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Functional Programming in JS&lt;/li&gt;
&lt;li&gt;Advanced Working With Functions&lt;/li&gt;
&lt;li&gt;Closures&lt;/li&gt;
&lt;li&gt;Regular Expressions&lt;/li&gt;
&lt;li&gt;Unicode in JS&lt;/li&gt;
&lt;li&gt;Object prototypes&lt;/li&gt;
&lt;li&gt;Storing data in the browser&lt;/li&gt;
&lt;li&gt;ES6 Modules&lt;/li&gt;
&lt;li&gt;Object building practice&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;What many JavaScript students make mistake is that they keep on reading JavaScript tutorials one by one, and do not implement any of them.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#time-to-build-more-projects"&gt;
  &lt;/a&gt;
  Time to build more projects:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/a-simple-and-effective-way-to-learn-practice-javascript-4c43aef62cf7"&gt;A Simple and Effective Way to Learn and Practice JavaScript:&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;JavaScript runs over the web today, no doubt &amp;amp; for every front-end developer, no matter if already experienced or at the start of your career.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Frameworks come and go, but JavaScript will stay Forever.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://medium.com/swlh/projects-you-can-build-with-vanilla-javascript-e52c3e00f25c"&gt;Projects You Can Build With Vanilla JavaScript.&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you are going for your next interview then I encourage you to check my blog where I shared &lt;/p&gt;

&lt;p&gt;&lt;a href="https://javascript.plainenglish.io/12-common-javascript-questions-i-used-to-ask-in-interview-be39ce27b3c5"&gt;12 Common JavaScript Questions I Used to Ask in Interviews:&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;If you like this. &lt;/p&gt;

&lt;p&gt;I encourage you all to sign up for my newsletter.&lt;/p&gt;

&lt;p&gt;It's free. &lt;br&gt;
You can ask me your questions via email.&lt;/p&gt;

&lt;p&gt;Check out the latest edition ⬇&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.getrevue.co/profile/AnkurTyagi"&gt;The 2-1-1 Developer Growth Newsletter by Ankur &lt;/a&gt; &lt;/p&gt;

&lt;p&gt;In the end, &lt;/p&gt;

&lt;p&gt;I would say the better you understand why and how JavaScript works and doesn’t work.&lt;/p&gt;

&lt;p&gt;The more solid your code will be...&lt;br&gt;
The more you’ll be able to effectively harness the true power of the language...&lt;/p&gt;

&lt;p&gt;Happy coding.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
      <category>career</category>
    </item>
    <item>
      <title>Performance checklist for Vue and Nuxt</title>
      <author>Jakub Andrzejewski</author>
      <pubDate>Mon, 11 Oct 2021 14:47:56 +0000</pubDate>
      <link>https://dev.to/baroshem/performance-checklist-for-vue-and-nuxt-cog</link>
      <guid>https://dev.to/baroshem/performance-checklist-for-vue-and-nuxt-cog</guid>
      <description>&lt;p&gt;Improving performance of web applications will always be sexy. We want the page to load faster, smoother, and without too many layout shifts (Core Web Vitals, I am looking at you 😉). If you search in Google for terms like &lt;code&gt;vue/nuxt performance&lt;/code&gt; you will get a bunch of documentation and articles you can use to improve performance of your page. In this article I wanted to summarize all this knowledge into one single source of truth (with respect to article authors).&lt;/p&gt;

&lt;p&gt;This summary document is based on the following articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.dawntraoz.com/blog/my-web-performance-journey-with-nuxt-storyblok-netlify/"&gt;My web performance journey with Nuxt, Storyblok &amp;amp; Netlify&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/dawntraoz"&gt;@dawntraoz&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/dana-engineering/how-we-achieve-90-lighthouse-performance-score-and-fully-offline-mode-for-dana-home-shopping-580b1b540c4d"&gt;How We Achieve 90+ Lighthouse Performance Score and Fully Offline Mode for DANA Home Shopping&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/jefrydco"&gt;@jefrydco&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://medium.com/weekly-webtips/web-vitals-google-search-the-state-vue-nuxt-performance-optimization-in-july-2020-71441eefc51"&gt;Web Vitals, Google Search, the State Vue &amp;amp; Nuxt performance optimization in July 2020&lt;/a&gt; by Johannes Lauter&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://vueschool.io/articles/series/vue-js-performance/"&gt;Vue.js Performance&lt;/a&gt; by &lt;a class="mentioned-user" href="https://dev.to/filrakowski"&gt;@filrakowski&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and my own knowledge that I gathered throughout the years.&lt;/p&gt;

&lt;p&gt;Make sure to visit these articles and give a solid like to all of them and their authors 😊&lt;/p&gt;

&lt;p&gt;You can also check out other article I have written recently about continuously measuring the performance of Nuxt.js applications using Lighthouse CI and Github Actions &lt;a href="https://dev.to/baroshem/continuous-performance-checks-in-nuxt-js-with-lighthouse-ci-and-github-actions-2lj9"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3kcy-dSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/3oz8xtBx06mcZWoNJm/giphy.gif%3Fcid%3Decf05e479t6z12wqipcr8vuqu4d0krvoymdaln178l8hfea2%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3kcy-dSb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/3oz8xtBx06mcZWoNJm/giphy.gif%3Fcid%3Decf05e479t6z12wqipcr8vuqu4d0krvoymdaln178l8hfea2%26rid%3Dgiphy.gif%26ct%3Dg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just please remember that improving performance is not an issue that you can just sit once and fix. It is a continuous process and the topic of performance should be addressed regularly so that new features of your website (for sure needed) won't break the performance.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#preload-key-requests-preconnect-to-required-origins"&gt;
  &lt;/a&gt;
  Preload key requests / Preconnect to required origins
&lt;/h2&gt;

&lt;p&gt;Declare preload links in your HTML to instruct the browser to download key resources as soon as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"critical.css"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"style"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"critical.js"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"script"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Consider adding preconnect or dns-prefetch resource hints to establish early connections to important third-party origins.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preconnect"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"dns-prefetch"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://example.com"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;dns-prefetch works exactly the same as preconnect but has wider browser support.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-thirdparty-usage"&gt;
  &lt;/a&gt;
  Reduce third-party usage
&lt;/h2&gt;

&lt;p&gt;Third-party code can significantly impact load performance. You can however modify the way you are using this third party library by:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loading the script using the async or defer attribute to avoid blocking document parsing.&lt;/li&gt;
&lt;li&gt;Self-hosting the script if the third-party server is slow.&lt;/li&gt;
&lt;li&gt;Removing the script if it doesn't add clear value to your site.&lt;/li&gt;
&lt;li&gt;Use link rel=preconnect or link rel=dns-prefetch to perform a DNS lookup for domains hosting third-party scripts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#eliminate-render-blocking-resources"&gt;
  &lt;/a&gt;
  Eliminate render blocking resources
&lt;/h2&gt;

&lt;p&gt;Resources are blocking the first paint of your page. Consider delivering critical JS/CSS inline and deferring all non-critical JS/styles. You can reduce the size of your pages by only shipping the code and styles that you need.&lt;/p&gt;

&lt;p&gt;Once you've identified critical code, move that code from the render-blocking URL to an inline script tag in your HTML page.&lt;/p&gt;

&lt;p&gt;Inline critical styles required for the first paint inside a style block at the head of the HTML page and load the rest of the styles asynchronously using the preload link.&lt;/p&gt;

&lt;p&gt;You can read more about this &lt;a href="https://sia.codes/posts/render-blocking-resources/#how-do-i-test-my-website-for-render-blocking-resources%3F"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#minifyremove-unnecessary-css-and-js"&gt;
  &lt;/a&gt;
  Minify/Remove unnecessary CSS and JS
&lt;/h2&gt;

&lt;p&gt;When you are building a big application, you will get to a place where your project may have much more code that it actually needs and uses.&lt;/p&gt;

&lt;p&gt;Use tools like &lt;a href="https://web.dev/minify-css/#css-minification-with-webpack"&gt;CSS Minification&lt;/a&gt; or &lt;a href="https://github.com/terser/terser"&gt;Terser JS Plugin&lt;/a&gt;. In Nuxt, Terser is included by default.&lt;/p&gt;

&lt;p&gt;To eliminate unused css use a tool like &lt;a href="https://purgecss.com/"&gt;PurgeCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To eliminate unnecessary JavaScript you can use Terser mentioned previously or utilize &lt;a href="https://webpack.js.org/guides/tree-shaking/"&gt;Tree Shaking&lt;/a&gt; to allow Dead Code Elimination. You can also use &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Code_splitting"&gt;Code Splitting&lt;/a&gt; which will split code into bundles that can be loaded on demand.&lt;/p&gt;

&lt;p&gt;Nuxt provides code-splitting out of the box.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#scan-modules-for-duplicates"&gt;
  &lt;/a&gt;
  Scan modules for duplicates
&lt;/h3&gt;

&lt;p&gt;Remove large, duplicate JavaScript modules from bundles to reduce final bundle size.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N3S9m_j8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8jgv7d98jpb0cwdz2gt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N3S9m_j8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8jgv7d98jpb0cwdz2gt.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Use &lt;a href="https://www.npmjs.com/package/webpack-bundle-analyzer"&gt;Webpack Bundle Analyzer&lt;/a&gt; or &lt;code&gt;--analyze&lt;/code&gt; flag in Nuxt.js&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reduce-execution-time"&gt;
  &lt;/a&gt;
  Reduce execution time
&lt;/h2&gt;

&lt;p&gt;The combination of code splitting, minification and compression, removal of unused code and caching techniques will greatly improve execution time.&lt;/p&gt;

&lt;p&gt;Consider reducing the time spent parsing, compiling and executing JS. You may find delivering smaller JS payloads helps with this.&lt;br&gt;
The idea is to optimize both our JS and CSS code, minimizing it and removing unused code, as well as the third-party libraries we are using.&lt;/p&gt;

&lt;p&gt;Keep the server response time for the main document short because all other requests depend on it.&lt;/p&gt;

&lt;p&gt;You can read more about this &lt;a href="https://gtmetrix.com/reduce-javascript-execution-time.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#image-handling"&gt;
  &lt;/a&gt;
  Image handling
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#properly-size-images"&gt;
  &lt;/a&gt;
  Properly size images
&lt;/h3&gt;

&lt;p&gt;Serve images that are appropriately-sized to save cellular data and improve load time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"cat-large.jpg"&lt;/span&gt; &lt;span class="na"&gt;srcset=&lt;/span&gt;&lt;span class="s"&gt;"cat-small.jpg 480w, cat-large.jpg 1080w"&lt;/span&gt; &lt;span class="na"&gt;sizes=&lt;/span&gt;&lt;span class="s"&gt;"50vw"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about this &lt;a href="https://web.dev/uses-responsive-images/?utm_source=lighthouse&amp;amp;utm_medium=cli"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#efficiently-encode-images"&gt;
  &lt;/a&gt;
  Efficiently encode images
&lt;/h3&gt;

&lt;p&gt;Optimized images load faster and consume less cellular data.&lt;br&gt;
Using your image CDN service or the compression of your image should be enough.&lt;/p&gt;

&lt;p&gt;You can read more about this &lt;a href="https://web.dev/uses-optimized-images/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#serve-images-in-nextgen-formats"&gt;
  &lt;/a&gt;
  Serve images in next-gen formats
&lt;/h3&gt;

&lt;p&gt;Image formats like WebP or Avif often provide better compression than PNG or JPEG, which means faster downloads and less data consumption.&lt;/p&gt;

&lt;p&gt;You can read more about this &lt;a href="https://web.dev/uses-webp-images/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-elements-have-explicit-width-and-height"&gt;
  &lt;/a&gt;
  Image elements have explicit width and height
&lt;/h3&gt;

&lt;p&gt;Set an explicit width and height on image elements to reduce layout shifts and improve CLS.&lt;/p&gt;

&lt;p&gt;You can read more about this &lt;a href="https://gtmetrix.com/use-explicit-width-and-height-on-image-elements.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#preload-largest-contentful-paint-lcp"&gt;
  &lt;/a&gt;
  Preload largest contentful paint (LCP)
&lt;/h3&gt;

&lt;p&gt;Preload the image used by the LCP element in order to improve your LCP time.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"preload"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"/path/to/image.jpg"&lt;/span&gt; &lt;span class="na"&gt;as=&lt;/span&gt;&lt;span class="s"&gt;"image"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;preload&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;path/to/lcp/image&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about this &lt;a href="https://gtmetrix.com/preload-largest-contentful-paint-image.html#:~:text=Preloading%20the%20Largest%20Contentful%20Paint,sooner%2C%20enhancing%20their%20user%20experience."&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#fonts"&gt;
  &lt;/a&gt;
  Fonts
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#all-text-remains-visible-during-webfont-loads"&gt;
  &lt;/a&gt;
  All text remains visible during webfont loads
&lt;/h3&gt;

&lt;p&gt;Leverage the font-display CSS feature to ensure text is user-visible while webfonts are loading.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="k"&gt;@font-face&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'Arial'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="py"&gt;font-display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The font-display API specifies how a font is displayed. swap tells the browser that text using the font should be displayed immediately using a system font. Once the custom font is ready, it replaces the system font.&lt;/p&gt;

&lt;p&gt;For Google fonts, for example, is as simple as adding the &amp;amp;display=swap parameter to the end to the Google Fonts URL:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css?family=Roboto:400,700&amp;amp;**display=swap**"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can read more about this &lt;a href="https://web.dev/font-display/"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-avoid"&gt;
  &lt;/a&gt;
  What to avoid?
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#large-layout-shifts"&gt;
  &lt;/a&gt;
  Large layout shifts
&lt;/h3&gt;

&lt;p&gt;Cumulative Layout Shift (CLS) is a Core Web Vitals metric calculated by summing all layout shifts that aren’t caused by user interaction.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#avoid-an-excessive-dom-size"&gt;
  &lt;/a&gt;
  Avoid an excessive DOM size
&lt;/h3&gt;

&lt;p&gt;A large DOM will increase memory usage, cause longer style calculations, and produce costly layout reflows.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-page-redirects"&gt;
  &lt;/a&gt;
  Multiple page redirects
&lt;/h3&gt;

&lt;p&gt;Redirects introduce additional delays before the page can be loaded.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#serving-legacy-javascript-to-modern-browsers"&gt;
  &lt;/a&gt;
  Serving legacy JavaScript to modern browsers
&lt;/h3&gt;

&lt;p&gt;Polyfills and transforms enable legacy browsers to use new JavaScript features. However, many aren't necessary for modern browsers.&lt;/p&gt;

&lt;p&gt;In Nuxt we have --modern with some options in the build command.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enormous-network-payloads"&gt;
  &lt;/a&gt;
  Enormous network payloads
&lt;/h3&gt;

&lt;p&gt;Large network payloads cost users real money and are highly correlated with long load times.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Defer requests until they're needed. Nuxt is taking care of it.&lt;/li&gt;
&lt;li&gt;Optimize requests to be as small as possible, minimizing and compressing, try to use WebP for the images when it's possible. An image CDN will be always there to keep our performance up!&lt;/li&gt;
&lt;li&gt;Cache requests so the page doesn't re-download the resources on repeat visits.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#documentwrite"&gt;
  &lt;/a&gt;
  Document.write()
&lt;/h3&gt;

&lt;p&gt;For users on slow connections, external scripts dynamically injected via document.write() can delay page load by tens of seconds.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#noncompositioned-animations"&gt;
  &lt;/a&gt;
  Non-compositioned animations
&lt;/h3&gt;

&lt;p&gt;Animations which are not composited can be heavy and increase CLS. Use &lt;code&gt;translate&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; CSS properties instead.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#framework-improvements"&gt;
  &lt;/a&gt;
  Framework improvements
&lt;/h2&gt;

&lt;p&gt;We went through things that you can do with your HTML, CSS, and JavaScript. Now, let's tackle the framework layer to see what we can do to improve performance of our website.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#asynchronous-components"&gt;
  &lt;/a&gt;
  Asynchronous Components
&lt;/h3&gt;

&lt;p&gt;Asynchronous Components allow you to only load Components when a specific condition is matched.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;header&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Search&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"searchActive"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="na"&gt;click=&lt;/span&gt;&lt;span class="s"&gt;"searchActive = !searchActive"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      🔍   
    &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Search&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;~/components/search.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;searchActive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#route-based-code-splitting"&gt;
  &lt;/a&gt;
  Route based code splitting
&lt;/h3&gt;

&lt;p&gt;Only the code from route that is currently visited by the user will be downloaded.&lt;/p&gt;

&lt;p&gt;So instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// router.js&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Home.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./About.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Home&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;About&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We could write this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// router.js &lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;routes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Home.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/about&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./About.vue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you’re using Nuxt this is out of the box. Nuxt’s default directory-based routing system is code-splitting every route by default.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#use-reactivity-when-it-is-actually-needed"&gt;
  &lt;/a&gt;
  Use reactivity when it is actually needed
&lt;/h3&gt;

&lt;p&gt;Overloading your page with too many reactive properties will make your page slower (especially using Vue 2). Make sure to use them only when needed and other static values that won't be changed over time, store them in constant variables.&lt;/p&gt;

&lt;p&gt;So instead:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;milisecondsInAnHour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3600000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getMilisecondsInAnHour&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;milisecondsInAnHour&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Write something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MILISECONDS_IN_AN_HOUR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3600000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getMilisecondsInAnHour&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;MILISECONDS_IN_AN_HOUR&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#eliminate-memory-leaks"&gt;
  &lt;/a&gt;
  Eliminate memory leaks
&lt;/h3&gt;

&lt;p&gt;The easiest example of a memory leak is registering an event listener and not properly unregistering it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;created&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To avoid that, make sure to include removeEventListener on destroy lifecycle hook.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optimize-third-party-packages"&gt;
  &lt;/a&gt;
  Optimize third party packages
&lt;/h3&gt;

&lt;p&gt;Many popular third party packages provide lighter versions that you can check using &lt;a href="https://bundlephobia.com/"&gt;https://bundlephobia.com/&lt;/a&gt;. Bundlephobia helps you find the performance impact of npm packages. Find the size of any javascript package and its effect on your frontend bundle.&lt;/p&gt;

&lt;p&gt;Make sure to use libraries that support tree shaking to only load code that will be used in the final configuration.&lt;/p&gt;

&lt;p&gt;Some libraries like lodash support importing direct files instead of the whole library. So instead writing this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;isNull&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;isNull&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lodash/isNull`
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#nuxt-use-plugins-only-if-they-are-used-appwide"&gt;
  &lt;/a&gt;
  [Nuxt] Use plugins only if they are used app-wide
&lt;/h3&gt;

&lt;p&gt;Plugins are a great way to provide application wide logic, but that also means that they are loaded application wide. If it turns out to be a piece of logic you’ll only need in certain conditions or certain pages consider loading it via dynamic import at these places.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#infrastructure-use-a-content-delivery-network-cdn"&gt;
  &lt;/a&gt;
  [Infrastructure] Use a Content Delivery Network (CDN)
&lt;/h3&gt;

&lt;p&gt;A CDN allows for the quick transfer of assets needed for loading Internet content including HTML pages, javascript files, stylesheets, images, and videos.&lt;br&gt;
The &lt;code&gt;build.publicPath&lt;/code&gt; option allows you to configure a CDN for all assets.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#useful-vue-amp-nuxt-packages"&gt;
  &lt;/a&gt;
  Useful Vue &amp;amp; Nuxt Packages
&lt;/h2&gt;

&lt;p&gt;In terms of improving performance of your website there are several packages available you can use.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#implement-progressive-web-app"&gt;
  &lt;/a&gt;
  Implement Progressive Web App
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://pwa.nuxtjs.org/"&gt;@nuxjs/pwa package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PWA will cache all of the resources needed to load our app. Not only the static files like JS and CSS, but it also caches the images. Even the API response is cached as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;pwa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;manifest&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;My Awesome App&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;fa&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#preconnect-fonts"&gt;
  &lt;/a&gt;
  Preconnect fonts
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://google-fonts.nuxtjs.org/"&gt;@nuxtjs/google-fonts package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you are using Google Fonts like Roboto, Raleway, etc, you can use this package to not block the page from rendering.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;googleFonts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;families&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;Raleway&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;wght&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
      &lt;span class="na"&gt;ital&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-optimized-images"&gt;
  &lt;/a&gt;
  Use Optimized Images
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://image.nuxtjs.org/"&gt;@nuxtjs/image package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure all images have right sizes and/or use external Digital Asset Management like Cloudinary to optimize images on the fly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;cloudinary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;baseURL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://res.cloudinary.com/&amp;lt;your-cloud-name&amp;gt;/image/upload/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#purge-unnecessary-css"&gt;
  &lt;/a&gt;
  Purge Unnecessary CSS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://purgecss.com/guides/nuxt.html#nuxt-js-plugin"&gt;nuxt-purgecss package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;PurgeCSS analyzes your content and your CSS files. Then it matches the selectors used in your files with the one in your content files. It removes unused selectors from your CSS, resulting in smaller CSS files.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lazy-hydration"&gt;
  &lt;/a&gt;
  Lazy Hydration
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/maoberlehner/vue-lazy-hydration"&gt;vue-lazy-hydration package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea of lazy hydration is to be able to control what components are hydrated (with JavaScript), when and under what conditions.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;LazyHydrate&lt;/span&gt; &lt;span class="na"&gt;when-visible&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;AdSlider/&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/LazyHydrate&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#image-lazy-loading"&gt;
  &lt;/a&gt;
  Image Lazy Loading
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/vue-lazyload"&gt;vue-lazyload package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea of lazy loading images is to delay sending requests for images to the point the image appears in the viewport. So basically, if you have an image in the footer, the request for it will be done when user scrolls down to it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;v-lazy=&lt;/span&gt;&lt;span class="s"&gt;"img.src"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#infinite-loading"&gt;
  &lt;/a&gt;
  Infinite Loading
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://peachscript.github.io/vue-infinite-loading"&gt;vue-infinite-loading package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The idea of the infinite load is as the user scrolling through the page goes on, we load the next paginated data.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight vue"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;infinite-loading&amp;gt;&amp;lt;/infinite-loading&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;InfiniteLoading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-infinite-loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;InfiniteLoading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="k"&gt;script&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#use-compression-brotli"&gt;
  &lt;/a&gt;
  Use Compression (Brotli)
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/nuxt-compress"&gt;nuxt-compress package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding Brotli compression will reduce the overall file size of your application by a relevant margin, Alexander Lichter wrote a &lt;a href="https://blog.lichter.io/posts/nuxtjs-on-brotli/"&gt;great article&lt;/a&gt; about how to add it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;exports&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;nuxt-compress&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;brotli&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;threshold&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8192&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}],&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#caching"&gt;
  &lt;/a&gt;
  Caching
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/nuxt-ssr-cache"&gt;nuxt-ssr-cache package&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cache is a hardware or software component that stores data so that future requests for that data can be served faster.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;useHostPrefix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/page1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/page2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;memory&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;max&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="nx"&gt;ttl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#bonus"&gt;
  &lt;/a&gt;
  Bonus
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Make sure to include &lt;code&gt;min-height&lt;/code&gt; for all your main pages. We encountered this problem in Vue Storefront, that we were fetching the data from an Ecommerce platform and because of that it took some time for the content to arrive and it was causing layout shifts (which resulted in worse Lighthouse results that were relatively easy to fix).&lt;/li&gt;
&lt;li&gt;Make sure to scan your components for unnecessary imports. When developing a huge application, it is common to refactor your pages so that you are constantly adding or removing components. It is really easy to lose track of used and unused components/helpers/etc.&lt;/li&gt;
&lt;li&gt;Check your build configuration in &lt;code&gt;nuxt.config.js&lt;/code&gt;. To decrease the final bundle you can add &lt;code&gt;extractCSS: true&lt;/code&gt; to your &lt;code&gt;build&lt;/code&gt; object. In our case it resulted in decreasing the final bundle by about 60 KB (20% of overall size).&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>vue</category>
      <category>nuxt</category>
      <category>performance</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Burnout? Take a moment to shut out expectations</title>
      <author>Tai Kedzierski</author>
      <pubDate>Mon, 11 Oct 2021 14:40:15 +0000</pubDate>
      <link>https://dev.to/taikedz/burnout-take-a-moment-to-shut-out-expectations-3bjg</link>
      <guid>https://dev.to/taikedz/burnout-take-a-moment-to-shut-out-expectations-3bjg</guid>
      <description>&lt;p&gt;Yesterday was &lt;em&gt;World Mental Health Awareness Day&lt;/em&gt;. As I've &lt;a href="https://dev.to/taikedz/make-it-a-habit-to-be-helpful-3em4"&gt;previously quipped&lt;/a&gt; it really should be a year-round effort, as it has a tendancy to affect all of us at several points in our lives - and I'm pretty sure we &lt;em&gt;all&lt;/em&gt; know someone who, right now, could do with a bit of being understood.&lt;/p&gt;

&lt;p&gt;I wanted to just jot my thoughts on how I got into a burnout - and how I've dealt with depressive nosedives and burnout bouts.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-did-i-get-to-burnout"&gt;
  &lt;/a&gt;
  How did I get to burnout?
&lt;/h2&gt;

&lt;p&gt;If you're feeling continually overwhelmed or persistently tired, it's a possible sign of burnout. Been there, done that myself...&lt;/p&gt;

&lt;p&gt;For me, it happened whilst I was still trying to build my career in tech. I was doing the day job in tech, managing servers and writing deployment code, and in the evening I was writing &lt;a href="https://www.minetest.net/"&gt;Minetest&lt;/a&gt; mods and managing game servers.&lt;/p&gt;

&lt;p&gt;I took a week-long holiday at one point to do three projects - introductories to Angular.js, Vue.js, and Android SDK development.&lt;/p&gt;

&lt;p&gt;I went to tech meetups, ran a tech meetup, and more.&lt;/p&gt;

&lt;p&gt;There is only so much a person can do before they have no energy left.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-do-i-know-i-have-burnout"&gt;
  &lt;/a&gt;
  When do I know I have burnout?
&lt;/h2&gt;

&lt;p&gt;Burnout shares some things in common with depression, one of which is the sheer overwhelmingness of mundane, everyday life: things you enjoyed become a chore; things you were good at become difficult or even insurmountable; you wish someone else would go to the fridge for you (seriously.)&lt;/p&gt;

&lt;p&gt;If anything is starting to feel difficult where it shouldn't be, keep an eye on yourself. Make sure work breaks happen away from screens. Be selective about social engagements.&lt;/p&gt;

&lt;p&gt;I manage now to recognise when I've overloaded myself, and make a point of offloading things. If it's for organising events and people, I take notes, set up calls/prep emails and hand the knowledge over to someone else. I still answer questions, but I become a background contributor.&lt;/p&gt;

&lt;p&gt;If it's my own projects, I re-asses to see what I &lt;em&gt;truly&lt;/em&gt; want to do, and what was taken on "just for funsies."&lt;/p&gt;

&lt;p&gt;And then I spend time on &lt;em&gt;me&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;For me, burnout is as much about "trying too hard to do too much" as "expecting too much of myself."&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-to-do"&gt;
  &lt;/a&gt;
  What to do?
&lt;/h2&gt;

&lt;p&gt;What you choose to do will vary on your comfort level and where you're at. There's no sure-fire solution - just suggestions for actions which you can pick and choose for yourself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Talk&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Talk to a close friend - someone who knows you and who can empathise with you&lt;/li&gt;
&lt;li&gt;Talk to someone you barely know - someone (kind) who can just listen to you without judgement. You'll rarely ever cross paths again&lt;/li&gt;
&lt;li&gt;Talk to your pet - it loves you, always&lt;/li&gt;
&lt;li&gt;Talk to a rubber duck - it never judges&lt;/li&gt;
&lt;li&gt;Talk to a fictional character. A kind one, preferably. Gandalf, perhaps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Take time out&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.workingmother.com/run-the-dishwasher-twice-advice"&gt;do housework to a "that'll do" state&lt;/a&gt; - something you can get quick, small wins in, especially if things have piled up&lt;/li&gt;
&lt;li&gt;go on a walk - get outside, do something different&lt;/li&gt;
&lt;li&gt;hide under the duvet - with books/video games/series binge/your favorite indoor solo activity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Un/Focus&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;write - or paint or doodle. Draw the perfect square, with the perfect shading. Throw it away afterwards.&lt;/li&gt;
&lt;li&gt;dance - move and flail and sweat. Be the unequivocable star of your own show.&lt;/li&gt;
&lt;li&gt;meditate - be still, seek peace in quietude. Tune the world out.&lt;/li&gt;
&lt;li&gt;do a crafts project - make some simple food, do some sewing, paint a chair... something you can do whilst your mind wanders into a podcast...&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://www.youtube.com/watch?v=1n3xXuEyr40"&gt;reserve a karaoke booth for just yourself&lt;/a&gt;, and scream into the void - whatever works for you&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I'm pretty sure is most important is that whatever you choose to do, you should do it &lt;em&gt;with the minimum amount of expectations possible&lt;/em&gt; - from others, and &lt;em&gt;from yourself&lt;/em&gt;. Social engagements are expectations. Goals are expectations. Normative standards are expectations. Instruction manuals tell you off.&lt;/p&gt;

&lt;p&gt;Give yourself a space and an activity that has no expectations for success or completion, no lower bar to call "failure."&lt;/p&gt;

&lt;p&gt;And when you've done it, know that you've done it &lt;em&gt;for you&lt;/em&gt;.&lt;/p&gt;

</description>
      <category>depression</category>
      <category>mentalhealth</category>
      <category>workplace</category>
      <category>burnout</category>
    </item>
    <item>
      <title>Getting started with GitHub pages</title>
      <author>Ramesh chandra pola</author>
      <pubDate>Mon, 11 Oct 2021 14:34:05 +0000</pubDate>
      <link>https://dev.to/byteslash/getting-started-with-github-pages-4jpf</link>
      <guid>https://dev.to/byteslash/getting-started-with-github-pages-4jpf</guid>
      <description>&lt;h2&gt;
  &lt;a href="#hello-everyone"&gt;
  &lt;/a&gt;
  Hello everyone! 🧡
&lt;/h2&gt;

&lt;p&gt;In this article, we look into &lt;strong&gt;How to get started with GitHub pages.🤩&lt;/strong&gt;&lt;br&gt;
Probably you already know how to use Git and GitHub. Suppose you built a complete project for your website and upload it on Github. Now you want others to see what you built, but you don’t know how to use GitHub pages, now I am here to help you all how to get started with GitHub pages.🙂&lt;br&gt;
GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from your repository on GitHub, optionally runs the files through a build process and publishes a website, that are freely hosted on GitHub’s &lt;code&gt;github.io&lt;/code&gt; domain.&lt;br&gt;
Project sites whether owned by an organization or a user account, are unlimited.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started🤩
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LBdHsyFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/tumblr_ljkn5yjPkO1qixleeo1_400.gifv" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LBdHsyFN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://64.media.tumblr.com/tumblr_ljkn5yjPkO1qixleeo1_400.gifv" alt="waiting_gif"&gt;&lt;/a&gt;&lt;br&gt;
Now let's create a new repository and name it with your project name.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_JMk8In2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940111035/4KqlRhhkl.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_JMk8In2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940111035/4KqlRhhkl.jpeg" alt="new repo.jpg"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4CSeK4B4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940124653/LlC4y9h6m.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4CSeK4B4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940124653/LlC4y9h6m.jpeg" alt="create repo.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Now upload your files to this repository. You can store any code you like in your Github repository, but to use the GitHub Pages feature to full effect, your code should be structured as a typical website, e.g. with the primary entry point being an HTML file called &lt;code&gt;index.html&lt;/code&gt;.&lt;br&gt;
Now you need to turn on the GitHub pages feature for your repository. &lt;br&gt;
To do this, Go to your GitHub repository and click&lt;code&gt;“Settings"&lt;/code&gt;.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cfhF1SN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940783111/_7_hJX1Vx.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cfhF1SN5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940783111/_7_hJX1Vx.jpeg" alt="settings.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Then select &lt;code&gt;Pages&lt;/code&gt; from the sidebar on the left.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--z3RotXaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940824260/qVnuA-vd1C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--z3RotXaN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633940824260/qVnuA-vd1C.jpeg" alt="pages tab.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Now underneath &lt;strong&gt;Source&lt;/strong&gt;, choose the &lt;code&gt;"main"&lt;/code&gt; branch, and click &lt;strong&gt;save&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--INUjsbc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942116822/RxImNrFw-.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--INUjsbc1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942116822/RxImNrFw-.jpeg" alt="to main.jpg"&gt;&lt;/a&gt;&lt;br&gt;
Again go to the GitHub Pages section, and you should see a line of the form "Your site is ready to be published at &lt;code&gt;https://username.github.io/projectname/&lt;/code&gt;."&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--s9TUMQI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633941146983/jkDG1XNn_N.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--s9TUMQI---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633941146983/jkDG1XNn_N.jpeg" alt="link.jpg"&gt;&lt;/a&gt;&lt;br&gt;
If you click on this URL, you should go to your Project-site, provided the home page is called index.html — it goes to this entry point by default. &lt;br&gt;
Though this looks empty but it’s just an example to give you an idea. Now you can deploy your own project.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YiRMKMST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942159332/WeBkpaNYg.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YiRMKMST--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942159332/WeBkpaNYg.jpeg" alt="final page.jpg"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#my-work-here-is-done-now-its-your-work-to-build-creative-projects-and-host-it-using-github-pages"&gt;
  &lt;/a&gt;
  My work here is done, Now it's your work to build creative projects and host it using GitHub pages🥳🧡
&lt;/h4&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--X-BBrZea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942609398/vlajJkQse.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--X-BBrZea--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942609398/vlajJkQse.gif" alt="done.gif"&gt;&lt;/a&gt;&lt;br&gt;
That's all for today! 😁 You reached the end of the article 😍&lt;br&gt;
If you found this article helpful, please like and share it 🧡. &lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2lVH3-LT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942604495/S0lY7iu8N.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2lVH3-LT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1633942604495/S0lY7iu8N.gif" alt="wow.gif"&gt;&lt;/a&gt;&lt;br&gt;
Don’t forget to share this article with your friends or colleagues. I'm Rameshchandra pola who loves to build projects and share valuable tips in my Blogs. Feel free to connect with me on any of the platforms below!🧡&lt;br&gt;&lt;br&gt;
 &lt;a href="https://github.com/Rameshchandrapola"&gt;GitHub&lt;/a&gt;⭐&lt;a href="https://www.linkedin.com/in/pola-ramesh-chandra-b78347202/"&gt;LinkedIn&lt;/a&gt;⭐&lt;a href="https://twitter.com/POLARAMESHCHAN2"&gt;Twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Just Ask Ipython for help</title>
      <author>Waylon Walker</author>
      <pubDate>Mon, 11 Oct 2021 14:24:25 +0000</pubDate>
      <link>https://dev.to/waylonwalker/just-ask-ipython-for-help-324e</link>
      <guid>https://dev.to/waylonwalker/just-ask-ipython-for-help-324e</guid>
      <description>&lt;h2&gt;
  &lt;a href="#it-happens-to-the-best-of-us"&gt;
  &lt;/a&gt;
  It happens to the best of us
&lt;/h2&gt;

&lt;p&gt;We can't all remember every single function signature out there, it's just not&lt;br&gt;
possible.  If you want to stay productive while coding without the temptation&lt;br&gt;
to hit YouTube or Twitter.  Use the built in help.  Here are 5 ways to get help&lt;br&gt;
without leaving your terminal.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/TZrRAP-9UMk"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#docstrings"&gt;
  &lt;/a&gt;
  Docstrings
&lt;/h2&gt;

&lt;p&gt;In any python repl you can access the docstring of a function by calling for &lt;code&gt;help&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Ipython we can even get some syntax highlighting with the &lt;code&gt;?&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#source-code"&gt;
  &lt;/a&gt;
  Source Code
&lt;/h2&gt;

&lt;p&gt;Sometimes the docstrings are not good enough, and don't give us the content we&lt;br&gt;
need, and we just need to look at the source.  Without leaving your terminal&lt;br&gt;
there are two ways I often use to get to the source of a function I am trying&lt;br&gt;
to use.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The more common way I do it is with the ipython &lt;code&gt;??&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;df.rolling??
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#bonus-richinspect"&gt;
  &lt;/a&gt;
  Bonus rich.inspect
&lt;/h2&gt;

&lt;p&gt;You thought the syntax highlighting was good with ipython, check out what&lt;br&gt;
&lt;code&gt;rich.inspect&lt;/code&gt; can do! As far as I know there is no way to get to source code,&lt;br&gt;
but the results are still fantastic.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;pip &lt;span class="nb"&gt;install &lt;/span&gt;rich
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Install rich&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;inspect&lt;/span&gt;
&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cars&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;then inspect&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#connect-with-me"&gt;
  &lt;/a&gt;
  Connect with me
&lt;/h2&gt;

&lt;p&gt;If you liked this one, check out the YouTube Channel, catch me live on twitch,&lt;br&gt;
or connect on twitter, I'd love to hear from you.&lt;/p&gt;

&lt;p&gt;twitter:  &lt;a href="https://twitter.com/_WaylonWalker"&gt;https://twitter.com/_WaylonWalker&lt;/a&gt;&lt;br&gt;
twitch: &lt;a href="https://www.twitch.tv/waylonwalker"&gt;https://www.twitch.tv/waylonwalker&lt;/a&gt;&lt;br&gt;
github: &lt;a href="https://github.com/waylonwalker/"&gt;https://github.com/waylonwalker/&lt;/a&gt;&lt;br&gt;
twitch: &lt;a href="https://www.twitch.tv/waylonwalker"&gt;https://www.twitch.tv/waylonwalker&lt;/a&gt;&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Writing an Engaging, SEO-Friendly Technical Content: Tips from Fellow Creators</title>
      <author>Charu Veluthoor</author>
      <pubDate>Mon, 11 Oct 2021 13:45:46 +0000</pubDate>
      <link>https://dev.to/aviyel/writing-an-engaging-seo-friendly-technical-content-tips-from-fellow-creators-3pn1</link>
      <guid>https://dev.to/aviyel/writing-an-engaging-seo-friendly-technical-content-tips-from-fellow-creators-3pn1</guid>
      <description>&lt;p&gt;The role of writers in building brands is indispensable today. From global tech giants like Facebook to budding startups, carefully articulated content is essential in attracting consumers, building user base, and maximising user retention rate. Aviyel works with creators around the globe and features informative content around open source projects.&lt;br&gt;
Here’s a quick guide to the basics of technical writing that certainly answers- how to begin with technical writing from a scratch with Aviyel.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-are-we"&gt;
  &lt;/a&gt;
  Who are we?
&lt;/h2&gt;

&lt;p&gt;Aviyel works with open source creators to build and incentivise active communities, achieve financial independence and increase adoption of their projects. At Aviyel, we are building a knowledge repository to share their contents, experiences, and support for open source projects. We are the bridge connecting open source communities, businesses, and developers who build great products.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#role-of-freelancers-in-building-a-platform-like-aviyel"&gt;
  &lt;/a&gt;
  Role of freelancers in building a platform like Aviyel
&lt;/h3&gt;

&lt;p&gt;Great open source projects deserve great content. Open source has always had a content problem creating difficulties connecting with the audience. Here’s where writers come into the picture. Creators are a building block of any organisation, regardless of the size. The content developers through their product allow companies like Aviyel to kickstart the conversations around open source and help OSS projects to climb the desired mark. We want you to help build OSS communities for our partners through your content.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-do-enterprises-expect-from-creators"&gt;
  &lt;/a&gt;
  What do enterprises expect from creators?
&lt;/h3&gt;

&lt;p&gt;To create well-planned, well-researched, and well-crafted articles. Inform the developer ecosystem, stimulate a new and critical discourse around Open Source creators, projects, and community. The blog post should sound human and curated in a way that all reader questions are answered. While preparing a draft of your blog, please ask yourself if this is what I want to read as a reader? This is how you will polish your writing style by quick elimination and bringing rigor to your content. If you encounter any difficulty while writing/formulating your thoughts on a write-up, reach out to our content community and Aviyel’s content management team on our Discord channel. Above all, we will assist each other to learn, grow and accomplish their missions in life.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#voice-and-tone"&gt;
  &lt;/a&gt;
  Voice and Tone
&lt;/h3&gt;

&lt;p&gt;Generally, most articles follow this standard:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#voice"&gt;
  &lt;/a&gt;
  Voice
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Informative&lt;/li&gt;
&lt;li&gt;Technical&lt;/li&gt;
&lt;li&gt;Confident&lt;/li&gt;
&lt;li&gt;Human&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#tone"&gt;
  &lt;/a&gt;
  Tone
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Q&amp;amp;A: Conversational&lt;/li&gt;
&lt;li&gt;Blog: Opinionated&lt;/li&gt;
&lt;li&gt;How-to’s and Tutorials: Informative&lt;/li&gt;
&lt;li&gt;Cheat Sheets, Checklists, and To-do’s: Report&lt;/li&gt;
&lt;li&gt;Reviews: Analyst&lt;/li&gt;
&lt;li&gt;Thought pieces: Storyteller&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#word-count"&gt;
  &lt;/a&gt;
  Word Count
&lt;/h3&gt;

&lt;p&gt;The article should contain around 1500 words. Although, editors do appreciate you going the extra mile, please make sure the extra content adds rigor and value to your content, rather than make it dormant.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure-of-blog"&gt;
  &lt;/a&gt;
  Structure of Blog
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Introduction- First line should have the primary keyword. Please use a stat or recent example to supplement your introduction. Must contain at least one external linking (mostly to your stat).&lt;/li&gt;
&lt;li&gt;Body- The body should have a minimum of two headings. Both internal and external linking is required. The headings must include your keywords.&lt;/li&gt;
&lt;li&gt;Conclusion- Can be quoted as “Way Forward/ Parting Note.” Please connect your article with Aviyel’s vision and add Aviyel’s relevant social media/blog links.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Sample&lt;/strong&gt;- Aviyel is partnering with MobSF to deliver a one-of-a-kind mobile security infrastructure available in the electronics industry. We are embarking on a journey to monetise open source software and build a developers-driven community with constant flow of knowledge, ideas, and goals. To know more about Aviyel's recent endeavors, follow our discussions here. Join Aviyel’s Twitter space at AviyelHQ.&lt;br&gt;
Moreover, the structure of your blog primarily depends on the niche of your post. For instance, if you are curating a step by step tutorial or contribution guide, try to include some generalised pointers like prerequisites, attributions and a summary of your writeup in conclusion. Similarly, if you are attempting a benchmarking article, make sure to enlist pros, cons, and difference between the two technologies you are writing about. You can checkout a sample guide &lt;a href="https://dev.toput-link-here"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#keyword-optimisation"&gt;
  &lt;/a&gt;
  Keyword Optimisation
&lt;/h3&gt;

&lt;p&gt;This is the heart and soul of your write-up. A blog mainly consists of 5-7 main keywords out of which primary keyword will lift your blog ranking. To rank your blog on search engines, please ensure your keyword is stuffed at the right places. Do not overuse your keywords. An ideal keyword density means using your primary keyword once in every three lines. Please follow the ritual the next time you draft an article. Other pointers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At least two of your headings must have the primary keyword.
The first paragraph of your blog must contain the primary keyword. It’s better if you use it in the first two lines themselves.&lt;/li&gt;
&lt;li&gt;There is no right answer to how many times your keywords should appear in your blog. However, please make sure your secondary keywords are stuffed at least 5-7 times in the entire blog.&lt;/li&gt;
&lt;li&gt;Frame your content around your keywords, not vice versa.&lt;/li&gt;
&lt;li&gt;The title should not be more than 12-word long. The keyword must come in the first 4 words.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#plagiarism"&gt;
  &lt;/a&gt;
  Plagiarism
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Aviyel, or any other company per se is strictly against * plag. Please use any plag detection tool before submitting your article to the content team at Aviyel. At times, plag is a result of adding repeated quotations or stats. Try to modify their language without changing the essence.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#important-pointers"&gt;
  &lt;/a&gt;
  Important Pointers
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Use minimum passive voice. It decreases the readability score of your blog.&lt;/li&gt;
&lt;li&gt;Try not to use big words with more than two syllables.&lt;/li&gt;
&lt;li&gt;Use Headings as much as you can. It decreases the complexity meter.&lt;/li&gt;
&lt;li&gt;Image caption and title- should involve keywords in a robust manner. Download your images with the title of your blog.&lt;/li&gt;
&lt;li&gt;Complex sentences reduce readability scores and may not pacify the reader’s imagination. Short and crisp sentences enrich the content. Try to wrap most of your sentences in 10 words.&lt;/li&gt;
&lt;li&gt;Use Social media links. Embed them in your articles.
Internal and external linking&lt;/li&gt;
&lt;li&gt;Do not end your headings with a period, semicolon.&lt;/li&gt;
&lt;li&gt;Make sure your content is fresh. Freshness enhances the SEO of your content.&lt;/li&gt;
&lt;li&gt;Conclude your blog with Aviyel’s vision, social media links.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#formatting"&gt;
  &lt;/a&gt;
  Formatting
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#headlinestitles"&gt;
  &lt;/a&gt;
  Headlines/Titles
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Write in title case&lt;/li&gt;
&lt;li&gt;Make sure you use your primary keyword within the first five words.&lt;/li&gt;
&lt;li&gt;Primary Section Headers: Use Heading 1&lt;/li&gt;
&lt;li&gt;Key Subheads That Should Show Up in Contents: Use Heading 2&lt;/li&gt;
&lt;li&gt;Third-Tier Subheads: Use Subtitle&lt;/li&gt;
&lt;li&gt;Body: Normal Text&lt;/li&gt;
&lt;li&gt;Examples: Indent Normal Text; use bullets as necessary&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#subheads"&gt;
  &lt;/a&gt;
  Subheads
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Include and follow the H2 &amp;gt; H3 &amp;gt; H4 hierarchy strictly. Your headings should start with H2 then followed by H3.&lt;/li&gt;
&lt;li&gt;Do not forget to use your primary keyword in headings and subheadings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#body"&gt;
  &lt;/a&gt;
  Body
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Bullets: default CMS bullet, aligned left&lt;/li&gt;
&lt;li&gt;Numbering: default CMS, aligned left&lt;/li&gt;
&lt;li&gt;Font, bold, italics

&lt;ul&gt;
&lt;li&gt;Leave font as “paragraph” style unless using a subhead. Bold subheads. No need to italicize.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Hyperlinks

&lt;ul&gt;
&lt;li&gt;Embed link for SEO, set to open in a new tab.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#images"&gt;
  &lt;/a&gt;
  Images
&lt;/h4&gt;

&lt;p&gt;Whenever you download images from Google Images, make sure the title of the blog is the title of your images. When inserting the image in the doc/CMS platform, please caption the image with the primary keyword.&lt;br&gt;
If project title- MobSF: Best practices and Tips&lt;br&gt;
Image captions can be Features of MobSF/Analysis of Mobile Security Framework&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#embeddable-content"&gt;
  &lt;/a&gt;
  Embeddable Content
&lt;/h4&gt;

&lt;p&gt;Here, I am talking from Aviyel’s perspective;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Videos

&lt;ul&gt;
&lt;li&gt;Be opportunistic to include YouTube of vloggers approved by Aviyel (here in this case) only.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Social media posts

&lt;ul&gt;
&lt;li&gt;Be opportunistic to embed Facebook, Twitter, Instagram, and other posts of Aviyel, yours, or other Aviyel freelancers writing on similar issues.&lt;/li&gt;
&lt;li&gt;Find social media handles of our partners- Docz, MobSF, etc, and embed them into your posts.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#aviyel-house-style"&gt;
  &lt;/a&gt;
  Aviyel House Style
&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;business&lt;/strong&gt;&lt;br&gt;
Plural: businesses&lt;br&gt;
Sing. possessive: business’s&lt;br&gt;
Plural possessive: businesses’&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FinTech businesses burst onto the scene in 2006.&lt;/li&gt;
&lt;li&gt;The business’s toxic work environment&lt;/li&gt;
&lt;li&gt;Businesses’ policies for work-life balance.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;email&lt;/strong&gt;&lt;br&gt;
One word, no hyphen.&lt;br&gt;
&lt;strong&gt;internet&lt;/strong&gt;&lt;br&gt;
Always lowercase except when used as part of a name or proper noun.&lt;br&gt;
&lt;strong&gt;log in/login&lt;/strong&gt;&lt;br&gt;
log in (intransitive verb), and login (adjective, noun). Never "log on," never hyphenated.&lt;br&gt;
Log into the master as root.&lt;br&gt;
Log in to complete the steps.&lt;br&gt;
&lt;strong&gt;multicloud&lt;/strong&gt;&lt;br&gt;
One word, no hyphen.&lt;br&gt;
&lt;strong&gt;operating system&lt;/strong&gt;&lt;br&gt;
The foundational software that runs a computer, server, mobile device.  OS is acceptable on second use. operating systems, OSs&lt;br&gt;
&lt;strong&gt;open source software&lt;/strong&gt;&lt;br&gt;
No hyphen between open and source. Do not capitalise on open source in between the sentences.&lt;br&gt;
&lt;strong&gt;software&lt;/strong&gt;&lt;br&gt;
As an uncountable noun, software is always singular.&lt;br&gt;
&lt;strong&gt;job titles&lt;/strong&gt;&lt;br&gt;
Do not capitalise job titles unless they follow a name or are used as part of the name.&lt;br&gt;
Co-Founder Jose Kuttan&lt;br&gt;
Jose Kuttan, the co-founder of Aviyel&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sourcing"&gt;
  &lt;/a&gt;
  Sourcing
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Don’t use only one source of information&lt;/li&gt;
&lt;li&gt;Don’t exclusively or repeatedly use the same sources&lt;/li&gt;
&lt;li&gt;Sources should reflect the diversity in our communities&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#attribution"&gt;
  &lt;/a&gt;
  Attribution
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#in-line-in-copy"&gt;
  &lt;/a&gt;
  In line in copy
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;“The open source industry will grow by X% by 2025, according to McKinsey.”
Parting Note
It is vital to build a fresh, SEO-laiden copy of your posts. Above, I have summarised a number of tips and techniques you can use to master your content. However, SEO-enrichment would work only if your content is up-to date with greater visibility. Gaining followers to your blog isn’t about fine keywords, but quality of your content.
You can follow Aviyel for similar styleguides.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To read the full article, &lt;a href="https://bit.ly/3DEVf6r"&gt;tap here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>writing</category>
      <category>programming</category>
    </item>
    <item>
      <title>How Much Does It Cost To Build a CRM System?</title>
      <author>AscendixTech</author>
      <pubDate>Mon, 11 Oct 2021 13:43:30 +0000</pubDate>
      <link>https://dev.to/ascendixtech/how-much-does-it-cost-to-build-a-crm-system-5ag</link>
      <guid>https://dev.to/ascendixtech/how-much-does-it-cost-to-build-a-crm-system-5ag</guid>
      <description>&lt;p&gt;&lt;em&gt;Originally published at &lt;a href="https://ascendixtech.com/crm-development-cost-full-guide/"&gt;Ascendix Tech's blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;&lt;a href="https://www.statista.com/statistics/605933/worldwide-customer-relationship-management-market-forecast/#:~:text=The%20global%20customer%20relationship%20management,(CAGR)%20of%200.4%20percent."&gt;worldwide CRM software market is expected to reach over $43 bln by 2024&lt;/a&gt;&lt;/strong&gt; with a CAGR of 0.4% per year, according to Statista. &lt;/p&gt;

&lt;p&gt;These numbers mean that more and more companies continue to invest large funds into improving their lead generation funnels, customer service, lead-to-deal rates, and other activities through purchasing or building a powerful CRM system. &lt;/p&gt;

&lt;p&gt;Today, we want to discuss how much does it cost to build a CRM system comparing both ready-made solutions and custom CRM software for your business. &lt;/p&gt;

&lt;p&gt;Let’s get down to business. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#custom-crm-development-vs-readymade-solutions"&gt;
  &lt;/a&gt;
  Custom CRM Development vs Ready-Made Solutions
&lt;/h2&gt;

&lt;p&gt;Before getting right into discussing the CRM development cost, we want to briefly shed the light on the key options you have to get a customer relationship management system for your business. &lt;/p&gt;

&lt;p&gt;Generally, there are three of them: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Develop custom CRM from scratch &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Customize existing CRM solutions (i.e., on top of Salesforce or Dynamics 365) &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Purchase a ready-made CRM software license &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now highlight the pros and cons of each solution and then compare them by the same criteria. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#custom-crm-development"&gt;
  &lt;/a&gt;
  Custom CRM Development
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;High system performance level &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High compatibility in terms of integrations with any third-party platforms you need &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High data security level using the latest encryption protocols &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High flexibility by building a single IT infrastructure for all departments &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cost-efficient solution in the long run. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;High initial price for building and setting up the system &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Much time required to create a CRM from scratch &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Costly maintenance. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#crm-customization"&gt;
  &lt;/a&gt;
  CRM Customization
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cost savings as you need only to build several specific features on top of ready-made solutions  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save much time as most features and infrastructures are preliminary ready for use &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid much technical issues &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Get enough customizability and flexibility for your business &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Frequent platform updates automatically. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You still need to purchase licenses for each new CRM user &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You still don’t get full flexibility in terms of features and integrations. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#offtheshelf-crm-systems"&gt;
  &lt;/a&gt;
  Off-The-Shelf CRM Systems
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Save much time and start using a CRM within a couple of minutes/hours &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lots of features out-of-the-box  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Existing integrations with third-party tools  &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Low flexibility level &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extra funds on the functionality you may never use &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;High CRM development cost in the long run &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Limited customization opportunities &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Potential scalability issues in the future. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now dive into a more detailed comparison of the mentioned options covering and cover the most crucial aspects for your business. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--am6_YcxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mg5k7blgvgea67ahtnvh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--am6_YcxF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mg5k7blgvgea67ahtnvh.png" alt="Ready-Made Solutions vs CRM Customization vs Custom CRM Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dsoE1lic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wlywi0qffw0wtzwqxtf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dsoE1lic--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6wlywi0qffw0wtzwqxtf.png" alt="Ready-Made Solutions vs CRM Customization vs Custom CRM Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#crm-development-cost-key-price-components"&gt;
  &lt;/a&gt;
  CRM Development Cost: Key Price Components
&lt;/h2&gt;

&lt;p&gt;Now we want to share the core CRM system modules that will impact the final CRM development cost. This way, you will have a better understanding of the key components that should complement your CRM system so that you know what you’re paying for. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Admin Panel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is a cornerstone of your future custom CRM software which is responsible for system rights management, authorization processes, navigation, and account settings. &lt;/p&gt;

&lt;p&gt;So, software engineers will need to develop advanced server-side logic and features to make server request architecture as fast as possible. &lt;/p&gt;

&lt;p&gt;Moreover, development teams will need to create an easy-to-use and lightweight user interface to offer your employees easy-to-use and advanced CRM software user experience. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sales Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sales functionality block is one of the most crucial parts of your CRM system as it empowers your sales managers to automate their daily workflows and utilize contacts management, task management, get sales data analytics, and many other features. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Marketing Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;CRM software is a must-have system for your marketing department as well.  &lt;/p&gt;

&lt;p&gt;Marketers create personalized customer profiles, analyze market segments, verify the quality of leads they generate, and build powerful email campaigns for leads and contacts stored in your CRM software. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Customer Support Module&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your custom CRM software should provide an advanced customer support functionality block. &lt;/p&gt;

&lt;p&gt;In general, it includes a help desk, agent console, knowledge base portal, service analytics, case report and management, cloud-based data storage, and many other features. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BpAhWCwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr3ao59ueyzjocofmm21.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BpAhWCwB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qr3ao59ueyzjocofmm21.png" alt="Key CRM Development Pricing  Functionality Components | Ascendix Tech"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, we have discussed the most default features and modules of your custom CRM software. And here comes the question: ‘how much does it cost to build a CRM?’ &lt;/p&gt;

&lt;p&gt;Below is the list of technical specialists required to build the functionality blocks listed above: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Frontend developers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Backend developers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Technical team leads &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UI/UX designers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Project managers &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;QA testing engineers  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DevOps specialists &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Business analysts. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have a better understanding of the technical specialists that will most likely take part in building, testing, designing, and controlling your custom CRM development project. &lt;/p&gt;

&lt;p&gt;In terms of the CRM development cost, it may greatly vary depending on the complexity and number of features you need. &lt;/p&gt;

&lt;p&gt;You will have a more clear understanding after conducting a discovery phase or requesting an estimate from a CRM development company that you want to partner with. &lt;/p&gt;

&lt;p&gt;Generally, an approximate custom CRM software development starts from &lt;strong&gt;$50,000 building must-have functionality&lt;/strong&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#final-words"&gt;
  &lt;/a&gt;
  Final Words
&lt;/h2&gt;

&lt;p&gt;Custom CRM development cost is a complex and multicomponent term which should be estimated based on your business challenges and technical needs.  &lt;/p&gt;

&lt;p&gt;If you want to learn more details, check the full blog article &lt;strong&gt;&lt;a href="https://ascendixtech.com/crm-development-cost-full-guide/"&gt;CRM Development Cost: Ready-Made Solutions vs Custom CRM Software&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Button Fill Animation</title>
      <author>Coder</author>
      <pubDate>Mon, 11 Oct 2021 13:41:41 +0000</pubDate>
      <link>https://dev.to/codezhub/button-fill-animation-1bfk</link>
      <guid>https://dev.to/codezhub/button-fill-animation-1bfk</guid>
      <description>&lt;p&gt; You Can Check Here for More: &lt;b&gt;&lt;a href="http://Codelivly.com"&gt;Codelivly.com&lt;/a&gt; &lt;/b&gt;&lt;/p&gt;
&lt;p&gt;&lt;span&gt;If you enjoyed this article you can &lt;/span&gt;&lt;span&gt; on &lt;a href="https://dev.to/codezhub"&gt;https://dev.to/codezhub&lt;/a&gt; where I regularly post bite size tips relating to HTML, CSS and JavaScript.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Happy Coding..&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/davekilljoy/embed/wHAvb?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>codepen</category>
    </item>
    <item>
      <title>Resolving Conflicts within your dev team</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 11 Oct 2021 13:41:34 +0000</pubDate>
      <link>https://dev.to/codesphere/resolving-conflicts-within-your-dev-team-1hfh</link>
      <guid>https://dev.to/codesphere/resolving-conflicts-within-your-dev-team-1hfh</guid>
      <description>&lt;p&gt;Confrontation is inevitable in the close-knit and often stressful environments many dev teams work in. It is a rare group of people that can work together towards the same goal and not disagree sooner or later. The issue is not the arisal of conflict, but how you manage it. The way a team works through disagreements to find common ground can be the difference between a good team and a great one.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--omlkuehB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnk1zyq4og0ob0utm5cd.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--omlkuehB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qnk1zyq4og0ob0utm5cd.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Denial is not a river in Egypt, but it is one of the most common problems when it comes to resolving conflict.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, avoidance is an all too common response to conflict. A response that usually only serves to draw an issue out and, ultimately, helps nobody. Granted not every disagreement needs an intervention and team-building retreat before it's solved, but having the tools to help your team communicate is how you will find your way to productivity.&lt;/p&gt;

&lt;p&gt;Conflict can come from anywhere; a bad code review, a design disagreement, or even just a team member having a bad day. In a high-paced environment, the smallest miscommunication can escalate into an issue that can cause the whole team to be disrupted. Whatever the conflict, there is always a simple rule to remember - &lt;em&gt;Conflict exists when one party has a need for another and that &lt;strong&gt;need is not being met&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FLlqGYUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7w6zc79dhlggwzum7qa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FLlqGYUb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t7w6zc79dhlggwzum7qa.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thought you might have is that not all disputes fit so neatly into this simple definition, but think of it as a jumping-off point to help you understand and hopefully solve the issue…&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#communicate-the%C2%A0need"&gt;
  &lt;/a&gt;
  Communicate the need
&lt;/h3&gt;

&lt;p&gt;It is important to understand what each party is trying to achieve in any given conflict, what is their stance, and why are they involved at all. This might be as simple as one party requesting a resource or action from another, or it may be much more complicated in that there is no single 'need' to be filled in order to resolve the issue. The important thing is to establish communication on what all parties are trying to accomplish.&lt;/p&gt;

&lt;p&gt;In many cases, simply allowing all parties to vocalize their position can create enough space for a compromise to be achieved. Whether or not the need can be realistically met is not the goal of this step, it is simply to establish communication and an understanding.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--k62WIjmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ga1eryrh18r7yoydks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k62WIjmZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k2ga1eryrh18r7yoydks.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#meet-the%C2%A0need"&gt;
  &lt;/a&gt;
  Meet the need
&lt;/h3&gt;

&lt;p&gt;If the need can be met within reason, then great. Conflict resolved. If not, then negotiation can begin. Again, we cannot speak to all situations with a single magic solution, but once all parties have vocalized their argument and there is still no clear solution, then you would hope cooler heads can prevail and a compromise that suits everyone or at least restores harmony can be made.&lt;/p&gt;

&lt;p&gt;Only if these steps fail do 3rd parties need to be involved for conflict resolution - a very common issue that many teams totally skip these steps. People can have a tendency to avoid the issue altogether or manifest their issue with aggression instead of trying to hear both sides…&lt;br&gt;
If you take anything away from this article it should be that all members of a successful dev team should be equipped with the tools to vocalize their needs with conflict counterparts and try to meet that need if possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conflict-resolution"&gt;
  &lt;/a&gt;
  Conflict resolution
&lt;/h3&gt;

&lt;p&gt;Third-party intervention is the only option left if the conflicting parties are unable to find a solution on their own. A member of the leadership team should be able to act as an impartial adjudicator of a disagreement and make an unbiased decision that gets everyone involved back on track. The key here is listening and understanding the argument and making the most effective decision for the development of the project, not to disrespect or diminish any team member. &lt;br&gt;
A resolution needs to be found one way or the other in order for the team to get back to work and steps to keep everyone as happy and efficient as possible are the result of any good conflict resolution.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yS28hUvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401plp8v95j7iskp05nn.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yS28hUvq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/401plp8v95j7iskp05nn.jpeg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-avoid%C2%A0conflict"&gt;
  &lt;/a&gt;
  How to avoid conflict
&lt;/h3&gt;

&lt;p&gt;These tools are great for your team to know and implement but avoiding situations that cause friction between team members is an altogether better approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#set-clear%C2%A0goals"&gt;
  &lt;/a&gt;
  Set clear goals
&lt;/h3&gt;

&lt;p&gt;Ensuring all team members are well informed and on the same page is a great first step to avoiding miscommunication and conflict. Trying to make any group of people pull together to achieve a task can be difficult, everyone has their own opinion. Well-defined tasks will help team members see the destination clearly and avoid disputes about the best route to get there.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lines-of-communication"&gt;
  &lt;/a&gt;
  Lines of communication
&lt;/h3&gt;

&lt;p&gt;Healthy lines of communication don't need much explanation but make sure the team is able to speak to one another and clear up any issues before they escalate into a potential problem. Maybe your goals were not as clearly defined as you thought? Well-accessible communication will allow all team members to clarify what may be causing them a bottleneck.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#effective-onboarding"&gt;
  &lt;/a&gt;
  Effective onboarding
&lt;/h3&gt;

&lt;p&gt;A well-planned and informative onboarding process will help every new team member's transition into the team be as smooth as possible. Company vision, KPIs, technical documentation, tools the team uses, roles, and responsibilities are all key things for a new hire to know and understand to avoid any conflict with new team members down the line.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Clearly defining the roles and responsibilities of each team member along with a well-defined goal and metrics will keep conflicts to a minimum. It's easier for everyone to sing from the same hymn sheet if everyone has the same one. A well-structured company with well-established and open communication is the best way to keep your team working together and in harmony.&lt;/p&gt;

&lt;p&gt;If and when conflict does arise, the ideal scenario would see all parties involved exercising their ability to vocalize their issue with as little ego as possible. Understanding one another and finding a compromise where possible should be the goal. This isn't always going to be possible but it should be a skill set all team members at least strive to achieve if an effective workflow is to follow. &lt;/p&gt;

&lt;p&gt;Understandably not every hire your team ever makes will be an emotionally mature and well-balanced individual, capable of clearly communicating their needs and finding healthy solutions to conflict. The foundation of any effective team though is communication. Giving your team these tools or even trying to establish them as a part of the culture will go a long way in avoiding many issues and keep you focused on the important stuff.&lt;/p&gt;

&lt;p&gt;What does your team use to resolve conflicts? Let us know down below. &lt;/p&gt;

&lt;p&gt;And as always, happy coding from your friends at &lt;a href="https://link.codesphere.com/EN"&gt;Codesphere&lt;/a&gt;, the bottleneck-free cloud provider. &lt;/p&gt;

&lt;p&gt;Written by Dan Parry&lt;/p&gt;

</description>
      <category>management</category>
      <category>teamwork</category>
      <category>productivity</category>
      <category>developer</category>
    </item>
    <item>
      <title>Flutter for JS devs - LLF #6</title>
      <author>Keff</author>
      <pubDate>Mon, 11 Oct 2021 13:39:19 +0000</pubDate>
      <link>https://dev.to/nombrekeff/flutter-for-js-devs-llf-6-dd1</link>
      <guid>https://dev.to/nombrekeff/flutter-for-js-devs-llf-6-dd1</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hey there&lt;/strong&gt; 👋&lt;/p&gt;

&lt;p&gt;I'm back with another entry to this series, so... Javascript right? We all love and hate it, yet have no choice but to use it if we want to create interactive websites (&lt;em&gt;kinda&lt;/em&gt;).  As a result, many developers know Javascript or have at least used it on some occasion. &lt;/p&gt;

&lt;p&gt;Consider this post as a comparison between some common aspects of both JS and Dart applications (like &lt;em&gt;async code, handling lists/arrays&lt;/em&gt;). &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#entrypoints"&gt;Entrypoints&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#logging"&gt;Logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functions"&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#boolean-checks"&gt;Boolean checks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#futurespromises"&gt;Futures/Promises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#asyncawait"&gt;Async/Await&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mapsobjects"&gt;Maps/Objects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#running-an-app"&gt;Running an app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#learning-more"&gt;Learning more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#entrypoints"&gt;
  &lt;/a&gt;
  Entrypoints
&lt;/h2&gt;

&lt;p&gt;The first step to creating an app is launching/starting it. In dart, an entry-point function is required for all applications, in contrast to Javascript where it's up to you to define such a function. Note that if you use a framework it might require you to define an entry-point of some sort. &lt;/p&gt;

&lt;p&gt;Let's see how Dart does it and then show some examples of how we do that in javascript and some frameworks.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;

&lt;p&gt;In dart, all applications are required to start with a &lt;code&gt;main()&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Your initial code would go here&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h4&gt;

&lt;p&gt;In flutter, we are also required to define a &lt;code&gt;main()&lt;/code&gt; function. But to start the app we must call the &lt;code&gt;runApp()&lt;/code&gt; function. This will bootstrap and start our app:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;runApp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;MyApp&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;

&lt;p&gt;Javascript is not as strict and doesn't force us to write a &lt;code&gt;main&lt;/code&gt; function or any kind of entry-point really. Some might start directly when the script loads, or maybe wait until the page is fully loaded. Others might only start when a button is clicked and so on.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When script loads:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startHere&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Your initial code would go here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;startHere&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// Called when script is loaded&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;When page loads:&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;startHere&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Your initial code would go here&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;load&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Called when the page fully loaded all the HTML and external resources&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h4&gt;

&lt;p&gt;Angular does not require us to define an entry-point function, but it requires us to create a &lt;code&gt;main&lt;/code&gt; file where we will bootstrap/start our application. That file would look something like this:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// imports...&lt;/span&gt;

&lt;span class="nx"&gt;platformBrowserDynamic&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bootstrapModule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;AppModule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Angular uses TypeScript but it's the same drill.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native
&lt;/h4&gt;

&lt;p&gt;React native somewhat forces you to create an entry-point in the form of a React Component.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;React&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;View&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-native&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HelloWorldApp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;View&lt;/span&gt;
      &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="na"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;justifyContent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;alignItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;}}&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Text&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/Text&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/View&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;HelloWorldApp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#logging"&gt;
  &lt;/a&gt;
  Logging
&lt;/h2&gt;

&lt;p&gt;Dart does not offer such a variety of logging possibilities as the Javascript console. We are limited to just a single method &lt;code&gt;print&lt;/code&gt;, without adding external packages (like &lt;a href="https://pub.dev/packages/logger"&gt;logger&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'"I will, I do, I can, I should could do, yeh"'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'I can only log a single string, but can easily interpolate variables like this: &lt;/span&gt;&lt;span class="si"&gt;$example&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  JavaScript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;"I will, I do, I can, I should could do, yeh"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;I can only log more than a single string, &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;`but can easily interpolate variables like this: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#functions"&gt;
  &lt;/a&gt;
  Functions
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Regular function&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;canFly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hasWings&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAChicken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;canRespawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;player&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isInmortal&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;canFly&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasWings&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAChicken&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// or specifying the type&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;canFly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasWings&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isAChicken&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Arrow function&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;canRespawn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Player&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;player&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isInmortal&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#boolean-checks"&gt;
  &lt;/a&gt;
  Boolean checks
&lt;/h2&gt;

&lt;p&gt;In Javascript &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, an empty string (&lt;code&gt;''&lt;/code&gt;) are all evaluated as &lt;code&gt;false&lt;/code&gt;. And &lt;code&gt;1&lt;/code&gt; and any other &lt;code&gt;non-null&lt;/code&gt; value is evaluated as &lt;code&gt;true&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GTgjDOVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc1mx46n278uzml200p1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GTgjDOVg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lc1mx46n278uzml200p1.png" alt="Just a meme image on javascript bool checks"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Dart only considers the boolean value &lt;code&gt;true&lt;/code&gt; as true. So let's have a close look at how to perform some common checks:&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;undefinedValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nullValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;emptyString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;undefinedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;nullValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;emptyString&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;''&lt;/code&gt; are all being treated as &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;nullValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;emptyString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;''&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nullValue&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;emptyString&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEmpty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;As you can see, in Dart we must implicitly check if it's a certain value. Nothing is treated as a boolean, except booleans themselves (makes sense).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We must use the &lt;code&gt;==&lt;/code&gt; equality operator to implicitly check for &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and other values&lt;/li&gt;
&lt;li&gt;For empty string we can use the built-in &lt;code&gt;isEmpty()&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#futurespromises"&gt;
  &lt;/a&gt;
  Futures/Promises
&lt;/h2&gt;

&lt;p&gt;Both Javascript and Dart support single-threaded execution. Javascript offers the Promise object to handle this, while in Dart we use &lt;a href="https://dart.dev/codelabs/async-await"&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; objects. These classes represent the eventual completion or failure of some operation.&lt;/p&gt;

&lt;p&gt;We commonly use &lt;a href="https://dart.dev/codelabs/async-await"&gt;&lt;code&gt;Futures&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;Promises&lt;/code&gt; objects when calling remote APIs via HTTP requests, as they take a long time to complete. Synchronously doing this operation would freeze the application until the operation either fails or completes.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://answeroflife.ai/give-it-to-me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://answeroflife.ai/give-it-to-me'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;  &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;catchError&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Did you know that you can create Web Apps with Flutter?&lt;/strong&gt;&lt;br&gt;&lt;br&gt;
It seems it's not 100% ready for big scale applications, though it does the job with some work on our part.&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h2&gt;
  &lt;a href="#asyncawait"&gt;
  &lt;/a&gt;
  Async/Await
&lt;/h2&gt;

&lt;p&gt;If you are familiar with Javascript async/await, Dart is almost exactly the same. We mark the function with the &lt;code&gt;async&lt;/code&gt; keyword, then we can use the &lt;code&gt;await&lt;/code&gt; keyword to wait for promises/futures to complete.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#javascript"&gt;
  &lt;/a&gt;
  Javascript
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://answeroflife.ai/give-it-to-me&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;answerOfLife&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#dart"&gt;
  &lt;/a&gt;
  Dart
&lt;/h3&gt;


&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'package:http/http.dart'&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'https://answeroflife.ai/give-it-to-me'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;jsonDecode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;body&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;await&lt;/span&gt; &lt;span class="n"&gt;answerOfLife&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;then&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#arrayslists"&gt;
  &lt;/a&gt;
  Arrays/Lists
&lt;/h2&gt;

&lt;p&gt;Dart handles arrays quite similarly to javascript, with some differences. Let's take a look at some of the most common list operations.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-arrays"&gt;
  &lt;/a&gt;
  Creating arrays
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Typed list&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Untyped list&lt;/span&gt;
&lt;span class="n"&gt;List&lt;/span&gt; &lt;span class="n"&gt;stepsAndBabyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Jonathan'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Joseph'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'Tommy'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="o"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;stepsAndBabyNames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jonathan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Joseph&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tommy&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#iterating-arrays"&gt;
  &lt;/a&gt;
  Iterating arrays
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using for-in loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Step: &lt;/span&gt;&lt;span class="si"&gt;$step&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Clasic for &lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;length&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Step: &lt;/span&gt;&lt;span class="si"&gt;${steps[i]}&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// forEach&lt;/span&gt;
&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'Step: &lt;/span&gt;&lt;span class="si"&gt;$step&lt;/span&gt;&lt;span class="s"&gt;'&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using for-in loop&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Step: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// Clasic for &lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Step: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// forEach&lt;/span&gt;
&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Step: $step`&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#map-items"&gt;
  &lt;/a&gt;
  Map items
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;In dart we need to call &lt;code&gt;toList&lt;/code&gt; to convert back to a List, as map returns a lazy Iterable (&lt;a href="https://api.dart.dev/stable/1.10.1/dart-core/List/map.html"&gt;docs&lt;/a&gt;))&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#filter-items"&gt;
  &lt;/a&gt;
  Filter items
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;where&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toList&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#get-a-part-of-the-list"&gt;
  &lt;/a&gt;
  Get a part of the list
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sublist&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#item-exists"&gt;
  &lt;/a&gt;
  Item exists
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;includes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-index-of-item"&gt;
  &lt;/a&gt;
  Find index of item
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;indexOf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#find-single-item"&gt;
  &lt;/a&gt;
  Find single item
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;firstWhere&lt;/span&gt;&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;step&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;step&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;toList&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#has-items"&gt;
  &lt;/a&gt;
  Has items
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEmpty&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mapsobjects"&gt;
  &lt;/a&gt;
  Maps/Objects
&lt;/h2&gt;

&lt;p&gt;Most languages offer some sort of data structure to create unstructured data, dart is not different and offers the Map type.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#creating-maps"&gt;
  &lt;/a&gt;
  Creating maps
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Samuel'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samuel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#serializingdeserializing-json"&gt;
  &lt;/a&gt;
  Serializing/Deserializing JSON
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Dart&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight dart"&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="s"&gt;'dart:convert'&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;dynamic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Samuel'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;'age'&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;encodedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;encode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="n"&gt;decodedMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;infoString&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Javascript&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Samuel&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;encodedString&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;decodedMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;infoString&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#running-an-app"&gt;
  &lt;/a&gt;
  Running an app
&lt;/h2&gt;

&lt;p&gt;Running apps differs from language to language, and from framework to framework. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#flutter"&gt;
  &lt;/a&gt;
  Flutter
&lt;/h3&gt;

&lt;p&gt;Let's first see how we do it in flutter:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Using the run utility in the IDE&lt;/li&gt;
&lt;li&gt;Executing &lt;code&gt;flutter run&lt;/code&gt; in the project root&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#react-native"&gt;
  &lt;/a&gt;
  React Native
&lt;/h3&gt;

&lt;p&gt;In react native we:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use npm script &lt;code&gt;npm run&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;or yarn &lt;code&gt;npm run&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#angular"&gt;
  &lt;/a&gt;
  Angular
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;ng serve&lt;/code&gt; in the project root&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;npm start&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;
  &lt;a href="#learning-more"&gt;
  &lt;/a&gt;
  Learning more
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/get-started/flutter-for/react-native-devs"&gt;Introduction to Dart for JavaScript Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flutter.dev/docs/get-started/codelab#step-1-create-the-starter-flutter-app"&gt;First flutter app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;As seen in the post, Javascript and Dart have quite a few things in common. But differ in some aspects, such as handling booleans or working with arrays. This post just scratches the surface so let me know if you would like a follow-up!&lt;/p&gt;

&lt;p&gt;If you found this post useful, please consider checking &lt;a href="https://dev.to/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm"&gt;my previous post&lt;/a&gt;. It's a similar format to this one but comparing the theming/styling aspects of Flutter against CSS.&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/nombrekeff" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WSaJs7tF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--hX7RfmcL--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/187971/a5359a24-b652-46be-8898-2c5df32aa6e0.png" alt="nombrekeff"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/nombrekeff/flutter-styling-explained-in-css-llf-5-51nm" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Flutter styling explained in CSS - LLF #5&lt;/h2&gt;
      &lt;h3&gt;Keff ・ Oct 1 ・ 7 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#dart&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#flutter&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#css&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#tutorial&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;



&lt;p&gt;And as always, thanks for reading. And remember to comment if you have any suggestions, doubts, or something you would like me to cover in these posts.&lt;/p&gt;

</description>
      <category>dart</category>
      <category>flutter</category>
      <category>tutorial</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Dynamic styling in Vue.js</title>
      <author>Edoardo Cordani</author>
      <pubDate>Mon, 11 Oct 2021 13:26:57 +0000</pubDate>
      <link>https://dev.to/ecordani/dynamic-styling-in-vue-js-46l</link>
      <guid>https://dev.to/ecordani/dynamic-styling-in-vue-js-46l</guid>
      <description>&lt;p&gt;When I started using Vue.js as a front-end framework I immediately enjoyed the easy way I can set up and manage my components. Using single file components let me focus on all aspects regarding the way I build them: I simply need to put 3 tags inside a .vue file and I can start shaping both the visual aspect and all the logics behind the component itself. Talking about styling, the first thing that official doc tells you is how to style a component: simply insert a style tag (usually at the end of the file) and you're done. But when you move on and start to build complex interfaces, you immediately need to perform styling that goes beyond the simple composition of CSS classes.&lt;br&gt;&lt;br&gt;
So, during my journey, I discovered several ways to perform dynamic styling, and this article aims to be a short reference for people that come up at first with this need.&lt;br&gt;&lt;br&gt;
In order to show you the different techniques, I'll use a super-simple button component that must use a specific background color value if a boolean prop is true (ok maybe is too simple, but so you'll grasp the concepts quickly).&lt;br&gt;&lt;br&gt;
Let's start with the component code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-button"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;isWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;style &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"scss"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.my-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and we call the component like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;my-button&lt;/span&gt; &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;"Attention!"&lt;/span&gt; &lt;span class="na"&gt;:is-warning=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#1-style-binding"&gt;
  &lt;/a&gt;
  #1 Style binding
&lt;/h3&gt;

&lt;p&gt;This is the simpler solution, just use Vue.js style binding and change the CSS background-color property&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
    &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"my-button"&lt;/span&gt;
    &lt;span class="na"&gt;:style=&lt;/span&gt;&lt;span class="s"&gt;"{'background-color': isWarning ? '#FC4': '#CCC'}"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-class-binding"&gt;
  &lt;/a&gt;
  #2 Class binding
&lt;/h3&gt;

&lt;p&gt;With class binding we append a specific class only if the prop &lt;code&gt;isWarning&lt;/code&gt; is truthy.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; 
    &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"['my-button', {'warning': isWarning}]"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;and below in the style tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt; &lt;span class="nt"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;"scss"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nc"&gt;.my-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;8px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="err"&gt;&amp;amp;.warning&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#FC4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-computed-style"&gt;
  &lt;/a&gt;
  #3 Computed style
&lt;/h3&gt;

&lt;p&gt;Ahh, this is the technique I like the most 😀 . We start defining a &lt;code&gt;classes&lt;/code&gt; computed value that returns a string of CSS class names based on the component property &lt;code&gt;isWarning&lt;/code&gt; value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;  &lt;span class="nx"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;classes&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isWarning&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-button warning&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;my-button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we use the class binding we used above, passing only the computed value:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;:class=&lt;/span&gt;&lt;span class="s"&gt;"classes"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {{ text }}
  &lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#4-styledcomponents"&gt;
  &lt;/a&gt;
  #4 Styled-components
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://styled-components.com/"&gt;Styled-components&lt;/a&gt;  is a famous CSS-in-JS library used especially by React developers...and you can use it with Vue.js too 😉. You can find the package  &lt;a href="https://github.com/styled-components/vue-styled-components"&gt;here&lt;/a&gt;, please note that it's compatible only with Vue 2.x.&lt;br&gt;&lt;br&gt;
Install the package (using yarn as the package manager):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight console"&gt;&lt;code&gt;&lt;span class="go"&gt;yarn add vue-styled-components
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Due to the simplicity of the component, we define it inside the parent component in the &lt;code&gt;script&lt;/code&gt; tag. First we must import the library:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;vue-styled-components&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;then we define the component (a styled button) and its property &lt;code&gt;isWarning&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;btnProps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;isWarning&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MyButton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;styled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;btnProps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;`
  padding: 10px 20px;
  border-radius: 8px;
  border: 0;
  background-color: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;props&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;props&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isWarning&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#FC4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#CCC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;;
`&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note the &lt;code&gt;background-color: ${props =&amp;gt; props.isWarning ? '#FC4' : '#CCC'};&lt;/code&gt;, here we are telling the library to change the CSS property based on then prop &lt;code&gt;isWarning&lt;/code&gt; value.&lt;br&gt;&lt;br&gt;
Last step is to register the newly created component and use it inside the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;....&lt;/span&gt;
  &lt;span class="nx"&gt;components&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;MyButton&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;my-button&lt;/span&gt; &lt;span class="na"&gt;:is-warning=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  Attention!
&lt;span class="nt"&gt;&amp;lt;/my-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Besides of styled-components library, there are also other CSS-in-JS libraries usable for Vue.js, for example &lt;a href="https://emotion.sh/docs/introduction"&gt;Emotion&lt;/a&gt; through &lt;a href="https://github.com/egoist/vue-emotion"&gt;vue-emotion&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;That's all, hope you find this article useful. If you know other techniques feel free to write me and I'll update the article!&lt;br&gt;&lt;br&gt;
Thanks for reading!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>css</category>
      <category>vue</category>
    </item>
  </channel>
</rss>
