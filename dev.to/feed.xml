<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Who's participating in Hacktoberfest 2021?</title>
      <author>dev.to staff</author>
      <pubDate>Thu, 30 Sep 2021 20:55:25 +0000</pubDate>
      <link>https://dev.to/devteam/who-s-participating-in-hacktoberfest-2021-4pgf</link>
      <guid>https://dev.to/devteam/who-s-participating-in-hacktoberfest-2021-4pgf</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zak5Tj59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ZhpKB8nfZQzANvvTMH/giphy.gif%3Fcid%3Decf05e47na68gkj100jhe66wklks6uxkll1trzdre2e55owi%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zak5Tj59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/ZhpKB8nfZQzANvvTMH/giphy.gif%3Fcid%3Decf05e47na68gkj100jhe66wklks6uxkll1trzdre2e55owi%26rid%3Dgiphy.gif%26ct%3Dg" alt="Ghost Saying Hi"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://hacktoberfest.digitalocean.com/"&gt;Hacktoberfest 2021&lt;/a&gt; starts on Friday, October 1!&lt;/strong&gt; üéÉ &lt;/p&gt;

&lt;blockquote&gt;
&lt;h3&gt;
  &lt;a href="#in-the-comments-below-tell-us-who-you-are-whether-or-not-this-is-your-first-hacktoberfest-and-why-youre-taking-part-in-2021"&gt;
  &lt;/a&gt;
  &lt;strong&gt;In the comments below, tell us who you are, whether or not this is your first Hacktoberfest, and why you're taking part in 2021&lt;/strong&gt; üéâ
&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you're an open source project maintainer looking for contributors OR if you're looking for projects to contribute to for Hacktoberfest, don't miss this thread on DEV:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/devteam" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__org__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CTihtlIw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--nJ87SGF6--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/1/0213bbaa-d5a1-4d25-9e7a-10c30b455af0.png" alt="The DEV Team"&gt;
      &lt;div class="ltag__link__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zg3sT9Js--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--vHKcEiTe--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/3/13d3b32a-d381-4549-b95e-ec665768ce8f.png" alt=""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/devteam/hacktoberfest-2021-who-s-looking-for-contributors-32k" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;Hacktoberfest 2021 ‚Äî Who's Looking for Contributors? &lt;/h2&gt;
      &lt;h3&gt;dev.to staff for The DEV Team „Éª Sep 30 „Éª 1 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#hacktoberfest&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#opensource&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#discuss&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#contributorswanted&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;
 




&lt;p&gt;&lt;strong&gt;Whether you already have a plan for the projects you'll contribute to or not, this is a great place to meet the other participants. Let's make this a supportive community experience!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>discuss</category>
    </item>
    <item>
      <title>What is Playfair Cipher Encryption Algorithm</title>
      <author>Karan-Munjani</author>
      <pubDate>Thu, 30 Sep 2021 20:37:36 +0000</pubDate>
      <link>https://dev.to/karanmunjani/what-is-playfair-cipher-encryption-algorithm-4npk</link>
      <guid>https://dev.to/karanmunjani/what-is-playfair-cipher-encryption-algorithm-4npk</guid>
      <description>&lt;p&gt;This is going to be two or three part series where I'm going to explain the theory behind the Playfair cipher and how we can program it using most probably everyone's favourite language ü•Åü•Åü•Å (&lt;em&gt;"DRUM ROLLS"&lt;/em&gt;)  &lt;strong&gt;Python&lt;/strong&gt;, Yay!!&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Playfair cipher or Playfair square or Wheatstone‚ÄìPlayfair cipher is a manual symmetric encryption technique and was the first literal digram substitution cipher. The scheme was invented in 1854 by Charles Wheatstone, but bears the name of Lord Playfair for promoting its use. - Source: Wikipedia&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;So what we can grasp from above is that, this algorithm was developed by Charles Wheatstone but bears the name as Lord Playfair promoted it. Also we can depict that it was first practical digraph substitution cipher.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Digraph Cipher&lt;/strong&gt; : It simply means that we encrypt the plaintext to ciphertext with two characters at a time. (Will get more idea as I explain you through.)  &lt;/p&gt;
&lt;/blockquote&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#the-playfair-cipher-algorithm"&gt;
  &lt;/a&gt;
  The Playfair Cipher Algorithm
&lt;/h2&gt;

&lt;p&gt;The Algorithm mainly consist of three steps: &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Convert plaintext into digraphs (i.e., into pair of two letters)&lt;/li&gt;
&lt;li&gt;Generate a Cipher Key Matrix&lt;/li&gt;
&lt;li&gt;Encrypt plaintext using Cipher Key Matrix and get ciphertext.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For the rest of our discussion we will be using below mentioned Key and Plaintext:&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;Key&lt;/strong&gt; = DevToDiesel&lt;br&gt;
&lt;strong&gt;Plaintext&lt;/strong&gt; = Awesome Dev Community&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let's move forward!!&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yx34-l4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf66y8toak3tmukyvjtp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yx34-l4T--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mf66y8toak3tmukyvjtp.png" alt="Full Mat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step1-convert-plaintext-into-digraphs-ie-into-pair-of-two-letters"&gt;
  &lt;/a&gt;
  Step:1 Convert plaintext into digraphs (i.e., into pair of two letters)
&lt;/h2&gt;

&lt;p&gt;So our Plaintext &lt;code&gt;Awesome Dev Community&lt;/code&gt; will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[AW, ES, OM, ED, EV, CO, MX, MU, NI, TY] 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now You might be wondering why &lt;code&gt;MX&lt;/code&gt; instead of &lt;code&gt;MM&lt;/code&gt; and where did the whitespaces go! Because there are three rules to be followed here and those are:&lt;/p&gt;

&lt;p&gt;1.While splitting text into pairs, if the letters are same in a pair then insert filler x. &lt;/p&gt;

&lt;p&gt;2.At the end if only one letter is left it has no pair we can insert our filler x&lt;/p&gt;

&lt;p&gt;3.Remove Whitespaces from the string as well as special characters apart from 25 alphabets.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step2-generate-a-cipher-key-matrix"&gt;
  &lt;/a&gt;
  Step:2 Generate a Cipher Key Matrix
&lt;/h2&gt;

&lt;p&gt;Cipher Key Matrix is a 5√ó5 grid of alphabets that acts as the key for encrypting the plaintext.&lt;/p&gt;

&lt;p&gt;Each of the 25 alphabets must be unique and one letter of the alphabet (usually J) is omitted from the table (as the table can hold only 25 alphabets). &lt;/p&gt;

&lt;p&gt;If the plaintext contains J, then it is replaced by I.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;As you might expected! There are also rules to generate this key matrix. You're getting brainy now!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rules"&gt;
  &lt;/a&gt;
  Rules:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. If our key has repeating letters omit them.&lt;/strong&gt;&lt;br&gt;
So our Key = "DevToDiesel" Will be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;D E V T O I E S L
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Fill this unique characters key in our 5X5 Matrix&lt;/strong&gt;&lt;br&gt;
So it might look something like this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aGHD8Zyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgrif2fq5zro15h7ck9x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aGHD8Zyq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kgrif2fq5zro15h7ck9x.png" alt="Half Mat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. Fill the remaining places with unused alphabets without J&lt;/strong&gt; As it should only contain 25 letters, only omitting J would result in matrix like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGW0ngW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtui4hbfoieyswnshv0d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uRGW0ngW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rtui4hbfoieyswnshv0d.png" alt="Full Mat"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-3-encrypt-plaintext-using-cipher-key-matrix-and-get-ciphertext"&gt;
  &lt;/a&gt;
  Step 3: Encrypt plaintext using Cipher Key Matrix and get ciphertext.
&lt;/h2&gt;

&lt;p&gt;Now we will encrypt our diagraph plaintext that is&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[AW, ES, OM, ED, EV, CO, MX, MU, NI, TY]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;into Cipher text with the help of cipher key matrix, and following below listed rules.&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rule-1"&gt;
  &lt;/a&gt;
  Rule: 1
&lt;/h3&gt;

&lt;p&gt;If both letters are not in same column and not in same row and making a rectangle shape then take letters on the horizontal opposite corner of the rectangle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;
Our first pair from plaintext is "AW", so A will be enciphered to S and W will enciphered to Y.&lt;br&gt;
i.e., &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A -&amp;gt; S&lt;/li&gt;
&lt;li&gt;W -&amp;gt; Y
resulting in,&lt;strong&gt;AW -&amp;gt; SY&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zcccPbFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev1lp2r8v7q5dqmdbnfp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zcccPbFn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ev1lp2r8v7q5dqmdbnfp.png" alt="Rule 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Similarly, pair OM will be enciphered to DR.&lt;br&gt;
i.e., &lt;strong&gt;OM -&amp;gt; DR&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eCLJNxQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1lbkr77y02gugevlye.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eCLJNxQP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o1lbkr77y02gugevlye.png" alt="Rule 1.2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rule-2"&gt;
  &lt;/a&gt;
  Rule: 2
&lt;/h3&gt;

&lt;p&gt;If both the letters are in the same column: Take the letter below each one (going back to the top if at the bottom).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br&gt;
Our Second pair is "ES", so according to above rule it will be enciphered to its below character in same column.&lt;br&gt;
i.e., &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;E -&amp;gt; S&lt;/li&gt;
&lt;li&gt;S -&amp;gt; F
thus, &lt;strong&gt;ES -&amp;gt; SF&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QvNKqiDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29f3of9b4b48zkir46ym.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QvNKqiDw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/29f3of9b4b48zkir46ym.png" alt="Rule 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#rule-3"&gt;
  &lt;/a&gt;
  Rule: 3
&lt;/h3&gt;

&lt;p&gt;If both the letters are in the same row: Take the letter to the right of each one (going back to the leftmost if at the rightmost position)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br&gt;
The pair DE is in same row, so just choose the right next to each character from cipher key matrix.&lt;br&gt;
i.e., &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;D -&amp;gt; E&lt;/li&gt;
&lt;li&gt;E -&amp;gt; V
so, &lt;strong&gt;DE -&amp;gt; EV&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wPQHHjEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3j5t5cg7esa6m9dbt1f.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wPQHHjEB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3j5t5cg7esa6m9dbt1f.png" alt="Rule 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;¬†&lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;

&lt;p&gt;¬†&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Same way after performing above rules for whole the list of diagraph plain text, our cipher text will be generated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Plaintext&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[AW, ES, OM, ED, EV, CO, MX, MU, NI, TY]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Ciphertext&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[SY, SF, DR, VE, VT, KD, PU, UD, MS, AT]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Plaintext = &lt;strong&gt;AWESOMEDEVCOMXMUNITY&lt;/strong&gt;&lt;br&gt;
Ciphertext = &lt;strong&gt;SYSFDRVEVTKDPUUDMSAT&lt;/strong&gt;&lt;/p&gt;


&lt;center&gt; * * * * * * *&lt;/center&gt;
&lt;h3&gt;
  &lt;a href="#in-the-next-part-of-series-ill-be-showing-how-to-code-playfair-cipher-using-python-so-stay-tuned"&gt;
  &lt;/a&gt;
  In the next part of series I'll be showing how to code playfair cipher using python, so stay tuned.
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Don't forget to leave your thoughts and doubts in discussion section below, also drop a heart ‚ù§ if you gained some knowledge!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading out!üòÄüòÄ&lt;/p&gt;

</description>
      <category>security</category>
      <category>python</category>
      <category>programming</category>
    </item>
    <item>
      <title>Best VS Code features &amp; Learning Material UI ‚úèÔ∏è</title>
      <author>Tuomo Kankaanp√§√§</author>
      <pubDate>Thu, 30 Sep 2021 20:37:04 +0000</pubDate>
      <link>https://dev.to/tumee/best-vs-code-features-learning-material-ui-2o4</link>
      <guid>https://dev.to/tumee/best-vs-code-features-learning-material-ui-2o4</guid>
      <description>&lt;p&gt;&lt;em&gt;This article was originally published on &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;my newsletter&lt;/a&gt; last week. I publish previous week's newsletter here on the blog. If you want to read these as soon as they are published, &lt;a href="https://www.tuomokankaanpaa.com/newsletter"&gt;sign up&lt;/a&gt; for the newsletter!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ahoy,&lt;/p&gt;

&lt;p&gt;I use Visual Studio Code as my main code editor. To be honest it is pretty much the only editor I use. There is bunch of great features in VS Code that I use daily. Features that honestly make my life a lot easier and productive.&lt;/p&gt;

&lt;p&gt;So I thought that it might be helpful to share those features in case you are not yet using them or leveraging them fully in your own workflow. You can find the features from the latest video on my &lt;a href="https://www.youtube.com/tuomokankaanpaa"&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/ZKq5OIhKpzE"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Or if you just want to know the list, here it is&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Timeline&lt;/li&gt;
&lt;li&gt;Integrated Terminal&lt;/li&gt;
&lt;li&gt;Multiline editing&lt;/li&gt;
&lt;li&gt;Command palette&lt;/li&gt;
&lt;li&gt;Extensions&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned-this-week"&gt;
  &lt;/a&gt;
  What I learned this week?
&lt;/h2&gt;

&lt;p&gt;I worked on a Next.js project where I decided to use &lt;a href="https://mui.com/"&gt;Material UI&lt;/a&gt; as a component library. At first it was kind of hard to know and find what components I should use but after a while, I got actually something good looking on the screen.&lt;/p&gt;

&lt;p&gt;The project is actually a simple Next.js blog application. I plan on shooting a video about it, teaching how to code one by yourself. I'm not yet sure when I'll be making that video but it might be in the near future so &lt;a href="https://www.youtube.com/tuomokankaanpaa?sub_confirmation=1"&gt;stay tuned for that&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I have used Material UI for the past couple of weeks on couple of projects in addition to the Next.js blog application. I am quite excited about Material UI, now that I have a bit better understanding on how the whole thing works and what kind of components should I use for certain situations and what kind of components they actually have!&lt;/p&gt;

&lt;p&gt;I have some time now thought that I need to learn something that I can use to make my apps and UIs look even half decent (I am terrible at designing and styling in general). So I was thinking of learning TailwindCSS next but now that I have worked with Material UI a bit, I'm thinking of giving Material UI a chance and learning that first. Of course they are not / don't do "the same thing" but Material UI serves the need that I have and there is only so much one can be learning simultaneously.&lt;/p&gt;

&lt;p&gt;Have you used Material UI or TailwindCSS? If you have, let me know what you think about them!&lt;/p&gt;

&lt;p&gt;That's it for this week!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Tuomo&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Contribute to the Awesome Web Monetization on Hacktoberfest ! ü•≥üåà</title>
      <author>Thomas Bnt</author>
      <pubDate>Thu, 30 Sep 2021 20:18:01 +0000</pubDate>
      <link>https://dev.to/thomasbnt/contribute-to-the-awesome-web-monetization-on-hacktoberfest-3dej</link>
      <guid>https://dev.to/thomasbnt/contribute-to-the-awesome-web-monetization-on-hacktoberfest-3dej</guid>
      <description>&lt;p&gt;&lt;strong&gt;Looking for new open source projects&lt;/strong&gt; that can be posted &lt;a href="https://github.com/thomasbnt/awesome-web-monetization"&gt;on this repository&lt;/a&gt;. &lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/thomasbnt"&gt;
        thomasbnt
      &lt;/a&gt; / &lt;a href="https://github.com/thomasbnt/awesome-web-monetization"&gt;
        awesome-web-monetization
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      üï∂Ô∏è Stuffs about Web Monetization. Packages, articles, documentation links and others tools.
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;Feel free to have a look, it already contains a lot of cool projects and a little documentation!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#but-what-is-the-web-monetization-"&gt;
  &lt;/a&gt;
  But what is the Web Monetization ?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Web Monetization&lt;/strong&gt; is a web service that allows you to send money directly in your browser. This is a &lt;strong&gt;JavaScript&lt;/strong&gt; browser API that allows the creation of a &lt;strong&gt;payment stream&lt;/strong&gt; from the user agent to the website.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-the-project-"&gt;
  &lt;/a&gt;
  Contribute to the project !
&lt;/h2&gt;

&lt;p&gt;So if you are a developer &lt;em&gt;(or not)&lt;/em&gt; of a project about &lt;strong&gt;Web Monetization&lt;/strong&gt;, contribute to the list.&lt;/p&gt;

&lt;p&gt;Here's to your PR and/or comments!&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>webmonetization</category>
      <category>contributorswanted</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Streaming Analytics 
Using FlinkSQL Webinar</title>
      <author>Timothy Spann</author>
      <pubDate>Thu, 30 Sep 2021 20:13:30 +0000</pubDate>
      <link>https://dev.to/tspannhw/streaming-analytics-using-flinksql-webinar-3fa9</link>
      <guid>https://dev.to/tspannhw/streaming-analytics-using-flinksql-webinar-3fa9</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UZIQo3i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwdw49jdyv7sg1nc7d6k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UZIQo3i---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hwdw49jdyv7sg1nc7d6k.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VIu0Y2QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8s9uwzp5qchhi2e7qhc.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VIu0Y2QF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8s9uwzp5qchhi2e7qhc.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted to share some resources from today's talk.&lt;/p&gt;

&lt;p&gt;Documentation on Using Flink SQL on StreamNative Cloud&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.streamnative.io/cloud/stable/compute/flink-sql-cookbook"&gt;https://docs.streamnative.io/cloud/stable/compute/flink-sql-cookbook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My source code for the EdgeAI IoT application&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tspannhw/StreamingAnalyticsUsingFlinkSQL"&gt;https://github.com/tspannhw/StreamingAnalyticsUsingFlinkSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All the source code from the microservices applications&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/streamnative/streamnative-academy/tree/master/microservices-webinars"&gt;https://github.com/streamnative/streamnative-academy/tree/master/microservices-webinars&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those free E-books we mentioned:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://streamnative.io/en/download/manning-ebook-apache-pulsar-in-action/"&gt;https://streamnative.io/en/download/manning-ebook-apache-pulsar-in-action/&lt;/a&gt;
&lt;a href="https://streamnative.io/en/download/oreilly-ebook-mastering-apache-pulsar/"&gt;https://streamnative.io/en/download/oreilly-ebook-mastering-apache-pulsar/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Upcoming Events:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zCyppriC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lm2e3nvrmhbs0cqkc1g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zCyppriC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9lm2e3nvrmhbs0cqkc1g.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pulsar-summit.org/"&gt;https://pulsar-summit.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5wAxgLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug7amm82avf0k4u4hjp2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z5wAxgLu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ug7amm82avf0k4u4hjp2.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.starburst.io/info/trinosummit/#agenda"&gt;https://www.starburst.io/info/trinosummit/#agenda&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just one last query to show you:&lt;/p&gt;

&lt;p&gt;select top1,&lt;br&gt;
        avg(CAST (cputempf as double)) as avgcputempf, avg( CAST(gputempf as double)) as avggpttempf&lt;br&gt;
from jetsoniot2 /*+ OPTIONS('scan.startup.mode'='earliest') */&lt;br&gt;
group by top1&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmiuzxg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pjhslfw36y1d6su3wy9.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Gmiuzxg2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4pjhslfw36y1d6su3wy9.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ybLpAs_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv3xjcegpse9urv7wn8x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ybLpAs_a--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv3xjcegpse9urv7wn8x.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cH4r31I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w2a49f6jp7t7ida1di4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cH4r31I3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7w2a49f6jp7t7ida1di4.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Connect with Us!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://streamnative.io/"&gt;https://streamnative.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/addisonj"&gt;https://github.com/addisonj&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/addisonjh"&gt;https://twitter.com/addisonjh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/paasDev"&gt;https://twitter.com/paasDev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4b17eSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i5bhjso9uh2mbyb2qfm.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4b17eSFG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8i5bhjso9uh2mbyb2qfm.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Building a type-safe dictionary in TypeScript</title>
      <author>Matt Angelosanto</author>
      <pubDate>Thu, 30 Sep 2021 18:58:13 +0000</pubDate>
      <link>https://dev.to/logrocket/building-a-type-safe-dictionary-in-typescript-1oli</link>
      <guid>https://dev.to/logrocket/building-a-type-safe-dictionary-in-typescript-1oli</guid>
      <description>&lt;p&gt;&lt;strong&gt;Written by &lt;a href="https://blog.logrocket.com/author/gapurkassym/"&gt;Gapur Kassym&lt;/a&gt;&lt;/strong&gt; ‚úèÔ∏è&lt;/p&gt;

&lt;p&gt;A dictionary is a common data structure in a programming language. As JavaScript developers, it‚Äôs important to work with type-safe dictionaries because there will be conflicts or unexpected issues if we store different types of data within the same dictionary.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll cover how to build a type-safe dictionary using TypeScript.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-a-typesafe-dictionary"&gt;
  &lt;/a&gt;
  What is a type-safe dictionary?
&lt;/h2&gt;

&lt;p&gt;First of all, we need to know what a dictionary is. In a programming language, a dictionary is a typical data structure that stores data in key-value pairs. JavaScript, however, does not offer a &lt;code&gt;Dictionary&lt;/code&gt; type. Thankfully, we can create a type-safe dictionary in a few simple ways.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-raw-object-endraw-types-in-javascript"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;Object&lt;/code&gt; types in JavaScript
&lt;/h2&gt;

&lt;p&gt;There are two primary ways to create a dictionary in JavaScript: using the &lt;code&gt;Object&lt;/code&gt; type and using key-value pairs. The most popular implementation in JavaScript is to create one with the &lt;code&gt;Object&lt;/code&gt; type. Let‚Äôs create a dictionary using the following code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using the built-in Object&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Using the Object literal notation&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can create a dictionary with the initial data as key-value pairs:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;country&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kazakhstan&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We created the &lt;code&gt;dictionaryViaLiteral&lt;/code&gt; dictionary with the key and value as string types.&lt;/p&gt;

&lt;p&gt;If you want to change or add the value to the dictionary, you can set the new value by calling on the dictionary key, like so:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using bracket&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;New Name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Using directly by property name via dot&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can access the value from the dictionary by directly calling the property name or indexer:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using bracket/indexer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="c1"&gt;// Using directly by property name via dot&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaLiteral&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#using-raw-map-endraw-in-javascript"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;Map&lt;/code&gt; in JavaScript
&lt;/h2&gt;

&lt;p&gt;A &lt;code&gt;[Map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map)&lt;/code&gt; is a collection of key-value pairs, just like an object. The main difference is that &lt;code&gt;Map&lt;/code&gt; allows you to use keys and values of any type. The &lt;code&gt;Map&lt;/code&gt; provides amazing instance methods to manipulate with a dictionary. If you are interested, you can read more &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#instance_methods"&gt;here&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Using Map&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="c1"&gt;// Add value using string key&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;string1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Add value using number key&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     

&lt;span class="c1"&gt;// Add value using boolean key&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;boolean1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;Map&lt;/code&gt; stores value by any type of key, and thus, they return the two different values:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Return string1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;string1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Return number1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;number1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In order to update values in the &lt;code&gt;Map&lt;/code&gt; dictionary, we should call set method by key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Update the value&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryViaMap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;updatedString1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#dictionary-type-errors-in-typescript"&gt;
  &lt;/a&gt;
  Dictionary type errors in TypeScript
&lt;/h2&gt;

&lt;p&gt;When we use the dictionary in TypeScript after previously using it in JavaScript, we‚Äôll run into errors because TypeScript needs to know the data type of an object before it can be accessed.&lt;/p&gt;

&lt;p&gt;This means we will not have problems with the following code in JavaScript, but we will have problems with it in TypeScript. Let‚Äôs take a look.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Property 'firstName' does not exist on type '{}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here, &lt;code&gt;dictionary.lastName&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt; in JavaScript, but in TypeScript, it will throw an error.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="c1"&gt;// Return the firstName Gapur&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// Property 'lastName' does not exist on type '{ firstName: string; }'&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Sure, we can use type &lt;code&gt;any&lt;/code&gt; in our code, but why use TypeScript without type checking?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// It works&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// It works&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-a-typesafe-dictionary-in-typescript"&gt;
  &lt;/a&gt;
  Building a type-safe dictionary in TypeScript
&lt;/h2&gt;

&lt;p&gt;There are three ways to avoid type issues in TypeScript.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-using-indexed-object-notation"&gt;
  &lt;/a&gt;
  1. Using indexed object notation
&lt;/h3&gt;

&lt;p&gt;We can check the type of data by using &lt;a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures"&gt;indexed object notation&lt;/a&gt;. Let‚Äôs create the dictionary with &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; as string types:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// It works very well&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// Type 'boolean' is not assignable to type 'string'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can call &lt;code&gt;key&lt;/code&gt; name whatever we want. For this example, I would like to name it &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Also, we can't leave out the key name or use union types, according to &lt;a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#index-signatures"&gt;the syntax rule&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 'string' only refers to a type, but is being used as a value here.&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryWithoutKeyName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// An index signature parameter type cannot be a literal type or generic type. Consider using a mapped object type instead&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryWithUnionType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's complicate our example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;// Create user with firstName and lastName&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// We can't add location property because User type doens't exist in the location&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// Type '{ firstName: string; lastName: string; location: string; }' is not assignable to type 'User'.&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If we want to omit a property, we can use &lt;code&gt;[Partial](https://www.typescriptlang.org/docs/handbook/utility-types.html#partialtype)&lt;/code&gt; utils for that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;// Property 'lastName' is missing in type '{ firstName: string; }' but required in type 'User'.&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionaryWithPartial&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="nx"&gt;Partial&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;User&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="c1"&gt;// Works very well&lt;/span&gt;
&lt;span class="nx"&gt;dictionaryWithPartial&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#2-using-the-raw-recordltkeys-typegt-endraw-utility"&gt;
  &lt;/a&gt;
  2. Using the &lt;code&gt;Record&amp;lt;Keys, Type&amp;gt;&lt;/code&gt; utility
&lt;/h3&gt;

&lt;p&gt;The &lt;a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeystype"&gt;Record&lt;/a&gt; is a TypeScript utility for creating key-value objects. It is a great choice if you want to create a key type as &lt;code&gt;unions&lt;/code&gt; or &lt;code&gt;enums&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;firstName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Gapur&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;lastName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let‚Äôs use a &lt;code&gt;union&lt;/code&gt; type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;UserFields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;firstName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;lastName&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;dictionaryUnion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Record&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;UserFields&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Jones&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Works very well&lt;/span&gt;

&lt;span class="nx"&gt;dictionaryUnion&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;firstName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aidana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;lastName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Kassym&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;location&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;London&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="c1"&gt;// Type is not assignable to type 'Record&amp;lt;UserFields, string&amp;gt;'&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#3-using-raw-map-endraw-in-typescript"&gt;
  &lt;/a&gt;
  3. Using &lt;code&gt;Map&lt;/code&gt; in TypeScript
&lt;/h3&gt;

&lt;p&gt;We discussed using &lt;code&gt;Map&lt;/code&gt; for creating type-safe dictionaries in JavaScript. Let‚Äôs build a simple dictionary with the key as a string and value as a number in TypeScript:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// No Error&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HTML&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Works&lt;/span&gt;
&lt;span class="c1"&gt;// Argument of type 'string' is not assignable to parameter of type 'number'&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;4&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also use the key as the union type and the value as the object type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;JobInfo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workExperience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;JobPosition&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Frontend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Backend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;dictionary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;JobPosition&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JobInfo&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Frontend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;JavaScript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workExperience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;dictionary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Backend&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Python&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;workExperience&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;How to best build a type-safe dictionary depends, as usual, on your use-case. If you want to build a simple dictionary, you can use the &lt;code&gt;indexed object&lt;/code&gt; notation. If you work with the unions, enums, or more complex data, employing the &lt;code&gt;Record&amp;lt;Keys, Type&amp;gt;&lt;/code&gt; util is best.&lt;/p&gt;

&lt;p&gt;In general, using &lt;code&gt;Map&lt;/code&gt; is a great practical way to solve type-safe issues with various types of data.&lt;/p&gt;

&lt;p&gt;Thanks for reading. I hope you found this piece useful. Happy coding!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#logrocket-full-visibility-into-your-web-apps"&gt;
  &lt;/a&gt;
  &lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt;: Full visibility into your web apps
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8FGBNR-I--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.logrocket.com/wp-content/uploads/2017/03/1d0cd-1s_rmyo6nbrasp-xtvbaxfg.png" alt="LogRocket Dashboard Free Trial Banner"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;LogRocket&lt;/a&gt; is a frontend application monitoring solution that lets you replay problems as if they happened in your own browser. Instead of guessing why errors happen, or asking users for screenshots and log dumps, LogRocket lets you replay the session to quickly understand what went wrong. It works perfectly with any app, regardless of framework, and has plugins to log additional context from Redux, Vuex, and &lt;a class="mentioned-user" href="https://dev.to/ngrx"&gt;@ngrx&lt;/a&gt;
/store.&lt;/p&gt;

&lt;p&gt;In addition to logging Redux actions and state, LogRocket records console logs, JavaScript errors, stacktraces, network requests/responses with headers + bodies, browser metadata, and custom logs. It also instruments the DOM to record the HTML and CSS on the page, recreating pixel-perfect videos of even the most complex single-page apps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://logrocket.com/signup/"&gt;Try it for free&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Creating a boilerplate Umbraco 9 site using project templates - part 1</title>
      <author>Jesper Mayntzhusen</author>
      <pubDate>Thu, 30 Sep 2021 18:46:19 +0000</pubDate>
      <link>https://dev.to/jemayn/creating-a-boilerplate-umbraco-9-site-using-project-templates-part-1-174k</link>
      <guid>https://dev.to/jemayn/creating-a-boilerplate-umbraco-9-site-using-project-templates-part-1-174k</guid>
      <description>&lt;p&gt;With Umbraco 9 freshly releases and running on .NET 5 lots of people need to change the way they work. One of those changes is probably to replace your current boilerplate solutions with a fresh one.&lt;/p&gt;

&lt;p&gt;This blogpost will show you how to leverage the built in dotnet templates to do that in a very nice and easy way - let's get started!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-a-basic-template-based-on-an-umbraco-site"&gt;
  &lt;/a&gt;
  Setting up a basic template based on an Umbraco site
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#set-up-the-site"&gt;
  &lt;/a&gt;
  Set up the site
&lt;/h3&gt;

&lt;p&gt;Before we turn it into a template - is to create the basic site you want to reuse. For the purpose of this tutorial I will use the wonderful demo site made by Dennis Adolfi as a starting point: &lt;a href="https://github.com/Adolfi/UmbracoNineDemoSite.git"&gt;https://github.com/Adolfi/UmbracoNineDemoSite.git&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#create-the-template-files"&gt;
  &lt;/a&gt;
  Create the template files
&lt;/h3&gt;

&lt;p&gt;In the root of the repository create a folder called &lt;code&gt;.template.json&lt;/code&gt;. Inside it create a &lt;code&gt;template.json&lt;/code&gt; file, with the following basic content:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;"$schema"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"http://json.schemastore.org/template"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"author"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Jesper Mayntzhusen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"classifications"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Umbraco"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"WebApp"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s"&gt;"identity"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Testing.Boilerplate"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"Testing boilerplate solution"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"shortName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"test-bp"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s"&gt;"tags"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"project"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;"language"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"C#"&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s"&gt;"sourceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;"UmbracoNineDemoSite"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uDfBGbUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tpjvkivqlxq2omgzpvz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uDfBGbUh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5tpjvkivqlxq2omgzpvz.png" alt="image"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-out-the-basic-template"&gt;
  &lt;/a&gt;
  Testing out the basic template
&lt;/h2&gt;

&lt;p&gt;At this point we have what we need to pack the site up into a dotnet template - of course we will do lots more later. But first let's check that it works!&lt;/p&gt;

&lt;p&gt;First of all, let's run a &lt;a href="https://github.com/sayedihashimi/template-sample#how-to-test-template-changes-locally"&gt;super helpful PowerShell script&lt;/a&gt; created by Microsoft Program Manager Sayed Ibrahim Hashimi:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Reset&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Templates&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;cmdletbinding&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
    &lt;span class="nx"&gt;param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="nx"&gt;$templateEngineUserDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;Path&lt;/span&gt; &lt;span class="nx"&gt;$env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;USERPROFILE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ChildPath&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;templateengine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;resetting dotnet new templates. folder: "{0}"&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt; &lt;span class="nx"&gt;$templateEngineUserDir&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Write&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;host&lt;/span&gt;
        &lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;childitem&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt; &lt;span class="nx"&gt;$templateEngineUserDir&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;directory&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;Select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;ExpandProperty&lt;/span&gt; &lt;span class="nx"&gt;FullName&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;recurse&lt;/span&gt;
        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;dotnet&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;reinit&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this in a PowerShell terminal you can then run the function later on to clean up - more on that later.&lt;/p&gt;

&lt;p&gt;In the terminal navigate to a folder you want to install your new site based on the template.&lt;/p&gt;

&lt;p&gt;Install your new template with a path to your template repository - for me it in a sibling folder:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new --install ..\BoilerPlate\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You should see something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ygE6gmTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wev1pvuuqwwm1e75bjsv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ygE6gmTs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wev1pvuuqwwm1e75bjsv.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note the shorthand for creating the new template is &lt;code&gt;test-bp&lt;/code&gt; - which is what I set in the &lt;code&gt;template.json&lt;/code&gt; file in the beginning. &lt;/p&gt;

&lt;p&gt;Now that the template is installed we can use it to create our test site:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new test-bp -o MyTestSite
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;-o specifies an output folder, and if no name is specified it will use the foldername so don't have to set -n as well&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you look at the new project it created you will see it is a copy of the one we cloned from Github - except it renamed all instances of &lt;code&gt;UmbracoNineDemoSite&lt;/code&gt; to &lt;code&gt;MyTestSite&lt;/code&gt;. This is because that was what we set as the &lt;code&gt;sourceName&lt;/code&gt; in the template.json file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ntZRfm0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8fldr9fs6siviyn30jr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ntZRfm0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l8fldr9fs6siviyn30jr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Pretty easy so far!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-additional-parameters"&gt;
  &lt;/a&gt;
  Adding additional parameters
&lt;/h2&gt;

&lt;p&gt;The sourceName parameter is a standard required parameter for dotnet templates - but if your sites are set up like ours you may need to run replacements more than for just 1 name. For that we can add additional custom parameters - these will all be available as command line params or form fields in VS.&lt;/p&gt;

&lt;p&gt;There is another special parameter for setting the framework - for that we can add this in the template.json (remember to do this in the boilerplate solution - not the new one you created based on it):&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Add it right at the end below sourceName:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;"sourceName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"UmbracoNineDemoSite"&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"symbols"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"Framework"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parameter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The target framework for the project."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"datatype"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"choices"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                    &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Target netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"replaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="nl"&gt;"defaultValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also create a second symbol similar to the sourceName param that replaces a value in the template files. The UmbracoNineDemoSite has Products that has controllers, a composer, view models - etc. Let's say we use this as a baseline for different shop sites and this new site is going to be about selling Sofas - we may want to replace &lt;code&gt;Product&lt;/code&gt; with &lt;code&gt;Sofa&lt;/code&gt; then:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Right below the Framework symbol we add the new ProductName param:&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"symbols"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"Framework"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parameter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"The target framework for the project."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"datatype"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"choices"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"choice"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
                &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Target netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
            &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"replaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"defaultValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"netcoreapp3.1"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nl"&gt;"ProductName"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"type"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"parameter"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"defaultValue"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"replaces"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Product"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"datatype"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"fileRename"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Product"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Product to be replaced"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;WARNING: This could mess up your site if you use something too generic, &lt;code&gt;Product&lt;/code&gt; is a terrible example - please use something that is way more specific!&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;replaces&lt;/code&gt; value is for within files, whereas the &lt;code&gt;fileRename&lt;/code&gt; value is for actual filenames being changed, so you have a bit of granular control if you only want one type.&lt;/p&gt;

&lt;p&gt;At this point we can reset and reinstall the template:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Reset-Templates; dotnet new --install ..\BoilerPlate\
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we can see the new param in the help description by running:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new test-bp --help
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dxe2lNpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gxbsoqk8ubqd9pahjge.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dxe2lNpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7gxbsoqk8ubqd9pahjge.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's install it while using the new param:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dotnet new test-bp -o MyTestSiteTwo --ProductName Sofa
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you open and compare your solution you can now see that filenames, namespace, etc have all been changed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYPjqmkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tg04bn9311wusu8755r.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYPjqmkb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7tg04bn9311wusu8755r.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-note"&gt;
  &lt;/a&gt;
  Closing note
&lt;/h2&gt;

&lt;p&gt;There are lots more you can do, but will leave it at this for part 1. I hope this gave a good first view of setting up your own dotnet templates!&lt;/p&gt;

&lt;p&gt;Thanks for reading! If you like this post, have any feedback, suggestions, improvements to my hacky code or anything else please let me know on Twitter - &lt;a href="https://twitter.com/JesperMayn"&gt;@jespermayn&lt;/a&gt;&lt;/p&gt;

</description>
      <category>umbraco</category>
      <category>csharp</category>
      <category>core</category>
    </item>
    <item>
      <title>Why You Should Switch to NextJS from ReactJS</title>
      <author>Enlear</author>
      <pubDate>Thu, 30 Sep 2021 18:44:20 +0000</pubDate>
      <link>https://dev.to/enlearacademy/why-you-should-switch-to-nextjs-from-reactjs-3lhh</link>
      <guid>https://dev.to/enlearacademy/why-you-should-switch-to-nextjs-from-reactjs-3lhh</guid>
      <description>&lt;p&gt;If you love frontend development, you should have some experience with React JS, this is because it‚Äôs one of the greatest frontend libraries out there. Due to its speed, flexibility, performance, etc‚Ä¶ a majority of the developer tends to use React JS as for their frontends.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://enlear.academy/next-js-or-react-js-lets-find-out-60c77373da85"&gt;https://enlear.academy/next-js-or-react-js-lets-find-out-60c77373da85&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>webdev</category>
      <category>nextjs</category>
      <category>javascript</category>
    </item>
    <item>
      <title>My First PR</title>
      <author>Deepesha Burse</author>
      <pubDate>Thu, 30 Sep 2021 18:41:14 +0000</pubDate>
      <link>https://dev.to/deepeshaburse/my-first-pr-7mg</link>
      <guid>https://dev.to/deepeshaburse/my-first-pr-7mg</guid>
      <description>&lt;p&gt;Making your first pull request is definitely daunting. Whether you are taking part in some open source program or not, there are multiple things that go through your mind while making it. This blog is my experience and everything I learnt.&lt;/p&gt;

&lt;p&gt;I made my first PR through an open source program, so I was given a basic format in which we had to document everything. Now, I was familiar with putting my personal projects on GitHub, but I had never tried to make a contribution. Making the appropriate documentation/files wasn‚Äôt too hard for me, sure I had my doubts on whether it was good enough and I was ‚Äòqualified‚Äô enough to contribute, but with lots of research and my basic knowledge of the topic got me through it somehow.&lt;/p&gt;

&lt;p&gt;The part which I procrastinated the most was making the PR. I had this mental block of creating a PR and had somewhere decided that it would be very complicated. As someone who‚Äôs still new to open-source, let me tell you, it is not! It is actually one of the easiest parts of contributing (if not the easiest!).&lt;/p&gt;

&lt;p&gt;Another huge learning for me was patience. Having worked only on personal projects, I never had to think about others‚Äô views too much. I would ask a few people to review my project once but that was it. When making contributions, we need to consider that it is not our project, we are only fixing a bug or adding something to an entire project of theirs. They may have different expectations from as simple files as README files or the documentation or whatever it is you are contributing to. Something that looks okay to you, may not look so to your mentor/supervisor/maintainer. Instead of taking it negatively, try to understand what they expect and tweak your files accordingly.&lt;/p&gt;

&lt;p&gt;Taking part in an open source program has helped me grow a lot, and I would definitely recommend you to try it out! The best part about it is, there is always something you can contribute to. Giving back to a community that has given us so much is such an amazing feeling, made me feel so grateful to everyone who has directly/indirectly helped me. Yes, it is a little scary, but once you make your first PR, there is no going back!&lt;/p&gt;

&lt;p&gt;Here are a few articles that helped me to understand the process better:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/"&gt;How to make your first pull request on GitHub&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.better.dev/create-your-first-github-pull-request"&gt;Create Your First GitHub Pull Request&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/doctolib/make-your-first-pull-request-to-an-open-source-project-1m57"&gt;Make your first pull request to an open-source project&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I hope this gave you a brief idea on how it is to make your first PR. &lt;/p&gt;

&lt;p&gt;If there are any tips you would like to share, please leave a comment!&lt;/p&gt;

&lt;p&gt;Until next time, Happy Coding! :))&lt;/p&gt;

</description>
      <category>opensource</category>
      <category>beginners</category>
      <category>github</category>
    </item>
    <item>
      <title>Product developers‚Äô guide to getting started with AI ‚Äî Part 3: Terraforming dataframes</title>
      <author>Mage</author>
      <pubDate>Thu, 30 Sep 2021 18:28:44 +0000</pubDate>
      <link>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-3-terraforming-dataframes-5bdk</link>
      <guid>https://dev.to/mage_ai/product-developers-guide-to-getting-started-with-ai-part-3-terraforming-dataframes-5bdk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#tldr"&gt;
  &lt;/a&gt;
  TLDR
&lt;/h2&gt;

&lt;p&gt;Terraforming a planet requires large scale projects to inhabit other planets for survival. We‚Äôll begin by terraforming datasets to calculate the cost of survival on the Titanic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#outline"&gt;
  &lt;/a&gt;
  Outline
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;Before we begin&lt;/li&gt;
&lt;li&gt;Functional programming&lt;/li&gt;
&lt;li&gt;Applying Function&lt;/li&gt;
&lt;li&gt;Aggregating Data&lt;/li&gt;
&lt;li&gt;Transforming Data&lt;/li&gt;
&lt;li&gt;Data Analysis&lt;/li&gt;
&lt;li&gt;Conclusion&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the &lt;a href="https://m.mage.ai/how-to-interpret-and-explain-your-machine-learning-models-using-shap-values-471c2635b78e"&gt;SHAP&lt;/a&gt; article, we know that people in some groups were more likely to survive when the Titanic crashed. But what does it cost to survive the titanic?&lt;/p&gt;


&lt;center&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GRkzMxf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jfue71jxrb2d79yfplxk.jpeg" alt="Alt Text"&gt;&lt;em&gt;Titanic meets Iceberg (Source: &lt;a href="https://m.mage.ai/how-to-interpret-and-explain-your-machine-learning-models-using-shap-values-471c2635b78e"&gt;Britannica&lt;/a&gt;)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;In ‚ÄúProduct developers‚Äô guide to getting started with AI ‚Äî Part 3: Terraforming dataframes‚Äù, we‚Äôll look at the price point of a ‚Äúgolden ticket‚Äù that ensures the best chance of survival. Based on the SHAP values calculated there is a direct correlation between the sex, passenger class, fare, and age.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7h5N-Nki--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wotn4nd9tnidp8ozdkg3.png" alt="Alt Text"&gt;&lt;em&gt;Mage Analyzer Page (Source: SHAP)&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Manipulating datasets are a quick and easy way to rearrange data and extract everything. In this series we‚Äôve gone over how to pick and search through data so it‚Äôs time to look at transforming the underlying data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#before-we-begin"&gt;
  &lt;/a&gt;
  Before we Begin
&lt;/h2&gt;

&lt;p&gt;It is highly advised to have read &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-d86b3540c7dc"&gt;part 2&lt;/a&gt; before continuing forward. In this guide, we‚Äôll be using the &lt;a href="https://github.com/pandas-dev/pandas/tree/master/doc/data/titanic.csv"&gt;Titanic dataset&lt;/a&gt; along with &lt;a href="https://colab.research.google.com/"&gt;Google Collab&lt;/a&gt;. I‚Äôll be briefly reusing techniques from previous contents such as surfing and extracting to quickly start us off with an ideal dataframe for applying transformations and functions.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T4wV4h1s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mt8u97zvcm7q21v8d4xf.png" alt="Alt Text"&gt;&lt;em&gt;Part 2: Surfing through dataframes&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#functional-programming"&gt;
  &lt;/a&gt;
  Functional Programming
&lt;/h2&gt;

&lt;p&gt;Python is a functional programming language, which means that all operations can be expressed as a function. This is important as later on in this guide we‚Äôll be looking at creating functions and passing lambda expressions to apply and transform. For those that are comfortable enough with Python, you may skip this section. Otherwise, keep reading for a quick refresher on the syntax for defining functions and lambda expressions.&lt;/p&gt;

&lt;p&gt;In Python, a function is created by the ‚Äúdef‚Äù keyword and takes in a number of arguments.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--do3r_8QX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wz4dzavkgsd1h0dc89dt.png" alt="Alt Text"&gt;&lt;em&gt;Basic Adder that adds 1 to the value&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Rewrite the adder function as a lambda expression to shorthand.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DdM8Qcwj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gq26efazb0ceoye2tiix.png" alt="Alt Text"&gt;&lt;em&gt;Lambda expression of the adder&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;For a small operation, like the adder above, it‚Äôs best practice to use a lambda expression. But, for more complex calculations that are used multiple times use a function. When in doubt check if there is a simpler way or how much repeating will occur.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#applying-function"&gt;
  &lt;/a&gt;
  Applying Function
&lt;/h2&gt;

&lt;p&gt;The simplest form of manipulating a dataframe is by using apply. Apply takes in a function and repeats it for either all columns or rows within a dataframe. The applications of this are for quickly calculating or encrypting data.&lt;/p&gt;

&lt;p&gt;Based on the SHAP values, we form a hypothesis that women and children are more likely to survive, possibly due to the fact that they can board first and when living in upper class areas of the ship there is less population density allowing them to quickly escape in comparison to the lower class.&lt;/p&gt;


&lt;center&gt; &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u58MEXSY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ggsxn22vvxihjzl5ehzc.jpeg" alt="Alt Text"&gt;&lt;em&gt;Lifeboats on the Titanic (Source: DailyMail)&lt;/em&gt; &lt;/center&gt;

&lt;p&gt;To find the average price point of the winning ticket: ticket for a young lady in 1st class, we first need to filter down our rows and columns. In the dataframe, ‚ÄúPclass‚Äù represents whether a passenger is located in the 1st class, 2nd class, or 3rd class area of the Titanic. The average is calculated as the sum of the prices divided by the total number or count of items, but may also be calculated by the mean method.&lt;/p&gt;

&lt;p&gt;Using what we‚Äôve learned in part 2, we filter the rows down to only contain items from the sex, passenger class, and age columns. We define our filter as&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Having the sex of a female&lt;/li&gt;
&lt;li&gt;Passenger class of only 1st class&lt;/li&gt;
&lt;li&gt;Age must be no lower than 40 years old&lt;/li&gt;
&lt;/ol&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wWIuTLLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ex7qhtf652swi2qo6csa.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;Then reduce it to only show the relevant information: ‚ÄòFare‚Äô or price of golden ticket.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iyQ8Ubdg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j3he7r6oq95au018vq2h.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;Then, we take the sum of the ‚ÄòFare‚Äô column and divide by the total number of items.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oUNCuga--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iy2avix0es4m85ie5j2b.png" alt="Alt Text"&gt;&lt;em&gt;The total price of all golden tickets are $6484.80&lt;/em&gt;
&lt;/center&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_BOJhL6u--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uivkqongv9d4s5hba9y1.png" alt="Alt Text"&gt;&lt;em&gt;Average price of $113.77&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Unlike &lt;a href="https://m.mage.ai/product-developers-guide-to-getting-started-with-ai-part-2-surfing-through-dataframes-d86b3540c7dc"&gt;part 2&lt;/a&gt;, where we overwrite the values, instead store the data inside a new variable called average_price to hold the results of the calculations. This lets us preserve the old data.&lt;/p&gt;

&lt;p&gt;We can confirm this is the same when calculating the mean of the prices.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ozfeV7UY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6o926xcmrv3yo7xu59o4.png" alt="Alt Text"&gt;&lt;em&gt;The mean matches the average price of $113.77&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Pandas has multiple other built-in mathematical functions, such as median and more.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5Eag2lCk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v44dllv9bctghqh9d37v.png" alt="Alt Text"&gt;&lt;em&gt;Median is $86.50&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Unfortunately, all of this must be done separately, which makes apply good for short functions, but what about longer functions? That‚Äôs where aggregate or agg shines in removing repeatability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#aggregating-data"&gt;
  &lt;/a&gt;
  Aggregating Data
&lt;/h2&gt;

&lt;p&gt;If you know which aggregate you want to apply ahead of time, use agg instead. When doing multiple calculations of summation, mean, or standard deviation, aggregate is a neater way to calculate than using apply.&lt;/p&gt;

&lt;p&gt;For instance, if we were to use aggregate instead, we could grab multiple types all at once. For our next section, we‚Äôll need the standard deviation so let‚Äôs calculate that as well. Note: The shorthand is agg, which is functionally equivalent to aggregate.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ux4dZABn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xmqvcsdkamcz6mp1rf0t.png" alt="Alt Text"&gt;&lt;em&gt;1 liner for sum, mean, max, and median&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#transforming-data"&gt;
  &lt;/a&gt;
  Transforming Data
&lt;/h2&gt;

&lt;p&gt;Another way of manipulating a dataframe is by using transform. This is similar to apply, except that it applies the function to itself and repeats it for all columns within a dataframe. Since it can be applied to itself, the applications are more extended and can complete multiple operations by passing values back to itself.&lt;/p&gt;

&lt;p&gt;Because transform applies it to itself, the result must be the same length of the original input. This means that functions such as sum(), mean(), and max/min() don‚Äôt work as they condense or aggregate all the data into 1 value.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VvWcboY0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4eq6r2xdj06flstjtugl.png" alt="Alt Text"&gt;&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sx8seoT3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ad9oapysbn1rcu6wu4ir.png" alt="Alt Text"&gt;
&lt;/center&gt;

&lt;p&gt;Back to the original problem, find out what percentage of passengers have a ‚Äúgolden ticket‚Äù. Using transform, we can combine aggregation using a series to calculate the individual values. This makes transform more useful at looking at the finer details.&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROuDl5m---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1ux2zdrbxtjpm3mt8koj.png" alt="Alt Text"&gt;&lt;em&gt;Calculate individual percentages&lt;/em&gt;
&lt;/center&gt;

&lt;p&gt;Likewise, summing the individual results should result in 1.0 (100%)&lt;/p&gt;


&lt;center&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qKSc2EtY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4oratww7d88ploc7m74.png" alt="Alt Text"&gt;&lt;em&gt;Sanity Check&lt;/em&gt;
&lt;/center&gt;
&lt;h2&gt;
  &lt;a href="#data-analysis"&gt;
  &lt;/a&gt;
  Data Analysis
&lt;/h2&gt;

&lt;p&gt;To find out how many passengers paid top dollar, first we take the original dataset and calculate the percentages. We leverage transform‚Äôs ability to maintain length, along with groupby to sort our data.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vjifp2E---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2qqez2y7yt8wdulkmev0.png" alt="Alt Text"&gt;&lt;/center&gt;

&lt;p&gt;What slice of the ‚Äúpie‚Äù do the golden ticket passengers make out?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dWxQ-Bao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q7gv9jjujxrvnhthqkp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dWxQ-Bao--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5q7gv9jjujxrvnhthqkp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;23% of all income on the ship is from golden ticket sales.&lt;/em&gt;&lt;/center&gt;

&lt;p&gt;What percentage of passengers own a golden ticket?&lt;/p&gt;


&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4ZV30n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f113fm8nnfxeg5wwto46.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ec4ZV30n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f113fm8nnfxeg5wwto46.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;center&gt;&lt;em&gt;Only 6% of all passengers purchased a golden ticket.&lt;/em&gt;&lt;/center&gt;

&lt;h3&gt;
  &lt;a href="#key-differences"&gt;
  &lt;/a&gt;
  Key Differences
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Transform returns based on self, the equal length must be satisfied. Therefore, transform can‚Äôt handle aggregate methods (sum, mean, std deviation, etc‚Ä¶)&lt;/li&gt;
&lt;li&gt;Apply doesn‚Äôt take in multiple aggregations (one column at a time), while agg can.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#highlights"&gt;
  &lt;/a&gt;
  Highlights
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Transform is best used to create a new entry into a table to see fine detail.&lt;/li&gt;
&lt;li&gt;Aggregate and apply are useful at calculating a single summary value.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;


&lt;p&gt;That‚Äôs it now, you‚Äôre ready to tackle future problems in data science. Using your newfound knowledge I suggest modifying the steps to calculate what percentage of golden ticket holders survive, as your next step in familiarizing yourself with these core AI concepts. As always, stay tuned for future guides where we‚Äôll go over more topics ranging from joining datasets to deploying a machine learning model to the Cloud.&lt;br&gt;&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_iBFI56M--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2y43q2ndwmphnu00g0t4.gif" alt="Alt Text"&gt;&lt;em&gt;I‚Äôve got a Golden Ticket! (Source South Park)&lt;/em&gt;&lt;br&gt;
&lt;/center&gt;

</description>
    </item>
    <item>
      <title>Binary Search in other words</title>
      <author>haytam_7</author>
      <pubDate>Thu, 30 Sep 2021 18:28:22 +0000</pubDate>
      <link>https://dev.to/haytamkh7/binary-search-in-other-words-1n0e</link>
      <guid>https://dev.to/haytamkh7/binary-search-in-other-words-1n0e</guid>
      <description>&lt;p&gt;Imagine yourself holding a flashlight against a list of sorted numbers searching for your lottery number.&lt;/p&gt;

&lt;p&gt;Each time you turn on the flashlight it will automatically point to the &lt;strong&gt;middle of the list&lt;/strong&gt; and you can't change it.&lt;br&gt;
If at this point you see your lottery number then BOOM! you won the lottery.&lt;/p&gt;

&lt;p&gt;Otherwise you need to compare your lottery number with that number in the middle of the list and you will face one of two situations:&lt;/p&gt;

&lt;p&gt;Either your number is bigger, then you have to cut the lower part of the list and continue working with the upper part.&lt;/p&gt;

&lt;p&gt;Or your number is smaller, then you have to cut the upper part of the list and continue working with the lower part.&lt;/p&gt;

&lt;p&gt;Now let's try to translate this to a code (in Java):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;public static int myLotteryNumber(int[] list, int lotteryNumber) {
        int left = 0;
        int right = list.length - 1;
        while(left &amp;lt;= right){
            int mid = (left + right) / 2;
            if(list[mid] == lotteryNumber)
                return list[mid];
            else if(lotteryNumber &amp;gt; list[mid])
                left = mid + 1; //cut the lower part of the list
            else if(lotteryNumber &amp;lt; list[mid])
                right = mid - 1; //cut the upper part of the list
        }
        return -1;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The great thing about this algorithm is that at each iteration you &lt;strong&gt;cut down half of the list&lt;/strong&gt; and at the worst case this will cost you &lt;strong&gt;&lt;em&gt;O(Log n)&lt;/em&gt;&lt;/strong&gt; of time complexity and &lt;strong&gt;&lt;em&gt;O(1)&lt;/em&gt;&lt;/strong&gt; of space complexity!&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>coding</category>
      <category>binarysearch</category>
    </item>
    <item>
      <title>What is horizontal and vertical scaling?
</title>
      <author>Kedar.K</author>
      <pubDate>Thu, 30 Sep 2021 18:13:25 +0000</pubDate>
      <link>https://dev.to/kedark/what-is-horizontal-and-vertical-scaling-2139</link>
      <guid>https://dev.to/kedark/what-is-horizontal-and-vertical-scaling-2139</guid>
      <description>&lt;p&gt;&lt;em&gt;Scaling&lt;/em&gt; implies adding or removing resources from your machine/application to perform the underlying tasks with optimal cost and processing capability. Scalability is a challenge that every engineering team needs to go through.&lt;/p&gt;

&lt;p&gt;Various scenarios require an application to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grow/shrink in requests&lt;/li&gt;
&lt;li&gt;Increase/decrease in data&lt;/li&gt;
&lt;li&gt;Reduce processing power&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point, you will have two scaling options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Horizontal scaling&lt;/li&gt;
&lt;li&gt;Vertical scaling&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#horizontal-scaling-scaling-out"&gt;
  &lt;/a&gt;
  Horizontal scaling (scaling out)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Horizontal scaling&lt;/strong&gt; implies adding more machines to the existing system. The data is scattered across multiple machines, and each of them has its own capacity. As we are not modifying existing machines, this process involves less downtime.&lt;/p&gt;

&lt;p&gt;This method allows us to perform distributed programming, which entails distributing jobs across devices. Horizontal scaling can increase the complexity as the address space increases. Therefore, updating and sharing data across machines can be more expensive.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3EFi_FSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fa4kjg4a50gs03t0ehp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3EFi_FSL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2fa4kjg4a50gs03t0ehp.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vertical-scaling-scaling-up"&gt;
  &lt;/a&gt;
  Vertical scaling (scaling up)
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Vertical scaling&lt;/strong&gt; implies attaching more resources to the existing machine. Let‚Äôs consider a server rack, as before. We add more things like RAM, for example, to the same server rack in this method. The data resides on the same machine and is not distributed as in horizontal scaling. Usually, the activities performed on these machines use multi-threading and in-process data passing methods. Vertical scaling will have limited capacity within the existing machine. Scaling beyond this capacity will cause downtime.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t49d3t7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z6yvkdofd89iwkk7hem.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t49d3t7X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5z6yvkdofd89iwkk7hem.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at the key differences between these methods:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Horizontal Scaling&lt;/th&gt;
&lt;th&gt;Vertical Scaling&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Maintainance&lt;/td&gt;
&lt;td&gt;Maintainance is complex as you will need to manage a lot of machines.&lt;/td&gt;
&lt;td&gt;Maintenance is cheaper and it is less complex because of the number of nodes you will need to manage.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Costs&lt;/td&gt;
&lt;td&gt;Initial costs are high but buying a new machine with low processing power is more affordable.&lt;/td&gt;
&lt;td&gt;Adding a new machine is far more expensive than upgrading old ones.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Fault Tolerance&lt;/td&gt;
&lt;td&gt;In case of failure in a machine, others can still provide the service.&lt;/td&gt;
&lt;td&gt;Failures will lead to loss of service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Communication Complexity&lt;/td&gt;
&lt;td&gt;Having multiple machines requires complex protocols for exchanging data between them.&lt;/td&gt;
&lt;td&gt;Data exchange becomes relatively straightforward as we only have one machine.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load Balancing&lt;/td&gt;
&lt;td&gt;Traffic/programming tasks can be distributed between the machines.&lt;/td&gt;
&lt;td&gt;Since we have one device, tasks can't be spread. Some level of parallel processing is achievable using a multi-threading programming model, but it's limited to the machine's capacity.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Examples&lt;/td&gt;
&lt;td&gt;Cassandra, Google Cloud Spanner&lt;/td&gt;
&lt;td&gt;MySQL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;That's all for the post guys. Hope you enjoyed it, don't forget to leave a like if you did :).&lt;/p&gt;

&lt;p&gt;Happy Learning. &lt;/p&gt;

</description>
      <category>database</category>
      <category>scaling</category>
    </item>
  </channel>
</rss>
