<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Express JS Hello World</title>
      <author>Youssef Allali</author>
      <pubDate>Fri, 07 May 2021 05:21:36 +0000</pubDate>
      <link>https://dev.to/youssefallalix/express-js-hello-world-10ph</link>
      <guid>https://dev.to/youssefallalix/express-js-hello-world-10ph</guid>
      <description>&lt;h1&gt;
  &lt;a href="#install-nodejs-and-npm"&gt;
  &lt;/a&gt;
  Install NodeJS and NPM
&lt;/h1&gt;

&lt;p&gt;First thing we need to do is prepare an environnement for Express to run. We are going to &lt;a href="https://nodejs.org/en/download/"&gt;install NodeJS&lt;/a&gt; and follow the installation instructions.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MmahXzPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb3sxu4jc7rh9hh1f8r5.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MmahXzPf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kb3sxu4jc7rh9hh1f8r5.jpeg" alt="Web capture_7-5-2021_2217_nodejs.org"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#prepare-a-workspace-and-start-a-project"&gt;
  &lt;/a&gt;
  Prepare a workspace and start a project
&lt;/h1&gt;

&lt;p&gt;Once we have installed Node.js and Node Package Manager (NPM) on our machine, let's open up a terminal window (or CMD, on Windows) in the desired folder or use the following command to create a folder and use it as a workspace:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ mkdir ./hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ./hello_world
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, we are ready to start our first application, to do that, type in the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm init -y
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What it basically does is create a file named &lt;code&gt;package.json&lt;/code&gt; that contains all the information about our project and its dependencies.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-express"&gt;
  &lt;/a&gt;
  Install Express
&lt;/h1&gt;

&lt;p&gt;Next, we need to install express module using NPM via the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ npm install express --save
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now all we need is to create our main script, we'll be naming it &lt;code&gt;index.js&lt;/code&gt; since that's the default name (other conventional names can be &lt;code&gt;app.js&lt;/code&gt; or &lt;code&gt;server.js&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We can create a new empty file from the terminal using the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;touch index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's open our newly created file in any IDE or text editor (&lt;code&gt;Notepad&lt;/code&gt;, &lt;code&gt;Notepad++&lt;/code&gt;, &lt;code&gt;Atom&lt;/code&gt; ...) but I would recommend using a sophisticated IDE like &lt;code&gt;VS Code&lt;/code&gt; and let's type in the following lines in order:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const express = require('express');
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The first line would tell our app to import the module we are using (express).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const app = express();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This second line let us define express as a function&lt;/p&gt;

&lt;p&gt;After that we need to define something called "a route" to the root of our website that will let us send an HTTP request to our server and GET a response that says &lt;code&gt;Hello World!&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.get('/', (req, res) =&amp;gt; {
  res.send('Hello World!');
});
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Last thing we need to do is instruct our app to be listening on a port, for example port 3000:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;app.listen(3000)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#run-the-server-app"&gt;
  &lt;/a&gt;
  Run the server app
&lt;/h1&gt;

&lt;p&gt;Now let's head back to our terminal window and type in the following command which will compile our code and start our server.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ node ./index.js
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#check-if-it-works"&gt;
  &lt;/a&gt;
  Check if it works
&lt;/h1&gt;

&lt;p&gt;Finally, we can load &lt;a href="http://localhost:3000/"&gt;http://localhost:3000/&lt;/a&gt; in a browser to see the result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aQIT4CzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02e946etr2y67u925f6p.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aQIT4CzV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/02e946etr2y67u925f6p.png" alt="Hello World Screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>express</category>
      <category>node</category>
      <category>npm</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Monaco Editor + Svelte Kit</title>
      <author>Lawrence Chen</author>
      <pubDate>Fri, 07 May 2021 04:44:36 +0000</pubDate>
      <link>https://dev.to/lawrencecchen/monaco-editor-svelte-kit-572</link>
      <guid>https://dev.to/lawrencecchen/monaco-editor-svelte-kit-572</guid>
      <description>&lt;p&gt;Here's the gist:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"ts"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;monaco&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;onMount&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;svelte&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;editorWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/editor/editor.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;jsonWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/json/json.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;cssWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/css/css.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;htmlWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/html/html.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;tsWorker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor/esm/vs/language/typescript/ts.worker?worker&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;divEl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;HTMLDivElement&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;monaco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;IStandaloneCodeEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Monaco&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;onMount&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// @ts-ignore&lt;/span&gt;
        &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MonacoEnvironment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;getWorker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;_moduleId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;json&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;jsonWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;scss&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;less&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;cssWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;html&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;handlebars&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;razor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;htmlWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;typescript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;label&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;tsWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;editorWorker&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;

        &lt;span class="nx"&gt;Monaco&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;monaco-editor&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;editor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Monaco&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;divEl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;function x() {&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;console.log("Hello world!");&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;}&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="na"&gt;language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;javascript&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;editor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dispose&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;bind:this=&lt;/span&gt;&lt;span class="s"&gt;{divEl}&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"h-screen"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#key-points"&gt;
  &lt;/a&gt;
  Key points
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Don't do &lt;code&gt;module.default&lt;/code&gt; like the &lt;a href="https://kit.svelte.dev/faq"&gt;FAQ&lt;/a&gt; tells you to&lt;/li&gt;
&lt;li&gt;With Vite, you &lt;a href="https://github.com/vitejs/vite/discussions/1791#discussioncomment-321046"&gt;don't need to configure workers with your bundler&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>svelte</category>
      <category>vscode</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Perling and Curling</title>
      <author>Felipe Gasper</author>
      <pubDate>Fri, 07 May 2021 04:36:06 +0000</pubDate>
      <link>https://dev.to/fgasper/perling-and-curling-2i10</link>
      <guid>https://dev.to/fgasper/perling-and-curling-2i10</guid>
      <description>&lt;p&gt;Most of us probably know &lt;a href="https://curl.se/"&gt;curl&lt;/a&gt; as a quick and easy way to send HTTP requests from the command line.&lt;/p&gt;

&lt;p&gt;That tool, though, is just an interface to the curl project’s real gold: the libcurl API. Using this API, applications in all sorts of languages have easy access to the awesome power that libcurl provides. This article will discuss how to use that power in Perl.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#a-quick-example"&gt;
  &lt;/a&gt;
  A Quick Example
&lt;/h1&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Net::Curl::Easier;

my $easy = Net::Curl::Easier-&amp;gt;new(
    url =&amp;gt; 'http://perl.org',
    followlocation =&amp;gt; 1,
)-&amp;gt;perform();

print $easy-&amp;gt;head(), $easy-&amp;gt;body();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let’s talk about what just happened.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://metacpan.org/pod/Net::Curl::Easier"&gt;Net::Curl::Easier&lt;/a&gt; is a thin wrapper around &lt;a href="https://metacpan.org/pod/Net::Curl"&gt;Net::Curl&lt;/a&gt;’s “easy” interface—&lt;a href="https://curl.se/libcurl/c/libcurl-easy.html"&gt;“easy” is what libcurl calls it!&lt;/a&gt;—that smooths over some rough edges in Net::Curl.&lt;/p&gt;

&lt;p&gt;(Full disclosure: I am Net::Curl::Easier’s maintainer.)&lt;/p&gt;

&lt;p&gt;Once we create our “Easier” object, having given it the proper URL and told it to follow HTTP redirects (&lt;code&gt;followlocation&lt;/code&gt; refers to &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Location"&gt;HTTP’s &lt;code&gt;Location&lt;/code&gt; header&lt;/a&gt;), we run &lt;code&gt;perform()&lt;/code&gt; on the Easier object.&lt;/p&gt;

&lt;p&gt;After that, we print the HTTP response headers and body, and we’re done!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-not-just-use-httptiny"&gt;
  &lt;/a&gt;
  Why not just use &lt;a href="https://metacpan.org/pod/HTTP::Tiny"&gt;HTTP::Tiny&lt;/a&gt;?
&lt;/h1&gt;

&lt;p&gt;Indeed. Well, error reporting, for one. Consider:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Net::Curl::Easier-&amp;gt;new(
    url =&amp;gt; 'http://blahblah',
)-&amp;gt;perform();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you run this you’ll probably just see &lt;code&gt;Couldn't resolve host name&lt;/code&gt; printed to standard error. But if you dig deeper you’ll see something nifty:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Net::Curl::Easier;
use Data::Dumper;

eval {
    Net::Curl::Easier-&amp;gt;new(
        url =&amp;gt; 'http://blahblah',
    )-&amp;gt;perform();
};
print Dumper $@;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It turns out that that error isn’t just a string; it’s an exception &lt;em&gt;object&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In large systems I often want to handle certain failure types differently from others. HTTP::Tiny’s errors are just strings, so type-specific failure handling with HTTP::Tiny entails &lt;em&gt;parsing strings&lt;/em&gt;, which is brittle. What if someone decides to reword some error message for clarity, thus breaking my string parser?&lt;/p&gt;

&lt;p&gt;With Net::Curl I can look for specific numeric error codes, documentation for which &lt;a href="https://curl.se/libcurl/c/libcurl-errors.html"&gt;the curl project itself maintains&lt;/a&gt;. This is much more robust.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#dont-care-what-else-you-got"&gt;
  &lt;/a&gt;
  Don’t care. What else you got?
&lt;/h1&gt;

&lt;p&gt;OK. How about this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;my $easy = Net::Curl::Easier-&amp;gt;new(
    username =&amp;gt; 'hal',
    userpwd =&amp;gt; 'itsasecret',
    url =&amp;gt; 'imap://mail.example.com/INBOX/;UID=123',
)-&amp;gt;perform();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I just queried … an email inbox?!?&lt;/p&gt;

&lt;p&gt;Curl doesn’t just speak HTTP; it speaks many other protocols including IMAP, LDAP, SCP, and MQTT. To see the full list of protocols that your curl supports, run &lt;code&gt;curl --version&lt;/code&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#concurrency"&gt;
  &lt;/a&gt;
  Concurrency
&lt;/h1&gt;

&lt;p&gt;Curl can also run concurrent queries. To do that I recommend using &lt;a href="https://metacpan.org/pod/Net::Curl::Promiser"&gt;Net::Curl::Promiser&lt;/a&gt;. (Full disclosure: I also maintain this module.)&lt;/p&gt;

&lt;p&gt;Example, assuming use of &lt;a href="http://metacpan.org/pod/Mojolicious"&gt;Mojolicious&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use Net::Curl::Easier;
use Net::Curl::Promiser::Mojo;
use Mojo::Promise;

my $easy1 = Net::Curl::Easier-&amp;gt;new(
    url =&amp;gt; 'http://perl.org',
    followlocation =&amp;gt; 1,
);

my $easy2 = Net::Curl::Easier-&amp;gt;new(
    username =&amp;gt; 'hal',
    userpwd =&amp;gt; 'itsasecret',
    url =&amp;gt; 'imap://mail.example.com/INBOX/;UID=123',
);

my $easy3 = Net::Curl::Easier-&amp;gt;new(
    username =&amp;gt; 'hal',
    userpwd =&amp;gt; 'itsasecret',
    url =&amp;gt; 'scp://tty.example.com/path/to/file',
);

my $promiser = Net::Curl::Promiser::Mojo-&amp;gt;new();

Mojo::Promise-&amp;gt;all_settled(
    $promiser-&amp;gt;add_handle($easy1)-&amp;gt;then( sub {
        print $easy1-&amp;gt;head(), $easy1-&amp;gt;body();
    } ),
    $promiser-&amp;gt;add_handle($easy2)-&amp;gt;then( sub {
        # ... whatever you want with the IMAP result
    } ),
    $promiser-&amp;gt;add_handle($easy3)-&amp;gt;then( sub {
        # ... whatever you want with the SCP result
    } ),
)-&amp;gt;wait();
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We just grabbed a web page, queried a mailbox, and downloaded a file via SCP, all in parallel!&lt;/p&gt;

&lt;p&gt;Net::Curl::Promiser also works natively with&lt;br&gt;
&lt;a href="http://metacpan.org/pod/AnyEvent"&gt;AnyEvent&lt;/a&gt; and&lt;br&gt;
&lt;a href="http://metacpan.org/pod/IO::Async"&gt;IO::Async&lt;/a&gt;, should those be of greater interest to you. It also provides a convenience layer for custom &lt;a href="https://perldoc.perl.org/perlfunc#select-RBITS%2CWBITS%2CEBITS%2CTIMEOUT"&gt;select&lt;/a&gt;-based event loops, in case that’s how you roll.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#other-modules"&gt;
  &lt;/a&gt;
  Other Modules
&lt;/h1&gt;

&lt;p&gt;Some alternatives to modules presented above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://metacpan.org/pod/AnyEvent::YACurl"&gt;AnyEvent::YACurl&lt;/a&gt;: A newer library than Net::Curl that simplifies the interface a bit. It assumes use of &lt;a href="https://metacpan.org/pod/AnyEvent"&gt;AnyEvent&lt;/a&gt;, though, so if you’re not using AE then this may not be for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://metacpan.org/pod/WWW::Curl"&gt;WWW::Curl&lt;/a&gt;: The library of which Net::Curl is a fork. It lacks access to libcurl’s advanced multi interface.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://metacpan.org/pod/Net::Curl::Simple"&gt;Net::Curl::Simple&lt;/a&gt;: A wrapper by Net::Curl’s original author. It provides some of the same conveniences as Net::Curl::Promiser and Net::Curl::Easier but uses callbacks rather than promises.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#closing-thoughts"&gt;
  &lt;/a&gt;
  Closing Thoughts
&lt;/h1&gt;

&lt;p&gt;Curl exposes an awesome breadth of functionality, of which the above examples have just scratched the surface. Check it out!&lt;/p&gt;

</description>
      <category>perl</category>
      <category>programming</category>
    </item>
    <item>
      <title>Infrastructure as Code in 3 minutes</title>
      <author>Davide Benvegnù</author>
      <pubDate>Fri, 07 May 2021 04:33:55 +0000</pubDate>
      <link>https://dev.to/n3wt0n/infrastructure-as-code-in-3-minutes-4h1h</link>
      <guid>https://dev.to/n3wt0n/infrastructure-as-code-in-3-minutes-4h1h</guid>
      <description>&lt;p&gt;&lt;strong&gt;Infrastructure as Code&lt;/strong&gt; is becoming more and more important in the DevOps Context, due to the many &lt;strong&gt;benefits&lt;/strong&gt; it brings.&lt;/p&gt;

&lt;p&gt;Today I have for you a &lt;strong&gt;&lt;em&gt;quick intro&lt;/em&gt;&lt;/strong&gt; to the topic, so you can understand what it is and why more and more companies and developers are looking into adopting it.&lt;/p&gt;

&lt;p&gt;I will not go into specific languages and tools but let me know in the comment section below if you'd like me to create another post, video, or a series about specific implementations.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#video"&gt;
  &lt;/a&gt;
  Video
&lt;/h3&gt;

&lt;p&gt;As usual, if you are a &lt;strong&gt;visual learner&lt;/strong&gt;, or simply prefer to watch and listen instead of reading, here you have &lt;strong&gt;the video with the whole explanation&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fE4gY-SydKo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/fE4gY-SydKo"&gt;Link to the video: https://youtu.be/fE4gY-SydKo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you rather prefer reading, well... let's just continue :)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what"&gt;
  &lt;/a&gt;
  What
&lt;/h3&gt;

&lt;p&gt;Infrastructure as Code (&lt;strong&gt;IaC&lt;/strong&gt;) is the management of infrastructure (networks, virtual machines, load balancers, and so on so forth) in a &lt;strong&gt;descriptive model&lt;/strong&gt;, using the same versioning as DevOps team uses for source code.&lt;/p&gt;

&lt;p&gt;Like the principle that the same source code generates the same binary, an &lt;strong&gt;IaC model generates the same environment every time&lt;/strong&gt; it is applied.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why"&gt;
  &lt;/a&gt;
  Why
&lt;/h3&gt;

&lt;p&gt;Thanks to this, Infrastructure as Code &lt;strong&gt;solves&lt;/strong&gt; the problem of "&lt;em&gt;environment drift&lt;/em&gt;".&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without IaC&lt;/strong&gt;, teams must maintain the settings of &lt;strong&gt;individual deployment environments&lt;/strong&gt;. Over time, each environment ends up having a &lt;strong&gt;unique configuration&lt;/strong&gt; that cannot be reproduced automatically. &lt;strong&gt;Inconsistency&lt;/strong&gt; among environments can cause issues during deployments, and administration and maintenance of infrastructure involves manual processes which are hard to track and &lt;strong&gt;contribute to errors&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With IaC&lt;/strong&gt;, instead, teams make changes to the environment description and version the &lt;strong&gt;configuration model&lt;/strong&gt;, which is typically in &lt;strong&gt;well-documented code&lt;/strong&gt; formats. The release pipeline executes the model to configure target environments. If the team needs to make changes, they &lt;strong&gt;edit the source, not the target&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Additionally, IaC enables DevOps teams to test applications in &lt;strong&gt;production-like environments&lt;/strong&gt; early in the development cycle. These teams expect to provision multiple test environments reliably and on demand. Infrastructure represented as code can also be validated and tested to prevent common deployment issues. At the same time, the cloud &lt;strong&gt;dynamically provisions&lt;/strong&gt; and tears down environments based on IaC definitions.&lt;/p&gt;

&lt;p&gt;Teams who implement IaC can deliver &lt;strong&gt;stable environments rapidly and at scale&lt;/strong&gt;. They avoid manual configuration of environments and &lt;strong&gt;enforce consistency&lt;/strong&gt; by representing the desired state of their environments via code. &lt;/p&gt;

&lt;p&gt;Infrastructure deployments with IaC are &lt;strong&gt;repeatable&lt;/strong&gt; and prevent runtime issues caused by configuration drift or missing dependencies.&lt;/p&gt;

&lt;p&gt;DevOps teams can work together with a &lt;strong&gt;unified set of practices&lt;/strong&gt; and tools to deliver applications and their supporting infrastructure rapidly, reliably, and at scale.&lt;/p&gt;

&lt;p&gt;These are the reasons why &lt;strong&gt;IaC is a key DevOps practice&lt;/strong&gt; and is used in conjunction with continuous delivery.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h3&gt;

&lt;p&gt;We should now have a clearer understanding of what Infrastructure as Code is, and of the benefits it provides.&lt;/p&gt;

&lt;p&gt;Let me know in the comment section below if you have any question about IaC and, as I've mentioned before, if you'd like me to make another post or video about a specific tool or framework for Infrastructure as Code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Like, share and follow me&lt;/strong&gt; 🚀 for more content:&lt;/p&gt;

&lt;p&gt;📽 &lt;a href="https://www.youtube.com/CoderDave"&gt;YouTube&lt;/a&gt;&lt;br&gt;
☕ &lt;a href="https://buymeacoffee.com/CoderDave"&gt;Buy me a coffee&lt;/a&gt;&lt;br&gt;
💖 &lt;a href="https://patreon.com/CoderDave"&gt;Patreon&lt;/a&gt;&lt;br&gt;
👕 &lt;a href="https://geni.us/cdmerch"&gt;Merch&lt;/a&gt;&lt;br&gt;
👦🏻 &lt;a href="https://www.facebook.com/CoderDaveYT"&gt;Facebook page&lt;/a&gt;&lt;br&gt;
🐱‍💻 &lt;a href="https://github.com/n3wt0n"&gt;GitHub&lt;/a&gt;&lt;br&gt;
👲🏻 &lt;a href="https://www.twitter.com/davide.benvegnu"&gt;Twitter&lt;/a&gt;&lt;br&gt;
👴🏻 &lt;a href="https://www.linkedin.com/in/davidebenvegnu/"&gt;LinkedIn&lt;/a&gt;&lt;br&gt;
🔉 &lt;a href="https://geni.us/cdpodcast"&gt;Podcast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/fE4gY-SydKo"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>devops</category>
      <category>iac</category>
      <category>infra</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Jamstack and Serverless with Jason Lengstorf</title>
      <author>Nick Taylor (he/him)</author>
      <pubDate>Fri, 07 May 2021 03:21:25 +0000</pubDate>
      <link>https://dev.to/devteam/jamstack-and-serverless-with-jason-lengstorf-3jdl</link>
      <guid>https://dev.to/devteam/jamstack-and-serverless-with-jason-lengstorf-3jdl</guid>
      <description>&lt;p&gt;On &lt;time&gt;April 21st&lt;/time&gt;, Jason Lengstorf (VP of Developer Experience at Netlify and DEV Community member) joined &lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 and me on the Walkthrough Wednesday stream to discuss Jamstack, serverless, and Jamstack Explorers.&lt;/p&gt;

&lt;p&gt;We used Netlify's serverless functions to quickly set up an API to grab DEV posts with the DEV API.&lt;/p&gt;

&lt;p&gt;Thanks again for joining us, Jason! 😎 I had a great time pairing with you on the stream.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Watch the Walkthrough Wednesday with Jason and catch up on what you missed:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/dXr0iJE10tQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Take a look at the repository we created and worked on.&lt;/em&gt;&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/nickytonline"&gt;
        nickytonline
      &lt;/a&gt; / &lt;a href="https://github.com/nickytonline/fun-with-jason"&gt;
        fun-with-jason
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Walkthrough Wednesdays with Jason Lengstorf: DEV API project using serverless&lt;/h1&gt;
&lt;p&gt;We talked Jamstack, serverless, and I got to have some fun and pair with Jason. We used Netlify's serverless functions to quickly set up an API to grab DEV posts with the DEV API, i.e. this repository.&lt;/p&gt;
&lt;p&gt;Thanks again for coming on the stream Jason! 😎&lt;/p&gt;
&lt;p&gt;
    &lt;a href="https://www.youtube.com/watch?v=dXr0iJE10tQ" rel="nofollow"&gt;
        &lt;img src="https://camo.githubusercontent.com/f58637dc8c500399005776b4c8d44c07be4ef132bf19cdde69e2af098e33905d/68747470733a2f2f696d672e796f75747562652e636f6d2f76692f64587230694a45313074512f302e6a7067" alt="Walkthrough Wednesdays Project with Jason Lengstorf"&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;
Installation&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Install the Netlify CLI, &lt;code&gt;npm install netlify-cli -g&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;ntl dev&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;A browser will open at &lt;a href="http://localhost:8888" rel="nofollow"&gt;http://localhost:8888&lt;/a&gt; with a message saying "Not Found". That's OK. 😅
&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href="http://localhost:8888/api/posts" rel="nofollow"&gt;http://localhost:8888/api/posts&lt;/a&gt;. A list of posts from DEV will load.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Play with the API&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Load posts for a specific user by adding their username to the API call, e.g. &lt;a href="http://localhost:8888/api/posts/nickytonline" rel="nofollow"&gt;http://localhost:8888/api/posts/nickytonline&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fork this and have some fun!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
Before and After Calling API with On-demand Builders Enabled&lt;/h2&gt;

&lt;p&gt;In this example we query the posts for DEV community member &lt;a href="https://dev.to/coffeecraftcode" rel="nofollow"&gt;coffeecraftcode&lt;/a&gt;. The initial call comes…&lt;/p&gt;
&lt;/div&gt;


&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/nickytonline/fun-with-jason"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h3&gt;
  &lt;a href="#on-this-stream-we-covered"&gt;
  &lt;/a&gt;
  On this stream, we covered:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/cli/cli#installation"&gt;GitHub CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.netlify.com/cli/get-started/"&gt;Netlify CLI&lt;/a&gt; and how to quickly deploy and update our API&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.netlify.com/configure-builds/on-demand-builders/"&gt;Netlify On-demand builders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.forem.com/api/"&gt;The DEV API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://explorers.netlify.com/"&gt;Jamstack Explorers&lt;/a&gt; - We forgot to cover this one, but Christina gave it a shoutout at the end of the stream. It's really good. I did the NEXT.js course with &lt;a class="mentioned-user" href="https://dev.to/cassidoo"&gt;@cassidoo&lt;/a&gt;
 a little while back. 😎&lt;/li&gt;
&lt;/ul&gt;


&lt;center&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/nFFguNjdeotwc/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/nFFguNjdeotwc/giphy.gif" alt="Amy Poehler slouching in a seat in a theater putting both her hands out as if to say cool!"&gt;&lt;/a&gt;&lt;/p&gt;


&lt;/center&gt;

&lt;p&gt;Thanks again for coming on the stream, Jason!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#you-can-also-find-the-three-of-us-all-over-the-web-here"&gt;
  &lt;/a&gt;
  You can also find the three of us all over the web here:
&lt;/h3&gt;


&lt;div class="ltag__user ltag__user__id__88635"&gt;
  
    .ltag__user__id__88635 .follow-action-button {
      background-color: #0030b3 !important;
      color: #ffffff !important;
      border-color: #0030b3 !important;
    }
  
    &lt;a href="/jlengstorf" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oIpIYcbI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--2LRVCYj---/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/88635/4bff9730-fc39-4480-bf6a-af1e4fd8217a.jpeg" alt="jlengstorf image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/jlengstorf"&gt;Jason Lengstorf&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/jlengstorf"&gt;⚡️ a.k.a. Blitz Jackson
📺 live coding on LearnWithJason.dev
📝 blogging at http://lengstorf.com
🥑 Dev Experience at Netlify
⏳ previously at Gatsby, IBM

he/him&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/jlengstorf"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.jason.af/"&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__9597"&gt;
  
    .ltag__user__id__9597 .follow-action-button {
      background-color: #fb4881 !important;
      color: #ffffff !important;
      border-color: #fb4881 !important;
    }
  
    &lt;a href="/nickytonline" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BmhzwLSV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--zhsA-ZEm--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/9597/68d6245f-3152-4ed2-a245-d015fca4160b.jpeg" alt="nickytonline image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/nickytonline"&gt;Nick Taylor (he/him)&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/nickytonline"&gt;Lead software engineer at Forem. Caught the live coding bug on Twitch at livecoding.ca&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/nickytonline"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://livecoding.ca"&gt;livecoding.ca&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtube.iamdeveloper.com"&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag__user ltag__user__id__129358"&gt;
  
    .ltag__user__id__129358 .follow-action-button {
      background-color: #f0065c !important;
      color: #ffffff !important;
      border-color: #f0065c !important;
    }
  
    &lt;a href="/coffeecraftcode" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yuBMmi-P--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--u8pzDZEU--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/129358/190252c3-ce2d-4df8-b4b1-b42f7ae7d08a.png" alt="coffeecraftcode image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/coffeecraftcode"&gt;Christina Gorton&lt;/a&gt;
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/coffeecraftcode"&gt;Open Source Community Manager, Technical Writer,  Developer, and Instructor. 
Courses on LinkedIn, Egghead, Design+Code, and Skillshare. 

https://egghead.io/instructors/christina-gorton/?af=1c6fpu&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitter.com/coffeecraftcode"&gt;Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I hope to see you on future DEV streams! If you're interested in pairing, fill out &lt;a href="https://iamdeveloper.com/pair"&gt;this form&lt;/a&gt;. Christina and I would love to tackle an issue with you that the whole community could learn from.&lt;/p&gt;

&lt;p&gt;P.S. &lt;a href="https://twitch.tv/thepracticaldev"&gt;Follow DEV on Twitch&lt;/a&gt; to be notified when future streams begin and catch old streams on &lt;a href="https://www.youtube.com/c/thepracticaldevteam"&gt;YouTube&lt;/a&gt;&lt;/p&gt;

</description>
      <category>devstream</category>
      <category>pairprogramming</category>
      <category>serverless</category>
      <category>jamstack</category>
    </item>
    <item>
      <title>Why use Next.js + Strapi?</title>
      <author>Ruben Marcus</author>
      <pubDate>Fri, 07 May 2021 02:59:14 +0000</pubDate>
      <link>https://dev.to/rubenmarcus/why-use-next-js-strapi-16b1</link>
      <guid>https://dev.to/rubenmarcus/why-use-next-js-strapi-16b1</guid>
      <description>&lt;p&gt;At this article I will show you the advantages of doing a website with Strapi in the backend and Next.js in the frontend&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#first-of-all-what-is-headless-cms"&gt;
  &lt;/a&gt;
  First of all… What is Headless CMS?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tk_zsBLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcmwucc3i3zgy5l9mcpu.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tk_zsBLZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zcmwucc3i3zgy5l9mcpu.jpg" alt="Headless x Traditional CMS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In short, it is a content management system like WordPress, Drupal or Contentful in which content management is separate from the presentation layer (Front-end).&lt;/p&gt;

&lt;p&gt;The main advantage of this approach is that it is tech independent, which means that the website (can be made in SPA frameworks or as you wish), native apps or can be created using the tools or tech you want.&lt;/p&gt;

&lt;p&gt;The main disadvantage is that you need to manage two or more web applications instead of one. (Which can be a disadvantage, depending on the formation of your team.)&lt;/p&gt;

&lt;p&gt;There are CMS that come as Headless standard (API-based), and some that are GIT-based, and generate static websites.&lt;/p&gt;

&lt;p&gt;And others that are also based on API but that do not come in this architecture by default and it is necessary to use plugins.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The advantage of being Headless and API-based by default is that:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;you have a source of information and can make many applications for different devices from it.&lt;/li&gt;
&lt;li&gt;The fact that it is a core functionality of the CMS, indicates that the chance of support and updates to the Headless API are greater, whereas if it is a plugin the chance of not being supported may be more likely.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to know more about Headless CMS,than  take a look here: &lt;a href="//https:%20/headlesscms.org"&gt;https: /headlesscms.org/&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-use-strapi"&gt;
  &lt;/a&gt;
  Why use Strapi?
&lt;/h2&gt;

&lt;p&gt;Strapi is an Open Source CMS, made in Node.js and MongoDb, it also supports MYSQL, MariaDB, SQLite and PostgreSQL.&lt;/p&gt;

&lt;p&gt;Comes with easy deployment to AWS, Digital Ocean , Heroku and many other cloud services.&lt;/p&gt;

&lt;p&gt;It has rich documentation and several tutorials on how to use the CMS.&lt;/p&gt;

&lt;p&gt;It is possible to install &lt;a href="https://strapi.io/documentation/3.0.0-beta.x/installation/cli"&gt;locally via CLI&lt;/a&gt; or using &lt;a href="https://github.com/strapi/strapi-docker"&gt;Docker&lt;/a&gt;, or using online services such as &lt;a href="https://strapi.io/documentation/3.0.0-beta.x/installation/platformsh"&gt;Platform.sh&lt;/a&gt; or &lt;a href="https://strapi.io/documentation/3.0.0-beta.x/installation/digitalocean-one-click"&gt;Digital Ocean&lt;/a&gt;, or wherever you want.&lt;/p&gt;

&lt;p&gt;It is possible to do unit tests with Jest, or other test frameworks, since Strapi has a configurable webpack.&lt;/p&gt;

&lt;p&gt;Strapi, also has webhooks to trigger actions for other applications.&lt;/p&gt;

&lt;p&gt;Strapi's architecture is very simple and well-founded, it explains how to write plugins, how to model the Strapi API, how to manage the content to be exported.&lt;/p&gt;

&lt;p&gt;Strapi's learning curve might be between low and medium, it depends on the developer's knowledge with Node.js and the concept of CMS Headless, if the developer has any doubts he can take a look at the existing examples, tutorials or documentation.&lt;/p&gt;

&lt;p&gt;It is possible to restrict JWT apis calls to Strapi user groups.&lt;/p&gt;

&lt;p&gt;Internationalization is only possible with a workaround, creating fields suffixed by languages&lt;/p&gt;

&lt;p&gt;The main competitor of Strapi in the Node.js world is Ghost, and OpenSource is Directus (made in PHP), also WordPress with its Rest Api that since version 4.7 is part of the WordPress Core and no longer made by plugin.&lt;/p&gt;

&lt;p&gt;Of these 4 Open Source options, I consider Strapi the better, because you understand how simple it is to manage and extend it.&lt;/p&gt;

&lt;p&gt;WordPress in addition to security issues, has a different base concept than Strapi. You can achieve the same goal as Strapi, but by making more settings and using various plugins.&lt;/p&gt;

&lt;p&gt;Ghost presents a somewhat similar scenario, but often to do the same thing you do on Strapi you will need more work for the same thing. &lt;/p&gt;

&lt;p&gt;Ghost is very good on the security side, but on the content side, Strapi is simpler and more complete.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://directus.io/"&gt;Directus&lt;/a&gt; is one of the CMS that presents, a proposal very similar to Strapi, but its stack is made in PHP, and has bug reports critical by users.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-nextjs"&gt;
  &lt;/a&gt;
  Why Next.js?
&lt;/h2&gt;

&lt;p&gt;With the rise of SPAS frameworks, going from Angular.js, React, Angular 2+ and Vue,a major faced problem from apps rendered on the client,face it is the issue of SEO.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Frameworks like Next.js come to solve this problem.&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;Rendering the application via SSR (Server Side Rendering) or SSG (Static Site Generation),than the search engine can read the content of your page, and render it for show in its results.&lt;/p&gt;

&lt;p&gt;But the benefits go beyond that. Next.js increases the loading performance of your application. &lt;/p&gt;

&lt;p&gt;In a basic test on Google LightHouse (we will address this soon), an application with create-react-app x a Next.js SSR application, had a first meaningful paint with 87% less time than a React CSR application (Client-side Rendering), this is due to Next.js already render part of your application on the Server, bringing the content on the screen before loading everything on the client.&lt;/p&gt;

&lt;p&gt;It has a folder and links scheme that also allows the lazy-loading of modules, as well as automatic code-splitting.&lt;/p&gt;

&lt;p&gt;You can choose which pages you will render on the server and which you will render statically, making it a Hybrid app.&lt;/p&gt;

&lt;p&gt;Next.js supports AMP (Acellerated Mobile Pages): Where it wont render anything from Node.js and React, and only pages in AMP format.&lt;/p&gt;

&lt;p&gt;Next.js also supports the entire range of CSS universe, from preprocessors such as SASS, LESS and Stylus, as well as CSS Modules, Styled Components, CSS-in-JS, TailWind CSS, Bootstrap etc.&lt;/p&gt;

&lt;p&gt;Next.js has a very strong focus on performance, and has tools for you to measure that. (This will be the subject of a separate article).&lt;/p&gt;

&lt;p&gt;We are able to use Next.js also with TypeScript, assuring how we handle our application data using interfaces and types.&lt;/p&gt;

&lt;p&gt;Inside Next.js you can also do DynamicImports, using the ES2020 syntax, and generating components dynamically.&lt;/p&gt;

&lt;p&gt;These are some benefits of Next.js, in addition to solving and helping us with the SEO problems of the SPA frameworks, it gives us the entire React ecosystem, to be able to work, in addition to helping us, with a lean structure and a very rich documentation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;some companies using Next.js&lt;/strong&gt;: GoDaddy,Netflix,Marvel,Invision App, Tencent, Tiktok, Uber, Trip.com, HostGator, Auth0, Binance, Staples, TicketMaster, Playstation, IGN, AT&amp;amp;T, Hulu, Twitch, Nike, Lego, Material UI, Expo, Ferrari, Avocode, Styled Components, Volvo, The Economist,Workable, Vodafone, Coinmarketcap, Monday, Elastic, History Channel , A&amp;amp;E Tv, Lifetime, Hackernoon, Spotify, Pier, DAZN, Apify,CloudBees, Deno,Crazygames.com&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#nextjs-x-nuxt-x-angular-universal-x-other-react-ssr-frameworks"&gt;
  &lt;/a&gt;
  Next.js x Nuxt x Angular Universal x other React SSR Frameworks:
&lt;/h2&gt;

&lt;p&gt;There are other frameworks, which compete directly with Next.js &lt;/p&gt;

&lt;p&gt;The idea is not to make a comparison between them. But basically each one follows a tool, be it Nuxt.js with Vue, or Angular with Angular Universal.&lt;/p&gt;

&lt;p&gt;The idea is not to make a comparison here, because that would be a theme for an entire article, just to give an idea that there are other options on the market.&lt;/p&gt;

&lt;p&gt;Within the React ecosystem there are other ways to achieve the same goal, either with &lt;a href="https://github.com/jaredpalmer/after.js"&gt;After.js&lt;/a&gt;, &lt;a href="https://github.com/jaredpalmer/razzle"&gt;Razzle&lt;/a&gt; or &lt;a href="https://github.com/alexnm/react-ssr"&gt;React-SSR&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#starting-witn-nextjs-strapi-boilerplates"&gt;
  &lt;/a&gt;
  Starting witn Next.js + Strapi: Boilerplates
&lt;/h2&gt;

&lt;p&gt;Boilerplates are ready to use codes that allow us to start an application without having to configure it from scratch.&lt;/p&gt;

&lt;p&gt;They are very useful to go out coding our application without wasting time with installations and configurations.&lt;/p&gt;

&lt;p&gt;Below I will mention some that I think are good to start in the Next.js and Strapi universe:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/strapi/strapi-starter-react-blog"&gt;Strapi Next.js Blog Boilerplate&lt;/a&gt; (made by the Strapi team)&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/vercel/next.js/tree/canary/examples/cms-strapi"&gt;Next.js Strapi Example&lt;/a&gt; (made by the Next.js team)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  References:
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://strapi.io/documentation/"&gt;Strapi Documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://nextjs.org/docs"&gt;Next.js documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="https://medium.com/strapi/10-reasons-why-you-should-use-a-headless-cms-cea598880dc7"&gt;10 Reasons you should use a Headless CMS&lt;/a&gt;&lt;/p&gt;

</description>
      <category>nextjs</category>
      <category>react</category>
      <category>strapi</category>
      <category>headless</category>
    </item>
    <item>
      <title>Project 70 of 100 - Rick Redux</title>
      <author>James Hubert</author>
      <pubDate>Fri, 07 May 2021 02:48:39 +0000</pubDate>
      <link>https://dev.to/jwhubert91/project-70-of-100-rick-redux-4oan</link>
      <guid>https://dev.to/jwhubert91/project-70-of-100-rick-redux-4oan</guid>
      <description>&lt;p&gt;&lt;em&gt;Hey! I'm on a mission to make 100 React.js projects ending May 31st. Please follow my dev.to profile or my &lt;a href="https://www.twitter.com/jwhubert91"&gt;twitter&lt;/a&gt; for updates and feel free to reach out if you have questions. Thanks for your support!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Link to today's deployed app: &lt;a href="https://100-react-projects-day-70-redux-rick-ranker.netlify.app/"&gt;Link&lt;/a&gt;&lt;br&gt;
Link to the repo: &lt;a href="https://github.com/jwhubert91/100daysofreact/tree/master/day-70-redux-rick-ranker"&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;Today was another day of interacting with Redux at the most basic level. For those curious about my process or how I come up with these nearly useless project ideas, I do an hour a day of online programming coursework and follow it with an hour where I'm free to build whatever I can think of to practice the day's concepts.&lt;/p&gt;

&lt;p&gt;Right now I'm in the final segment of &lt;a href="https://scrimba.com/learn/react"&gt;Bob Ziroll's React Bootcamp on Scrimba&lt;/a&gt;, which I highly recommend if you're interested in learning React. I also highly recommend Scrimba for anyone learning web development.&lt;/p&gt;

&lt;p&gt;Anyway, on to the project. Today I built a web application from Create React App that embedded a Youtube video of the famous &lt;a href="https://en.wikipedia.org/wiki/Rickrolling"&gt;Rick Roll&lt;/a&gt; music video. The goal was to build a little application that interacted with a totally basic vanilla Javascript implementation of Redux for storing state. The actual Redux functionality was almost identical to &lt;a href="https://dev.to/jwhubert91/project-69-of-100-basic-redux-subscriber-16n6"&gt;yesterday's project&lt;/a&gt; except that it includes functionality for changing the title of the video, which changes the way the reducer looks.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-redux"&gt;
  &lt;/a&gt;
  Setting up Redux
&lt;/h2&gt;

&lt;p&gt;Here I'll walk you through what that Redux file looks like:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;First, we have to &lt;strong&gt;import Redux&lt;/strong&gt; (after installing it with &lt;code&gt;npm i redux&lt;/code&gt;) and include it in the file.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// require redux&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redux&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;redux&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Second, we need to set up our &lt;strong&gt;actions&lt;/strong&gt;. These tell our reducer (more on that later) what to do when it interacts with state. Notice this formally creates and at the same time restricts the ways in which we can interact with the application's state.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// define actions&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;upVote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;downVote&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOWNVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RENAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Next, we create a &lt;strong&gt;state object&lt;/strong&gt; just to put some initial values. This isn't a required part of using Redux, but it makes our lives easier in this particular application.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create state object&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Never Gonna Give You Up&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;After defining our actions, it's time to &lt;strong&gt;create the reducer&lt;/strong&gt;. This is the function that receives as an argument a previously-defined action, which typically has a payload, or data, that all together tell the reducer exactly how it should retrieve data from state to deliver that data in a meaningful way to components using the data.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create reducer&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;initialState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;UPVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;DOWNVOTE&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;votes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;RENAME&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nl"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;state&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;After our actions and reducer are set up, we can &lt;strong&gt;create a store&lt;/strong&gt;, which uses the built-in &lt;code&gt;createStore()&lt;/code&gt; method from the redux package. This, as the method says, creates a special store that has a lot of built in functionality that comes with the redux package. It's kind of like a really buffed-up version of the native React state.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// create store from reducer&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;redux&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;reducer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Then, we need to &lt;strong&gt;subscribe&lt;/strong&gt; to changes in the store. This is one of those pre-built redux methods I mentioned earlier that is available on redux stores. This method provides a callback that you can use to interact with the data in the store, as it is changed.
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// subscribe to store changes and console.log() them&lt;/span&gt;
&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getState&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;You&lt;/span&gt; &lt;span class="nx"&gt;are&lt;/span&gt; &lt;span class="nx"&gt;now&lt;/span&gt; &lt;span class="nx"&gt;free&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="nx"&gt;your&lt;/span&gt; &lt;span class="nx"&gt;actions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="nx"&gt;I&lt;/span&gt; &lt;span class="nx"&gt;am&lt;/span&gt; &lt;span class="nx"&gt;exporting&lt;/span&gt; &lt;span class="nx"&gt;them&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nx"&gt;use&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;other&lt;/span&gt; &lt;span class="nx"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
// export&lt;br&gt;
export {upVote,downVote,rename,store};&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
##Interacting with our Reducer, and the Store
The next part of this project is to build out functionality in our React components that allows the user to interact with state. I *know for a fact* that I am not using Redux in the React way. I'm pretty sure there's even a special library for using Redux in React that I'm not using here. But remember what I said about using tech from my courses in that day's projects? Yeah, so we'll hopefully get to the React uses tomorrow.

OK- with warnings out of the way, here was my solution for interacting with Redux in other components. In my Control component, which is a JSX component that appears below the embedded Youtube video and has the buttons and votes readout, I have upvote and downvote buttons. In order for these buttons to interact with the store from our Redux file and actually use the actions we built to get data from the reducer, we have to bring in the store and our `upVote` and `downVote` functions: 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
import React,{useState,useEffect} from 'react'&lt;br&gt;
import {store,upVote,downVote} from '../redux'&lt;/p&gt;

&lt;p&gt;function Contol() {&lt;br&gt;
  const [videoState,setVideoState] = useState({})&lt;/p&gt;

&lt;p&gt;useEffect(() =&amp;gt; {&lt;br&gt;
    setVideoState(setVideoState(store.getState()))&lt;br&gt;
  }, [])&lt;/p&gt;

&lt;p&gt;store.subscribe(() =&amp;gt; {&lt;br&gt;
    setVideoState(store.getState())&lt;br&gt;
  })&lt;/p&gt;

&lt;p&gt;const handleUpVote = () =&amp;gt; {&lt;br&gt;
    store.dispatch(upVote())&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;const handleDownVote = () =&amp;gt; {&lt;br&gt;
    store.dispatch(downVote())&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;return(...)&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
As you can see I handle up and down votes with their own handler functions which call `store.dispatch()` to dispatch the actions and trigger a change in the store, which the subscriber has access to, and when changes are detected there I save those changes in a local state variable for use in this component. 

Here is how the component uses it, in the JSX:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
  return (&lt;br&gt;
    &lt;/p&gt;
&lt;br&gt;
      &lt;br&gt;
        &lt;h3&gt;Votes: {videoState ? videoState.votes : 0}&lt;/h3&gt;
&lt;br&gt;
      &lt;br&gt;
      &lt;br&gt;
        Vote Down 👎&lt;br&gt;
        Vote Up 👍&lt;br&gt;
      &lt;br&gt;
    &lt;br&gt;
  )&lt;br&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Above you can see that we are using the votes from state, and the two actions we imported from our redux file.

Next, I built the edit functionality into the `TitleEdit` component. For that, I only imported the store and my rename action. I also used an isEditing boolean flag to display either an input or the title in plain text. If the user clicks 'Save' after editing, we trigger the rename action in the `handleRename()` function.

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
import React,{useState} from 'react'&lt;br&gt;
import {store,rename} from '../redux'&lt;/p&gt;

&lt;p&gt;function TitleEdit() {&lt;br&gt;
  const [isEditing,setIsEditing] = useState(false)&lt;br&gt;
  const [currentName,setCurrentName] = useState("Never Gonna Give You Up")&lt;/p&gt;

&lt;p&gt;store.subscribe(() =&amp;gt; {&lt;br&gt;
    const storeObject = store.getState()&lt;br&gt;
    setCurrentName(storeObject.name)&lt;br&gt;
  })&lt;/p&gt;

&lt;p&gt;const handleRename = () =&amp;gt; {&lt;br&gt;
    store.dispatch(rename(currentName))&lt;br&gt;
  }&lt;/p&gt;

&lt;p&gt;function handleEditClick() {&lt;br&gt;
    isEditing &amp;amp;&amp;amp; (&lt;br&gt;
      // was editing, now save and go back to normal&lt;br&gt;
      handleRename()&lt;br&gt;
    )&lt;br&gt;
    setIsEditing(prevState =&amp;gt; !prevState)&lt;br&gt;
  }&lt;br&gt;
  return(...)&lt;br&gt;
...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;
Now here is the JSX:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
JS&lt;br&gt;
return (&lt;br&gt;
    &lt;/p&gt;
&lt;br&gt;
      &lt;h1&gt;
&lt;br&gt;
        {isEditing ? &lt;br&gt;
          &lt;br&gt;
            
              type="text" &lt;br&gt;
              placeholder="Enter new title"&lt;br&gt;
              value={currentName}&lt;br&gt;
              className="form-control"&lt;br&gt;
              onChange={e =&amp;gt; setCurrentName(e.currentTarget.value)}&lt;br&gt;
            &amp;gt;&lt;br&gt;
           :&lt;br&gt;
         &lt;span&gt;{currentName}{' '}&lt;/span&gt;&lt;br&gt;
        }&lt;br&gt;
      
        onClick={handleEditClick} &lt;br&gt;
        className="btn btn-light btn-sm"&lt;br&gt;
      &amp;gt;&lt;br&gt;
        {isEditing ? "Save" : "Edit"}&lt;br&gt;
      &lt;br&gt;
      &lt;/h1&gt;
&lt;br&gt;
    &lt;br&gt;
  )



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;


And that is my fully interactive custom made Redux state. If you're interested in this subject, I highly recommend you read more about it [here](https://www.youtube.com/watch?v=oHg5SJYRHA0), where it is handled in more detail.

**If you like projects like this and want to stay up to date with more, check out my Twitter [@jwhubert91](https://twitter.com/jwhubert91), I follow back! See you tomorrow for another project.**
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>100daysofcode</category>
    </item>
    <item>
      <title>Criando Readme incríveis! 📖</title>
      <author>Tulio Calil</author>
      <pubDate>Fri, 07 May 2021 01:44:40 +0000</pubDate>
      <link>https://dev.to/tuliocalil/criando-readme-incriveis-48h4</link>
      <guid>https://dev.to/tuliocalil/criando-readme-incriveis-48h4</guid>
      <description>&lt;p&gt;Você sabe criar arquivos readme para seus repositórios de uma forma atrativa e informativa, ou apenas deixa o &lt;a href="https://github.com/facebook/create-react-app/tree/master/packages/cra-template/template"&gt;readme padrão do React&lt;/a&gt; (just a joke) ?&lt;br&gt;
Nesse post vamos ver alguns exemplos e dicas de como deixar nosso arquivo de readme super legal e organizado, então vamos por a mão na massa.md. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="#badges"&gt; Badges&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#logo"&gt; Logo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#titulo-e-descri%C3%A7%C3%A3o"&gt; Titulo e descrição&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#gif-ou-imagem-demo"&gt; Gif ou imagem demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#sess%C3%B5es"&gt; Sessões&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#sobre"&gt; Sobre&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#como-utilizar"&gt; Como utilizar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#instalar"&gt; Instalar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#como-rodar-e-como-utilizar"&gt; Como rodar e como utilizar&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#demo"&gt; Demo&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#campos-do-github"&gt; Campos do Github&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#utilize-todo-o-poder-do-markdown"&gt; Utilize todo o poder do Markdown&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="#conclus%C3%A3o"&gt; Conclusão&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;
  &lt;a href="#generated-with-summaryze-forem"&gt;
  &lt;/a&gt;
  generated with &lt;a href="https://summaryze-forem.vercel.app/"&gt;Summaryze Forem 🌱&lt;/a&gt;
&lt;/h6&gt;
&lt;h2&gt;
  &lt;a href="#badges"&gt;
  &lt;/a&gt;
  Badges
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f2w0QONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmeglsi08f0b593k1io5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f2w0QONO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hmeglsi08f0b593k1io5.png" alt="Github Badges"&gt;&lt;/a&gt;&lt;br&gt;
Badges são super legais para adicionar no nosso arquivo, além de dar um overview super rápido e deixar o projeto bem bonito.&lt;br&gt;
Algumas que eu gosto muito de utilizar são as de tecnologia, dizendo algum framework/lib que utilizei, status da pipeline, stars e licença.&lt;br&gt;
Alguns exemplos legais:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--WpIkG3NH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-TypeGraphQL-%2523C04392%3F%26style%3Dfor-the-badge" class="article-body-image-wrapper"&gt;&lt;img alt="Type-graphql" src="https://res.cloudinary.com/practicaldev/image/fetch/s--WpIkG3NH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/-TypeGraphQL-%2523C04392%3F%26style%3Dfor-the-badge"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TQxGeZvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/nextjs-%2523000000.svg%3F%26style%3Dfor-the-badge%26logo%3Dnext.js%26logoColor%3Dwhite" class="article-body-image-wrapper"&gt;&lt;img alt="Next JS" src="https://res.cloudinary.com/practicaldev/image/fetch/s--TQxGeZvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/nextjs-%2523000000.svg%3F%26style%3Dfor-the-badge%26logo%3Dnext.js%26logoColor%3Dwhite"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qGNajCcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/firebase-%2523039BE5.svg%3F%26style%3Dfor-the-badge%26logo%3Dfirebase" class="article-body-image-wrapper"&gt;&lt;img alt="Firebase" src="https://res.cloudinary.com/practicaldev/image/fetch/s--qGNajCcg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/firebase-%2523039BE5.svg%3F%26style%3Dfor-the-badge%26logo%3Dfirebase"&gt;&lt;/a&gt;&lt;br&gt;
Você pode criar suas próprias badges utilizando o &lt;a href="https://shields.io/"&gt;shields.io&lt;/a&gt; ou pode encontrar varias prontas, inclusive nesse repositório aqui: &lt;a href="https://github.com/Ileriayo/markdown-badges"&gt;https://github.com/Ileriayo/markdown-badges&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#logo"&gt;
  &lt;/a&gt;
  Logo
&lt;/h2&gt;

&lt;p&gt;Criar uma logo ou utilizar algo pra representar é algo super legal e que da um toque super bonito pra o repo, é uma dica bem opcional, mas que faz muita diferença.&lt;br&gt;
Uma dica que eu dou pra quem não tem tanta afinidade com design é utilizar serviços de criação de logo online, como o &lt;a href="https://www.launchaco.com/logo/"&gt;Launchaco&lt;/a&gt; ou encontrar uma logo open source aqui: &lt;a href="https://openlogos.org/"&gt;https://openlogos.org/&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/elixir-http-request"&gt;
        elixir-http-request
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      a study project with elixir to make N requests on some url
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
HttpRequest&lt;/h1&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/428ac5bbb0a1201ff8b1209ac359456bd69a1324416953c153b2f2dacb0cebcd/68747470733a2f2f656c697869722d6c616e672e6f72672f696d616765732f6c6f676f2f6c6f676f2e706e67"&gt;&lt;img src="https://camo.githubusercontent.com/428ac5bbb0a1201ff8b1209ac359456bd69a1324416953c153b2f2dacb0cebcd/68747470733a2f2f656c697869722d6c616e672e6f72672f696d616765732f6c6f676f2f6c6f676f2e706e67" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;A simple "application" to make requests n times for a url&lt;/strong&gt;
&lt;strong&gt;this is a study project with elixir and i used it to do a simple stress test on my server/database&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;You can execute the Iex and call the module and the function&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex -S mix&lt;/pre&gt;

&lt;/div&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex(1)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;HttpRequest.execute(5, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://www.google.com&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;This will make five request for '&lt;a href="http://www.google.com" rel="nofollow"&gt;www.google.com&lt;/a&gt;'.
You can pass a token too:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex(1)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt;HttpRequest.execute(5, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;https://www.google.com&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;, &lt;span class="pl-s"&gt;&lt;span class="pl-pds"&gt;'&lt;/span&gt;Bearer 123123123&lt;span class="pl-pds"&gt;'&lt;/span&gt;&lt;/span&gt;)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;And you can check the doc running:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;iex(1)&lt;span class="pl-k"&gt;&amp;gt;&lt;/span&gt; h(HttpRequest.execute)&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Made with ❤ in Bahia, Brasil.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/elixir-http-request"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#titulo-e-descri%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Titulo e descrição
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7l6L8Kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyep52sph2l8ulyivff4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7l6L8Kwu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dyep52sph2l8ulyivff4.png" alt="Titulo e descrição"&gt;&lt;/a&gt;&lt;br&gt;
Esse é super importante, lembre sempre de adicionar o titulo e a descrição do seu projeto de forma simples e bem direta.&lt;br&gt;
Você pode criar o titulo e logo abaixo a descrição, ou criar uma sessão para a descrição depois do titulo.&lt;/p&gt;

&lt;p&gt;Utilize as tags do markdown para isso:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# Meu projeto&lt;/span&gt;
Descrição do meu projeto...
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h2&gt;
  &lt;a href="#gif-ou-imagem-demo"&gt;
  &lt;/a&gt;
  Gif ou imagem demo
&lt;/h2&gt;

&lt;p&gt;É super legal quando a gente entra em um repo e tem logo de cara uma prévia do que esperamos ver, adicionar uma imagem ou um vídeo para isso é uma dica super valida.&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/summaryze-forem"&gt;
        summaryze-forem
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Create posts summary from forem platform(like dev.to) easy
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Summaryze Forem 📑
&lt;/h1&gt;
&lt;p&gt;
  &lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tuliocll/summaryze-forem/master/public/images/how-to.gif"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7sHc5gf6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/tuliocll/summaryze-forem/master/public/images/how-to.gif"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/cc96d7d28a6ca21ddbb1f2521d751d375230ed840271e6a4c8694cf87cc60c14/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732532302d2532333433383533442e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="NodeJS" src="https://camo.githubusercontent.com/cc96d7d28a6ca21ddbb1f2521d751d375230ed840271e6a4c8694cf87cc60c14/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6f64652e6a732532302d2532333433383533442e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6f64652e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/62d37abe760867620e0baea1066303719d630a82936837ba7bff6b0c754e3c9f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a6176617363726970742532302d2532333332333333302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d253233463744463145"&gt;&lt;img alt="JavaScript" src="https://camo.githubusercontent.com/62d37abe760867620e0baea1066303719d630a82936837ba7bff6b0c754e3c9f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6a6176617363726970742532302d2532333332333333302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6a617661736372697074266c6f676f436f6c6f723d253233463744463145"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/43bf48f000ca16dcd5cc91cb1ad4491b2e8d2547e4abe7fc8fe6e36ae682e584/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742532306a732532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Next JS" src="https://camo.githubusercontent.com/43bf48f000ca16dcd5cc91cb1ad4491b2e8d2547e4abe7fc8fe6e36ae682e584/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6e6578742532306a732532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6e6578742e6a73266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/77d868d39224471e479794e6fc439e2951f4a044d1facded66c048bae75aa00f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Vercel" src="https://camo.githubusercontent.com/77d868d39224471e479794e6fc439e2951f4a044d1facded66c048bae75aa00f/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f76657263656c2532302d2532333030303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d76657263656c266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a9a2d68ad493ff831774f24528ff151a3fd455c80122dcaa44af2475300b51b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d3041304130413f7374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Dev.to blog" src="https://camo.githubusercontent.com/a9a2d68ad493ff831774f24528ff151a3fd455c80122dcaa44af2475300b51b5/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d3041304130413f7374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/42b5cd94dbe9961d5b1071ea4dae36e2b63d35a8e6e56e7bf91fedf28988c80c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6669676d612532302d2532334632344531452e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669676d61266c6f676f436f6c6f723d7768697465"&gt;&lt;img alt="Figma" src="https://camo.githubusercontent.com/42b5cd94dbe9961d5b1071ea4dae36e2b63d35a8e6e56e7bf91fedf28988c80c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6669676d612532302d2532334632344531452e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6669676d61266c6f676f436f6c6f723d7768697465"&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;
About it📖
&lt;/h2&gt;
&lt;p&gt;Inspired on my &lt;a href="https://github.com/Cledersonbc"&gt;friend&lt;/a&gt; project: &lt;a href="https://github.com/autociencia/summaryze"&gt;Summaryze&lt;/a&gt;, Summaryze Forem is a tool write on javascript with &lt;a href="https://nextjs.org/" rel="nofollow"&gt;NextJS&lt;/a&gt; that use web scrap to get all anchor links from a post on &lt;a href="https://www.forem.com/" rel="nofollow"&gt;forem&lt;/a&gt; plataforms(like dev.to), format it and create a markdown summary fast and easy
I have this necessity after write &lt;a href="https://dev.to/tuliocalil/criando-extensoes-para-o-google-chrome-com-react-1laa" rel="nofollow"&gt;this post&lt;/a&gt; and being too lazy to do the summary, so i decide to create this tool, hope you like it.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.figma.com/file/ywNwI4gYMH3cXiUIZ9ZiuS/summaryze-dev?node-id=0%3A1" rel="nofollow"&gt;Here&lt;/a&gt; you can see the figma prototype.&lt;/p&gt;
&lt;h3&gt;
Frameworks and Libs 🛠
&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Nextjs&lt;/li&gt;
&lt;li&gt;Node Fetch&lt;/li&gt;
&lt;li&gt;Cheerio&lt;/li&gt;
&lt;li&gt;React Tabs&lt;/li&gt;
&lt;li&gt;React Toastify&lt;/li&gt;
&lt;li&gt;React Icons&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
How to use it ❓
&lt;/h2&gt;
&lt;p&gt;Check &lt;a href="https://summaryze-forem.vercel.app/#how-to-use-it" rel="nofollow"&gt;here&lt;/a&gt; a quick guide.&lt;/p&gt;
&lt;h2&gt;
Install 🚀
&lt;/h2&gt;
&lt;p&gt;Clone the project:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;git clone https://github.com/tuliocll/summaryze-forem.git&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Navigate to project folder and install dependencies:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;&lt;span class="pl-c1"&gt;cd&lt;/span&gt; summaryze-forem
yarn
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;or&lt;/span&gt;
npm install&lt;/pre&gt;

&lt;/div&gt;
&lt;p&gt;Run the project on dev mode:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn dev
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;or&lt;/span&gt;
npm run dev&lt;/pre&gt;

&lt;/div&gt;
&lt;h3&gt;
Buy me a coffe! ☕
&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://ko-fi.com/tuliocll" rel="nofollow"&gt;&lt;img alt="Ko-Fi" src="https://camo.githubusercontent.com/e9940c47ca681beefe2d68eb806f77ee026a91a6976e53f50449e2f9f60187a7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4b6f2d2d66692d4631363036313f7374796c653d666f722d7468652d6261646765266c6f676f3d6b6f2d6669266c6f676f436f6c6f723d7768697465"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;
&lt;h3&gt;
Made with &lt;/h3&gt;…&lt;/div&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/summaryze-forem"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#sess%C3%B5es"&gt;
  &lt;/a&gt;
  Sessões
&lt;/h2&gt;

&lt;p&gt;Eu gosto de dividir o projeto em varias sessões: sobre, como funciona, como instalar etc...&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#sobre"&gt;
  &lt;/a&gt;
  Sobre
&lt;/h4&gt;

&lt;p&gt;Gosto de criar uma sessão de sobre e detalhar mais sobre o projeto, o que me motivou, como ele foi feito etc.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#como-utilizar"&gt;
  &lt;/a&gt;
  Como utilizar
&lt;/h4&gt;

&lt;p&gt;É legal uma parte falando como utilizar o projeto (caso seja necessário).&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#instalar"&gt;
  &lt;/a&gt;
  Instalar
&lt;/h4&gt;

&lt;p&gt;Uma sessão mostrando comando a comando como instalar o projeto também é super valido.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#como-rodar-e-como-utilizar"&gt;
  &lt;/a&gt;
  Como rodar e como utilizar
&lt;/h4&gt;

&lt;p&gt;Sempre deixo os comandos de como rodar em cada ambiente(caso seja o caso), prontos para serem copiados e colados.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kiN5cmFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp2b7qlackf4zjbflhqz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kiN5cmFI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jp2b7qlackf4zjbflhqz.png" alt="Sessões"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6chjzcl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j0lyli3stbnmoh52oun.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6chjzcl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4j0lyli3stbnmoh52oun.png" alt="Demo de projeto"&gt;&lt;/a&gt;&lt;br&gt;
Caso seja possível, é sempre legal deixar um link de uma demo online, dessa forma, se for um projeto pessoal ou algum estudo que você fez, quem estiver vendo conseguirá ter a experiência de uso sem precisar fazer todo o processo de instalação.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#campos-do-github"&gt;
  &lt;/a&gt;
  Campos do Github
&lt;/h2&gt;

&lt;p&gt;Preencha campos específicos do github, como: about e as tag.&lt;br&gt;
Ajuda seu repositório ser encontrado facilmente e deixa mais organizado também.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UTLfGEoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kaeoc7p7jnncn64vnni.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UTLfGEoA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0kaeoc7p7jnncn64vnni.png" alt="Github"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#utilize-todo-o-poder-do-markdown"&gt;
  &lt;/a&gt;
  Utilize todo o poder do Markdown
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ME9GNUZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91wqym60u9v38ixsn67v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ME9GNUZH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91wqym60u9v38ixsn67v.png" alt="Tabelas"&gt;&lt;/a&gt;&lt;br&gt;
O Markdown nos oferece coisas incríveis, assim como no html conseguimos criar links, tabelas, títulos e varias outras coisas. Eu recomendo duas coisas aqui nesse ponto, a primeira é que você &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet"&gt;leia essa documentação&lt;/a&gt; sobre as tags do markdown e a segunda é um &lt;a href="https://stackedit.io/app#"&gt;editor em markdown online&lt;/a&gt; com varias dessas tags em forma de um editor de texto.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#conclus%C3%A3o"&gt;
  &lt;/a&gt;
  Conclusão
&lt;/h2&gt;

&lt;p&gt;Vou deixar aqui alguns repositórios meus que tem uns readme que eu gosto bastante e caso vocês queiram se inspirar.&lt;br&gt;
Conhece algum repo que tem um readme muito legal ? Comenta pra gente!&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/rn-darkmode"&gt;
        rn-darkmode
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Arquivos do tutorial Darkmode para React Native⚛️, confira no YT
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Tutorial Darkmode com React Native⚛️ e Styled components💅🏾!&lt;/h1&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://camo.githubusercontent.com/a1636ccbe7ae4e15bd36c3be09cddebe5f3cbd6b24d716dacf07d061b96b83c4/68747470733a2f2f312e62702e626c6f6773706f742e636f6d2f2d5f4957326371796f5776592f586f357171557943317a492f41414141414141424152512f7236467853476e626b6849736d61424b6b4c5253694451534e30456a6f48594951434c63424741735948512f733332302f6361706125324225323532383125323532392e6a7067"&gt;&lt;img src="https://camo.githubusercontent.com/a1636ccbe7ae4e15bd36c3be09cddebe5f3cbd6b24d716dacf07d061b96b83c4/68747470733a2f2f312e62702e626c6f6773706f742e636f6d2f2d5f4957326371796f5776592f586f357171557943317a492f41414141414141424152512f7236467853476e626b6849736d61424b6b4c5253694451534e30456a6f48594951434c63424741735948512f733332302f6361706125324225323532383125323532392e6a7067" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="http://youtube.com/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/2d6d5bee035f276482b63818e64d522d399241dd15afdddf5a48f3f87e1dba36/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f596f75747562652d496e7363726576612d2d73652d726564" alt="Followers"&gt;&lt;/a&gt;&lt;a href="https://github.com/tuliocll"&gt;&lt;img src="https://camo.githubusercontent.com/7ada08b365a1178195f5bf688ac5dfc2daa2b814a327fd7b69c13da516c8a118/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f74756c696f636c6c3f7374796c653d736f6369616c" alt="Followers"&gt;&lt;/a&gt;&lt;a href="https://raw.githubusercontent.com/tuliocll/rn-darkmode/master/#"&gt;&lt;img src="https://camo.githubusercontent.com/f8ae7861942e1cf172ac74be8f4aba7c656a01b3bc1faf52ded387133b7b1dff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f74756c696f636c6c2f7361677265732d626f743f7374796c653d736f6369616c" alt="Stars"&gt;&lt;/a&gt;&lt;a href="https://twitter.com/BotSagres" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a5f3d892efae170dc494fd7b5f86b153d625adad0dd0eaaa5d9b1f93c260125e/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f74756c696f63616c696c3f7374796c653d736f6369616c" alt="Follow"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h2&gt;
📖Sobre&lt;/h2&gt;
&lt;p&gt;Este repositorio contem o projeto final e o projeto base para o tutorial do darkmode com styled components, Animação com React Native, Contexto e estado global com React Native e afins, confira na tabela mais abaixo.&lt;/p&gt;
&lt;h3&gt;
🔀Branchs:&lt;/h3&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Nome da Branch&lt;/th&gt;
&lt;th&gt;Descrição&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Master&lt;/td&gt;
&lt;td&gt;Conteúdo inicial do tutorial, projeto base.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;darkModeComplete&lt;/td&gt;
&lt;td&gt;Tutorial do darkmode completo, todos os arquivos configurados e funcionando.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;darkModeAnimation&lt;/td&gt;
&lt;td&gt;Conteúdo tutorial de animação e handle completo, configurado e funcionando.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;darkModePersist&lt;/td&gt;
&lt;td&gt;Contéudo final do tutorial de persistência de dados e estado global, configurado e funcionando.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h2&gt;
👨🏿‍💻Iniciando&lt;/h2&gt;
&lt;p&gt;Clonar o repositorio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/tuliocll/rn-darkmode.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instale as dependencias:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn
ou
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;
🎦Siga o(s) vídeo(s);&lt;/h2&gt;
&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tutorial&lt;/th&gt;
&lt;th&gt;Link&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DarkMode StyledComponents&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/nJN7UNZetlg" rel="nofollow"&gt;https://youtu.be/nJN7UNZetlg&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Animação Tutorial Pt.1&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/AAYd5Vob0jY" rel="nofollow"&gt;https://youtu.be/AAYd5Vob0jY&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Animação Tutorial Pt.2&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/Qc3j55C_1U8" rel="nofollow"&gt;https://youtu.be/Qc3j55C_1U8&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Context API e React Navigation&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/cLkX5MtZjEo" rel="nofollow"&gt;https://youtu.be/cLkX5MtZjEo&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Context API e Async Storage&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/gPpH-mTEwbM" rel="nofollow"&gt;https://youtu.be/gPpH-mTEwbM&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;React Navigation: Alterando Rotas e Parâmetros&lt;/td&gt;
&lt;td&gt;&lt;a href="https://youtu.be/C2k6kwSi9FY" rel="nofollow"&gt;https://youtu.be/C2k6kwSi9FY&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;
&lt;h3&gt;
🙅🏿‍♂️End&lt;/h3&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/rn-darkmode"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/sagres-bot"&gt;
        sagres-bot
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Um bot que diz diariamente se o sagres está online ou não e posta no twitter.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Sagres Bot - Twitter&lt;/h1&gt;
&lt;p&gt;
&lt;a rel="noopener noreferrer" href="https://github.com/tuliocll/sagres-bot/blob/master/logo.png"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gJk31zKS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tuliocll/sagres-bot/raw/master/logo.png" alt="Sagres bot preview" width="320px"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;div&gt;
&lt;p&gt;&lt;a href="https://github.com/tuliocll"&gt;&lt;img src="https://camo.githubusercontent.com/7ada08b365a1178195f5bf688ac5dfc2daa2b814a327fd7b69c13da516c8a118/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f6c6c6f776572732f74756c696f636c6c3f7374796c653d736f6369616c" alt="Followers"&gt;&lt;/a&gt;
&lt;a href="https://raw.githubusercontent.com/tuliocll/sagres-bot/master/Readme.md/#"&gt;&lt;img src="https://camo.githubusercontent.com/f8ae7861942e1cf172ac74be8f4aba7c656a01b3bc1faf52ded387133b7b1dff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f74756c696f636c6c2f7361677265732d626f743f7374796c653d736f6369616c" alt="Stars"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/BotSagres" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/8bdfdc7f19ad683666e10a20fbfac97834dc67e3f0cd1669c59038042efbef7a/68747470733a2f2f696d672e736869656c64732e696f2f747769747465722f666f6c6c6f772f426f745361677265733f7374796c653d736f6369616c" alt="Follow"&gt;&lt;/a&gt;
&lt;a href="https://nodejs.org" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/73686fc6e292982441a269ff09b6b2f9a5e0d9b54221c0b8b452f0aeff8fded6/68747470733a2f2f696d672e736869656c64732e696f2f6e6f64652f762f6c7473" alt="Node"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;  

&lt;p&gt;&lt;strong&gt;Instalando&lt;/strong&gt;
Clonar o repositorio:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/tuliocll/sagres-bot.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dentro da pasta do projeto, instale as dependencias:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn
ou
npm install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure as api keys (você precisa criar uma conta de desenvolvedor no twitter)
E por fim, é só rodar&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node src/index.js
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;
End&lt;/h3&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/sagres-bot"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;



&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tuliocll"&gt;
        tuliocll
      &lt;/a&gt; / &lt;a href="https://github.com/tuliocll/todo-google-chrome"&gt;
        todo-google-chrome
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Código utilizado para escrever o tutorial "Criando uma extensão para o Google Chrome com React", leia aqui:
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
Criando uma extensão para o Google Chrome com React&lt;/h1&gt;
&lt;div&gt;
&lt;p&gt;&lt;a rel="noopener noreferrer" href="https://raw.githubusercontent.com/tuliocll/todo-google-chrome/master/logo.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kb4Mj33D--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/tuliocll/todo-google-chrome/master/logo.jpg" alt=""&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;h3&gt;
Este projeto foi utilizado como base para o tutorial que escrevi &lt;a href="https://dev.to/tuliocalil/criando-extensoes-para-o-google-chrome-com-react-1laa" rel="nofollow"&gt;aqui no dev.to, clique para ler&lt;/a&gt;.&lt;/h3&gt;

&lt;h2&gt;
🚀 Rodando o projeto&lt;/h2&gt;
&lt;p&gt;Para rodar o projeto em modo de desenvolvimento, basta executar:&lt;/p&gt;
&lt;div class="highlight highlight-source-shell js-code-highlight"&gt;
&lt;pre&gt;yarn start
&lt;span class="pl-c"&gt;&lt;span class="pl-c"&gt;#&lt;/span&gt;ou&lt;/span&gt;
npm start&lt;/pre&gt;

&lt;/div&gt;
&lt;h2&gt;
🔥 Gerando build&lt;/h2&gt;
&lt;p&gt;Para gerar build e usar a extensão, consulte o post &lt;a href="https://dev.to/tuliocalil/criando-extensoes-para-o-google-chrome-com-react-1laa" rel="nofollow"&gt;aqui&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;
🎯 Me siga&lt;/h2&gt;
&lt;div&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/9be8550de2c37674f3d40bd4f2f26894a6c5eba03d34ad31804529b6ba5632f6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f796f75747562652d2532334646303030302e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d796f7574756265266c6f676f436f6c6f723d7768697465" alt="Youtube"&gt;&lt;/a&gt;
&lt;a href="https://dev.to/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/84a496c552d03a422342f681f8a81b2ea653b1ad4da007b3503114e8c21a03e9/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6465762e746f2d2532333041304130412e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6465762e746f266c6f676f436f6c6f723d7768697465" alt="Dev.to"&gt;&lt;/a&gt;
&lt;a href="https://twitter.com/tuliocalil" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/e1c2fd3bcd4ed13889ed78d1e814261a7cfbc79ae826198b7813850b15a8d956/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f747769747465722d2532333144413146322e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d74776974746572266c6f676f436f6c6f723d7768697465" alt="Twitter"&gt;&lt;/a&gt;
&lt;a href="https://www.linkedin.com/in/tuliocalil/" rel="nofollow"&gt;&lt;img src="https://camo.githubusercontent.com/a493f6833f99fb3c85788d6d9305e6b7a42b838e5ee5d138fd9a8214a7e77472/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c696e6b6564696e2d2532333030373742352e7376673f267374796c653d666f722d7468652d6261646765266c6f676f3d6c696e6b6564696e266c6f676f436f6c6f723d7768697465" alt="LinkedIn"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
Feito com 💙 na Bahia, Brasil.&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tuliocll/todo-google-chrome"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


</description>
      <category>github</category>
      <category>git</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Typescript vs Javascript</title>
      <author>kpiteng</author>
      <pubDate>Fri, 07 May 2021 01:38:53 +0000</pubDate>
      <link>https://dev.to/kpiteng/typescript-vs-javascript-1pcd</link>
      <guid>https://dev.to/kpiteng/typescript-vs-javascript-1pcd</guid>
      <description>&lt;p&gt;TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. Current Stable release: 4.2.3 / 5 March 2021. It has extensions: ts,.tsx.&lt;/p&gt;

&lt;p&gt;TypeScript used to develop JavaScript applications for both client-side and server-side execution. Typescipt describe the shape of an object, also validate that your code is working correctly. All valid JavaScript code is also TypeScript code.&lt;/p&gt;

&lt;p&gt;TypeScript code is transformed into JavaScript code via the TypeScript compiler or Babel. This JavaScript is clean, simple code which runs anywhere JavaScript runs: In a browser, on Node.JS or in your apps.&lt;/p&gt;

&lt;p&gt;Typescript support in Visual Studio, Visual Studio Code, Nova, Atom, Sublime Text, Emacs, Vim, WebStorm and Eclipse. Provide wide range of accessibility &amp;amp; usablity.&lt;/p&gt;

&lt;p&gt;Typescript is combination of static type checking with intelligent code completion provides a significant boost in developer productivity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typescript-vs-javascript"&gt;
  &lt;/a&gt;
  TypeScript vs JavaScript
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Type&lt;/strong&gt;&lt;br&gt;
TS: TS is strongly type object oriented compiled langauge.&lt;br&gt;
JS: Javascript is a light weight, interpreted programming language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design &amp;amp; Developed by&lt;/strong&gt;&lt;br&gt;
TS: Anders Heijsberg at Microsoft&lt;br&gt;
JS: J Brendan Eich at Netscape Communications Coropration, Mozilla Foundation, ECMA International&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Light/Heavy Weight&lt;/strong&gt;&lt;br&gt;
TS: Heavy Weighted interpreted programming language&lt;br&gt;
JS - Light weighted, design for development of large application and trans compile to JS&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Side/Server Side&lt;/strong&gt;&lt;br&gt;
TS: Specially used in Client Side&lt;br&gt;
JS: Both client side &amp;amp; server side&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;File Extension&lt;/strong&gt;&lt;br&gt;
TS: .ts, .tsx&lt;br&gt;
JS: .js, .jsx&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Syntax&lt;/strong&gt;&lt;br&gt;
TS: Modules, Functions, Variable, Statement &amp;amp; Expression, Comments&lt;br&gt;
JS: All Statement are written within Script tag, tell browser to start interpreting text between script tag&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefits&lt;/strong&gt;&lt;br&gt;
TS: Static Typing, Better Choice Of large Coding Projects, Better For Collaboration - Type Safetly, Warning, Options, Required, Better Productivity, ECMA 6 code, Dynamic Typing, Auto Compilation are help developers to boost their productivity&lt;br&gt;
JS: Huge active community, Supported Native Browsers, While for TS will first complied and convert to js, which is extra step, More flexibility&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Want to start with Typescript, Let's start!&lt;/strong&gt; Join Us &lt;a href="http://www.kpiteng.com"&gt;www.kpiteng.com&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-us-"&gt;
  &lt;/a&gt;
  Connect Us -
&lt;/h3&gt;

&lt;p&gt;KPITENG&lt;br&gt;
Digital Transformation Service Provider&lt;br&gt;
&lt;a href="http://www.kpiteng.com"&gt;www.kpiteng.com&lt;/a&gt;&lt;br&gt;
&lt;a href="mailto:hello@kpiteng.com"&gt;hello@kpiteng.com&lt;/a&gt;&lt;/p&gt;

</description>
      <category>typescript</category>
      <category>javascript</category>
      <category>react</category>
      <category>reactnative</category>
    </item>
    <item>
      <title>Breaking up with Flutter, getting along with PWA</title>
      <author>Anurag Vohra</author>
      <pubDate>Fri, 07 May 2021 01:37:06 +0000</pubDate>
      <link>https://dev.to/anuragvohraec/breaking-up-with-flutter-getting-along-with-pwa-4fic</link>
      <guid>https://dev.to/anuragvohraec/breaking-up-with-flutter-getting-along-with-pwa-4fic</guid>
      <description>&lt;p&gt;Yeah! I had enough of flutter. I will like to keep it short.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-problems-i-had-with-flutter"&gt;
  &lt;/a&gt;
  7 problems I had with Flutter:
&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No separation of style, coding and layout&lt;/strong&gt;. An infinite depth widget tree for creating a simple animated button. The code looks ugly as hell, the bigger the project gets the uglier and difficult it becomes to manage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Its not cross platform in true sense&lt;/strong&gt;, once you dwelve into the world of plugin writings. You will often be in position wher you have to write code in swift (For IOS) and C/C++/Kotlin for android. So how can it be called cross platform, when some one else does have to write a code for both platform!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App Size is too big&lt;/strong&gt;. You use 3 Plugins and your project become bigger than any app on the planet!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Unecessary &lt;strong&gt;Programming Context Switching&lt;/strong&gt; : Front end code in Dart, Back end code in Javascript.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires App store to publish app&lt;/strong&gt;: Publishing through some kind of App store! We all know their &lt;a href="https://www.bbc.com/news/technology-53777379"&gt;monopoly and dictatorial regimes&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The development time of any decent app will be too big!&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires Heavy machine to do the job: One requires pretty good machine to do the job.&lt;/strong&gt; A Flutter full stack developer would have to open follwing big apps to work.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;IDE: Say Android studio (Very big in itself) and if you are creating a modular project, one has to open two to four instance of Android studio.&lt;/li&gt;
&lt;li&gt;Chrome/Firefox: You would have to google code many times, and that too many tabs!&lt;/li&gt;
&lt;li&gt;Emulator. Its pretty Big app in itself.&lt;/li&gt;
&lt;li&gt;IDE for back end code. Which again if is modular (which every big project must be), then you need to open two to three instance of such IDE.&lt;/li&gt;
&lt;li&gt;Docker with local instance of DB/ Micro services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I have a 8 GB Linux machine with 16 GB swap memory and it made me cry, as apart from writing codes in DART, Javascript (for backend), DB programming , I would have to manually manage memory on my system.&lt;/p&gt;

&lt;p&gt;So why &lt;a href="https://web.dev/what-are-pwas/"&gt;PWA: Progressive Web App&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Its a new breed of websites , which user can install on IOS, Android and Desktop, just if they were some mobile apps. Yeah install, just like regular mobile apps user can install them on their mobile phone. By installing it means one can cache any big file at user machine, and it wont be fetched from server again and again! (Just as your regaulr mobile app gets installed once).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As they are plain simple websites, one can create them with just HTML, CSS, and Javascript.&lt;/p&gt;

&lt;p&gt;There are &lt;a href="https://www.youtube.com/results?search_query=progressive+web+app"&gt;tons of better articles&lt;/a&gt; which will give you what PWA are and their capabilities. I will like to rather focus on how PWA solve above problems.&lt;/p&gt;

&lt;p&gt;In the rest of the article, I assume you already know what PWA are.&lt;/p&gt;

&lt;p&gt;Solutions to above problems solved by PWA:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;No separation of style , coding and layout.&lt;/strong&gt;&lt;br&gt;
I think any one who knows HTML,CSS and JS knows how it solves this problem pretty good.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Not cross platform in true sense.&lt;/strong&gt; &lt;br&gt;
Well web works every where*. If something is web standard, its gauranteed to work on all system which adheres to it.&lt;br&gt;
Yeah I will be fair here I do need to acutally write code sometimes to target specific machine, but its a one time job. I wanted to to access contacts on user machine, and PWA only offers this kind of access on newer Systems, to target old system, I wrapped my PWA in pure Android JAVA code!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;App Size is too big.&lt;/strong&gt;&lt;br&gt;
A decent flutter app which uses few plugins, will end up of being pretty Big!&lt;br&gt;
A same flutter app which was half completed was of 30 MB in size, and the one developed in PWA was mere 88 KB!&lt;br&gt;
I started this app with Flutter ended up with 30 MB code during mid development, then I tried it on PWA! and developed whole app in JS, HTML and CSS, latter at last moment came to know I cannot read contacts on old mobile phones !&lt;br&gt;
I googles some shell projects which can give me access to Contacts and expose javascript functions to my webviews. I created such shells, and such shell only were of 88 KB size. If I had to design any app in future which requires contacts, I can reuse this shells.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Programming Context Switching.&lt;/strong&gt;&lt;br&gt;
Front in dart and back end in javascript.&lt;br&gt;
My story on this goes like this. I had been a JAVA developer for almost a decade , and then I switched to javascript as I hated Context switching and simplicity of Javascript and NPM at that time.&lt;br&gt;
Now when I swicthed to flutter I am again to the same problem I solved many years back: Context switching!&lt;br&gt;
Well now on PWA all I have to code is in javascript every where. I have chosen my database too which uses Javascript for most of its functioning (CouchDB).&lt;br&gt;
All I need to focus is on one langauge and I am good to go.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires App store to publish app&lt;/strong&gt;&lt;br&gt;
Well PWA can be published on App store and can be hosted on your own servers too, from where user can install them fearlessly!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The development time of any decent app will be too big.&lt;/strong&gt;&lt;br&gt;
Coding in HTML/CSS/JS is way faster then coding widgets tree with the depths of hell.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Requires Heavy machine to do the job&lt;/strong&gt;&lt;br&gt;
All I need is one IDE with integerated browser. Say VSCODE to work on my back end / front end , runnig dockers and no eumlators required.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>flutter</category>
      <category>pwa</category>
      <category>javascript</category>
      <category>mobile</category>
    </item>
    <item>
      <title>Docker run ภายใต้ network ของ container อื่น</title>
      <author>Weerasak Chongnguluam</author>
      <pubDate>Fri, 07 May 2021 01:10:42 +0000</pubDate>
      <link>https://dev.to/iporsut/docker-run-network-container-118m</link>
      <guid>https://dev.to/iporsut/docker-run-network-container-118m</guid>
      <description>&lt;p&gt;กำลังลองเล่น package chromedp &lt;a href="https://github.com/chromedp/chromedp"&gt;https://github.com/chromedp/chromedp&lt;/a&gt; ซึ่งเป็น package ช่วยให้เราเขียน Go ไปต่อกับ Chrome Engine แล้วทำอะไรต่างๆได้แบบ browser ทำ โดยผ่านการเขียนโปรแกรมเอง ประโยชน์ก็ใช้สำหรับทำ web bot ทำ web crawler/scrapper ต่างๆนั่นเอง&lt;/p&gt;

&lt;p&gt;ประเด็นของโพสต์นี้คือ กำลังพยายามเอามันไปรันภายใต้ Docker ซึ่งไม่มี Chrome อยู่ในนั้น อย่างไรก็ตาม Chrome มีวิธีให้เชื่อมต่อหามันผ่าน remote โดยใช้ Chrome DevTools Websocket endpoint&lt;/p&gt;

&lt;p&gt;ประเด็นต่อมา เราต้องรัน Chrome headless ซึ่งเป็น Chrome engine แบบไม่ต้องติดตั้ง Chrome application นั่นเอง ดีที่มีคนทำ docker image เอาไว้แล้วที่นี่ &lt;a href="https://hub.docker.com/r/chromedp/headless-shell/"&gt;https://hub.docker.com/r/chromedp/headless-shell/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ดังนั้นเราจะใช้งาน headless-shell ก็รันผ่าน docker แบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run -d -p 9222:9222 --rm --name headless-shell chromedp/headless-shell
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;ต่อมาผมจะลองเล่นโค้ดตัวอย่างของ chromedp จากโค้ดนี้ &lt;a href="https://github.com/chromedp/examples/blob/master/remote/main.go"&gt;https://github.com/chromedp/examples/blob/master/remote/main.go&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="c"&gt;// Command remote is a chromedp example demonstrating how to connect to an&lt;/span&gt;
&lt;span class="c"&gt;// existing Chrome DevTools instance using a remote WebSocket URL.&lt;/span&gt;
&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"context"&lt;/span&gt;
    &lt;span class="s"&gt;"flag"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/chromedp/chromedp"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;devtoolsWsURL&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"devtools-ws-url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"DevTools WebSsocket URL"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;devtoolsWsURL&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"must specify -devtools-ws-url"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c"&gt;// create allocator context for use with creating a browser context later&lt;/span&gt;
    &lt;span class="n"&gt;allocatorContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewRemoteAllocator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;devtoolsWsURL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// create context&lt;/span&gt;
    &lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NewContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allocatorContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;defer&lt;/span&gt; &lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;// run task list&lt;/span&gt;
    &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctxt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Navigate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"https://duckduckgo.com"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WaitVisible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"#logo_homepage_link"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;chromedp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OuterHTML&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed getting body of duckduckgo.com: %v"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Body of duckduckgo.com starts with:"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;โดยเอามาใส่ go.mod เพื่อจัดการ package ให้ ซึ่ง go.mod มีโค้ดแบบนี้อยู่&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;module example-chromedp-remote

go 1.16

require github.com/chromedp/chromedp v0.7.1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;เสร็จแล้วก็สร้าง Dockerfile ให้มันแบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM golang:1.16.4-alpine as builder

WORKDIR /app

COPY go.mod /app
COPY main.go /app

RUN go mod download
RUN go build -o app

FROM alpine
COPY --from=builder /app/app /app
ENTRYPOINT ["/app"]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;จากนั้นทำการ build docker ด้วยคำสั่ง&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker build -t example-chromedp-remote .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;สุดท้าย เราจะรัน example-chromedp-remote โดยส่ง ws url ของ headless ไปเป็น option ให้มัน ส่วนวิธีหา ws url นั้นทำแบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;curl 127.0.0.1:9222/json/version
{
   "Browser": "Chrome/90.0.4430.93",
   "Protocol-Version": "1.3",
   "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36",
   "V8-Version": "9.0.257.23",
   "WebKit-Version": "537.36 (@4df112c29cfe9a2c69b14195c0275faed4e997a7)",
   "webSocketDebuggerUrl": "ws://127.0.0.1:9222/devtools/browser/68424ed8-a10a-4633-9618-f93b443e0aa9"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;เราจะเอา URL ตรง &lt;code&gt;"webSocketDebuggerUrl"&lt;/code&gt; ไปใช้งานนั่นเอง&lt;/p&gt;

&lt;p&gt;ต่อไปก็สั่งรัน example-chromedp-remote แบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker run --rm --network="container:headless-shell" example-chromedp-remote -devtools-ws-url="ws://127.0.0.1:9222/devtools/browser/68424ed8-a10a-4633-9618-f93b443e0aa9"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;จุดที่ทำให้รันโดยเชื่อมต่อไปให้มันเป็น network เดียวกัน IP เดียวกันได้คือ option &lt;code&gt;--network="container:headless-shell"&lt;/code&gt; นั่นเอง pattern มันคือมี &lt;code&gt;container:&lt;/code&gt; ด้านหน้า ตามด้วยชื่อ container ที่จะเอาไปเชื่อมต่อ (ref: &lt;a href="https://docs.docker.com/engine/reference/run/#network-container"&gt;https://docs.docker.com/engine/reference/run/#network-container&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;แถมท้าย ถ้าใช้ docker compose แทนที่จะรันเองตรงๆนั้น จะใช้ config key ที่ชื่อ network_mode แต่ว่าแทนที่จะกำหนดชื่อ container ตรงๆ เราใช้ชื่อ service แทนได้โดยใช้ prefix &lt;code&gt;service:&lt;/code&gt; ตามด้วยชื่อ service ตัวอย่างเช่น&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;span class="na"&gt;version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;3.8"&lt;/span&gt;
&lt;span class="na"&gt;services&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;

  &lt;span class="na"&gt;chrome-headless&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;image&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;chromedp/headless-shell"&lt;/span&gt;
    &lt;span class="na"&gt;ports&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;9222:9222"&lt;/span&gt;

  &lt;span class="na"&gt;example-chromedp-remote&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;build&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;context&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;
    &lt;span class="na"&gt;network_mode&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;service:chrome-headless"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;จากนั้นก็สั่งรัน chrome-headless ผ่าน docker compose แบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker compose up -d chrome-headless
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;แล้วก็รัน example-chromedp-remote แบบนี้&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;docker compose run --rm example-chromedp-remote -devtools-ws-url="ws://127.0.0.1:9222/devtools/browser/cdaa6d7f-3d08-4593-ad4d-0d630abcd627"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%E0%B8%AA%E0%B8%A3%E0%B8%B8%E0%B8%9B"&gt;
  &lt;/a&gt;
  สรุป
&lt;/h2&gt;

&lt;p&gt;ถ้าจะเชื่อมต่อไปใช้ network ของ container อื่นๆ ผ่าน docker run ให้ใช้ option --network ค่าที่กำหนดคือ &lt;code&gt;container:&lt;/code&gt; ตามด้วยชื่อ container ที่จะไปต่อ เช่น &lt;code&gt;--network="conatiner:headless"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;แต่ถ้าใช้ docker compose ให้กำหนดโดยคีย์ที่ชื่อว่า &lt;code&gt;network_mode&lt;/code&gt; ค่าที่กำหนดคือ &lt;code&gt;service:&lt;/code&gt; ตามด้วยชื่อ service ที่จะไปต่อ เช่น &lt;code&gt;network_mode: "service:chrome-headless"&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E0%B8%82%E0%B8%AD%E0%B8%9D%E0%B8%B2%E0%B8%81-buy-me-a-coffee"&gt;
  &lt;/a&gt;
  ขอฝาก Buy Me a Coffee
&lt;/h2&gt;

&lt;p&gt;สำหรับท่านใดที่อ่านแล้วชอบโพสต์ต่างๆของผมที่นี่ ต้องการสนับสนุนค่ากาแฟเล็กๆน้อยๆ สามารถสนับสนุนผมได้ผ่านทาง Buy Me a Coffee คลิ๊กที่รูปด้านล่างนี้ได้เลยครับ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/weerasak"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Rb9xKs4G--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me A Coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ส่วนท่านใดไม่สะดวกใช้บัตรเครดิต หรือ Paypal สามารถสนับสนุนผมได้ผ่านทาง PromptPay โดยดู QR Code ได้จากโพสต์ที่พินเอาไว้ได้ที่ Page DevDose ครับ &lt;a href="https://web.facebook.com/devdoseth"&gt;https://web.facebook.com/devdoseth&lt;/a&gt;&lt;/p&gt;

</description>
      <category>docker</category>
      <category>go</category>
    </item>
    <item>
      <title>"Let me wait-for-it and call you back", said wait-for-it.js</title>
      <author>Muhammad Tayyab Sheikh</author>
      <pubDate>Fri, 07 May 2021 00:26:09 +0000</pubDate>
      <link>https://dev.to/cstayyab/let-me-wait-for-it-and-call-you-back-said-wait-for-it-js-50h1</link>
      <guid>https://dev.to/cstayyab/let-me-wait-for-it-and-call-you-back-said-wait-for-it-js-50h1</guid>
      <description>&lt;p&gt;Ever encountered as situation where you had to wait for some HTML element in a webpage before you can execute a function?&lt;br&gt;
Wait no more, because &lt;code&gt;wait-for-it.js&lt;/code&gt; is at your service.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#what-does-it-offer"&gt;
  &lt;/a&gt;
  What does it offer?
&lt;/h2&gt;

&lt;p&gt;It offers you a much simpler way to execute a function (callback) when your specified (selector) element gets added to the page.&lt;/p&gt;

&lt;p&gt;## How does it work?&lt;br&gt;
It uses nothing else but your very own JavaScript to accomplish the task i.e. JavaScript's &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"&gt;&lt;code&gt;MutationObserver&lt;/code&gt; API&lt;/a&gt;. You can have a detailed look at its code here:&lt;br&gt;
&lt;/p&gt;
&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/cstayyab"&gt;
        cstayyab
      &lt;/a&gt; / &lt;a href="https://github.com/cstayyab/wait-for-it.js"&gt;
        wait-for-it.js
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A JavaScript Library that allows you to execute function when a certain element gets added to the document
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h2&gt;
  &lt;a href="#how-do-i-use-it"&gt;
  &lt;/a&gt;
  How do I use it?
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Include it in your webpage using jsDelivr CDN&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;script &lt;/span&gt;&lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"https://cdn.jsdelivr.net/gh/cstayyab/wait-for-it.js@0.1.0/wait-for-it.js"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Register a &lt;code&gt;selector&lt;/code&gt; to listen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;waitForElement&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;#food&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your Food is Here!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Voilà!!&lt;/p&gt;




&lt;br&gt;&lt;br&gt;
&lt;em&gt;Feel free to star and fork it on &lt;a href="https://github.com/cstayyab/wait-for-it.js"&gt;GitHub&lt;/a&gt;&lt;/em&gt;

</description>
      <category>javascript</category>
      <category>showdev</category>
      <category>html</category>
      <category>css</category>
    </item>
  </channel>
</rss>
