<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>SE Internship Log[1]</title>
      <author>Ruheni Alex</author>
      <pubDate>Mon, 02 Aug 2021 07:03:44 +0000</pubDate>
      <link>https://dev.to/ruheni/se-internship-log-1-3407</link>
      <guid>https://dev.to/ruheni/se-internship-log-1-3407</guid>
      <description>&lt;p&gt;Hello there internet stranger, 👋🏽&lt;/p&gt;

&lt;p&gt;This is the second article in Software Engineering(SE) Log.&lt;/p&gt;

&lt;p&gt;The better part of the week was spent arguing with the TypeScript compiler and we both know who was right.&lt;/p&gt;

&lt;p&gt;It was me. &lt;/p&gt;

&lt;p&gt;JK, The compiler is always right! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#technical-skills"&gt;
  &lt;/a&gt;
  Technical skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#types-types-types"&gt;
  &lt;/a&gt;
  Types! Types! Types!
&lt;/h3&gt;

&lt;p&gt;This week, I learnt there's more to types than &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, and &lt;code&gt;Object&lt;/code&gt; types. &lt;/p&gt;

&lt;p&gt;TypeScript allows you to do some advanced type wizardry by manipulating types from existing types – besides extending from other types with interfaces. Sounds meta, right? &lt;/p&gt;

&lt;p&gt;When a type/ interface is not specified, TypeScript interprets it as its widest form/type.&lt;/p&gt;

&lt;p&gt;Case example, if you have an array of strings, the type will always be &lt;code&gt;string[]&lt;/code&gt;. However, you can take it a step further and be specific with what the value of the string should be in your array or variable.&lt;/p&gt;

&lt;p&gt;In the example below, no type is assigned to &lt;code&gt;colors&lt;/code&gt;. Therefore, TypeScript will interpret it as &lt;code&gt;string[]&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;However, you can create a &lt;code&gt;readonly&lt;/code&gt; type from the above example by appending the key words &lt;code&gt;as const&lt;/code&gt; to the end of the statement. This means that the properties will be immutable – you cannot perform a write to the array.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The intellisense on hovering on &lt;code&gt;colors&lt;/code&gt; would reveal &lt;code&gt;readonly ["blue", "black", "white", "yellow", "orange"]&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#union-types"&gt;
  &lt;/a&gt;
  Union Types
&lt;/h4&gt;

&lt;p&gt;You could take the previous example a step further and create a &lt;code&gt;union&lt;/code&gt; type from colors array with a little TypeScript magic:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;black&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;white&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;yellow&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;orange&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="kd"&gt;const&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt; &lt;span class="nx"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On hovering on &lt;code&gt;type color&lt;/code&gt;, a union type is created: &lt;code&gt;"blue" | "black" | "white" | "yellow" |"orange"&lt;/code&gt;. The &lt;code&gt;[number]&lt;/code&gt; annotation is an &lt;em&gt;Indexed Access Type&lt;/em&gt; – this means that it looks up a property from another type.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#template-literal-types"&gt;
  &lt;/a&gt;
  Template Literal Types
&lt;/h4&gt;

&lt;p&gt;TypeScript also supports Template Literal Types which builds on top of &lt;code&gt;string&lt;/code&gt; literal type. It enables creating types from interpolated strings. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;lang&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;en&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;de&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TypeScript Handbook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Functional Programming&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;

&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;BookCategories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this example, we're creating "internationalized" – a German and English – versions of the book type. The generated types on hovering is a &lt;code&gt;union&lt;/code&gt; type of each &lt;code&gt;lang&lt;/code&gt; and &lt;code&gt;book&lt;/code&gt;, i.e.: &lt;code&gt;"TypeScript Handbook_en" | "TypeScript Handbook_de" | "Functional Programming_en" | "Functional Programming_de"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Template literal types can be taken to another level be manipulated by conversion to uppercase, lowercase, un-capitalization, and capitalization.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;TypeScript Handbook&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;lowercaseBook&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Lowercase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The output of &lt;code&gt;lowercaseBook&lt;/code&gt; is &lt;code&gt;"typescript handbook"&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is all just a tip of the iceberg of what Type manipulation with TypeScript looks like. &lt;/p&gt;

&lt;p&gt;You can explore the TypeScript documentation and learn more on types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/2/generics.html"&gt;Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/2/keyof-types.html"&gt;&lt;code&gt;keyof&lt;/code&gt; Type Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/2/typeof-types.html"&gt;&lt;code&gt;typeof&lt;/code&gt; Type Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html"&gt;Indexed Access Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html"&gt;Conditional Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/2/mapped-types.html"&gt;Mapped Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.typescriptlang.org/docs/handbook/2/template-literal-types.html"&gt;Template Literal Types&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--buf3bkLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82c0po4j32wkqkx2b1u0.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--buf3bkLI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/82c0po4j32wkqkx2b1u0.gif" alt="Steve Balmer Yelling"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Should probably have spent more time reading the docs and not making gifs&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#soft-skills"&gt;
  &lt;/a&gt;
  Soft Skills
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#pursuing-projects"&gt;
  &lt;/a&gt;
  Pursuing projects
&lt;/h3&gt;

&lt;p&gt;This is more of a technical skill but I feel like it still falls under the soft skills.&lt;/p&gt;

&lt;p&gt;Advice from my manager was to work on other projects on the side. It is not compulsory and I don't mean that you should sacrifice your time.&lt;/p&gt;

&lt;p&gt;Working on other projects besides work would potentially expose you to new technology and or features of the programming language you're using. Projects may require you to read someone else's code and gain a better understanding of how and why the thing was built the way it is.&lt;/p&gt;

&lt;p&gt;An alternative to side projects is contributing to existing open-source projects.&lt;/p&gt;

&lt;p&gt;This week has been mind blowing watching my manager tackle tasks in 20 minutes that took me a day. It all seemed like magic – especially the TypeScript stuff – but it's all practice and experience.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-comes-next"&gt;
  &lt;/a&gt;
  What comes next?
&lt;/h2&gt;

&lt;p&gt;It's definitely getting more familiar with TypeScript and digging deeper into the &lt;a href="https://www.typescriptlang.org/docs/handbook/intro.html"&gt;TypeScript Handbook&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;A TS cheat sheet maybe? A project?&lt;/p&gt;

&lt;p&gt;🤞🏽 this week I win a fight with the TS compiler. I mean, what are the odds? &lt;/p&gt;

&lt;p&gt;There's always a lot to learn. It's one step at a time and be patient with the process.&lt;/p&gt;

&lt;p&gt;Till next week. ✌🏽&lt;/p&gt;

</description>
    </item>
    <item>
      <title>What is D3.js ?</title>
      <author>Mayank Kumar</author>
      <pubDate>Mon, 02 Aug 2021 06:41:26 +0000</pubDate>
      <link>https://dev.to/mayank0508/what-is-d3-js-4pim</link>
      <guid>https://dev.to/mayank0508/what-is-d3-js-4pim</guid>
      <description>&lt;p&gt;As a developers I really love data, and that too in a arranged manner.&lt;/p&gt;

&lt;p&gt;Sometimes Data can be such a mess, that it becomes more of a headache that a resource, with data we can solve so many problem in our day to day life.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/l0HlJIp1dIZzimEBq/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/l0HlJIp1dIZzimEBq/giphy.gif" alt="graphs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#d3js-can-help-us-here"&gt;
  &lt;/a&gt;
  &lt;strong&gt;D3.js can help us here&lt;/strong&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG, and CSS. D3’s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#d3-stands-for-datadriven-documents"&gt;
  &lt;/a&gt;
  D3 stands for Data-Driven Documents
&lt;/h2&gt;

&lt;p&gt;The full form explains itself, its is a library, which helps us in making graphs, charts, projections form just a set of data.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://d3js.org/d3.v7.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#now-lets-get-into-some-coding-examples"&gt;
  &lt;/a&gt;
  &lt;em&gt;Now lets get into some coding examples:&lt;/em&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/LmNwrBhejkK9EFP504/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/LmNwrBhejkK9EFP504/giphy.gif" alt="meme"&gt;&lt;/a&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;//this is used to select all the elements given inside the parenthesis&lt;/span&gt;

&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// this is used to select just a particular element&lt;/span&gt;
&lt;span class="c1"&gt;//inside the parenthesis &lt;/span&gt;

&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;h1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;red&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// this takes the h1 tag from the html and converts it into red color;&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hi there&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this changes the text in the html to the given string&lt;/span&gt;

&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOLO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this appends the text to the p tag in the body&lt;/span&gt;
&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOLO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOLO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;body&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;YOLO&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;d3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;p&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;blue&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// this snippet is used to select all the p tags and change their color to blue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are the basics way we can manipulate the Data inside the JS using the D3.js library&lt;/p&gt;

&lt;p&gt;To get more depth knowledge on this topic go and check this video form FreeCodeCamp.org on their YouTube channel&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/2LhoCfjm8R4"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#meme-section"&gt;
  &lt;/a&gt;
  Meme Section:
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2wqvt3DE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivmanu9vkflbomg8oqnx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2wqvt3DE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ivmanu9vkflbomg8oqnx.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#happy-coding"&gt;
  &lt;/a&gt;
  Happy Coding 🚀👨‍💻
&lt;/h1&gt;

</description>
      <category>datascience</category>
      <category>javascript</category>
      <category>todayilearned</category>
      <category>database</category>
    </item>
    <item>
      <title>The (Most Comprehensive) JavaScript Design Principles Guide</title>
      <author>Clean Code Studio</author>
      <pubDate>Mon, 02 Aug 2021 06:30:10 +0000</pubDate>
      <link>https://dev.to/cleancodestudio/the-most-comprehensive-javascript-design-principles-guide-7i3</link>
      <guid>https://dev.to/cleancodestudio/the-most-comprehensive-javascript-design-principles-guide-7i3</guid>
      <description>&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;As JavaScript developers we strive towards clean, healthy, and maintainable code. We strive towards solving challenges eloquently. &lt;/p&gt;

&lt;p&gt;While these challenges may each, within themselves, be unique - we don't necessarily require unique solutions for each individual one of these new challenges we face. &lt;/p&gt;

&lt;p&gt;If you've used a solution that is not a unique solution to solve a challenge that is in of itself a unique challenge, then you have utilized the power of a JavaScript &lt;strong&gt;design pattern&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8jCCYiWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0wna1ohdcfvrlv57vw0.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8jCCYiWs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o0wna1ohdcfvrlv57vw0.jpg" alt="JavaScript code picture - just decorator for blog"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Software languages have been around for decades. The life span of a software language is decently well understood at this point. During any language's lifespan, many such reusable solutions are made and tested by a large number of the developers within a given languages community. Through the power of compounded developer experience, solutions known as design patterns are created and made useful to the masses. These solutions support the creation of optimized ways to solve a large many of problem types based on a much lesser amount of design patterns. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Design patterns are reusable solutions to commonly occurring problems in software design"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What benefits do we gain from design patterns?&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Proven Solutions:&lt;/strong&gt; Many software developers use Design Patterns. Being used by many developers with success, we are provided with more certainty of our success when implementing a given design pattern. When a design pattern becomes main stream, you can have confidence in knowing that they have been revised and refactored multiple times over. Proven solutions are often times optimal, consider edge cases, and are utilized in a wide variety of use cases.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Easily Reusable:&lt;/strong&gt; When a solution is reusable, it can be modified to solve multiple particular problems. Design patterns document a reusable solution that is not coupled to any specific problem but rather a set of challenges that the design pattern assists in over coming.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Expressive:&lt;/strong&gt; Often times, design patterns can explain large solutions in a to the point and simplified way.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Lower the need for refactoring code:&lt;/strong&gt; Most design patterns take into account code dependencies, existing and future dependencies. The Open Closed Design Principle, for example - prevents the need to refactor code that is already written. Instead you create a new class (implement an interface in other non js languages) and add code. You limit the need to refactor code using design patterns.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Simplify Communication:&lt;/strong&gt; Teams built with software engineers who are familiar with design patterns are able to more easily communicate internally through the language of their code base. They are also able to communicate externally about potential solutions, future concerns worth noting, and over all architectural design. Design Patterns simplify communication.&lt;/li&gt;
&lt;/ul&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Reduced Codebase site:&lt;/strong&gt; Due to their elegant, efficient, and well thought out approach, design patterns usually require less code and ultimately simply a team's code base.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"Before we dive in, let's breifly review the history of JavaScript to better understand the context in which many of our modern day design patterns were built."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h3&gt;
  &lt;a href="#a-brief-javascript-history-lesson"&gt;
  &lt;/a&gt;
  A (Brief) JavaScript History Lesson
&lt;/h3&gt;




&lt;p&gt;In the world of web development, JavaScript is one of the most popular programming languages out there today. &lt;/p&gt;

&lt;p&gt;In the beginning, JavaScript wasn't intended to be this impressive world wide accepted language with reactive front-ends, modularized code repositories, and millions of packages installable via npm. &lt;/p&gt;

&lt;p&gt;Not even close, in the beginning JavaScript was more like the "glue" that allowed you to stick various displays of HTML elements together. First known as a client-side scripting language, one of the worlds first web browsers - Netscape Navigator, utilized JavaScript display static HTML. &lt;/p&gt;

&lt;p&gt;This, of course, led to what we now know as &lt;strong&gt;war of the browsers&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;Browser's were new, hot, and exploding - they were that next big thing in the tech industry. Big players like Mozilla (Formerly known as Netscape Communications), Microsoft Explorer, and eventually Chrome battled it out for Browser glory.&lt;/p&gt;

&lt;p&gt;As the driving force behind each Browser in this Browsers War - the big dogs were researching, developing, and creating new and improved ways to implement their own client-side scripting language.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Netscape:&lt;/strong&gt; JavaScript (Really, Brendan Eich created the original JS)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Microsoft:&lt;/strong&gt; JScript (Any one know what that is anymore?)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As a developer in that day in age, I image great frustrations. The implementations differed in great regards. Development wasn't for all browsers - but instead for individual browsers. &lt;/p&gt;

&lt;p&gt;As I imagine it, a heard of angry software engineers with pitch forks and torches gathered in numbers that rivaled the armies of our world histories most malicious wars. With out raged developers rising, we have one single demand - pick a MO**** FU***** language for all browsers. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;(My imagination visualizes our developer ancestors during this era more as great viking warriors thirsty for war and to face death in the battle for simplification and glory. I've also been watching Vikings lately on Hulu - this may have my imagination running rampant...)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Thus, &lt;a href="https://en.wikipedia.org/wiki/ECMAScript"&gt;ECMAScript&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;What was ECMAScript you ask? The cry of freedom, inclusivity, and standardization of non insanity.&lt;/p&gt;

&lt;p&gt;ECMAScript is a standardized scripting language specification which all modern browsers try to support. It does have many implementations that are more like differing dialects if you want to make the traditional human language analogy. &lt;/p&gt;

&lt;p&gt;I like to think of ECMAScript as the original father of all scripting languages and JavaScript as it's heroic son - the hero of hero's, the fighter who beat all odds, and the one who lands all of the senorita's because it's awesome (But like seriously, &lt;a href="https://www.techrepublic.com/article/the-5-most-popular-programming-languages-among-female-developers/"&gt;JavaScript is one of the languages most often used software languages by all of you senorita engineers&lt;/a&gt;) &lt;/p&gt;

&lt;p&gt;JavaScript was the most popular dialect that arose from ECMAScript. &lt;/p&gt;

&lt;p&gt;Since it's big bang into the world of reality, ECMAScript has done some important things for the software engineering community. It has standardized a lot of important things that is listed &lt;a href="https://en.wikipedia.org/wiki/ECMAScript#Conformance"&gt;here on Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Browser support for ECMAScript versions 6 (ES6) and higher are still incomplete and have to be transpiled to ES5 in order to be fully supported.&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#what-is-javascript-other-than-awesome"&gt;
  &lt;/a&gt;
  What is JavaScript (Other than Awesome)?
&lt;/h3&gt;




&lt;p&gt;Lets introduce some very important JavaScript language characteristics. You'll want some awareness and context around these attributes of JavaScript before diving into the JS Design Patterns talked about in this article.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Hey - you! Reading this article. Here's a question for you...&lt;/strong&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"What is JavaScript?"&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;




&lt;p&gt;&lt;strong&gt;One possible answer might be:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;"JavaScript is a lightweight, interpreted, object-oriented programming language with first-class functions most commonly known as a scripting language for web pages."&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Hmmm....&lt;/p&gt;

&lt;p&gt;Huhhh?!&lt;/p&gt;

&lt;p&gt;Basically, what this very overy complicated quote written by a person or persons much smarter than me meant to say is something like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;JS has a low memory footprint&lt;/li&gt;
&lt;li&gt;JS is easy to implement&lt;/li&gt;
&lt;li&gt;JS is easy to learn&lt;/li&gt;
&lt;li&gt;JS has syntax similar to that of other popular languages such as C++ and Java&lt;/li&gt;
&lt;li&gt;JS is a scripting language

&lt;ul&gt;
&lt;li&gt;Which means its code is interpreted instead of compiled&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;JS has procedural support&lt;/li&gt;
&lt;li&gt;JS has object-oriented support&lt;/li&gt;
&lt;li&gt;JS has functional programming styles support&lt;/li&gt;
&lt;li&gt;JS is flexible for developers! (Until S*** breaks, then it just hurts)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These would be the JavaScript attributes or characteristics that you will find in many other popular software languages -- but, as many of us know all to well, JavaScript is funky and goes to the beat of its own groove. &lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#javascript-supports-firstclass-functions"&gt;
  &lt;/a&gt;
  JavaScript Supports First-Class Functions
&lt;/h3&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;First class functions are incredibly powerful, but also somewhat difficult to grasp at first. A programming language is said to have First-class functions simply means that functions in that language are treated like any other variable.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;First Class Functions Can Be:&lt;/strong&gt; Passed As Arguments to other functions
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/* We pass a function as the argument */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;action&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;payload&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

    &lt;span class="nx"&gt;callback_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;log-alert&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;hello world&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The action context: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The action name: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;The action payload: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;payload&lt;/span&gt;
   &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;First Class Functions Can Be:&lt;/strong&gt; Returned by another function
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Hello!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;First Class Functions Can Be:&lt;/strong&gt; Assigned as a value to a variable
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;foobar&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Invoke it using the variable&lt;/span&gt;
&lt;span class="nx"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#javascript-prototype-based"&gt;
  &lt;/a&gt;
  JavaScript Prototype Based
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;JavaScript is object-oriented - thus it supports objects. Now most non-familiar with JavaScript would logically think objects, then classes, and then maybe even inheritance.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JavaScript has a bit of a different approach...&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Classes aren't supported in the plain form of JavaScript...instead JavaScript uses what is known as &lt;strong&gt;Prototype-Based&lt;/strong&gt; or &lt;strong&gt;Instance-Based&lt;/strong&gt; &lt;strong&gt;Inheritance&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In ES6, the term of &lt;strong&gt;Class&lt;/strong&gt; was formally introduced. All browsers do fully support ES6 as this post is being written so we can use the &lt;strong&gt;Class&lt;/strong&gt; keyword - but it still works differently in a prototypal language like JS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prototype-based programming&lt;/strong&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Style of object-oriented programming&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Behavior reuse (known as inheritance) is performed via a process of reusing existing objects via delegations that serve as prototypes&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We dive deeper further down in the design patterns section of this article. Understanding prototypes is extremely important JS, but let's hold off on adding in too much detail just yet. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#javascript-event-loops"&gt;
  &lt;/a&gt;
  JavaScript Event Loops
&lt;/h3&gt;



&lt;p&gt;Have you ever heard of a callback function? If you're used to working in the world of JavaScript I'm sure you have. &lt;/p&gt;

&lt;p&gt;A callback function is a function sent as a parameter (acceptable thanks to functions being first-class citizens) to another function. The function passed as a parameter is then called after an &lt;strong&gt;event&lt;/strong&gt; fires. Often times, this is used for subscribing to events. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0h7OPx5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxllvbaqsdulq0inns28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0h7OPx5b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wxllvbaqsdulq0inns28.png" alt="JavaScript Event Loop Diagram"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Example: Right mouse click event triggers a function to be called - hence &lt;strong&gt;callback function&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An event has a listener attached to it.&lt;/li&gt;
&lt;li&gt;Each time that event fires (otherwise the event is lost)&lt;/li&gt;
&lt;li&gt;A message is sent to a queue of messages 

&lt;ul&gt;
&lt;li&gt;This queue (FIFO - first in first out) of message processes synchronously.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This process is what we know as the JavaScript &lt;strong&gt;event loop.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each queue message &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Has an associated function&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the queue message is dequeued &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The runtime executes the function completely before processing any other message.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If a function contains other function calls&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They are all performed prior to processing a new message from the queue. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is called &lt;strong&gt;run-to-completion&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;waitForMessage&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;queue&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;processNextMessage&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;queue.waitForMessage()&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Synchronously waits for new messages.

&lt;ul&gt;
&lt;li&gt;Each of the messages being processed has its own stack&lt;/li&gt;
&lt;li&gt;And is processed until the stack is empty.

&lt;ul&gt;
&lt;li&gt;Once finished processing&lt;/li&gt;
&lt;li&gt;A new message is processed from the queue (if there is one)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Have you ever heard the terminology of "non-blocking" or asynchronous used in reference to JavaScript?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When an async operation is executed&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It does not halt or stop the the runtime&lt;/li&gt;
&lt;li&gt;The program is able to process other things

&lt;ul&gt;
&lt;li&gt;Ex: Receiving user input&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;While waiting for the asynchronous operation to finalize&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asynchronous operations are &lt;strong&gt;non-blocking&lt;/strong&gt; to the main execution thread. &lt;/p&gt;

&lt;p&gt;This is an extremely useful ability both wielded internally by JavaScript while also usable externally for your specific JavaScript use cases. Async vs. Sync is a huge topic in JavaScript, but if we too dive deep into we'd never get to our &lt;br&gt;
design patterns - the topic in scope for this post.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#what-are-design-patterns"&gt;
  &lt;/a&gt;
  What are design patterns
&lt;/h3&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Design patterns are reusable solutions to commonly occurring problems in software design. Let's take a look at some of the categories of design patterns&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h4&gt;
  &lt;a href="#protopatterns"&gt;
  &lt;/a&gt;
  Proto-patterns
&lt;/h4&gt;



&lt;p&gt;Creating a design pattern, how do you do it? Do you notice any commonly re-occurring problem? Have you surmounted a solution you've uniquely designed to solve this problem? This solution of yours, let's say it's not globally recognized and documented. &lt;/p&gt;

&lt;p&gt;Every time this problem comes up or is encountered, you use this solution. This solution you've created is reusable and the developer community as a whole would be beneficiaries of such a pattern.&lt;/p&gt;

&lt;p&gt;This would not immediately make it a design pattern. A programmer may have good code and simply mistake something that looks like a pattern for an actual design pattern - when, at the end of the day - it's not an actual design pattern.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What makes something an actual design pattern?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; General developer consensus. &lt;/p&gt;

&lt;p&gt;If you're able to get opinions from a large number of developers you're on the right track. By knowing the process of creating a pattern itself, and by making yourself well acquainted with existing patterns you're beginning to learn that process. Any design pattern must go through this phase for it to become a full-fledged pattern. This is called a &lt;strong&gt;proto-pattern.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;proto-pattern&lt;/strong&gt; is a pattern-to-be &lt;em&gt;if&lt;/em&gt; it meets the standards defined by a certain period of testing that it must undergo by a various number of developers. It must be tested within the context of many challenges, be analyzed within a number of scenarios, and ultimately the be proven a useful and re-usable design pattern via many tests and general community consensus. &lt;/p&gt;

&lt;p&gt;A large amount of work &amp;amp; documentation has been done in order to show what it takes to make a fully-fledged pattern recognized by the developer community of a given software language. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#antipatterns"&gt;
  &lt;/a&gt;
  Anti-patterns
&lt;/h3&gt;



&lt;p&gt;Also worth noting, like with many things in software, is the inverse of a given concept. What's the inverse of a design pattern? &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Anti-patterns&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;An &lt;strong&gt;Anti-pattern&lt;/strong&gt; is representative of a bad practice. An example of an anti-pattern would be modifying the &lt;code&gt;Object&lt;/code&gt; class prototype. &lt;/p&gt;

&lt;p&gt;In JavaScript, everything pretty much inherits from &lt;code&gt;Object&lt;/code&gt;. JavaScript uses prototype-based inheritance so given any situation you have now changed a something. You've created a variation that could alter all other design-patterns, concepts, or techniques within JavaScript. This is no good and thus an &lt;strong&gt;anti-design&lt;/strong&gt; pattern. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#design-pattern-categorization"&gt;
  &lt;/a&gt;
  Design Pattern Categorization
&lt;/h3&gt;



&lt;p&gt;Categorization of design patterns happens in a multitude of ways, but here's a popular breakdown.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Creational&lt;/strong&gt; design patterns&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Structural&lt;/strong&gt; design patterns&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Behavioral&lt;/strong&gt; design patterns&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Concurrency&lt;/strong&gt; design patterns&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Architectural&lt;/strong&gt; design patterns&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;
  &lt;a href="#creational-design-patterns"&gt;
  &lt;/a&gt;
  Creational Design Patterns
&lt;/h4&gt;



&lt;p&gt;Creational design patterns are patterns used to create objects. These are design patterns that optimize the mechanisms which create a single or group of objects.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Builder Design Pattern&lt;/li&gt;
&lt;li&gt;Factory Design Pattern&lt;/li&gt;
&lt;li&gt;Singleton Design Pattern&lt;/li&gt;
&lt;li&gt;Prototype Design Pattern&lt;/li&gt;
&lt;li&gt;Abstract Factory Design Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are all examples of &lt;strong&gt;Creational Design Patterns&lt;/strong&gt; &lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#structural-design-patterns"&gt;
  &lt;/a&gt;
  Structural Design Patterns
&lt;/h4&gt;



&lt;p&gt;Structural design patterns are related to object relationships. These kinds of design patterns ensure that if one part of a system changes, the entire system doesn't need to change along with it. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Proxy Design Pattern&lt;/li&gt;
&lt;li&gt;Bridge Design Pattern&lt;/li&gt;
&lt;li&gt;Facade Design Pattern&lt;/li&gt;
&lt;li&gt;Adapter Design Pattern&lt;/li&gt;
&lt;li&gt;Decorator Design Pattern&lt;/li&gt;
&lt;li&gt;Flyweight Design Pattern&lt;/li&gt;
&lt;li&gt;Composite Design Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are all examples of &lt;strong&gt;Structural Design Patterns&lt;/strong&gt;.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#behavioral-design-patterns"&gt;
  &lt;/a&gt;
  Behavioral Design Patterns
&lt;/h4&gt;



&lt;p&gt;Behavioral design patterns recognize, implement, and improve communication between contrasting objects in a system. They are used to support contrasting parts of a given software system have synchronized data. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;State Design Pattern&lt;/li&gt;
&lt;li&gt;Visitor Design Pattern&lt;/li&gt;
&lt;li&gt;Command Design Pattern&lt;/li&gt;
&lt;li&gt;Memento Design Pattern&lt;/li&gt;
&lt;li&gt;Iterator Design Pattern&lt;/li&gt;
&lt;li&gt;Mediator Design Pattern&lt;/li&gt;
&lt;li&gt;Observer Design Pattern&lt;/li&gt;
&lt;li&gt;Strategy Design Pattern&lt;/li&gt;
&lt;li&gt;Chain of Responsibility Design Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are all examples of &lt;strong&gt;Behavioral Design Patterns&lt;/strong&gt;.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#concurrency-design-patterns"&gt;
  &lt;/a&gt;
  Concurrency Design Patterns
&lt;/h4&gt;



&lt;p&gt;Concurrency design patterns are utilized to implement solutions for multi-threaded programming paradigms. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scheduler Design Pattern&lt;/li&gt;
&lt;li&gt;Active Object Design Pattern&lt;/li&gt;
&lt;li&gt;Nuclear Reaction Design Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are all examples of &lt;strong&gt;Concurrency Design Patterns&lt;/strong&gt;&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#architectural-design-patterns"&gt;
  &lt;/a&gt;
  Architectural Design Patterns
&lt;/h4&gt;



&lt;p&gt;Architectural design patterns are utilized to implement architectural best practices. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MVP Design Pattern (Model-view-presenter)&lt;/li&gt;
&lt;li&gt;MVC Design Pattern (Model-view-controller)&lt;/li&gt;
&lt;li&gt;MVVM Design Pattern (Model-View-ViewModel)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Are all examples of *&lt;em&gt;Architectural Design Patterns&lt;/em&gt;.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#design-pattern-examples"&gt;
  &lt;/a&gt;
  Design Pattern Examples
&lt;/h3&gt;



&lt;p&gt;A design pattern, each one, is representative of a specific type of solution to a specific type of problem. The best design pattern is never universal. In order to become the best software engineers we can become we need to to learn when a given design pattern should be used. We need to learn which design pattern is best from a contextual vantage point. &lt;/p&gt;

&lt;p&gt;Utilizing a design pattern for a given problem that is not the proper design pattern could not only not be helpful, but could lead to hurting us and our application goals. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#constructor-pattern"&gt;
  &lt;/a&gt;
  Constructor Pattern
&lt;/h3&gt;



&lt;p&gt;In classical object oriented software languages, the constructor is one of the first special functions we learn about. It's the function we use to initialize an object with some set of default property values.&lt;/p&gt;

&lt;p&gt;How do we create an object in JavaScript, what are some of the most common ways?&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Once we've created our object, there are four ways (since ES3) to actually go about adding properties to our newly created js object.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dot Notation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Bracket Notation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;key&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;value&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Object.definePropeties notation&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;defineProperties&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyOne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;one&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;keyTwo&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;two&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;writable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The curly brackets notation is the most popular way to create objects in JavaScript. The dot notation or square brackets is the most popular way to define properties and set values for those properties.&lt;/p&gt;



&lt;p&gt;As we talked about earlier, JS does not actually support traditional object oriented classes. However, we do have the &lt;code&gt;new&lt;/code&gt; keyword in JavaScript. We are able to support constructors in javascript via the &lt;code&gt;new&lt;/code&gt; keyword. &lt;/p&gt;

&lt;p&gt;We can use a function as a constructor, ultimately initializing an object with properties and passing in values for that objects initial property values using &lt;code&gt;new&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;

   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNotAdmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sarah&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNotAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNotAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Are we able to improve this syntax? Do we really want to define the functions that an object will have within its constructor? We can also tap into the objects &lt;code&gt;prototype&lt;/code&gt; to add methods onto the object. Check out this syntax.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;email&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;email&lt;/span&gt;
   &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;admin&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNotAdmin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;admin&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;tim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;tim@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;sarah&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;sarah@gmail.com&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;span class="nx"&gt;tim&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNotAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;

&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// true&lt;/span&gt;
&lt;span class="nx"&gt;sarah&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isNotAdmin&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#module-design-pattern"&gt;
  &lt;/a&gt;
  Module Design Pattern
&lt;/h3&gt;



&lt;p&gt;JavaScript never ceases to amaze when it comes to peculiar things it is capable of achieving. Yes, sometimes these peculiarities are confusing - however this is also comes with the ability to implement some pretty dang powerful patterns. &lt;/p&gt;

&lt;p&gt;One of these weird things JavaScript is capable of compared to other languages is its ability to support access to modifiers.&lt;/p&gt;

&lt;p&gt;Before we dive into the module pattern, let's first dive into closure's within JavaScript. Understanding a &lt;strong&gt;closure&lt;/strong&gt; is pivotal to really understanding some of the most powerful patterns available to us within JavaScript.&lt;/p&gt;


&lt;h4&gt;
  &lt;a href="#javascript-closures"&gt;
  &lt;/a&gt;
  JavaScript Closures
&lt;/h4&gt;



&lt;p&gt;A &lt;strong&gt;closure&lt;/strong&gt; is a function with access to the parent scope, even after the parent function has closed. &lt;strong&gt;Closures&lt;/strong&gt; assist us in mimicking the behavior of access modifiers through scoping. &lt;/p&gt;

&lt;p&gt;Let's learn via an example.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;Countable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;


&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Countable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Countable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Countable&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, we're using &lt;strong&gt;IIFE&lt;/strong&gt; - aka an Immediately invoked function expression. &lt;/p&gt;

&lt;p&gt;Every time we call countable, the function it is tied to immediately executes. We're able to do this thanks to the power of functions being first-class citizens in JS.&lt;/p&gt;

&lt;p&gt;When this function is called, we actually return another nested function. Since we are not able to access the &lt;code&gt;count&lt;/code&gt; variable from outside of Countable - we have, through the power of a design pattern, made it a &lt;code&gt;private&lt;/code&gt; member of the Countable object.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;count&lt;/code&gt; is private. &lt;/p&gt;



&lt;p&gt;Via the power of closures, we're able to create objects with private and public parts. These are called &lt;strong&gt;modules&lt;/strong&gt; and are extremely useful whenever we need the ability to hide the behavior of certain sub-parts of an object. We're able to &lt;em&gt;modify&lt;/em&gt; which behaviors are publicly exposed and which parts are private and &lt;strong&gt;NOT&lt;/strong&gt; publicly exposed.&lt;/p&gt;

&lt;p&gt;Here's another example:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;// items is a private property&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;

   &lt;span class="c1"&gt;// everything returned engulfed public properties and methods&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

      &lt;span class="na"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;

      &lt;span class="na"&gt;all&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;


&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Raphael&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// ['Tim', 'Sarah', 'Raphael']&lt;/span&gt;

&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sarah&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// ['Tim', 'Raphael']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This pattern allows us to introduce a clear partition between private and public parts of an object. This concept is familiar to developers who have that classical object-oriented background experience.&lt;/p&gt;

&lt;p&gt;That being said, this doesn't make everything as perfectly complete as we'd like. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;What if you want to change the visibility of a member?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You'd be required to change the code, modifying it in all places where you've used that member because of the &lt;em&gt;weird&lt;/em&gt; or different set up we need to setup in order to implement the &lt;strong&gt;module design pattern&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Changing a private part to a public part or vice-versa requires you to change several internal dependency points within your code. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#revealing-module-design-pattern"&gt;
  &lt;/a&gt;
  Revealing Module Design Pattern
&lt;/h3&gt;



&lt;p&gt;Let's improve the module design pattern we illustrated above. Our main differential is that we're going to write the entire object logic within the private scope of the module and then expose parts in which we want exposed as public by returning an anonymous object. &lt;/p&gt;

&lt;p&gt;We can also change the naming of private members when mapping private members to their corresponding public members.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Collection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="cm"&gt;/* Private Members */&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
      &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
   &lt;span class="p"&gt;}&lt;/span&gt;   

   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;items&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;splice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="cm"&gt;/* Public Members */&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;all&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;removeItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})()&lt;/span&gt;

&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ben&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// ['Tim', 'Sam', 'Ben']&lt;/span&gt;

&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Sam&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Collection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;allItems&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;// ['Tim', 'Ben']&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This example, shown directly above, is what's known as the revealing module pattern. It is one of at least 3 differing ways in which we're able to implement the module pattern.&lt;/p&gt;

&lt;p&gt;What's the difference between the revealing module pattern and all of the other variations of the module design pattern?&lt;/p&gt;

&lt;p&gt;The differences are primarily based on how public members are referenced. As the outcome, the &lt;strong&gt;revealing module design pattern&lt;/strong&gt; is much easier to use and modify. &lt;/p&gt;

&lt;p&gt;With that being said, this design pattern may be  fragile in certain contexts (remember that no single design pattern is universally the best fit). &lt;/p&gt;

&lt;p&gt;Here's a couple of problematic situations to consider when asking whether you should utilize the &lt;strong&gt;Revealing module pattern&lt;/strong&gt;.&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;A private function is referring to a public function. In this scenario we cannot override the public function using this design pattern. When we attempt to override it, we'll introduce a bug to our software due to the private function continuing to refer to the private implementation of the function.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;We shouldn't use this design pattern if we have a public member pointing to a private variable, and then proceed to try to override the public member from outside the module. In this scenario the other functions would still refer to the private value of the variable, introducing a bug into our software.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#singleton-design-pattern"&gt;
  &lt;/a&gt;
  Singleton Design Pattern
&lt;/h3&gt;



&lt;p&gt;The singleton design pattern is used in situations where we need exactly one instance of a class. The Singleton design pattern is in the creation design pattern category. &lt;/p&gt;

&lt;p&gt;Imagine, for example, we need to have an object which contains some configuration settings for our applications defined before our runtime even begins. In these scenario, is is not necessary to create a whole new object every time we need this configuration object. The configuration settings defined by the user need to be loaded into an object one time so our JS runtime can access the config settings, but we don't need to re-create this object every single time we try to access the config settings.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Singleton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// Private config &lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initializedConfigurationSettings&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Mathod&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
     &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
     &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;size&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt; 

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="na"&gt;getConfig&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// we initialize the singleton value only once&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="nx"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;initializedConfigurationSettings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;

       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;config&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}();&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;ConfigurationSettings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;singleton&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;app&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;HelloWorld&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;environment&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;local&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ConfigurationSettings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// { app: 'HelloWorld', environment: 'local' }&lt;/span&gt;

&lt;span class="nx"&gt;ConfigurationSettings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getConfig&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;number&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="c1"&gt;// same randomDecimalValue as in the first config - aka we've proven it's the same object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, you can see that we generate a random number. If you were to use this code - that randomly generated number would be the same after the first call to &lt;code&gt;singleton.getConfig&lt;/code&gt;. This is our way of proving that the singleton object returns the same object each time. We only create the object one time and then return the same configuration object each time after that.&lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#observer-design-pattern"&gt;
  &lt;/a&gt;
  Observer Design Pattern
&lt;/h3&gt;



&lt;p&gt;The observer design pattern is in my opinion one of the most powerful design patterns out there - especially within JavaScript. &lt;/p&gt;

&lt;p&gt;The observer design pattern is a &lt;strong&gt;Behavioral Design Pattern&lt;/strong&gt;. We can this design pattern to improve the communication between contrasting parts of a software application. &lt;/p&gt;

&lt;p&gt;This design pattern does have several variants when it comes to its implementation, but its most basic form has tow main parts.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Part One:&lt;/strong&gt; Subject&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Part Two:&lt;/strong&gt; Observers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A subject is responsible for handling all of the operations regarding a certain topic. Observers &lt;em&gt;subscribe&lt;/em&gt; to this subject. &lt;/p&gt;

&lt;p&gt;An observer can &lt;strong&gt;subscribe&lt;/strong&gt; and &lt;strong&gt;unsubscribe&lt;/strong&gt; from a topic.&lt;/p&gt;



&lt;p&gt;Imagine that we have two types of objects:&lt;/p&gt;

&lt;p&gt;A customer.&lt;/p&gt;

&lt;p&gt;A store.&lt;/p&gt;

&lt;p&gt;The customer is interested in a particular brand of product (Ex: iPhone) which should become available in the store very soon.&lt;/p&gt;

&lt;p&gt;Having the customer visit the store every day and check product availability is resource intensive. Instead, the customer can subscribe to the iPhone topic provided by the store. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The object that has some sort of interesting state is the &lt;em&gt;subject&lt;/em&gt;. Since it is also going to notify other object about the changes to its state we'll &lt;em&gt;also&lt;/em&gt; call it the &lt;em&gt;publisher&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;All other objects, in our case customers, are going to be the &lt;em&gt;subscribers&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;publisher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;// represents a unique subscription id to a topic&lt;/span&gt;
   &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; 

   &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

      &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
           &lt;span class="nx"&gt;subscribers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

     &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;subscribers&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;


   &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subscriber&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; 
          &lt;span class="nx"&gt;subscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})(&lt;/span&gt;&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subscription_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseClicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sam's callback for mouse click: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Event Data: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subscription_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseHovered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sam's callback for mouse hovered: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Event Data: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;})&lt;/span&gt;



&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;subscription_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseClicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sarah's callback function for mouse click: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
       &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Event Data: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseClicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseHovered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="c1"&gt;// unsubsribe from an event &lt;/span&gt;

&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubcribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseClicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;subscription_3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseClicked&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data1&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nx"&gt;publisher&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mouseHovered&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;data2&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;The observer design pattern is extremely useful in situations where we need to perform multiple operations based on a single event that is being fired. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine a scenario where we need to make multiple AJAX calls to an API and then we need to go a step further and perform other AJAX calls depending on our result from the data returned from our initial set of calls.&lt;/p&gt;

&lt;p&gt;You would have to nest the AJAX calls one within the other, possibly entering into a situation known as callback hell. Using the publisher/subscriber pattern is a much more elegant solution.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Downsides of the Observer Design Pattern&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Difficult testing of various parts of our system.&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;
  &lt;a href="#prototype-design-pattern"&gt;
  &lt;/a&gt;
  Prototype Design Pattern
&lt;/h3&gt;



&lt;p&gt;As noted throughout the entirety of this article, JS does &lt;strong&gt;NOT&lt;/strong&gt; support classes in the classical OOP native understanding.&lt;/p&gt;

&lt;p&gt;Due to this fact, inheritance between objects is implemented using prototype-based programming. This allows us the ability to create objects which can serve as a &lt;strong&gt;prototype&lt;/strong&gt; for other objects being created in JavaScript. The prototype object is used as a blueprint for each object the constructor creates.&lt;/p&gt;

&lt;p&gt;Let's show a simple implementation of this prototype pattern implementation in JS.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;PersonPrototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`Hello, my name is &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, and I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;

   &lt;span class="na"&gt;bye&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`I'm &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; and I'm saying bye now!`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;26&lt;/span&gt;
    &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;John Doe&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;


    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;constructorFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;constructorFunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prototype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;PersonPrototype&lt;/span&gt;

    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;constructorFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;obj&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;person2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tim&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nx"&gt;person1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// "hello, my name is John Doe and I'm 26&lt;/span&gt;
&lt;span class="nx"&gt;person2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hi&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// "hello, my name is Tim and I'm 38&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Prototyping is how inheritance works in JS and this is just a simple example of its implementation. &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#command-design-pattern"&gt;
  &lt;/a&gt;
  Command Design Pattern
&lt;/h3&gt;



&lt;p&gt;The command design pattern is something we can use in cases when we want to decouple objects executing the commands from objects issuing the commands that we want to execute. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Imagine a situation where our application is using a large amount of API calls for given application services. These API services change. &lt;/p&gt;

&lt;p&gt;Understanding this weird oddity in the challenge to implementing a solid coding solution for this problem we could use the Command Design Pattern.&lt;/p&gt;

&lt;p&gt;We'd want to implement an abstraction layer. This abstraction layer would separate the objects calling an API service from the objects which are telling them &lt;em&gt;when&lt;/em&gt; to call the API service. This implementation would avoid the need to modify our code in all of the places where we have a need to call the service. Rather we'd have to change the objects that are making the calls themselves - which is saying we only need to make the change in one place instead of multiple places.&lt;/p&gt;

&lt;p&gt;A huge point when it comes to design patterns is that we must become accustomed to understanding the trade offs we are making when deciding to utilize any given design pattern. &lt;/p&gt;

&lt;p&gt;Are we adding un-needed abstraction layers or are we solving a dependency erosion issue that calls for abstraction layer to solve properly?&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;invoker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
   &lt;span class="na"&gt;subtract&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;manager&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="na"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;invoker&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;invoker&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;invoker&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[].&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;

      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;add&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 8&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;manager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;subtract&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#facade-design-pattern"&gt;
  &lt;/a&gt;
  Facade Design Pattern
&lt;/h3&gt;



&lt;p&gt;What's the Facade design pattern? Using this design pattern we are able to create an abstraction layer between what is shown publicly and what is implemented behind the curtain. This design pattern is powerful to increase readability. &lt;/p&gt;

&lt;p&gt;A great example of this pattern would be selectors from DOM manipulation libraries such as jQuery, Dojo, or D3. You might have noticed using these libraries that they have very powerful selector features; you can write in complex queries such as:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.parent .child div.span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;In this example, the selection feature syntax is simplified quite a bit. Even though it seems simple on the surface, the logic behind the scene being implemented is much more complex. Under the hood we're doing a lot, but the externally facing API end users (in this case developers being the end users) is simplified. &lt;/p&gt;

&lt;p&gt;We love simplifying :) &lt;/p&gt;


&lt;h3&gt;
  &lt;a href="#next-steps"&gt;
  &lt;/a&gt;
  Next Steps
&lt;/h3&gt;



&lt;p&gt;Design patterns are one of the most powerful tools in a software engineers tool belt - if you're looking to turn yourself into a senior JavaScript developer there are a plentiful amount of these design patterns you should be aware of.&lt;/p&gt;

&lt;p&gt;Knowing how, when, where, and the trade-offs of implementing design patterns are all characteristics that the JavaScript engineers that lead teams should understand very well.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://refactoring.guru"&gt;Refactoring Guru&lt;/a&gt; is a great resource to utilize when it comes to understanding these design patterns. &lt;/p&gt;

&lt;p&gt;We could display a hundred more design principle examples in this article, but the truth is one article can't encompass all of the available design principles out their at your disposable. &lt;/p&gt;

&lt;p&gt;I highly recommend making it a goal to learn two new design principle per week. After a year, you'll have 104 design principles at your disposable. You'll be multiple times more valuable as a software engineer to any team and organization. &lt;/p&gt;

&lt;p&gt;For those interested to take the deep dive now, I recommend the Gang of Four book.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Design Patterns: Elements of reusable object-oriented software.&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;&lt;a href="https://www.amazon.com/gp/offer-listing/0201633612/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0201633612&amp;amp;linkCode=am2&amp;amp;tag=ccs0cc-20&amp;amp;linkId=07842ca29d36da06ae2d26a3276a26a5"&gt;&lt;img src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;MarketPlace=US&amp;amp;ASIN=0201633612&amp;amp;ServiceVersion=20070822&amp;amp;ID=AsinImage&amp;amp;WS=1&amp;amp;Format=_SL250_&amp;amp;tag=ccs0cc-20"&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Thanks for reading and feel free to follow Clean Code Studio for more! &lt;/p&gt;

&lt;p&gt;&lt;a href="https://cleancode.studio"&gt;Clean Code Studio&lt;/a&gt;&lt;br&gt;
&lt;a href="https://cleancode.studio/clean-code"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;


&lt;div class="ltag__user ltag__user__id__386677"&gt;
  
    .ltag__user__id__386677 .follow-action-button {
      background-color: #339d15 !important;
      color: #ffffff !important;
      border-color: #339d15 !important;
    }
  
    &lt;a href="/cleancodestudio" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iaD-SiIM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--uL9Viyw2--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/386677/50ab5359-8342-4fc0-961a-04bb95957fa1.jpg" alt="cleancodestudio image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Studio&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/cleancodestudio"&gt;Clean Code Clean Life ~ Simplify&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



</description>
      <category>javascript</category>
      <category>code</category>
      <category>programming</category>
      <category>design</category>
    </item>
    <item>
      <title>MATLAB MONDAYS💥- Crash Course part-6</title>
      <author>Aatmaj</author>
      <pubDate>Mon, 02 Aug 2021 06:24:19 +0000</pubDate>
      <link>https://dev.to/aatmaj/matlab-mondays-crash-course-part-6-2c3c</link>
      <guid>https://dev.to/aatmaj/matlab-mondays-crash-course-part-6-2c3c</guid>
      <description>&lt;h2&gt;
  &lt;a href="#welcome-all-this-monday-let-us-learn-prebaked-matlab-functions-which-we-can-just-use-off-the-shelf-after-that-we-will-learn-the-loop-in-matlab"&gt;
  &lt;/a&gt;
  Welcome all! ❤️‍🔥 This Monday let us learn pre-baked MATLAB functions which we can just use off the shelf. After that we will learn the loop in MATLAB.🤟
&lt;/h2&gt;




&lt;p&gt;Many times, we need to access the elements in middle of a vector or matrix. MATLAB provides easy methods to extract out the elements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessing vector elements&lt;/strong&gt;-&lt;/p&gt;

&lt;p&gt;We can access and the vector elements as shown in the example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;0&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;1&lt;/span&gt;     &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;5&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;MATLAB also allows us to access many elements at once. The result is a 'n' element vector&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;     &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An alternative may be&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="mi"&gt;4&lt;/span&gt;     &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can acess the last element of thee vector using the "end" keyword.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;8&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

     &lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Accessing matrix values&lt;/strong&gt;-&lt;br&gt;
Matrix values require both the row and the column number to be accessed&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="mf"&gt;0.9058&lt;/span&gt;    &lt;span class="mf"&gt;0.2785&lt;/span&gt;    &lt;span class="mf"&gt;0.9706&lt;/span&gt;    &lt;span class="mf"&gt;0.4218&lt;/span&gt;    &lt;span class="mf"&gt;0.0357&lt;/span&gt;    &lt;span class="mf"&gt;0.7431&lt;/span&gt;
    &lt;span class="mf"&gt;0.1270&lt;/span&gt;    &lt;span class="mf"&gt;0.5469&lt;/span&gt;    &lt;span class="mf"&gt;0.9572&lt;/span&gt;    &lt;span class="mf"&gt;0.9157&lt;/span&gt;    &lt;span class="mf"&gt;0.8491&lt;/span&gt;    &lt;span class="mf"&gt;0.3922&lt;/span&gt;
    &lt;span class="mf"&gt;0.9134&lt;/span&gt;    &lt;span class="mf"&gt;0.9575&lt;/span&gt;    &lt;span class="mf"&gt;0.4854&lt;/span&gt;    &lt;span class="mf"&gt;0.7922&lt;/span&gt;    &lt;span class="mf"&gt;0.9340&lt;/span&gt;    &lt;span class="mf"&gt;0.6555&lt;/span&gt;
    &lt;span class="mf"&gt;0.6324&lt;/span&gt;    &lt;span class="mf"&gt;0.9649&lt;/span&gt;    &lt;span class="mf"&gt;0.8003&lt;/span&gt;    &lt;span class="mf"&gt;0.9595&lt;/span&gt;    &lt;span class="mf"&gt;0.6787&lt;/span&gt;    &lt;span class="mf"&gt;0.1712&lt;/span&gt;
    &lt;span class="mf"&gt;0.0975&lt;/span&gt;    &lt;span class="mf"&gt;0.1576&lt;/span&gt;    &lt;span class="mf"&gt;0.1419&lt;/span&gt;    &lt;span class="mf"&gt;0.6557&lt;/span&gt;    &lt;span class="mf"&gt;0.7577&lt;/span&gt;    &lt;span class="mf"&gt;0.7060&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="mf"&gt;0.9572&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also extract a whole matrix using the syntax&lt;br&gt;
x(rows,columns), where rows is a array of rows while columns is array of columns. Here is are two examples which will make things very clear.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--OvlUySuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8g4lgx1u1uhkgzekiok.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--OvlUySuo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/m8g4lgx1u1uhkgzekiok.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Note that 2:4 means [2,3,4] while comma separated 2,4 means [2,4]&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sD1_joA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/566x0w1q2fhks3yjeljr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sD1_joA---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/566x0w1q2fhks3yjeljr.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to take an entire column or row, we can just place a semicolon ':' for it. Here is an example-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight matlab"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="mf"&gt;0.8314&lt;/span&gt;    &lt;span class="mf"&gt;0.4168&lt;/span&gt;    &lt;span class="mf"&gt;0.0155&lt;/span&gt;    &lt;span class="mf"&gt;0.1981&lt;/span&gt;    &lt;span class="mf"&gt;0.0527&lt;/span&gt;
    &lt;span class="mf"&gt;0.8034&lt;/span&gt;    &lt;span class="mf"&gt;0.6569&lt;/span&gt;    &lt;span class="mf"&gt;0.9841&lt;/span&gt;    &lt;span class="mf"&gt;0.4897&lt;/span&gt;    &lt;span class="mf"&gt;0.7379&lt;/span&gt;
    &lt;span class="mf"&gt;0.0605&lt;/span&gt;    &lt;span class="mf"&gt;0.6280&lt;/span&gt;    &lt;span class="mf"&gt;0.1672&lt;/span&gt;    &lt;span class="mf"&gt;0.3395&lt;/span&gt;    &lt;span class="mf"&gt;0.2691&lt;/span&gt;
    &lt;span class="mf"&gt;0.3993&lt;/span&gt;    &lt;span class="mf"&gt;0.2920&lt;/span&gt;    &lt;span class="mf"&gt;0.1062&lt;/span&gt;    &lt;span class="mf"&gt;0.9516&lt;/span&gt;    &lt;span class="mf"&gt;0.4228&lt;/span&gt;
    &lt;span class="mf"&gt;0.5269&lt;/span&gt;    &lt;span class="mf"&gt;0.4317&lt;/span&gt;    &lt;span class="mf"&gt;0.3724&lt;/span&gt;    &lt;span class="mf"&gt;0.9203&lt;/span&gt;    &lt;span class="mf"&gt;0.5479&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(:,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="mf"&gt;0.0155&lt;/span&gt;
    &lt;span class="mf"&gt;0.9841&lt;/span&gt;
    &lt;span class="mf"&gt;0.1672&lt;/span&gt;
    &lt;span class="mf"&gt;0.1062&lt;/span&gt;
    &lt;span class="mf"&gt;0.3724&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,:)&lt;/span&gt;

&lt;span class="nb"&gt;ans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;

    &lt;span class="mf"&gt;0.0605&lt;/span&gt;    &lt;span class="mf"&gt;0.6280&lt;/span&gt;    &lt;span class="mf"&gt;0.1672&lt;/span&gt;    &lt;span class="mf"&gt;0.3395&lt;/span&gt;    &lt;span class="mf"&gt;0.2691&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;That's all for this week. 🏆 Your comments really motivate me, so for any suggestions or doubts, please comment below 👇, and I will be happy to help 🙂 🎗️ Follow me for updates...&lt;br&gt;
Also, you can gmail me for any suggestion or help 🙌&lt;br&gt;
&lt;a href="https://www.linkedin.com/in/aatmajmhatre/"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0mtLmTxG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/linkedin-%25230077B5.svg%3F%26style%3Dfor-the-badge%26logo%3Dlinkedin%26logoColor%3Dwhite" alt="LinkedIn"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://aatmaj.mhatre@gmail.com"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C75QF96b--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.shields.io/badge/Gmail-D14836%3Fstyle%3Dfor-the-badge%26logo%3Dgmail%26logoColor%3Dwhite" alt="Gmail"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bye for now 🖐&lt;br&gt;
Meet you all soon👍&lt;/p&gt;

&lt;p&gt;➕➖✖️➗&lt;/p&gt;

</description>
      <category>matlab</category>
      <category>matlabmondays</category>
      <category>beginners</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Big O Time complexities of JavaScript Object, arrays, and their methods</title>
      <author>Himanshu Kanojiya</author>
      <pubDate>Mon, 02 Aug 2021 06:21:04 +0000</pubDate>
      <link>https://dev.to/himanshukanojiya/big-o-time-complexities-of-javascript-object-arrays-and-their-methods-5gpk</link>
      <guid>https://dev.to/himanshukanojiya/big-o-time-complexities-of-javascript-object-arrays-and-their-methods-5gpk</guid>
      <description>&lt;h3&gt;
  &lt;a href="#what-is-an-object"&gt;
  &lt;/a&gt;
  What is an Object? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;An object is a data container, where the collection of properties save in key-value pair format between the curly braces {}. &lt;/p&gt;

&lt;p&gt;Generally, the key-value pair is known as the property name and property value, where the property name should be unique, and it stays on the left side before colon ":" and property values on the right side after the colon.&lt;/p&gt;

&lt;p&gt;To separate individual property, we use a comma.&lt;/p&gt;

&lt;p&gt;Example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var obj = {name:"Himanshu", jobProfile:"SDE"}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the same property name with a different value is created again in the object, JavaScript considers only new property.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-object"&gt;
  &lt;/a&gt;
  When to use object &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We should use it when we don't need to save data in order, and at the same time required to get fast access, fast insertion, and removal.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-how-costly-object-and-their-methods-are"&gt;
  &lt;/a&gt;
  Let's see how costly object and their methods are &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Insertion Operation: Happens in O(1)&lt;/li&gt;
&lt;li&gt;Removal Operation: Happens in O(1)&lt;/li&gt;
&lt;li&gt;Searching Operation: Happens in O(N)&lt;/li&gt;
&lt;li&gt;Access Operation: Happens in O(1)&lt;/li&gt;
&lt;li&gt;Object.keys Method: Happens in O(N)&lt;/li&gt;
&lt;li&gt;Object.values Method: Happens in O(N)&lt;/li&gt;
&lt;li&gt;Object.entries Method: Happens in O(N)&lt;/li&gt;
&lt;li&gt;hasOwnProperty Method: Happens in O(N)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#what-is-an-array"&gt;
  &lt;/a&gt;
  What is an Array? &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;var arr = [1,2,3,4,null,() =&amp;gt; 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;An array is a data container that follows the linear data structure, which means all elements store in a sequential manner. The great thing about an Array in javascript is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It is dynamic, which means we can store almost all types of value in an array.&lt;/li&gt;
&lt;li&gt;As it is a dynamic array, we don't need to specify the length of an Array in advance like other languages.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-array"&gt;
  &lt;/a&gt;
  When to use Array &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;We should use it when we need to save data in order, and at the same time required to get fast access, fast insertion, and removal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;Fast Insertion and removal depend on where you  are adding and removing from &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#lets-see-how-costly-array-and-their-method"&gt;
  &lt;/a&gt;
  Let's see how costly Array and their method &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Insertion at the end of an Array: O(1)&lt;/li&gt;
&lt;li&gt;Removal at the end of an Array: O(1)&lt;/li&gt;
&lt;li&gt;Insertion at the beginning &amp;amp; mid of a non-empty Array: O(1)&lt;/li&gt;
&lt;li&gt;Removal of item from the start &amp;amp; mid of a non-empty Array: O(1)&lt;/li&gt;
&lt;li&gt;Searching if an Array unsorted: O(N)&lt;/li&gt;
&lt;li&gt;Searching if an Array sorted: Depends on the algorithm&lt;/li&gt;
&lt;li&gt;Access: O(1)&lt;/li&gt;
&lt;li&gt;push (inserting element at the end of an array): O(1)&lt;/li&gt;
&lt;li&gt;pop (deleting an element from the end of an array): O(1)&lt;/li&gt;
&lt;li&gt;Shift(opposite to push, and it shifts next elements to next index position): O(N)&lt;/li&gt;
&lt;li&gt;unshift (opposite to pop, and it shifts elements to the previous index position): O(N)&lt;/li&gt;
&lt;li&gt;concat: O(N)&lt;/li&gt;
&lt;li&gt;slice: O(N)&lt;/li&gt;
&lt;li&gt;splice: O(N)&lt;/li&gt;
&lt;li&gt;sort: depends&lt;/li&gt;
&lt;li&gt;forEach, map, filter, reduce: O(N)&lt;/li&gt;
&lt;/ol&gt;

</description>
      <category>javascript</category>
      <category>algorithms</category>
    </item>
    <item>
      <title>How to Change Application Name and Launcher Icon in Flutter.</title>
      <author>Hari Haren</author>
      <pubDate>Mon, 02 Aug 2021 06:12:03 +0000</pubDate>
      <link>https://dev.to/thisishariharen/how-to-change-application-name-and-launcher-icon-in-flutter-5428</link>
      <guid>https://dev.to/thisishariharen/how-to-change-application-name-and-launcher-icon-in-flutter-5428</guid>
      <description>&lt;p&gt;Hey there! 👋👋&lt;/p&gt;

&lt;p&gt;Today, I’ll teach you how you can change the default application name and launcher icon for a Flutter Application. Sometimes we create an application and give it a random name, but sooner or later, we realized that we need to change the name of the application. The same thing happens for the launcher icon also. Flutter has set its own default icon as a launcher icon when we create an application. So I’ve written this blog that will guide you step by step that how you can change the name and icon of a Flutter application. This article will guide you for both the platforms: Android and iOS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#step-1-changing-the-app-launcher%C2%A0name"&gt;
  &lt;/a&gt;
  Step 1: Changing the App Launcher Name
&lt;/h2&gt;

&lt;p&gt;By default, when a flutter app gets installed, the app name on the launcher is your Flutter project name. To change that to your desired application name on Android or iOS both, you need to change &lt;code&gt;AndroidManifest.xml&lt;/code&gt; and &lt;code&gt;Info.plist&lt;/code&gt; respectively.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For Android&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inside, find &lt;code&gt;&amp;lt;application&amp;gt;&lt;/code&gt; and change its &lt;code&gt;android:label&lt;/code&gt; property with your desired app name.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;android/app/src/main/AndroidManifest.xml&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;application
        android:name="io.flutter.app.FlutterApplication"
        android:label="your_app_name"
        android:icon="@mipmap/ic_launcher"&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For iOS&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;ios/Runner/Info.plist&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;key&amp;gt;CFBundleName&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;your_app_name&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it. By having these changes, we'll get an updated application name in the launcher when our app gets installed on a device.&lt;br&gt;
So, We are done with the application name here!!&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#step-2-change-app-launcher-icon"&gt;
  &lt;/a&gt;
  Step 2: Change App Launcher Icon
&lt;/h2&gt;

&lt;p&gt;In step 1, we change the application name to our desired one and now it’s time for the application icon.&lt;/p&gt;

&lt;p&gt;As Android developers, we know we’ve to put the app icon in the res folder. Additionally, we’ve to put the app icon in different sizes and that will be a headache we guess. Don’t worry!! we have a library for changing the app launcher icon in the Flutter.&lt;/p&gt;

&lt;p&gt;Obviously, to do so at least we need a single icon. So take a high-resolution icon (possibly 1024x1024) of your application and generate a launcher icon using follow:&lt;/p&gt;

&lt;p&gt;In Flutter, there is a dependency for the launcher icon which is published by fluttercommunity.dev&lt;br&gt;
Please check the link for dependency to get more details. You can find how to integrate that library into a project by going to that link and move to the installation section.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dependency: Flutter Launcher Icons&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For those who’re still reading further, let me guide you all here, how to integrate this dependency in the project.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;pubspec.yaml&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Step 1: Add this line in pubspec.yaml. Make sure you put your launcher icon in the proper assets folder and give a path to image_path attribute.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dev_dependencies: 
  flutter_launcher_icons: "latest version"

flutter_icons:
  android: true
  ios: true
  image_path: "assets/icon/icon.png"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For more attributes please check on the pub.dev link provided above.&lt;/p&gt;

&lt;p&gt;Step 2: Run the package by the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;flutter pub get
flutter pub run flutter_launcher_icons:main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That’s It. We are done here updating the app launcher icon. When this process gets finished and the app gets installed we’ll get to see the updated app icon in the launcher.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#additional-step-change-the-app-icon-manually"&gt;
  &lt;/a&gt;
  Additional Step: Change the app icon manually
&lt;/h2&gt;

&lt;p&gt;If the command from the package above didn’t work for us or maybe we need more customization, we can also set the launcher icon manually.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Android&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go to &lt;code&gt;android/app/src/main/res&lt;/code&gt; folder, where we will get to see some folders beginning with &lt;code&gt;mipmap-*&lt;/code&gt; which represent different pixel densities. Replace the &lt;code&gt;launcher_icon.png&lt;/code&gt; file in each folder to use custom icons.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;iOS&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The icon config files are located inside &lt;code&gt;ios/Runner/Assets.xcassets/AppIcon.appiconset&lt;/code&gt;. The &lt;code&gt;Contents.js&lt;/code&gt; onfile defines a list of icon images with different sizes and scales. The files are located in the same folder. Before updating our application icon to our desired one, It's recommended to follow the guideline for designing the iOS icon. This will simply remove some headaches of releasing our application.&lt;br&gt;
That’s it all for this article. I wish to share more articles in the future.&lt;/p&gt;

&lt;p&gt;If you find any difficulties while understanding this article or you have any doubts. Let me know by posting your questions and give me a chance to help you out. If you like it then don’t be  a stranger, give me few likes &amp;amp; you can also buy me a coffee before leaving. Cheers! 😉✌ &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/hariharen"&gt; Buy Me a ☕ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks!. Catch Y'all Soon&lt;br&gt;
(Originally posted on Medium.com - &lt;a href="https://hariharen.medium.com/flutter-change-application-name-and-launcher-icon-90c5b1ef7d21"&gt; Link &lt;/a&gt; )&lt;/p&gt;

</description>
      <category>flutter</category>
      <category>mobileapp</category>
      <category>reactnative</category>
      <category>icon</category>
    </item>
    <item>
      <title>New Luos feature: Template Creation for State, Voltage, Motor and Servo</title>
      <author>Emanuel Allely</author>
      <pubDate>Mon, 02 Aug 2021 05:58:37 +0000</pubDate>
      <link>https://dev.to/emanuel_allely/new-luos-feature-template-creation-for-state-voltage-motor-and-servo-2f98</link>
      <guid>https://dev.to/emanuel_allely/new-luos-feature-template-creation-for-state-voltage-motor-and-servo-2f98</guid>
      <description>&lt;p&gt;🆕 New Luos feature in the 1.3.0 &lt;strong&gt;release&lt;/strong&gt;: "Template Creation for State, Voltage, Motor and Servo" ➞ To make the &lt;strong&gt;embedded&lt;/strong&gt; development easier, we have to make everything work the same way.&lt;/p&gt;

&lt;p&gt;For example, there are many different motor technologies and control, but all motors have the same purpose: making something move. And because all of them have the same purpose, we also should have the same &lt;strong&gt;profile&lt;/strong&gt; or &lt;strong&gt;API&lt;/strong&gt; for them! That's why we created the &lt;strong&gt;Templates&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Profiles are advanced APIs dedicated to common &lt;strong&gt;Drivers&lt;/strong&gt; such as motors, and we call template the container hosting a profile. Templates are &lt;strong&gt;containers&lt;/strong&gt; that will manage for you the profile (API) of your driver.&lt;/p&gt;

&lt;p&gt;By developing this kind of container, you don't need to take care of message management anymore. You only need to deal with simple variables adapted to your container's needs! And of course, you can create your own profiles, compose a new one with the already existing ones and share it with your team or the &lt;strong&gt;community&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;More details are in the Luos profile section of our documentation ➞ &lt;a href="https://docs.luos.io/pages/embedded/containers/use-profiles.html"&gt;https://docs.luos.io/pages/embedded/containers/use-profiles.html&lt;/a&gt;&lt;/p&gt;

</description>
      <category>embedded</category>
      <category>embeddedsystems</category>
      <category>opensource</category>
      <category>luos</category>
    </item>
    <item>
      <title>69 tips I got from The Pragmatic Programmer</title>
      <author>Ruben Sanchez</author>
      <pubDate>Mon, 02 Aug 2021 05:49:42 +0000</pubDate>
      <link>https://dev.to/rubenwap/69-tips-i-got-from-the-pragmatic-programmer-book-1nci</link>
      <guid>https://dev.to/rubenwap/69-tips-i-got-from-the-pragmatic-programmer-book-1nci</guid>
      <description>&lt;p&gt;The Pragmatic Programmer is a book by Andrew Hunt and David Thomas written in 1999. I have been reading it over the last few months and my final impression is that I am sure that any programmer out there can learn something by reading it. Novice or experienced, this book is packed with good advice. I have tagged the very best tips with a chili pepper (🌶), for reference. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZsbrp1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk0oxe5ma1qlmgfqrbi1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZZsbrp1K--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tk0oxe5ma1qlmgfqrbi1.png" alt="The pragmatic programmer book cover"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy this article, &lt;a href="https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/"&gt;get the book&lt;/a&gt; &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#so-what-do-you-need-to-do-to-become-a-pragmatic-programmer"&gt;
  &lt;/a&gt;
  So, what do you need to do to become a Pragmatic Programmer?
&lt;/h4&gt;

&lt;p&gt;1) Early adopter/fast adapter&lt;/p&gt;

&lt;p&gt;2) Inquisitive&lt;/p&gt;

&lt;p&gt;3) Critical thinker&lt;/p&gt;

&lt;p&gt;4) Realistic&lt;/p&gt;

&lt;p&gt;5) Jack of all trades&lt;/p&gt;

&lt;p&gt;6) Cares about the craft&lt;/p&gt;

&lt;p&gt;7) Never runs on auto pilot&lt;/p&gt;

&lt;p&gt;8) Pragmatic Programmers think beyond the immediate problem, always trying to place it in its larger context 🌶&lt;/p&gt;

&lt;p&gt;9) They take responsibility for everything they do&lt;/p&gt;

&lt;p&gt;10) Isn't afraid to admit ignorance or error 🌶&lt;/p&gt;

&lt;p&gt;11) You need to have a broad base of knowledge and experience to pull all of this off. Learning is a continuous and ongoing process&lt;/p&gt;

&lt;p&gt;12) When you accept responsibliity for an outcome, you should expect to be held accountable for it&lt;/p&gt;

&lt;p&gt;13) Before approaching anyone to tell them why something can't be done, is late or broken, stop and listen to yourself. Will they ask "have you tried this..." or "didn't you consider that?..." How will you respond? 🌶&lt;/p&gt;

&lt;p&gt;14) We need to decide what to test at the unit level. Typically programmers throw a few random bits of data at the code and call it tested. We can do much better using the ideas behind design by contract. This style of testing requires you to test subcomponents of a module first. Once the subcomponents have been verified, then the module itself can be tested. &lt;/p&gt;

&lt;p&gt;15) By designing code to pass a test and fulfull its contract, you may well consider boundary conditions and other issues that wouldn't occur to you otherwise. &lt;/p&gt;

&lt;p&gt;16) Constantly review what's happening around you, not just what you personally are doing 🌶&lt;/p&gt;

&lt;p&gt;17) Many users would rather use software with some rough edges today than wait a year for the multimedia version&lt;/p&gt;

&lt;p&gt;18) You must invest in your knowledge portfolio regularly&lt;/p&gt;

&lt;p&gt;19) Having the best ideas, the finest code or the most pragmatic thinking is ultimately sterile unless you can communicate with other people 🌶&lt;/p&gt;

&lt;p&gt;20) When you are faced with an important meeting, jot down the ideas you want to communicate and plan a couple of strategies for getting them across&lt;/p&gt;

&lt;p&gt;21) You are communicating only if you are conveying information. To do that, you need to understand the needs, interests and capabilities of your audience 🌶&lt;/p&gt;

&lt;p&gt;22) Make what you are saying relevant in time, as well as in content. Sometimes all it takes is the simple question "Is this a good time to talk about...?"&lt;/p&gt;

&lt;p&gt;23) Programmers are constantly in maintenance mode&lt;/p&gt;

&lt;p&gt;24) Imposed duplication: Developers feel they have no choice - the environment seems to require duplication. &lt;/p&gt;

&lt;p&gt;25) Inadvertent duplication: Developers don't realize that they are duplicating information&lt;/p&gt;

&lt;p&gt;26) Impatient duplication: Developers get lazy and duplicate because it seems easier. 🌶&lt;/p&gt;

&lt;p&gt;27) Interdeveloper duplication: Multiple people on a team duplicate a piece of information&lt;/p&gt;

&lt;p&gt;28) Bad code requires lots of comments&lt;/p&gt;

&lt;p&gt;29) We all know that in the heat of the moment with deadlines looming, we tend to defer the updating of documentation&lt;/p&gt;

&lt;p&gt;30) Appoint a team member as the project librarian, whose job is to facilitate the exchange of knowledge&lt;/p&gt;

&lt;p&gt;31) Two or more things are orthogonal if changes in one do not affect any of the others &lt;/p&gt;

&lt;p&gt;32) We want to design components that are self contained: independent and with a single well defined purpose. When components are isolated from one another, you know that you can change one without having to worry about the rest. &lt;/p&gt;

&lt;p&gt;33) You get two major benefits if you write orthogonal systems: Increased productivity and reduced risk 🌶&lt;/p&gt;

&lt;p&gt;34) Single components can be designed, coded, unit tested and then forgotten. There is no need to keep changing existing code as you add new code. &lt;/p&gt;

&lt;p&gt;35) An orthogonal approach promotes reuse and will probably be better tested, because it will be easier to design and run tests on its components. &lt;/p&gt;

&lt;p&gt;36) When teams are organized with lots of overlap, members are confused about responsibilities. Every change needs a meeting of the entire team, because any one of them might be affected. &lt;/p&gt;

&lt;p&gt;37) If I dramatically change the requirements behind a particular functions, how many modules are affected? In an orthogonal system the answer should be "one"&lt;/p&gt;

&lt;p&gt;38) Avoid global data 🌶&lt;/p&gt;

&lt;p&gt;39) Keep your code decoupled 🌶&lt;/p&gt;

&lt;p&gt;40) Avoid similar functions&lt;/p&gt;

&lt;p&gt;41) Building unit tests is itself an interesting test of orthogonality. Do you have to drag in a large percentage of the rest of the system just to get a test to compile? If so, you've found a module that is not well decoupled from the rest of the system. &lt;/p&gt;

&lt;p&gt;42) The first part of any time estimation is building an understanding of what is being asked. Estimates given at the coffee machine will come back to haunt you. 🌶&lt;/p&gt;

&lt;p&gt;43) Be strict in what you will accept before you begin, and promise as little as possible in return. &lt;/p&gt;

&lt;p&gt;44) When debugging, don't gloss over a routine or piece of code involved because you "know" it works. Don't assume it - Prove it. 🌶&lt;/p&gt;

&lt;p&gt;45) Is the problem being reported a direct result of the underlying bug, or merely a symptom? Is this bug really in the compiler? Or is it in the OS? Or is it in your code? If you explained this problem in detail to a coworker, what would you say? If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data? Do the ocnditions that caused this bug exist anywhere else in the system? &lt;/p&gt;

&lt;p&gt;46) You could convince yourself that the error can't happen and ignore it. Instead, Pragmatic Programmers tell themselves that if there is an error, something very bad has happened. &lt;/p&gt;

&lt;p&gt;47) A dead program normally does a lot less damage than a crippled one. 🌶&lt;/p&gt;

&lt;p&gt;48) Will this code still run if I remove all the exception handlers? If the answer is "no", maybe exceptions are being used in non-exceptional circumstances. &lt;/p&gt;

&lt;p&gt;49) The routine or object that allocates a resource should be responsible for deallocating. &lt;/p&gt;

&lt;p&gt;50) Deallocate resources in the opposite order to that in which you allocate them. &lt;/p&gt;

&lt;p&gt;51) A good way to stay flexible is to write less code. 🌶&lt;/p&gt;

&lt;p&gt;52) Do you depend on the "tick" coming before the "tock"? Not if you want to stay flexible. &lt;/p&gt;

&lt;p&gt;53) Always design for concurrency&lt;/p&gt;

&lt;p&gt;54) Separate views from models&lt;/p&gt;

&lt;p&gt;55) Fred doesn't know why the code is failing because he didnt know why it worked in the first place. Always be aware of what you are doing. Fred let things get slowly out of hand, until he ended up boiled like the frog. 🌶&lt;/p&gt;

&lt;p&gt;56) Attempting to build an application you don't fully understand or to use a technology you aren't familiar with, is an invitation to be misled by coincidences. 🌶&lt;/p&gt;

&lt;p&gt;57) If you don't have fundamentals or infrastructure correct, brilliant bells and whistles will be irrelevant. &lt;/p&gt;

&lt;p&gt;58) Don't be a slave to history. Don't let existing code dictate future code 🌶&lt;/p&gt;

&lt;p&gt;59) All code can be replaced if it is no longer appropriate&lt;/p&gt;

&lt;p&gt;60) Next time something seems to work, but you don't know why, make sure it isn't just a coincidence. &lt;/p&gt;

&lt;p&gt;61) Rather than construction, software is more like gardening 🌶&lt;/p&gt;

&lt;p&gt;62) Don't try to refactor and add functionality at the same time. &lt;/p&gt;

&lt;p&gt;63) Make sure you have good tests before you begin refactoring. Run the tests as often as possible. That way you will know quickly if your changes have broken anything. &lt;/p&gt;

&lt;p&gt;64) Test your software or your users will&lt;/p&gt;

&lt;p&gt;65) No matter which "best practices" it includes, no method can replace thinking. 🌶&lt;/p&gt;

&lt;p&gt;66) Good requirements documents remain abstract&lt;/p&gt;

&lt;p&gt;67) The team speaks with one voice -- externally -- Internally we encourage lively and robust debate. &lt;/p&gt;

&lt;p&gt;68) Ask yourself if the software meets the performance requirements under real world conditions -- with expected number of users or connections or transactions per second -- Is it scalable? &lt;/p&gt;

&lt;p&gt;69) On documentation, we like to see a simple module level header comment, comments for significant data and type declarations and a brief per class and per method header&lt;/p&gt;

</description>
      <category>books</category>
      <category>career</category>
      <category>productivity</category>
    </item>
    <item>
      <title>5 ux tips to become a better front end developer </title>
      <author>CSS MASTER</author>
      <pubDate>Mon, 02 Aug 2021 05:43:48 +0000</pubDate>
      <link>https://dev.to/learn_css/5-ux-tips-to-become-a-better-front-end-developer-299p</link>
      <guid>https://dev.to/learn_css/5-ux-tips-to-become-a-better-front-end-developer-299p</guid>
      <description>&lt;p&gt;&lt;strong&gt;Should I use this&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;plugin or&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;that&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;library?&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;Should I plan&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;this project or dive straight into coding?&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;strong&gt;Should I ask&lt;/strong&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;for help or figure it out myself?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Sounds familiar?&lt;/p&gt;
&lt;p&gt;&lt;span&gt;Ever since the dawn of time, a UX Designer has been responsible for the whole product lifecycle.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Often while starting out, beginners struggle to create &lt;em&gt;captivating&lt;/em&gt; &lt;span&gt;UI&lt;/span&gt; that gets users hooked to their applications. Today we are going to fix just that.&lt;/p&gt;
&lt;p&gt;But before starting I would like to point out that there is no &lt;span&gt;One Right Answer&lt;/span&gt; to Designing, anything that looks pleasing to the eye of a large majority of the people is considered &lt;em&gt;good design&lt;/em&gt;. In this article, we would go over 5 Tips that are considered &lt;em&gt;Good Design Practices&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I know how you feel. I felt the same way.&lt;/strong&gt; That all changed when I started implementing the below points into my routine.&lt;/p&gt;
&lt;p&gt;&lt;span id="more-1339"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Whether you are a &lt;strong&gt;newbie&lt;/strong&gt; or &lt;strong&gt;professional&lt;/strong&gt;, chances are that some of these points will help you to &lt;strong&gt;bring your front-end development career to the next level&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Here are 6 tips to &lt;strong&gt;help you to become a better front-end developer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span&gt;&lt;b&gt;Read more&lt;/b&gt;: &lt;/span&gt;&lt;span&gt;&lt;b&gt;&lt;a href="https://www.codelivly.com/6-ux-tips-to-become-a-better-front-end-developer/"&gt;5 ux tips to become a better front end developer&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;/p&gt;

</description>
      <category>ux</category>
      <category>webdev</category>
    </item>
    <item>
      <title>How to avoid headaches while coding?</title>
      <author>Shubhra Agarwal</author>
      <pubDate>Mon, 02 Aug 2021 05:21:18 +0000</pubDate>
      <link>https://dev.to/shubhracodes/how-to-avoid-headaches-while-coding-4okf</link>
      <guid>https://dev.to/shubhracodes/how-to-avoid-headaches-while-coding-4okf</guid>
      <description>&lt;p&gt;Sitting in front of the laptop for prolonged hours coding or doing office work has been very common since the start of the pandemic.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;"How to avoid headaches while coding? 😶"&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is the question that I have been asking myself for a long time. &lt;br&gt;
These are the few tricks I used to reduce my headache :&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#202020-rule"&gt;
  &lt;/a&gt;
  1️⃣ 20-20-20 rule
&lt;/h2&gt;

&lt;p&gt;There's a reason why this tip is on the top of the list.&lt;br&gt;
This is the most effective way of reducing your headache frequency and intensity.&lt;/p&gt;

&lt;p&gt;You just have to look at something 20 feet away for 20 seconds every 20 minutes. This not only reduces your headaches but also helps in keeping your eyes healthy as sitting in front of a screen for long hours eventually makes us near sighted because we do not look at fat sighted objects. So, focusing on something which is at least 20 feet away from you will prevent this from happening. &lt;/p&gt;

&lt;p&gt;It's a "strict" rule, but really just looking away often enough is THE tip for me to avoid a headache.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#good-lighting"&gt;
  &lt;/a&gt;
  2️⃣ Good lighting
&lt;/h2&gt;

&lt;p&gt;Lighting is a key point in preventing headaches. A lot of programmers like to code in the dark, even though it looks cool, it's harming you in the long run. All the light from your screen will put strain on your eyes if the surroundings are not brighter than the screen. See what works for you, it might be using a light behind your screen or dark mode on your screen. You can even get a monitor light.&lt;br&gt;
If you need it, zoom in on web pages!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#always-have-water-next-to-you-and-drink-as-often-as-you-can"&gt;
  &lt;/a&gt;
  3️⃣ Always have water next to you and drink as often as you can
&lt;/h2&gt;

&lt;p&gt;Dehydration has a direct impact on the brain as brain cells require water to function, just like other cells in the body. Water is also needed to prevent tissues from drying out.&lt;/p&gt;

&lt;p&gt;Being hydrated plays a huge factor in reducing the frequency and intensity of your headaches.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blue-light-filter-glasses"&gt;
  &lt;/a&gt;
  4️⃣ Blue light filter glasses
&lt;/h2&gt;

&lt;p&gt;This might sound a bit cliché but blue light filter glasses helped me a lot! They not only reduce headaches but are effective in fatigue, insomnia, lack of focus and blurred vision. If you haven't used them yet then I strongly suggest you to try out a pair of blue light filter glasses.&lt;/p&gt;

&lt;p&gt;Everyone is different, these are my tips! I hope they work for you too!!&lt;/p&gt;

</description>
      <category>coding</category>
      <category>headaches</category>
      <category>programming</category>
    </item>
    <item>
      <title>5 Free eBooks for Developers</title>
      <author>Suraj Vishwakarma</author>
      <pubDate>Mon, 02 Aug 2021 05:14:00 +0000</pubDate>
      <link>https://dev.to/surajondev/5-free-ebooks-for-developers-79p</link>
      <guid>https://dev.to/surajondev/5-free-ebooks-for-developers-79p</guid>
      <description>&lt;h1&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h1&gt;

&lt;p&gt;Here a list of 5 eBooks that are created by professional and are very beneficial for developers for improving technical, marketing and soft skills. &lt;/p&gt;

&lt;p&gt;This list of books were sent as &lt;strong&gt;Newsletter&lt;/strong&gt; of the subscribed user. A new list of free eBook is coming this &lt;strong&gt;Wednesday&lt;/strong&gt;. So subscribe it to get more books like this.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#weekly-newsletter-of-surajondev"&gt;
  &lt;/a&gt;
  &lt;a href="https://www.getrevue.co/profile/surajondev"&gt;Weekly Newsletter of SurajOnDev&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cL1qWSEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boivc5mdfzzs2kt0s5wg.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cL1qWSEE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/boivc5mdfzzs2kt0s5wg.PNG" alt="Weekly Newsletter of SurajOnDev"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-you-will-get"&gt;
  &lt;/a&gt;
  What you will get?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Read of the Week&lt;/strong&gt;: 5 best articles hand-picked by myself from different platforms. This article will be developer, self-growth, and productivity-oriented.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Tool of the Week&lt;/strong&gt;: A resource or tool link that will help in easing your work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Our latest blog post&lt;/strong&gt;: Latest 3 blog post from SurajOnDev that is me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Free eBook and Resources&lt;/strong&gt;: Occasionally you will get free eBook that are by developers and for developers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Frequency&lt;/strong&gt;: Weekly&lt;br&gt;
&lt;strong&gt;Subscribe Here&lt;/strong&gt;:  &lt;a href="https://tripetto.app/run/4OQIUAO89L"&gt;Weekly Newsletter of SurajOnDev&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-free-sections-of-the-web-developer-knowledge"&gt;
  &lt;/a&gt;
  2 FREE Sections of the Web Developer Knowledge
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;What do you get?&lt;/em&gt;&lt;br&gt;
&lt;em&gt;1. A complete Web Developer Roadmap with free resources&lt;/em&gt;&lt;br&gt;
&lt;em&gt;2. How to grow your Twitter account&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Get eBook Here: &lt;a href="https://vladpasca5.gumroad.com/l/2-free-sections"&gt;&lt;strong&gt;Web Developer Knowledge&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;--&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-be-creative"&gt;
  &lt;/a&gt;
  How To Be Creative
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;So you want to be more creative in art, in business, whatever. Here are some tips that have worked for me over the years.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Get eBook Here: &lt;a href="https://www.porchlightbooks.com/blog/changethis/2004/how-to-be-creative"&gt;&lt;strong&gt;How To Be Creative&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#the-guide-to-wireframing"&gt;
  &lt;/a&gt;
  The Guide to Wireframing
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;For Designers, PMs, Engineers, and Anyone Who Touches Product&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Get eBook Here: &lt;a href="https://www.uxpin.com/studio/ebooks/guide-to-wireframing/"&gt;&lt;strong&gt;The Guide to Wireframing&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#speak-like-a-leader-effective-communication-skills"&gt;
  &lt;/a&gt;
  Speak Like A Leader: Effective Communication Skills
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Inside this eBook, you will discover the topics about&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;what is effective communication in a good leader&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;know your audience&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;much more...&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Get eBook Here: &lt;a href="https://cero.gumroad.com/?_ga=2.249078919.1067598590.1626671761-1944177497.1615261608#BFpEN"&gt;&lt;strong&gt;Speak Like A Leader&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#getting-from-employee-5-to-50-a-startup-hiring-guide"&gt;
  &lt;/a&gt;
  Getting From Employee 5 to 50 - A Startup Hiring Guide
&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Your first five hires pretty much chose themselves. (“You’ll give this your all? Okay, you’re in!”) But getting from 5 to 50?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Get eBook Here: &lt;a href="https://go.workable.com/startup-hiring-guide"&gt;&lt;strong&gt;Getting From Employee 5 to 50&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#last-note"&gt;
  &lt;/a&gt;
  Last Note
&lt;/h1&gt;

&lt;p&gt;If you want to get free eBook on regular basis. So subscirbe the newsletter &lt;a href="https://tripetto.app/run/4OQIUAO89L"&gt;&lt;strong&gt;Weekly Newsletter of SurajOnDev&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I hope you like the blog post. Thanks for reading it.&lt;/em&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Beware of how you create a Task</title>
      <author>G.L Solaria</author>
      <pubDate>Mon, 02 Aug 2021 04:52:55 +0000</pubDate>
      <link>https://dev.to/glsolaria/beware-of-how-you-create-a-task-23h9</link>
      <guid>https://dev.to/glsolaria/beware-of-how-you-create-a-task-23h9</guid>
      <description>&lt;p&gt;I have made this mistake a few times now so I thought I would try to cement it in to my memory by writing a post about it!&lt;/p&gt;

&lt;p&gt;I had a case where I wanted to separate the task creation from the task run in one of my previous posts and I used code that looked like this ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;FireAndForget&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Warning: Do not do this ...&lt;/span&gt;
  &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Going to sleep ..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"... Woke up"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;FireAndForget&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Run complete"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Going to sleep ...
Run complete
... Woke up
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Initially I expected the "... Woke up" message to be output before the "Run complete" message. But then I remembered that the signature for the Task constructor is ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Task&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Action&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This means I am awaiting a task that is executing an action. Action returns an async void so when the action is executed, it will not actually await the completion of the Task.Delay. &lt;/p&gt;

&lt;p&gt;What I actually needed to use was Func that returns a Task ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight csharp"&gt;&lt;code&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;FireAndAwaitAsync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;funcTask&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Func&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Going to sleep ..."&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"... Woke up"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;funcTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Invoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="n"&gt;Task&lt;/span&gt; &lt;span class="nf"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nf"&gt;FireAndAwaitAsync&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;WriteLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;$"&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;DateTime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Now&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s"&gt; Run complete"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;Console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ReadKey&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which outputs ...&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Going to sleep ...
... Woke up
Run complete
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Generally you don't need to separate out task creation from running the task so this is not usually an issue. Now to go back over my previous posts and make sure I fix this error.&lt;/p&gt;

</description>
      <category>csharp</category>
    </item>
  </channel>
</rss>
