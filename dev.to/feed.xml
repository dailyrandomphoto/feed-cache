<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is the difference between SQL and SQL Server (and similar tools)? üòáüéâ</title>
      <author>Aashish Chaubey üí•‚ö°Ô∏è</author>
      <pubDate>Sun, 11 Jul 2021 12:39:30 +0000</pubDate>
      <link>https://dev.to/aashish/what-is-the-difference-between-sql-and-sql-server-and-similar-tools-3n3o</link>
      <guid>https://dev.to/aashish/what-is-the-difference-between-sql-and-sql-server-and-similar-tools-3n3o</guid>
      <description>&lt;p&gt;Hey people,&lt;/p&gt;

&lt;p&gt;I am a programmer and have been one since last 3 years. I completed my B.Tech degree back in 2018 and I must admit, I was not particularly a big fan of DBMS, somehow I managed to complete the course and secure passing grades. I know it is an important subject but it never appealed me as much and therefore I never took as much interest (I always felt guilty of it). &lt;/p&gt;

&lt;p&gt;As established, it is not an epiphany for me that it is an important subject and I must get my hand dirty with it, so I decided to pursue it and complete at least 2 projects in the next couple of weeks. This way sans Big Data (I am slowly working on that too), I will have all my grounds covered as a full stack data scientist. &lt;/p&gt;

&lt;p&gt;Thats enough about me, now lets literally get to the title of this blog post. I know many beginning with SQL will have this question in mind. So here I am, explaining the basics as I learn. Please feel free to point out anything you feel should be corrected, I'll appreciate the feedback.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2mku-Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgu0twslt9hude25vops.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2mku-Ss--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zgu0twslt9hude25vops.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lets first get to know what SQL is, in brief!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;üìù Definition: SQL&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By definition, SQL (Structured Query Language) is a query language. It is generally used with Structured Databases, or for processing data streams in real-time in relational data stream management system to query, manipulate the relational database data. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üí° Gotcha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So basically, SQL is a language. As this is a language, and a quite popular one, there are various dialects of this language. And anyone familiar with computers or even remotely acquainted with how computer works will know a language needs some kind of environment to be executed in. &lt;/p&gt;

&lt;p&gt;It is environment that interprets the commands of the language, identifies different dialect and executes the command particular to the dialect. Let's park this environment concept for now and we will come back to it later in this post. Let's talk about SQL a little more.&lt;/p&gt;

&lt;p&gt;SQL comprises of 3 major sub-languages:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Data Definition Language (DDL): to create and modify the structure of the database&lt;/li&gt;
&lt;li&gt;Data Manipulation Language (DML): to perform read, insert, update, and delete operations on the data of the database&lt;/li&gt;
&lt;li&gt;Data Control Language (DCL): to control the access of the data stored in the database&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;üìù Definition: SQL Server&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;SQL Server is proprietary software or an RDBMS tool that executes the SQL statements. It also provides some additional features and functionalities, so that the user can properly interact with the database and can perform all the database operations efficiently.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;üí° Gotcha&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So basically, it is a database software. It uses SQL as a language to query the database.&lt;/p&gt;

&lt;p&gt;The popular ones include MySQL, SQL Server, Oracle, Informix, Postgres etc. They are mix of open source and proprietary software available to use.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFNo4bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmvo4zbpjfyv76adzuui.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JcFNo4bD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmvo4zbpjfyv76adzuui.png" alt="Source: SPLessons"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;I hope that clarifies your doubt and you are good to go ahead and understand which to use where. It should also make you clear with what you are using and what are different softwares you can compare (I know I haven't been quite comprehensive with the list, but then which softwares we use actually depends on the requirement which concerns security, control features, compatibility with the server, or the source of distribution. &lt;/p&gt;

&lt;p&gt;People who know more about it, please share your opinion through the comments.&lt;/p&gt;

&lt;p&gt;Thanks - until next time!&lt;/p&gt;

</description>
      <category>sql</category>
      <category>mustknow</category>
      <category>beginners</category>
      <category>programming</category>
    </item>
    <item>
      <title>useLocal: the useState hook for a properly-synced state</title>
      <author>Lukas Klinzing</author>
      <pubDate>Sun, 11 Jul 2021 12:28:56 +0000</pubDate>
      <link>https://dev.to/theluk/uselocal-the-usestate-hook-for-a-properly-synced-state-32kp</link>
      <guid>https://dev.to/theluk/uselocal-the-usestate-hook-for-a-properly-synced-state-32kp</guid>
      <description>&lt;p&gt;As you might know, the React hook &lt;code&gt;useState&lt;/code&gt; takes one argument, which will initialize its internal state to that given value. When React 16 with Hooks got released, I found it a little bit confusing, but it perfectly makes sense.&lt;/p&gt;

&lt;p&gt;No matter what, there are still situations, where you need to update the state based on the incoming props. Usually that is done using a &lt;code&gt;useEffect&lt;/code&gt; hook, where you listen on the incoming prop to change, and then update your local state. &lt;/p&gt;

&lt;p&gt;This is a great way of handling it, because you, as the owner of the component can perfectly control, if the parent prop change is actually what you want. It could even break your component if the parent decides to update a prop during a critical state of your component. &lt;/p&gt;

&lt;p&gt;But there are also situations, where not much can happen. There are simple scenarios where you basically want to hold a local version and not propagate it up the tree until a certain condition happen. During that time, you still want to allow the parent controlling component to update the local value, if that is what it wants. &lt;/p&gt;

&lt;p&gt;Here is an example how to allow the parent controlling component set (and update, if necessary) the from and to values. It can happen that for example for whatever reason, there is another component, that can set a date range, for that, we would want that from and to can be updated.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;RangeDatepicker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nx"&gt;onChange&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setFrom&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setTo&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useLocal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;onChange&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
   &lt;span class="p"&gt;}&lt;/span&gt;

   &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;MyCalendarRangePicker&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChangeFrom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setFrom&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;onChangeTo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;setTo&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;the easiest implementation of such a hook (in Typscript) looks like this&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;One further improvement would be, to pass in some conditional function that checks, if it is allowed to update the local state. &lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;You can visit the gist here&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/theluk/13b7a17455b599699b7d34775cbf8273"&gt;https://gist.github.com/theluk/13b7a17455b599699b7d34775cbf8273&lt;/a&gt;&lt;/p&gt;

</description>
      <category>react</category>
      <category>hooks</category>
      <category>usestate</category>
      <category>typescript</category>
    </item>
    <item>
      <title>The Four Stages Of Full Software Testing</title>
      <author>Abdulcelil Cercenazi</author>
      <pubDate>Sun, 11 Jul 2021 12:21:27 +0000</pubDate>
      <link>https://dev.to/jarjanazy/the-four-stages-of-full-software-testing-2fgp</link>
      <guid>https://dev.to/jarjanazy/the-four-stages-of-full-software-testing-2fgp</guid>
      <description>&lt;p&gt;üëâTesting software is crucial to assure that it does what we expect it to do, and to catch problems as early as possible to speed up the development process.&lt;/p&gt;

&lt;p&gt;üëâThe process of testing can be divided into 4 stages, starting from writing code and ending with deploying to production.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#commit-stage"&gt;
  &lt;/a&gt;
  1Ô∏è‚É£ Commit Stage
&lt;/h2&gt;

&lt;p&gt;This includes tests that fail fast&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A total run time of 5 minutes or less is preferred.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?ü§î
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Unit tests

&lt;ul&gt;
&lt;li&gt;Testing isolated units of behavior.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Controller tests

&lt;ul&gt;
&lt;li&gt;For example, Given that we send a POST request to this endpoint, it should fail because the parameters are invalid.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Database tests

&lt;ul&gt;
&lt;li&gt;For example, Given those records in the DB, this method should get them.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Coding standards tests

&lt;ul&gt;
&lt;li&gt;This test fails because at file X you have 5 empty lines.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#acceptance-stage"&gt;
  &lt;/a&gt;
  2Ô∏è‚É£ Acceptance Stage
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?üßê
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Acceptance tests&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For example, When user X logs in and orders a new book, we should create a new order request and send an email.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configuration tests.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Any other tests that we want to run prior to release.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#release-stage"&gt;
  &lt;/a&gt;
  3Ô∏è‚É£ Release Stage
&lt;/h2&gt;

&lt;p&gt;This stage comes after building the software and attaching all its components together.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?üëÄ
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Smoke test

&lt;ul&gt;
&lt;li&gt;Test the system's most important features.

&lt;ul&gt;
&lt;li&gt;Sign-in, book purchase, etc...&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;Canary release testingüê§

&lt;ul&gt;
&lt;li&gt;Releasing the new version of the system to places of low impact.&lt;/li&gt;
&lt;li&gt;For example, Netflix uses Canary releasing by releasing new updates to geographic locations in the world where it's 1 AM so if any failure happens, only few people experience it.ü§´&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exception tracking.&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#product-stage"&gt;
  &lt;/a&gt;
  4Ô∏è‚É£ Product Stage
&lt;/h2&gt;

&lt;p&gt;This stage is executed after the system is deployed to production and is under use.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-kind-of-tests"&gt;
  &lt;/a&gt;
  What kind of tests?‚ùî
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Can it scale up/down?&lt;/li&gt;
&lt;li&gt;Is it using a lot of memory/disk/CPU?&lt;/li&gt;
&lt;li&gt;What is the request response time?&lt;/li&gt;
&lt;li&gt;Do performance metrics match predications?&lt;/li&gt;
&lt;li&gt;Security.&lt;/li&gt;
&lt;li&gt;For example Netflix has teams to test those aspects and try to break the system.

&lt;ul&gt;
&lt;li&gt;Chaos monkeys, Latency monkeys, Security monkeysüêí&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;




&lt;h3&gt;
  &lt;a href="#this-material-in-this-post-is-mainly-derived-from-dave-farley-amazing-video-on-testing"&gt;
  &lt;/a&gt;
  This material in this post is mainly derived from Dave Farley amazing &lt;a href="https://www.youtube.com/watch?v=z-3aSVfoyBY&amp;amp;t=761s"&gt;video&lt;/a&gt; on testing.
&lt;/h3&gt;

</description>
      <category>programming</category>
      <category>webdev</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>üì¶ How is C++ Compiled?</title>
      <author>Sahil Bondre</author>
      <pubDate>Sun, 11 Jul 2021 12:16:25 +0000</pubDate>
      <link>https://dev.to/godcrampy/how-is-c-compiled-4668</link>
      <guid>https://dev.to/godcrampy/how-is-c-compiled-4668</guid>
      <description>&lt;p&gt;I've been using C++ for quite a while now. This got me into thinking, how does C++ work under the hood? So I came up with this short video in which I explain the whole C++ compilation process.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/rUtprDA0bgc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;p&gt;And that is it, folks. Let me know your takeaways from the video. If you have any other video or article ideas, comment on them too. Oh, BTW, do you want to learn Bash? Here's my crash-course post on Shell Scripting:&lt;/p&gt;


&lt;div class="ltag__link"&gt;
  &lt;a href="/godcrampy" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__pic"&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--EmTQ5oXB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--DjAO4fT3--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/205514/c3ddf55e-e4f9-463e-816a-87d085f9e963.png" alt="godcrampy"&gt;
    &lt;/div&gt;
  &lt;/a&gt;
  &lt;a href="/godcrampy/the-missing-shell-scripting-crash-course-37mk" class="ltag__link__link"&gt;
    &lt;div class="ltag__link__content"&gt;
      &lt;h2&gt;üöÄ The Missing Shell Scripting Crash Course&lt;/h2&gt;
      &lt;h3&gt;Sahil Bondre „Éª Apr 21 '20 „Éª 6 min read&lt;/h3&gt;
      &lt;div class="ltag__link__taglist"&gt;
        &lt;span class="ltag__link__tag"&gt;#bash&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#linux&lt;/span&gt;
        &lt;span class="ltag__link__tag"&gt;#beginners&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/a&gt;
&lt;/div&gt;





&lt;p&gt;üåü I made some &lt;a href="https://github.com/godcrampy/cheat-sheets"&gt;Cheat-Sheets&lt;/a&gt;&lt;br&gt;
üöÄ Stalk me on &lt;a href="https://www.youtube.com/c/SahilBondre"&gt;Youtube&lt;/a&gt; | &lt;a href="//github.com/godcrampy"&gt;Github&lt;/a&gt; | &lt;a href="//twitter.com/godcrampy"&gt;Twitter&lt;/a&gt; | &lt;a href="//sahil.surge.sh"&gt;Website&lt;/a&gt;&lt;br&gt;
üòÑ Have a wonderful day!&lt;/p&gt;

</description>
      <category>cpp</category>
      <category>c</category>
      <category>tutorial</category>
      <category>computerscience</category>
    </item>
    <item>
      <title>Programmer VS. Developer</title>
      <author>.Onion</author>
      <pubDate>Sun, 11 Jul 2021 11:44:29 +0000</pubDate>
      <link>https://dev.to/dotonion/programmer-vs-developer-24m3</link>
      <guid>https://dev.to/dotonion/programmer-vs-developer-24m3</guid>
      <description>&lt;p&gt;Software developers need a strong programming background, but they also need to find solutions to design and functionality problems. You need to understand that the software development cycle is not just about implementation, and that not every event requires both programming and programming. Software developers must be creative and develop differently from programmers in order to produce the software systems they design.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Software developer needs to understand all the cycles of software development not just implementation (which sometimes will not event need any programming or coding)."&lt;/code&gt; &lt;sup&gt;5&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Software developers must be creative, developing different ways that programmers can manufacture the software or system that they have designed."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"However, software developers still need to have a strong background in coding since they will need to find solutions to problems in design and functionality."&lt;/code&gt; &lt;sup&gt;7&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If a computer programmer is working on writing a piece of code, he or she may need the help of other programmers or work with a software developer if problems arise.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Even when a computer programmer is working independently on writing a piece of code, they need to seek out the help of other programmers or work with the software developer when problems arise."&lt;/code&gt; &lt;sup&gt;13&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most software developers must have at least a bachelor's degree in which they learn not only how to program a computer, but also the basics of computer architecture and data structures. Software engineers need programming experience to become software engineers, as programming is one of the many skills needed to develop software.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Most software developers need to complete at least a bachelors degree, during which time they learn not only programming code, but also computer fundamentals, computer architecture, and data structure."&lt;/code&gt; &lt;sup&gt;8&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They need coding experience to become software engineers, and programming is one of the many skills required to develop software."&lt;/code&gt; &lt;sup&gt;11&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;A person in a software development job must have excellent programming skills as he or she is responsible for determining the function of the application or program and is responsible for front-end and backend design. With knowledge of advanced mathematics and scientific methods, a software engineer is responsible for the overall picture when, together with the user, he evaluates what the customer or the company needs and designs a systematic solution. Compared to a developer, a programmer or software developer must be able to program, since his main task is to find a way to solve problems. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"A person in a software development job must have excellent coding skills because they are in charge of determining the functions of an application or program as well as being responsible for the front-end and back-end designs."&lt;/code&gt; &lt;sup&gt;13&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"With knowledge of advanced mathematics and the scientific method, software engineers are responsible for the big picture; they evaluate client or company needs in conjunction with those of the user and methodically conceptualize a systematic solution."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"When comparing a developer vs programmer, a software developer should be able to code as well as a programmer does but their main job is finding ways to solve problems."&lt;/code&gt; &lt;sup&gt;15&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Programmers are more competent, but have a more limited ability to work compared to developers. Programmers are involved in deeper work that requires more technical specialization than developers, while developers must handle a broader range of work, including monitoring the whole project and leading a development team.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Programmers, while being competent at what they do, have a more limited capacity of work in comparison to a developer."&lt;/code&gt; &lt;sup&gt;15&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"While programmers are involved with more in-depth work and require more technical specialization than developers, developers need to handle a broader range of work that includes overseeing the whole project, or even managing a team of developers."&lt;/code&gt; &lt;sup&gt;6&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;As the two careers overlap, you will find that a computer programer is expected to know how to design products, while a software developer knows how to program. Although most tasks for programmers and developers are closely linked, their job profiles and career choices vary considerably. Although there are differences in salary between the two career paths, the work of a programmer is more specialized than that of a developer and requires a wider range of skills.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Even though most of the tasks of a programmer and a developer are closely related, their job profiles and career choices are different."&lt;/code&gt; &lt;sup&gt;6&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"This difference exists because the work of a programmer is more specialized, while developers require a broader range of skills."&lt;/code&gt; &lt;sup&gt;6&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"These two careers have some overlap, and you may find that a computer programmer is expected to know how to design products and that a software developer must know how to code."&lt;/code&gt; &lt;sup&gt;13&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;As you can imagine, both computer programmers and software developers need to be proficient in several programming languages. As demand for software engineers has grown, they have been mixed with programming and developer positions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"As you might imagine, both computer programmers and software developers need to be well-versed in several coding languages."&lt;/code&gt; &lt;sup&gt;7&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"The demand for software engineers is on the rise, but the role is often conflated with programmer and developer positions."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you look at the lineup of the software team, you may come across a job title and wonder whether the developer on your team is good enough for your business development, or whether the software engineer is the key to the success of your project, even if it contains a lot of technical data that only an engineer can handle. Now that you know which role each of them plays in the development process, let's take a look at six key differences between software engineers and programmers we will highlight below. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Now that you know what each role serves within the development process, let us take a look at six of the key differences between software engineers and programmers, which we have highlighted below."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"If you have ever looked through a software team line up, you have come across these job titles and perhaps wondered if a developer on your team is indeed good for your business development, or a software engineer is a key to success of your project as it contains a bunch of technical data that only an Engineer can handle."&lt;/code&gt; &lt;sup&gt;12&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because people in the computer industry have their own expertise, these positions are often interchangeable, and there are confusing job descriptions for both computer developers and computer programmers. If one compares the role of a computer programmer with that of a software developer, one discovers that there are many overlaps between the two. Both deal with computer software, but unlike computer developers or computer programmers, neither is expected to write, test, or debug code. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"When comparing the roles of computer programmers versus the roles of software developers, you will find there is a lot of overlap between the two."&lt;/code&gt; &lt;sup&gt;7&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"The people in the computer industry have their own expertise and positions, but the most interchangeable and most confusing job position and description exists between the computer developer and the computer programmer."&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Both people engage in computer software, and both people in these two positions are expected to write, test, and debug codes."&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Most of the people mentioned above use the words "programmer" and "developer" interchangeably. However, programmers do not have the same algorithmic knowledge as programmers and developers, and they are usually beginners in the field and less competent than those who program in a different language. Programmers and software engineers have a background in the scientific method and understanding of technical principles, and play a critical role in good communication skills to pass on information to teams and customers.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"However, unlike programmers, these professionals also bring a background in scientific method and have an understanding of engineering principles crucial to the role, along with good communication skills to relay information between teams and clients."&lt;/code&gt; &lt;sup&gt;14&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"These individuals do not have the same algorithmic knowledge as a programmer or developer, as they are often a beginner in the field, skilled in just one coding language."&lt;/code&gt; &lt;sup&gt;4&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Most people mention and use the words "programmer" and "developer" interchangeably."&lt;/code&gt; &lt;sup&gt;2&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you are still unclear, here are some key differences between programmers and developers: programmers and developers have a range of work. Programmers focus during the development cycle on one part of a project while software engineers look at a project at a larger scale, while programmers look at the overall picture and break it into parts. A programmer focuses on a single phase of a development cycle, while a software engineer monitors the development process from start to finish.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"If you are still unclear, the key difference between a programmer vs developer is their scope of work."&lt;/code&gt; &lt;sup&gt;15&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Programmers typically focus on one part of a projects development cycle, while software engineers look at the project on a wider scale than programmers, considering the whole picture and dividing it into parts."&lt;/code&gt; &lt;sup&gt;14&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Whereas a programmer would focus on a single stage in the development cycle, a software engineer oversees the development process from start to finish."&lt;/code&gt; &lt;sup&gt;14&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it stands, the job title is programmer, but you should understand how flexible a programmer's title can be. A programmer is responsible for interpreting and encoding policies and frameworks of a software engineer.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"Ultimately, a programmer is responsible for interpreting a software engineers guidelines for a framework and coding it into existence."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"As it stands now, this job title is still poorly understood, and often just as flexible as the title programmer."&lt;/code&gt; &lt;sup&gt;11&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Computer experts responsible for the development and creation of fantasy sports systems and other computer programs and systems include both software developers and programmers. A software developer or programmer is someone who is familiar with programming and understands how software and programming languages work. They usually develop a background in computer science and a pronounced understanding of programming languages during their bachelor studies and refine their work at master level.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"The computer professionals responsible for designing and creating fantasy sports systems -- as well as every other computer program and system out there -- include software developers and programmers."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They are proficient in programming and understand how software and programming languages function."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They often first develop these skills during undergraduate study and then hone them through work at the masters level."&lt;/code&gt; &lt;sup&gt;9&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;They modularize the end product, develop a clean interface and work with programmers and developers to implement the most detailed aspects of design. Programmers receive instructions from software engineers and developers, and the developers are the designers who turn programmers into code. Their designs are passed on to programmers, and software developers translate the instructions of software engineers into instructions that computers can read and understand.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"They usually receive instructions from a software engineer, developer, or designer, which they turn into code."&lt;/code&gt; &lt;sup&gt;11&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"Their designs are then passed on to programmers and software developers who translate the engineers directions into instructions the computer can read and understand, i.e."&lt;/code&gt; &lt;sup&gt;10&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"They modularize the final product to develop a clean interface and then work with the programmers and developers to implement the more detailed aspects of the design."&lt;/code&gt; &lt;sup&gt;4&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you put the same tasks to a programmer, engineer or developer, you will want to see how he tackles the problem and what steps he takes to achieve the solution. You will find subtle differences between programmers, developers and engineers in their approach to solving technical tasks. For the casual speaker, web development or software development is just an imaginative way of saying "programmer" or "programmer," but since it seems to refer to the web as a term, it doesn't really work.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Resource&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;"You can provide them with the same set of tasks, but what you actually want to see is how they approach the problem and the steps they take to reach the solution."&lt;/code&gt; &lt;sup&gt;1&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"However, you can find very subtle differences in their approaches to solving technical tasks."&lt;/code&gt; &lt;sup&gt;1&lt;/sup&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;"To them, both terms are basically just fancy ways of saying "coding" or "programmer," and even if one of the terms seems to refer specifically to the web, it is not really something to get worked up about."&lt;/code&gt; &lt;sup&gt;8&lt;/sup&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#cited-sources"&gt;
  &lt;/a&gt;
  Cited Sources
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.adaface.com/guides/programmer-vs-developer-vs-engineer-tell-them-apart/"&gt;https://www.adaface.com/guides/programmer-vs-developer-vs-engineer-tell-them-apart/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.differencebetween.net/technology/software-technology/difference-between-developer-and-programmer/"&gt;http://www.differencebetween.net/technology/software-technology/difference-between-developer-and-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.educba.com/programmers-vs-software-engineering/"&gt;https://www.educba.com/programmers-vs-software-engineering/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linkedin.com/pulse/whats-difference-between-programmer-coder-developer-software-hasan"&gt;https://www.linkedin.com/pulse/whats-difference-between-programmer-coder-developer-software-hasan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webapplog.com/programmer-vs-software-engineer-vs-software-developer-vs-coder/"&gt;https://webapplog.com/programmer-vs-software-engineer-vs-software-developer-vs-coder/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.thinkful.com/blog/programmer-vs-developer/"&gt;https://www.thinkful.com/blog/programmer-vs-developer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.rasmussen.edu/degrees/technology/blog/computer-programmer-vs-software-developer/"&gt;https://www.rasmussen.edu/degrees/technology/blog/computer-programmer-vs-software-developer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.devmountain.com/web-development-vs-software-development-which-is-the-better-career-choice/"&gt;https://blog.devmountain.com/web-development-vs-software-development-which-is-the-better-career-choice/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://online.maryville.edu/blog/software-developer-vs-programmer/"&gt;https://online.maryville.edu/blog/software-developer-vs-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://builtin.com/recruiting/software-engineer-vs-programmer"&gt;https://builtin.com/recruiting/software-engineer-vs-programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://careerkarma.com/blog/software-engineer-vs-programmer/"&gt;https://careerkarma.com/blog/software-engineer-vs-programmer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/shakuro/programmer-vs-developer-vs-engineer-91ef374e5033"&gt;https://medium.com/shakuro/programmer-vs-developer-vs-engineer-91ef374e5033&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://bootcamp.ce.arizona.edu/blog/programmer-vs-software-engineer-whats-the-difference/"&gt;https://bootcamp.ce.arizona.edu/blog/programmer-vs-software-engineer-whats-the-difference/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devskiller.com/programmer-vs-developer/"&gt;https://devskiller.com/programmer-vs-developer/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.guru99.com/difference-software-engineer-developer.html"&gt;https://www.guru99.com/difference-software-engineer-developer.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;




&lt;p&gt;&lt;strong&gt;&lt;em&gt;THIS ARTICLE WAS WRITTEN ME USING &lt;a href="https://d0t0n10n.github.io/"&gt;MY&lt;/a&gt; ARTIFICIAL INTELLIGENCE&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>developer</category>
      <category>programmer</category>
      <category>programming</category>
      <category>code</category>
    </item>
    <item>
      <title>üò± An entire coding interview using "FizzBuzz"‚Åâ- 8 challenges from beginner to Pro! üí™</title>
      <author>InHuOfficial</author>
      <pubDate>Sun, 11 Jul 2021 11:30:00 +0000</pubDate>
      <link>https://dev.to/inhuofficial/taking-fizzbuzz-to-the-next-level-8-challenges-from-beginner-to-pro-to-test-your-javascript-skills-2dih</link>
      <guid>https://dev.to/inhuofficial/taking-fizzbuzz-to-the-next-level-8-challenges-from-beginner-to-pro-to-test-your-javascript-skills-2dih</guid>
      <description>&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Fizz_buzz#:~:text=Fizz%20buzz%20is%20a%20group,with%20the%20word%20%22buzz%22."&gt;FizzBuzz&lt;/a&gt; is a mental arithmetic game that got turned into a popular interview question. But what if we took the principle and created 8 different coding challenges from it that people may not have encountered before to really test someone's problem solving and development skills?&lt;/p&gt;

&lt;p&gt;Well that is what I have done!&lt;/p&gt;

&lt;p&gt;I think the below should be easy enough for beginners but also challenging with the extra stipulations for pros and having to combine solutions!&lt;/p&gt;

&lt;p&gt;Obviously using the "pro" tasks as a coding interview it is missing soft skills, API interactions, design / CSS skills etc. but overall I think there is enough there to get a good feel for whether a developer is up to scratch on basic principles, code structuring, following a brief, whether they read all instructions first to see potential pitfalls in their solution or tackle each problem at a time and refactor it later etc.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final thing:&lt;/strong&gt; I hope the below instructions are clear. However if any of the instructions are not clear please let me know in the comments so I can improve the questions!&lt;/p&gt;




&lt;p&gt;&lt;a href="#instructions"&gt;Skip to the instructions if you know what FizzBuzz is&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-fizzbuzz"&gt;
  &lt;/a&gt;
  What is FizzBuzz?
&lt;/h2&gt;

&lt;p&gt;It is a simple game. &lt;/p&gt;

&lt;p&gt;You start counting 1, 2 etc.&lt;/p&gt;

&lt;p&gt;Every time you reach a multiple of 3 (3,6,9 etc) you replace the number with the word "Fizz".&lt;/p&gt;

&lt;p&gt;Every time you reach a multiple of 5 (5, 10, 15 etc.) you replace the number with the word "Buzz". &lt;/p&gt;

&lt;p&gt;Oh and if you reach a multiple of 3 AND 5 (15, 30, 45 etc.) you replace the word with "FizzBuzz".&lt;/p&gt;

&lt;p&gt;Those are the rules. &lt;/p&gt;

&lt;p&gt;In an interview question you are normally asked to output the numbers 1 to 100 and the relevant "fizz", "buzz" and "FizzBuzz" replacements.&lt;/p&gt;

&lt;p&gt;A simple example of this that should make sense even if you are a beginner is&lt;/p&gt;

&lt;p&gt;&lt;iframe src="https://jsfiddle.net/vrxqo3u9/1//embedded/js//dark" width="100%" height="600"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;If you check the console it outputs the numbers and words as expected. You can use this as an example to work from / learn from if you like.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#instructions"&gt;
  &lt;/a&gt;
  Instructions
&lt;/h2&gt;

&lt;p&gt;You will be completing the same tasks whether you are a beginner or a pro. &lt;/p&gt;

&lt;p&gt;However the pro version of this challenge has extra stipulations / requirements:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-beginners"&gt;
  &lt;/a&gt;
  For beginners
&lt;/h3&gt;

&lt;p&gt;Try and tackle each problem individually. You can develop different code for each solution if you want.&lt;/p&gt;

&lt;p&gt;If you get stuck on a solution to one problem then just move onto the next one! They are not necessarily in difficulty order so you may find question 6 easier than question 5 for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At the end you should have 8 different solutions&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-pros"&gt;
  &lt;/a&gt;
  For Pros
&lt;/h3&gt;

&lt;p&gt;Each requirement continues onto the next question. &lt;/p&gt;

&lt;p&gt;So by the end your &lt;strong&gt;one answer should work for all 8 requirements&lt;/strong&gt; (if any conflicts in instructions occur you should always use the latest requirement - i.e. logging to console should be replaced with returning an array etc.)!&lt;/p&gt;

&lt;p&gt;Oh and you also have a few extra requirements to deal with to make it even more interesting!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At the end you should have one "super solution" that covers all the points. Essentially you should have built a configurable FizzBuzz library&lt;/strong&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#1-fizzbuzz-without-using-raw-endraw-"&gt;
  &lt;/a&gt;
  1. FizzBuzz without using &lt;code&gt;%&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;Nearly every FizzBuzz answer you see uses the remainder (&lt;code&gt;%&lt;/code&gt;) operator.&lt;/p&gt;

&lt;p&gt;For this challenge we have removed the remainder (&lt;code&gt;%&lt;/code&gt;) operator so you have to find an alternative way to check if a number should have Fizz, Buzz and or FizzBuzz logged to the console instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;Log each number / Fizz / Buzz / FizzBuzz to the console without using &lt;code&gt;%&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;This one is a nice easy one to ease you in, just do the same as the beginners here! It gets tougher I promise!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#2-fizzbuzz-but-it-requires-a-button-press"&gt;
  &lt;/a&gt;
  2. FizzBuzz but it requires a button press!
&lt;/h2&gt;

&lt;p&gt;In this challenge you have to attach your function to a button press somehow. This button should say "next".&lt;/p&gt;

&lt;p&gt;Each time the button is pressed the next number / word should be logged to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;Just add an "next" button and log the next number to the console each time it is pressed. It should start at 1 and increase each time the button is pressed (following FizzBuzz rules of course!).&lt;/p&gt;

&lt;p&gt;It can keep going past 100 if you want or you can disable the button once 100 is reached for a bonus point!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h2&gt;

&lt;p&gt;You must include two extra buttons!&lt;/p&gt;

&lt;p&gt;The first button should complete the rest of the numbers from the current state (so if your last number / word was "22" you should be able to press this button and it prints 23 - 100). This button should have the text "complete the run".&lt;/p&gt;

&lt;p&gt;You should also include a reset button (with the text "reset") that returns the state to the beginning so the next button press logs "1" to the console etc.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#3-fizzbuzz-but-it-stores-state"&gt;
  &lt;/a&gt;
  3. FizzBuzz but it stores state!
&lt;/h2&gt;

&lt;p&gt;Using your answer to the previous question you should now use &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;&lt;code&gt;Window.localStorage&lt;/code&gt;&lt;/a&gt; to store the current number.&lt;/p&gt;

&lt;p&gt;It must not store anything to &lt;code&gt;localStorage&lt;/code&gt; until the "next" button is pressed for the first time.&lt;/p&gt;

&lt;p&gt;You should be able to reload the page, press the button and the next number should be logged to the console. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You just have to be able to reload the page and the next value be returned on pressing the "next" button.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;Don't forget that you need to be able to reset the state still and complete the run. &lt;/p&gt;

&lt;p&gt;One stipulation here is that if you press the "reset" button &lt;strong&gt;you must remove your &lt;code&gt;localStorage&lt;/code&gt; entry entirely&lt;/strong&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#4-fizzbuzz-without-loops"&gt;
  &lt;/a&gt;
  4. FizzBuzz without loops
&lt;/h2&gt;

&lt;p&gt;In this exercise your FizzBuzz generator should use &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Recursion"&gt;&lt;strong&gt;recursion&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;No loops of any kind. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You can just log the numbers / words for the numbers 1 to 100 to the console but your function must use recursion instead of loops.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;As an extra stipulation when the 100 numbers / words have been logged to the console this should also log "done" after the 100th entry! &lt;/p&gt;

&lt;p&gt;Oh and don't forget your other buttons still need to work!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#5-stop-logging-to-the-console"&gt;
  &lt;/a&gt;
  5. Stop logging to the console!
&lt;/h2&gt;

&lt;p&gt;Now your FizzBuzz generator should return the values it creates rather than logging to the console.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;Just return the next value and use a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to display the number &lt;strong&gt;using a different function that calls your fizz buzz function&lt;/strong&gt;. You can overwrite the number or keep a record and display each new number on a new line.&lt;/p&gt;

&lt;p&gt;For clarity you should create a function "outputResult" or similar and this should call your "FizzBuzzGenerator" function, receive the value back from it and then output this to a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; on the page.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;To make this more interesting it should return the current value (after pressing the "next" button), the previous value and the next value &lt;strong&gt;in that order&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;It is up to you to account for errors caused by being at the start or the end of the list of numbers - you should return &lt;code&gt;null&lt;/code&gt; when this happens (e.g. the first output will be (&lt;code&gt;null&lt;/code&gt;, 1, 2) and the last will be (99, 100, &lt;code&gt;null&lt;/code&gt;...see next point though). &lt;/p&gt;

&lt;p&gt;Don't forget that once you have reached 100 the next entry should state "done" and it should not increment any more (so effectively 101 is "done").&lt;/p&gt;

&lt;p&gt;Also you should output each entry as a &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; with the following format:&lt;/p&gt;

&lt;div class="table-wrapper-paragraph"&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;number&lt;/th&gt;
&lt;th&gt;direction&lt;/th&gt;
&lt;th&gt;previous value&lt;/th&gt;
&lt;th&gt;current value&lt;/th&gt;
&lt;th&gt;next value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;! 26&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;Buzz&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;forward (or false)&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;td&gt;FizzBuzz&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;backwards (or true)&lt;/td&gt;
&lt;td&gt;Fizz&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/div&gt;

&lt;p&gt;etc. etc. &lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#6-fizzbuzz-where-you-can-pass-in-the-start-and-end-numbers"&gt;
  &lt;/a&gt;
  6. FizzBuzz where you can pass in the start and end numbers
&lt;/h2&gt;

&lt;p&gt;A nice easy upgrade, your function should now accept any start number and any final number as integers. &lt;/p&gt;

&lt;p&gt;To make your answer complete you should add two &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;s to your example that take the minimum value and the maximum value.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;The numbers will always be positive integers and the start number will always be smaller than the end number.&lt;/p&gt;

&lt;p&gt;The numbers can be between 1 and 10,000.&lt;/p&gt;

&lt;p&gt;You need to add a button that calls your function next to or below your two inputs to be able to test this.&lt;/p&gt;

&lt;p&gt;You can output to the console or put all the numbers in a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;If the start number is bigger than or the same as the end number then you must log this exact phrase "error, the start number must be smaller than the end number". It should be logged as an error.&lt;/p&gt;

&lt;p&gt;You also need to account for &lt;strong&gt;negative integers&lt;/strong&gt; so you can receive any numbers between - 10,000 and 10,000. &lt;/p&gt;

&lt;p&gt;Zero should output &lt;strong&gt;"0" not FizzBuzz!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If any other errors occur (such as non numerical or null values being passed) you should log a generic error "input values are incorrect".&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#7-now-do-it-in-reverse"&gt;
  &lt;/a&gt;
  7. Now do it in reverse!
&lt;/h2&gt;

&lt;p&gt;Yes this is a mean one!&lt;/p&gt;

&lt;p&gt;Now your function should also accept a 3rd parameter. This time if that parameter is set to &lt;code&gt;true&lt;/code&gt; the numbers should start at the maximum and count backwards to the minimum, if set to &lt;code&gt;false&lt;/code&gt; they should return in ascending order the same as before.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You can just use the numbers 1 to 100 and work out how to reverse the numbers if this parameter is passed. &lt;/p&gt;

&lt;p&gt;So you could have - &lt;code&gt;myFizzBuzzFunction(false)&lt;/code&gt; (which will still write 1 - 100). However &lt;code&gt;myFizzBuzzFunction(true)&lt;/code&gt; will return 100 - 1 (reversed).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;Bear in mind that "done" now needs to appear after the lowest number if the order is reversed. &lt;/p&gt;

&lt;p&gt;You also need to make the third parameter &lt;strong&gt;optional&lt;/strong&gt; so that we can call your function with &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo)&lt;/code&gt; or with &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo, false)&lt;/code&gt;, &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo, true)&lt;/code&gt; etc. &lt;code&gt;myFizzBuzzGenerator(smallNo, largeNo, true)&lt;/code&gt; should be the one that reverse the order.   &lt;/p&gt;

&lt;p&gt;You also have the fun task of working out how to account for all of the previous stipulations (what if the number is currently 26 and we change the order) etc.&lt;/p&gt;

&lt;p&gt;Finally you should add a checkbox next to your inputs you added previously that when checked reverses the order!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#8-fizzbuzz-where-you-can-pass-in-any-words-and-numbers-you-want"&gt;
  &lt;/a&gt;
  8. FizzBuzz where you can pass in any words and numbers you want.
&lt;/h2&gt;

&lt;p&gt;This time the function must accept an unlimited number of divisor / word pairs.&lt;/p&gt;

&lt;p&gt;So for example:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wordsAndDivisors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;////your function should log&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;13&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;FizzBuzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;[...]&lt;/span&gt;
&lt;span class="mi"&gt;92&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;94&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="mi"&gt;97&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#beginners"&gt;
  &lt;/a&gt;
  Beginners
&lt;/h3&gt;

&lt;p&gt;You will receive between 2 and 10 different word &amp;amp; divisor pairs.&lt;/p&gt;

&lt;p&gt;A couple of examples to test against are:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wordsAndDivisors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordsAndDivisors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 3 = Fizz, 5 = Buzz, 11 = Fluff, 33 = FizzFluff, 55 = BuzzFluff.&lt;/span&gt;


&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;wordsAndDivisorsTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fizz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buzz&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Fluff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Biff&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Buffer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Tink&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;divisor&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;wordsAndDivisorsTwo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// 17 = Buffer, 46 = Tink, 77 = FluffBiff, 85 = BuzzBuffer.&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;You have to account for 0 - n entries in the format described.&lt;/p&gt;

&lt;p&gt;This is also an optional parameter. If no entries are passed just return the relevant numbers between min and max in the relevant direction.&lt;/p&gt;

&lt;p&gt;Your function should now be &lt;code&gt;myGeneratorFunction(min, max, directionOptional, wordsAndDivisorsOptional)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For clarity if you stop here then:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;myGeneratorFunction(1,100)&lt;/code&gt; would just return the numbers 1 to 100&lt;/li&gt;
&lt;li&gt; &lt;code&gt;myGeneratorFunction(1,100, true)&lt;/code&gt; would return the numbers 100 to 1&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;myGeneratorFunction(1,100, false, wordsAndDivisors)&lt;/code&gt; would return 1 to 100 with fizz, buzz and fluff replacements!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now go tidy your code up and submit it in the comments!&lt;/p&gt;

&lt;p&gt;Or if you want one last minor challenge to make it even more useful:&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#go-for-extra-credit"&gt;
  &lt;/a&gt;
  Go for Extra credit
&lt;/h4&gt;

&lt;p&gt;Create a way of accepting the parameters as an object (settings / config) to allow for different scenarios. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You can dictate the settings object structure&lt;/strong&gt; to make this easier.&lt;/p&gt;

&lt;p&gt;If you decide to pass an object in then you can also have bonus points for making min and max numbers have defaults / optional parameters of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1 for min&lt;/li&gt;
&lt;li&gt;100 for max&lt;/li&gt;
&lt;li&gt;default direction should be forward &lt;/li&gt;
&lt;li&gt;default word:divisor pair should now be normal FizzBuzz instead of nothing! &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For clarity we should be able to call your function as &lt;code&gt;myFizzBuzzGenerator()&lt;/code&gt; and it &lt;strong&gt;do normal FizzBuzz in a forward direction for the numbers 1 to 100&lt;/strong&gt;. (Note that this is different behaviour to the non extra credit version). &lt;/p&gt;

&lt;p&gt;But we could also call it with &lt;code&gt;myFizzBuzzGenerator(myGeneratorSettings)&lt;/code&gt; and the min number, the max number, direction etc. all override the defaults if they are passed in!&lt;/p&gt;

&lt;p&gt;Oh and everything previous still counts!&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#extra-extra-credit"&gt;
  &lt;/a&gt;
  Extra Extra credit!
&lt;/h4&gt;

&lt;p&gt;Come up with other "requirements" this library might have. &lt;/p&gt;

&lt;p&gt;See if you can make it fully extensible so people can create plugins. Could you supply it with the Fibonacci sequence or any sequence of numbers. Could you make it output words for numbers? Could you turn it into a web component or a React module? &lt;/p&gt;

&lt;p&gt;Add any requirements you can think of and then your solutions to those problems!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-end-what-should-you-be-looking-for"&gt;
  &lt;/a&gt;
  The end - what should you be looking for?
&lt;/h2&gt;

&lt;p&gt;So depending on whether you went for the beginner or the pro version you should either have 8 different FizzBuzz variations or one mega variation.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-beginners"&gt;
  &lt;/a&gt;
  For beginners
&lt;/h3&gt;

&lt;p&gt;You just have to ensure that each one functions as expected and outputs the information as requested.&lt;/p&gt;

&lt;p&gt;One thing I would suggest is that you comment any particularly confusing parts for the next person who has to work on your code.&lt;/p&gt;

&lt;p&gt;If you have managed to create all 8 versions why not move up to the semi-pro tier and see if you can combine two, three or even four examples together, but using the beginner instructions!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#pros"&gt;
  &lt;/a&gt;
  Pros
&lt;/h3&gt;

&lt;p&gt;High standards here. &lt;/p&gt;

&lt;p&gt;You should ensure your code is:-&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to understand and uses logical variable names etc.&lt;/li&gt;
&lt;li&gt;Is efficient, nested loops are a no no (but if you have nested loops for this I am not sure what you are doing anyway! üòãü§£).&lt;/li&gt;
&lt;li&gt;Bonus points if you have made it easily extensible and split parts off into different functions where applicable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And to recap to see if you complete the challenge at this point you should have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a function that does not use the remainder (&lt;code&gt;%&lt;/code&gt;) operator!&lt;/li&gt;
&lt;li&gt;a function that accepts a small number, a large number, a flag to reverse and the word divisor pairs.&lt;/li&gt;
&lt;li&gt;two inputs and a checkbox for small, large and whether to reverse.&lt;/li&gt;
&lt;li&gt;three buttons "next" to add (or remove) 1, "complete the run" which continues to the max or min number and then outputs "done" and a "reset" button which returns to the max or minimum number depending on direction. &lt;/li&gt;
&lt;li&gt;reset button should clear all local storage!&lt;/li&gt;
&lt;li&gt;Error checking for every passed variable etc.&lt;/li&gt;
&lt;li&gt;Recursion rather than a loop.&lt;/li&gt;
&lt;li&gt;"0" should output "0" not FizzBuzz or any other word combination!&lt;/li&gt;
&lt;li&gt;Should work with an unlimited (or zero) "word:divisor" pairs.&lt;/li&gt;
&lt;li&gt;Oh and I shouldn't have to say it but &lt;strong&gt;you inputs should be properly labelled&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;You should have a settings object that you can pass in with defaults for extra credit!&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#submit-your-entries"&gt;
  &lt;/a&gt;
  Submit your entries!
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;All answers submitted should be in JavaScript&lt;/strong&gt;, however you can obviously complete these challenges in any language you want!&lt;/p&gt;

&lt;p&gt;There are no prizes but an opportunity for others to critique your work and offer tips and or learn from your code. &lt;/p&gt;

&lt;p&gt;Leave a comment with your example(s)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jsfiddle"&gt;
  &lt;/a&gt;
  jsFiddle
&lt;/h3&gt;

&lt;p&gt;You can include a jsFiddle in your comment with liquid tags in the following format:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% jsfiddle &amp;lt;url of fiddle&amp;gt; result js html %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#codepen"&gt;
  &lt;/a&gt;
  CodePen
&lt;/h3&gt;

&lt;p&gt;You can include a CodePen in your comment with the following liquid tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{% codepen &amp;lt;url of pen&amp;gt; default-tab=result, js, html %}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#any-other-way-you-want"&gt;
  &lt;/a&gt;
  Any other way you want!
&lt;/h3&gt;

&lt;p&gt;If you don't want to use jsfiddle or CodePen then any other code sandbox will do! Just provide a link to it or &lt;a href="https://dev.to/p/editor_guide"&gt;see if there is a liquid tag for your chosen sandbox&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#answers-next-week"&gt;
  &lt;/a&gt;
  Answers next week!
&lt;/h2&gt;

&lt;p&gt;Make sure you follow me as I will release my solution and or the best solution for the beginner versions as well as my "kitchen sink" solution for the pro version!&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#special-instructions-for-afif"&gt;
  &lt;/a&gt;
  Special instructions for &lt;a class="mentioned-user" href="https://dev.to/afif"&gt;@afif&lt;/a&gt;

&lt;/h2&gt;

&lt;p&gt;You can try and complete the beginner challenges without JavaScript...just because I know how much JS hurts you! Oh and it can just work in one browser too! &lt;/p&gt;

&lt;p&gt;You can use css vars as inputs etc. Output the information however you want! It doesn't have to be accessible either üòãü§£&lt;/p&gt;

&lt;p&gt;(and for anyone confused by this, Temani and I have a running joke where he is hurt by anything not using CSS as he is a CSS ninja!)&lt;/p&gt;

&lt;p&gt;Anyone else who fancies the challenge can do this also as I can imagine there are some really interesting solutions that are beyond my meagre brain!!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>react</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Go versioning</title>
      <author>Pallat Anchaleechamaikorn</author>
      <pubDate>Sun, 11 Jul 2021 11:04:46 +0000</pubDate>
      <link>https://dev.to/pallat/go-versioning-43cm</link>
      <guid>https://dev.to/pallat/go-versioning-43cm</guid>
      <description>&lt;p&gt;‡∏ö‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤ Go ‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô lib ‡πÑ‡∏ß‡πâ‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡πÉ‡∏ä‡πâ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô&lt;br&gt;
‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ lib ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏¢‡πÜ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏Ç‡πà ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î version ‡∏•‡∏á‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏£‡∏Å ‡πÄ‡∏ß‡∏•‡∏≤ upgrade ‡∏Å‡πá‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏¢‡∏∏‡πà‡∏á‡∏ô‡∏¥‡∏î‡∏´‡∏ô‡πà‡∏≠‡∏¢&lt;/p&gt;

&lt;p&gt;‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ó‡∏µ‡∏° ‡∏£‡∏µ‡∏ö‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡πÅ‡∏¢‡∏Å repo ‡πÄ‡∏¢‡∏≠‡∏∞‡πÜ ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÜ‡∏ó‡∏µ‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÜ‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏Å‡πá‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏ä‡πâ lib ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢&lt;/p&gt;

&lt;p&gt;‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥ ‡∏ú‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á lib ‡∏Å‡∏•‡∏≤‡∏á‡πÇ‡∏á‡πà‡πÜ‡∏°‡∏≤‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;/p&gt;

&lt;p&gt;go.mod&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pallat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;versioning&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;versioning.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;versioning&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá commit ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß push ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà github&lt;br&gt;
‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡πá‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
main.go&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;

    &lt;span class="s"&gt;"github.com/pallat/versioning"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;versioning&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ external dependencies ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ go get&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go mod init github.com/pallat/multiver&lt;br&gt;
go get github.com/pallat/versioning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÑ‡∏ü‡∏•‡πå go.mod ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ô‡∏µ‡πâ&lt;/p&gt;

&lt;p&gt;go.mod&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pallat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;multiver&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="m"&gt;1.16&lt;/span&gt;

&lt;span class="n"&gt;require&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pallat&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;versioning&lt;/span&gt; &lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="m"&gt;.0.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;20210711103217&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="n"&gt;a8cada9b2f5&lt;/span&gt; &lt;span class="c"&gt;// indirect&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏ó‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß lib ‡∏Å‡∏•‡∏≤‡∏á‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;versioning&lt;/span&gt;

&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;Number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ lib ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ ‡∏Å‡πá‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô ‡∏û‡∏≠‡πÑ‡∏õ googling ‡∏î‡∏π ‡πÄ‡∏Ç‡∏≤‡∏Å‡πá‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤ ‡∏•‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏™‡∏¥&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get github.com/pallat/versioning@latest&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡∏ã‡∏∂‡πà‡∏á‡∏û‡∏≠‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏Å‡πá‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏ version ‡∏ã‡∏∂‡πà‡∏á‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ lib ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥ versioning ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏±‡∏ô‡∏Å‡πá‡πÄ‡∏•‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç commit  ‡πÅ‡∏ó‡∏ô‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡πÄ‡∏•‡∏¢‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go get github.com/pallat/versioning@ec81430&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏î‡∏π&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go run main.go&lt;br&gt;
2&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å lib versioning ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤&lt;/p&gt;

&lt;p&gt;‡πÇ‡∏î‡∏¢ Go ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ version ‡πÅ‡∏ö‡∏ö SemVer ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡πâ‡∏≤ lib ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏¥‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡πá‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥ version ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡∏¥‡∏î imcompatible ‡∏Å‡πá‡∏Ñ‡∏ß‡∏£ up major version ‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Produce By Path - New JavaScript Design Pattern</title>
      <author>Ruben Arushanyan</author>
      <pubDate>Sun, 11 Jul 2021 11:03:56 +0000</pubDate>
      <link>https://dev.to/rubenarushanyan/produce-by-path-new-javascript-design-pattern-8in</link>
      <guid>https://dev.to/rubenarushanyan/produce-by-path-new-javascript-design-pattern-8in</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_n3NzwKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qor7bioyw63upovjqooc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_n3NzwKy--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qor7bioyw63upovjqooc.png" alt="ProduceByPath"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#description"&gt;
  &lt;/a&gt;
  Description
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/ruben-arushanyan/produce-by-path"&gt;Produce By Path&lt;/a&gt; is a design pattern, which is used to dynamically produce values by using the &lt;strong&gt;path&lt;/strong&gt; to which it is applied.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm &lt;span class="nb"&gt;install &lt;/span&gt;produce-by-path
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usage"&gt;
  &lt;/a&gt;
  Usage
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ProduceByPath&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;produce-by-path&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="c1"&gt;// CommonJS usage&lt;/span&gt;
&lt;span class="c1"&gt;// const ProduceByPath = require("produce-by-path")&lt;/span&gt;


&lt;span class="c1"&gt;// define producer instance to our liking :)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ProduceByPath&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;toPrimitive&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;hint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;--&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;


&lt;span class="c1"&gt;//      Now we can apply the [[instance]] object with any properties&lt;/span&gt;
&lt;span class="c1"&gt;//      combination and call as a function and receive the desired&lt;/span&gt;
&lt;span class="c1"&gt;//      result as we defined in the [[call]] handler.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arg1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arg2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;//      {&lt;/span&gt;
&lt;span class="c1"&gt;//          path: ["I", "love", "you"],&lt;/span&gt;
&lt;span class="c1"&gt;//          args: ["arg1", "arg2"]&lt;/span&gt;
&lt;span class="c1"&gt;//      } &lt;/span&gt;


&lt;span class="c1"&gt;//      We can also apply the [[instance]] object with any properties&lt;/span&gt;
&lt;span class="c1"&gt;//      combination and convert as a primitive value and receive&lt;/span&gt;
&lt;span class="c1"&gt;//      the desired result as we defined in [[toPrimitive]] handler.&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//      I--love--you&lt;/span&gt;

&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;I&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;love&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;you&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//      I--love--you&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#why-should-i-use-an-producebypath-pattern"&gt;
  &lt;/a&gt;
  Why should I use an ProduceByPath pattern?
&lt;/h2&gt;

&lt;p&gt;Using that pattern in some cases we can build a simple and intuitive interface for my software.&lt;/p&gt;

&lt;p&gt;For example, the &lt;a href="https://redux-cool.js.org"&gt;redux-cool&lt;/a&gt; library use that pattern for making action objects.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;redux-cool&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;


&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;first_action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FIRST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACTION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arg1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;arg2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;first_action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//      {&lt;/span&gt;
&lt;span class="c1"&gt;//          type: "MY/FIRST/ACTION",&lt;/span&gt;
&lt;span class="c1"&gt;//          args: ["arg1", "arg2"],&lt;/span&gt;
&lt;span class="c1"&gt;//          cb: f() identity,&lt;/span&gt;
&lt;span class="c1"&gt;//          _index: 1&lt;/span&gt;
&lt;span class="c1"&gt;//      } &lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;second_action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;This&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;is&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;my&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2021&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;second_action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//      {&lt;/span&gt;
&lt;span class="c1"&gt;//          type: "This/is/my/second/action",&lt;/span&gt;
&lt;span class="c1"&gt;//          args: [2021],&lt;/span&gt;
&lt;span class="c1"&gt;//          cb: f() identity,&lt;/span&gt;
&lt;span class="c1"&gt;//          _index: 2&lt;/span&gt;
&lt;span class="c1"&gt;//      } &lt;/span&gt;



&lt;span class="c1"&gt;//      If we just need to generate an action type as a string,&lt;/span&gt;
&lt;span class="c1"&gt;//      we can do it easily&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;type1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FIRST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACTION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//      "MY/FIRST/ACTION"&lt;/span&gt;

&lt;span class="c1"&gt;//      or any string conversion&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;type2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;actionsCreator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MY&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;FIRST&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ACTION&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;""&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;type2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//      "MY/FIRST/ACTION"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#links"&gt;
  &lt;/a&gt;
  Links
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.npmjs.com/package/produce-by-path"&gt;npm&lt;/a&gt;&lt;br&gt;
&lt;a href="https://github.com/ruben-arushanyan/produce-by-path"&gt;github&lt;/a&gt;&lt;br&gt;
&lt;a href="https://redux-cool.js.org/docs/concepts/actions-creator"&gt;redux-cool actionsCreator&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>designpattern</category>
      <category>producebypath</category>
      <category>opensource</category>
    </item>
    <item>
      <title>lil-http-terminator, a tiny JS module to gracefully shutdown your HTTP server</title>
      <author>Vasyl Boroviak</author>
      <pubDate>Sun, 11 Jul 2021 10:49:42 +0000</pubDate>
      <link>https://dev.to/koresar/lil-http-terminator-a-tiny-js-module-to-gracefully-shutdown-your-http-server-l0b</link>
      <guid>https://dev.to/koresar/lil-http-terminator-a-tiny-js-module-to-gracefully-shutdown-your-http-server-l0b</guid>
      <description>&lt;p&gt;Increase your &lt;code&gt;node_modules&lt;/code&gt; by 11 KB to get tranquility that your node.js HTTP server is shutting down without data loss risk.&lt;/p&gt;

&lt;p&gt;Or how I shrunk a 2.2 MB module to 11 KB.&lt;/p&gt;

&lt;p&gt;TL;DR: &lt;a href="https://www.npmjs.com/package/lil-http-terminator"&gt;&lt;code&gt;npm i lil-http-terminator&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problem"&gt;
  &lt;/a&gt;
  The problem
&lt;/h2&gt;

&lt;p&gt;I've been coding node.js microservices for almost a decade now. Graceful HTTP server shutdown was always a problem I didn't wanna deal with because it's hard to get right.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-solution"&gt;
  &lt;/a&gt;
  The solution
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#-raw-httpterminator-endraw-npm-module"&gt;
  &lt;/a&gt;
  &lt;code&gt;http-terminator&lt;/code&gt; npm module
&lt;/h3&gt;

&lt;p&gt;Recently I discovered that there is a perfect implementation of graceful shutdown. It's called &lt;a href="https://www.npmjs.com/package/http-terminator"&gt;http-terminator&lt;/a&gt;. Here is &lt;strong&gt;why&lt;/strong&gt; I decided to use it (quoting the author):&lt;/p&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;it does not monkey-patch Node.js API&lt;/li&gt;
&lt;li&gt;it immediately destroys all sockets without an attached HTTP request&lt;/li&gt;
&lt;li&gt;it allows graceful timeout to sockets with ongoing HTTP requests&lt;/li&gt;
&lt;li&gt;it properly handles HTTPS connections&lt;/li&gt;
&lt;li&gt;it informs connections using keep-alive that server is shutting down by setting a &lt;code&gt;connection: close&lt;/code&gt; header&lt;/li&gt;
&lt;li&gt;it does not terminate the Node.js process&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Usage:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;http-terminator&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;createHttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Works with any node.js HTTP server out there (Express.js, Nest.js, Polka.js, Koa.js, Meteor.js, Sails.js, Hapi.js, etc).&lt;/p&gt;

&lt;p&gt;Wow! Brilliant engineering! Well done author(s)! &lt;/p&gt;

&lt;p&gt;But there is a catch.&lt;/p&gt;

&lt;p&gt;Being a mere 4 KB codebase it adds 22 dependencies (2.2 MB, 464 files) to your &lt;code&gt;node_modules&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See for yourself:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;npx howfat &lt;span class="nt"&gt;-r&lt;/span&gt; tree http-terminator
npx: installed 18 &lt;span class="k"&gt;in &lt;/span&gt;1.695s

http-terminator@3.0.0 &lt;span class="o"&gt;(&lt;/span&gt;22 deps, 2.16mb, 464 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îú‚îÄ‚îÄ delay@5.0.0 &lt;span class="o"&gt;(&lt;/span&gt;10.91kb, 5 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îú‚îÄ‚î¨ roarr@4.2.5 &lt;span class="o"&gt;(&lt;/span&gt;19 deps, 2.02mb, 398 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îú‚îÄ‚îÄ boolean@3.1.2 &lt;span class="o"&gt;(&lt;/span&gt;7.9kb, 10 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îú‚îÄ‚îÄ detect-node@2.1.0 &lt;span class="o"&gt;(&lt;/span&gt;2.7kb, 6 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îú‚îÄ‚î¨ fast-json-stringify@2.7.7 &lt;span class="o"&gt;(&lt;/span&gt;9 deps, 1.79mb, 268 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îú‚îÄ‚î¨ ajv@6.12.6 &lt;span class="o"&gt;(&lt;/span&gt;5 deps, 1.41mb, 181 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ fast-deep-equal@3.1.3 &lt;span class="o"&gt;(&lt;/span&gt;12.66kb, 11 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ fast-json-stable-stringify@2.1.0 &lt;span class="o"&gt;(&lt;/span&gt;16.56kb, 18 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ json-schema-traverse@0.4.1 &lt;span class="o"&gt;(&lt;/span&gt;19.11kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îÇ ‚ï∞‚îÄ‚î¨ uri-js@4.4.1 &lt;span class="o"&gt;(&lt;/span&gt;1 dep, 490.54kb, 51 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îÇ   ‚ï∞‚îÄ‚îÄ punycode@2.1.1 &lt;span class="o"&gt;(&lt;/span&gt;31.67kb, 5 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ deepmerge@4.2.2 &lt;span class="o"&gt;(&lt;/span&gt;29.39kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚îú‚îÄ‚îÄ rfdc@1.3.0 &lt;span class="o"&gt;(&lt;/span&gt;23.48kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚ï∞‚îÄ‚îÄ string-similarity@4.0.4 &lt;span class="o"&gt;(&lt;/span&gt;10.73kb, 5 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îú‚îÄ‚î¨ fast-printf@1.6.6 &lt;span class="o"&gt;(&lt;/span&gt;1 dep, 34.32kb, 26 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚ï∞‚îÄ‚îÄ boolean@3.1.2 &lt;span class="o"&gt;(&lt;/span&gt;üîó, 7.9kb, 10 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îú‚îÄ‚î¨ globalthis@1.0.2 &lt;span class="o"&gt;(&lt;/span&gt;2 deps, 114.41kb, 41 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ ‚ï∞‚îÄ‚î¨ define-properties@1.1.3 &lt;span class="o"&gt;(&lt;/span&gt;1 dep, 48.41kb, 21 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îÇ   ‚ï∞‚îÄ‚îÄ object-keys@1.1.1 &lt;span class="o"&gt;(&lt;/span&gt;25.92kb, 11 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îú‚îÄ‚îÄ is-circular@1.0.2 &lt;span class="o"&gt;(&lt;/span&gt;5.89kb, 8 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚îú‚îÄ‚îÄ json-stringify-safe@5.0.1 &lt;span class="o"&gt;(&lt;/span&gt;12.42kb, 9 files&lt;span class="o"&gt;)&lt;/span&gt;
‚îÇ ‚ï∞‚îÄ‚îÄ semver-compare@1.0.0 &lt;span class="o"&gt;(&lt;/span&gt;3.96kb, 8 files&lt;span class="o"&gt;)&lt;/span&gt;
‚ï∞‚îÄ‚îÄ type-fest@0.20.2 &lt;span class="o"&gt;(&lt;/span&gt;108kb, 42 files&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I got curious. What's that &lt;code&gt;roarr&lt;/code&gt; package and if it can be removed from the package? The answer got me by surprise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#removing-the-unnecessary-dependencies"&gt;
  &lt;/a&gt;
  Removing the unnecessary dependencies
&lt;/h3&gt;

&lt;p&gt;The three top level dependencies can be easily removed.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-typefest-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;type-fest&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;type-fest&lt;/code&gt; can be removed by rewriting the package from TS to JS. Hold saying your "boo" yet.&lt;/p&gt;

&lt;p&gt;It's a single function module. You don't need the code completion for just one function. So, rewriting to JS shouldn't be a downside for TypeScript proponents.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#-raw-delay-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;delay&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;delay&lt;/code&gt; module can be rewritten as a single-line function. Here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;time&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#-raw-roarr-endraw-"&gt;
  &lt;/a&gt;
  &lt;code&gt;roarr&lt;/code&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;roarr&lt;/code&gt; module, the largest of the tree, takes 2 MB of your hard drive. But it is used literally in the single line!!!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;terminating&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;already terminating HTTP server&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;terminating&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The module will print that warning in case you decide to terminate your HTTP server twice. That's all. There is no more usage of the &lt;code&gt;roarr&lt;/code&gt; logger within the whole &lt;code&gt;http-terminator&lt;/code&gt; module.&lt;/p&gt;

&lt;p&gt;I find it nearly impossible to accidentally call &lt;code&gt;.termiate()&lt;/code&gt; twice. It's hard to imagine this ever happens. So I decided to put the &lt;code&gt;log&lt;/code&gt; variable to &lt;code&gt;options&lt;/code&gt; and assign it to &lt;code&gt;console&lt;/code&gt; by default.&lt;/p&gt;

&lt;p&gt;We get rid of 20 dependencies and simultaneously allow you, my fellow developers, to customise the termination with the logger of your choice (&lt;code&gt;winston&lt;/code&gt;, &lt;code&gt;bunyan&lt;/code&gt;, &lt;code&gt;pino&lt;/code&gt;, &lt;code&gt;morgan&lt;/code&gt;, etc; or even the &lt;code&gt;roarr&lt;/code&gt; itself).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#meet-raw-lilhttpterminator-endraw-"&gt;
  &lt;/a&gt;
  Meet &lt;code&gt;lil-http-terminator&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;I forked the &lt;code&gt;http-terminator&lt;/code&gt; to &lt;a href="https://www.npmjs.com/package/lil-http-terminator"&gt;&lt;code&gt;lil-http-terminator&lt;/code&gt;&lt;/a&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;HttpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;lil-http-terminator&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;HttpTerminator&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;server&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;httpTerminator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Being as awesome as the origin, the &lt;code&gt;lil-&lt;/code&gt; version is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;0 dependencies (original had 3 direct and 18 indirect sub-dependencies);&lt;/li&gt;
&lt;li&gt;only 5 files (original was 464 files total);&lt;/li&gt;
&lt;li&gt;only 11 KB (original was 2180 KB);&lt;/li&gt;
&lt;li&gt;packaged by NPM as 3.9 KB .tar.gz file (original downloads about 522 KB).&lt;/li&gt;
&lt;li&gt;takes much less memory (I didn't measure it though);&lt;/li&gt;
&lt;li&gt;has 8 devDependencies (original has 17);&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#afterword"&gt;
  &lt;/a&gt;
  Afterword
&lt;/h3&gt;

&lt;p&gt;I'm writing code for money for about 20 years. I'm using node.js and npm for almost a decade. I learnt to develop good and robust node.js services, scripts, serverless functions, apps. I discovered (re-invented) the best practices we better follow. I know how to make code maintainable years after it was written. The hardest bit was always the third party dependencies. I learnt the hard way that each additional sub-dependency can cost a company some thousands of dollars.&lt;/p&gt;

&lt;p&gt;I forked and wrote &lt;a href="https://www.npmjs.com/package/lil-http-terminator"&gt;&lt;code&gt;lil-http-terminator&lt;/code&gt;&lt;/a&gt; in two hours. I foresee saving myself from 8 to 80 hours this way. You can save the same.&lt;/p&gt;

</description>
      <category>node</category>
      <category>npm</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Using react hooks</title>
      <author>Bassel Kanso</author>
      <pubDate>Sun, 11 Jul 2021 09:57:31 +0000</pubDate>
      <link>https://dev.to/bassel17/using-react-hooks-4ejl</link>
      <guid>https://dev.to/bassel17/using-react-hooks-4ejl</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-are-react-hooks-"&gt;
  &lt;/a&gt;
  What are react hooks ?
&lt;/h2&gt;

&lt;p&gt;Hooks were added to React 16.8, they allow us to use state and &lt;br&gt;
the other lifecycle methods without writing a class,&lt;br&gt;
they make it possible to only use functional components.&lt;/p&gt;

&lt;p&gt;You might ask, "why use hooks in the first place if they are just replacements to functionalities&lt;br&gt;
that we already had while using class components !", but that is not the case, Hooks come with lot's of &lt;br&gt;
improvements over the lifecycle methods used in class components.&lt;/p&gt;

&lt;p&gt;React Hooks allow us to address cross-cutting concerns in a much more elegant way than the previous patterns &lt;br&gt;
such as &lt;a href="https://reactjs.org/docs/higher-order-components.html"&gt;higher-order components&lt;/a&gt; &lt;br&gt;
and &lt;a href="https://reactjs.org/docs/render-props.html"&gt;render props&lt;/a&gt;. &lt;br&gt;
Functionalities such as logging and authentication are not component-specific and React Hooks allow us to attach this type of reusable behavior to components.&lt;/p&gt;

&lt;p&gt;In this blog post I will show you how to use the two most important hooks (&lt;strong&gt;&lt;em&gt;useState&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;useEffect&lt;/em&gt;&lt;/strong&gt;) &lt;br&gt;
that you will need to build your classless react app, I will demonstrate by building a random joke generator using&lt;br&gt;
this public api&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="err"&gt;api:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;https://v&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;.jokeapi.dev/joke/Any&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#usestate"&gt;
  &lt;/a&gt;
  useState
&lt;/h2&gt;

&lt;p&gt;This method allows us to use state in our functional components, &lt;br&gt;
it return an array with a state and a method to change that state&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="c1"&gt;// state will have the initial state in this case undefined&lt;/span&gt;
&lt;span class="c1"&gt;// setState is the function that we can use to update the state&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To update the state&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;setState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;words&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="c1"&gt;// you would use it as such, &lt;/span&gt;
&lt;span class="c1"&gt;//the parameter takes in the value you want to update the state with&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In our app we'll use the basic setup that comes with &lt;strong&gt;create-react-app&lt;/strong&gt;&lt;br&gt;
and update it as follows&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//we created a state joke that is intialized with a string value for now&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setJoke&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;There are only 10 kinds of people in this world: those who know binary and those who don't.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#now-our-app-looks-like-this-"&gt;
  &lt;/a&gt;
  Now our app looks like this !ü§ò
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--h8zqnvJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cflltxwor8wworb6gmsf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--h8zqnvJN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cflltxwor8wworb6gmsf.png" alt="Alt example 1"&gt;&lt;/a&gt;(I have to say that's a funny joke)&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#useeffect"&gt;
  &lt;/a&gt;
  useEffect
&lt;/h2&gt;

&lt;p&gt;React Hooks introduces the &lt;code&gt;useEffect()&lt;/code&gt; method to replace &lt;br&gt;
a class component‚Äôs lifecycle methods &lt;code&gt;componentDidMount&lt;/code&gt;, &lt;code&gt;componentDidUpdate&lt;/code&gt;, and &lt;code&gt;componentWillUnmount&lt;/code&gt;. &lt;br&gt;
The method also allows side effects in your functional component, &lt;br&gt;
such as changing content in the document object model and fetching data. &lt;br&gt;
&lt;code&gt;useEffect()&lt;/code&gt; will run after every component render.&lt;/p&gt;

&lt;p&gt;From Reacts documentation&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;useEffect Accepts a function that contains imperative, possibly effectful code.&lt;/p&gt;

&lt;p&gt;Mutations, subscriptions, timers, logging, and other side effects are not allowed &lt;br&gt;
inside the main body of a function component (referred to as React‚Äôs render phase). &lt;br&gt;
Doing so will lead to confusing bugs and inconsistencies in the UI.&lt;/p&gt;

&lt;p&gt;Instead, use useEffect. The function passed to useEffect will run after the render &lt;br&gt;
is committed to the screen. Think of effects as an escape hatch from React‚Äôs purely &lt;br&gt;
functional world into the imperative world.&lt;/p&gt;

&lt;p&gt;By default, effects run after every completed render, &lt;br&gt;
but you can choose to fire them only when certain values have changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That is a lot to take in !&lt;/p&gt;

&lt;p&gt;I'll start by explaining what is effectful code ? !&lt;/p&gt;

&lt;p&gt;effectful code is code that affects something outside of the scope of the function&lt;br&gt;
that is being excuted, also known as &lt;strong&gt;&lt;em&gt;side effects&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Side effects can be observed in such events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Modifying a global variable&lt;/li&gt;
&lt;li&gt;Modifying local scope, such as assigning to a variable&lt;/li&gt;
&lt;li&gt;Modifying memory in-place, such as assigning to an object property or pushing to an array&lt;/li&gt;
&lt;li&gt;Making network requests&lt;/li&gt;
&lt;li&gt;Printing to the terminal&lt;/li&gt;
&lt;li&gt;Modifying the DOM tree
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="c1"&gt;//Example&lt;/span&gt;
&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;fetchData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// making a network request&lt;/span&gt;
    &lt;span class="c1"&gt;//eveythig inside this function will be called on every render&lt;/span&gt;
    &lt;span class="c1"&gt;//fetchData() will be called everytime the component re-renders&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;&lt;code&gt;useEffect&lt;/code&gt; takes a dependencies array as a second parameter, &lt;br&gt;
this will allow us to make it run only when we want it to.&lt;/p&gt;

&lt;p&gt;In our Jokes app we want to use the random jokes api to update the state on every render.&lt;br&gt;
To do that we'll use the &lt;code&gt;useEffect()&lt;/code&gt; method and the &lt;code&gt;setJoke()&lt;/code&gt; method that we got from &lt;code&gt;useState()&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;setJoke&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;getRandomJoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="c1"&gt;//fetching the data and setting and updating state&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getRandomJoke&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://v2.jokeapi.dev/joke/Any?type=single&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="nx"&gt;setJoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App-header"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;joke&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h3&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;header&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0Spulpv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lv5ets3dpll6q6d1tuz1.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Spulpv7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lv5ets3dpll6q6d1tuz1.gif" alt="Alt webapp"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Interesting it looks like the joke is changing ! But it doesn't stop !&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;useEffect()&lt;/code&gt; method is running every single time the &lt;code&gt;joke&lt;/code&gt; state is changing, this makes it run &lt;br&gt;
in an infinite loop !&lt;/p&gt;

&lt;p&gt;To fix that we will use the dependencies array, we want it to run only on the first render&lt;br&gt;
so we will pass an empty array like such&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;getRandomJoke&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;},[])&lt;/span&gt; &lt;span class="c1"&gt;//passed an empty array []&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--m0gRrFnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmtbd1cp0hmzo9k0nolq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--m0gRrFnF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pmtbd1cp0hmzo9k0nolq.png" alt="Alt webapp"&gt;&lt;/a&gt;(Enjoy the joke !)&lt;/p&gt;

&lt;p&gt;This fixes it, now it runs only on the first render !&lt;/p&gt;




&lt;p&gt;Kudos for reaching till the end üëç !&lt;/p&gt;

&lt;p&gt;There are a lot more information to be covered, but I'll keep them for another time (another blog post)&lt;/p&gt;

&lt;p&gt;Check out the offical &lt;a href="https://reactjs.org/docs/hooks-intro.html"&gt;documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can find the github repo of for the random joke generator &lt;a href="https://github.com/Bassel17/random-jokes"&gt;here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>reacthooks</category>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Enjoy the classic Snake arcade game in your terminal</title>
      <author>Donald Sebastian Leung</author>
      <pubDate>Sun, 11 Jul 2021 09:50:33 +0000</pubDate>
      <link>https://dev.to/donaldsebleung/enjoy-the-classic-snake-arcade-game-in-your-terminal-3i5k</link>
      <guid>https://dev.to/donaldsebleung/enjoy-the-classic-snake-arcade-game-in-your-terminal-3i5k</guid>
      <description>&lt;p&gt;If you were born before the rise of smartphones like me, you might vaguely recall the small yet sturdy Nokia flip phones during your childhood or early years, loaded with simple - almost primitive - yet addictive games such as &lt;a href="https://en.wikipedia.org/wiki/Snake_%28video_game_genre%29"&gt;Snake&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Space_Invaders"&gt;Space Invaders&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Early this year, in order to exercise the Node.js skills I acquired through taking the &lt;a href="https://training.linuxfoundation.org/training/nodejs-application-development-lfw211/"&gt;LFW211&lt;/a&gt; course offered by the &lt;a href="https://linuxfoundation.org"&gt;Linux Foundation&lt;/a&gt;, I implemented a variant of the Snake arcade game that directly runs in the terminal. It's very simple and only depends on a Node.js runtime of version no less than 10 so you can even play it on a headless server, yet it can keep you occupied with the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;3 game maps: Unconfined (with wrapping behavior), Walled, Labyrinth&lt;/li&gt;
&lt;li&gt;4 difficulty levels per game map (the difference is speed): Easy, Medium, Hard, Insane&lt;/li&gt;
&lt;li&gt;High scores for each game map + difficulty level combination that persist between game runs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previously, the game was only packaged for Linux which comprise but a tiny fraction of the desktop / laptop user base, while the larger macOS user base could only obtain it from source or through development tools such as npm and Docker. But no more! I have recently decided to package the game for &lt;a href="https://brew.sh"&gt;Homebrew&lt;/a&gt; which should be more familiar to end users, and also make it easier for users of mainstream Linux distributions to obtain the game as well by publishing packages to &lt;a href="https://launchpad.net/ubuntu/+ppas"&gt;Ubuntu PPA&lt;/a&gt; and &lt;a href="https://copr.fedorainfracloud.org/"&gt;Fedora COPR&lt;/a&gt;, as opposed to offering the packages directly on GitHub. So let's get started!&lt;/p&gt;

&lt;p&gt;If installing on macOS (or Linux) using Homebrew, simply enter the following two commands which add the tap &lt;code&gt;DonaldKellett/games&lt;/code&gt; and install the formula &lt;code&gt;csnaketerm&lt;/code&gt; from the tap:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew tap DonaldKellett/games
&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can then invoke the game as &lt;code&gt;csnaketerm&lt;/code&gt;. A corresponding man page is also available:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;man 6 csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;macOS users: this is your chance to &lt;a href="https://github.com/DonaldKellett/homebrew-games/issues/1"&gt;test the formula and contribute to ensuring its quality on macOS&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;For Linux users, the game is available &lt;a href="https://snapcraft.io/csnaketerm"&gt;in the Snap store&lt;/a&gt;. This is the only packaged version that does not come with a man page, but you get a desktop launcher with icon in a GUI environment. &lt;a href="https://snapcraft.io"&gt;Snaps&lt;/a&gt; are native to Ubuntu but come preinstalled in a number of other distributions, and can be manually installed in many more.&lt;/p&gt;

&lt;p&gt;While Snaps are cool and all, I understand the various concerns surrounding them: bloat, vendor lock-in, lack of software freedom and such. So for those reluctant (or unable) to install Snaps, I've got you covered. On Ubuntu 20.04 LTS and later (including non-LTS releases), you can install csnaketerm from &lt;code&gt;ppa:donaldsebleung/games&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;add-apt-repository ppa:donaldsebleung/games
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;On the other hand, on RPM distributions such as Fedora, CentOS and openSUSE, you can obtain csnaketerm from Fedora COPR through the &lt;code&gt;donaldsebleung/games&lt;/code&gt; repository:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf copr &lt;span class="nb"&gt;enable &lt;/span&gt;donaldsebleung/games
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;dnf update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;sudo &lt;/span&gt;dnf &lt;span class="nb"&gt;install &lt;/span&gt;csnaketerm
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;openSUSE users may need to first install &lt;code&gt;dnf&lt;/code&gt; / &lt;code&gt;yum&lt;/code&gt; and &lt;code&gt;dnf-plugins-core&lt;/code&gt; / &lt;code&gt;yum-plugin-copr&lt;/code&gt; accordingly.&lt;/p&gt;

&lt;p&gt;If none of the options above (including Homebrew) worked for you as a Linux user or you are using another Unix OS such as one of the *BSD's, fetching from source is also an option. Ensure Git and Node.js 10 or above is installed, then run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/DonaldKellett/csnaketerm.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The executable and man page are both located at the top-level directory of the repo as &lt;code&gt;csnaketerm&lt;/code&gt; and &lt;code&gt;csnaketerm.6&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;As for Windows users, the game unfortunately does not play well with cmd, PowerShell or even Cygwin, so it should be run in a Linux environment such as &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about"&gt;WSL2&lt;/a&gt;. If in doubt, get &lt;a href="https://www.microsoft.com/en-us/p/ubuntu-2004-lts/9n6svws3rx71#activetab=pivot:overviewtab"&gt;Ubuntu 20.04 LTS from the Microsoft store&lt;/a&gt; and follow the installation instructions for Ubuntu.&lt;/p&gt;

&lt;p&gt;Last but not least, the source code for the game is licensed under the GNU GPL and hosted &lt;a href="https://github.com/DonaldKellett/csnaketerm"&gt;on GitHub&lt;/a&gt; so feel free to study the source code, fork it, and hack on the fork to your heart's desire. Happy coding, and don't forget to hit that Star button if you enjoyed the game üåü &lt;/p&gt;

&lt;p&gt;See also: &lt;a href="https://donaldkellett.github.io/csnaketerm"&gt;https://donaldkellett.github.io/csnaketerm&lt;/a&gt;&lt;/p&gt;

</description>
      <category>node</category>
      <category>javascript</category>
      <category>linux</category>
      <category>bash</category>
    </item>
    <item>
      <title>Java Nested Classes and Lambda Expressions</title>
      <author>Patricia Nicole</author>
      <pubDate>Sun, 11 Jul 2021 09:35:48 +0000</pubDate>
      <link>https://dev.to/pat_the99/java-nested-classes-and-lambda-expressions-18o6</link>
      <guid>https://dev.to/pat_the99/java-nested-classes-and-lambda-expressions-18o6</guid>
      <description>&lt;h2&gt;
  &lt;a href="#java-wilthinking-post-2"&gt;
  &lt;/a&gt;
  [Java WILü§î Post #2]
&lt;/h2&gt;

&lt;p&gt;Java has a very rich set of features that gives developers a lot of options to choose their implementation from, two of them, &lt;strong&gt;nested classes&lt;/strong&gt; and &lt;strong&gt;lambda expressions&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;I was reading a certain part of a code base and realized that I have not really fully understood the differences between the types of nested classes. The section below is heavily based from the Java Documentation for Nested Classes, so in-depth explanations can be checked &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#table-of-contents"&gt;
  &lt;/a&gt;
  Table Of Contents
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#nested-classes"&gt;Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#why-use-nested-classes"&gt;Why Use Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#inner-classes"&gt;Inner Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#static-nested-classes"&gt;Static Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#shadowing-in-nested-classes"&gt;Shadowing in Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#serialization-of-nested-classes"&gt;Serialization of Nested Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#local-and-anon-classes"&gt;Local and Anonymous Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#lambda-expressions"&gt;Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#functional-interface"&gt;Functional Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#target-typing-in-lambdas"&gt;Target Typing In Lambdas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#method-references"&gt;Method References&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#when-to-use-each"&gt;When to Use Nested Classes, Local Classes, Anonymous Classes and Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#nested-classes"&gt;
  &lt;/a&gt;
  üìå Nested Classes  &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;A nested class is a class within another class, i.e. a member of its enclosing class. It is divided into two categories: &lt;strong&gt;non-static&lt;/strong&gt; and &lt;strong&gt;static&lt;/strong&gt;.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Non-static nested classes are called &lt;strong&gt;&lt;em&gt;inner classes&lt;/em&gt;&lt;/strong&gt;. They have access to other members of the enclosing class, even if they are declared private. &lt;/li&gt;
&lt;li&gt;Nested classes that are declared static are called &lt;strong&gt;&lt;em&gt;static nested classes&lt;/em&gt;&lt;/strong&gt;. They DO NOT have access to other members of the enclosing class. &lt;/li&gt;
&lt;li&gt;As a member of the outer class, a nested class can be declared &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt; or &lt;code&gt;package-private&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Note that outer classes can only be declared &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;package-private&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#why-use-nested-classes"&gt;
  &lt;/a&gt;
  üìå Why Use Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;It is a way of logically grouping classes that are only used in one place.&lt;/li&gt;
&lt;li&gt;It increases encapsulation.&lt;/li&gt;
&lt;li&gt;It can lead to more readable and maintainable code. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#inner-classes"&gt;
  &lt;/a&gt;
  üìå Inner Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;An inner class is associated with an instance of its enclosing class and has direct access to that object's methods and fields. &lt;/li&gt;
&lt;li&gt;As an inner class is associated with an instance, &lt;strong&gt;IT CANNOT DEFINE ANY STATIC MEMBERS ITSELF.&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Objects that are instances of an inner class exist within an instance of the outer class. Thus an instance of an inner class can only exist within an instance of the outer class and has direct access to the methods and fields of the enclosing instance.&lt;/li&gt;
&lt;li&gt;To instantiate an inner class, the outer class must first be instantiated. &lt;/li&gt;
&lt;li&gt;There are two special kinds of inner classes: &lt;strong&gt;local classes&lt;/strong&gt; and &lt;strong&gt;anonymous classes&lt;/strong&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OuterClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InnerClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// class content here&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#static-nested-classes"&gt;
  &lt;/a&gt;
  üìå Static Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;As with class methods, a static nested class is associated with its outer class. &lt;/li&gt;
&lt;li&gt;A static nested class cannot refer directly to instance variables or methods defined in its enclosing class. It can use them only through an object reference.&lt;/li&gt;
&lt;li&gt;A static nested class interacts with the instance members of its outer class and other classes just like any other top level class. &lt;strong&gt;Thus a static nested class is behaviorally a top-level class that has been nested in another top-level class for packaging convenience.&lt;/strong&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OuterClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StaticNestedClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="c1"&gt;// class contents here&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#shadowing-in-nested-classes"&gt;
  &lt;/a&gt;
  üìå Shadowing in Nested Classes &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;If a declaration of a type in a particular scope has the same name as another declaration in the enclosing scope, then the declaration shadows the declaration of the enclosing scope.&lt;/li&gt;
&lt;li&gt;The shadowed declaration cannot be referenced by its name alone. Note, you can actually do this : &lt;code&gt;ShadowTest.this.x&lt;/code&gt;.  &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;Go to shadowing section of this link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Refer to member variables that enclose larger scopes by the class name to which they belong. For example, the ff. statement accesses the member variable of the class &lt;code&gt;ShadowTest&lt;/code&gt; from the method.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ShadowTest.this.x = "&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nc"&gt;ShadowTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#serialization"&gt;
  &lt;/a&gt;
  üìå Serialization &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Serialization of inner classes, including local and anonymous classes is &lt;strong&gt;strongly discouraged&lt;/strong&gt;. When the Java compiler compiles certain constructs such as inner classes, it creates &lt;strong&gt;&lt;em&gt;synthetic constructs&lt;/em&gt;&lt;/strong&gt;; these are classes, methods, fields and other constructs that do not have a corresponding construct in the source code. Synthetic constructs enable Java compilers to implement new Java language features without changes to the JVM. However, they may vary among different implementations.&lt;/li&gt;
&lt;li&gt;Might have compatibility issues if an inner class is serialized and then deserialize it with a different JRE implementation.&lt;/li&gt;
&lt;li&gt;Read more at the Serialization section of this &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;link&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#local-and-anonymous-classes"&gt;
  &lt;/a&gt;
  üìå Local and Anonymous Classes &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;There are two types of inner classes : local and anonymous. An inner class within the body of a method is called a &lt;strong&gt;local class&lt;/strong&gt;. An &lt;strong&gt;inner class&lt;/strong&gt; can also be declared inside the body of a method without naming them, i.e. an &lt;strong&gt;anonymous class&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The same modifiers used for other members of the outer class can be used for an inner class. For instance the access modifiers &lt;code&gt;private&lt;/code&gt;, &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;package-private&lt;/code&gt; &lt;code&gt;protected&lt;/code&gt; can be used in an inner class just like how they are used for the instance fields of the outer class.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#more-on-local-classes"&gt;
  &lt;/a&gt;
  üìå &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html"&gt;More on Local Classes&lt;/a&gt;
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;someMethod&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeLocalClass&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// class contents here&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Local classes are classes defined in a block, which is a group of zero or more statements. &lt;/li&gt;
&lt;li&gt;Local classes can be defined inside any block, i.e. in a method body, a for loop or an if clause.&lt;/li&gt;
&lt;li&gt;A local class has access to the members of its enclosing class. It also has access to local variables.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;IMPORTANT: A local class can only access local variables that are declared final.&lt;/strong&gt; When a local class accesses a local variable or parameter of the enclosing block, it &lt;strong&gt;&lt;em&gt;captures&lt;/em&gt;&lt;/strong&gt; the variable or parameter.&lt;/li&gt;
&lt;li&gt;Starting Java 8, a local class can access local variables and parameters of the enclosing block that are final or effectively final. A variable or parameter whose value is never changed after it is initialized is &lt;strong&gt;effectively final&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Starting also in Java SE 8, if you declare the local class in a method, it can access the method's parameters.&lt;/li&gt;
&lt;li&gt;Local classes are similar to inner classes because they cannot define or declare any static members.&lt;/li&gt;
&lt;li&gt;Local classes in static methods, can only refer static members of the enclosing classes.&lt;/li&gt;
&lt;li&gt;Local classes are non-static because they have access to instance members of the enclosing block. Consequently they cannot contain most kinds of static declarations.&lt;/li&gt;
&lt;li&gt;An interface cannot be declared inside a block. Interfaces are inherently static.&lt;/li&gt;
&lt;li&gt;Static initializers or member interfaces cannot be declared inside a local class. &lt;/li&gt;
&lt;li&gt;A local class can have static members provided that they are constant variables. A &lt;em&gt;constant variable&lt;/em&gt; is a variable of primitive type or type String that is declared final and initialized with a compile-time constant expression. A compile time constant expression is typically a string or an arithmetic expression that can be evaluated at compile time.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#anonymous-classes"&gt;
  &lt;/a&gt;
  üìå Anonymous Classes
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nc"&gt;SomeAnonyMousClass&lt;/span&gt; &lt;span class="n"&gt;anonClass&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SomeAnonyMousClass&lt;/span&gt;&lt;span class="o"&gt;(){&lt;/span&gt;
        &lt;span class="c1"&gt;// instance field declarations&lt;/span&gt;
        &lt;span class="c1"&gt;// methods &lt;/span&gt;
        &lt;span class="c1"&gt;// should contain no constructor&lt;/span&gt;
    &lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;Anonymous classes makes the code more concise. It enables declaration and instantiation of class at the same time. They are similar to local classes except that they do not have a name.&lt;/li&gt;
&lt;li&gt;While local classes are class declaration, &lt;strong&gt;anonymous classes are expressions&lt;/strong&gt;, which means that the class is defined in another expression. &lt;/li&gt;
&lt;li&gt;The syntax of an anonymous class expression is like the invocation of a constructor, except that there is a class definition contained in the code block.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;HelloWorld&lt;/span&gt; &lt;span class="n"&gt;helloWorld&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HelloWorld&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// code here&lt;/span&gt;
&lt;span class="o"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;The anonymous class expression consists of the following: &lt;code&gt;new&lt;/code&gt; operator, the name of an interface to implement or a class to extend, parentheses that contain the arguments to a constructor, just like a normal class instance creation expression and a body, which is a class declaration body.&lt;/li&gt;
&lt;li&gt;Because an anonymous class definition is an expression, it must be part of a statement. This explains why there is a semicolon after the closing brace.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;
  &lt;a href="#accessing-local-variables-of-the-enclosing-scope-and-declaring-and-accessing-members-of-the-anonymous-class"&gt;
  &lt;/a&gt;
  üìå Accessing Local Variables of the Enclosing Scope and Declaring and Accessing Members of the Anonymous Class
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Like local classes, anonymous classes can capture variables; they have the same access to local variables of the enclosing scope.&lt;/li&gt;
&lt;li&gt;An anonymous class has access to the members of its enclosing class.&lt;/li&gt;
&lt;li&gt;An anonymous class cannot access local variables in its enclosing scope that are not declared as final or effectively final.&lt;/li&gt;
&lt;li&gt;Like a nested class, a declaration of a type in an anonymous class shadows any other declarations in the enclosing scope that have the same name.&lt;/li&gt;
&lt;li&gt;Anonymous classes also have the same restrictions as local classes with respect to their members: static initializers or member interfaces cannot be declared; an anonymous class can have static members provided that they are constant variables. &lt;/li&gt;
&lt;li&gt;Note, the ff can be declared in anonymous class
a. Fields
b. extra methods
c. instance initializers
d. local classes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMPORTANT: You cannot declare constructors in an anonymous class.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Anonymous classes are ideal for implementing an interface that contains two or more methods.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To summarize the hierarchy stated above, the image below shows the types of nested classes.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--GldNYlYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dre0iay2eowqgnwhtj9i.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--GldNYlYQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dre0iay2eowqgnwhtj9i.jpg" alt="Types of Nested Classes"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lambda-expressions"&gt;
  &lt;/a&gt;
  üìå &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"&gt;Lambda Expressions&lt;/a&gt; &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Lambda Expressions enables developers to treat functionality as a method argument, or code as a data.&lt;/li&gt;
&lt;li&gt;For classes with only one method, an anonymous class, much more a named class is a bit excessive and cumbersome. Lambdas express instances of single-method classes more compactly.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#syntax-of-lambda-expressions"&gt;
  &lt;/a&gt;
  üìå Syntax of Lambda Expressions
&lt;/h4&gt;

&lt;p&gt;A lambda expression consists of the ff.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A comma-separated list of formal parameters enclosed in parentheses. The data type of the parameters in the lambda expression can be omitted. Moreover, the parentheses can be omitted if there is only one parameter.&lt;/li&gt;
&lt;li&gt;The arrow token &lt;code&gt;-&amp;gt;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;The body which consists of a single expression or a statement block. The return statement can also be used, however, keep in mind that a return statement is not an expression in lambdas, so they must be enclosed in braces. Lambdas can be treated as anonymous methods - methods without names.
For instance,
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h4&gt;
  &lt;a href="#functional-interface"&gt;
  &lt;/a&gt;
  üìå Functional Interface &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;&lt;em&gt;functional interface&lt;/em&gt;&lt;/strong&gt; is any interface that contains only one &lt;strong&gt;abstract method&lt;/strong&gt;. It may contain one or more default methods or static methods. Because it only contains one abstract method, the name can be omitted when implementing it. By doing this instead of using an anonymous class expression, a lambda expression is used. The JDK defines several standard functional interfaces which can be found in the package &lt;code&gt;java.util.function&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#accessing-local-variables-of-the-enclosing-scope-in-lambda-expressions"&gt;
  &lt;/a&gt;
  üìå Accessing Local Variables of the Enclosing Scope in Lambda Expressions
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Like local and anonymous classes, lambdas can capture variables; they have the same access to local variables of the enclosing scope. However, unlike local and anonymous classes, &lt;strong&gt;lambdas do not have shadowing issues&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;Lambdas are &lt;strong&gt;lexically scoped&lt;/strong&gt;. This means that they do not inherit any names from a supertype or introduce a new level of scoping. Declarations in lambdas are interpreted just as they are in the enclosing environment.&lt;/li&gt;
&lt;li&gt;If the parameter passed to a lambda is declared in the enclosing scope, then the compiler generates an error, &lt;code&gt;Lambda expression's parameter {} cannot redeclare another local variable defined in an enclosing scope&lt;/code&gt;. This is because lambda expressions do not introduce a new level of scoping. Consequently, lambdas can directly access fields, methods and local variables of the enclosing scope. &lt;/li&gt;
&lt;li&gt;Like local and anonymous classes, a lambda expression can only access local variables and parameters of the enclosing block that are &lt;strong&gt;final&lt;/strong&gt; or &lt;strong&gt;effectively final&lt;/strong&gt; (value should not be changed after initialization).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#target-typing-in-lambdas"&gt;
  &lt;/a&gt;
  üìå Target Typing in Lambdas &lt;a&gt;
&lt;/a&gt;
&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;So how can the type of a lambda expression be determined, e.g. the type of p in the example below?&lt;br&gt;
&lt;/p&gt;


&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAge&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;When the Java runtime invokes the method where the lambda is passed, it is expecting a specific datatype, so the lambda expression is of this type.The data type that these methods expect is called the &lt;strong&gt;target type&lt;/strong&gt;. To determine the type of a lambda expression, the Java compiler uses the target type of the context or situation in which the lambda expression was found. Thus, &lt;strong&gt;_lambda expressions can only be used in situation in which the Java compiler can determine the target type _&lt;/strong&gt;, i.e. in :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;variable declarations&lt;/li&gt;
&lt;li&gt;assignments&lt;/li&gt;
&lt;li&gt;return statements&lt;/li&gt;
&lt;li&gt;array initializers&lt;/li&gt;
&lt;li&gt;method or constructor arguments&lt;/li&gt;
&lt;li&gt;lambda expression bodies&lt;/li&gt;
&lt;li&gt;conditional expressions&lt;/li&gt;
&lt;li&gt;cast expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;h5&gt;
  &lt;a href="#target-types-and-method-arguments"&gt;
  &lt;/a&gt;
  üìå Target Types and Method Arguments
&lt;/h5&gt;

&lt;p&gt;For method arguments, the Java compiler determines the target type with two other language features &lt;strong&gt;overload resolution&lt;/strong&gt; and &lt;strong&gt;type argument interface&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;For instance, if the functional interfaces &lt;code&gt;java.lang.Runnable&lt;/code&gt; and &lt;code&gt;java.util.Callable&amp;lt;V&amp;gt;&lt;/code&gt; are implemented and overloaded by a certain class like this,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Runnable&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;T&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Callable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="no"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;call&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Which method will be invoked by the statement below?&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;invoke&lt;/span&gt;&lt;span class="o"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;"done"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method with argument &lt;code&gt;Callable&amp;lt;V&amp;gt;&lt;/code&gt; will be invoked because the lambda returns a value, in this case the string &lt;code&gt;done&lt;/code&gt;. Note that the method &lt;code&gt;invoke(Runnable)&lt;/code&gt; does not return a value.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#serialization-of-lambdas"&gt;
  &lt;/a&gt;
  üìå Serialization of Lambdas
&lt;/h4&gt;

&lt;p&gt;A lambda can be serialized if its target type and its captured arguments are serializable. However, like inner classes, üõë &lt;strong&gt;the serialization of lambdas are strongly discouraged&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#method-references"&gt;
  &lt;/a&gt;
  üìå Method References &lt;a&gt;&lt;/a&gt;
&lt;/h4&gt;

&lt;p&gt;Lambdas can be used to create anonymous methods. However, there are times when it does nothing but call an existing method. In these cases, it is often clearer to refer to the existing method by name, called &lt;strong&gt;method referencing&lt;/strong&gt;. They are compact, easy-to-read lambdas for methods that already have a name.&lt;br&gt;
For instance this can be done in sorting an array of Person objects by age.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personListAsArray&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nl"&gt;Person:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;compareByAge&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The method reference &lt;code&gt;Person::compareByAge&lt;/code&gt; is semantically the same as the lambda expression where &lt;code&gt;compareByAge&lt;/code&gt; is a static method of the Person class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compareByAge&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;person1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#kinds-of-method-references"&gt;
  &lt;/a&gt;
  Kinds of Method References
&lt;/h5&gt;

&lt;p&gt;There are four types of method referencing&lt;br&gt;
|Kind|Syntax|Example|&lt;br&gt;
|:---|:----|:----|&lt;br&gt;
|Reference to a static method|&lt;code&gt;ContainingClass::staticMethodName&lt;/code&gt;|&lt;code&gt;Person::compareByAge&lt;/code&gt;|&lt;br&gt;
|Reference to an instance method of a particular object|&lt;code&gt;containingObject::instanceMethodName&lt;/code&gt;|&lt;code&gt;person1::compareByName&lt;/code&gt;|&lt;br&gt;
|Reference to an instance method of an arbitrary object of a particular type|&lt;code&gt;ContainingType::methodName&lt;/code&gt;|&lt;code&gt;String::concat&lt;/code&gt;|&lt;br&gt;
|Reference to a constructor|&lt;code&gt;ClassName::new&lt;/code&gt;|&lt;code&gt;HashSet::new&lt;/code&gt;|&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#when-to-use-nested-classes-local-classes-anonymous-classes-and-lambda-expressions"&gt;
  &lt;/a&gt;
  üìå When to Use Nested Classes, Local Classes, Anonymous Classes and Lambda Expressions &lt;a&gt;&lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Nested Classes enable the logical grouping of classes that are only used in one place, increase the use of encapsulation, create more readable and maintainable code. Local classes, anonymous classes and lambda expressions also share the same advantages but they are usually used for more specific situations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Local Class&lt;/strong&gt; . Used if creating more than one instance of a class is needed, access its constructor and/or introduce a new, named type.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Anonymous Class&lt;/strong&gt; . Used if declared fields or additional methods are needed&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lambda Expressions&lt;/strong&gt; . &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Used for encapsulating a single unit of behavior that is passed to the other parts of the code. &lt;/li&gt;
&lt;li&gt;Used if a simple instance of a functional interface is needed and some other criteria like constructor, named type, fields or additional methods are not needed&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;&lt;strong&gt;Nested Class&lt;/strong&gt; . Used for reasons similar to those of local classes, i.e. it is necessary to make the type more widely available, and access to local variables or method parameters are not needed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inner class should be used if access to an enclosing instance's non-public fields and methods are required. &lt;/li&gt;
&lt;li&gt;Static class should be used if there is no instance field that needs to be accessed from the class.&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Getting used and familiar with nested classes and advanced lambdas with generics certainly takes a lot of reading code and practice. We will eventually get there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;As always, cheers to continued growth and learning üç∑!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#references"&gt;
  &lt;/a&gt;
  REFERENCES
&lt;/h3&gt;

&lt;p&gt;[1] &lt;a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html"&gt;Java Nested Classes&lt;/a&gt;&lt;br&gt;
[2] &lt;a href="https://www.flowerbrackets.com/nested-classes-in-java/"&gt;Nested Classes in Java&lt;/a&gt;&lt;/p&gt;

</description>
      <category>java</category>
      <category>programming</category>
      <category>tutorial</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
