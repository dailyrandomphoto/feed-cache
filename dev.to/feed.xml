<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What was your greatest "aha" moment as a JavaScript developer?</title>
      <author>Sherry</author>
      <pubDate>Mon, 03 Jan 2022 21:37:42 +0000</pubDate>
      <link>https://dev.to/sherrydays/what-was-your-greatest-aha-moment-as-a-developer-1cpj</link>
      <guid>https://dev.to/sherrydays/what-was-your-greatest-aha-moment-as-a-developer-1cpj</guid>
      <description></description>
      <category>discuss</category>
      <category>javascript</category>
    </item>
    <item>
      <title>10 Github Extensions for VS Code that will ease your work üòÄ</title>
      <author>YONKEU KWEYA STEVE JUNIOR</author>
      <pubDate>Mon, 03 Jan 2022 21:33:10 +0000</pubDate>
      <link>https://dev.to/yokwejuste/10-github-extensions-for-vs-code-that-will-ease-your-work-121c</link>
      <guid>https://dev.to/yokwejuste/10-github-extensions-for-vs-code-that-will-ease-your-work-121c</guid>
      <description>&lt;p&gt;Hello WorldüòÖ! Let's dive into something concerning open-source today once more. When mentioning open-source, the term &lt;strong&gt;VCS&lt;/strong&gt; &lt;strong&gt;(Version Control system)&lt;/strong&gt; deserves a great focus.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github-all-about"&gt;
  &lt;/a&gt;
  What is Github all about?ü§î
&lt;/h2&gt;


&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xtnbChtG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641222897051/-rr5V7Omh2.png" alt="image.png" width="880" height="337"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
This is just one of the numerous version control systems we do have, but what does that mean? When developers create something (an app, website for example), they make updates to the code, releasing new versions up to after the first one and so on.&lt;br&gt;
&lt;br&gt;
&lt;h2&gt;
  &lt;a href="#as-a-whole-a-vcs-is"&gt;
  &lt;/a&gt;
  As a whole a VCS is:
&lt;/h2&gt;

&lt;p&gt;Version control systems keep these revisions straight, storing the modifications in a central repository. This allows developers to easily collaborate, as they can download a new version of the software, make changes, and upload the newest revision. Every developer can see these new changes, download them, and contribute.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#vs-code-extensions-for-github"&gt;
  &lt;/a&gt;
  VS Code extensions for Githubüï∫
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction:
&lt;/h2&gt;

&lt;p&gt;In general, VS Code extensions let you add languages, debuggers, and tools to your installation to support your development workflow and much more.&lt;br&gt;
&lt;br&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-extensions"&gt;
  &lt;/a&gt;
  The Extensions
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=TeamHub.teamhub"&gt;GitLive&lt;/a&gt;&lt;/strong&gt; ¬†¬†&lt;sup&gt;‚¨áÔ∏è 19K+&lt;/sup&gt;&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JJx6Ka2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Tfdp15qA--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259309778/LaGcGSvvO.gif" alt="image.png" width="880" height="496"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
This sweet extension is actually for you who like teamwork and open-source. With GitLive you can see your fellow partners, online and be aware of which part of your project they're working on currently. By so doing too, you limit you resolve conflicts before they happen by checking their local files.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;2&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph"&gt;Git Graph&lt;/a&gt;&lt;/strong&gt;¬†¬†&lt;sup&gt;‚¨áÔ∏è 2M+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2JJx6Ka2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--Tfdp15qA--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259309778/LaGcGSvvO.gif" alt="" width="880" height="496"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
Git Graph is the best visual way one can interact with Git in VS Code, having a look at the git tree where he can perform simple to very complex actions.&lt;br&gt;
This extension offers high customizability depending on the user preference over the tree.

&lt;p&gt;You can click on any commit to view details and file changes, and you can even perform code reviews without leaving your IDE!&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;3&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=arafathusayn.git-urgent"&gt;Git Urgent&lt;/a&gt;&lt;/strong&gt;¬†¬†&lt;sup&gt;‚¨áÔ∏è 4K+&lt;/sup&gt;&lt;br&gt;
&lt;/p&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ezJuNyat--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641234587134/srbAm1a4z.png" alt="image.png" width="880" height="93"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
This one, I put in the category of simple, but effective. With this extension installed, all you have to do is search ‚ÄúGit Urgent‚Äù in the VS Code command palette, and you can git add all, commit and push with one command.&lt;br&gt;&lt;br&gt;
&lt;strong&gt;4&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ivangabriele.vscode-git-add-and-commit"&gt;Git Automator&lt;/a&gt;&lt;/strong&gt;¬†¬†&lt;sup&gt;‚¨áÔ∏è 56K+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--WphKukcj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--yl_db-o7--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_66%252Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1624259337330/k7yzJwjLb.gif" alt="" width="880" height="550"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
When in the haste and being lazy nothing better than the git automaton, it helps us skip from all the usual commands we use to type when we want to make a commit, a fetch, or even a pull.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Git Automator allows you to add and commit files with a shortcut. It also provides auto-prefills for commit messages. When the action is obvious, for example, if you have deleted a file, Git Automator will guess the action and add it to the prefilled commit message.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;5&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=letmaik.git-tree-compare"&gt;Git Tree Compare &lt;/a&gt;&lt;/strong&gt;¬†¬†&lt;sup&gt;‚¨áÔ∏è 106K+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Qgk8Ffd4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/letmaik/vscode-git-tree-compare/raw/HEAD/screenshots/main.png" alt="" width="486" height="319"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
Working tree comparison against any chosen branch, tag, or commit and keeps you on track by giving you an overview of how your pull request will look like.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
After choosing the base for the comparison, you can either choose to open All Changes or open Changed Files (files that were added will be opened as well, but changes won‚Äôt be shown). You can also choose whether to compare against the selected base ref directly (full mode) or by computing a merge base first (merge mode).&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;6&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens"&gt;GitLens &lt;/a&gt;&lt;/strong&gt;¬†¬†&lt;sup&gt;‚¨áÔ∏è 12M+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N-YjGMLB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641236127280/ZuKdzaMJZ.png" alt="image.png" width="780" height="312"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
GitLens is powerful, feature-rich, and highly customizable to meet your needs.&lt;br&gt;
This is one of the best and highly downloaded VS Code extensions for git. With over 12 Million downloads. GitLens helps you to jump back through history to gain further insights as to how and why the code evolved. On the hoover of the code, the last commit message is shown together with the commit date.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;7&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory"&gt;Git History&lt;/a&gt;&lt;/strong&gt; ¬†¬†&lt;sup&gt;‚¨áÔ∏è 5M+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_hYghZUB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://raw.githubusercontent.com/DonJayamanne/gitHistoryVSCode/master/images/gitLogv3.gif" alt="" width="" height=""&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Among all, this is one of the prettiest and useful extensions for git. It keeps different versions of files under the git repository from initial commit to final or last commit. Also gives you the ability to have different versions of the file, compare branches.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
&lt;strong&gt;8&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github"&gt;GitHub Pull Requests and Issues&lt;/a&gt;&lt;/strong&gt; ¬†¬†&lt;sup&gt;‚¨áÔ∏è 4M+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5r-xh5y--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://github.com/Microsoft/vscode-pull-request-github/raw/HEAD/.readme/demo.gif" alt="" width="" height=""&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
Special extension built by the Github team and it aVS Code text editor to your Github&lt;br&gt;
Authenticating and connecting VS Code to GitHub. GitHub Enterprise is supported by the community, please see this PR for how to set it up.&lt;br&gt;&lt;br&gt;
Makes all your pull requests, issues, branches helps you to check and validate them &lt;strong&gt;9&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.copilot&amp;amp;ssr=false#overview"&gt;GitHub Copilot&lt;/a&gt;&lt;/strong&gt; ¬†¬†&lt;sup&gt;‚¨áÔ∏è 765K+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Giz1AnzT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://venturebeat.com/wp-content/uploads/2021/06/addresses.gif%3Fresize%3D996%252C532%26strip%3Dall" alt="" width="880" height="470"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
GitHub Copilot is an artificial intelligence tool developed by GitHub and OpenAI to assist users of Visual Studio Code, Neovim, and JetBrains by autocompleting block code.&lt;br&gt;
&lt;br&gt;&lt;br&gt;
Nothing is best than choosing Github Copilot as your coding assistant. It possesses regular expressions by developers on Github.&lt;br&gt;
&lt;br&gt;&lt;br&gt;&lt;br&gt;
&lt;strong&gt;10&lt;/strong&gt;. &lt;strong&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=GitHub.codespaces"&gt;GitHub Codespaces&lt;/a&gt;&lt;/strong&gt; ¬†¬†&lt;sup&gt;‚¨áÔ∏è 697K+&lt;/sup&gt;&lt;br&gt;
&lt;center&gt;
&lt;br&gt;
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Kykbuv-j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1641240426627/ZabOoxJvJ.png" alt="image.png" width="880" height="495"&gt;&lt;br&gt;
&lt;/center&gt;
&lt;br&gt;
It provides cloud-hosted development environments for any activity - whether it's a long-term project or a short-term task like reviewing a pull request. You can connect to Codespaces from Visual Studio Code or a browser-based editor that's accessible anywhere.
&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Read and get your own interesting extension, surely you felt in love with one or another&lt;/p&gt;

</description>
      <category>github</category>
      <category>git</category>
      <category>opensource</category>
      <category>githubcopilot</category>
    </item>
    <item>
      <title>Building an Accessible Recursive Menu System</title>
      <author>Drew Clements</author>
      <pubDate>Mon, 03 Jan 2022 21:22:30 +0000</pubDate>
      <link>https://dev.to/drewclem/building-an-accessible-recursive-menu-system-48je</link>
      <guid>https://dev.to/drewclem/building-an-accessible-recursive-menu-system-48je</guid>
      <description>&lt;p&gt;Hey hey! It's me again. The guy that rambles like he knows what he's talking about but is really flying by the seat of his pants!&lt;/p&gt;

&lt;p&gt;Today we're going to be building an accessible menu system in Nuxt using recursion! You'll be able to use this pattern in a variety of ways: navigation drop-downs, nested sidebar navigations, and plenty of others.&lt;/p&gt;

&lt;p&gt;We'll be building it in the context of a sidebar navigation. Think "multiple sub-level navigation menus" akin to what you would expect to see in the sidebar of a documentation site.&lt;/p&gt;

&lt;p&gt;Those can get nested and messy very quickly, but we're going to build &lt;em&gt;two components&lt;/em&gt; to handle the whole thing!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;em&gt;Note: The accessible menu portion of this article is based on &lt;a href="https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/"&gt;this article&lt;/a&gt; by none other than &lt;a href="https://twitter.com/heydonworks"&gt;Heydon Pickering&lt;/a&gt;&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;View the repo &lt;a href="https://github.com/drewclem/nuxt-ally-components"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's jump right in!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setting-up-your-project"&gt;
  &lt;/a&gt;
  Setting up your project
&lt;/h2&gt;

&lt;p&gt;We're going to be working in &lt;a href="https://nuxtjs.org"&gt;Nuxt&lt;/a&gt;, so let's get started with spinning up a new project.&lt;/p&gt;

&lt;p&gt;I'm actually working from an existing Nuxt project, but here's the command you'll run.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npx create-nuxt-app ally-tuts
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's going to ask you some questions for initial project setup. My answers are below, but choose as you wish.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Programming Language: Javascript&lt;/li&gt;
&lt;li&gt;Package Manager: Npm&lt;/li&gt;
&lt;li&gt;UI Framework: None (I know, crazy. Right?)&lt;/li&gt;
&lt;li&gt;Nuxt.js Modules: Axios&lt;/li&gt;
&lt;li&gt;Linting Tools: ESLint&lt;/li&gt;
&lt;li&gt;Testing Framework: None&lt;/li&gt;
&lt;li&gt;Rendering Mode: Universal (SSR / SSG)&lt;/li&gt;
&lt;li&gt;Deployment Target: Static (Static/Jamstack hosting)&lt;/li&gt;
&lt;li&gt;Development Tools: jsconfig.json&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we have that complete, let's set up a simple scaffold for our app.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-quick-html-scaffold"&gt;
  &lt;/a&gt;
  A Quick HTML Scaffold
&lt;/h3&gt;

&lt;p&gt;First thing is to delete the Tutorial.vue and NuxtLogo.vue files in the components/ folder. Next, we'll add a &lt;code&gt;SidebarNav.vue&lt;/code&gt; in our components folder.&lt;/p&gt;

&lt;p&gt;From there, we'll create a layouts folder in the root of our project and add a default.vue component. In that file, we're going to import our &lt;code&gt;SidebarNav&lt;/code&gt; component and put it in the template.&lt;/p&gt;

&lt;p&gt;Generally, this is where you would set up your header and footer-- and any other global layout level stuff-- but that's out of scope for us so we'll keep it nice and simple.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ~/layouts/default.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;main&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;SidebarNav&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;nuxt&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/main&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;em&gt;One cool thing to note here, is that we don't have to import our SidebarNav component! Nuxt just makes it available.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And with that, we can move forward!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-top-level"&gt;
  &lt;/a&gt;
  Building the Top Level
&lt;/h2&gt;

&lt;p&gt;Again, we're building this in the context of a sidebar navigation. With that in mind, our next step is to create &lt;code&gt;SidebarNav.vue&lt;/code&gt; in our components/ folder.&lt;/p&gt;

&lt;p&gt;Within that, we'll make our root element an &lt;code&gt;nav&lt;/code&gt; and we'll go ahead and give it an &lt;code&gt;id&lt;/code&gt; of &lt;code&gt;Sidebar Navigation&lt;/code&gt;- which we'll be using later. And then we want to create a &lt;code&gt;ul&lt;/code&gt; element inside of our nav, and that will ultimately be where our different menu options render!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ~/components/SidebarNav.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Sidebar Navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;em&gt;Your markup should look like this.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;From there, we're going to move into our &lt;code&gt;script&lt;/code&gt; tag in our &lt;code&gt;SidebarNav.vue&lt;/code&gt;-- and what we're doing here is just dropping in some static data that we'll use to pass to our components that will then build out our navigation menu.&lt;/p&gt;

&lt;p&gt;Copy &amp;amp; paste the code below in your &lt;code&gt;SidebarNav.vue&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/SidebarNav.vue&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;navigation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Menu 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Menu 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="na"&gt;submenus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submenu 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submenu 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Submenu 3&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="na"&gt;submenus&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subsubmenu 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subsubmenu 2&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="na"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
              &lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
          &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we're going to place a component (that doesn't exist yet, we'll build that next) inside of the &lt;code&gt;ul&lt;/code&gt;, let's call it &lt;code&gt;BaseMenu&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What we'll do here is &lt;code&gt;v-for&lt;/code&gt; over the items in the &lt;code&gt;navigation&lt;/code&gt; data we just created and we're going to pass each item it loops over into &lt;code&gt;BaseMenu&lt;/code&gt; as a prop.&lt;/p&gt;

&lt;p&gt;We're also going to pass in a prop of &lt;code&gt;depth&lt;/code&gt; and we'll set it at zero for this base level. Now, we're not actually going to do anything with the &lt;code&gt;depth&lt;/code&gt; prop- but I've found it makes it tremendously easier to track which component is at which level once you get into the recursion side of things.&lt;/p&gt;

&lt;p&gt;It's been super helpful in debugging too. You know there's an issue somewhere you see something with a depth of 1 or higher at your root level.&lt;/p&gt;

&lt;p&gt;So, let's add our &lt;code&gt;BaseMenu&lt;/code&gt; in.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;// ~/components/SidebarNav.vue

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;nav&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"Sidebar Navigation"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;BaseMenu&lt;/span&gt;
        &lt;span class="na"&gt;v-for=&lt;/span&gt;&lt;span class="s"&gt;"(menu, index) in navigation"&lt;/span&gt;
        &lt;span class="na"&gt;:menu=&lt;/span&gt;&lt;span class="s"&gt;"menu"&lt;/span&gt;
        &lt;span class="na"&gt;:depth=&lt;/span&gt;&lt;span class="s"&gt;"0"&lt;/span&gt;
        &lt;span class="na"&gt;:key=&lt;/span&gt;&lt;span class="s"&gt;"index"&lt;/span&gt;
      &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#building-the-first-recursive-level"&gt;
  &lt;/a&gt;
  Building the First Recursive Level
&lt;/h2&gt;

&lt;p&gt;The piece we're building next is going to be two things.&lt;/p&gt;

&lt;p&gt;First, it's going to be the &lt;code&gt;li&lt;/code&gt; within our &lt;code&gt;ul&lt;/code&gt; that we just built in our &lt;code&gt;SidebarNav.vue&lt;/code&gt;. And secondly, it's going to be the layer that determines whether to render another recursive menu system or just spit out a link.&lt;/p&gt;

&lt;p&gt;So, lets' create a &lt;code&gt;BaseMenu.vue&lt;/code&gt; component in our components folder, and lets scaffold out our vue file with the root element being an &lt;code&gt;li&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let's also declare the props we know this component will be expecting, based on the work we just did in the &lt;code&gt;SidebarNav&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We know there are two props coming in, &lt;code&gt;menu&lt;/code&gt; and &lt;code&gt;depth&lt;/code&gt;. &lt;code&gt;menu&lt;/code&gt; is a type of object and we want it to be required. &lt;code&gt;depth&lt;/code&gt; is a number, and we want it to be required as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenu.vue&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's take a step back for a second and look at what we need this to do next.&lt;/p&gt;

&lt;p&gt;We know part two of this is that it needs to decide whether to render another menu system or a link. Knowing that, we know we can use a &lt;code&gt;v-if&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we take a look at the data we added in our &lt;code&gt;SidebarNav&lt;/code&gt; component, you can see that there is only ever a &lt;code&gt;submenus&lt;/code&gt; array or a &lt;code&gt;link&lt;/code&gt;- which is a just a string- but there is never both a single &lt;code&gt;menu&lt;/code&gt; object.&lt;/p&gt;

&lt;p&gt;We can use that to determine which element to render. &lt;code&gt;If there is a submenus array = give us another menu level, if not = give us a link&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That could look something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ~/components/BaseMenu.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"menu.submenus"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt; &lt;span class="na"&gt;v-else&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Looking back at our data again, we can see that &lt;em&gt;if&lt;/em&gt; a menu object is a link, then it has two keys: title, and link.&lt;/p&gt;

&lt;p&gt;Let's use that to finish building out the link part of our &lt;code&gt;BaseMenu&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- ~/components/BaseMenu.vue --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;template&lt;/span&gt; &lt;span class="na"&gt;v-if=&lt;/span&gt;&lt;span class="s"&gt;"menu.submenus"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;nuxt-link&lt;/span&gt;
      &lt;span class="na"&gt;v-else&lt;/span&gt;
      &lt;span class="na"&gt;:to=&lt;/span&gt;&lt;span class="s"&gt;"menu.link"&lt;/span&gt;
      &lt;span class="na"&gt;:id=&lt;/span&gt;&lt;span class="s"&gt;"menu.title.toLowerCase().replace(' ', '-')"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      {{ menu.title }
    &lt;span class="nt"&gt;&amp;lt;/nuxt-link&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You'll notice I did a little javascript-ing on the ID, it's just lowercasing and replacing spaces with hyphens- this step is completely optional. It's just the pattern &lt;em&gt;I&lt;/em&gt; prefer for id's.&lt;/p&gt;

&lt;p&gt;Now all that's left is to add a bit that will soon become our actual submenu that get's rendered when necessary.&lt;/p&gt;

&lt;p&gt;Let's add a component &lt;code&gt;BaseMenuItem&lt;/code&gt; in our &lt;code&gt;v-if&lt;/code&gt; statement, and we'll pass it the same props that our &lt;code&gt;BaseMenu&lt;/code&gt; component uses- which will be menu (and that's an object) and depth (which is a number).&lt;/p&gt;

&lt;p&gt;Your &lt;code&gt;BaseMenu&lt;/code&gt; component should be looking something like this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenu.vue&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menu.submenus&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BaseMenuItem&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;depth + 1&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nuxt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;link&lt;/span&gt;
      &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menu.title.toLowerCase().replace(' ', '-')&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menu.link&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nuxt-link&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/li&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we're ready to build out the &lt;code&gt;BaseMenuItem&lt;/code&gt; component we just added to project.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#building-the-accessible-menu"&gt;
  &lt;/a&gt;
  Building the accessible menu
&lt;/h2&gt;

&lt;p&gt;This is the part of the project that was built based on &lt;a href="https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/"&gt;this tutorial&lt;/a&gt; by Heydon Pickering for Smashing Magazine. The write-up originally appeared in his book &lt;a href="https://inclusive-components.design/menus-menu-buttons/"&gt;"Inclusive Components".&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's outline some things this component needs before we jump into the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The Basics&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need a &lt;code&gt;button&lt;/code&gt; to show/hide a menu's submenu (we know this because we're building a nested menu system)&lt;/li&gt;
&lt;li&gt;We need a &lt;code&gt;ul&lt;/code&gt; that shows/hides when it's parent button is clicked.&lt;/li&gt;
&lt;li&gt;We need a method (or function) to handle the click of parent button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Accessibility needs&lt;/strong&gt;&lt;br&gt;
Again, if you want a detailed breakdown of everything a11y about this system, I highly suggest reading through &lt;a href="https://www.smashingmagazine.com/2017/11/building-accessible-menu-systems/"&gt;Heydon's write-up&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need the &lt;code&gt;aria-haspopup&lt;/code&gt; attribute on our parent button. This allows assistive technologies to inform the user that clicking this button will reveal more content.&lt;/li&gt;
&lt;li&gt;We need the &lt;code&gt;aria-expanded&lt;/code&gt; attribute on our parent button. This allows assistive technologies to inform the user whether or not the menu is currently open.&lt;/li&gt;
&lt;li&gt;We need the &lt;code&gt;aria-controls&lt;/code&gt; attribute on our parent button. The intention of &lt;code&gt;aria-controls&lt;/code&gt; is to help screen reader users navigate from a controlling element to a controlled element. It's only available in JAWS screen readers, but some users may expect it.&lt;/li&gt;
&lt;li&gt;Pressing the &lt;code&gt;esc&lt;/code&gt; key should close the currently focused menu&lt;/li&gt;
&lt;li&gt;Opening a menu should focus the first element within it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This may read as if it's a lot, but it really isn't &lt;em&gt;that&lt;/em&gt; much work.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#the-structure"&gt;
  &lt;/a&gt;
  The structure
&lt;/h3&gt;

&lt;p&gt;We can start by laying out the basic structure of our component, and we'll incrementally add functionality and accessibility as we go.&lt;/p&gt;

&lt;p&gt;So, we'll start with a basic Vue component that has a &lt;code&gt;button&lt;/code&gt; and a &lt;code&gt;ul&lt;/code&gt; in it. We can also declare the props we know are going to be passed in here- remember that's going to be menu and number, same as our previous component.&lt;/p&gt;

&lt;p&gt;We'll also want to set the key of &lt;code&gt;isOpen&lt;/code&gt; in our &lt;code&gt;data&lt;/code&gt;, so we'll have a something to toggle with out button click and we can also use that value to determine when to show our submenu.&lt;/p&gt;

&lt;p&gt;At this point, we can deduce that the text in our button will be the title of the menu that's passed into it. Knowing that, we can go ahead and set that up as well.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;props&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;depth&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;required&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next we can get started making this menu do stuff. Let's add a click event to our button that calls a &lt;code&gt;toggleMenu&lt;/code&gt; function.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggleMenu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/buttton&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And in our &lt;code&gt;methods&lt;/code&gt;, we'll create out &lt;code&gt;toggleMenu&lt;/code&gt; function. All it's going to do for now is toggle or &lt;code&gt;isOpen&lt;/code&gt; key to it's opposite value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggleMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now that that is in place, we can add a &lt;code&gt;v-show&lt;/code&gt; to our &lt;code&gt;ul&lt;/code&gt; and dynamically render it based on the button click.&lt;/p&gt;

&lt;p&gt;Another thing we'll do is create a computed property that is just going to sanitize an ID we can use for the parent button and submenus.&lt;/p&gt;

&lt;p&gt;Drop the text &lt;code&gt;hello&lt;/code&gt; into your &lt;code&gt;ul&lt;/code&gt; and fire the app up with &lt;code&gt;yarn dev&lt;/code&gt; or &lt;code&gt;npm run dev&lt;/code&gt; and you should find two parent items, one of which is a button that reveals &lt;code&gt;hello&lt;/code&gt; when you click it!&lt;/p&gt;

&lt;p&gt;So far it's working!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menuId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggleMenu(menu)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;
      &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isOpen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submenuId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;Hello&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;menuId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;submenuId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;-submenu`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggleMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;&lt;em&gt;Your &lt;code&gt;BaseMenuItem&lt;/code&gt; component should be looking like this right now.&lt;/em&gt;&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#adding-aria-attributes"&gt;
  &lt;/a&gt;
  Adding Aria Attributes
&lt;/h3&gt;

&lt;p&gt;Revisiting our list from above, there's a few aria attributes we want to add to progressively enhance the experience for our assisted users.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We need the &lt;code&gt;aria-haspopup&lt;/code&gt; attribute on our parent button. This allows assistive technologies to inform the user that clicking this button will reveal more content.&lt;/li&gt;
&lt;li&gt;We need the &lt;code&gt;aria-expanded&lt;/code&gt; attribute on our parent button. This allows assistive technologies to inform the user whether or not the menu is currently open.&lt;/li&gt;
&lt;li&gt;We need the &lt;code&gt;aria-controls&lt;/code&gt; attribute on our parent button. The intention of &lt;code&gt;aria-controls&lt;/code&gt; is to help screen reader users navigate from a controlling element to a controlled element. It's only available in JAWS screen readers, but some users may expect it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On our button, let's add the &lt;code&gt;aria-haspopup="true"&lt;/code&gt; attribute, and we'll also add &lt;code&gt;:aria-expanded="isOpen.toString()"&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;We're adding &lt;code&gt;aria-expanded&lt;/code&gt; as a dynamic attribute and we're setting it to the value of our &lt;code&gt;isOpen&lt;/code&gt; data point and converting it to a string. We're doing this because the attribute would be removed altogether when &lt;code&gt;isOpen&lt;/code&gt; was false, and that's not what we want.&lt;/p&gt;

&lt;p&gt;The last aria attribute we'll add to our button is &lt;code&gt;:aria-controls="submenuId"&lt;/code&gt;. This is so any screen readers will know which menu this button controls.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
 &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menuId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggleMenu(menu)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;haspopup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isOpen.toString()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
 &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submenuId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#extending-accessibility"&gt;
  &lt;/a&gt;
  Extending Accessibility
&lt;/h3&gt;

&lt;p&gt;There's two more things we need to add to our menu item for it to be complete.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pressing the &lt;code&gt;esc&lt;/code&gt; key should close the currently focused menu&lt;/li&gt;
&lt;li&gt;Opening a menu should focus the first element within it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There's three steps to being able to close the currently focused menu. We need to (1) write a &lt;code&gt;closeMenu&lt;/code&gt; method, (2) add a key listener to our &lt;code&gt;ul&lt;/code&gt; that holds the menu, and (3) and a ref to our button.&lt;/p&gt;

&lt;p&gt;So, let's add &lt;code&gt;ref="menuButtonRef"&lt;/code&gt; to our button, and then let's create a &lt;code&gt;closeMenu&lt;/code&gt; method that's going to set &lt;code&gt;this.isOpen = false&lt;/code&gt; and we'll also focus our new button ref with &lt;code&gt;this.$refs.menuButtonRef.focus()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Lastly, let's add a key listener to our &lt;code&gt;ul&lt;/code&gt; with &lt;code&gt;@keydown.esc.stop="closeMenu"&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And that should have your currently focused menu closing! If you want to see something fun, remove the &lt;code&gt;.stop&lt;/code&gt; and close a menu üòÅ.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;div&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;button&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menuId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;ref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menuButtonRef&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;prevent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;toggleMenu(menu)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;haspopup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;true&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;expanded&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isOpen.toString()&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;aria&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;controls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submenuId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/button&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;
      &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;show&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;isOpen&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;submenuId&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keydown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;esc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;closeMenu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
     &lt;span class="nx"&gt;Hello&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/div&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/template&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;computed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;menuId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;submenuId&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toLowerCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;-&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;&lt;span class="s2"&gt;-submenu`&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="na"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;toggleMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nx"&gt;closeMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menuButtonRef&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If it's not working, it may be because we haven't focused any menus when we're opening them. Let's do that now!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#focusing-first-elements"&gt;
  &lt;/a&gt;
  Focusing first elements
&lt;/h3&gt;

&lt;p&gt;By default, an accessible menu should focus the first element within it once it's opened.&lt;/p&gt;

&lt;p&gt;To do this, we'll need to query for all clickable items within a menu from its ID and then focus the first one.&lt;/p&gt;

&lt;p&gt;So, in our &lt;code&gt;toggleMenu&lt;/code&gt; method we want to write an &lt;code&gt;if&lt;/code&gt; statement to check if &lt;code&gt;isOpen&lt;/code&gt; is true or not. If it is, then that's where we want to focus our first item.&lt;/p&gt;

&lt;p&gt;One additional step we need to do, is utilize Vue's &lt;a href="https://vuejs.org/v2/api/#Vue-nextTick"&gt;nextTick&lt;/a&gt;- which will allow us to ensure that we're checking the value of &lt;code&gt;isOpen&lt;/code&gt; &lt;em&gt;after&lt;/em&gt; it's been updated.&lt;/p&gt;

&lt;p&gt;Inside of our &lt;code&gt;nextTick&lt;/code&gt; we'll get our submenu by its ID with &lt;code&gt;const subMenu = document.getElementById(this.submenuId);&lt;/code&gt; and then narrow that down to the first one with &lt;code&gt;const firstItem = subMenu.querySelector("a, button");&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After that, we just call &lt;code&gt;firstItem?.focus()&lt;/code&gt; and now our menu will auto focus its first item when opened!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;toggleMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$nextTick&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submenu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submenuId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;submenu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a, button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We also want to focus the initial trigger for the menu when it's closed. So we'll write a second &lt;code&gt;if&lt;/code&gt; statement checking for &lt;code&gt;!this.isOpen&lt;/code&gt; and add the same &lt;code&gt;this.$refs.menuButtonRef&lt;/code&gt; that our &lt;code&gt;closeMenu&lt;/code&gt; method has&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/BaseMenuItem.vue&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;toggleMenu&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$nextTick&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;submenu&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;submenuId&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;submenu&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a, button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;firstItem&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isOpen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$nextTick&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;$refs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;menuButtonRef&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Our menu is fully functioning now!! We're not done just &lt;em&gt;yet&lt;/em&gt;, but all our base functionality is now in place!&lt;/p&gt;

&lt;p&gt;We're officially done with our &lt;code&gt;BaseMenuItem.vue&lt;/code&gt; component.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#arrow-key-navigation"&gt;
  &lt;/a&gt;
  Arrow Key Navigation
&lt;/h2&gt;

&lt;p&gt;The last step here is to allow users, assisted and non-assisted, to navigate up and down the menu tree with the arrow keys.&lt;/p&gt;

&lt;p&gt;A lot of what we need is already in place, so all we're doing is writing a key event listener on the top level of our menu.&lt;/p&gt;

&lt;p&gt;So, jumping back to our &lt;code&gt;SidebarNav.vue&lt;/code&gt; component, let's add a &lt;code&gt;@keydown="handleKeyPress"&lt;/code&gt; to our &lt;code&gt;nav&lt;/code&gt; element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/SidebarNav.vue&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;nav&lt;/span&gt; &lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sidebar Navigation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="nd"&gt;keydown&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;handleKeyPress&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BaseMenu&lt;/span&gt;
      &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;(menu, index) in navigation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;menu&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;menu&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;index&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
      &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;depth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
    &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/ul&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/nav&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll write our &lt;code&gt;handleKeyPress&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;Inside this method, we'll need to do a few things.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Get our nav element by ID &lt;code&gt;const navEl = document.getElementById("Sidebar Navigation");&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Get all focusable elements in our nav &lt;code&gt;const focusableElements = navEl.querySelectorAll(["a", "button"]);&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Convert the returned nodelist to an array &lt;code&gt;const focusableElementsArr = Array.from(focusableElements);&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Get the active element on the page &lt;code&gt;const activeEl = document.activeElement;&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Find the index of our active element
&lt;code&gt;const activeElIndex = focusableElementsArr.findIndex(
    (f) =&amp;gt; f.id === activeEl.id
  );&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;Find the last index of our focusable elements &lt;code&gt;const lastIdx = focusableElementsArr.length - 1;&lt;/code&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/SidebarNav.vue&lt;/span&gt;

&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sidebar Navigation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focusableElements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;navEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;focusableElements&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeElIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;activeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we'll write two &lt;code&gt;if&lt;/code&gt; statements. One for &lt;code&gt;ArrowUp&lt;/code&gt; and one for &lt;code&gt;ArrowDown&lt;/code&gt;. If our user is on the first element and presses the up key, our first element will retain focus- but if they hit the down key, it will move them down one element.&lt;/p&gt;

&lt;p&gt;And the inverse will happen for the last element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// ~/components/SidebarNav.vue&lt;/span&gt;

&lt;span class="nx"&gt;methods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;handleKeyPress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;navEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Sidebar Navigation&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focusableElements&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;navEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelectorAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;a&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;button&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;focusableElements&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeEl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeElement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;activeElIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;findIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;f&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;activeEl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;lastIdx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ArrowUp&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;activeElIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;activeElIndex&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;key&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ArrowDown&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;activeElIndex&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;lastIdx&lt;/span&gt;
        &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;lastIdx&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;focusableElementsArr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;activeElIndex&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;focus&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now jump over to your browser, open up some menus, and arrow key up and down!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;This walkthrough was bit long-winded, but- as you saw- there are a lot of moving parts to consider when building a system like this.&lt;/p&gt;

&lt;p&gt;The good news? The system will work for an indefinite level of menus, provided the design and screen real-estate allow for it. The only limits aren't tied to the recursive system itself.&lt;/p&gt;

&lt;p&gt;Another thing to note, the accessibility of it all &lt;em&gt;wasn't difficult or complex.&lt;/em&gt; It took very little to take this from a "menu system" to an "accessible menu system", and a lot of base accessibility features are equally as simple to get in place.&lt;/p&gt;

&lt;p&gt;Accessibility isn't an enhancement that should be place in the backlog. It's a core fundamental that should be accounted for in scoping, planning, and implementation.&lt;/p&gt;

&lt;p&gt;Thank you for making it this far! These a11y write-ups have been huge learning experiences for me and I hope to bring more in 2022.&lt;/p&gt;

&lt;p&gt;Disclaimer: This was built with happy path data structures. You may have to write some additional code to get your data structured how you want it. In learning this system, I had to write yet another recursive function that would scaffold a flat chunk of data into the nested levels needed.&lt;/p&gt;

</description>
      <category>a11y</category>
      <category>javascript</category>
      <category>vue</category>
    </item>
    <item>
      <title>Asteria: Asteroids approaching Earth today</title>
      <author>Valeria</author>
      <pubDate>Mon, 03 Jan 2022 21:19:09 +0000</pubDate>
      <link>https://dev.to/valeriavg/asteria-asteroids-approaching-earth-today-1o23</link>
      <guid>https://dev.to/valeriavg/asteria-asteroids-approaching-earth-today-1o23</guid>
      <description>&lt;h3&gt;
  &lt;a href="#overview"&gt;
  &lt;/a&gt;
  Overview
&lt;/h3&gt;

&lt;p&gt;This project shows a list of asteroids and other objects that are approaching Earth today üò±&lt;/p&gt;

&lt;p&gt;Worry not though, most of them will miss our planet by dozens of millions of kilometers üòÖ&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--smO3hQAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sjw4v3tie2aa1r1o3i4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--smO3hQAh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0sjw4v3tie2aa1r1o3i4.gif" alt="Preview" width="540" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;See live: &lt;a href="https://asteria-gccgo.mongodbstitch.com/"&gt;https://asteria-gccgo.mongodbstitch.com/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;Choose Your Own Adventure&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#link-to-code"&gt;
  &lt;/a&gt;
  Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/ValeriaVG"&gt;
        ValeriaVG
      &lt;/a&gt; / &lt;a href="https://github.com/ValeriaVG/asteria"&gt;
        asteria
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      Asteroids approaching Earth today
    &lt;/h3&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;h3&gt;
  &lt;a href="#how-it-works"&gt;
  &lt;/a&gt;
  How it works
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Realm function &lt;a href="https://github.com/ValeriaVG/asteria/blob/main/functions/fetchNEOFeed.js"&gt;fetchNEOFeed&lt;/a&gt; uses &lt;a href="https://api.nasa.gov/"&gt;NASA API&lt;/a&gt; to fetch a list of approaching near-Earth objects, transforms them to a more appropriate form and upserts them to a MongoDB collection:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--9lBfarVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5l9ygxqnb37r0w6fq4h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9lBfarVZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i5l9ygxqnb37r0w6fq4h.png" alt="Neo collection" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scheduled Realm trigger runs this function every hour:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U1a9Hmx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5uanhoviz98834f91bn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U1a9Hmx4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x5uanhoviz98834f91bn.png" alt="Trigger scheduled to 1/* * * *" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Filled collection is used to generate Realm GraphQL schema:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TVqBGoxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aweeq1ha11lrqpwgq3fw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TVqBGoxa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aweeq1ha11lrqpwgq3fw.png" alt="GraphQL schema" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Realm Hosting hosts minimalistic web page that &lt;a href="https://github.com/ValeriaVG/asteria/blob/main/hosting/files/scripts/index.js"&gt;fetches data&lt;/a&gt; from GraphQL server and renders it:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XeAdVgyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ssi2ymc9o7nf19n1167.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XeAdVgyt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6ssi2ymc9o7nf19n1167.png" alt="Realm Hosting" width="880" height="518"&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope you like it! And let's hope we shall never see this:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7W_GNaAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anlf1u6h3jl70bc7vjo6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7W_GNaAl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/anlf1u6h3jl70bc7vjo6.png" alt="Fake collision state" width="880" height="498"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>atlashackathon</category>
    </item>
    <item>
      <title>A run-through on Random Forest in Machine learning</title>
      <author>Simi</author>
      <pubDate>Mon, 03 Jan 2022 21:17:51 +0000</pubDate>
      <link>https://dev.to/simi/a-run-through-on-random-forest-in-machine-learning-457</link>
      <guid>https://dev.to/simi/a-run-through-on-random-forest-in-machine-learning-457</guid>
      <description>&lt;p&gt;Data scientists employ a wide range of algorithms to receive and analyze input data to predict output values within an acceptable range. The more experience a data scientist gains, the more they know the right algorithm to use for each problem.&lt;/p&gt;

&lt;p&gt;Random Forest is one of the extremely useful algorithm since it works for both classification and regression tasks.&lt;/p&gt;

&lt;p&gt;In this article, you'll learn all you need to know about Random Forest. We'll cover:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;What is Random Forest?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What Random Forest is used for?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How Random Forest works?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Important Hyper-parameters&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How execute Random Forest with lines of code&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Advantages of Random Forest&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disadvantages of Random Forest&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#what-is-random-forest"&gt;
  &lt;/a&gt;
  &lt;strong&gt;What is Random Forest?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Random Forests also known as random decision forests are ensemble learning method for classification, regression and other tasks that works by constructing a multitude of decision trees at training time. For classification tasks, the output of the Random Forest is the class selected by most trees. Random Forest is also a supervised machine learning algorithm that grows and combines decision trees to make a 'forest'. Random Forest can be used for both classification and regression tasks in R and python.&lt;/p&gt;

&lt;p&gt;Before we explore more details in Random Forest, let's break down the keywords in the definition;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Supervised machine learning&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Classification and regression&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decision tree&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Understanding these keywords will make you understand the concept of Random Forest, we initiate with &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Supervised machine learning&lt;/strong&gt;  is a category of machine learning and artificial intelligence that uses labeled datasets to train algorithms to classify data or predict outcomes accurately.  &lt;/p&gt;

&lt;p&gt;A good example of supervised learning problems is predicting house prices. First, we need data about the houses: square footage, number of rooms, features, whether a house has a swimming pool or not and so on. We then need to know the prices of these houses, i.e. the corresponding labels. Using the data coming from thousands of houses, their features and prices, we can now train a supervised machine learning model to predict a new house‚Äôs price based on the examples observed by the model.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Classification and Regression&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Classification&lt;/strong&gt; is the process of finding a model that helps in the separation of data into multiple categorical classes (discrete values).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt; is the process of finding a model that distinguishes the data into continuous real values rather than classes or discrete values.&lt;/p&gt;

&lt;p&gt;A simpler way to distinguish both, remember that &lt;strong&gt;classification&lt;/strong&gt; uses discrete values (yes or no, 1 or 0, etc) while &lt;strong&gt;regression&lt;/strong&gt; uses continuous values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Decision Tree&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As said earlier on, Random Forest model combines multiple decision trees to make a 'forest'. A decision tree is a decision support tool that uses a tree-like model of decisions and their possible consequences, including chance event outcomes, resources cost and so on.  &lt;/p&gt;

&lt;p&gt;A decision tree consists of three components: decision nodes, leaf nodes, and a root node.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Decision node: has two or more branches (e.g sunny, windy and rainy).&lt;/li&gt;
&lt;li&gt;Leaf node: represents a classification or decision.&lt;/li&gt;
&lt;li&gt;Root node: the topmost decision node that corresponds to the best predictor .&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A decision tree algorithm divides a training dataset into branches, which further segregate into other branches. This sequence continues until a leaf node is attained. The leaf node cannot be segregated further.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ewgtb0Hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l11yxe5fgtdp98195ht1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ewgtb0Hm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l11yxe5fgtdp98195ht1.png" alt="An example of Random Forest algorithm" width="808" height="765"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-random-forest-is-used-for"&gt;
  &lt;/a&gt;
  What Random &lt;strong&gt;Forest is used for?&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;Random Forest is used by Data scientist on jobs in many industries like banking, medicine, e-commerce and so on. Random Forest is used to predict things that would help these industries run efficiently; &lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;banking&lt;/strong&gt; to predict customers who are more likely  to repay their debts also those who will use the bank's services more frequently.&lt;/p&gt;

&lt;p&gt;In &lt;strong&gt;health care,&lt;/strong&gt; Random Forest can be used to analyze a patient's medical history to identify the sickness. Also in the study of genetics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Retail&lt;/strong&gt; &lt;strong&gt;companies&lt;/strong&gt; also use Random Forest to recommend products and predict customer satisfaction as well.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-random-forest-works"&gt;
  &lt;/a&gt;
  How Random Forest works
&lt;/h2&gt;

&lt;p&gt;Before we look into how Random Forest works, we need to look into the "ensemble" technique as used in the definition of Random Forest. Ensemble means combining multiple models. Thus a collection of models is used to make predictions rather than an individual model. Ensemble uses two types of methods ;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bagging:&lt;/strong&gt; It creates a different training subset from sample training data with replacement &amp;amp; the final output is based on majority voting. For example, Random Forest. Decision trees in an ensemble, like the trees within Random Forest, are usually trained using the "bagging" method. The bagging method is also a type of ensemble machine learning algorithm called &lt;em&gt;Bootstrap Aggregation&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Bootstrap&lt;/em&gt;¬†randomly performs row sampling and feature sampling from the dataset to form sample datasets for every model.¬†&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Aggregation&lt;/em&gt;¬†reduces these sample datasets into summary statistics based on the observation and combines them. Bootstrap Aggregation can be used to reduce the variance of high variance algorithms such as decision trees.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Boosting:&lt;/strong&gt; It combines weak learners into strong learners by creating sequential models such that the final model has the highest accuracy. For example, ADA BOOST, XG BOOST. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An ensemble method combines predictions from multiple machine learning algorithms together to make more accurate predictions than an individual model.&lt;/p&gt;

&lt;p&gt;Random Forest is also an ensemble method.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Variance&lt;/strong&gt;¬†is an error resulting from sensitivity to small fluctuations in the dataset used for training. High variance will cause an algorithm to model irrelevant data, or noise, in the dataset instead of the intended outputs, called signal. This problem is called¬†&lt;strong&gt;overfitting&lt;/strong&gt;. An overfitted model will perform well in training, but won‚Äôt be able to distinguish the noise from the signal in an actual test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Steps involved in random forest algorithm:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Step I: In Random Forest, number of random records(n) are taken from the data set with a number of records(k).&lt;/p&gt;

&lt;p&gt;Step II: Individual decision trees are constructed for each sample.&lt;/p&gt;

&lt;p&gt;Step III: Each decision tree will generate an output.&lt;/p&gt;

&lt;p&gt;Step IV: Final output is considered based on¬†&lt;strong&gt;Majority Voting or Averaging¬†&lt;/strong&gt; for Classification and regression respectively.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8YLvVMgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phf0ba6b5d1bbvex7kmc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YLvVMgA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/phf0ba6b5d1bbvex7kmc.png" alt="How Random Forest algorithm works" width="600" height="500"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Consider the fruit basket as the data as shown in the figure above. Now n number of samples are taken from the fruit basket and an individual decision tree is constructed for each sample. Each decision tree will generate an output as shown in the figure. The final output is considered based on majority voting. In the figure above you can see that the majority decision tree gives output as an apple when compared to a banana, so the final output is taken as an apple.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-hyperparameters"&gt;
  &lt;/a&gt;
  Important Hyperparameters
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;hyperparameters&lt;/strong&gt; in Random Forest are either used to increase the predictive power of the model or to make the model faster. Let's look at¬†these hyperparameters:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To increase the predictive power:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;n_estimators:&lt;/strong&gt; This is the number of trees the algorithm builds before taking the maximum voting or taking the averages of predictions. In general, a higher number of trees increases the performance and makes the predictions more stable, but it also slows down the computation.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;max_features:&lt;/strong&gt; This is the maximum number of features random forest considers to split a node. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;min_sample_leaf:&lt;/strong&gt; This determines the minimum number of leafs required to split an internal node.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;max_depth:&lt;/strong&gt; This specifies the maximum dept of each tree. The default value for max_depth is None, which means that each tree will expand till every leaf is pure(all of the data come from the same class). There has been some work that says best depth is¬†&lt;strong&gt;5-8 splits&lt;/strong&gt;. It of course, depends on the problem and data.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;To increase the model's speed:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;strong&gt;n_jobs:&lt;/strong&gt; This hyperparameter tells the engine how many processors it is allowed to use. If it has a value of one, it can only use one processor. A value of ‚Äú-1‚Äù means that there is no limit.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;random_state:&lt;/strong&gt; This hyperparameter¬†makes the model‚Äôs output replicable. The model will always produce the same results when it has a definite value of random_state and if it has been given the same hyperparameters and the same training data.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;oob_score:&lt;/strong&gt; Also known as &lt;strong&gt;'oob sampling'.&lt;/strong&gt; It is a random forest cross-validation method. In this sampling, about one-third of the data is not used to train the model and can be used to evaluate its performance. These samples are called the out-of-bag samples. It's¬†very similar to the leave-one-out-cross-validation method.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#how-to-execute-random-forest-with-lines-of-code"&gt;
  &lt;/a&gt;
  How to execute Random Forest with lines of code
&lt;/h2&gt;

&lt;p&gt;Now, let's understand how to implement Random Forest with lines of code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;#import necessary libraries e.g pandas, matplotlib and so on
#import dataset
#clean the dataset if necessary
#visualize if necessary
#spilt the dataset into train and test
&lt;/span&gt;
&lt;span class="c1"&gt;#import Random Forest model
&lt;/span&gt;
&lt;span class="c1"&gt;#classifier
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.ensemble&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomForestClassifier&lt;/span&gt;
&lt;span class="n"&gt;clf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomForestClassifier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_estimators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#fit the model using the training sets
&lt;/span&gt;&lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#check predictions
&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#check accuracy with the actual and predicted values
#import sci-kit learn metrics module to check accuracy
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;
&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accuracy_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#regressor
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.ensemble&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RandomForestRegressor&lt;/span&gt;
&lt;span class="n"&gt;reg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RandomForestRegressor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_estimators&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#train the model using the training sets
&lt;/span&gt;&lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#check predictions
&lt;/span&gt;&lt;span class="n"&gt;y_pred&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reg&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#check accuracy with the actual and predicted values
#import sci-kit learn metrics module to check accuracy
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;metrics&lt;/span&gt;
&lt;span class="n"&gt;metrics&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accuracy_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_pred&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#advantages-of-random-forest"&gt;
  &lt;/a&gt;
  Advantages of Random Forest
&lt;/h2&gt;

&lt;p&gt;Random Forest is more efficient than a single decision tree when performing analysis on a very large databases. Also, Random Forest produces a great result without hyperparameter tuning. The following are advantages of using Random Forest:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It reduces overfitting in decision trees and helps to improve the accuracy.&lt;/li&gt;
&lt;li&gt;It is flexible to both classification and regression problems.&lt;/li&gt;
&lt;li&gt;It works well with both categorical and continuous values.&lt;/li&gt;
&lt;li&gt;It automates missing values present in the data.&lt;/li&gt;
&lt;li&gt;Normalising of data is not required as it uses a rule-based approach.&lt;/li&gt;
&lt;li&gt;It takes less time and expertise to develop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Random Forest is really useful, talk about the avengers of algorithms!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#disadvantages-of-random-forest"&gt;
  &lt;/a&gt;
  Disadvantages of Random Forest
&lt;/h2&gt;

&lt;p&gt;Like every other thing, Random Forest also has some draw backs;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;It requires much time for training as it combines a lot of decision trees to determine the class.&lt;/li&gt;
&lt;li&gt;Due to the ensemble of decision trees, it also suffers interpretability and fails to determine the significance of each variable.&lt;/li&gt;
&lt;li&gt;It requires much computational power as well as resources as it builds numerous trees to combine their outputs.&lt;/li&gt;
&lt;li&gt;It is a predictive modeling tool and not a¬†descriptive tool, meaning if you're¬†looking for a description of the relationships in your data, other approaches would be better.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#test-your-knowledge"&gt;
  &lt;/a&gt;
  Test your knowledge!
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Which of the following is/are true about Random Forest?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I. It can be used for classification task(s)&lt;/p&gt;

&lt;p&gt;II. It can be used for regression task(s)&lt;/p&gt;

&lt;p&gt;III. It is the act or process of classifying&lt;/p&gt;

&lt;p&gt;IV. None&lt;/p&gt;

&lt;p&gt;A. I &amp;amp; II&lt;/p&gt;

&lt;p&gt;B. I only&lt;/p&gt;

&lt;p&gt;C. II only&lt;/p&gt;

&lt;p&gt;D. IV&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Random Forest is a supervised or unsupervised learning model?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A. Supervised learning&lt;/p&gt;

&lt;p&gt;B. Unsupervised learning&lt;/p&gt;

&lt;p&gt;C. None&lt;/p&gt;

&lt;p&gt;D. Both&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;When does overfitting occur?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A. The model performs well on testing and not so well on training.&lt;/p&gt;

&lt;p&gt;B. The model performs well on both the testing and training.&lt;/p&gt;

&lt;p&gt;C.  The model doesn't perform well on both testing and training.&lt;/p&gt;

&lt;p&gt;D.  The model performs well on the training but not on the testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The bagging method is a type of ensemble machine learning algorithms called?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A. Bagging.&lt;/p&gt;

&lt;p&gt;B.  Bootstrap.&lt;/p&gt;

&lt;p&gt;C. Aggregation.&lt;/p&gt;

&lt;p&gt;D. Bootstrap Aggregation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Keep scrutinizing!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>programming</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Is Matrix ready to compete in today's messenger apps?</title>
      <author>Archer Allstars</author>
      <pubDate>Mon, 03 Jan 2022 21:16:40 +0000</pubDate>
      <link>https://dev.to/archerallstars/is-matrix-ready-to-compete-in-todays-messenger-apps-2plp</link>
      <guid>https://dev.to/archerallstars/is-matrix-ready-to-compete-in-todays-messenger-apps-2plp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-matrix"&gt;
  &lt;/a&gt;
  What is Matrix?
&lt;/h2&gt;

&lt;p&gt;In order to get an understanding of what Matrix really is, it's the best to check it out directly from the &lt;a href="https://matrix.org/docs/guides/introduction#what-is-matrix"&gt;official documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, to put it in layman's terms, &lt;strong&gt;Matrix lets you choose the (public)server that you want to use it on. It even allows you to host and use it on your server!&lt;/strong&gt; So, you won't be locked to a specific server. And you can also communicate with your friends who are on different Matrix servers or different Matrix clients altogether. In fact, you can even communicate with friends who are using other messenger apps via &lt;a href="https://matrix.org/bridges/"&gt;Bridges&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other messenger apps, on the other hand, won't let you choose the server/provider you want to use their services on. For example, if you use WhatsApp, you have no option to choose the server/channel. And you can't communicate with your friends who use Telegram or any other messenger apps from within WhatsApp. The same goes for LINE, Telegram, Discord, Signal, and etc.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-the-problem-with-other-messenger-apps"&gt;
  &lt;/a&gt;
  What is the problem with other messenger apps?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--81nlxT6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nk5cevfzovcvboj66d7o.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--81nlxT6w--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nk5cevfzovcvboj66d7o.jpg" alt="Brown Sheep" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The problem lies within the nature of their services. Since most, if not all, of the well known messenger apps are centralized, the providers have full control on how they provide their services. Let's see how some of them manages the privacy of your messages:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;WhatsApp&lt;/strong&gt; is pretty safe as they &lt;a href="https://faq.whatsapp.com/general/security-and-privacy/end-to-end-encryption"&gt;enable end-to-end encryption by default&lt;/a&gt;. And according to their &lt;a href="https://www.whatsapp.com/legal/updates/privacy-policy/?lang=en"&gt;privacy policy&lt;/a&gt;, they do not store our messages on their server. However, since the client is not open source, we have no way to know what's really happening there.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Facebook Messenger&lt;/strong&gt; is not as safe as the others since they don't enable end-to-end encryption by default. However, they're &lt;em&gt;trying very hard&lt;/em&gt; to make it happen &lt;a href="https://messengernews.fb.com/2021/04/30/messenger-policy-workshop-future-of-private-messaging/"&gt;sometime in 2022 at the earliest&lt;/a&gt;. This means, currently, most of the people's messages on their service are exposing for everyone to see. But at least, &lt;a href="https://www.messenger.com/privacy?locale=en_US"&gt;they promised&lt;/a&gt; you to not use your messages for ad targeting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;LINE&lt;/strong&gt; is a very popular messenger app among Asians. It has end-to-end encryption, which they called &lt;a href="https://help.line.me/line/?contentId=50001520"&gt;&lt;strong&gt;Letter Sealing&lt;/strong&gt;&lt;/a&gt;, enabled by default. It's not clear what encryption technology they're using. However, according to their &lt;a href="https://line.me/en/terms/policy/"&gt;privacy policy&lt;/a&gt;, it seems they can see/use our messages in a private chat room if such use is permitted under Applicable Laws.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discord&lt;/strong&gt;, according to their &lt;a href="https://discord.com/privacy"&gt;privacy policy&lt;/a&gt;, they openly say that they &lt;em&gt;will collect your data&lt;/em&gt;. It's needless to say that data encryption or anything of the sort can't be found in their privacy policy. And you wouldn't believe how many business entities use Discord as their internal communication. IMO, out of all communication apps, Discord is the most feature-rich. Therefore, it's not beyond believing why many businesses use it, thus not be limited to only gamers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Telegram&lt;/strong&gt;, according to their &lt;a href="https://telegram.org/privacy#3-1-basic-account-data"&gt;privacy policy&lt;/a&gt;, they enable end-to-end encryption &lt;em&gt;only&lt;/em&gt; in your &lt;strong&gt;Secret Chats&lt;/strong&gt;. The downside of using Secret Chats is that it won't sync across your devices. However, the normal chat room that many users are familiar with is called &lt;strong&gt;Cloud Chats&lt;/strong&gt;, of which &lt;em&gt;your messages along with other data will be stored at Telegram's servers&lt;/em&gt;. But this doesn't mean their local engineers will be able to read your messages in their free time. Your data will be heavily encrypted and the keys to unlock that will be stored at different places.  Nevertheless, &lt;a href="https://telegram.org/apps#source-code"&gt;their client is open source&lt;/a&gt; so you can check whether their apps hide something away from you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Signal&lt;/strong&gt; enable end-to-end encryption by default. &lt;a href="https://github.com/signalapp"&gt;Their client is open source&lt;/a&gt;, of which you can grab the code and even &lt;a href="https://github.com/aqnouch/Signal-Setup-Guide"&gt;run it on your own server&lt;/a&gt;. Nevertheless, &lt;a href="https://signal.org/legal/"&gt;you still need a phone number&lt;/a&gt; in order to use their services. If you want to use Signal without a phone number, you will have to use it on your self-hosting Signal server. But that would mean you won't be able to talk to your friends on the official Signal server since they're on the different server than you, hence the centralized nature of the services.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#welcome-to-the-decentralized-messenger-party"&gt;
  &lt;/a&gt;
  Welcome to the decentralized messenger party!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pUdfv0Pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt456qeltalqnz2cmufk.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pUdfv0Pz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tt456qeltalqnz2cmufk.jpg" alt="An Unlocked Locker" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see, all the popular messenger/communication apps from above have one thing in common, they're locking down users in their platform. The users have no choice to opt out from them, contrary to Matrix which allow the user to choose the client and the server they want to use. Therefore, the users can talk to each other &lt;em&gt;regardless&lt;/em&gt; of what client and sever they're using!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choosing-the-server"&gt;
  &lt;/a&gt;
  Choosing the Server
&lt;/h3&gt;

&lt;p&gt;Since Matrix is not currently a P2P communication protocol (&lt;a href="https://matrix.org/blog/2021/05/06/introducing-the-pinecone-overlay-network"&gt;they're working on it&lt;/a&gt;), you will have to use it through a server which is known as &lt;a href="https://matrix.org/faq/#definitions"&gt;&lt;strong&gt;homeserver&lt;/strong&gt;&lt;/a&gt;. And the homeserver that people use the most is, of course, the official &lt;strong&gt;Matrix.org&lt;/strong&gt; server. Therefore, we better checkout the server's &lt;a href="https://matrix.org/legal/privacy-notice#28-who-can-see-my-messages-and-files"&gt;privacy notice&lt;/a&gt; also.&lt;/p&gt;

&lt;p&gt;According to their privacy notice, they make it pretty clear that they can't see your messages in encrypted rooms, of which use end-to-end encryption to encrypt your messages. And the keys to unlock your encrypted messages are stored only on your devices or by yourself which is as safe as it can be. Moreover, both email address and phone number are totally optional as shown in my profile screenshot below:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--U6vBL1PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq1sismdj6eny3lrv649.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--U6vBL1PS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vq1sismdj6eny3lrv649.jpeg" alt="My Profile Screenshot" width="880" height="464"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;However, if you want to opt out from the official server, the most recent list of the unofficial Matrix servers can be found &lt;a href="https://joinmatrix.org/servers/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Or if you want to run your self-hosting Matrix server, you can get start by this &lt;a href="https://matrix.org/docs/guides/installing-synapse"&gt;installing Synapse guide&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#choosing-the-client"&gt;
  &lt;/a&gt;
  Choosing the Client
&lt;/h3&gt;

&lt;p&gt;Most people use &lt;a href="https://element.io/get-started#download"&gt;&lt;strong&gt;Element&lt;/strong&gt;&lt;/a&gt; as their Matrix client. Since Element was &lt;a href="https://element.io/about"&gt;founded by the team behind Matrix&lt;/a&gt;, it's kind of the official client for Matrix that people expected it to be the most matured and feature-rich.&lt;/p&gt;

&lt;p&gt;Element is an open source Matrix client which you can grab the code on &lt;a href="https://github.com/vector-im"&gt;their GitHub repositories&lt;/a&gt;. Currently, they have &lt;a href="https://element.io/element-one"&gt;US$5&lt;/a&gt; and &lt;a href="https://element.io/element-home"&gt;US$10&lt;/a&gt; monthly subscription plans available for end-users which will give you some more connection speed and some more bridges to connect to your friends on other messenger apps from within Element. Moreover, they also have subscription plans for &lt;a href="https://element.io/enterprise/pricing"&gt;enterprise users&lt;/a&gt; and their &lt;a href="https://element.io/matrix-services/ems-pricing"&gt;Matrix hosting services&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Or if you want to support &lt;a href="https://matrix.org/foundation/"&gt;&lt;strong&gt;The Matrix.org Foundation&lt;/strong&gt;&lt;/a&gt; directly, you can go to &lt;a href="https://www.patreon.com/matrixdotorg"&gt;&lt;strong&gt;their Patreon page&lt;/strong&gt;&lt;/a&gt; or buy some T-Shirts at &lt;a href="https://shop.matrix.org/"&gt;&lt;strong&gt;their shop here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;However, if you don't want to use Element as your Matrix client, you can find a full list of Matrix clients &lt;a href="https://matrix.org/clients/"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#what-is-still-preventing-us-from-using-matrix-as-our-main-messenger-app"&gt;
  &lt;/a&gt;
  What is still preventing us from using Matrix as our main messenger app?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JWPjXkDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrv0nqxebij0j2xsq0iq.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JWPjXkDt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mrv0nqxebij0j2xsq0iq.jpg" alt="A Person Behind a Fog Glass" width="880" height="587"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's not only about the robust technology that will workout for the platform/network. Otherwise, for instance, Google+, with that kind of technology plus money and marketing power, wouldn't fail.&lt;/p&gt;

&lt;p&gt;According to &lt;a href="https://www.statista.com/statistics/258749/most-popular-global-mobile-messenger-apps/"&gt;Statista's report in 2021&lt;/a&gt;, 2 billion users were accessing the WhatsApp messenger on a monthly basis. And according to &lt;a href="https://element.io/#:~:text=Learn%20more-,Built%20on%20Matrix,-Matrix%20is%20an"&gt;Element's website&lt;/a&gt;, around 42 millions users are connecting to Matrix. That's around 2.1% when compared to WhatsApp. It seems like Matrix's position in the messenger apps market is very similar to Linux's position in the desktop PC market. So, why didn't people use it considered all the benefits as explained above?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#no-friend-here"&gt;
  &lt;/a&gt;
  No friend here...
&lt;/h3&gt;

&lt;p&gt;Of course, the reason &lt;strong&gt;we use our communication&lt;/strong&gt; at all is &lt;strong&gt;to communicate with other people, especially, friends and family members.&lt;/strong&gt; If the people we care are not on this network, it's pointless.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://matrix.org/bridges/"&gt;Matrix's Bridges&lt;/a&gt; can help with this issue to some extent. However, it's not a viable option for average users. The accessible Bridges in free tier Element are IRC and Slack that most people have never heard of. Even though the users can pay the subscription plans to access more Bridges, but that would diminish the point of using Matrix. I see Bridges more like a relief, not a solution.&lt;/p&gt;

&lt;p&gt;Nevertheless, to change how people do their things is not an easy task. They're most likely to continue using centralized messenger apps just because they're familiar with them, without caring much about privacy issues. I am very sure that most people would choose to have cute stickers in their collection before having their privacy back any day of the week. This is Matrix's homework to sort it out together with many Matrix client developers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#unmatured-client-yet"&gt;
  &lt;/a&gt;
  Unmatured Client (yet)...
&lt;/h3&gt;

&lt;p&gt;Matrix itself &lt;a href="https://matrix.org/blog/2019/06/11/introducing-matrix-1-0-and-the-matrix-org-foundation"&gt;introduced version 1.0 in 2019&lt;/a&gt;, let alone Element. If you expected Element to be extremely stable, you could be wrong. In my experience for using Element on Android 11 for a while, I can say that it's far from stable and complete.&lt;/p&gt;

&lt;p&gt;I, as an advocate, successfully got some of my friends and family members to use Element. At first, they were very interested about it. However, they're now quitted as there's no option to start a group voice call. They went back to LINE and don't look back on Element again due to the lack of this very basic feature. Here's &lt;a href="https://github.com/vector-im/element-android/issues/4762"&gt;my bug report&lt;/a&gt; regarding this issue.&lt;/p&gt;

&lt;p&gt;I also successfully got my team in a project that I'm working on to switch from Discord to Element. They're not happy about it as the screen sharing feature, that's supposed to work, &lt;a href="https://github.com/vector-im/element-web/issues/4880"&gt;doesn't work at all&lt;/a&gt;. Currently, the group video call in Element is handled by &lt;a href="https://jitsi.org/"&gt;&lt;strong&gt;Jitsi&lt;/strong&gt;&lt;/a&gt;. Basically, you're using &lt;a href="https://meet.jit.si/"&gt;&lt;strong&gt;Jitsi Meet&lt;/strong&gt;&lt;/a&gt; inside Element but without screen sharing.&lt;/p&gt;

&lt;p&gt;Regarding these issues, the team has already made it as the &lt;a href="https://github.com/vector-im/roadmap/issues/1"&gt;&lt;strong&gt;#1 roadmap&lt;/strong&gt;&lt;/a&gt; to address among all the others in &lt;a href="https://github.com/vector-im/roadmap/projects/1"&gt;&lt;strong&gt;their roadmap&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Moreover, there's still a lot of UI/UX issues that need be fixed or refined. You can search and help reporting and debugging the issues at the official issues tracker &lt;a href="https://github.com/vector-im"&gt;here&lt;/a&gt;.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ASWX2oGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oal3tl6bp0pa6d1b0t67.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ASWX2oGI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oal3tl6bp0pa6d1b0t67.jpg" alt="A Man Smoking" width="880" height="586"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Matrix is a great technology in the communication space. I have no doubt about that. However, there's so many things that need to be done before it can compete with other players in the market. Or, to put it more precisely, that's the work for every Matrix client developers and servers to penetrate this market, together!&lt;/p&gt;

&lt;p&gt;I hope this is a good read for you all.&lt;/p&gt;




&lt;p&gt;Cover photo by &lt;a href="https://unsplash.com/@quinoal?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Quino Al&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/phone?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Brown Sheep photo by &lt;a href="https://unsplash.com/@weanimalsmedia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Jo-Anne McArthur&lt;/a&gt; on &lt;a href="https://unsplash.com/photos/GHOiyov2TSQ?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An Unlocked Locker photo by &lt;a href="https://unsplash.com/@the_photoman?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Basil James&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/freedom?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Person Behind a Fog Glass photo by &lt;a href="https://unsplash.com/@stefanopollio?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Stefano Pollio&lt;/a&gt; on &lt;a href="https://unsplash.com/photos/LtuY2lEezNI?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A Man Smoking photo by &lt;a href="https://unsplash.com/@the_altered_guy?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Akshay Bora&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/final?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>productivity</category>
      <category>todayilearned</category>
    </item>
    <item>
      <title>Install Solana on M1 Macs, without Rosetta üí°</title>
      <author>0xMuse</author>
      <pubDate>Mon, 03 Jan 2022 20:33:05 +0000</pubDate>
      <link>https://dev.to/0xmuse/install-solana-on-m1-macs-without-rosetta-10m5</link>
      <guid>https://dev.to/0xmuse/install-solana-on-m1-macs-without-rosetta-10m5</guid>
      <description>&lt;p&gt;Although both the &lt;a href="https://docs.solana.com/cli/install-solana-cli-tools"&gt;Solana Tool Suite&lt;/a&gt; and &lt;a href="https://project-serum.github.io/anchor/getting-started/introduction.html"&gt;Anchor&lt;/a&gt; have already got good native support for the M1 architecture, there are currently no official binary builds for the new Macs.&lt;/p&gt;

&lt;p&gt;In this guide, we will go through all the steps needed to compile and install the tools on your machine natively, without having to set up a cumbersome Rosetta environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-rust"&gt;
  &lt;/a&gt;
  Install Rust
&lt;/h2&gt;

&lt;p&gt;First, you will need to install the Rust toolchain.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl https://sh.rustup.rs &lt;span class="nt"&gt;-sSf&lt;/span&gt; | sh
&lt;span class="nb"&gt;source&lt;/span&gt; &lt;span class="nv"&gt;$HOME&lt;/span&gt;/.cargo/env
rustup component add rustfmt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HlVrocnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lsynf5xhhcs1hqiuxfr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HlVrocnA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4lsynf5xhhcs1hqiuxfr.png" alt="Rust is installed" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This should be all what we need.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-solana-tool-suite"&gt;
  &lt;/a&gt;
  Install Solana Tool Suite
&lt;/h2&gt;

&lt;p&gt;Before compiling the Solana Tool Suite, you will need &lt;code&gt;coreutils&lt;/code&gt; installed on your computer in case you don‚Äôt have it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;coreutils
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now let‚Äôs clone the Solana repository. I‚Äôm using shallow cloning to speed up things since the entire commit history is not needed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;# grab only the repo state at the v1.9.2 tag&lt;/span&gt;
git clone &lt;span class="nt"&gt;--depth&lt;/span&gt; 1 &lt;span class="nt"&gt;--branch&lt;/span&gt; v1.9.2 https://github.com/solana-labs/solana.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, go into the directory and run the &lt;code&gt;cargo-install-all.sh&lt;/code&gt; script.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;solana
./scripts/cargo-install-all.sh &lt;span class="nb"&gt;.&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"export PATH=&lt;/span&gt;&lt;span class="nv"&gt;$PWD&lt;/span&gt;&lt;span class="s2"&gt;/bin:&lt;/span&gt;&lt;span class="se"&gt;\$&lt;/span&gt;&lt;span class="s2"&gt;PATH"&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vJf2mqrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdqv2hncn1wxvgjbss18.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vJf2mqrt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cdqv2hncn1wxvgjbss18.png" alt="Solana is installed" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will take a while, but after it is finished, you can verify if the installation is successful with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;solana &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;There used to be &lt;a href="https://github.com/solana-labs/solana/issues/19743"&gt;an issue with &lt;code&gt;solana-test-validator&lt;/code&gt;&lt;/a&gt; on M1 Macs, but the &lt;a href="https://github.com/solana-labs/solana/pull/21008"&gt;problem has been solved&lt;/a&gt;. You can try to spin it up to make sure it works.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oZ_22giL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu3p56evsh34c8h0ej1j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oZ_22giL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fu3p56evsh34c8h0ej1j.png" alt="Solana Test Validator is up and running" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#install-anchor"&gt;
  &lt;/a&gt;
  Install Anchor
&lt;/h2&gt;

&lt;p&gt;Anchor is the recommended framework for Solana programs.&lt;/p&gt;

&lt;p&gt;Note that Anchor uses &lt;a href="https://classic.yarnpkg.com/en/docs/install#mac-stable"&gt;Yarn v1&lt;/a&gt; to manage Javascript dependencies in your project, so make sure you already have it installed on your computer.&lt;/p&gt;

&lt;p&gt;Since there‚Äôs no official binary available for the M1 architecture, we‚Äôll also need to build from source:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;cargo &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--git&lt;/span&gt; https://github.com/project-serum/anchor &lt;span class="nt"&gt;--tag&lt;/span&gt; v0.19.0 anchor-cli &lt;span class="nt"&gt;--locked&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then, you can verify if the installation is successful with:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;anchor &lt;span class="nt"&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--C3k7bMtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyixp752er27f21jdvh5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--C3k7bMtn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cyixp752er27f21jdvh5.png" alt="Anchor is installed" width="880" height="553"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And that‚Äôs it. Have fun building with Solana on your M1 Mac natively!&lt;/p&gt;




&lt;p&gt;&lt;em&gt;Also building in Web3? Let's connect via Twitter&lt;/em&gt; üëã &lt;strong&gt;&lt;a href="https://twitter.com/0xmuse"&gt;@0xMuse&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>web3</category>
      <category>rust</category>
      <category>solana</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Why is 100 days coding necessary?</title>
      <author>√çtalo Santana</author>
      <pubDate>Mon, 03 Jan 2022 19:55:55 +0000</pubDate>
      <link>https://dev.to/x8ing_/why-is-100-days-coding-necessary-57k7</link>
      <guid>https://dev.to/x8ing_/why-is-100-days-coding-necessary-57k7</guid>
      <description>&lt;p&gt;It's not just 100 days, it's very difficult days that not everyone is able to complete the challenge.&lt;/p&gt;

&lt;p&gt;More hours, more days developing something, it will make you get into the development habit and learn at once every function, variable, object and everything that encompasses your programming language. This is the real reason for you to take the 100-day challenge and nobody talks about it, but I do: it's hard.&lt;/p&gt;

&lt;p&gt;Habit will make you have constancy.&lt;/p&gt;

&lt;p&gt;Habit will make you always learn something new.&lt;/p&gt;

&lt;p&gt;The habit will make you look to become a good professional.&lt;/p&gt;

&lt;p&gt;Everyone who is migrating to the TECH field should take the 100-day challenge with the language they are interested in learning.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>MLOps journey with AWS - part 2 (Visibility is job zero)</title>
      <author>almamon rasool abdali</author>
      <pubDate>Mon, 03 Jan 2022 19:55:47 +0000</pubDate>
      <link>https://dev.to/aws-builders/mlops-journey-with-aws-part-2-visibility-is-job-zero-492p</link>
      <guid>https://dev.to/aws-builders/mlops-journey-with-aws-part-2-visibility-is-job-zero-492p</guid>
      <description>&lt;p&gt;&lt;strong&gt;welcome again&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;in previous &lt;a href="https://dev.to/aws-builders/mlops-journey-with-aws-part-1-helicopter-view-3gn1"&gt;article&lt;/a&gt;  ,we get genral overview of MLOps&lt;/p&gt;

&lt;p&gt;today we want to start our MLOps implementation&lt;/p&gt;

&lt;p&gt;our first thing to do is visibility  some of you may think that visibility ( monitoring )  is at the end  of the deployment.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G0cJ9s58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtb5e5a19kpmrv9u7a5x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G0cJ9s58--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vtb5e5a19kpmrv9u7a5x.png" alt="Image description" width="880" height="551"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;to me, visibility here is  monitoring, tracking,  collaboration between the team, and getting insight on the data journey from the beginning to the end of the pipeline.&lt;/p&gt;

&lt;p&gt;and we need continuous visibility over the following things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;visibility over code
&lt;/li&gt;
&lt;li&gt;visibility over data &lt;/li&gt;
&lt;li&gt;visibility over model training process and all the experiments undergoing &lt;/li&gt;
&lt;li&gt;visibility over inference and feedbacks&lt;/li&gt;
&lt;li&gt;visibility over activities for security &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, let's check them one by one&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-visibility-over-code-changes"&gt;
  &lt;/a&gt;
  &lt;strong&gt;1. visibility over code changes&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4bDXxro7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56mdq7o4z0wwc8ilocj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4bDXxro7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/56mdq7o4z0wwc8ilocj5.png" alt="Image description" width="880" height="661"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;for normal Software developers, this is not an issue but for a managing team of data scientists and ML researchers it can be considered as a   headache ;&lt;/p&gt;

&lt;p&gt;mostly the team use notebooks and mostly you find your team develops bad coding habits and that also affects the version control and code change tracking,  CI/CD problems .. and many other things. &lt;br&gt;
also, there are many tools that try to solve these problems but it is not the notebook itself that makes the problem it is due to bad coding habits by the team itself.&lt;br&gt;
and all problems can be solved if you enforce your team  for writing good code and to me, good code must be at least fulfill three main points  (Modularity, High Cohesion, Loose Coupling)&lt;/p&gt;

&lt;p&gt;so basically if we use notebooks for only importing and calling our class and methods and also separate each script by its work nature such as pre-processing script has to be fully functional without the training code and vise versa and to make work more scalable we need to containerize each script so we can run it on the cluster to do the work.&lt;/p&gt;

&lt;p&gt;now but what if the environment you use will help you and the team to do the above  ??&lt;/p&gt;

&lt;p&gt;based on the best practice method to use sagemaker when running our scripts  it needs you to   separate each phase in different code (training code, preprocessing code, infer code ), and each phase  gonna be containerized  and  run separately, and the notebook in sagemaker is used for functions calling and the heavy coding is inside  scripts that shipped in the containers of each stage&lt;/p&gt;

&lt;p&gt;let take an example to get into sagemaker mentality &lt;/p&gt;

&lt;p&gt;starting by shipping a pre-processing script inside pre-made aws container for sklearn to do preprocessing&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import boto3
import sagemaker
from sagemaker import get_execution_role
from sagemaker.sklearn.processing import SKLearnProcessor
from sagemaker.processing import ProcessingInput, ProcessingOutput

#get region and excution role
role = get_execution_role()
region = boto3.session.Session().region_name

#set the machine type and number of machines
sk_proc = SKLearnProcessor(
    framework_version="0.20.0", role=role, instance_type="ml.m5.xlarge", instance_count=2
)


#sagemaker will copy data from s3 loction to /opt/ml/processing/input
#your script will read data from /opt/ml/processing/input
#sagemaker will expact you now to give it the output preproceesdata
#into /opt/ml/processing/train and /opt/ml/processing/test
#we also add cmd arg called --train-test-split-ratio to control spliting ratio

#run 
sk_proc.run(
    code="preproc.py",
    inputs=[ProcessingInput(source=input_data, destination="/opt/ml/processing/input")],
    outputs=[
        ProcessingOutput(output_name="train_data", source="/opt/ml/processing/train"),
        ProcessingOutput(output_name="test_data", source="/opt/ml/processing/test"),
    ],
    arguments=["--train-test-split-ratio", "0.2"],
)

#get information regarding our runing job

preproc_job_info = sk_proc.jobs[-1].describe()

#get the conifgartion info to get the output uri for each final s3 for train and test
out_cfg = preproc_job_info["ProcessingOutputConfig"]
for output in out_cfg["Outputs"]:
    if output["OutputName"] == "train_data":
        train_preprco_s3 = output["S3Output"]["S3Uri"]
    if output["OutputName"] == "test_data":
        test_preprco_s3 = output["S3Output"]["S3Uri"]

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;as you can see we just provide our script (the script is easier to track than a notebook  ) and sagemaker will ship it in a container ( containerizing our code make it more portable and  scalable and re-usable ) also if we want to train a model on it it has to be on a different container, let see example&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sagemaker.sklearn.estimator import SKLearn
#send our script to the sklearn container by aws

sklearn_model = SKLearn(
    entry_point="train.py", framework_version="0.20.0", 
    instance_type="ml.m5.xlarge", 
    role=role
)
#aws sagemaker will put data for you in  /opt/ml/input/data/train  from s3
# your model must output the final model in /opt/ml/model so sagemaker will copy it to s3
sklearn_model.fit({"train": train_preprco_s3})
#get job info
training_job_info = sklearn_model.jobs[-1].describe()
#get final model from s3
model_data_s3_uri = "{}{}/{}".format(
    training_job_info["OutputDataConfig"]["S3OutputPath"],
    training_job_info["TrainingJobName"],
    "output/model.tar.gz",
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;now when work is done as above the code can be part of any normal CI/CD pipeline and team can work togther and collaborate  based on any normal software lifecycle  &lt;/p&gt;

&lt;p&gt;let move to the next  section of data &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-visibility-over-data"&gt;
  &lt;/a&gt;
  &lt;strong&gt;2. visibility over data&lt;/strong&gt;
&lt;/h2&gt;

&lt;p&gt;here i  want to cover three things &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;collaborate over features created by team members&lt;/li&gt;
&lt;li&gt;versioning of the data  or features &lt;/li&gt;
&lt;li&gt;montoring data quality and detecting drifts&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;solving 1 &amp;amp; 2 by using feature store (AWS sagemaker feature store )&lt;br&gt;
and solving 3 by  monitoring some statistical information about the data and here we will use  (Amazon SageMaker Model Monitor - Monitor Data Quality )&lt;/p&gt;

&lt;p&gt;so let start by exploaring them one by one&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;feature store&lt;/strong&gt;&lt;br&gt;
if you work with team  , and say you  finished preprocessing data and get feature ready for modeling , now maybe you ask how to share features between team , how to re-use them over different project , how to make them fast to reach fast to query  without need to re-do the work again &lt;br&gt;
feature stores is  to help you create, share, and manage features and it works as single source of truth to store, retrieve, remove, track, share, discover, and control access to features.&lt;/p&gt;

&lt;p&gt;before we start working with aws sagemaker feature store we need to understand few concepts&lt;/p&gt;

&lt;p&gt;Feature group ‚Äì   main Feature Store resource that contains the metadata for all the data stored in Amazon SageMaker Feature Store.  &lt;/p&gt;

&lt;p&gt;Feature definition ‚Äì the schema definition for that data such as feature named prices is float , and feature named age is integer &lt;/p&gt;

&lt;p&gt;Record identifier name ‚Äì Each feature group is defined with a record identifier name. The record identifier name must refer to one of the names of a feature defined in the feature group's feature definitions.&lt;/p&gt;

&lt;p&gt;Record ‚Äì A Record is a collection of values for features for a single record identifier value. A combination of record identifier name and a timestamp uniquely identify a record within a feature group. &lt;/p&gt;

&lt;p&gt;Event time ‚Äì a point in time when a new event occurs that corresponds to the creation or update of a record in a feature group. &lt;br&gt;
Online Store ‚Äì the low latency, high availability cache for a feature group that enables real-time lookup of records.  &lt;/p&gt;

&lt;p&gt;Offline store ‚Äì   stores historical data in your S3 bucket. It is used when low (sub-second) latency reads are not needed.  &lt;/p&gt;

&lt;p&gt;now let see  how to work with feature stores in aws   these video will show you  the main idea of  using feature store  after doing preprocessing from aws data wrangler to see the flow of data from raw data into analyzing and preprocessing the data with aws data wrangler to creating feature store from the data flow pipline&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/mrHSmRyjfeg"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;now let see how we can deal with data drift &lt;br&gt;
 but first, let's understand what is drifts  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FYFPxSY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o55qhxsyivr9cjtqyw9b.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FYFPxSY7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/o55qhxsyivr9cjtqyw9b.jpeg" alt="Image description" width="500" height="511"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let first logically ask ourselves if the model is deployed and it is static with all its code and artifacts, so what makes things break, and why model accuracy degrades over time ??&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;in any system the input, always is something that needs to be checked and validated and in ml input must be checked for drifts and security stuff and the input here is the data  .. so what can happen to the data that make things not work as it must be ??
Data Drift happens when the distribution of data changes such as a change in clothes trends and fashions which maybe affect your clothes recommender system, or changes in the country economy and salaries which will affect houses ranges, or maybe you have a CCTV system with the problem in some of it cameras that send damaged stream or a new type of cameras with different video formats our different output ranges.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;to make things more focused  we have&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Concept drift is a type of model drift where the relationship or the mapping between x to y is changed such as ML-based WAF where new attacks emerge that no longer the previous pattern can help to detect them so what the model know as the attack has been changed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data drift is a type of drift here we have changes in data distribution  where the relation of x to y is still valid but  something change the distribution such as  nature change in temperature or new clothes trends or changes in customer preference&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upstream data changes refer to change in    the data pipeline such as  CCTV systems with a problem in some of its cameras that send damaged  &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;so now how to detect these drifts ???&lt;br&gt;
not all drifts can be detected automatically and many need humans in the loop&lt;br&gt;
but generally, it is all about capturing the model performance decay if we can !!&lt;br&gt;
so if possible we compare model accuracy with some ground truth. &lt;br&gt;
but for tasks that these round truth not available  there is other common methods&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Kolmogorov-Smirnov method: simply we compare the cumulative distributions of two datasets; if the distributions from both datasets are not identical then we have data drift. &lt;br&gt;
for more refer  to &lt;br&gt;
&lt;a href="https://www.sciencedirect.com/topics/engineering/kolmogorov-smirnov"&gt;https://www.sciencedirect.com/topics/engineering/kolmogorov-smirnov&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;population stability index (PSI) :  it measures how much a variable has shifted over time.&lt;br&gt;
when we have &lt;br&gt;
PSI &amp;lt; 0.10 means a ‚Äúlittle change‚Äù.&lt;br&gt;
0.10 &amp;lt; PSI &amp;lt; 0.25 means a ‚Äúmoderate change‚Äù&lt;br&gt;
PSI &amp;gt; 0.25 means a ‚Äúsignificant change, action required‚Äù.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;for more refer to  &lt;a href="https://www.risk.net/journal-of-risk-model-validation/7725371/statistical-properties-of-the-population-stability-index"&gt;https://www.risk.net/journal-of-risk-model-validation/7725371/statistical-properties-of-the-population-stability-index&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now let's back to the AWS sagemaker model monitor and how it can help us here&lt;/p&gt;

&lt;p&gt;it can help us with ( Monitor drift in data quality,  Monitor drift in model quality metrics,  Monitor bias in your model's predictions, Monitor drift in feature attribution )&lt;/p&gt;

&lt;p&gt;let's check data quality as an example&lt;br&gt;
the idea is that we create baseline data that sagemaker will use to compare with new data to check some rules that help to detect drift&lt;br&gt;
the steps needed is that&lt;/p&gt;

&lt;p&gt;first, you must enable data capture for your model when deployed for inference&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sagemaker.model_monitor import DataCaptureConfig

#set the conifgration
capture_config=DataCaptureConfig(
                        enable_capture = True,
                        sampling_percentage=100,
                        destination_s3_uri=s3_capture_path)

#add the confi to your model deployment
predictor = model.deploy(initial_instance_count=1,
                instance_type='ml.m4.xlarge',
                endpoint_name='endpoint name'
                data_capture_config=capture_config)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Next, we must create a baseline  from the main data so  we will have some baseline statistical calculations so we can know when the new data changes from the baseline&lt;/p&gt;

&lt;p&gt;example of creating the baseline&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;from sagemaker.model_monitor import DefaultModelMonitor
from sagemaker.model_monitor.dataset_format import DatasetFormat

data_monitor = DefaultModelMonitor(
    role=role,
    instance_count=1,
    instance_type='ml.m5.xlarge',
    volume_size_in_gb=20,
    max_runtime_in_seconds=3600,
)

data_monitor.suggest_baseline(
    baseline_dataset=baseline_maindata_uri,
    dataset_format=DatasetFormat.csv(header=True),
    output_s3_uri=baseline_result,
    wait=True
)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for more please check out &lt;a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html"&gt;https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;now we reach the end of these part and will cover in the next part the remaining items in the visibility section ... see you next &lt;/p&gt;

</description>
      <category>aws</category>
      <category>machinelearning</category>
    </item>
    <item>
      <title>Comet Development on macOS</title>
      <author>David Ortinau</author>
      <pubDate>Mon, 03 Jan 2022 19:53:06 +0000</pubDate>
      <link>https://dev.to/davidortinau/comet-development-on-macos-1o38</link>
      <guid>https://dev.to/davidortinau/comet-development-on-macos-1o38</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article is for you if you like the look of code in Swift UI or Flutter, and wish you could do similar in C#.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://github.com/dotnet/comet"&gt;Comet&lt;/a&gt; is a simplified framework for building cross-platform apps with C#. Enjoy how clean and modern this looks:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[State]
readonly CometRide comet = new();

[Body]
View body()
    =&amp;gt; new VStack {
            new Text(()=&amp;gt; $"({comet.Rides}) rides taken:{comet.CometTrain}")
                .Frame(width:300)
                .LineBreakMode(LineBreakMode.CharacterWrap),

            new Button("Ride the Comet! ‚òÑÔ∏è", ()=&amp;gt;{
                comet.Rides++;
            })
                .Frame(height:44)
                .Margin(8)
                .Color(Colors.White)
                .Background(Colors.OrangeRed)
            .RoundedBorder(color:Colors.Blue)
            .Shadow(Colors.Grey,4,2,2),
    }.Padding(30);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The core set of UI controls and platform APIs are provided by &lt;a href="https://github.com/dotnet/maui"&gt;.NET MAUI&lt;/a&gt;. Comet gives you a simple approach to app development that uses &lt;a href="https://github.com/dotnet/Comet/wiki/State-and-Model-View-Update"&gt;Model-View-Update&lt;/a&gt; (MVU) inspired state management. &lt;/p&gt;

&lt;p&gt;How does this work? Well, pretty much everything is a &lt;code&gt;View&lt;/code&gt;. User interactions or services make updates to state object(s) (model), and Comet efficiently updates the view in response. Comet handles the update for us, but if you want to go hands-on then you can add an update method to the view yourself. &lt;/p&gt;

&lt;p&gt;There's more to it than that, but for now let's keep it simple and have some fun. You just need VS Code and your favorite command line. &lt;/p&gt;

&lt;p&gt;Let's go!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre-requisites: you should first install .NET and the dependencies for the platform(s) you wish to target. In this article I'll focus only on macOS, but the same commands and steps apply to Windows also. Follow &lt;a href="https://dev.to/davidortinau/installing-net-maui-on-macos-4mmc"&gt;this guide&lt;/a&gt; for helpful instructions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#get-comet"&gt;
  &lt;/a&gt;
  Get Comet
&lt;/h2&gt;

&lt;p&gt;Comet is distributed as a NuGet package. By installing the Comet templates, we'll get what we need.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet new -i Clancey.Comet.Templates.Multiplatform
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#new-comet-app"&gt;
  &lt;/a&gt;
  New Comet App
&lt;/h2&gt;

&lt;p&gt;Create a new app in terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet new comet -n HelloComet
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Move into the "HelloComet\HelloComet" folder and open it in VS Code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; code .
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's make sure we have the &lt;a href="https://www.nuget.org/packages/Clancey.Comet/0.3.429-beta"&gt;latest version of Comet&lt;/a&gt; in our "HelloComet.csproj". At the time of this writing the latest is "0.3.429-beta".&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include="Clancey.Comet" Version="0.3.430-beta" /&amp;gt;
    &amp;lt;PackageReference Include="Reloadify3000" Version="1.0.8" /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now run the app by issuing the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet build -t:Run -f net6.0-maccatalyst
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will build the app and launch it. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qJ4W29u1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umsoqy8rc5woyej5gf22.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qJ4W29u1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/umsoqy8rc5woyej5gf22.png" alt="Comet app running on macOS" width="703" height="601"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;w00t! How easy was that? Hopefully you had success first try. If you didn't, reach out on Discord for help.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reloadify"&gt;
  &lt;/a&gt;
  Reloadify
&lt;/h2&gt;

&lt;p&gt;This tool and the accompanying NuGet (the Reloadify3000 referenced above), enable a very nice hot reload experience. This means you can be coding while the app is running and see your changes as you save them in VS Code.&lt;/p&gt;

&lt;p&gt;To get started, install the .NET tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; dotnet tool install --global Reloadify --version 1.0.8
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the same folder which contains the "HelloComet.csproj" run the Reloadify tool:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;gt; reloadify HelloComet.csproj -t maccatalyst   
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will now start listening for file changes, report any code errors, and acknowledge when changes have been successfully sent to the app.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;family@FMBP HelloComet % reloadify HelloComet.csproj -t maccatalyst
Opening :HelloComet.csproj
net6.0-maccatalyst - Debug - AnyCPU
Activating HotReload
Watching: /Users/family/work/HelloComet/HelloComet
Hot Reload is running!
Type exit, to quit
Listening for clients
Client Connected
Building new Diff was Successful!
Hot Reloading: /Users/family/work/HelloComet/HelloComet/MainPage.cs
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I really like this experience because I know very clearly what's going on as I'm making changes. Bad code doesn't usually make the session crash which is also nice. I just get a helpful message like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;'Button' does not contain a definition for 'Fuzz' and no accessible extension method 'Fuzz' accepting a first argument of type 'Button' could be found (are you missing a using directive or an assembly reference?)
Error: /Users/family/work/HelloComet/HelloComet/MainPage.cs
     Line: 22 - 6
    CS1061: 'Button' does not contain a definition for 'Fuzz' and no accessible extension method 'Fuzz' accepting a first argument of type 'Button' could be found (are you missing a using directive or an assembly reference?)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The&lt;a href="https://github.com/dotnet/Comet/tree/dev/sample"&gt; Comet repository has a sample app&lt;/a&gt; which provides answers to most questions you might have. There are some features of .NET MAUI that aren't yet available in Comet, so be sure to open issues when you spot those. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dbfXfmE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c60678l5d15whgp6vhfo.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dbfXfmE_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c60678l5d15whgp6vhfo.png" alt="Hangul clock app running on macOS" width="880" height="724"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I recently built a little &lt;a href="https://github.com/davidortinau/HangulClock"&gt;single page project with Comet&lt;/a&gt; that you can check out. If you have built anything, I'd love to see it and hear about your experience with Comet. Flag me down on Twitter (&lt;a href="https://twitter.com/davidortinau"&gt;@davidortinau&lt;/a&gt;) or via email (&lt;a href="mailto:david.ortinau@microsoft.com"&gt;david.ortinau@microsoft.com&lt;/a&gt;). &lt;/p&gt;

</description>
      <category>dotnet</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Cashing out from web development - React</title>
      <author>Samuel Lucas</author>
      <pubDate>Mon, 03 Jan 2022 19:52:32 +0000</pubDate>
      <link>https://dev.to/sam_lukaa/cashing-out-from-web-development-react-4gpo</link>
      <guid>https://dev.to/sam_lukaa/cashing-out-from-web-development-react-4gpo</guid>
      <description>&lt;p&gt;Every time, I do code day and night, I spend my entire time learning and developing but here I am still making nothing(or just little) from web dev, what should I do?&lt;/p&gt;

&lt;p&gt;Hello my dear reader, I'm Lucas and I'll be giving you tips and tricks to make money from web development in today's post. Stay tuned üòâ.&lt;/p&gt;

&lt;p&gt;One of the hardest things in web development is getting a paid job, could be contracts, part-time or full-time, it's not easy. But why? I'll be listing some reasons I got from research below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Real talents are wanted&lt;/li&gt;
&lt;li&gt;Less job openings in your region&lt;/li&gt;
&lt;li&gt;Years of experience&lt;/li&gt;
&lt;li&gt;You have zero network&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let me take time to talk on each reasons mentioned above.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Real talents are wanted: When we talk about real talents, it means those who have the necessary skills the particular company needs, those who have worked on several projects and have built up several skills from them, that's real talent.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Less job openings in your region: If you find yourself in a location where there are very few startups or tech companies, it could be a challenge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Years of experience: Even though this shouldn't matter in every situation, a lot of recruiters want people with several years of experience (3-5+ years) working with other companies or so, and this could be really challenging to newbies or junior devs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You have zero network: You could be very skilled, have a very nice portfolio and so on but still have difficulties getting a tangible paid job, why? This is simply because you aren't making yourself known to the necessary set of people/circle. It's not just about randomly posting your recent works to Facebook, Twitter...it goes beyond that. It involves tagging the necessary groups/people, those who will see your work and get in touch with you for business. If you're a student, it's not all about telling your colleagues, it goes to joining tech clubs such as &lt;a href="https://developers.google.com/community/gdsc"&gt;GDSC&lt;/a&gt;, &lt;a href="https://techcommunity.microsoft.com/t5/student-developer-blog/microsoft-student-partner-program-your-questions-answered/ba-p/1034510"&gt;Microsoft student club&lt;/a&gt; and much more out there.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The big question now is, how do I start making money from web development in 2022? ü§î a very important question.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Partner with the right niche: Reach out to other developers your close to, those who are making money from web dev already and tell them what skills you possess and ask them for help by guiding you as to how you can get your very next big hit. Don't be afraid of doing this, developers love to help each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start utilising LinkedIn: LinkedIn has helped people get employed. Start by uploading your resume and constantly uploading your profile, upload links to your most recent projects. Follow relevant profiles and setup your profile to get job listings.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Create a personal website: You may find this irrelevant, but it really is. Having a personal website says so much about you. You get to put all your recent jobs/projects there, including testimonials from those you've worked with if perhaps you have. Ensure your website isn't unprofessional, don't use just any UI, ensure it looks very professional. Feel free to buy templates or look up some UI you can use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Start a conversation with small business owners: Do you have a store around you where people go often time? Then that's a big hit for you I say. Walk up to the owner, and introduce yourself, tell them what you've worked on in time past(very necessary) and tell them the advantage of having a website for business(you can just look that up from Google or anywhere üòÅ) and assure them you can give them the best they can ever ask for. You know what to do from here if you can successfully convince them. Congrats already ü§ù&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DO NOT WORK FOR FREE: I felt I needed to lay emphasises on this. This is very common among beginner developers, you believe "it will build up my portfolio, blah blah blah". No don't work for free. Having this mentality of working for free will really affect you both mentally and physically. Do not care of who the person involved is, the best you can do is give discount in pricing. Ensure you receive a pay on every job you do. (I'll be writing on how to negotiate with clients very soon, if you are excited, let me know in the comment section).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Freelancing: This is a two way thing. If you're not really experienced in web development, I'll advice you do not to go into freelancing just yet. It could be overwhelming and probably discouraging, thereby killing your morale. Rather, meet with people in person(startups, stores, senior developers...) for job vacancy. But if you're confident in your skills and can build big projects, kindly watch tutorials or buy good courses on freelancing for web devs. This will help a lot.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, blogging: If you're like me and you love helping young/upcoming developers, writing blog could actually land you a job. Since most of the time you'll be blogging from experience, a recruiter could stumble upon your blog posts, visit your profile(could be LinkedIn or GitHub...) and reach out to you. So you should make it an habit to go into blogging about your stack. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I'll stop here for this post and I really do hope it helps. If it sure did, kindly drop a like and comment on what you think could have been added. Remember to share as well. &lt;/p&gt;

&lt;p&gt;Thank you üéâ&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Flask Material Kit - Open-source Template</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 03 Jan 2022 19:25:41 +0000</pubDate>
      <link>https://dev.to/sm0ke/flask-material-kit-open-source-template-30ce</link>
      <guid>https://dev.to/sm0ke/flask-material-kit-open-source-template-30ce</guid>
      <description>&lt;p&gt;Hello Coders &amp;amp; Happy new year!&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;code&gt;Flask Template&lt;/code&gt; crafted with authentication, database, and Docker support on top of &lt;a href="https://appseed.us/apps/flask-apps/flask-material-kit"&gt;Material Kit&lt;/a&gt; Design, a modern and colorful Bootstrap 5 design. The product can be used to code faster a presentation website without much effort or simply for eLearning activities. For newcomers, &lt;strong&gt;Flask&lt;/strong&gt; is a leading framework written in &lt;code&gt;Python&lt;/code&gt; used to code simple websites, APIs, or complex eCommerce solutions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for reading! &lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;üëâ &lt;a href="https://appseed.us/apps/flask-apps/flask-material-kit"&gt;Flask Material Kit&lt;/a&gt; - product page&lt;/li&gt;
&lt;li&gt;üëâ &lt;a href="https://flask-material-kit.appseed-srv1.com/"&gt;Flask Material Kit&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The product can be compiled and started in a local environment using two techniques: Docker setup (faster &amp;amp; easier) or a classic manual build in case Docker is not an option.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #1&lt;/strong&gt; - Clone/download the &lt;a href="https://github.com/app-generator/flask-material-kit"&gt;sources&lt;/a&gt; from Github&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/flask-material-kit.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;flask-material-kit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Step #2&lt;/strong&gt; - Start in Docker&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once all the above commands are executed, we should be able to access the app in the browser, register new users, and authenticate.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ggHptGj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agx38pcc6f4mmnqy6nx5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ggHptGj0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/agx38pcc6f4mmnqy6nx5.png" alt="Flask Material Kit - Login Page." width="880" height="470"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;Material Kit 2 is built with over 60 frontend individual elements, like buttons, inputs, navbars, nav tabs, cards, or alerts, giving you the freedom of choosing and combining. All components can take variations in color, which you can easily modify using SASS files and classes.&lt;/p&gt;

&lt;p&gt;If you want to get inspiration or just show something directly to your clients, you can jump-start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xJQawd8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n5cz3qanvx4my4mwyng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xJQawd8A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9n5cz3qanvx4my4mwyng.png" alt="Flask Material Kit - User Profile Page." width="880" height="477"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Material Kit - Team Section&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--86NfBDmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36kgzo2j0eelje96z42e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--86NfBDmG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/36kgzo2j0eelje96z42e.png" alt="Flask Material Kit - Team Section." width="880" height="427"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;Flask Material Kit - About US Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d-fWoheC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbsxbd24ydfvi67xz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d-fWoheC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5jscbsxbd24ydfvi67xz.png" alt="Flask Material Kit - About US Page." width="880" height="475"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#deploy-in-production"&gt;
  &lt;/a&gt;
  ‚ú® Deploy in production
&lt;/h2&gt;

&lt;p&gt;Once the local development is done, we can push the project into the wild and share our work using a public deployment.&lt;/p&gt;

&lt;p&gt;Might be a good idea, before going LIVE to enable compression for pages and projects assets (JS, CSS files). This goal can be easily achieved via an open-source Flask module: &lt;code&gt;Flask-Minify&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #1&lt;/strong&gt; - Add &lt;code&gt;Flask-Minify&lt;/code&gt; to the product requirements&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Flask-Minify==0.35
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #2&lt;/strong&gt; - Update codebase to enable compression&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c1"&gt;# Contents of apps/__init__.py
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# Import the module
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_minify&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Minify&lt;/span&gt;                     &lt;span class="c1"&gt;# &amp;lt;-- NEW Line
&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Inject the module into the Flask APP object
&lt;/span&gt;&lt;span class="n"&gt;Minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;js&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cssless&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;-- NEW Line 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point, the app should serve compressed pages and assets (JSS, CSS).&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #3&lt;/strong&gt; - Execute the &lt;code&gt;Docker&lt;/code&gt; set up on the production host&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;docker-compose up &lt;span class="nt"&gt;--build&lt;/span&gt;
// App runs on port -&amp;gt; http://localhost:85
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;üëâ &lt;strong&gt;Step #4&lt;/strong&gt; - Configure webserver to forward requests&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Apache and Nginx are super popular webservers that we can configure to route the external received from our users to the local port &lt;code&gt;85&lt;/code&gt; server exposed by Docker.&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;‚ú® &lt;strong&gt;Apache&lt;/strong&gt; - Reverse PROXY configuration&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight xml"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:*&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ProxyPreserveHost On

    # Servers to proxy the connection, or;
    # List of application servers:
    # Usage:
    # ProxyPass / http://[IP Addr.]:[port]/
    # ProxyPassReverse / http://[IP Addr.]:[port]/
    # Example:
    ProxyPass / http://0.0.0.0:85/
    ProxyPassReverse / http://0.0.0.0:85/

    ServerName localhost
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;‚ú® &lt;strong&gt;Nginx&lt;/strong&gt; - reverse PROXY configuration&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="s"&gt;server {&lt;/span&gt;
        &lt;span class="s"&gt;listen 80;&lt;/span&gt;               
        &lt;span class="s"&gt;server_name my-site.com;&lt;/span&gt;

        &lt;span class="s"&gt;location / {&lt;/span&gt;
                &lt;span class="s"&gt;proxy_pass http://127.0.0.1:85;&lt;/span&gt;
        &lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Thanks for reading!&lt;/em&gt; For more resources, feel free to access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;üëâ AppSeed for &lt;a href="https://appseed.us/support"&gt;support&lt;/a&gt; via eMail and &lt;a href="https://discord.gg/fZC6hup"&gt;Discord&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;üëâ &lt;a href="https://appseed.us/product/django-material-kit"&gt;Django Material Kit&lt;/a&gt; - &lt;code&gt;open-source&lt;/code&gt; version for &lt;strong&gt;Django&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>flask</category>
      <category>material</category>
      <category>opensource</category>
    </item>
  </channel>
</rss>
