<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How to Quickly Improve Your Infrastructure as Code</title>
      <author>Marcin Wyszynski</author>
      <pubDate>Wed, 17 Nov 2021 22:40:00 +0000</pubDate>
      <link>https://dev.to/spacelift/how-to-quickly-improve-your-infrastructure-as-code-3b1o</link>
      <guid>https://dev.to/spacelift/how-to-quickly-improve-your-infrastructure-as-code-3b1o</guid>
      <description>&lt;p&gt;The introduction of &lt;a href="https://spacelift.io/blog/infrastructure-as-code"&gt;Infrastructure as Code&lt;/a&gt; or IaC has transformed the way you can provision and deploy high-performance cloud-based IT infrastructures.&lt;/p&gt;

&lt;p&gt;IaC tools, such as &lt;a href="https://spacelift.io/blog/what-is-terraform"&gt;Terraform&lt;/a&gt;, have been integrated into DevOps toolchains, saving DevOps IaC teams from the excessive manual effort.&lt;/p&gt;

&lt;p&gt;While these tools undoubtedly help accelerate building IT infrastructures, their limitations can impact DevOps’ ability to optimize and improve control of their IaC processes supporting future business needs.&lt;/p&gt;

&lt;p&gt;In this article, you’ll learn about IT infrastructure limitations that IaC DevOps teams deal with on a daily basis and how &lt;a href="https://spacelift.io/"&gt;Spacelift&lt;/a&gt; is able to get past them.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-workflow"&gt;
  &lt;/a&gt;
  1) Workflow
&lt;/h1&gt;

&lt;p&gt;One of the most frequent challenges while using more generic IaC tools is the &lt;strong&gt;non-intuitive workflow&lt;/strong&gt; driven by its reliance on pull requests. Some solutions offer multiple workspaces, but the result can be fragile and nondeterministic. &lt;/p&gt;

&lt;p&gt;Since there’s no concept of mapping projects to branches or tags, anyone commenting on an approved pull request can deploy arbitrary code to production, even if the approval was meant for a short-lived experimental environment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spacelift does not depend on pull requests.&lt;/strong&gt; It is mostly driven by push and tag events, so building a sophisticated Git flow is much easier. Spacelift reports the outcome of its jobs as commit status checks, allowing you to block merging the code on a failing Spacelift check.&lt;/p&gt;

&lt;p&gt;Triggering a run can be customized using &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;Git push policies&lt;/a&gt;. Thanks to that, Spacelift can provide the same level of comfort and security to teams using one project per repository and those using mono repo with hundreds of interdependent projects. You can read more about our approach to VCS integration &lt;a href="https://docs.spacelift.io/integrations/source-control/github#tracked-branches"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#2-access-control"&gt;
  &lt;/a&gt;
  2) Access Control
&lt;/h1&gt;

&lt;p&gt;The majority of generic tools don’t offer access control models but rely on comments on pull requests to drive infrastructure deployments. While it is usually fine when a single repository drives a single Terraform project, it becomes a huge liability for more complex scenarios.&lt;/p&gt;

&lt;p&gt;Spacelift ships with a sophisticated mechanism &lt;strong&gt;allowing administrators to declare&lt;/strong&gt; &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;who can log in&lt;/a&gt; (and under what circumstances) and what their &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;level of access&lt;/a&gt; to each of the managed projects should be. Even our &lt;a href="https://docs.spacelift.io/integrations/slack"&gt;Slack integration&lt;/a&gt; can be subject to policy controls, allowing an admin to grant access to a project &lt;a href="https://docs.spacelift.io/integrations/slack#managing-access-to-stacks-with-policies"&gt;based on Slack-specific data&lt;/a&gt; (think team, channel, user, etc.).&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#3-policy-framework"&gt;
  &lt;/a&gt;
  3) Policy Framework
&lt;/h1&gt;

&lt;p&gt;One thing that’s not in scope for most IaC solutions is the way to ensure that your infrastructure is compliant with industry best practices and your company policies.&lt;/p&gt;

&lt;p&gt;Spacelift puts &lt;strong&gt;policy-as-code&lt;/strong&gt; in the center of its value proposition and builds a consistent, &lt;a href="https://docs.spacelift.io/concepts/policy"&gt;robust policy framework&lt;/a&gt; on top of &lt;a href="https://www.openpolicyagent.org/"&gt;Open Policy Agent&lt;/a&gt;. Apart from providing a comprehensive automated change review and ensuring compliance of your &lt;a href="https://docs.spacelift.io/concepts/policy/terraform-plan-policy"&gt;Terraform changes&lt;/a&gt;, Spacelift uses the same approach to allow you to declare rules around the &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;account&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;project access&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;handling push notifications&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/policy/run-initialization-policy"&gt;starting runs&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/task-run-policy"&gt;triggering tasks&lt;/a&gt;, and creating &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;relationships between projects&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#4-complex-workflows"&gt;
  &lt;/a&gt;
  4) Complex Workflows
&lt;/h1&gt;

&lt;p&gt;Handling interdependencies between projects has always been Terraform’s Achilles’ heel. The usual approach to this problem is adding another layer of abstraction in the form of a Terraform wrapper like &lt;a href="https://terragrunt.gruntwork.io/"&gt;Terragrunt&lt;/a&gt;. But it’s only a partial solution as it breaks the problem into smaller chunks.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;Spacelift’s trigger policies&lt;/a&gt; on the other hand provide a smart, &lt;strong&gt;declarative automation layer&lt;/strong&gt; on top of vanilla Terraform. They allow you to plug into state changes of individual projects and declare dependencies that should be resolved, following the changes that have just been applied. Read more &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;here&lt;/a&gt; to discover other exciting possibilities.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#5-private-module-registry"&gt;
  &lt;/a&gt;
  5) Private Module Registry
&lt;/h1&gt;

&lt;p&gt;Another problem to solve externally when using some of the generic tools is authoring and maintaining reusable &lt;a href="https://spacelift.io/blog/what-are-terraform-modules-and-how-do-they-work"&gt;Terraform modules&lt;/a&gt; for your organization. Terraform is flexible in allowing modules to come from &lt;a href="https://www.terraform.io/docs/language/modules/sources.html"&gt;various sources&lt;/a&gt;, but ensuring confidential access, as well as testing and versioning, are left to you, the user.&lt;/p&gt;

&lt;p&gt;Until now, the golden standard in that regard has been the &lt;a href="https://www.terraform.io/docs/cloud/registry/index.html"&gt;private module registry from HashiCorp&lt;/a&gt;. But Spacelift offers much more. Far from being just a glorified package manager, Spacelift adds a &lt;a href="https://docs.spacelift.io/vendors/terraform/module-registry"&gt;full CI solution for Terraform modules&lt;/a&gt;, out of the box and free of charge. You can thus ensure that your private modules are healthy before you distribute them to the rest of your organization.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#6-effortless-setup-and-customization"&gt;
  &lt;/a&gt;
  6) Effortless Setup and Customization
&lt;/h1&gt;

&lt;p&gt;If you manage a single or a handful of rarely changing projects, it’s likely that you just set your IaC up once and forget about it. But in a more dynamic environment, where microservices come and go, new environments proliferate and new product teams require their own Terraform workspaces. The need to configure it each and every time become a major nuisance, putting a lot of pressure on your DevOps team.&lt;/p&gt;

&lt;p&gt;Enter Spacelift. In Spacelift, much of the &lt;strong&gt;configuration can be handled by the project owners&lt;/strong&gt; themselves—you can add Terraform and/or &lt;a href="https://docs.spacelift.io/concepts/configuration/environment"&gt;environment variables&lt;/a&gt; and mount files (even inject Terraform code!) programmatically or through the GUI without the need for administrative privileges or changing the central server configuration. For administrators, adding new projects requires minimal hassle since there’s no need to set up webhooks or change any YAML. And it can all be done programmatically using Terraform.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#7-programmatic-configuration"&gt;
  &lt;/a&gt;
  7) Programmatic Configuration
&lt;/h1&gt;

&lt;p&gt;What comes as a pleasant surprise to users of generic CI tools, Spacelift entities such as stacks, contexts, modules or policies can be managed in a declarative way using your favorite infra-as-code tool (this rule applies also to their configuration). Yes, that’s right—&lt;a href="https://docs.spacelift.io/vendors/terraform/terraform-provider"&gt;Spacelift offers a Terraform provider&lt;/a&gt; that allows you to &lt;strong&gt;programmatically manage the lifecycle of its own resources&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Administrative stacks get credential-less access to the subset of our &lt;a href="https://docs.spacelift.io/integrations/api"&gt;GraphQL API&lt;/a&gt; that does not involve managing the actual infrastructure. For more sophisticated use cases, Spacelift allows you to generate API keys that are subject to the same access controls as normal users are, allowing you to create single-purpose tokens for restricted use by your internal scripts.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#8-drift-detection"&gt;
  &lt;/a&gt;
  8) Drift Detection
&lt;/h1&gt;

&lt;p&gt;Generic IaC platforms do not provide any mechanisms to detect if your infrastructure is undergoing drift. Drift is a condition that represents the difference between the desired and the actual state of the infrastructure managed by your tool of choice – &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, &lt;a href="https://www.pulumi.com/"&gt;Pulumi&lt;/a&gt;, &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt; or another. Drift can be caused by either or a combination of changes directly introduced by external actors – either humans or machines (scripts) or via the dependency of your resources on external data sources. In any case, drift is not good.&lt;/p&gt;

&lt;p&gt;Spacelift has got you covered here. You can configure periodic &lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection"&gt;drift detection&lt;/a&gt; to &lt;strong&gt;notify you whenever drift happens&lt;/strong&gt;, and take immediate action. You can even go a step further with optional automatic &lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection#to-reconcile-or-not-to-reconcile"&gt;reconciliation&lt;/a&gt;, ensuring your infrastructure always resembles your Terraform configuration.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#9-resource-visualization"&gt;
  &lt;/a&gt;
  9) Resource Visualization
&lt;/h1&gt;

&lt;p&gt;General-purpose CI/CD platforms provide little to no insight into resource utilization from either a real-time or historical perspective. Which resources are over-or underutilized? &lt;/p&gt;

&lt;p&gt;Developers need to be able to intimately understand the material they’re working with. With regards to infra-as-code, the most important part of this story is understanding the managed resources in-depth. Both from the current perspective and through being able to put each resource in its historical context.&lt;/p&gt;

&lt;p&gt;The resources view in Spacelift gives you &lt;strong&gt;greater visibility into each and every resource&lt;/strong&gt;. With this deep insight into resources, DevOps are able to gain an understanding of the lifecycle of each resource managed by Spacelift and document it, regardless of the technology used — &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, &lt;a href="https://github.com/gruntwork-io/terragrunt"&gt;Terragrunt&lt;/a&gt;, &lt;a href="//pulumi.com"&gt;Pulumi&lt;/a&gt;, or &lt;a href="https://aws.amazon.com/cloudformation/"&gt;CloudFormation&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creature-comforts"&gt;
  &lt;/a&gt;
  Creature Comforts
&lt;/h1&gt;

&lt;p&gt;Last but not least, Spacelift puts an emphasis on great user experience, offering a myriad of creature comforts. &lt;a href="https://docs.spacelift.io/concepts/configuration/context"&gt;Contexts&lt;/a&gt; for example allow you to attach entire collections of configuration to individual stacks and modules. &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;Tasks&lt;/a&gt; provide a powerful audited way of running one-off administrative commands on an initialized Terraform environment – subject to &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;their own policy constraints&lt;/a&gt;. &lt;a href="https://docs.spacelift.io/concepts/stack#stack-locking"&gt;Stack locking&lt;/a&gt; allows a single individual to take exclusive control over a stack to ensure that nobody is able to modify its state while crucial changes are being made. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#why-spacelift"&gt;
  &lt;/a&gt;
  Why Spacelift
&lt;/h1&gt;

&lt;p&gt;Spacelift is an innovative and sophisticated SaaS product for Infrastructure as Code which helps IaC DevOps develop and deploy new infrastructures or changes quickly and with confidence.&lt;/p&gt;

&lt;p&gt;Spacelift offers a unique set of IaC management capabilities:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a more intuitive, &lt;a href="https://docs.spacelift.io/concepts/policy/git-push-policy"&gt;versatile&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/run#run-state-machine"&gt;robust&lt;/a&gt; workflow&lt;/li&gt;
&lt;li&gt;extremely granular access controls on &lt;a href="https://docs.spacelift.io/concepts/policy/login-policy"&gt;account&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/stack-access-policy"&gt;project level&lt;/a&gt; that work well with &lt;a href="https://docs.spacelift.io/integrations/single-sign-on"&gt;an identity provider of your choice&lt;/a&gt; (SSO);&lt;/li&gt;
&lt;li&gt;an &lt;a href="https://docs.spacelift.io/concepts/policy/terraform-plan-policy"&gt;automated code review&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/concepts/policy/task-run-policy"&gt;threat detection&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;the ability to &lt;a href="https://docs.spacelift.io/concepts/policy/trigger-policy"&gt;declare complex workflows&lt;/a&gt; between projects across multiple repositories&lt;/li&gt;
&lt;li&gt;a &lt;a href="https://docs.spacelift.io/concepts/modules"&gt;built-in private module registry&lt;/a&gt; with a full CI system for modules&lt;/li&gt;
&lt;li&gt;effortless setup and customization with &lt;a href="https://docs.spacelift.io/concepts/configuration/environment"&gt;per-project environment management&lt;/a&gt; and &lt;a href="https://docs.spacelift.io/integrations/docker"&gt;Docker integration&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://docs.spacelift.io/integrations/terraform-provider"&gt;programmatic configuration&lt;/a&gt; using Terraform;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spacelift.io/concepts/stack/drift-detection"&gt;drift detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.spacelift.io/concepts/resources"&gt;resource visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;… and a myriad of creature comforts like &lt;a href="https://docs.spacelift.io/concepts/configuration/context"&gt;contexts&lt;/a&gt;, &lt;a href="https://docs.spacelift.io/concepts/run/task"&gt;tasks&lt;/a&gt; or &lt;a href="https://docs.spacelift.io/concepts/stack#stack-locking"&gt;stack locking&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#key-points"&gt;
  &lt;/a&gt;
  Key Points
&lt;/h1&gt;

&lt;p&gt;There are many ways of working with Terraform. Each way is different in terms of complexity and offers a different set of features. It is important to keep in mind that choosing one way or another should be based on business and technical requirements. Most often, there is no point in implementing an in-house solution as the cost and effort of building and maintaining it may exceed its potential benefits. It is much easier and more efficient to leverage platforms such as &lt;a href="https://spacelift.io/product"&gt;Spacelift&lt;/a&gt; to provide these features for you instead. You can &lt;a href="https://spacelift.io/free-trial"&gt;try Spacelift for free&lt;/a&gt; or &lt;a href="https://spacelift.io/schedule-demo"&gt;book a demo&lt;/a&gt; with one of our engineers. &lt;/p&gt;

</description>
      <category>devops</category>
      <category>iac</category>
      <category>cicd</category>
      <category>terraform</category>
    </item>
    <item>
      <title>Day 12 of #100daysofcode: Learning and Meetings</title>
      <author>Ryan Whelchel</author>
      <pubDate>Wed, 17 Nov 2021 22:26:04 +0000</pubDate>
      <link>https://dev.to/rydwhelchel/day-12-of-100daysofcode-learning-and-meetings-2cm0</link>
      <guid>https://dev.to/rydwhelchel/day-12-of-100daysofcode-learning-and-meetings-2cm0</guid>
      <description>&lt;p&gt;Between meetings today, I learned about Django and continued my journey to a Javascript certificate from FreeCodeCamp.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#today"&gt;
  &lt;/a&gt;
  Today
&lt;/h2&gt;

&lt;p&gt;I started today with working on FreeCodeCamp tutorials for about an hour. I then had to prepare for a couple meetings I had today. Between meetings, I learned about Django and some of key differences between Django and Flask.&lt;/p&gt;

&lt;p&gt;At the surface level, it seems like Django is ideal for quickly getting a small project off the ground, while Flask is better and more flexible in larger projects.&lt;/p&gt;

&lt;p&gt;I will discuss Django more after I learn more about it. I am still considering building my next app in Django instead of Flask, if only to learn it.&lt;/p&gt;

&lt;p&gt;I also spent some time on the artist app today. I made a mistake with some git commands and, long story short, I ditched a week's worth of changes. &lt;/p&gt;

&lt;p&gt;A little disheartening, but I was considering trying a different tact for constructing the main page, so I'm not too upset about it. &lt;/p&gt;

&lt;p&gt;A clean slate, a new approach!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tomorrow"&gt;
  &lt;/a&gt;
  Tomorrow
&lt;/h2&gt;

&lt;p&gt;I am going to spend some time tomorrow planning the final approach for the artist app. I have already designed most of the elements using React bootstrap, it's really only the structure of the page that I will be focusing on. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-im-struggling-on"&gt;
  &lt;/a&gt;
  What I'm Struggling on
&lt;/h2&gt;

&lt;p&gt;Complicated state management between components. I still haven't quite nailed it down.&lt;/p&gt;

&lt;p&gt;That's all for today! Thanks for following, if you have any suggestions, please leave them in the comments below!&lt;/p&gt;

</description>
      <category>100daysofcode</category>
      <category>react</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Welcome Thread - v151</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 17 Nov 2021 22:24:15 +0000</pubDate>
      <link>https://dev.to/thepracticaldev/welcome-thread-v151-5dm</link>
      <guid>https://dev.to/thepracticaldev/welcome-thread-v151-5dm</guid>
      <description>&lt;p&gt;&lt;a href="https://i.giphy.com/media/Y8ocCgwtdj29O/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/Y8ocCgwtdj29O/giphy.gif" alt="Stefan from SNL waving hello" width="444" height="404"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#welcome-to-dev"&gt;
  &lt;/a&gt;
  Welcome to DEV!
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Leave a comment below to introduce yourself! You can talk about what brought you here, what you're learning, or just a fun fact about yourself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reply to someone's comment, either with a question or just a hello. 👋 &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Great to have you in the community!&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>welcome</category>
    </item>
    <item>
      <title>Hawk project</title>
      <author>Paulo Medeiros</author>
      <pubDate>Wed, 17 Nov 2021 21:35:55 +0000</pubDate>
      <link>https://dev.to/medpaf/hawk-project-1c59</link>
      <guid>https://dev.to/medpaf/hawk-project-1c59</guid>
      <description>&lt;p&gt;Hawk is a network and pentest utility that I developed so that I could perform different kinds of task using the same suite, instead of jumping from one tool to another.&lt;br&gt;
Currently, this script can perform a good variety of tasks such as ifconfig, ping, traceroute, port scans (including SYN, TCP, UDP, ACK, comprehensive scan, host discovery (scan for up devices on a local network), MAC address detection (get MAC address of a host IP on a local network), banner grabbing, DNS checks (with geolocation information), WHOIS, subdomain enumeration, vulnerability reconnaissance, packet sniffing, MAC spoofing, IP spoofing, SYN flooding, deauth attack and brute-force attack (beta).&lt;br&gt;
Other features are still being implemented. Future implementations may include WAF detection, DNS enumeration, traffic analysis, XSS vulnerability scanner, ARP cache poisoning, DNS cache poisoning, MAC flooding, ping of death, network disassociation attack (not deauth attack), OSINT, exploits, some automated tasks and others.&lt;br&gt;
If you want to become a contributor, make a pull request or issue.&lt;br&gt;
Waiting for your feedback. Kudos&lt;br&gt;
Link to the repository: &lt;a href="https://github.com/medpaf/hawk"&gt;https://github.com/medpaf/hawk&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>🤔 False, true, "Falsy" &amp; "Truthy" 👀</title>
      <author>Luís Von Muller</author>
      <pubDate>Wed, 17 Nov 2021 21:07:39 +0000</pubDate>
      <link>https://dev.to/luisvonmuller/false-true-falsy-truthy-47n9</link>
      <guid>https://dev.to/luisvonmuller/false-true-falsy-truthy-47n9</guid>
      <description>&lt;h1&gt;
  &lt;a href="#false-true-falsy-amp-truthy"&gt;
  &lt;/a&gt;
  🤔 False, true, "Falsy" &amp;amp; "Truthy" 👀
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#entendendo-um-pouco-do-contexto-geral"&gt;
  &lt;/a&gt;
  ⚙️ Entendendo um pouco do contexto Geral.
&lt;/h2&gt;

&lt;p&gt;Na computação temos um Tipo chamado: "Booleano". O que é: Booleano? &lt;/p&gt;

&lt;p&gt;Aqui estamos falando tipo primitivo do TypeScript: "Boolean". (⊙.☉)7&lt;/p&gt;

&lt;p&gt;Ser do tipo (Booleano) significa que algum valor, isto é, alguma variável, constante ou qualquer coisa que possuí em si um valor desse &lt;strong&gt;tipo&lt;/strong&gt; pode ser: &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Verdadeiro&lt;/strong&gt; (Isto é, &lt;em&gt;true&lt;/em&gt;) 👍&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Falso&lt;/strong&gt; (Isto é, &lt;em&gt;false&lt;/em&gt;) 👎&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;O nome "Booleano" (&lt;em&gt;Boolean&lt;/em&gt; em &lt;strong&gt;TypeScript&lt;/strong&gt;) faz uma homenagem ao Matemático &amp;amp; Filósofo &lt;strong&gt;George Boole&lt;/strong&gt;, ele "construiu" a base algébrica necessária para a criação Lógica Algébrica que podemos usar para: Operações lógicas &lt;strong&gt;(em booleanos)&lt;/strong&gt; como &lt;a href="https://pt.wikipedia.org/wiki/Conjun%C3%A7%C3%A3o_l%C3%B3gica"&gt;conjunção&lt;/a&gt; (&lt;strong&gt;||&lt;/strong&gt;), &lt;a href="https://pt.wikipedia.org/wiki/Disjun%C3%A7%C3%A3o_l%C3%B3gica"&gt;disjunção&lt;/a&gt; &lt;strong&gt;(&amp;amp;&amp;amp;)&lt;/strong&gt;, &lt;a href="https://pt.wikipedia.org/wiki/Disjun%C3%A7%C3%A3o_exclusiva"&gt;disjunção exclusiva&lt;/a&gt; (&lt;strong&gt;(p &amp;amp;&amp;amp; !q) || (!p &amp;amp;&amp;amp; q)&lt;/strong&gt;), &lt;a href="https://pt.wikipedia.org/wiki/Equival%C3%AAncia_l%C3%B3gica"&gt;equivalência lógica&lt;/a&gt; (&lt;strong&gt;==&lt;/strong&gt;) e &lt;a href="https://pt.wikipedia.org/wiki/Nega%C3%A7%C3%A3o"&gt;negação&lt;/a&gt; &lt;strong&gt;(!)&lt;/strong&gt;, que correspondem a algumas das operações da &lt;a href="https://pt.wikipedia.org/wiki/%C3%81lgebra_booleana"&gt;álgebra booliana&lt;/a&gt; (É a parte da do conceito da &lt;strong&gt;Matemática Discreta&lt;/strong&gt;). &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fornecendo-um-exemplo-b%C3%A1sico-%D4%85%E2%89%96%E2%89%96%D4%85"&gt;
  &lt;/a&gt;
  Fornecendo um exemplo básico ԅ(≖‿≖ԅ):
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** Vamos iniciar uma constante "Booleana" verdadeira */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="cm"&gt;/** Vamos iniciar uma constante "Booleana" falsa através da inversão do seu valor boleano com o operador "!" */&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;constanteFalsa&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constanteFalsa&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ambas as constantes são verdadeiras. ヽ(´▽`)/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;constanteFalsa&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;constanteVerdadeira&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Ao menos uma das constantes são falsas ( ಠ ʖ̯ ಠ )&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;warn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Nenhuma constante é verdadeira (҂◡_◡)&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#thinking-por-que-existe-falsy-ou-truthy"&gt;
  &lt;/a&gt;
  🤔 Por que existe: "Falsy" ou "Truthy"?
&lt;/h2&gt;

&lt;p&gt;Na &lt;a href="https://pt.wikipedia.org/wiki/L%C3%B3gica"&gt;lógica&lt;/a&gt;, afirmações &lt;strong&gt;diferentes&lt;/strong&gt; são &lt;strong&gt;logicamente equivalentes&lt;/strong&gt; se tiverem o mesmo conteúdo lógico. Isto é, se elas tiverem o mesmo &lt;a href="https://pt.wikipedia.org/wiki/Valor_de_verdade"&gt;valor de verdade&lt;/a&gt; em todos os modelos. Também conhecido por "Tautologia", isto é, algo que é correspondente em termos lógicos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#thumbsdown-o-que-%C3%A9-o-falsy-ou-err%C3%B4neofalse%C3%A1veis-"&gt;
  &lt;/a&gt;
  👎 O que é o "Falsy" ou _Errôneo/_Falseáveis ? 
&lt;/h2&gt;

&lt;p&gt;*&lt;em&gt;**&lt;/em&gt;➡️ &lt;em&gt;Falsy&lt;/em&gt;&lt;em&gt;&lt;/em&gt; é um *"&lt;strong&gt;_&lt;/strong&gt;pseudo tipo*&lt;em&gt;_&lt;/em&gt;&lt;em&gt;"  **logicamente equivalente ao **Valor Primitivo  *&lt;/em&gt;&lt;strong&gt;false&lt;/strong&gt; para o &lt;strong&gt;JavaSript.&lt;/strong&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#os-valores-que-seriam-aceitos-como-false-seriam"&gt;
  &lt;/a&gt;
  Os valores que seriam aceitos como &lt;strong&gt;false&lt;/strong&gt; seriam: 
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;0&lt;/strong&gt; - (O valor numérico Zero).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;0n&lt;/strong&gt; - (Um inteiro de GIGANTE cujo valor numérico é zero - um &lt;em&gt;&lt;strong&gt;bigInt&lt;/strong&gt;&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;null&lt;/strong&gt; - (O tipo primitivo &lt;strong&gt;Nulo&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;undefined&lt;/strong&gt; - (Algo que não possui valor atribuído, isto é, &lt;strong&gt;indefinido&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;NaN&lt;/strong&gt; (&lt;em&gt;&lt;strong&gt;Not-a-Number&lt;/strong&gt;&lt;/em&gt;** -** algo que não é um número &lt;strong&gt;pertencente&lt;/strong&gt; ao conjuntos dos reais)&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;"" ou '' ** (Uma cadeia de **caracteres vazia&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#segue-a-prova-do-supracitado-%E2%98%9E%EF%BE%9F%E3%83%AE%EF%BE%9F%E2%98%9E"&gt;
  &lt;/a&gt;
  Segue a  prova do supracitado (☞ﾟヮﾟ)☞ 
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inteiroDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;floatDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;inteiroGrandeComValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;bigint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;BigInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;nulo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;indefinido&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;naoNumero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kc"&gt;NaN&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//Sim, o tipo de NaN é "numero" ¯\_(ツ)_/¯&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cadeiaDeCaracteresVazia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;valoresInexatos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;inteiroDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;floatDeValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;inteiroGrandeComValorNumericoZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;nulo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;indefinido&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;naoNumero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cadeiaDeCaracteresVazia&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;valoresInexatos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Verídico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Errôneo/Falseáveis&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#o-que-%C3%A9-truthy-ou-ver%C3%ADdico"&gt;
  &lt;/a&gt;
   O que é "Truthy" ou Verídico? 
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Truthy&lt;/strong&gt; é um &lt;strong&gt;"&lt;/strong&gt;&lt;em&gt;&lt;strong&gt;pseudo tipo&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt;"  *&lt;em&gt;logicamente equivalente ao **Valor Primitivo  *&lt;/em&gt;&lt;/strong&gt;true*&lt;em&gt; para o &lt;/em&gt;&lt;em&gt;JavaSript.&lt;/em&gt;*&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#os-valores-que-seriam-aceitos-como-true-seriam"&gt;
  &lt;/a&gt;
  Os valores que seriam aceitos como &lt;strong&gt;true&lt;/strong&gt; seriam: 
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;'0'&lt;/strong&gt; ou &lt;strong&gt;"0"&lt;/strong&gt; - (Uma &lt;strong&gt;cadeia de caracteres&lt;/strong&gt; com o Valor numérico &lt;strong&gt;zero&lt;/strong&gt; dentro dela).&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;'false'&lt;/strong&gt; ou &lt;strong&gt;"false"&lt;/strong&gt; (...) - (Uma cadeira de caracteres com a palavra &lt;em&gt;&lt;strong&gt;"false"&lt;/strong&gt;).&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;[]&lt;/strong&gt;_ - &lt;em&gt;(Um** vetor &lt;strong&gt;(&lt;/strong&gt;"**_array&lt;/em&gt;&lt;strong&gt;" **vazio), isto é,&lt;/strong&gt; **sem elementos presentes dentro dele)&lt;/li&gt;
&lt;li&gt;{} - (Um &lt;strong&gt;objeto&lt;/strong&gt; sem nenhuma propriedade.)&lt;/li&gt;
&lt;li&gt;()=&amp;gt;{} - (Uma definição de função anônima ou não.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#segue-a-prova-do-supracitado-%E2%98%9E%EF%BE%9F%E3%83%AE%EF%BE%9F%E2%98%9E"&gt;
  &lt;/a&gt;
  Segue a  prova do supracitado (☞ﾟヮﾟ)☞ 
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cadeiaDeCaracteresComZero&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;0&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;cadeiaDeCarcteresComAPalavraFalse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;false&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;vetorVazio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;funcaoNomeada&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;Function&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//vazia&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;valoresVeridicos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;unknown&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="nx"&gt;cadeiaDeCaracteresComZero&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cadeiaDeCarcteresComAPalavraFalse&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;vetorVazio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;funcaoNomeada&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="nx"&gt;valoresVeridicos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;valor&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Verídico&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Errôneo/Falseado&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Angular: Slice and *ngIf for Conditional Ellipsis / Tooltip on Data</title>
      <author>Ria Pacheco</author>
      <pubDate>Wed, 17 Nov 2021 21:02:15 +0000</pubDate>
      <link>https://dev.to/riapacheco/angular-slice-and-ngif-for-conditional-ellipsis-tooltip-on-data-2d4h</link>
      <guid>https://dev.to/riapacheco/angular-slice-and-ngif-for-conditional-ellipsis-tooltip-on-data-2d4h</guid>
      <description>&lt;h3&gt;
  &lt;a href="#problem-conditional-ellipsis-without-css"&gt;
  &lt;/a&gt;
  Problem: Conditional Ellipsis without CSS
&lt;/h3&gt;

&lt;p&gt;I want to add an ellipsis to data that's brought in from a service without having to use CSS' &lt;code&gt;text-overflow: ellipsis&lt;/code&gt; feature, since it's unreliable and could break overtime if not monitored during refactoring.&lt;/p&gt;




&lt;h1&gt;
  &lt;a href="#using-raw-slice-pipe-endraw-"&gt;
  &lt;/a&gt;
  Using &lt;code&gt;Slice Pipe&lt;/code&gt;
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#determine-character-max-overflow-limit"&gt;
  &lt;/a&gt;
  Determine character max overflow limit
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Determine max overflow by number of characters (instead of max-width)&lt;/li&gt;
&lt;li&gt;Example: max overflow characters 20 (inclusive, aka 20 or more)&lt;/li&gt;
&lt;li&gt;I use &lt;code&gt;slice&lt;/code&gt; pipe where you add the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; of the slice to the interpolated string
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ item.name | slice: 0 : 20 }}
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#add-ellipsis-as-conditional-raw-span-endraw-"&gt;
  &lt;/a&gt;
  Add ellipsis as conditional &lt;code&gt;span&lt;/code&gt;
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Conditional span is based on data's &lt;code&gt;length&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ item.name | slice:0:20 }}&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"item.name.length &amp;gt;= 20"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h4&gt;
  &lt;a href="#if-problems-with-string-vs-object"&gt;
  &lt;/a&gt;
  If Problems with String vs. Object
&lt;/h4&gt;

&lt;p&gt;Sometimes typescript or certain db packages make this harder by making it so &lt;code&gt;strings&lt;/code&gt; are but &lt;em&gt;aren't&lt;/em&gt; considered strings. Solve this programmatically, by saving a new &lt;code&gt;boolean&lt;/code&gt; value, when the data is either stored or updated:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// Component&lt;/span&gt;
&lt;span class="nx"&gt;onSave&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;Iitem&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;maxChar&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;dataService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;item&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Thus, can then apply in template as&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"item.maxChar == true"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h1&gt;
  &lt;a href="#show-tooltip-conditionally"&gt;
  &lt;/a&gt;
  Show Tooltip Conditionally
&lt;/h1&gt;

&lt;p&gt;I want the tooltip to appear when this &lt;code&gt;maxChar&lt;/code&gt; is true; but to remove itself from the DOM when no longer hovering over the item.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--Template--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt;
  &lt;span class="na"&gt;*ngFor=&lt;/span&gt;&lt;span class="s"&gt;"let item of items"&lt;/span&gt;
  &lt;span class="na"&gt;(mouseover)=&lt;/span&gt;&lt;span class="s"&gt;"(item.name.length &amp;gt;= 20) ? onHover($event, item.name) : ''"&lt;/span&gt;
  &lt;span class="na"&gt;(mouseout)=&lt;/span&gt;&lt;span class="s"&gt;"showsTooltip ? (showsTooltip = !showsTooltip) : ''"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ item.name | slice:0:20 }}&lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"item.name.length &amp;gt;= 20"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;...&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;a&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!--Tooltip--&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
  &lt;span class="na"&gt;*ngIf=&lt;/span&gt;&lt;span class="s"&gt;"showsTooltip"&lt;/span&gt;
  &lt;span class="na"&gt;[style.top]=&lt;/span&gt;&lt;span class="s"&gt;"tooltipTopY"&lt;/span&gt;
  &lt;span class="na"&gt;[style.left]=&lt;/span&gt;&lt;span class="s"&gt;"tooltipLeftX"&lt;/span&gt;
  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tooltip"&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  {{ tooltipText }}
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#component"&gt;
  &lt;/a&gt;
  Component
&lt;/h3&gt;

&lt;p&gt;Catches coordinates of event and binds them&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;SomeComponent&lt;/span&gt; &lt;span class="k"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;OnInit&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Properties&lt;/span&gt;
  &lt;span class="nx"&gt;showsTooltip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// show or not&lt;/span&gt;
  &lt;span class="nx"&gt;tooltipText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// text to be binded&lt;/span&gt;
  &lt;span class="nx"&gt;tooltipTopY&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;tooltipLeftX&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Methods&lt;/span&gt;
  &lt;span class="nx"&gt;onHover&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;itemName&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;showsTooltip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipTopY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientY&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tooltipLeftX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;clientX&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;px&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>angular</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Abstract Syntax Trees: They're Actually Used Everywhere -- But What Are They?</title>
      <author>aruna-x</author>
      <pubDate>Wed, 17 Nov 2021 21:02:00 +0000</pubDate>
      <link>https://dev.to/aruna/abstract-syntax-trees-theyre-used-everywhere-but-what-are-they-jh6</link>
      <guid>https://dev.to/aruna/abstract-syntax-trees-theyre-used-everywhere-but-what-are-they-jh6</guid>
      <description>&lt;p&gt;Isn't it wonderful how &lt;a href="https://code.visualstudio.com/"&gt;VS Code&lt;/a&gt; grays out obsolete lines of code? &lt;em&gt;Oops, my return statement is on line 3. Line 4 won't run...&lt;/em&gt; But I haven't called the function yet. So how in the world does VS Code know which lines of code won't be used in the future, when the code finally does run?&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tApNn2G6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n37rbnd7xpc7iyf3kcxx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tApNn2G6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/n37rbnd7xpc7iyf3kcxx.png" alt="Code snippet of a function in VS Code with line 4 grayed out" width="556" height="225"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If we have a conditional statement, VS Code accurately evaluates the potential for us to hit the code outside of it:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--duocNN_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nmqkgsugr8stdumtd9v.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--duocNN_X--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5nmqkgsugr8stdumtd9v.png" alt="Code snippet showing that VS Code knows that an if statement with an unknown conditional might not run" width="592" height="314"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;bool&lt;/code&gt; could turn out to be false after all. But if we change the condition to &lt;code&gt;true&lt;/code&gt; VS Code knows we will &lt;em&gt;always&lt;/em&gt; run that block and (if there is an inevitable return inside) never reach the final line:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TdGq6zDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czrc9sgdf3ibbmgz9pxl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TdGq6zDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/czrc9sgdf3ibbmgz9pxl.png" alt="Code snippet showing that VS Code knows that an if statement with a true conditional will always run" width="586" height="315"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It's almost as if VS Code has the ability to understand the &lt;em&gt;semantics&lt;/em&gt; of code. But under the hood VS Code uses &lt;strong&gt;code&lt;/strong&gt; to do this! How?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#enter-abstract-syntax-trees-asts"&gt;
  &lt;/a&gt;
  Enter: Abstract Syntax Trees (ASTs)
&lt;/h2&gt;

&lt;p&gt;An AST is a data structure that encodes abstract information about a piece of code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--RV5yTobJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99b0l2z3twokjltcegwa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RV5yTobJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99b0l2z3twokjltcegwa.png" alt="an AST object of the above code" width="880" height="485"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This one is specifically for the above sample code declaring &lt;code&gt;function foo(bool)&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;An AST is a "tree", which is a kind of graph. And a graph is a very useful type of data structure, ubiquitous in software engineering. In order to understand ASTs we have to understand graphs. &lt;em&gt;(You can also skip ahead to learn more about &lt;a href="#ASTs"&gt;ASTs&lt;/a&gt; or look at these tools to &lt;a href="#tools"&gt;make and use an AST&lt;/a&gt; yourself.)&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-graphs-work"&gt;
  &lt;/a&gt;
  How Do Graphs Work?
&lt;/h2&gt;

&lt;p&gt;Graphs consist of "nodes" and "edges", and can be represented by (often nested) objects or arrays. A graph can mix objects and arrays as well, nesting one kind within the other to whatever degree of complexity.&lt;/p&gt;

&lt;p&gt;Each node and edge can contain information. You can travel from one node to another via the edge between them. Edges have direction as well. Here's a simple graph connecting node A to node B:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JJochMQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmek3jl2ome6q4u6di4w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JJochMQz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jmek3jl2ome6q4u6di4w.png" alt="Simple graph showing A to B" width="734" height="274"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At a very basic level, if you were to write this in Javascript, it could look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ ["A", ["B"] ], [ "B", [] ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ 
   A: { value: data_set1, children: ["B"] }, 
   B: { value: data_set2, children: [] }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can flip the direction&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1bJ9WlaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h2ybtaok1zyly9arp8g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1bJ9WlaY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8h2ybtaok1zyly9arp8g.png" alt="Simple graph showing B to A" width="724" height="256"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resulting in code like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ ["A", [] ], [ "B", ["A"] ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ 
   A: { value: data_set1, children: [] }, 
   B: { value: data_set2, children: ["A"] }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And you can make the edge bidirectional, usually represented with a plain line with no arrows.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VCVfI_0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyfw9nvrc10ygznonowq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VCVfI_0J--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eyfw9nvrc10ygznonowq.png" alt="Simple graph showing a bidirectional relationship between A and B" width="718" height="230"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With code that does something like this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ ["A", ["B"] ], [ "B", ["A"] ] ]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;or this&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{ 
   A: { value: data_set1, children: ["B"] }, 
   B: { value: data_set2, children: ["A"] }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These are simple examples, and in practice graphs can encode large amounts of data. Google displays search results with the help of a &lt;a href="https://en.wikipedia.org/wiki/PageRank"&gt;page rank&lt;/a&gt; graph, for example. This is a simplified representation of one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--aaWSE34i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9hqfj7k3f4cw6dt6x3u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--aaWSE34i--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d9hqfj7k3f4cw6dt6x3u.png" alt="Simplified rank graph example" width="880" height="710"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Graphs can also have certain constraints. We can say: "The graph will start with exactly one node and every node except the first will have exactly one parent. Nodes can have multiple children though."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7FK5rZZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4gzvq8vsglgz9d5yw0q.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7FK5rZZi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d4gzvq8vsglgz9d5yw0q.png" alt="image of a tree data structure" width="880" height="1003"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an example of one kind of tree. In general, a tree branches out. Every node after the first (root node) has exactly one parent. Trees are hierarchical and do not contain loops. &lt;em&gt;(Graphs can have loops, and do not necessarily have a root node.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But for now we'll focus on trees. Because when we build an AST, we take abstract syntactical data from code and encode it into a tree.&lt;br&gt;
&lt;span id="ASTs"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#ast-design-standards-amp-traversal-functions"&gt;
  &lt;/a&gt;
  AST Design Standards &amp;amp; Traversal Functions
&lt;/h2&gt;

&lt;p&gt;Because ASTs are often used in the process of compiling code (which happens &lt;em&gt;all&lt;/em&gt; the time - every time you try to run &lt;em&gt;any&lt;/em&gt; code), AST design standards are fairly robust. Compilers (and interpreters) essentially take the code we write (in Javascript, Python, Ruby, or C++) and turn it into machine-language instructions that a computer's CPU can run.&lt;/p&gt;

&lt;p&gt;AST design standards include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;variables (and their declaration locations in the source code) must be preserved&lt;/li&gt;
&lt;li&gt;the order in which statements get executed is well defined and preserved&lt;/li&gt;
&lt;li&gt;in the case of binary operations, left and right positioning is preserved&lt;/li&gt;
&lt;li&gt;identifiers and their values are stored&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It should be possible to &lt;em&gt;unparse&lt;/em&gt; an AST object into something very similar to its original code, using a code generator. And the resulting code should definitely &lt;em&gt;function&lt;/em&gt; exactly the same as the original code.&lt;/p&gt;

&lt;p&gt;For example, using an AST like this ...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BMHJLBzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqij99vqzf9ww5193cks.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BMHJLBzd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uqij99vqzf9ww5193cks.png" alt="representation of generalized AST as graph showing the kinds of information each node and edge contain" width="880" height="993"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We could rebuild code that would look something like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function euclid(a,b) {
   while (b ≠ 0) {
      if (a &amp;gt; b) { a = a - b; } 
      else { b = b - a; }
   } 
   return a;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So we can take a piece of code, turn it into an AST, and eventually turn that back into code. But wait ... there's more: The function we use to step through the AST (called an AST traversal function) is intelligent enough to make sense of the semantic encodings and help us do useful things with that information. &lt;/p&gt;

&lt;p&gt;We can use an AST traversal function to walk along the structure to discover "dead branches" (pieces of code that will never run), syntax errors (e.g. missing curly braces), or untyped variables (as in TypeScript).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tree-shaking-amp-more"&gt;
  &lt;/a&gt;
  Tree Shaking &amp;amp; More
&lt;/h2&gt;

&lt;p&gt;Tree shaking refers to dead-code elimination in Javascript. In order to tree shake, we would combine the use of an AST and an AST traversal function to find which "branches" of code are "dead". This is how VS Code grays out unused lines of code. Tree shaking then eliminates those unused lines of code, for a cleaner, leaner code base.&lt;/p&gt;

&lt;p&gt;When a code base is sufficiently large, dead-code elimination is necessary. Dead ends become dead weight, potentially causing worse performance if the product is shipped and bloated code in much need of pruning. &lt;em&gt;(Amusingly, that's not a pun. That's what they call it! I came across many articles on tree pruning in writing this post though.)&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;There's incentive on both ends, as &lt;em&gt;wet&lt;/em&gt; code is more confusing for developers as well.&lt;/p&gt;

&lt;p&gt;The same traversal function can find and flag errors (e.g. missing close bracket, or missing function name) in code editors. It can also, interestingly, help us inject our own code into a given chunk of code according to preset rules if we wanted. (More about this in the follow up below.)&lt;br&gt;
&lt;span id="tools"&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#tools-to-make-and-use-an-ast"&gt;
  &lt;/a&gt;
  Tools To Make And Use An AST
&lt;/h2&gt;

&lt;p&gt;Create an AST: &lt;a href="https://esprima.org/"&gt;Esprima&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Traverse that AST and replace or inject code: &lt;a href="https://github.com/estools/estraverse"&gt;Extraverse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Unparse the modified AST back into Javascript: &lt;a href="https://github.com/estools/escodegen"&gt;Escodegen&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#asts-vs-cpts"&gt;
  &lt;/a&gt;
  ASTs vs CPTs
&lt;/h2&gt;

&lt;p&gt;I mentioned earlier that ASTs are used in the process of compiling or interpreting. There is an alternative: Concrete Parse Tree. Unlike ASTs, CPTs include much more granular (potentially unnecessary) information. ASTs can omit some syntactic information like grouping parentheses, because of the way in which the structure of an AST already encodes that information. &lt;/p&gt;

&lt;p&gt;CSTs are much bigger than ASTs. But the tradeoff is that they can aid in more &lt;em&gt;efficient&lt;/em&gt; compiling. In practice, both are used.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#follow-up"&gt;
  &lt;/a&gt;
  Follow Up
&lt;/h2&gt;

&lt;p&gt;My fascination with ASTs was inspired by an app I'm working on: a Big O (time complexity) calculator.&lt;/p&gt;

&lt;p&gt;In my research on Big O approximation, I found that most tools calculate the &lt;strong&gt;amount of time&lt;/strong&gt; a machine takes to run a function on different sized data sets. They use the resulting amounts of time to determine whether the rate of growth of time is sublinear, linear, exponential, etc.&lt;/p&gt;

&lt;p&gt;I hope to create a tool that will count the &lt;strong&gt;number of actions&lt;/strong&gt; taken (rather than the amount of time for a specific machine), so that for any snippet of code I can point to the most costly lines and indicate how many times they ran. This can help students learn Big O with a more concrete understanding of what's happening with their code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#the-halting-problem"&gt;
  &lt;/a&gt;
  The Halting Problem
&lt;/h3&gt;

&lt;p&gt;Slightly outside the scope of this article, but cool enough to include: In 1936, Alan Turing (pictured at age 16, below) proved that it is impossible to write code that can examine another piece of code and its input, and tell whether or not it will ever terminate. This is called the &lt;a href="https://en.wikipedia.org/wiki/Halting_problem"&gt;halting problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--uf47Y9jO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve3gu6l2mnpib5gsobex.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uf47Y9jO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ve3gu6l2mnpib5gsobex.png" alt="Alan Turing, age 16" width="880" height="753"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For this reason, code entered into the Big O calculator can run too long in an infinite loop, and lock up a user's computer. I plan to bake in a fail-safe for that.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#well-see-whats-possible"&gt;
  &lt;/a&gt;
  We'll See What's Possible
&lt;/h3&gt;

&lt;p&gt;I'd eventually like to expand the project into a more comprehensive teaching tool. For now, I've scoped the project to the calculator to see if it's viable.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>vscode</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title> 🇧🇷 Guia de Estilos para TypeScript 🎨</title>
      <author>Luís Von Muller</author>
      <pubDate>Wed, 17 Nov 2021 20:58:22 +0000</pubDate>
      <link>https://dev.to/luisvonmuller/guia-de-estilos-para-typescript-2ahb</link>
      <guid>https://dev.to/luisvonmuller/guia-de-estilos-para-typescript-2ahb</guid>
      <description>&lt;p&gt;🔥 Este é um &lt;strong&gt;Guia não oficial&lt;/strong&gt; e você pode opinar através do repositório de GitHub para juntos chegarmos a melhor definição do Ideal! &lt;strong&gt;Vamos colaborar? 💪&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#navega%C3%A7%C3%A3o-por-t%C3%B3pico-facilitada"&gt;
  &lt;/a&gt;
  👉 Navegação por tópico facilitada!
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="//./#variaveis-e-funcoes"&gt;⭐️ Variáveis &amp;amp; Funções&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#class"&gt;📦 Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#interfaces"&gt;🔌 Interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#tipos"&gt;🌟 Tipos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#namespaces"&gt;😳 Namespaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#enum"&gt;🔢 Enum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="//./#null-vs-undefined"&gt;📭 null vs  😱 undefined&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#formatacao"&gt;📑 Formatação&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#sobre-aspas..."&gt;🤔 Aspas simples vs Aspas Duplas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="//./#ponto-and-virgula"&gt;⚙️ Uso de ponto e vírgula ao final de linhas &lt;strong&gt;" ; "&lt;/strong&gt;&lt;/a&gt;****&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#sugestao-para-boa-nomeacao-de-arquivos."&gt;📂 Uma sugestão para uma boa nomeação de Arquivos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#tipo-ou-interface"&gt;🤨 Tipo vs Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#anotacao-do-tipo-array"&gt;👯‍♀️ Anotação de Tipos para Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="//./#comparadores-e"&gt;⚠️ Comparadores, "==" vs "==="&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%EF%B8%8F%E2%80%8B-vari%C3%A1veis-e-fun%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  ⭐️​ Variáveis e Funções:
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para nomear variáveis e funções&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;FulanoVariavel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aqui está errado.. ( ఠ ͟ʖ ఠ )&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;CiclanoFuncao&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fulanoVariavel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Aqui está daora! (✿◠‿◠)&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ciclanoFuncao&lt;/span&gt;&lt;span class="p"&gt;(){}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#class"&gt;
  &lt;/a&gt;
  📦 Class
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;PascalCase&lt;/strong&gt;&lt;/em&gt; para nomear suas classes! (Ou use programação funcional 👀)&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para as propriedades e métodos de suas classes! 🔥&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
  Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;DeTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nx"&gt;Ciclano&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;deTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="nx"&gt;ciclano&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#%E2%80%8B-interfaces"&gt;
  &lt;/a&gt;
  🔌​ Interfaces:
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;PascalCase&lt;/strong&gt;&lt;/em&gt; para nomear a Interface ⚙️&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para nomear seus membros 🥰&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Não use o Prefixo "I", exemplo: IfuncaoFulano... 😡 &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;IFulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;DeTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;interface&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="nl"&gt;deTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#tipos"&gt;
  &lt;/a&gt;
  🌟 Tipos 
&lt;/h2&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;PascalCase&lt;/strong&gt;&lt;/em&gt; para nomear o seu Tipo ⚙️&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;&lt;strong&gt;camelCase&lt;/strong&gt;&lt;/em&gt; para nomear as propriedades do seu tipo! 🥰&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
   Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;DeTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;Fulano&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;deTal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#namespaces"&gt;
  &lt;/a&gt;
  😳 Namespaces 
&lt;/h2&gt;

&lt;p&gt;Use*&lt;em&gt;&lt;code&gt;PascalCase&lt;/code&gt;&lt;/em&gt;*&lt;code&gt;para nomear os "Namespaces" - ⭐️ Padrão do time do TS.&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
  Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;fulanoDeTal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;FulanoDeTal&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#enum"&gt;
  &lt;/a&gt;
  🔢 Enum 
&lt;/h2&gt;

&lt;p&gt;Use_&lt;strong&gt;&lt;code&gt;PascalCase&lt;/code&gt;&lt;/strong&gt;_&lt;code&gt;para nomear os Enums.&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;em&gt;&lt;strong&gt;&lt;code&gt;PascalCase&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;code&gt;para nomear seus subtipos/valores.&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
  &lt;a href="#m%C3%A1-nomenclatura"&gt;
  &lt;/a&gt;
  Má nomenclatura 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;jogodoBicho&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;avestruz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;borboleta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;cachorro&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Não há endosso do Jogo do Bicho. Apenas é algo contextual que todo Brasileiro entenderia.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#boa-nomenclatura-%E2%80%8B"&gt;
  &lt;/a&gt;
  Boa nomenclatura ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kr"&gt;enum&lt;/span&gt; &lt;span class="nx"&gt;JogoDoBicho&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;Avestruz&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Borboleta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nx"&gt;Cachorro&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// Não há endosso do Jogo do Bicho. Apenas é algo contextual que todo Brasileiro entenderia.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#null-vs-undefined"&gt;
  &lt;/a&gt;
  😅 Null vs Undefined 👀
&lt;/h2&gt;

&lt;p&gt;Tente não usar nenhum deles para indisponibilidade explícita! ⭐️&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#mal-caso-de-uso"&gt;
  &lt;/a&gt;
  Mal caso de uso 🚫
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pontos&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#bom-caso-de-uso-%E2%80%8B"&gt;
  &lt;/a&gt;
  Bom caso de uso  ✅​ 
&lt;/h4&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;pontos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nl"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;?:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;777&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;//  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Em suma: Precisa informar que uma propriedade é pode ser "indefinida"? Use o operador "?" antecedendo o seu tipo! 🥰&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#retorno-de-fun%C3%A7%C3%B5es"&gt;
  &lt;/a&gt;
  👉 Retorno de funções? 🤔
&lt;/h3&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;/p&gt;

&lt;p&gt;&lt;code&gt;typescript&lt;br&gt;
return null;&lt;br&gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Por quê? Sugiro você consultar a página Sobre False, True, Truthy &amp;amp; Falsy. 🥰&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#%E2%80%8B-callbacks"&gt;
  &lt;/a&gt;
  🤨​ Callbacks?
&lt;/h3&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;null&lt;/strong&gt;&lt;/em&gt; quando for parte da API ou de sua convenção usar. &lt;/p&gt;

&lt;p&gt;É quase em um consenso em Node.js, por exemplo: &lt;strong&gt;&lt;code&gt;error&lt;/code&gt;&lt;/strong&gt; é &lt;strong&gt;&lt;code&gt;null&lt;/code&gt;&lt;/strong&gt;&lt;code&gt;em chamadas do&lt;/code&gt; &lt;em&gt;&lt;strong&gt;NodeBack.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callbackDeAlgo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="nx"&gt;callbackDeAlgo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#e-como-verificar-isso-a%C3%AD"&gt;
  &lt;/a&gt;
  E como verificar isso aí? 😅
&lt;/h3&gt;

&lt;p&gt;Cheque por  "Truthy" em objetos sendo &lt;strong&gt;null&lt;/strong&gt; ou &lt;strong&gt;undefined&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// e se for undefined? &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// é Válido tanto para undefined quanto para o null&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#um-exemplo-um-pouco-mais-completo-sobre-verifica%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  👉 Um exemplo um pouco mais completo sobre verificação 🔥
&lt;/h3&gt;

&lt;p&gt;Use "==" null ou "!=" null. Não use "===" ou "!==" para checar por null ou undefined quando querendo verificar tipos primitivos porque funciona apenas nos tipos primitivos supracitados e não para valores "Falseáveis", como por exemplo: 0, false, etc. &lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Não garante que seja apenas nullo. Pode ser um valor Falseável.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Bom caso de uso  ✅​ &lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// Garante que é um valor de tipo primitivo (ou seja, null ou undefined mas não falsy).&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#formata%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  📑 Formatação
&lt;/h2&gt;

&lt;p&gt;O Compilador do &lt;em&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/em&gt; já fornece um bom serviço de formatação estrutural, o que já é bom o suficiente para diminuir o esforço mental do desenvolvedor (ou do time). Todavia, você também pode usar o &lt;strong&gt;tsfmt&lt;/strong&gt; no terminal (linha de comando para formatar seu código) - e também está disponível como plugin para várias &lt;strong&gt;IDES (vscode, etc).&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;👉 Só um exemplo que eu acho pertinente, ou melhor, uma boa prática:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;fulano&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Ciclano&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;No caso, usamos um espaço depois da definição do tipo... &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
let variavel:(espaço)tipo(espaço)=(espaço)valor(ponto e virgula)
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#sobre-aspas"&gt;
  &lt;/a&gt;
  💬 Sobre Aspas...
&lt;/h2&gt;

&lt;p&gt;Prefira usar aspas simples (single quotes) ao invés de aspas duplas.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Times grandes que usam JS/TS o fazem. É uma convenção quasae que de mercado, também é o sugerido pelo time do "Prettier".
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;nomeDoSujeito&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Luís Von Müller&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Todavia, muita vezes em inglês precisamos usar o a single quote para conjugar um verbo: "I'm"&lt;/p&gt;

&lt;p&gt;Se a aspas simples não lhe cabe. Use então "`" &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Faça o uso do string template do JS ao invés de concatenar variáveis strings através var + "..."  + var2.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
let nomeDoSujeito: string = 'Luís Von Müller';&lt;br&gt;
console.log(&lt;/code&gt;Quem escreveu? ${nomeDoSujeito}&lt;code&gt;)&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sobre outras coisas como usar "tabs" ou espaço. O sugerido para JS é 2 espaços (e muitas companias como Facebook, Airbnb, google seguem esse padrão. Mas o time do TS usa 4 e o do VScode também 😅. Isso é variável e de gosto muito mais pessoal ou convenção própria e do teu time 🥰&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Mas eu uso tabs configuradas como 4 espaços)&lt;/em&gt; 🤗&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8B-ponto-amp-v%C3%ADrgula"&gt;
  &lt;/a&gt;
  ⚙️​ Ponto &amp;amp; Vírgula;
&lt;/h2&gt;

&lt;p&gt;Use o ponto e vírgula, por quê? &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pontos e vírgulas explícitos ajudam os identadores (tsfmt/prettier) a identificar e "estruturar" seu código. &lt;/li&gt;
&lt;li&gt;A falta de ponto e vírgula pode ser incômodo para novos desenvolvedores em TS. Já que a maioria das linguagens o implementa. (Houve um debate sobre como isso pode ser "incomodo" para novos desenvolvedores e outros. &lt;a href="https://github.com/tc39/ecma262/pull/1062"&gt;https://github.com/tc39/ecma262/pull/1062&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Empresas grandes usam em suas implementações, ex: Google/Angular - Facebook/React - Microsoft/VScode...&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%F0%9F%97%82-sugest%C3%A3o-para-boa-nomea%C3%A7%C3%A3o-de-arquivos"&gt;
  &lt;/a&gt;
  🗂 Sugestão para boa nomeação de arquivos.
&lt;/h2&gt;

&lt;p&gt;Essa aqui é uma baita de uma discussão, depende muito do que ambiente você está e se você está seguindo o padrão de nomeação de um framework, ex: React para Componentes. Mas no geral o que a maioria dos times usa é o seguinte: &lt;/p&gt;

&lt;p&gt;Use &lt;em&gt;&lt;strong&gt;camelCase para nomear seus arquivos, exemplo:&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;utils.ts&lt;/li&gt;
&lt;li&gt;helpersDaora.ts&lt;/li&gt;
&lt;li&gt;mapeamentoEndPointsDaApi.ts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8B-tipo-ou-interface"&gt;
  &lt;/a&gt;
  🤨​ Tipo ou Interface?
&lt;/h2&gt;

&lt;p&gt;Tipos devem ser usados para definir, adivinha? Tipos. Ou seja, se você tem uma função, ela retorna um valor. E esse valor possui um tipo. Mas essa função, também recebe algo. E esse algo, também são valores, ou seja, também podem ser tipos. Mas a "meta" ideia é que interface forneça uma interface 😅.  Eu acho que esse exemplo clarifica...&lt;/p&gt;

&lt;p&gt;Quando usar qual?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tipos: Precisa de União ou Interseção de tipos (e provavelmente você vai preferir Tipos também se quiser implementar alguns tipos de mapeamentos Genéricos de objetos).&lt;/li&gt;
&lt;li&gt;Interfaces: quando você precisa dizer que algo "implements" ou "extends", como por exemplo uma classe, para receber argumentos em uma função, ou até mesmo para quando você tá querendo criar alguma função extremamente composta bem maneira 👏. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;😅 Ou do jeito que você se sentir mais confortável e seguro para a implementação que está fazendo! 👀&lt;/p&gt;

&lt;p&gt;Aqui em baixo, eu poderia definir a função de outra maneira, optei por essa.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;`typescript&lt;br&gt;
/** Definimos a interface (ou contrato) de uso da função */&lt;br&gt;
interface DizerOi {&lt;br&gt;
    nome: string;&lt;br&gt;
    sobrenome?: string;&lt;br&gt;
}&lt;/p&gt;

&lt;p&gt;/**  Definimos que o tipo de retorno da função como uma Array de Strings */&lt;br&gt;
type DisseOi = string[];&lt;/p&gt;

&lt;p&gt;/** Vamos dizer oi 10x! e retornar um array! */&lt;br&gt;
const dizerOi = ({nome, sobrenome}: DizerOi): DisseOi =&amp;gt; {&lt;br&gt;
    return [...Array(10).keys()].map((key) =&amp;gt; {&lt;br&gt;
        return &lt;code&gt;Olá ${nome} ${sobrenome ?? ''}&lt;/code&gt;;&lt;br&gt;
    })&lt;br&gt;
} &lt;/p&gt;

&lt;p&gt;console.log(dizerOi({nome: 'Luís'}));&lt;br&gt;
`&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#anota%C3%A7%C3%A3o-do-tipo-array"&gt;
  &lt;/a&gt;
  👯‍♀️ Anotação do tipo Array 👯‍♂️
&lt;/h2&gt;

&lt;p&gt;Use tipo[] ao invés de Array&amp;lt;tipo&amp;gt;&lt;/p&gt;

&lt;p&gt;Mal caso de uso 🚫&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
let variosNumeros: Array&amp;lt;number&amp;gt; = [1,2,3,4,5,6,7];&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#bom-caso-de-uso-%E2%80%8B"&gt;
  &lt;/a&gt;
  Bom caso de uso  ✅​ 
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;code&gt;typescript&lt;br&gt;
let variosNumeros: number[] = [1,2,3,4,5,6,7];&lt;br&gt;
&lt;/code&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#%E2%80%8B-comparadores-e-"&gt;
  &lt;/a&gt;
  ⚠️​ Comparadores "===" e "=="
&lt;/h2&gt;

&lt;h4&gt;
  &lt;a href="#%E2%80%8B-relaxa-amigo-voc%C3%AA-t%C3%A1-usando-typescript-pode-usar-tranquilamente"&gt;
  &lt;/a&gt;
  😴​  Relaxa amigo! Você tá usando TypeScript. Pode usar "===" tranquilamente!
&lt;/h4&gt;

&lt;h3&gt;
  &lt;a href="#obrigado-por-ler-at%C3%A9-aqui"&gt;
  &lt;/a&gt;
  🥰 Obrigado por ler até aqui!
&lt;/h3&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>typescript</category>
      <category>braziliandevs</category>
    </item>
    <item>
      <title>Hacktoberfest 2021: through the eyes of a beginner</title>
      <author>aisha</author>
      <pubDate>Wed, 17 Nov 2021 20:41:11 +0000</pubDate>
      <link>https://dev.to/wasp_x/hacktoberfest-2021-through-the-eyes-of-a-beginner-16n4</link>
      <guid>https://dev.to/wasp_x/hacktoberfest-2021-through-the-eyes-of-a-beginner-16n4</guid>
      <description>&lt;p&gt;&lt;strong&gt;Hacktoberfest&lt;/strong&gt; is a month-long celebration of open source software run by DigitalOcean. It's a great opportunity for both beginners and professionals to get started with open-source contribution.&lt;/p&gt;

&lt;p&gt;I feel extremely proud to have successfully completed Hacktoberfest 2021 with a total of 5 merged pull requests on GitHub under my belt. This was also my first time contributing to open-source and it was an amazing experience. In this article, I'll be briefly talking my personal journey throughout Hacktoberfest, how to make your first contribution and also some do's and don'ts for beginners who want to start with open-source.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#hacktoberfest-through-the-eyes-of-a-beginner"&gt;
  &lt;/a&gt;
  Hacktoberfest through the eyes of a beginner
&lt;/h2&gt;

&lt;p&gt;Believe me when I say this, I had absolutely no knowledge about open-source or even GitHub before participating in Hacktoberfest. And my techstack consisted of only HTML/CSS and a little bit of JavaScript. I think it's safe to say that it was all a little overwhelming for a complete beginner like me.&lt;br&gt;
But with the guidance of the coordinators and the Hacktoberfest mentors and my peers, I was able to make my first contribution successfully.&lt;br&gt;
The requirements to complete Hacktoberfest is to submit a minimum of 4 valid pull requests in the month of October. If all pull requests get approved by maintainer and are merged into the repository, you will be eligible to receive the swag kit!&lt;br&gt;
I'd fixed 3 syntax errors and re-designed 2 contact forms as part of my contributions this year which is a total of 5 valid pr's and as promised, my limited edition t-shirt is on its way!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#dos-and-donts-while-making-your-first-contribution"&gt;
  &lt;/a&gt;
  Do's and Don'ts while making your first contribution
&lt;/h2&gt;

&lt;p&gt;Contributing to open-source can be confusing as a beginner. I personally made a lot of mistakes during Hacktoberfest 2021 even after doing so much research. Guess some things can only be learned from experience haha.&lt;br&gt;
Here is a list of some do's don'ts which might be helpful to future contributors:&lt;/p&gt;

&lt;ul&gt;DO's
&lt;li&gt; Search for good and active repositories. Look for issues to fix or add your own section of code.
&lt;/li&gt;
&lt;li&gt; Always go through the ReadMe file. Maintainers often explain the process of contribution to their repo in their readme.md file.
&lt;/li&gt;
&lt;li&gt; Search for repositories with the &lt;code&gt;Hacktoberfest-accepted&lt;/code&gt; tag. Henceforth, you can look for repositories labelled with &lt;code&gt;good-first-issue&lt;/code&gt; for some beginner-friendly projects to contribute to.
&lt;/li&gt;
&lt;li&gt;** Do not limit yourself to only 4 pull requests, and try to make as many contributions as you can **
&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;DON'TS
&lt;li&gt; Do not make contributions to repositories instructing to add simple one-line commits. These repositories often get rejected.
&lt;/li&gt;
&lt;li&gt; Do not make contributions to repositories accepting basic Data Structure codes. This goes against the rules of Hacktoberfest and your pull request will be marked invalid.
&lt;/li&gt;
&lt;li&gt; **Keep track of your profile on the official Hacktoberfest website. It's good practice to be updated about your progress.** 
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that was all about my experience in contributing to open-source as a complete beginner. Feel free to reach out if you want to discuss more Hactoberfest or open-source, I love to interact with more developers. &lt;br&gt;
You can also find me on &lt;a href="https://twitter.com/wasp_404"&gt;Twitter&lt;/a&gt;&lt;br&gt;
&lt;em&gt;See you at Hacktoberfest next year!&lt;/em&gt;&lt;/p&gt;

</description>
      <category>hacktoberfest</category>
      <category>opensource</category>
      <category>github</category>
    </item>
    <item>
      <title>Web Authentication By The Numbers (Part 1)</title>
      <author>Jay F. Grissom</author>
      <pubDate>Wed, 17 Nov 2021 20:30:09 +0000</pubDate>
      <link>https://dev.to/jfgrissom/web-authentication-by-the-numbers-5b0g</link>
      <guid>https://dev.to/jfgrissom/web-authentication-by-the-numbers-5b0g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#how-authentication-layers-are-built-up-to-create-an-authentication-system-for-your-website"&gt;
  &lt;/a&gt;
  How authentication layers are built up to create an authentication system for your website.
&lt;/h2&gt;

&lt;h2&gt;
  &lt;a href="#audience"&gt;
  &lt;/a&gt;
  Audience
&lt;/h2&gt;

&lt;p&gt;This article is intended for intermediate level website developers and software engineers. I've tried to make it approachable for beginners but it's really not for absolute beginners.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#problem"&gt;
  &lt;/a&gt;
  Problem
&lt;/h2&gt;

&lt;p&gt;Website authentication can be a very confusing topic. There are a lot of considerations when thinking about an authentication system for your web projects. It's overwhelming because authentication can be extremely simple or it can be a layer cake of individual systems that each build on top of each other.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approach"&gt;
  &lt;/a&gt;
  Approach
&lt;/h2&gt;

&lt;p&gt;In this series we're going to start with no authentication and then you'll add a very basic authentication system. Then you'll progressively add and remove layers on top of it to make it a full blown Authentication System for your website using PassportJS. &lt;/p&gt;

&lt;p&gt;Once that is done you'll learn how to go one step further and implement Xumm (a crypto currency wallet) SignIn as a stand-in for a traditional &lt;code&gt;user:password&lt;/code&gt; based authentication mechanism. We'll do this using a new PassportJS strategy I've created to authenticate your users with Xumm.&lt;/p&gt;

&lt;p&gt;For the grand finale you'll learn how to implement all of this in BlitzJS by executing a single line of code using a BlitzJS recipe.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#assumptions"&gt;
  &lt;/a&gt;
  Assumptions
&lt;/h2&gt;

&lt;p&gt;The examples here use localhost without Transport Layer Security. I'll assume you understand that all this is not secure in a real world production environment without &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#for-early-portions-of-this-series-ill-assume"&gt;
  &lt;/a&gt;
  For early portions of this series I'll assume
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You're familiar with Typescript. &lt;/li&gt;
&lt;li&gt;You know how to setup &lt;a href="https://nodejs.dev/"&gt;NodeJS&lt;/a&gt; and &lt;a href="https://expressjs.com/"&gt;ExpressJS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You're familiar with the concept of &lt;a href="https://expressjs.com/en/guide/using-middleware.html"&gt;middleware for ExpressJS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You know how to use &lt;a href="https://www.postman.com/"&gt;Postman&lt;/a&gt; to make calls to your application as if you're a client.&lt;/li&gt;
&lt;li&gt;You're familiar with &lt;a href="http://www.passportjs.org/"&gt;PassportJS&lt;/a&gt; but may not have implemented it previously. &lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#for-late-portions-of-this-series-ill-assume"&gt;
  &lt;/a&gt;
  For late portions of this series I'll assume
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;You understand that &lt;a href="https://xumm.app/"&gt;Xumm&lt;/a&gt; is a wallet for the &lt;a href="https://xrpl.org/"&gt;XRP Ledger&lt;/a&gt; (an open source crypto currency project).&lt;/li&gt;
&lt;li&gt;You're familiar with &lt;a href="https://blitzjs.com/"&gt;BlitzJS&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#github-repo"&gt;
  &lt;/a&gt;
  GitHub Repo
&lt;/h2&gt;

&lt;p&gt;If you want to follow along with examples there is a branch for each type of authentication system we're building here over on my corresponding &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers"&gt;Web Authentication By The Numbers Github Repo&lt;/a&gt;.&lt;/p&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--566lAguM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-5a155e1f9a670af7944dd5e12375bc76ed542ea80224905ecaf878b9157cdefc.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/jfgrissom"&gt;
        jfgrissom
      &lt;/a&gt; / &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers"&gt;
        web-authentication-by-the-numbers
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      This repository goes with the article by the same name on dev.to.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
web-authentication-by-the-numbers&lt;/h1&gt;
&lt;p&gt;This repository goes with the article by the same name on dev.to.&lt;/p&gt;
&lt;/div&gt;



&lt;/div&gt;
&lt;br&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/jfgrissom/web-authentication-by-the-numbers"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;/div&gt;
&lt;br&gt;


&lt;h2&gt;
  &lt;a href="#starting-with-no-authentication-step-0"&gt;
  &lt;/a&gt;
  Starting With No Authentication (Step 0)
&lt;/h2&gt;

&lt;p&gt;Initially we'll start the application on the master branch where there is no authentication. See the &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/master/index.ts"&gt;&lt;code&gt;index.ts&lt;/code&gt;&lt;/a&gt; file on the master branch for this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response } from 'express'

const app: Application = express()
const port = 3000

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  return res.status(200).send({
    message: "Hello World! I'm not authenticated."
  })
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Making a call to this using Postman will return this.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "message": "Hello World! I'm not authenticated."
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#primitive-authentication-system-step-1"&gt;
  &lt;/a&gt;
  Primitive Authentication System (Step 1)
&lt;/h2&gt;

&lt;p&gt;Probably the most primitive authentication system we can build with express contains a simple set of hard coded credentials. Using this &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/basic-auth/index.ts"&gt;basic auth example&lt;/a&gt; we can setup some thing like this.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: This authentication system is horrible for many reasons. Don't use this in your app (the user and password will be checked into Github). This example is just to help you understand what is going on here.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response, NextFunction } from 'express'
import auth from 'basic-auth'

const app: Application = express()
const port = 3000

app.use((req: Request, res: Response, next: NextFunction) =&amp;gt; {
  let user = auth(req)

  if (
    user === undefined ||
    user['name'] !== 'admin' ||
    user['pass'] !== 'supersecret'
  ) {
    res.statusCode = 401
    res.setHeader('WWW-Authenticate', 'Basic realm="Node"')
    res.end('Unauthorized')
  } else {
    next()
  }
})

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  return res.status(200).send({
    message: "Hello World! I'm authenticated."
  })
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you get &lt;code&gt;basicAuth&lt;/code&gt; added to your application you can try to make a call to the service using Postman but you'll just get am empty response with a status code of &lt;code&gt;401 Unauthorized&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To get an authenticated response you'll need to setup credentials in the "Authorization" tab of your Postman request. The Username is "admin" and the Password is "supersecret". &lt;/p&gt;

&lt;p&gt;Make the request again with these credentials and you'll get this for a response.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "message": "Hello World! I'm authenticated."
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;At this point you've got a password database and you can accept "Basic Authentication Headers" from any client.&lt;/p&gt;

&lt;p&gt;The user database can be much more complicated than this. It could be in a database or provided by an external authentication provider (like &lt;a href="https://aws.amazon.com/cognito/"&gt;AWS Cognito&lt;/a&gt;). For now we'll leave it simple and just keep using &lt;code&gt;basicAuth&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#session-support-step-2"&gt;
  &lt;/a&gt;
  Session Support (Step 2)
&lt;/h2&gt;

&lt;p&gt;So providing credentials every time someone requests something from your site is OK if the client is an API consumer (like another web service). However this isn't typically how you would handle authentication for users who show up to your site using a web browser.&lt;/p&gt;

&lt;p&gt;So what resources will you need to create to provide this functionality?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;At this point you'll need to provide some webpage features that allow a user to login, use authorized resources, and logout.&lt;/li&gt;
&lt;li&gt;You'll also need something that won't require them to login every time they click on something within the page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let's begin by adding session support to the project.&lt;/p&gt;

&lt;p&gt;To see the code for this take a look at the &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/session-support/index.ts"&gt;session support branch&lt;/a&gt; of the repo.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: This branch intentionally doesn't have authentication in it.&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response } from 'express'
import session from 'express-session'

const app: Application = express()
const port = 3000

const sessionOptions = {
  secret: 'session secret that is not secret'
}

app.use(session(sessionOptions))

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  return res.send(`Session ID: ${req.session.id}`)
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once you've updated this file connect to your site using a web browser at &lt;code&gt;http://localhost:3000/&lt;/code&gt;. When you do this you should see a result similar to this on your web page &lt;code&gt;Session ID: Outbyq2G_EYkL5VQzAdKlZIZPYfaANqB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;NOTE: To keep your browser sessions secure in production you would not share this session ID over an unsecured connection. You would use https (TLS).&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what is this session good for exactly? I'm glad you asked! This session is your server's way of keeping track of browser sessions (note it doesn't take care of user sessions - at least not yet anyway). The session solves the problem of requiring a user to login every time they click on something within the page.&lt;/p&gt;

&lt;p&gt;So you've got a session and you've got a user database. How exactly  do these things tie together?&lt;/p&gt;

&lt;p&gt;The session is tied to a specific client (in this case a browser). The way the server and browser communicate this session is through a cookie. If you look at the cookies in your browser you'll see that it matches the ID that was presented in your web page.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#session-support-with-user-support-step-3"&gt;
  &lt;/a&gt;
  Session Support with User Support (Step 3)
&lt;/h2&gt;

&lt;p&gt;So how to the session and the user tie together?&lt;/p&gt;

&lt;p&gt;In this example we'll reintroduce the Basic Authentication feature by merging in the two previous branches we created (&lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/basic-auth"&gt;feature/basic-auth&lt;/a&gt; and &lt;a href="https://github.com/jfgrissom/web-authentication-by-the-numbers/blob/feature/session-support"&gt;feature/session-support&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;You should end up with with this. But it's not complete.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import express, { Application, Request, Response, NextFunction } from 'express'
import session from 'express-session'
import auth from 'basic-auth'

// Add the session data we need that is specific to our application.
declare module 'express-session' {
  interface SessionData {
    userToken?: string
    tokenExpiration?: number
  }
}

const app: Application = express()
const port = 3000

const sessionOptions = {
  secret: 'session secret that is not secret',
  cookie: {
    httpOnly: true // Only let the browser modify this, not JS.
  }
}

app.use(session(sessionOptions))

app.use((req: Request, res: Response, next: NextFunction) =&amp;gt; {
  // If we have a previous session with key session data then we are authenticated.
  const currentTime = Date.now() / 1000
  if (
    req.session.userToken &amp;amp;&amp;amp;
    req.session.tokenExpiration &amp;amp;&amp;amp;
    req.session.tokenExpiration &amp;gt; currentTime
  ) {
    next()
    return
  }

  // If no prior session was established and bad credentials were passed.
  const user = auth(req)
  if (
    user === undefined ||
    user['name'] !== 'admin' ||
    user['pass'] !== 'supersecret'
  ) {
    res.statusCode = 401
    res.setHeader('WWW-Authenticate', 'Basic realm="Node"')
    res.end('Unauthorized')
    return
  }

  // Create a new session for the user who has passed good credentials.
  req.session.userToken = user.name
  req.session.tokenExpiration = currentTime + 15 // 15 second session.
  next()
})

app.get('/', async (req: Request, res: Response): Promise&amp;lt;Response&amp;gt; =&amp;gt; {
  const currentTime = Date.now() / 1000
  return res.send(`
  Session ID: ${req.session.id} &amp;lt;br/&amp;gt;
  Authenticated Username: ${auth(req)?.name} &amp;lt;br/&amp;gt;
  User Token: ${req.session.userToken} &amp;lt;br/&amp;gt;
  Current Time: ${currentTime} &amp;lt;br/&amp;gt;
  Session Expiration: ${req.session.tokenExpiration}
  `)
})

app.listen(port)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You have session functionality and you have basic authentication functionality. &lt;/p&gt;

&lt;p&gt;You can test how the page behaves without credentials by going to the page in a web browser and clicking cancel when prompted for a username and password. You should see a &lt;code&gt;401 Error&lt;/code&gt; in the console and &lt;code&gt;unauthorized&lt;/code&gt; on the web page.&lt;/p&gt;

&lt;p&gt;You can test how the page behaves with credentials by prepending the username and password in the url so that it looks like this &lt;code&gt;http://admin:supersecret@localhost:3000/&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Session ID: Wc29HPGVTdnx0VqsDr7uaxWPTV3KoIzO
Authenticated Username: admin
User Token: admin
Current Time: 1637179009.834
Session Expiration: 1637179024.829
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can test out the session persistence by refreshing the page. You'll notice that the User Token remains admin but the Authenticated Username becomes &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To test out the session expiring by passing good credentials like this &lt;code&gt;http://admin:supersecret@localhost:3000/&lt;/code&gt;. Then you can pass  bad bad credentials to the page like this &lt;code&gt;http://bad:credentials@localhost:3000/&lt;/code&gt;. Then refresh the page repeatedly until the session expires after 15 seconds. When the tokenExpires then you'll see a prompt show up for the Username and Password (just click cancel). &lt;em&gt;&lt;strong&gt;NOTE: This is most easily done in Chrome because it will not automatically cache (and reuse) good credentials after you've passed bad credentials.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With this latest iteration we've answered a few questions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How do we access the name of the user? You can see the Authenticated username came in through the authenticated request &lt;code&gt;auth(req)&lt;/code&gt; and that if we want to use it again we'll need to access it through the session.&lt;/li&gt;
&lt;li&gt;How does our system know if the user previously was authenticated? It knows because a prior session was established.&lt;/li&gt;
&lt;li&gt;Why can't a browser just manipulate the cookie and add data we are expecting? We are telling browsers that they can't make changes to the cookie using Javascript with the httpOnly directive &lt;code&gt;{cookie: { httpOnly: true }}&lt;/code&gt;. Our server knows the state of the cookie and will reject it if the client changes the cookie.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So what if you don't want to use Basic Auth? This is a very reasonable thing. Basic auth is pretty terrible for a lot of reasons.&lt;/p&gt;

&lt;p&gt;We'll be adding more to this in the next section of this series.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#article-image-credit"&gt;
  &lt;/a&gt;
  Article Image Credit
&lt;/h2&gt;

&lt;p&gt;Photo by &lt;a href="https://unsplash.com/@parsoakhorsand?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Parsoa Khorsand&lt;/a&gt; on &lt;a href="https://unsplash.com/s/photos/lock?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText"&gt;Unsplash&lt;/a&gt;&lt;/p&gt;

</description>
      <category>authentication</category>
      <category>typescript</category>
      <category>webdev</category>
      <category>node</category>
    </item>
    <item>
      <title>On professional standards</title>
      <author>Lee Hambley</author>
      <pubDate>Wed, 17 Nov 2021 20:15:51 +0000</pubDate>
      <link>https://dev.to/leehambley/on-professional-standards-322c</link>
      <guid>https://dev.to/leehambley/on-professional-standards-322c</guid>
      <description>&lt;p&gt;Building software occupies an unusual space, it's certainly more of a vocation along side plumbers, electricians and technicians, however there remains an enormous scope for creativity and problem solving because unlike those aforementioned vocations computers more-or-less lack any physical or chemical laws governing our application of techniques or which can constrain our fantastically complicated creations.&lt;/p&gt;

&lt;p&gt;I'd go as far to say that the debate about whether or not people need to have computer science degrees is wholly misguided. Scientists ... let's say people with an analytical mind, a fundamental training in the "laws of nature" of computers, these people may make excellent engineers, but science is not engineering, and a computer sciences degree is absolutely not a guarantee of being a capable engineer, just as a physics degree doesn't qualify someone to engineer buildings, bridges or skyscrapers, even if it might equip them with the right analytical skills.&lt;/p&gt;

&lt;p&gt;I am generally opposed to certifications and standards, as I believe that easy access to technology-focused knowledge work is such an enormous enabler for individuals, that the floodgates for new boot-camp graduates and interns should be wide, wide open to encourage as many people as possible into the field, as the skills base widens, and as accessible low- and no-code tools proliferate the volume of software in the world continues to grow, and more and more opportunities continue to exist where profitable businesses need extremely highly skilled engineers to assist them, and those engineers can command a premium salary or rate. &lt;/p&gt;

&lt;p&gt;Technology enjoyed this way can line the pockets of everyone concerned, the fresh-faced rookies, the 200 year old jaded witches and wizards (architect years are like dog years.), and the company who is profiting all the time (maybe with a smaller gross margin than they wished..) from the software we build.&lt;/p&gt;

&lt;p&gt;That all said, in the absence of professional standards such as those which exist in the form of building, HVAC, electrical and plumbing codes, it continues to be exhausting and draining to constantly be held back by sub-standard work, and for that definition of sub-standard to be &lt;strong&gt;entirely&lt;/strong&gt; subjective.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---j5fVNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drehcchzziz35wj17rd1.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---j5fVNZx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/drehcchzziz35wj17rd1.jpg" alt="Image description" width="880" height="585"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For all the progress a software architect (or someone in a Principal or Distinguished role) can make in fostering a culture of collaboration, design, deliberate decision making, and modelling in collaboration with stakeholders from diverse disciplines (towards business or IT operations), the environmental pressure to make changes at any cost are everpresent, and in the absense of objective measures (including standards &amp;amp; certifications) things can rapidly devolve into the famed "ball of mud" non-architecture which has more in common with the Shanty towns than anything you might recognise as deliberate &lt;em&gt;architecture&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Just as Shanty towns are often shaped by the environmental constraints, lack of resources and rapid growth, software projects can suffer the same. Shanty towns can gentrify info middle-class neighbourhoods, but more often than not, at least in &lt;em&gt;software&lt;/em&gt; the growth on the fringes out-paces the gentrification and investment in the core. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v3t_22he--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsyuwgw3t1zawh8davez.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v3t_22he--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vsyuwgw3t1zawh8davez.png" alt="Image description" width="629" height="412"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The architect(s) must focus their energy, and choose their battles wisely.&lt;/p&gt;

&lt;p&gt;Ultimately the architect(s) require the support of the tradespeople working hands-on on the code every day. Often programmers lament that their business and project counterparts don't grant them time for re-factoring, writing tests, or conducting load tests, however their reasoning is likely flawed, nobody negotiates (at least not over the table) those things with their HVAC, plumbing, or electrical technicians.&lt;/p&gt;

&lt;p&gt;Those tradespeople have stacks of standards, international and regional to adhere to. An electrician will &lt;em&gt;not&lt;/em&gt; add a new circuit to a pre-1950s house (which in many parts of the world lack the 3rd wire in the wall sockets which carries a protective earth to protect against electrocution) without performing the remedial work to re-fit the house with modern wiring, no matter the cost. The liability, insurance, loss of license and with it, their livelihood is a cost so high that with sub-standard wiring in your outdated home, professionals cannot, and will not take shortcuts.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--b006tdcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nar8zzg6ju11m96q3nj5.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--b006tdcs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nar8zzg6ju11m96q3nj5.png" alt="Image description" width="880" height="390"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The rise of the open office may indeed correlate with the cost of installing adequate HVAC systems in closed-office environments, and tenants would likely violate their lease and put their employees' health in danger by taking shortcuts, thus HVAC professionals will also not take the risk of assuming the liability of contributing to sub-standard work.&lt;/p&gt;

&lt;p&gt;Technology however doesn't &lt;strong&gt;directly&lt;/strong&gt; have these kinds of standards in place, sure there's security standards such as ISO 27001, the GDPR (article 15) mandates that access to data is logged to assist in preserving the data subject's rights, financial and telecommunications software is required to keep data for a long time for auditing, and certain fields such as the payment card industry specifically mandate &lt;em&gt;against&lt;/em&gt; storing data.&lt;/p&gt;

&lt;p&gt;With all those "non-functional" requirements, however enforcement and policing is extremely lax. Article 15 of the GDPR should render it illegal for any software to &lt;em&gt;show&lt;/em&gt; any data without leaving a trace, however most Django, Rails, Express.JS or similar applications will happily serve a &lt;code&gt;GET&lt;/code&gt; request and log practically nothing in the logs, which may or may not even be persisted. I make no judgement on whether or not the global invalidation of practically every piece of software on the planet is a &lt;em&gt;bug&lt;/em&gt; or &lt;em&gt;feature&lt;/em&gt; of the GDPR, but our industry is steadfast in it's refusal to even address the topic.&lt;/p&gt;

&lt;p&gt;Digressing somewhat to professional standards, most seasoned architects and engineers would begin to raise questions about whether using some or all of a dynamically typed language, without CI/CD, with a privileged database user account, with access to an SSH console would begin to constitute malpractice, if we drew parallels to tradespeople in the physical world if would be akin to working on a live electrical panel, or sourcing fresh air for HVAC From next to a busy highway, or recycling water from a bathroom into a kitchen, etc, etc.&lt;/p&gt;

&lt;p&gt;Less clear, again is perhaps the use of certain paradigms such as stateless- or functional-programming, event sourcing, certain IPC strategies, and various combinations of the above, one may not forget that just like a building is built once, and lived in forever, code too is built once, and lived in for a long time, perhaps it is worth &lt;em&gt;investing&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;A passing slight at Agile, before I wrap up, which is that often Agile is used as a tool to keep things moving, no matter the total cost, as long as the immediate costs are bearable, in a strongly opinionated ecosystem where technology choices are made for you, this may be appropriate. I might be tempted here to draw parallels between "renting" space someone else designed, living out of a small studio apartment, to how it is to "rent" space in an opinionated inflexible framework, there may come a time when really investing into "where you live" as an engineer in a business context makes more sense, but having rented for the first few years of your life, you may lack the maturity to do sufficient, just-in-time planning; a delicate skill which takes years and years of vocational training to master.&lt;/p&gt;

&lt;p&gt;Of course, just as hand-building a shed in your garden under a certain size is not subject to building regulation, nor should all software be subject to regulation, we must, at all costs preserve the accessibility of our industry at large, and preserve it as a creative practice in which people can innovate, but we also urgently need to develop a philosophy of our own, and begin to identify objective measures of good and bad software, I might start with something like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Some application of schema definition tools&lt;/strong&gt; 
Any polymorphic type system, json schema, AVRO schema, etc, etc. Polymorphism (i.e interface types, traits, generics, etc) is important to avoid hard static typing, but dynamic typing leaves too much surface are for testing. With a proper type schema, parameterized testing becomes feasible, and the total set of inputs and outputs becomes a much smaller, but likely still infinite set. Type systems also provide a great platform for documentation, IDEs, language servers, generating documentation, and evolving a schema over time. Avro is outstanding here, as is GraphQL as schema definition languages, the rest (all of them.) fall down on one or more vital area.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper application of an "aggregate root" pattern&lt;/strong&gt;
For example, avoiding the "active record" pattern, and grouping locally related objects such that data access is controlled by the "root" (i.e in a "invoice has line items"  example, the invoice would be the entry-point for changes to lineitem quantity to apply business rules, calculate taxes, check customer standing, and stock control. Restricting a "model" to the core few objects of a system. ActiveRecord  isn't an objectively bad pattern, but when all objects are addressable without constraint, it can be nearly impossible to maintain a strong aggregate-root based model, to leverage the often more powerful Repository Pattern, or Event Sourcing, and it's difficult to leverage the extensive capabilities of the underlying data stores. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper application of modelling tools and design strategies&lt;/strong&gt;
Framework-over-database is precisely the absence of software design, in today's environment the developers who operate in that level will soon find themselves in real trouble from low-and-no-code backed by a Firebase database or a Google Sheets sheet. Just as a highly professional building crew will not be enthused about trying to turn a Shanty Town shack into a built-to-code residence, software architects and highly professionalized teams will be reluctant to &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper managing of side-effects and transactional guarantees&lt;/strong&gt;
An operation such as booking a cinema ticket, or securing a package holiday should have very clear guarantees about the transactional properties. It should not be possible to book &lt;code&gt;1 of n&lt;/code&gt; tickets in a mult-seat booking, or book a flight without a hotel if the customer tried to secure both. In the absence of support from your data store, some kind of "two-phase" transactions can be emulated for which established patterns exist. Controlling for side-effects (such as API calls, IO, reading random numbers, reading from external data sources) are harder to control for, but again practices are well established in some communities to have entirely deterministic execution of some or all codepaths, and simulation tools which will will rigorously "prove" a "pure" (no side effects) model, these tools are effectively unused entirely by business software, to the detriment of practically everyone.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper Auditability&lt;/strong&gt;
Probably through some kind of event-sourcing mechanism (e.g log everything that happens as the source of truth, and derive projections from it, PDFs for your stakeholders, and various read-only databases which can be hyper optimized for your use-cases). Event sourcing is the oldest record keeping strategy on the planet, and with the blistering power of modern computer systems almost any amount of data can be managed in an event-sourced fully audited manner, with proper caching strategies, careful treatment of read-cursors, and proper aggregate partitioning schemes this architecture can be potentially infinitely scalable. Regrettably it only works right if you apply it along side the other &lt;em&gt;proper&lt;/em&gt; things enumerated in this list.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Proper user- and authentication-strategies&lt;/strong&gt;
Conflating a single human being with a single account is a sin committed by practically every piece of software on the planet, ever. That being said decoupling the human who is authorized from the "account", and permitting many-to-many-to-many relationships enables enormous agility in software. Such strategies would permit seamless "customer authorizes admin to log into their account" for support without requiring super-admins (violates the GDPR), would assist elders who are not intimately familiar with technology to delegate access to their accounts to trusted relatives temporarily or permanently, and allows developers under careful control to impersonate, or share accounts on testing environments. Here are mature and established standards such as OAuth 2.0 which have stood for a decade or more, applied correctly they are enormously liberating. Role-based-access-control (RBAC), super user "admin" accounts, and similar anti-patterns can be successfully avoided if OAuth is applied properly with a sympathetic understanding of the nuance in in the spec, however again this requires taste, and expertise, and must overcome the ever-present draw to grab the simplest library in the language's package registry and copy 10 lines from a &lt;code&gt;README&lt;/code&gt; and move on to the next ticket.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Application of all of those patterns above, at precisely the right time, not too soon and not too late; which requires intuition and experience, something which is regrettably entirely subjective, it also inflates enormously the cost in some places, but radically reduces cost over time as a framework-over-relational-database model stagnates, and becomes intractable, a properly designed system can be an everlasting joy to maintain and offer an enormous competitive advantage.&lt;/p&gt;

&lt;p&gt;I think Agile and XP practices, the easy accessibility of framework-first development, and the overwhelming ratio of inexperienced, to experienced programmers means that the ideas above will never reach mainstream adoption.&lt;/p&gt;

&lt;p&gt;For every senior, experienced programmer who takes time to understand the &lt;em&gt;needs&lt;/em&gt; of the stakeholder, the regulatory and environmental (i.e existing code, existing practices), and attempts to produce high quality, well-thought-out work, which is sympathetic to the entire nuanced multi-dimensional spectrum of needs.... there will be ten less experienced people who lack the experience necessary to build for maintenance and will through malice or inexperience (incompetence?) offer a "competing", but sub standard solution.&lt;/p&gt;

&lt;p&gt;Sometimes you don't need top-of-the-line high skill plumbing, and you literally need the software equivalent of a bucket and hose, but business stakeholders often can't tell the difference, and if a more experienced engineer commits to a certain time frame, scope and cost, there will often be that less experienced engineer promising the business what they need, right this second, for half the price, with no up-front discussion. To both the inexperienced engineer and the business stakeholder, they are apparently offering the same thing as the more experienced engineer, but the more experienced engineer is offering a different, significantly higher quality product, so the "market" cannot behave rationally in the absence of regulation or objective standards.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1l4Fq6gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwpwns28hw9tj4fr4ct.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1l4Fq6gf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/frwpwns28hw9tj4fr4ct.png" alt="Image description" width="880" height="660"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Validate passwords with JS</title>
      <author>Walter Nascimento</author>
      <pubDate>Wed, 17 Nov 2021 20:14:29 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/validate-passwords-with-js-1jge</link>
      <guid>https://dev.to/walternascimentobarroso/validate-passwords-with-js-1jge</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/validar-senhas-com-javascript-6517c6438ba9"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple project to validate password cracking difficulty, using javascript to set as strong password.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#code"&gt;
  &lt;/a&gt;
  Code
&lt;/h2&gt;

&lt;p&gt;First let’s create the interface, we’ll do something simple, using just HTML.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Validator Password&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;"password"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In this code we have only one input that will receive the password and the span where it will be displayed if the password is strong, medium or weak.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;use strict&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;span&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;validPassword&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regExpWeak&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;a-z&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regExpMedium&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="se"&gt;\d&lt;/span&gt;&lt;span class="sr"&gt;+/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;regExpStrong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sr"&gt;/.&lt;/span&gt;&lt;span class="se"&gt;[&lt;/span&gt;&lt;span class="sr"&gt;!,@,#,$,%,^,&amp;amp;,*,?,_,~,-,(,)&lt;/span&gt;&lt;span class="se"&gt;]&lt;/span&gt;&lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min_week_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min_medium_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;min_strong_password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;validPassword&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regExpWeak&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regExpMedium&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;regExpStrong&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nx"&gt;min_week_password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your password is too week&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;min_medium_password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your password is medium&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;min_strong_password&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_week&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_medium&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;input_strong&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;textContent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Your password is strong&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Here we have the javascript code that does all the magic, where we first get the password elements and the span element, in the password element we add a listening that is activated whenever it receives some data and calls the validPassword function.&lt;/p&gt;

&lt;p&gt;in validPassword the input data is checked and compared with the Regex, if the password entered is valid in some regex it is weak, if it is valid in more than one it is average and if it is valid in all it is strong.&lt;/p&gt;

&lt;p&gt;To make the password more valid, a minimum length was added for each password, but of course it can be edited to make it more compatible with your project.&lt;/p&gt;

&lt;p&gt;ready simple like that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;p&gt;See below for the complete working project.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/WalterNascimento/embed/mdPmPag?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#youtube"&gt;
  &lt;/a&gt;
  Youtube
&lt;/h2&gt;

&lt;p&gt;If you prefer to watch it, see the development on youtube.&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/5g-184SKPwQ"&gt;
&lt;/iframe&gt;
&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊 See you later! 😊😊&lt;/p&gt;

</description>
      <category>password</category>
      <category>javascript</category>
      <category>tutorial</category>
      <category>validate</category>
    </item>
  </channel>
</rss>
