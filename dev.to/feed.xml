<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Listen to the S7E3 of DevDiscuss: "Getting a Read on Tech Publishing"</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 24 Nov 2021 18:56:56 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-the-s7e3-of-devdiscuss-getting-a-read-on-tech-publishing-3e7g</link>
      <guid>https://dev.to/devteam/listen-to-the-s7e3-of-devdiscuss-getting-a-read-on-tech-publishing-3e7g</guid>
      <description>&lt;h2&gt;
  &lt;a href="#there-might-be-a-book-inside-of-you-waiting-to-be-written-lets-explore-that-in-this-weeks-episode-of-devdiscuss"&gt;
  &lt;/a&gt;
  There might be a book inside of you waiting to be written. Let's explore that in this week's episode of DevDiscuss...
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s7-e3-getting-a-read-on-tech-publishing"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S7:E3 - Getting a Read on Tech Publishing&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss
      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s7-e3-getting-a-read-on-tech-publishing" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s7-e3-getting-a-read-on-tech-publishing" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s7-e3-getting-a-read-on-tech-publishing" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s7-e3-getting-a-read-on-tech-publishing" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s7-e3-getting-a-read-on-tech-publishing"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s7-e3-getting-a-read-on-tech-publishing"&gt;
      &lt;img id="episode-profile-image" alt="S7:E3 - Getting a Read on Tech Publishing" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Quick refresher — DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Episode Info&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;In S7E3, we talk about the fascinating world of tech publishing. If you're here on DEV contributing content, this episode is made for you!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 — Developer Advocate at Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@theledu"&gt;Katel LeDû&lt;/a&gt; is the CEO of A Book Apart, where she helps passionate tech community members become successful authors. She’s also a personal and professional transformation coach, focused on helping folks cultivate creativity, develop social awareness in themselves and at work, and embody sensitivity and empathy as superpowers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let us know your thoughts on this show in the comments below — or on Twitter (&lt;a href="https://twitter.com/thepracticaldev"&gt;@thepracticaldev&lt;/a&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Q0zcTd9r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://media.giphy.com/media/qZelsWAXfWpAA/giphy.gif%3Fcid%3Decf05e47ddu6jql6tkj8kvdmj4z5ofal65l38f235ruuinlo%26rid%3Dgiphy.gif%26ct%3Dg" alt="Speakers" width="480" height="480"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s7-e3-getting-a-read-on-tech-publishing/id1513053883?i=1000542927515"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/75aoNPdGIKUREVuIxsAaua"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzUy?sa=X&amp;amp;ved=0CAQQkfYCahcKEwjA4PPM1rH0AhUAAAAAHQAAAAAQCg"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss-dev-xtQvoDylAUg/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=167986563"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/232"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season seven sponsors: &lt;a href="https://www.microsoft.com/en-us/dev-community/Event/Register?eventId=DevDiscussPodcast_o7nllI4cp4Vg&amp;amp;ocid=aid3038582"&gt;Microsoft&lt;/a&gt;, &lt;a href="https://developer.newrelic.com/"&gt;New Relic&lt;/a&gt;, &amp;amp; &lt;a href="https://dev.toource=devdiscuss&amp;amp;utm_medium=syndication&amp;amp;utm_campaign=october21"&gt;Vultr&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Understanding Basic Coding Terminology: Industry Basics</title>
      <author>Amy Oulton</author>
      <pubDate>Wed, 24 Nov 2021 18:37:24 +0000</pubDate>
      <link>https://dev.to/amyoulton/understanding-basic-coding-terminology-industry-basics-43p7</link>
      <guid>https://dev.to/amyoulton/understanding-basic-coding-terminology-industry-basics-43p7</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This article was originally written by me for &lt;a href="//codecast.io"&gt;CodeCast&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you’re just entering the world of development, one of the first things you will likely notice is how much jargon there is. I know when I first started, it felt like there was at least one word in every sentence that I had never heard before. Like any field, there is very specific jargon related to the field of development. With coding, there is specific jargon for different types of programming as well as jargon that is unique to specific languages, libraries, and frameworks. &lt;/p&gt;

&lt;p&gt;I know I've looked up what words mean only to be more confused after reading the definition. It can all feel a little daunting to start, so our goal in this post is to introduce some of the broader and more commonly used terms in coding to help get you started on your coding journey!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8ib2eoO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvm6n4ppi7pjw8utemqy.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8ib2eoO3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uvm6n4ppi7pjw8utemqy.jpeg" alt="Exhausted Dev" width="880" height="588"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#developerprogrammer"&gt;
  &lt;/a&gt;
  Developer/Programmer
&lt;/h3&gt;

&lt;p&gt;Even in the small amount of text you’ve already read, both of these things have come up. They’re mentioned basically everywhere, and one of the most common questions from people new to coding is "what is the difference between a programmer and a developer". Essentially, within the industry, these two terms are used almost interchangeably. There are some technical differences between them, but even that meaning can shift from company to company. But generally speaking, a programmer has a more specific task or workload than a developer. A programmer will be working on a project in a much narrower scope, instead of having the hands in many different pieces of the pie like a developer. &lt;/p&gt;

&lt;p&gt;But for simplicity's sake, especially when you’re just starting out, it’s safe to understand that when you read ‘programmer’ or ‘developer’, they are meaning ‘someone who codes’.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontendbackendfull-stack"&gt;
  &lt;/a&gt;
  Front-End/Back-End/Full Stack
&lt;/h3&gt;

&lt;p&gt;One of the first things you will be introduced to (and likely already have been) when you look into the world of coding are front-end and back-end developers. This is one of the easier concepts to grasp, as it’s quite simple in what the roles are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Front-End Developer&lt;/strong&gt;:  Someone who codes the aspects of a web application that a user directly interacts with. This includes all the visual aspects of the application, as well as the interactivity and functionality. They’ll be the ones to make the requests to the back-end and implement the information the back-end provides to them. Because of all this, the front-end is known as the “client-side”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Back-End Developer&lt;/strong&gt;: Someone who is responsible for the “server-side” logic of the application. Essentially, they’ll use the requests made by the front-end to return information from things like a database or an API that the front-end can use. We’ll get more into what these two terms mean later.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full-Stack&lt;/strong&gt;: You may have already guessed this one, but a full-stack developer is someone who works on both the client and server-side. Generally, most programs or bootcamps will teach coding as full-stack because even if someone prefers to work in either the front or back-end, and eventually seeks jobs only doing one, you need a solid understanding of the other side to know what your code is doing.‍&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Database&lt;/strong&gt;: A database is simply a collection of data. It’s where all the information is stored, like users' emails, passwords, names, birthdays, etc. It’s what the server extracts data from to obtain the specific information a client may be requesting. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#api"&gt;
  &lt;/a&gt;
  API
&lt;/h3&gt;

&lt;p&gt;An API stands for Application Program Interface. Clear as mud right? API’s are one of the things I struggled with wrapping my head around in my bootcamp because they can be a bit difficult to grasp as a beginner. In very simple terms, an API is something that allows you to communicate with a separate piece of software. It allows you to make a request to an entirely different piece of software than you’re currently working on, and receive a specific piece of data or information back. Often this is a third-party API and there will be clear documentation on how to make the requests to get back the desirable information. &lt;/p&gt;

&lt;p&gt;API’s are a bit difficult to wrap your head around, but understanding will come as you use them. Think of this example. You visit a website for a restaurant and you click on a specific location, which brings up a small map showing you the location. The website (almost definitely) didn’t create a match from scratch, but instead, made a request to an API (like Google Maps API) with a location, and the API gave it back the information needed to render out the map on the page. &lt;/p&gt;

&lt;p&gt;If you want to read more into APIs, I personally really like &lt;a href="https://www.howtogeek.com/343877/what-is-an-api/"&gt;this article&lt;/a&gt; by How To Geek, as they really try to simplify it while going deeper into what APIs are.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#languagelibraryframework"&gt;
  &lt;/a&gt;
  Language/Library/Framework
&lt;/h3&gt;

&lt;p&gt;This one is a bit more difficult, at least in my opinion, to wrap your head around. I will do my best to explain it in a simplified version. These terms are vast and can vary (annoyingly so!). So think of these definitions as a guide to get you understanding the concepts as a whole, as opposed to the hard and fast rules of what they are.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Language&lt;/strong&gt;: The language is all the syntax, grammar, and rules for how you write different parts of code, like functions, variables, classes, etc. The language is just a set of rules for how something needs to look syntactically to work.  &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Library&lt;/strong&gt;: A library is a collection of individual pieces of pre-written code. Many languages have pre-set libraries that are built by the people who developed the language. These are called standard libraries. There are also third-party libraries that people have written to make coding in a specific language easier. You can think of a library as something that provides you with ‘helper functions’, something that has a consistent output that you don’t have to write yourself. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Framework&lt;/strong&gt;: A framework is essentially what we know the word to mean in common speech: a foundation which you can build on top of. The framework is the base on which you add your own code to. Most frameworks have a collection of libraries that provide structure and common tools to begin building your code. Frameworks define how the base and structure of the code should work, making less room for errors.&lt;/p&gt;

&lt;p&gt;Again, this is a highly simplified version and as your journey progresses, they will likely get a bit more complicated, but so is the life of a developer!&lt;/p&gt;

&lt;p&gt;Alright, for now, I think this is a good place to start. These are some of the broad and vague concepts and terms used within the industry and are important to know when learning how to code. I intend to continue this series, so keep an eye out for more blog posts coming later!&lt;/p&gt;

&lt;p&gt;Find more of my stuff here:&lt;br&gt;
&lt;a href="https://dev.to/amyoulton/how-to-avoid-common-mistakes-made-by-junior-developers-4j5j"&gt;How To: Avoid Common Mistakes By Junior Devs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://dev.to/amyoulton/essential-keyboard-shortcuts-for-developers-plc"&gt;Essential Keyboard Shortcuts&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.codecast.io/casts/KPjp7XYOQw2A-javascript-classes-constructors"&gt;JavaScript Constructors&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>beginners</category>
      <category>programming</category>
      <category>devops</category>
    </item>
    <item>
      <title>How To Hire the Right Bubble Developer</title>
      <author>Lisa Dziuba</author>
      <pubDate>Wed, 24 Nov 2021 18:31:42 +0000</pubDate>
      <link>https://dev.to/lisadziuba/how-to-hire-the-right-bubble-developer-3lkc</link>
      <guid>https://dev.to/lisadziuba/how-to-hire-the-right-bubble-developer-3lkc</guid>
      <description>&lt;p&gt;🤔 Did you know that no-code is the future? No-code development is fast becoming the ideal option for startups, small businesses, and enterprises to build and scale products quickly. &lt;/p&gt;

&lt;p&gt;One of the amazing no-code tools in the space is Bubble, an app that lets you build websites and web apps without coding.&lt;/p&gt;

&lt;p&gt;If you’re considering building your product on Bubble and hiring Bubble developers, my team wrote a comprehensive guide on &lt;a href="https://welovenocode.com/hire-bubble-developers"&gt;hiring Bubble developers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Those are the top 5 benefits of hiring a Bubble developer:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Low-cost: Although it can be more expensive to hire full-stack developers, the cost is much lower when hiring a Bubble developer.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Faster development: The process of writing custom software is much faster when using no-code tools, so you'll have your new application in a shorter time frame than hiring full-stack developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better quality: Because no-code tools allow you to write code without much overhead, the quality of your application will be more excellent than with full-stack developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better testing: The process of writing custom software is much faster when using no-code.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hiring for any technical role is challenging and time-consuming but good preparation will help a lot. So let's go through a checklist of soft &amp;amp; hard skills that you need to consider and put in place when you want to hire a Bubble developer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Previous Bubble projects &amp;amp; experience with Bubble templates&lt;/li&gt;
&lt;li&gt;Passion for no-code and Bubble&lt;/li&gt;
&lt;li&gt;Agile experience&lt;/li&gt;
&lt;li&gt;UX design skills&lt;/li&gt;
&lt;li&gt;Problem-solving skills&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>nocode</category>
      <category>lowcode</category>
      <category>hiring</category>
    </item>
    <item>
      <title>Announcing the Advent of GraphQL Challenge</title>
      <author>Lucia Cerchie</author>
      <pubDate>Wed, 24 Nov 2021 17:52:17 +0000</pubDate>
      <link>https://dev.to/stepzen/announcing-the-advent-of-graphql-challenge-ld4</link>
      <guid>https://dev.to/stepzen/announcing-the-advent-of-graphql-challenge-ld4</guid>
      <description>&lt;p&gt;We've got exciting news! StepZen is running an 'Advent of GraphQL' challenge in December! If you have around 5 minutes a day, you can complete this challenge and boost your GraphQL knowledge to boot. Learn how to write your own queries and connect to a REST API. We've got some cool prizes this year...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cm7fJlYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codimd.s3.shivering-isles.com/demo/uploads/upload_381be1f9e83b0d408060d16853d2e509.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cm7fJlYo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://codimd.s3.shivering-isles.com/demo/uploads/upload_381be1f9e83b0d408060d16853d2e509.png" alt="banner" width="880" height="226"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#where-to-find-the-challenge"&gt;
  &lt;/a&gt;
  Where to find the challenge
&lt;/h2&gt;

&lt;p&gt;Each day we'll release a new challenge to &lt;a href="https://www.notion.so/Advent-of-GraphQL-c69086ae98764e2e9e1ccdd8938dc980"&gt;this Notion calendar&lt;/a&gt;. Follow along to take part. If you'd like to tweet about your progress, be sure to let us know by tagging @stepzen_dev! &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-rules"&gt;
  &lt;/a&gt;
  What are the rules?
&lt;/h2&gt;

&lt;p&gt;Complete each of the 25 steps. If you aren't able to start on Dec 1st then you are welcome to come late to the party, there's plenty of time to catch up. It's in a tutorial format, but we appreciate creativity! If you need help, &lt;a href="https://discord.com/invite/9k2VdPn2FR"&gt;reach out to our Discord channel&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#when-do-submissions-end"&gt;
  &lt;/a&gt;
  When do submissions end?
&lt;/h2&gt;

&lt;p&gt;The challenge ends on December 25th, but we will accept submissions up to December 28th, and announce the winner on the morning of the 30th. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-do-i-enter"&gt;
  &lt;/a&gt;
  How do I enter?
&lt;/h2&gt;

&lt;p&gt;Send a link to your repository and deployed site to &lt;a href="mailto:feedback@stepzen.com"&gt;feedback@stepzen.com&lt;/a&gt; with the headline "Advent of GraphQL Submission"&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-are-the-prizes"&gt;
  &lt;/a&gt;
  What are the prizes?
&lt;/h2&gt;

&lt;p&gt;Everyone who enters will receive StepZen stickers! Be sure to include your address in yoru submission email, or use &lt;a href="https://stepzen.com/stickers"&gt;https://stepzen.com/stickers&lt;/a&gt; And to one random submitter (we'll put your names in a hat, secret-santa style 🎅), we will send a &lt;a href="https://www.amazon.com/Art-Snowflake-Photographic-Album/dp/076034700X/"&gt;book of snowflake photographs&lt;/a&gt; to adorn your coffee table during the winter season. ❄️ &lt;/p&gt;

</description>
      <category>graphql</category>
      <category>nextjs</category>
      <category>netlify</category>
      <category>javascript</category>
    </item>
    <item>
      <title>Web Scraping Sprott U Fund with BS4 in 10 Lines of Code</title>
      <author>CincyBC</author>
      <pubDate>Wed, 24 Nov 2021 17:32:46 +0000</pubDate>
      <link>https://dev.to/cincybc/web-scraping-sprott-u-fund-with-bs4-in-10-lines-of-code-17fo</link>
      <guid>https://dev.to/cincybc/web-scraping-sprott-u-fund-with-bs4-in-10-lines-of-code-17fo</guid>
      <description>&lt;p&gt;I started my second career as a Nuclear Fuel Uranium trader around a decade ago. A few years in, I was frustrated with my company's refusal to upgrade systems beyond 7 spreadsheets with redundant information scattered throughout, so I started my journey learning about databases, data engineering, and learning how to automate things with Python. One of the datapoints I scrape currently as background, contextual data (until I get the time to put it into a component!) on my &lt;a href="//uraniumtech.app"&gt;uranium-focused dashboard&lt;/a&gt; is data scraped from the market newcomer, Sprott Uranium Fund's daily updated website. Here is tutorial on how I do it using Python Package &lt;code&gt;bs4&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First we import our packages&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we request the website using the requests package. If the response comes back successful &lt;code&gt;200&lt;/code&gt;, we use &lt;code&gt;BeautifulSoup&lt;/code&gt; to parse it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;url = 'https://sprott.com/investment-strategies/physical-commodity-funds/uranium/'
r = requests.get(url)
if r.status_code == 200:
    soup: BeautifulSoup = BeautifulSoup(r.content, "html.parser")
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Congratulations! You now have the webpage locally in your computer's memory. But how do we extract their share price and the volume of Uranium the fund is currently holding?&lt;/p&gt;

&lt;p&gt;You can go to that URL and open up the Developer's view to look at elements, look at the source code for the whole page in your browser, or use BeautifulSoup's &lt;code&gt;prettify()&lt;/code&gt; function to see it in your Jupyter Notebook with &lt;code&gt;print(soup.prettify()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You'll find the share price and Uranium volume about an 1/5 of the way down the page. Here is a sample of what I'm looking at:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="cell small-6 large-3 fundHeader_data"&amp;gt;
            &amp;lt;h3 class="fundHeader_title"&amp;gt;
             Premium/Discount
            &amp;lt;/h3&amp;gt;
            &amp;lt;div class="fundHeader_value"&amp;gt;
             -2.55%
            &amp;lt;/div&amp;gt;
            &amp;lt;!-- &amp;lt;div class="fundHeader_detail"&amp;gt;52 wk: &amp;lt;strong&amp;gt;$31.45 - $45.98&amp;lt;/strong&amp;gt;&amp;lt;/div&amp;gt;--&amp;gt;
           &amp;lt;/div&amp;gt;
           &amp;lt;div class="cell small-6 large-3 fundHeader_data"&amp;gt;
            &amp;lt;h3 class="fundHeader_title mt05"&amp;gt;
             Total lbs of U
             &amp;lt;sub&amp;gt;
              3
             &amp;lt;/sub&amp;gt;
             O
             &amp;lt;sub&amp;gt;
              8
             &amp;lt;/sub&amp;gt;
            &amp;lt;/h3&amp;gt;
            &amp;lt;div class="fundHeader_value"&amp;gt;
             40,780,707
            &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The values are stored in a &lt;code&gt;div class&lt;/code&gt; called "fundHeader_value." To get all of them and extract the ones with the share price and Uranium stocks, we use &lt;code&gt;BeautifulSoup&lt;/code&gt; &lt;code&gt;findall&lt;/code&gt; function storing it in a variable called &lt;code&gt;fund_values&lt;/code&gt; (a list).&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;fund_values = soup.find_all('div', class_='fundHeader_value')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The share price is the 4th value in that list, so you use Python list slice and call the contents function to get it in a way you can manipulate it in Python.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shareprice = fund_values[4].contents
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you print the variable shareprice, you'll get a lot of stuff you don't want in there.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;['\r\n                                    $US11.81\r\n                                                ', &amp;lt;span class="fundHeader_icon fundHeader_icon--pos"&amp;gt;&amp;lt;i data-feather="trending-up"&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/span&amp;gt;, '\n']
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;First thing, is that we want the contents of the first item in this list, so &lt;code&gt;shareprice[0]&lt;/code&gt;. We then want to get rid of the other stuff around it, namely white spaces and key returns. To make sure we're manipulating a string object, we can tell Python to recognize it as a string with &lt;code&gt;str(shareprice[0])&lt;/code&gt;. Python has a very powerful method for "stripping" away whitespace with &lt;code&gt;.strip()&lt;/code&gt;, so we call that after our string &lt;code&gt;str(shareprice[0]).strip()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That gives us $US11.81 as a string. If that's what you want, you can stop there, but if you want to put it into a chart or store it as a number in a database, you need to also get rid of the $US. Luckily, Python has another method for "replacing" the part of the string you don't want with nothing. You just have to put &lt;code&gt;.replace('$US','')&lt;/code&gt; on it and it returns 11.81.&lt;/p&gt;

&lt;p&gt;That was a long explanation for one line of text, but it shows how concisely Python can get things done!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shareprice_value = str(shareprice[0]).strip().replace('$US','')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How about the Uranium volume? Easy...Rinse and repeat. The only difference is that it has commas instead of $US and is the 6th item in the list of &lt;code&gt;fund_values&lt;/code&gt;.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;u3o8 = fund_values[6].contents
u3o8_stock = str(u3o8[0]).strip().replace(',','')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So there you have it, you have scraped the fund's website in 10 lines of code (12 if you count the extra 2 for the Uranium Volumes).&lt;/p&gt;

&lt;p&gt;Raise my dopamine levels with a Like. I'll try to write more technical stuff here.&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;import requests
from bs4 import BeautifulSoup

url = 'https://sprott.com/investment-strategies/physical-commodity-funds/uranium/'
r = requests.get(url)
if r.status_code == 200:
    soup: BeautifulSoup = BeautifulSoup(r.content, "html.parser")

fund_values = soup.find_all('div', class_='fundHeader_value')
shareprice = fund_values[4].contents
shareprice_value = str(shareprice[0]).strip().replace('$US','')

u3o8 = fund_values[6].contents
u3o8_stock = str(u3o8[0]).strip().replace(',','')
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



</description>
      <category>python</category>
      <category>beautifulsoup</category>
      <category>dataengineering</category>
    </item>
    <item>
      <title>How to use scrolltrigger to construct an object? Animating Nezuko</title>
      <author>Tommy</author>
      <pubDate>Wed, 24 Nov 2021 16:55:29 +0000</pubDate>
      <link>https://dev.to/uttammarandi/how-to-use-scrolltrigger-to-construct-an-object-animating-nezuko-5f6a</link>
      <guid>https://dev.to/uttammarandi/how-to-use-scrolltrigger-to-construct-an-object-animating-nezuko-5f6a</guid>
      <description>&lt;p&gt;This animation looks pretty amazing but in reality it is pretty pretty easy. GSAP offers srolltrigger plugin which allows us to animate objects into the viewport and trigger animation based on scroll. Here, we not only want to trigger the animation but also connect the movement of elements to our scroll. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#setup"&gt;
  &lt;/a&gt;
  Setup
&lt;/h2&gt;

&lt;p&gt;I am using simple html and vanilla js for demonstration purposes. However gsap and scrolltrigger can be used in front-end frameworks like react and vue too.&lt;br&gt;
For setup, we only need to import the gsap and scrolltrigger package using cdn. And link our js and css file.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.8.0/gsap.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.8.0/ScrollTrigger.min.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="sr"&gt;/script&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As for html, I would highly recommend using svg instead of an image. For example, here I am animating the eyes, nose, dress and hairband. If I use svg object I don't need to style it using css. If you use image than you have to position each element of the object very carefully for it to resemble a complete object. But with svg each element is already positioned in their respective places.&lt;br&gt;
I cannot post the entire svg here because it's like 350 lines long. But I would share a screenshot of basic layout of the svg which is very important to understand how we are going to animate the svg.&lt;br&gt;
I found this svg in figma community. &lt;a href="https://www.figma.com/file/6abCcAz76OF2rigS2G1WXC/nezuko-kamado-(Community)?node-id=0%3A1"&gt;https://www.figma.com/file/6abCcAz76OF2rigS2G1WXC/nezuko-kamado-(Community)?node-id=0%3A1&lt;/a&gt;&lt;br&gt;
This guy is doing a great job.&lt;br&gt;
&lt;a href="https://www.figma.com/@sulaiman"&gt;https://www.figma.com/@sulaiman&lt;/a&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MuTpTGIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81a674rizkb6qtaiz88a.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MuTpTGIr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/81a674rizkb6qtaiz88a.PNG" alt="scrolltrigger , nezuko svg" width="670" height="468"&gt;&lt;/a&gt;&lt;br&gt;
As you can see in the above svg, each element like eyes,nose, dress and hairband are grouped and given an id. This will be used to target each element and animate them individually.&lt;br&gt;
Initial setup should look something like this...&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--py2aRkli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5d6rc7kwyq0ze06hhoh.PNG" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--py2aRkli--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t5d6rc7kwyq0ze06hhoh.PNG" alt="nezuko_inital_setup" width="880" height="434"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#setting-up-scrolltrigger"&gt;
  &lt;/a&gt;
  Setting up scrolltrigger
&lt;/h2&gt;

&lt;p&gt;First we need to register the scrolltrigger plugin in order for us to use it.&lt;br&gt;
Then we need to create a gsap timeline and pass an object containing scrolltrigger properties.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ScrollTrigger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gsap&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;scrollTrigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.nezuko&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottom center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;scrub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;trigger is the object which will trigger the animation. Now it's very crucial that you use the ".nezuko" class in the svg tag itself. If you set the trigger anywhere inside the svg, then the svg will disappear from viewport.&lt;br&gt;
start and end properties define the start and end of animation respectively.&lt;br&gt;
scrub set to true means that animation is dependent on the user scroll.&lt;br&gt;
pin set to true pins the target element and it will stay on viewport till animation is complete.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-trick"&gt;
  &lt;/a&gt;
  The trick
&lt;/h2&gt;

&lt;p&gt;The main trick to such animation is that we are not animating to the final object instead we are animating from the final object. Meaning it's quite difficult to construct all elements sequentially and get to the final object. But it is very simple if we define the final object first and animate each element into it.&lt;br&gt;
Of course user will have the previous experience where each element combines to construct the final object on scroll.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;gsap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerPlugin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ScrollTrigger&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;gsap&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;timeline&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;scrollTrigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="na"&gt;trigger&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.nezuko&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;center center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;bottom center&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;scrub&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="na"&gt;pin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.eye&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.nose&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.dress&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;.hairband&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;innerHeight&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;65.5&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That's it , 15 lines of code and you have your scroll animation constructing an object. We set the y value to certain times the innerHeight of viewport and each element animates from that position to the inital position.&lt;br&gt;
Here is our final result...&lt;br&gt;
&lt;a href="https://i.giphy.com/media/w0Th4h9qtKAN79n8Zo/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/w0Th4h9qtKAN79n8Zo/giphy.gif" width="480" height="264"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keypoints"&gt;
  &lt;/a&gt;
  Keypoints
&lt;/h2&gt;

&lt;p&gt;1.&lt;em&gt;Use svg :&lt;/em&gt; I cannot emphasis this more. Using svg will save your valuable time. Resizing each element and getting final object right using css is too much hassle. Also you have to take mobile responsiveness into account. With svg all these are handled.&lt;br&gt;
2.&lt;em&gt;Use medium size svg:&lt;/em&gt; The svg I used here is pretty big. 12645px * 16756px is too much. I used it because that's the only one available. If you use such big sizes than you have to multiply innerHeight to some crazy numbers like I have done above. Usually innerHeight multiplied to 1.5 to 2 will do the job.&lt;br&gt;
3.&lt;em&gt;Experiment:&lt;/em&gt; We can do pretty amazing things with gsap, scrolltrigger and scrub properties. Experiment with these to find the sweet spot for your animation. Sky is the limit.&lt;/p&gt;

&lt;p&gt;There you have it. Constructing sweet Nezuko with scroll animation. Btw.. Demon slayer is awesome. Can't wait for the whole manga to animate. Season 2 is streaming right now 😁.&lt;/p&gt;

&lt;p&gt;If you have any suggestion , do let me know in comments. Will you use it in your next project? Is there any other way to achieve the same animation? Waiting for your responses .....&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>gsap</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How Well-Architected Enables Junior Engineers</title>
      <author>Gerald Stewart</author>
      <pubDate>Wed, 24 Nov 2021 16:55:06 +0000</pubDate>
      <link>https://dev.to/aws-builders/how-well-architected-enables-junior-engineers-24j</link>
      <guid>https://dev.to/aws-builders/how-well-architected-enables-junior-engineers-24j</guid>
      <description>&lt;h1&gt;
  &lt;a href="#what-is-wellarchitected"&gt;
  &lt;/a&gt;
  What is Well-Architected 🤔
&lt;/h1&gt;

&lt;p&gt;Well-Architected describes the key concepts, design principles and architecture best practices for designing your cloud workloads. It balances best practices with business goals to determine the optimal outcome.&lt;/p&gt;

&lt;p&gt;Created by AWS Solutions Architects using the lessons Amazon has learnt from running thousands of systems at a massive scale, it enables developers to compare their workloads against the rigorous standards that AWS holds itself against.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#pillars-%F0%9F%8F%9B"&gt;
  &lt;/a&gt;
  Pillars 🏛
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--G4EBrhgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99a3r795l1vgh5w3wk4d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--G4EBrhgw--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/99a3r795l1vgh5w3wk4d.png" alt="image" width="880" height="653"&gt;&lt;/a&gt;&lt;br&gt;
&lt;em&gt;Credit to &lt;a href="https://www.awsgeek.com/The-5-Pillars-of-the-AWS-Well-Architected-Framework/"&gt;Jerry Hargrove&lt;/a&gt;&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Operational Excellence&lt;/strong&gt; - To be able to monitor and support workloads effectively, to enable continuous improvement and to deliver business value.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt; - Improving your security posture by taking advantage of Cloud technologies to protect your assets and systems.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability&lt;/strong&gt; - Ensuring your workload can perform it's intended function correctly and consistently.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance Efficiency&lt;/strong&gt; - Ensuring appropriate resource allocation to enable performant systems and a positive end user experience.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost Optimisation&lt;/strong&gt; - Ensuring you are delivering business value at the lowest possible cost.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#lenses"&gt;
  &lt;/a&gt;
  Lenses 🔎
&lt;/h2&gt;

&lt;p&gt;Lenses can be applied to a Well-Architected review to get additional specific questions targeting your type of application. Examples of lenses include Serverless, Machine Learning and SaaS. You can find more out about lenses &lt;a href="https://aws.amazon.com/architecture/well-architected/?wa-lens-whitepapers.sort-by=item.additionalFields.sortDate&amp;amp;wa-lens-whitepapers.sort-order=desc#AWS_Well-Architected_Lenses"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-to-apply-wellarchitected"&gt;
  &lt;/a&gt;
  How to Apply Well-Architected 👨‍🔧
&lt;/h1&gt;

&lt;p&gt;Well-Architected should be applied both continuously with reviews carried out at regular intervals. Understanding the pillars, core concepts and reasons behind the pillars of the Well-Architected framework can enable you to make better architecture decisions and avoid rewrites or large changes after a full-scale review has been carried out.&lt;/p&gt;

&lt;p&gt;The AWS Console has a "Well-Architected Tool" which allows you to track the health of your workloads. This is a free service and will ask questions based on your workload type to come up with an improvement plan.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#how-wellarchitected-enabled-me-as-a-junior-engineer"&gt;
  &lt;/a&gt;
  How Well-Architected Enabled Me as a Junior Engineer 🙋‍♂️
&lt;/h1&gt;

&lt;p&gt;As a junior engineer, being involved in design discussions can be a daunting experience.&lt;/p&gt;

&lt;p&gt;A few months ago, I took time to take a deep dive into the AWS Well-Architected framework. The knowledge I gained by doing this has been invaluable.&lt;/p&gt;

&lt;p&gt;Well-Architected is a gold standard for best practices for building on AWS. It can also be applied to other types of applications.&lt;/p&gt;

&lt;p&gt;Instead of forming opinions about how something should be done, referring to the Well-Architected framework can often yield an AWS backed approach.&lt;/p&gt;

&lt;p&gt;The key differentiator between Well-Architected and self-formed opinions is that Well-Architected is the opinion of AWS Solutions Architects with many years of experience. My own self-formed opinions are only based on my experiences, which at the beginning of my career are limited.&lt;/p&gt;

&lt;p&gt;Being able to point to documentation to back up your points is invaluable.&lt;/p&gt;

&lt;p&gt;By following Well-Architected principles and applying them in everything I did I found myself over time becoming more involved in design discussions and more high-level work.&lt;/p&gt;

&lt;p&gt;Well-Architected gave me the &lt;em&gt;right questions&lt;/em&gt; to ask, to &lt;em&gt;drive discussions&lt;/em&gt; so we could &lt;em&gt;make better choices&lt;/em&gt; in the day-to-day development of our application.&lt;/p&gt;

&lt;p&gt;When weighing up technical decisions, think &lt;strong&gt;Well-Architected&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Security&lt;/strong&gt; - Is this as secure as it could be, what's data are we storing, who has access?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Cost&lt;/strong&gt; - What's the potential cost impacts of this change, is it worth it, is the business aware?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Operational Excellence&lt;/strong&gt; - What monitoring do we need for this, what metrics should we be looking at, what level of fault tolerance should we allow?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Performance&lt;/strong&gt; - What will this do to performance, do we need to tweak/re-evaluate resource allocation as a result of this change?&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reliability&lt;/strong&gt; - What happens if this fails, if a downstream system is down?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Asking these questions and driving conversations led to me progressing pretty quickly to becoming a Senior Software Engineer. &lt;/p&gt;

&lt;p&gt;I had plenty of examples of how I identified improvements to our application that I identified by applying Well-Architected.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h1&gt;

&lt;p&gt;If I could recommend one topic of learning to a junior engineer or someone looking to up their game designing and building on AWS it would be to read the Well-Architected framework and understand how to apply it. &lt;/p&gt;

&lt;p&gt;If you or your team applies Well-Architected I'd love to hear how it made a difference to your application in the comments! &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#learning-materials-amp-links-%E2%9B%93"&gt;
  &lt;/a&gt;
  Learning Materials &amp;amp; Links ⛓
&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/architecture/well-architected/"&gt;AWS Well-Architected Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.aws.training/Details/Curriculum?id=42037"&gt;AWS Well-Architected E-Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/wellarchitected/latest/framework/welome.html"&gt;AWS Well-Architected Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/NFtZSvywRew?t=3073"&gt;My Well-Architected Talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>aws</category>
      <category>beginners</category>
      <category>cloud</category>
    </item>
    <item>
      <title>Import Excel file data to HTML table using jquery</title>
      <author>Hafeez PP </author>
      <pubDate>Wed, 24 Nov 2021 16:40:36 +0000</pubDate>
      <link>https://dev.to/haffz/import-excel-file-data-to-html-table-using-jquery-1f6</link>
      <guid>https://dev.to/haffz/import-excel-file-data-to-html-table-using-jquery-1f6</guid>
      <description>&lt;p&gt;I found many tutorial to export html table data to excel, But in this post you will learn how to  import Excel file data to HTML table using jquery.&lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/hafeez-pp/embed/XWjRqex?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;p&gt;Thank You 💙&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>html</category>
      <category>webdev</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>What lies in the .git folder? How are commits stored? Answered by Microsoft MVP &amp; author of SQL Source Control!</title>
      <author>Saurabh Rai</author>
      <pubDate>Wed, 24 Nov 2021 16:38:49 +0000</pubDate>
      <link>https://dev.to/srbhr/what-lies-in-the-git-folder-how-are-commits-stored-answered-by-microsoft-mvp-author-of-sql-source-control-1mld</link>
      <guid>https://dev.to/srbhr/what-lies-in-the-git-folder-how-are-commits-stored-answered-by-microsoft-mvp-author-of-sql-source-control-1mld</guid>
      <description>&lt;p&gt;&lt;strong&gt;The definitive deep dive into the .git folder&lt;/strong&gt; by Rob Richardson, author of SQL Server Source Control Basics, a Microsoft MVP, and a frequent Speaker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Git&lt;/strong&gt; &lt;em&gt;--everything-is-local!&lt;/em&gt;&lt;br&gt;
From writing code, to branching-creating PRs to merging. For our everyday collaborative development tasks. Git has become an essential tool, surpassing other SCM tools. Being lightweight with fast performance, git has a lot of features. And with every every locat git repository there comes a .git folder. Where all the essential data is stored about the ongoing project! &lt;/p&gt;

&lt;p&gt;We've all been using Github and are very familiar with the .git folder. &lt;strong&gt;But how things operate inside it? What's in the .git folder? How are commits stored?&lt;/strong&gt; How do branches work? We'll dive deep into the objects folder, unpack commits, look at the types of DAG nodes, examine object content, and build a complete visualization of the stored content. We'll also quickly look through Git hooks, Git config, and ref logs. Come experience the zen of git at &lt;a href="https://gitcommit.show/"&gt;Git Commit Show.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;🌟Join our Discord Server for an amazing QnA &lt;a href="https://discord.gg/JFWP8c2gPG"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;✨ Get your tickets to the event &lt;a href="http://push.gitcommit.show/"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;⏲Check the schedule &lt;a href="https://gitcommit.show/schedule/index.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;About &lt;strong&gt;Rob Richardson&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;He is a software craftsman building web properties in ASP.NET and Node, React and Vue JS. &lt;/li&gt;
&lt;li&gt;A Microsoft MVP, published author, frequent speaker at conferences, user groups, and community events. A diligent teacher and student of high quality software development.&lt;/li&gt;
&lt;li&gt;He often speaks at various conferences and Loves to talk and share his knowledge on Open Source 💚!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IlQem0Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlh4gol2eje8r8iy4bu.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IlQem0Je--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8wlh4gol2eje8r8iy4bu.png" alt="Image description" width="880" height="880"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>programming</category>
      <category>opensource</category>
      <category>github</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What's different about Amazon Linux 2022?</title>
      <author>Stephen Sennett</author>
      <pubDate>Wed, 24 Nov 2021 15:49:08 +0000</pubDate>
      <link>https://dev.to/aws-builders/whats-different-about-amazon-linux-2022-ilb</link>
      <guid>https://dev.to/aws-builders/whats-different-about-amazon-linux-2022-ilb</guid>
      <description>&lt;p&gt;&lt;a href="https://aws.amazon.com/linux/amazon-linux-2022/"&gt;&lt;strong&gt;Amazon Linux 2022&lt;/strong&gt;&lt;/a&gt; was recently opened to Public Preview during pre:Invent 2021. There's a lot of interesting nuances compared to &lt;a href="https://aws.amazon.com/amazon-linux-2/"&gt;Amazon Linux 2&lt;/a&gt;, so I wanted to consolidate the differences and provide some personal opinions.&lt;/p&gt;

&lt;p&gt;This was also all written at time of the announcement of Public Preview, so things are liable to change ahead of General Availability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#built-on-fedora-instead-of-centos"&gt;
  &lt;/a&gt;
  Built on Fedora instead of CentOS
&lt;/h2&gt;

&lt;p&gt;Amazon Linux has traditionally been built around &lt;a href="https://www.centos.org/"&gt;CentOS&lt;/a&gt;. With the transition from its standard release cycle to &lt;a href="https://www.centos.org/cl-vs-cs/"&gt;CentOS Stream&lt;/a&gt;, Amazon has decided transition to using Fedora as the base for Amazon Linux 2022, with the kernel from the Linux LTS versions.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--PxFuRB4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3bon6y836ttirze8n3j.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--PxFuRB4S--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/z3bon6y836ttirze8n3j.png" alt="Terminal Window showing SSH into an instance running AL2022, showing results of 'cat /etc/os-release'" width="825" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Personal opinion: CentOS Stream is a bad choice for production use, and Amazon made a good decision to not try and shoe-horn it into Amazon Linux. Fedora also makes sense since it was already the upstream origin of CentOS anyway, so we're still in the same ecosystem. We've just cut out a few steps.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--47lIprdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l804fie1f3589v8q8xh8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--47lIprdP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/l804fie1f3589v8q8xh8.png" alt="Lineage of Amazon Linux 2 Upstream versus Amazon Linux 2022" width="251" height="251"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Fedora has a well-established lineage, and with the other changes Amazon has made in relation to the OS, it's arguably one of the best choices they could make. But one thing seems to puzzle people:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://rockylinux.org/"&gt;Rocky Linux&lt;/a&gt; is a newer distribution in the Linux Family, intended by the community as a successor to CentOS and its original intent. It's also backed by AWS, among others, including traditional rivals like Microsoft Azure and Google Cloud.&lt;/p&gt;

&lt;p&gt;"Why not base Amazon Linux 2022 on Rocky?". I can only speculate, but being a relatively new distribution, and intended for use by Amazon's customers, who are primarily businesses, the longer-term stability and reliability of Fedora, along with being closer to the top of the stream probably makes the most strategic sense in November 2021.&lt;/p&gt;

&lt;p&gt;In future? It wouldn't entirely surprise me if we have Amazon Linux 2024 powered by Rocky Linux (heard here first!), but nothing yet guaranteed.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#release-cycle"&gt;
  &lt;/a&gt;
  Release Cycle
&lt;/h2&gt;

&lt;p&gt;One thing that distinguishes Amazon Linux 2022 from Fedora is its release cycle. Amazon have announced a &lt;a href="https://docs.aws.amazon.com/linux/al2022/ug/release-cadence.html"&gt;release cycle&lt;/a&gt; of a new major version every two years, minor versions every three months with LTS for five years.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pknmTdvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg9fes82jyua0y0clj3a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pknmTdvR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hg9fes82jyua0y0clj3a.png" alt="Version lifecycle described above" width="762" height="239"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In a world of daily builds and releases, five years might sound like a long time. But in the world of operating systems and servers, it's truly not. Since a server's OS should be in support for the life of the server being in production, that means the deployment effectively won't be safe to use beyond five years when the security updates cease.&lt;/p&gt;

&lt;p&gt;So, is five years long enough? My opinion: Yes, if your solutions are built for it.&lt;/p&gt;

&lt;p&gt;Building modern cloud-native applications, where the underlying servers are treated purely as cattle, and it's being actively developed and maintained? Sure, five years is good. You effectively have major n+2 until support stops, and will probably be able to keep pace.&lt;/p&gt;

&lt;p&gt;If you're looking at running long-term applications that may not be under active development? Then you'd want to prioritize support cycle even further.&lt;/p&gt;

&lt;p&gt;To the very best of my knowledge, and based on &lt;a href="https://linuxlifecycle.com/"&gt;linuxlifecycle.com&lt;/a&gt;, without paying for RHEL or SUSE, five years is as long as you're going to get in support for a Linux distribution nowadays (except Ubuntu for personal use). And if you truly need it, forking out for RHEL is may still worth it for that.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#version-locking"&gt;
  &lt;/a&gt;
  Version Locking
&lt;/h2&gt;

&lt;p&gt;Latest versions aren't always the best. When running a fleet of servers using heterogeneous versions of software, you can end up with very unusual problems. Instead, you have full power to control the versioning of the repository.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--A6W-ElE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b06xq8swbw6iw9tcjcm1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--A6W-ElE7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b06xq8swbw6iw9tcjcm1.png" alt="Terminal window showing SSH looking at the AL2022 repository and using supportinfo using the dnf utility" width="825" height="598"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By &lt;a href="https://docs.aws.amazon.com/linux/al2022/ug/version-locking.html"&gt;locking to a specific version&lt;/a&gt; of the Amazon Package Repository, this means you should have a very predictable and consistent experience, regardless of what your servers are doing.&lt;/p&gt;

&lt;p&gt;There is one very interesting thing worth mentioning: &lt;strong&gt;Security Updates aren't installed by default upon launch&lt;/strong&gt;. Sysadmins breathe out, Infosec breathes in.&lt;/p&gt;

&lt;p&gt;Security Updates are a vital part of server management, and cannot be ignored, especially in production environments. But, and sysadmins will know this in their bones, Security Updates can break stuff. Not often, but it does happen. And arbitrary updates can decrease that predictability.&lt;/p&gt;

&lt;p&gt;The same principle works both ways: &lt;strong&gt;You control the patching&lt;/strong&gt;. For better, and worse, it's in your hands. But this isn't a new concept.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#selinux-enforced-by-default"&gt;
  &lt;/a&gt;
  SELinux - Enforced by Default
&lt;/h2&gt;

&lt;p&gt;Plenty of people probably groaned at the sound of this. Yes, SELinux makes stuff less permissive, but that's the whole point, and it's 2021 for goodness sake. Indeed, there are still applications out there where the developers will specify "SELinux has to be disabled for this to work".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Huy6M411--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr7es58g0xt9fh5zdxrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Huy6M411--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hr7es58g0xt9fh5zdxrq.png" alt="Terminal window showing SSH using SELinux" width="825" height="546"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For context, Security-Enhanced Linux (SELinux) is an enhancement to the Linux kernel to provide finer-grained access control within the OS. This helps contain individual programs and daemons. For example, if a single machine ran both a web server and a database server, SELinux helps ensure the database couldn't be compromised, even if someone exploited the web server daemon.&lt;/p&gt;

&lt;p&gt;SELinux of 2021 is not SELinux of the 2000's - it's come a long way since then. The tooling is much better, and one of the nice things about more atomic servers is that there's a lot less cases of servers trying to run half a dozen different services, since compute was at a premium.&lt;/p&gt;

&lt;p&gt;At the end of the day, yes, you can disable enforcement. But the amount of resources to make it easier now is remarkable, much of the bad reputation is dated, and I seriously doubt you have a good reason to disable SELinux in modern deployments.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-about-amazon-linux-2"&gt;
  &lt;/a&gt;
  What about Amazon Linux 2?
&lt;/h2&gt;

&lt;p&gt;Amazon Linux 2 is due to reach the end of LTS Support by June 30, 2023 &lt;a href="https://aws.amazon.com/amazon-linux-2/faqs/"&gt;according to its FAQ&lt;/a&gt;. There's nothing in this announcement to suggest that this will be changed, and I seriously doubt they would move the date forward. Although if you're running workloads on it, it's soon going to be time to think about "where to next?".&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QxTsBxoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06tywetfdourlsiethys.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QxTsBxoK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06tywetfdourlsiethys.png" alt="Excerpt from Amazon Linux 2 FAQ showing the end of support date" width="880" height="497"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The upgrade path, not too surprisingly given the difference in architecture, is "replace and rebuild". Their FAQ promises an in-place upgrade guide once AL2022 reaches GA, which given the architecture differences would be a sight to behold.&lt;/p&gt;

&lt;p&gt;So with only 19 months or so until the end of support for Amazon Linux 2, you probably want to have a new OS designated by December 2022 at the latest; hopefully by which time, AL2022 should be much more mature, and stable in GA.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion?
&lt;/h2&gt;

&lt;p&gt;"It isn't Red Hat!". Nope, nor is it trying to be. It's not the ultra-stable enterprise distribution with decade-plus support. But it's not trying to be a replacement for Red Hat; just a well-built stable operating system for cloud-native deployments.&lt;/p&gt;

&lt;p&gt;With a few bugs already bubbling up on the Twittersphere, there's still work to be done, and they're opting to track bugs and feature requests through the &lt;a href="https://github.com/amazonlinux/amazon-linux-2022"&gt;amazon-linux-2022&lt;/a&gt; GitHub repository.&lt;/p&gt;

&lt;p&gt;If you're already running Amazon Linux 2 or a similar Fedora-based built, including CentOS, once it's released to GA, AL2022 may be a worthwhile solution for several years.&lt;/p&gt;

</description>
      <category>aws</category>
      <category>linux</category>
    </item>
    <item>
      <title>Personalised GitHub profile</title>
      <author>Jurga Gi</author>
      <pubDate>Wed, 24 Nov 2021 15:42:26 +0000</pubDate>
      <link>https://dev.to/jurgyte/personalised-github-profile-2bd9</link>
      <guid>https://dev.to/jurgyte/personalised-github-profile-2bd9</guid>
      <description>&lt;p&gt;Not so long ago I attended a personal branding workshop (it's quite popular topic these days). My mentor inspired me to unify my presence across internet. The idea behind it was to make me easily recognisable across the most common platforms such as Twitter, Github or LinkedIn. I found this task very fun and creative. Mostly it was changing my nickname and photo but it also involved some very very simple coding which was a double fun for me. I made my GitHub profile look more attractive. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1CXK_Hez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dvvanexosb0hjyvnc3b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1CXK_Hez--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1dvvanexosb0hjyvnc3b.png" alt="My profile image" width="880" height="672"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To customise your GitHub profile looks you need to create a README for it. It's very easy to do. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a repository with a name that matches your GitHub username. &lt;/li&gt;
&lt;li&gt;Make sure this repository is public. &lt;/li&gt;
&lt;li&gt;Add a file named README.md in its root. Any content in this file will display in your profile README section.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The biggest challenge for me was to find the answer to the question: what should I add to this README? &lt;a href="https://docs.github.com/en/account-and-profile/setting-up-and-managing-your-github-profile/customizing-your-profile/managing-your-profile-readme"&gt;GitHub&lt;/a&gt; has some suggestions such as to add an "About me" section that describes your work and interests, contributions you're proud of, guidance on communities where you're involved. But there are even more things you can add, for example &lt;a href="https://github.com/anuraghazra/github-readme-stats#github-stats-card"&gt;widgets&lt;/a&gt; in order to show stats on your GitHub activity or your most used programming languages.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/b9f90b1d6fe362d60baca13304e88cd983f95da54f8cc41396bc4debbe8e4c59/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d616e7572616768617a726126696e636c7564655f616c6c5f636f6d6d6974733d74727565" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/b9f90b1d6fe362d60baca13304e88cd983f95da54f8cc41396bc4debbe8e4c59/68747470733a2f2f6769746875622d726561646d652d73746174732e76657263656c2e6170702f6170693f757365726e616d653d616e7572616768617a726126696e636c7564655f616c6c5f636f6d6d6974733d74727565" alt="Stats block image" width="495" height="195"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can add small &lt;a href="https://shields.io/category/build"&gt;badges&lt;/a&gt; to show various information such as how many visitors you had, how many bugs you fixed, any kind of important ratings or number pf social channel followers and etc. Adding a badge is very simple, you just need to use this code&lt;br&gt;
&lt;code&gt;![](https://img.shields.io/{URL_OF_THE_BADGE_WITH_PARAMS})&lt;/code&gt; in your README.md file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIZdfl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcdc9vpfh6v1bjk3mixt.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mhIZdfl7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mcdc9vpfh6v1bjk3mixt.png" alt="Badge example" width="232" height="58"&gt;&lt;/a&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F0B7bH1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kghywekar4sa4ja9obr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F0B7bH1A--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5kghywekar4sa4ja9obr.png" alt="Badge example" width="274" height="70"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also checked few &lt;a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme"&gt;list&lt;/a&gt; with inspirational GitHub profiles and this &lt;a href="https://towardsdatascience.com/build-a-stunning-readme-for-your-github-profile-9b80434fe5d7"&gt;blog&lt;/a&gt; post with few suggestions.&lt;/p&gt;

&lt;p&gt;In the end I decided to keep my profile simple to mark what are the most important activities I do across internet, I marked the tools I use daily and added a small widget to see how many people visit my GitHub profile (something fun for myself).&lt;/p&gt;

</description>
      <category>github</category>
      <category>readme</category>
      <category>personalised</category>
      <category>profile</category>
    </item>
    <item>
      <title>How to use IndexedDB to store local data for your web application</title>
      <author>Alex E</author>
      <pubDate>Wed, 24 Nov 2021 15:39:19 +0000</pubDate>
      <link>https://dev.to/alexeagleson/how-to-use-indexeddb-to-store-data-for-your-web-application-in-the-browser-1o90</link>
      <guid>https://dev.to/alexeagleson/how-to-use-indexeddb-to-store-data-for-your-web-application-in-the-browser-1o90</guid>
      <description>&lt;p&gt;If you would like to fork this project, the code and tutorial is available on &lt;a href="https://github.com/alexeagleson/template-indexeddb"&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you are interested in a video version of this tutorial, check out the link below. You can follow along with the code in this blog.  &lt;em&gt;(The video is entirely optional, every step and instruction is covered in the blog post.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://youtu.be/yZ26CXny3iI"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TD9nd5rK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://img.youtube.com/vi/yZ26CXny3iI/0.jpg" alt="IndexedDB Tutorial" width="480" height="360"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="#what-is-indexeddb"&gt;What is IndexedDB?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#important-terms"&gt;Important Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-use-indexeddb"&gt;How to use IndexedDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#browsing-your-database"&gt;Browsing your Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#updating-and-removing-data"&gt;Updating and Removing Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#limitations"&gt;Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#further-learning"&gt;Further Learning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#wrapping-up"&gt;Wrapping Up&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#what-is-indexeddb"&gt;
  &lt;/a&gt;
  What is IndexedDB?
&lt;/h2&gt;

&lt;p&gt;IndexedDB is an in-browser database that you can use to store large quantities of data to support your web page or web app. The information is stored using a simple key-value pair similar to the way you may already be familiar with using Javascript objects.&lt;/p&gt;

&lt;p&gt;If you are just looking for the simplest possible way to store some data on the users's side that will survive through browser refreshes and closes, then you may be better off starting with the simple &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"&gt;local storage&lt;/a&gt; API.  Local storage supports up to 5MB of data with simple key-value pairs like Javascript objects.&lt;/p&gt;

&lt;p&gt;However if you are interested in learning about a much more robust and feature-rich client side storage method that supports many of the same features as a real full fledged database system -- then IndexedDB may be the right choice for you.  &lt;/p&gt;

&lt;p&gt;IndexedDB is supported in most modern browsers and allows you to  store up to 50% of a user's free hard drive space (before the browser will begin dropping data).  To better understand the restrictions for storage and space with IndexedDB MDN has a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Browser_storage_limits_and_eviction_criteria"&gt;great resource&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#important-terms"&gt;
  &lt;/a&gt;
  Important Terms
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#database"&gt;
  &lt;/a&gt;
  Database
&lt;/h3&gt;

&lt;p&gt;A database is an &lt;em&gt;organized&lt;/em&gt; collection of data.  Whereas something comparable like the hard drive on your computer might be optimized to store large amounts of mostly unorganized data that is searched occasionally, a database instead assumes the data will be searched for frequently and is optimized to make sure these searches are as fast as possible.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#schema"&gt;
  &lt;/a&gt;
  Schema
&lt;/h3&gt;

&lt;p&gt;The &lt;em&gt;schema&lt;/em&gt; of your database refers to the shape of your data.  For example we will be using a database that keeps track of &lt;em&gt;cars&lt;/em&gt; in our example.  There are endless different pieces of information you could imagine that relate to cars: colour, make, model, condition, trim, VIN, year, etc.&lt;/p&gt;

&lt;p&gt;Our schema defines which of these properties are tracked and stored in our database.  So in our example we are only using &lt;em&gt;colour&lt;/em&gt; and &lt;em&gt;make&lt;/em&gt;.  We also have an &lt;em&gt;id&lt;/em&gt; value that serves as a way to identify objects in our database.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#index"&gt;
  &lt;/a&gt;
  Index
&lt;/h3&gt;

&lt;p&gt;An &lt;em&gt;index&lt;/em&gt; in database terminology is just like an index you would use at the end of a book.  It is a basically a map of one set of values to another set.  &lt;/p&gt;

&lt;p&gt;At the end of a book an index is a map of words to page numbers.  They allow you as the reader to have the ability to quickly find concepts you are looking for without having to look through the book page by page.&lt;/p&gt;

&lt;p&gt;The concept is exactly the same for computers.  When looking at a huge database, without any index, your search will start at the very beginning and look at absolutely everything until it finds what it's looking for.  Adding an &lt;em&gt;index&lt;/em&gt; will create a structure in memory that makes those lookups faster and easier.  An index takes up space in memory, so they are often considered to be a tradeoff of space vs. speed.  In most cases, that tradeoff is well worth it.&lt;/p&gt;

&lt;p&gt;The most common use of an index in a database is on the &lt;em&gt;primary key&lt;/em&gt; which is something unique (like an ID number) about the item stored in your database.  For cars it might be the VIN, for books the ISBN, etc, etc.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#transaction"&gt;
  &lt;/a&gt;
  Transaction
&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;transaction&lt;/em&gt; in database context is an operation or multiple operations that must all run successfully, otherwise none of them will be run at all.  &lt;/p&gt;

&lt;p&gt;To understand why transactions are necessary, the most common example is transferring money between accounts in a bank database.  A transfer operation includes both &lt;code&gt;remove money&lt;/code&gt; from one account and &lt;code&gt;add money&lt;/code&gt; to another.  If the &lt;code&gt;add money&lt;/code&gt; operation fails for any reason, you also need the &lt;code&gt;remove money&lt;/code&gt; operation to fail as well, otherwise you would end up with a pretty nasty scenario where the money is simply "gone".&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#cursor"&gt;
  &lt;/a&gt;
  Cursor
&lt;/h3&gt;

&lt;p&gt;A &lt;em&gt;cursor&lt;/em&gt; represents your current position when viewing the data in your database.  Cursors in IndexedDB can be used on entire object stores or even indexes that have been limited to a certain type of documents.  They offer the ability to iterate from one document to the next within the database rather than having to query all the data and store it in memory on the client application (in this case, our Javascript program).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-use-indexeddb"&gt;
  &lt;/a&gt;
  How to use IndexedDB
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// 1&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;indexedDB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexedDB&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mozIndexedDB&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;webkitIndexedDB&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msIndexedDB&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
  &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;shimIndexedDB&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;indexedDB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;IndexedDB could not be found in this browser.&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// 2&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;indexedDB&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;CarsDatabase&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;IndexedDB can potentially be referred to by different names depending on which browser you are using.  Fortunately they all have the same API, so this will simply hop through a list of all possibilities until it finds one that exists and save it in your indexedDB variable.  If one is not found, a message will be sent to the log and the rest of the code will fail.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Makes an "open" request to the database &lt;em&gt;version 1&lt;/em&gt;. The first parameter is the name you want to call your DB and the second parameter is the version. If you decide to update the structure later you can increment this number to ensure all users are using the latest version of the schema.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Next we need to listen for different possible &lt;em&gt;events&lt;/em&gt; that can occur when an open request is made. The possible events are &lt;code&gt;success&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt; and &lt;code&gt;upgradeneeded&lt;/code&gt;. Let's begin by handling the error case:&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#error-event"&gt;
  &lt;/a&gt;
  Error Event
&lt;/h3&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onerror&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;An error occurred with IndexedDB&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The most likely error you may encounter is if you are running your browser in &lt;strong&gt;private&lt;/strong&gt; or &lt;strong&gt;incognito&lt;/strong&gt; modes, IndexedDB may not be supported. Be sure to disable those modes if you are using IndexedDB.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#upgradeneeded-event"&gt;
  &lt;/a&gt;
  Upgradeneeded Event
&lt;/h3&gt;

&lt;p&gt;This event fires when either the database version number is incrementing, or a new database is being created. &lt;/p&gt;

&lt;p&gt;Whenever this occurs you need to define the shape of the database. So we will do that here:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onupgradeneeded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;//1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;//2&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createObjectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;keyPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;id&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//3&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars_colour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;// 4&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colour_and_make&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;make&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt; 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll break it down line by line to understand each piece:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The result of the request is the database object itself.  We are inside the &lt;code&gt;onupgradeneeded&lt;/code&gt; event so we can assume the database exists, otherwise the &lt;code&gt;onerror&lt;/code&gt; function would have triggered.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IndexedDB works with the concept of &lt;em&gt;object stores&lt;/em&gt;.  These are essentially names of collections of data.  You can have as many of these as you like in a single database.  Think of them like &lt;em&gt;tables&lt;/em&gt; or &lt;em&gt;collections&lt;/em&gt; if you have used other databases with those terms.  &lt;code&gt;keyPath&lt;/code&gt; is the name of the field on the object that IndexedDB will use to identify it.  Typically this is a unique number.  &lt;/p&gt;

&lt;p&gt;You can also add the &lt;code&gt;autoincrement: true&lt;/code&gt; to have it set to a unique id manually that you don't need to set yourself.  The first item you insert would have an &lt;code&gt;id&lt;/code&gt; of 0, then second item and &lt;code&gt;id&lt;/code&gt; of 1, and so on.  &lt;/p&gt;

&lt;p&gt;We are going to use cars an an example, so I have named my object store &lt;code&gt;cars&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adding &lt;a href="#index"&gt;indexes&lt;/a&gt; allows us to search inside of our object store by specific terms aside from just the value defined as the &lt;code&gt;keyPath&lt;/code&gt;.  This index will allow us to search for car objects by their &lt;code&gt;colour&lt;/code&gt; property (pardon the Canadian spelling).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Similar you can create what are called &lt;em&gt;compound indexes&lt;/em&gt; which are indexes that can lookup with a combination of more than one term.  In this case it will allow us to find cars providing both the make and colour.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now that we have established out &lt;a href="#schema"&gt;schema&lt;/a&gt; we are ready to add data and query to find it.  This can be done once the database is open, which will be confirmed when the &lt;code&gt;success&lt;/code&gt; event triggers.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Database opened successfully&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// 1&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;readwrite&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//2&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;objectStore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colourIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;cars_colour&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;makeModelIndex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;colour_and_make&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;//3&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Toyota&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Kia&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Honda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;colour&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Silver&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;make&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Subaru&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;

  &lt;span class="c1"&gt;//4&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;idQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colourQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colourIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;colourMakeQuery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeModelIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Blue&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Honda&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

  &lt;span class="c1"&gt;// 5&lt;/span&gt;
  &lt;span class="nx"&gt;idQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;idQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;idQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;colourQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;colourQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;colourQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="nx"&gt;colourMakeQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;colourMakeQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;colourMakeQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;

  &lt;span class="c1"&gt;// 6&lt;/span&gt;
  &lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oncomplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In order to perform any operation on our DB we must create a &lt;a href="#transaction"&gt;transaction&lt;/a&gt;.  A transaction can be a single operation or multiple operations that must all succeed, otherwise none of them will.  Further down we will add four "cars" to our database one by one, but if any of those inserts failed for any reason then all four of them would fail because they happen on this single transaction we have created.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here we need to ge ta reference to our object store that holds the cars.  We also get a reference to our indexes.  These are simply just getting references to the values that we created on the database in the previous section.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;put&lt;/code&gt; method on an object store is how we add data to our database.  Based on the schema we created we will add a bunch of objects (cars).  The ID I have given them is simply a unique number, you can also use the &lt;em&gt;autoincrement&lt;/em&gt; value described previously when creating the object store to avoid having to set this value manually.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These are our queries.  You can always query an item directly with the value of your &lt;code&gt;keyPath&lt;/code&gt; as we have here on the first line.  On our second line we use the &lt;code&gt;getAll&lt;/code&gt; method which will return an array with every result it finds.  We are searching against our &lt;code&gt;cars_colour&lt;/code&gt; index for "Red".  We should expect to find two results.  The final line searches for one result against our compound index for any vehicle with a colour of "Blue" and a make of "Honda".&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;These are &lt;code&gt;success&lt;/code&gt; event handlers, they will fire when the query finishes and run whatever code is inside of them.  They will not fire until the &lt;code&gt;result&lt;/code&gt; value is populated on the query so it is safe to check it, as we do in these functions by logging it to the console.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, since this is our only operation we will close our connection to the database when the transaction finishes.  You don't need to manually fire the transaction with IndexedDB it will simply run on its own.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you take each of the above code (every sample block in the examples into a &lt;code&gt;.js&lt;/code&gt; file and run it in the browser (with private/incognito modes off) your results will look like.  Take note of each of the logged values matching what we queried for.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--TwLrLXIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637686766/blogs/indexeddb/indexeddb-example_lsbrvi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TwLrLXIJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637686766/blogs/indexeddb/indexeddb-example_lsbrvi.png" alt="IndexedDB Example" width="456" height="144"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#browsing-your-database"&gt;
  &lt;/a&gt;
  Browsing your Database
&lt;/h2&gt;

&lt;p&gt;Browsers make it trivially simple to view the contents of your store.  First open up the developer console with &lt;code&gt;F12&lt;/code&gt;.  &lt;/p&gt;

&lt;p&gt;On Chrome you will find it under the &lt;code&gt;Application&lt;/code&gt; -&amp;gt; &lt;code&gt;Storage&lt;/code&gt; -&amp;gt; &lt;code&gt;IndexedDB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3qk6iEjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637686833/blogs/indexeddb/indexeddb-chrome_lyisrf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3qk6iEjC--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637686833/blogs/indexeddb/indexeddb-chrome_lyisrf.png" alt="IndexedDB Chrome" width="877" height="368"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On Firefox it's under &lt;code&gt;Storage&lt;/code&gt; -&amp;gt; &lt;code&gt;Indexed DB&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1MXxkAPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637686846/blogs/indexeddb/indexeddb-firefox_ahbaei.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1MXxkAPa--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637686846/blogs/indexeddb/indexeddb-firefox_ahbaei.png" alt="IndexedDB Firefox" width="880" height="228"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#updating-and-removing-data"&gt;
  &lt;/a&gt;
  Updating and Removing Data
&lt;/h3&gt;

&lt;h4&gt;
  &lt;a href="#update"&gt;
  &lt;/a&gt;
  Update
&lt;/h4&gt;

&lt;p&gt;First you want to fetch the data you plan to update with &lt;code&gt;get&lt;/code&gt; and then use the &lt;code&gt;put&lt;/code&gt; method on the store to update the existing record.  &lt;em&gt;Put&lt;/em&gt; is a "insert &lt;em&gt;OR&lt;/em&gt; update" method in that it will either overwrite existing data, or insert new data if it doesn't already exist.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;subaru&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;subaru&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;subaru&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;colour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Green&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;put&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;subaru&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will update the colour of the silver Subaru in your database to green.  &lt;/p&gt;

&lt;h4&gt;
  &lt;a href="#remove"&gt;
  &lt;/a&gt;
  Remove
&lt;/h4&gt;

&lt;p&gt;Data in IndexedDB can be deleted with an API similar to how it is queried.  The simplest method is to delete an entry directly by its known key:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteCar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;deleteCar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red Toyota has been removed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you don't know the key and want to remove based on the value of one of your indexes, you can do that too:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;redCarKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;colourIndex&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getKey&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

&lt;span class="nx"&gt;redCarKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;deleteCar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;store&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;redCarKey&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="nx"&gt;deleteCar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onsuccess&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Red car has been removed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;em&gt;(If you want to try these out with the initial sample project, you can paste these code snippets immediately before this line:)&lt;/em&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;transaction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;oncomplete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Your result will be:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wECqF3xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637767489/blogs/indexeddb/indexeddb-update-data_pa5ctb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wECqF3xD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/dqse2txyi/image/upload/v1637767489/blogs/indexeddb/indexeddb-update-data_pa5ctb.png" alt="Update IndexedDB Data" width="690" height="125"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#limitations"&gt;
  &lt;/a&gt;
  Limitations
&lt;/h2&gt;

&lt;p&gt;There are a couple limitations to be aware of when using IndexedDB.&lt;/p&gt;

&lt;p&gt;The first is relevant to any client-side storage solution you might use, in that you should not ever rely on it existing for your application to function.  Remember that the user can clear their private data and storage at any time.  Any data you save should always be &lt;em&gt;supplementary&lt;/em&gt; to your application and easy to replace if removed.&lt;/p&gt;

&lt;p&gt;The second is related to performance.  IndexedDB is known to be quite fast on inserting reasonably large quantities of data on a single transaction, but can slow down significantly when these inserts/updates are made across multiple transactions.&lt;/p&gt;

&lt;p&gt;The solution is to simply be aware of this limitation and ensure you are developing your application to batch data modifications into as few transactions as possible.  If that is not possible, take the time to research and considered if IndexedDB is the right tool for your project.  There are &lt;a href="https://rxdb.info/"&gt;alternatives&lt;/a&gt; out there.  &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#further-learning"&gt;
  &lt;/a&gt;
  Further Learning
&lt;/h2&gt;

&lt;p&gt;There is even more to IndexedDB than is covered in this beginner's tutorial.  For example if you intend to store large amounts of data, potentially more than some users would be able to store in memory off a single query you will be interested in the concept of &lt;a href="https://javascript.info/indexeddb#cursors"&gt;cursors&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Both javascript.info and MDN cover IndexedDB extremely in-depth, check them out if you want to go deeper with INdexedDB:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://javascript.info/indexeddb"&gt;IndexedDB on javascript.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB"&gt;IndexedDB on MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#wrapping-up"&gt;
  &lt;/a&gt;
  Wrapping Up
&lt;/h2&gt;

&lt;p&gt;Please check some of my other learning tutorials.  Feel free to leave a comment or question and share with others if you find any of them helpful:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/how-to-create-and-publish-a-react-component-library-2oe"&gt;How to Create and Publish a React Component Library &lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-running-a-local-web-server-4d8g"&gt;Running a Local Web Server&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-linters-eslint-59pm"&gt;ESLint&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-prettier-214j"&gt;Prettier&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/building-a-modern-web-stack-babel-3hfp"&gt;Babel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-react-with-and-without-jsx-31c7"&gt;React &amp;amp; JSX&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-1-2mn1"&gt;Webpack: The Basics&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-part-2-49bj"&gt;Webpack: Loaders, Optimizations &amp;amp; Bundle Analysis&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://dev.to/alexeagleson/understanding-the-modern-web-stack-webpack-devserver-react-typescript-4b9b"&gt;Webpack: DevServer, React &amp;amp; Typescript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;For more tutorials like this, follow me &lt;a href="https://twitter.com/eagleson_alex?ref_src=twsrc%5Etfw"&gt;@eagleson_alex&lt;/a&gt; on Twitter&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>database</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
  </channel>
</rss>
