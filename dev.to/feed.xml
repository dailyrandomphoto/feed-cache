<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Best Tool To Design Graphics Instantly</title>
      <author>GoOnlineTools</author>
      <pubDate>Mon, 26 Apr 2021 15:33:21 +0000</pubDate>
      <link>https://dev.to/goonlinetools/best-tool-to-design-graphics-instantly-2g3c</link>
      <guid>https://dev.to/goonlinetools/best-tool-to-design-graphics-instantly-2g3c</guid>
      <description>&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Today in this post I will introduce the best graphic designing tools for beginners.&lt;/p&gt;

&lt;p&gt;When I have started designing for Social Media &amp;amp; Website, experts suggest me tools like Coral, Photoshop, etc&lt;/p&gt;

&lt;p&gt;But my suggestion for people who want to start graphic designing &amp;amp; learn everything easily without some expertise then starts Graphic Designing using these online tools -&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1-canva"&gt;
  &lt;/a&gt;
  1. &lt;a href="https://bit.ly/3sN9AaU"&gt;Canva&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kf5ja6Vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ucom4aoeuh2wmou7d.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kf5ja6Vk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c54ucom4aoeuh2wmou7d.jpg" alt="Canva screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Canva is a graphic design platform, used to create social media graphics, presentations, posters, documents, videos, and other visual content. The app includes templates for users to use. The platform is free to use and offers paid subscriptions like Canva Pro and Canva for Enterprise for additional functionality.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Canva offers 30 days of free pro access for new users.&lt;/strong&gt; If you haven't used canva before then &lt;a href="https://bit.ly/3sN9AaU"&gt;click here&lt;/a&gt; to try.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-visme"&gt;
  &lt;/a&gt;
  2. &lt;a href="https://bit.ly/3ezabIg"&gt;Visme&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dpnyUM5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pi2t497nho6yzi7iby5u.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dpnyUM5U--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pi2t497nho6yzi7iby5u.jpg" alt="Visme screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Visme is an all-in-one visual content platform that allows everyone, including non-designers, to create beautiful presentations, infographics, reports and social media images in minutes.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-crello"&gt;
  &lt;/a&gt;
  3. &lt;a href="https://bit.ly/32OqoUj"&gt;Crello&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vbISayXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1q5vzmamjqa6nxovds4.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vbISayXY--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/k1q5vzmamjqa6nxovds4.jpg" alt="Crello screenshot"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crello is a video and graphic design tool for everyone – it will help you create visuals for social media in just a few minutes (be it a post, video Story, or an ad), design a business card or a flyer, create marketing collateral for print, social and blogs, as well as create long-form content like presentations and more.&lt;/p&gt;

&lt;p&gt;I recommend Canva because in terms of features and simplicity.&lt;/p&gt;

&lt;p&gt;Which tool you are using now for graphics designing. Let me know in comment.&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>design</category>
    </item>
    <item>
      <title>How Strapi triggers Nuxt static site generation for S3 bucket</title>
      <author>Liu Yu Zhou</author>
      <pubDate>Mon, 26 Apr 2021 15:10:56 +0000</pubDate>
      <link>https://dev.to/jacobliu/how-strapi-triggers-nuxt-static-site-generation-for-s3-bucket-1fg6</link>
      <guid>https://dev.to/jacobliu/how-strapi-triggers-nuxt-static-site-generation-for-s3-bucket-1fg6</guid>
      <description>&lt;p&gt;I have been working on ecommerce website, we just suppose to build the website as operational.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#i-choose-strapi-and-nuxt-algolia-for-search-engine"&gt;
  &lt;/a&gt;
  I choose Strapi and Nuxt, Algolia for search engine
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Strapi&lt;/strong&gt; is headless CMS, open-source, provides the large-scale of APIs without hard-coding.&lt;br&gt;
&lt;strong&gt;Nuxt&lt;/strong&gt; is SSR vue.js based framework, useful for pre-rendered pages for ecommerce.&lt;br&gt;
&lt;strong&gt;Algolia&lt;/strong&gt; is client-side search engine, very impressive tool to make high traffic in business.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#the-infrastructure-i-use"&gt;
  &lt;/a&gt;
  The infrastructure I use
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Source repositories on &lt;em&gt;Github&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;Strapi on AWS &lt;em&gt;EC2&lt;/em&gt; instance&lt;/li&gt;
&lt;li&gt;Nuxt on AWS &lt;em&gt;S3&lt;/em&gt; bucket&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#the-things-i-need"&gt;
  &lt;/a&gt;
  The things I need
&lt;/h2&gt;

&lt;p&gt;The static website should be generated again when &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The developer commit the code updates.&lt;/li&gt;
&lt;li&gt;The author upload own product.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#how-did-i-tweak-the-problems"&gt;
  &lt;/a&gt;
  How did I tweak the problems
&lt;/h2&gt;

&lt;p&gt;I solved all problems with GitHub Actions, it is the great tool for CI/CD.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&amp;gt; SSG : The developer commit the code updates.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It involves several steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify when the github action should be trigger&lt;/li&gt;
&lt;li&gt;Configure AWS Credentials&lt;/li&gt;
&lt;li&gt;Create ENV files&lt;/li&gt;
&lt;li&gt;Cache Packages&lt;/li&gt;
&lt;li&gt;Install Packages&lt;/li&gt;
&lt;li&gt;Generate Static Pages&lt;/li&gt;
&lt;li&gt;Deploy website on S3 bucket&lt;/li&gt;
&lt;li&gt;Cloudfront Invalidation&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&amp;gt; SSG: The author upload own product.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is the tricky,&lt;/strong&gt; I was stuck on this for couple of days.&lt;br&gt;
There should be something to trigger S3 updates from Strapi,&lt;br&gt;
I had researched the solutions and found that Netlify is the best solution because it provides build hook for CI/CD.&lt;br&gt;
However, I wanted to take the challenge and decided not to use Netlify. &lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can I achieve the same behavior without Netlify, keep S3 bucket?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Make the custom node app for webhook&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After a while, I noticed that Github has REST APIs to control resources. I can dispatches APIs to certain repository.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://api.github.com/repos/{ORG_NAME}/{REPO_NAME}/dispatches
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;This is the key.&lt;br&gt;
In this node app, we just set headers to call github APIs.&lt;br&gt;
I named the event as &lt;em&gt;ssg&lt;/em&gt;.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;const postData = Buffer.from(
  JSON.stringify({
    event_type: "ssg",
  })
);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;headers: {
    Authorization: "token *****************",
    Accept: "application/vnd.github.everest-preview+json",
    "Content-Type": "application/json",
    "Content-Length": Buffer.byteLength(postData),
    "User-Agent": "nodejs request",
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Finally, upload nodejs app on EC2 instance. Here is the completed code.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;2. Configure CI/CD script&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Configure script to listen dispatch events from node app.&lt;br&gt;
Github action listens the nodejs app request and regenerate the static website, deploy updates on S3.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;name: CI/CD
on:
  repository_dispatch:
    types: ssg
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;3. Register webhook in Strapi dashboard&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Register webhook on EC2 in Strapi dashboard&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7JcXIPkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfgixyzmizbh2p1d19wq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7JcXIPkJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/lfgixyzmizbh2p1d19wq.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That's all, long journey. Thanks for joining me. :)&lt;/p&gt;

</description>
      <category>strapi</category>
      <category>nuxt</category>
      <category>github</category>
      <category>webhook</category>
    </item>
    <item>
      <title>Soft UI Dashboard - Free Jinja Template</title>
      <author>Sm0ke</author>
      <pubDate>Mon, 26 Apr 2021 15:03:24 +0000</pubDate>
      <link>https://dev.to/sm0ke/soft-ui-dashboard-free-jinja-template-3b7k</link>
      <guid>https://dev.to/sm0ke/soft-ui-dashboard-free-jinja-template-3b7k</guid>
      <description>&lt;p&gt;Hello Coders,&lt;/p&gt;

&lt;p&gt;This article presents an open-source &lt;strong&gt;&lt;a href="https://appseed.us/jinja-template"&gt;Jinja Template&lt;/a&gt;&lt;/strong&gt; crafted on top of a modern &lt;strong&gt;Bootstrap 5&lt;/strong&gt; design: &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt;. The project might help beginners to code simple presentation websites on top of the existing codebase OR migrate the &lt;code&gt;production-ready&lt;/code&gt; UI to a legacy Python-based project compatible with &lt;strong&gt;Jinja Template Engine&lt;/strong&gt;: &lt;em&gt;Flask&lt;/em&gt;, &lt;em&gt;Django&lt;/em&gt;, &lt;em&gt;Bottle&lt;/em&gt; of &lt;em&gt;FastAPI&lt;/em&gt;.  Thanks for reading!&lt;/p&gt;




&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://jinja-soft-ui-dashboard.appseed-srv1.com/"&gt;Soft UI Dashboard Jinja&lt;/a&gt; - LIVE Demo&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/app-generator/jinja-soft-ui-dashboard"&gt;Soft UI Dashboard Jinja&lt;/a&gt; - Source Code (MIT License)&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/jinja-template"&gt;Jinja Templates&lt;/a&gt; - a curated index&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vIxU-JEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nzwr5aqqv948io4iqtn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vIxU-JEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6nzwr5aqqv948io4iqtn.png" alt="Soft UI Dashboard - Jinja Template."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;The design is the latest and most innovative crafted by the Creative-Tim agency. Made of hundred of elements, designed blocks, and fully coded pages, &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; is ready to help you create stunning websites and webapps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fully Coded Elements&lt;/strong&gt; - Soft UI Dashboard is built with over 70 frontend individual elements, like buttons, inputs, navbars, navtabs, cards or alerts, giving you the freedom of choosing and combining. All components can take variations in colour, that you can easily modify using SASS files and classes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example Pages&lt;/strong&gt; - If you want to get inspiration or just show something directly to your clients, you can jump start your development with our pre-built example pages. You will be able to quickly set up the basic structure for your web project.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--liqs65Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybwshf9d3lqfo16faz7a.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--liqs65Xf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ybwshf9d3lqfo16faz7a.png" alt="Soft UI Dashboard - Billing Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; - UI Tables&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MpviYrjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlpsd5f1hg1c3gdexdip.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MpviYrjf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mlpsd5f1hg1c3gdexdip.png" alt="Soft UI Dashboard - UI Tables."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; - User Profile Page&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hwTAiG-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k0swso6r8xpitbiucf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hwTAiG-n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8k0swso6r8xpitbiucf8.png" alt="Soft UI Dashboard - User Profile Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;To compile the project locally, Python3 and GIT should be installed and accessible via the terminal. Once we have this minimum tool-chain, we need to follow a simple setup as presented in the README file, saved on Github.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;Step #1 - Clone the sources&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Clone the sources&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/app-generator/jinja-soft-ui-dashboard.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;jinja-soft-ui-dashboard
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #2 - Install Dependencies&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv &lt;span class="nb"&gt;env&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;source env&lt;/span&gt;/bin/activate
&lt;span class="err"&gt;$&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Install requirements&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;pip3 &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;p&gt;&lt;strong&gt;Step #3 - Start the App&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="c"&gt;# Set the FLASK_APP environment variable&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;FLASK_ENV&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;development
&lt;span class="nv"&gt;$ &lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;flask run
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If all goes well, we should see the &lt;strong&gt;Soft UI Dashboard&lt;/strong&gt; running in the browser.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LUZQHCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98ytwg6xxil824gkh9b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LUZQHCsr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f98ytwg6xxil824gkh9b.png" alt="Soft UI Dashboard - Login Page."&gt;&lt;/a&gt;&lt;/p&gt;




&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thanks for reading!&lt;/strong&gt; For more resources, please access:&lt;/p&gt;
&lt;/blockquote&gt;




&lt;ul&gt;
&lt;li&gt;More starters styled with &lt;a href="https://appseed.us/ui-kit/soft-ui-design-system"&gt;Soft UI Design System&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;More &lt;a href="https://appseed.us/ui-kit/soft-ui-design-system"&gt;Free Admin Dashboards&lt;/a&gt; - provided by AppSeed &lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>python</category>
      <category>flask</category>
    </item>
    <item>
      <title>5 Ideas to set your portfolio apart</title>
      <author>Paula Santamaría</author>
      <pubDate>Mon, 26 Apr 2021 15:01:17 +0000</pubDate>
      <link>https://dev.to/paulasantamaria/5-ideas-to-set-your-portfolio-apart-170c</link>
      <guid>https://dev.to/paulasantamaria/5-ideas-to-set-your-portfolio-apart-170c</guid>
      <description>&lt;p&gt;Tired of building TO-DO lists and e-commerce sites? One of these Chrome extension ideas could help you set your portfolio apart! 👩‍💻&lt;/p&gt;

&lt;p&gt;All you need to know to build your first Chrome Extension is the &lt;strong&gt;basics of HTML, JavaScript, and CSS&lt;/strong&gt;! These are a few fun ideas I came up with that can be created using only those technologies.&lt;/p&gt;

&lt;p&gt;If you're having doubts, check out my video &lt;a href="https://www.instagram.com/tv/CLIRDc4gWyz/"&gt;Creating a simple Chrome Extension in 2 minutes&lt;/a&gt;.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-dark-mode-for-your-favorite-website"&gt;
  &lt;/a&gt;
  1. Dark mode for your favorite website
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8O5PXWyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pd7BYKa.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8O5PXWyK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/pd7BYKa.png" alt="Dark mode icon - The moon, some clouds and a few stars in the sky"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Do you regularly use a website that you love but doesn't have dark mode? &lt;/p&gt;

&lt;p&gt;With Chrome extensions, you can create your own CSS stylesheet that overrides some styles in a particular website. This allows you to apply dark mode styles over the website when your extension is enabled.&lt;/p&gt;

&lt;p&gt;To achieve that, you should use &lt;strong&gt;Content Scripts&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip: Set &lt;code&gt;"run_at": "document_end"&lt;/code&gt;  in the &lt;code&gt;content_scripts&lt;/code&gt; object in the &lt;code&gt;manifest.json&lt;/code&gt; so your styles override the site's.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For this project, you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/content_scripts/"&gt;Content Scripts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#2-weather-app"&gt;
  &lt;/a&gt;
  2. Weather App
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MDe4-Hni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7XO2kWk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MDe4-Hni--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/7XO2kWk.png" alt="Weather icon - A cloud, rain and the sun behind it"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could create an extension that shows the current weather for a particular location on your browser. &lt;/p&gt;

&lt;p&gt;You'll need to call an API to retrieve the weather info: &lt;a href="https://openweathermap.org/api/one-call-api"&gt;OpenWeatherMap API&lt;/a&gt; is a good option. They have a free plan.&lt;/p&gt;

&lt;p&gt;Get the latest weather updates every few minutes in the background using an alarm from the &lt;code&gt;chrome.alarms&lt;/code&gt; API handled by a Service Worker.&lt;/p&gt;

&lt;p&gt;Store the results using the &lt;code&gt;chrome.storage&lt;/code&gt; API and display them in your extension's Action Popup.&lt;/p&gt;

&lt;p&gt;To call the API, you can use &lt;code&gt;fetch&lt;/code&gt;, and you'll need to add something like the following to your &lt;code&gt;manifest.json&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="nl"&gt;"host_permissions"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"https://some-weather-api.com/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/apps/app_codelab_alarms/"&gt;&lt;code&gt;chrome.alarms&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/background_pages/"&gt;Service Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#3-show-todays-calendar"&gt;
  &lt;/a&gt;
  3. Show today's calendar.
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--c9qriOGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1N4uIDX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--c9qriOGD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/1N4uIDX.png" alt="Calendar icon - A calendar with a clock"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You could get easy access to your Calendar events for the day, showing them in your Browser through an Extension. &lt;/p&gt;

&lt;p&gt;As with the previous idea, you'll need to get the data from an external API (Google Calendar's or your favorite calendar API) every few minutes in the background using an alarm from the &lt;code&gt;chrome.alarms&lt;/code&gt; API and a Service Worker. &lt;/p&gt;

&lt;p&gt;You'll also need to store the results of the API request using &lt;code&gt;chrome.storage&lt;/code&gt;. Remember that Service Workers can be unloaded when the extension goes idle, so you can't just store the calendar events in a variable declared in your Service Worker.&lt;/p&gt;

&lt;p&gt;Display the events with their title, time, guests, etc., in your extension's Action Popup.&lt;/p&gt;

&lt;p&gt;You can also use &lt;code&gt;chrome.notifications&lt;/code&gt; API to show a message to the user a few minutes before the event.&lt;/p&gt;

&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/apps/app_codelab_alarms/"&gt;&lt;code&gt;chrome.alarms&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/notifications/"&gt;&lt;code&gt;chrome.notifications&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/mv3/background_pages/"&gt;Service Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#4-daily-coffee"&gt;
  &lt;/a&gt;
  4. Daily coffee
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--xwR_0DCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IaSq7MB.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--xwR_0DCB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/IaSq7MB.png" alt="Coffee cup icon - A coffee cup with coffee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Show the user a random coffee recipe to try every day.&lt;/p&gt;

&lt;p&gt;In this case, you don't need to call an external API (at least at first). You could just store a list of your favorite recipes in a JSON array in your extension and use a &lt;code&gt;Math.random()&lt;/code&gt; to get a random item from the array every day.&lt;/p&gt;

&lt;p&gt;Display the coffee recipe with a nice picture in the Action Popup.&lt;/p&gt;

&lt;p&gt;To make it more robust, you could use &lt;code&gt;chrome.storage&lt;/code&gt; to store the last coffee recipe shown and the date to make sure of two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A single coffee recipe is shown every day.&lt;/li&gt;
&lt;li&gt;We don't get the same recipe two days in a row.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt; (optional)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
  &lt;a href="#5-ecommerce-wishlist"&gt;
  &lt;/a&gt;
  5. E-Commerce wishlist
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JZWSfaRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yTvftWv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JZWSfaRK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.imgur.com/yTvftWv.png" alt="Wishlist icon - A page with a list of items and a heart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Allow users to add products from Amazon, eBay, etc., to their wishlist: When a user finds a product they're interested in, they add it to their wishlist using a keyboard shortcut or from the &lt;strong&gt;Action popup&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The Action popup also shows the previously added items and allows the user to remove them.&lt;/p&gt;

&lt;p&gt;The user should also be able to navigate to each product page in case they want to buy it. For this, you should use &lt;code&gt;chrome.tabs.create&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You'll need to store links, name, and price for each product using &lt;code&gt;chrome.storage&lt;/code&gt; API. &lt;/p&gt;

&lt;p&gt;For this project you'll need to learn about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://developer.chrome.com/docs/extensions/reference/action/"&gt;&lt;code&gt;chrome.action&lt;/code&gt; API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/reference/storage/"&gt;&lt;code&gt;chrome.storage&lt;/code&gt; API&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;
&lt;a href="https://developer.chrome.com/docs/extensions/reference/tabs"&gt;&lt;code&gt;chrome.tabs&lt;/code&gt; API&lt;/a&gt; - Particularly the &lt;a href="https://developer.chrome.com/docs/extensions/reference/tabs/#method-create"&gt;&lt;code&gt;create&lt;/code&gt; method&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;I hope this post was helpful and inspires you to work on your next project! If you're interested in learning about Chrome extensions, check out &lt;a href="https://dev.to/paulasantamaria/creating-a-simple-chrome-extension-36m"&gt;my series about it&lt;/a&gt; where I create a simple chrome extension and gradually improve it. At the same time, I explore most of the &lt;code&gt;chrome&lt;/code&gt; APIs and concepts required to build the ideas mentioned in this post.&lt;/p&gt;

&lt;p&gt;You can also check out my video &lt;a href="https://www.instagram.com/tv/CLIRDc4gWyz/"&gt;Creating a simple Chrome Extension in 2 minutes&lt;/a&gt; to get a grasp of the process.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Icons by Smashicons &amp;amp; Freepik on Flaticon.com&lt;/em&gt;&lt;/p&gt;

</description>
      <category>chromeextension</category>
      <category>javascript</category>
      <category>portfolio</category>
      <category>beginners</category>
    </item>
    <item>
      <title>The Powers of AJAX</title>
      <author>ManuTheCoder</author>
      <pubDate>Mon, 26 Apr 2021 14:48:40 +0000</pubDate>
      <link>https://dev.to/manuthecoder/the-powers-of-ajax-3j41</link>
      <guid>https://dev.to/manuthecoder/the-powers-of-ajax-3j41</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Ajax is a set of web development techniques using many web &lt;br&gt;
technologies on the client-side to create asynchronous web applications. With Ajax, web applications can send and retrieve data from a server asynchronously without interfering with the display and behaviour of the existing page. (Wikipedia)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AJAX is very useful for building single page apps. &lt;br&gt;
It's also very powerful because you can submit forms and send requests, without reloading the page!&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-ajax"&gt;
  &lt;/a&gt;
  How to use AJAX
&lt;/h3&gt;

&lt;p&gt;AJAX is very simple to use. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just create an index.html file, and insert this code in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. &lt;/li&gt;
&lt;li&gt;Create another file named &lt;code&gt;ajax_is_awesome.php&lt;/code&gt;. Write whatever you want in that file!&lt;/li&gt;
&lt;li&gt;View your website!
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;ajax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;XMLHttpRequest&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onreadystatechange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;readyState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;responseText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ajax_is_awesome.php&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Explained&lt;br&gt;
&lt;strong&gt;&lt;code&gt;var ajax&lt;/code&gt;&lt;/strong&gt; - Creates a new variable for the class &lt;strong&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/strong&gt; - XMLHttpRequest is an API in the form of an object whose methods transfer data between a web browser and a web server.  (Wikipedia)&lt;br&gt;
&lt;strong&gt;&lt;code&gt;onreadystatechange&lt;/code&gt;&lt;/strong&gt; - When the file has loaded&lt;br&gt;
&lt;strong&gt;&lt;code&gt;this.readyState == 4 &amp;amp;&amp;amp; this.status == 200&lt;/code&gt;&lt;/strong&gt; - If the document's status isn't 404, 500, etc. Must be 200&lt;br&gt;
&lt;strong&gt;&lt;code&gt;ajax.open("GET", "index.php", true);&lt;/code&gt;&lt;/strong&gt; - Opens the ajax file. Using GET this time. &lt;br&gt;
&lt;strong&gt;&lt;code&gt;ajax.send();&lt;/code&gt;&lt;/strong&gt; - Sends the request&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-to-use-ajax-in-jquery"&gt;
  &lt;/a&gt;
  How to use AJAX in jQuery
&lt;/h3&gt;

&lt;p&gt;Remember to include the &lt;code&gt;&amp;lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; line in your code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#someform&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;submit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;action&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
           &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;POST&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serialize&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; 
           &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;          
            &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;demo&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
           &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;See? AJAX is cool! Implement it, and you won't have redirects when submitting forms, or doing very simple things, such as checking for new notifications every few seconds. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://manuthecoder.github.io/docjs/docs/"&gt;Example of a single page documentation I made using AJAX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/manuthecoder/docjs"&gt;pls star it on github if you like this!&lt;/a&gt;&lt;/p&gt;

</description>
      <category>ajax</category>
      <category>html</category>
      <category>javascript</category>
    </item>
    <item>
      <title>LAMP Docker setup with PHP 8 and MariaDB for Symfony projects</title>
      <author>Goran Hrženjak</author>
      <pubDate>Mon, 26 Apr 2021 14:44:52 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/lamp-docker-setup-with-php-8-and-mariadb-for-symfony-projects-5hic</link>
      <guid>https://dev.to/bornfightcompany/lamp-docker-setup-with-php-8-and-mariadb-for-symfony-projects-5hic</guid>
      <description>&lt;p&gt;Yet another one?!&lt;/p&gt;

&lt;p&gt;Well, either my searching skills are getting rusty or my request was too specific while at the same time being pretty basic, or something would crash and break during the build process after following available online tutorials or downloading existing projects... but I couldn't find a single solution which I could reuse for my exact needs with just a couple of changes in the configuration. &lt;br&gt;
I had to come up with my own, which is the result of bits and pieces taken from those that didn't fully work for me, as well as some knowledge and understanding of Docker I gained along the way. I'd like to share it; maybe it will be useful for someone else in this very format. &lt;/p&gt;

&lt;p&gt;I've decided to use Docker for my local development because different projects I'm working on require different versions of PHP, NodeJS and even different versions of Composer... and switching/upgrading/downgrading those versions whenever I switched my focus on another project became cumbersome. &lt;br&gt;
Docker can be really slow, but listing pros and cons of Docker is not the topic here.&lt;/p&gt;

&lt;p&gt;I don't intend to get into the details of each line of code and explain all used commands. What I can do is encourage you into having a look at this great &lt;a href="https://tech.osteel.me/posts/docker-for-local-web-development-part-1-a-basic-lemp-stack"&gt;"Docker for local web development" series&lt;/a&gt; where you can learn much more. This was my main resource as well.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#lets-get-started"&gt;
  &lt;/a&gt;
  Let's get started
&lt;/h3&gt;

&lt;p&gt;All my new projects will be using &lt;strong&gt;PHP 8&lt;/strong&gt; because of some great features I'd like to exploit which were not there prior to version 8. I think it's worth using the latest versions when starting fresh, so that's the stack I'm dealing with. &lt;strong&gt;Symfony 5.2&lt;/strong&gt; includes support for &lt;a href="https://stitcher.io/blog/attributes-in-php-8"&gt;PHP 8 attributes&lt;/a&gt; to define routes and required dependencies, and that's one more argument in favour of it. I'll also use &lt;strong&gt;Apache&lt;/strong&gt; for server and &lt;strong&gt;MariaDB&lt;/strong&gt; for database. &lt;br&gt;
On top of my Symfony project, I'll add PhpMyAdmin to save me some trouble when manually dealing with DB stuff.&lt;/p&gt;

&lt;p&gt;I intend to have multiple projects locally with this exact stack, so I had to come up with something simple enough and reusable to get me started quick, but something I can build on top of and extend when necessary.&lt;/p&gt;

&lt;p&gt;Prerequisites are installed &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; and &lt;a href="https://docs.docker.com/compose/install/"&gt;Docker Compose&lt;/a&gt; (which, depending on your platform, might be a part of the Docker installation). If you're using Windows, make sure you have the WSL2 feature enabled.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#folder-structure-overview"&gt;
  &lt;/a&gt;
  Folder structure overview
&lt;/h3&gt;

&lt;p&gt;Maybe it will be easier to follow if I provide the final folder structure first, so here it is:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.
├── codebase/
├── docker/
│   ├── db/
│   │   └── mariadb/
│   │       └── my.cnf
│   └── server/
│       ├── apache/
│       │   └── sites-enabled/
│       │       └── site.conf
│       ├── php/
│       │   └── php.ini
│       └── Dockerfile
├── .env
└── docker-compose.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;All folder names are arbitrary. Make sure, if you're going to rename them, to rename them accordingly in the configurations.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;codebase&lt;/code&gt; folder will hold all our project code. Since this will be a Symfony app, we will have &lt;code&gt;public&lt;/code&gt; folder with &lt;code&gt;index.php&lt;/code&gt; file within it and that's what we'll rely on throughout the setup. For starters, &lt;code&gt;codebase&lt;/code&gt; folder is empty.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;.env&lt;/code&gt; file, we'll have project-level Docker environment variables. As a part of this guide, I will not configure local machine's &lt;code&gt;hosts&lt;/code&gt; file to make site access more user friendly, but will access it over localhost:[PORT]. You must make sure that the port is not occupied already and map available ports from your local machine to container's port &lt;code&gt;80&lt;/code&gt;. In the same manner, I'll map a port for PhpMyAdmin. Stick with some convention and be consistent. &lt;br&gt;
E.G. use ports &lt;code&gt;8101&lt;/code&gt; and &lt;code&gt;8102&lt;/code&gt; for project A, &lt;code&gt;8103&lt;/code&gt; and &lt;code&gt;8104&lt;/code&gt; for project B and so on... &lt;br&gt;
The same applies for DB port. You might already have default port 3306 occupied on your local machine. &lt;br&gt;
I'm using &lt;code&gt;APP_NAME&lt;/code&gt; variable to avoid some extra copy-pasting in the configurations, but that's completely up to you.&lt;br&gt;
&lt;code&gt;MYSQL_*&lt;/code&gt; config variables are pretty self-explanatory.&lt;/p&gt;

&lt;p&gt;Here's what my &lt;code&gt;.env&lt;/code&gt; file looks like:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;APP_NAME=symfony_project_2021
APP_PORT=8101
APP_DB_ADMIN_PORT=8102
DB_PORT=33016

MYSQL_ROOT_PASS=superSecr3t
MYSQL_USER=app_user
MYSQL_PASS=t3rceS
MYSQL_DB=symfony_project_2021
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#docker-compose"&gt;
  &lt;/a&gt;
  Docker Compose
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;/code&gt; YAML file is where our services are defined and based on it, Docker Compose will take care of building the images and starting the containers. We will connect all our services to internal network &lt;code&gt;symfony_project_2021_net&lt;/code&gt;, which is also defined in &lt;code&gt;docker-compose.yml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will use 3 services:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;db_server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;db_admin&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;version: '3.9'

networks:
  symfony_project_2021_net:

services:
  server:
    build:
      context: .
      dockerfile: ./docker/server/Dockerfile
    container_name: '${APP_NAME}-server'
    ports:
      - '${APP_PORT}:80'
    working_dir: /var/www/html
    environment:
      - 'DATABASE_URL=mysql://${MYSQL_USER}:${MYSQL_PASS}@db_server:3306/${MYSQL_DB}?serverVersion=10.5'
    volumes:
      - ./codebase:/var/www/html
      - ./docker/server/apache/sites-enabled:/etc/apache2/sites-enabled
      - ./docker/server/php/php.ini:/usr/local/etc/php/conf.d/extra-php-config.ini
    depends_on:
      db_server:
        condition: service_healthy
    networks:
      - symfony_project_2021_net

  db_server:
    image: mariadb:10.5.9
    container_name: '${APP_NAME}-db'
    restart: always
    ports:
      - '${DB_PORT}:3306'
    environment:
      MYSQL_ROOT_PASSWORD: '${MYSQL_ROOT_PASS}'
      MYSQL_USER: '${MYSQL_USER}'
      MYSQL_PASSWORD: '${MYSQL_PASS}'
      MYSQL_DATABASE: '${MYSQL_DB}'
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/db/mariadb/my.cnf:/etc/mysql/conf.d/my.cnf
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD
      interval: 5s
      retries: 5
    networks:
      - symfony_project_2021_net

  db_admin:
    image: phpmyadmin/phpmyadmin:5
    container_name: '${APP_NAME}-db-admin'
    ports:
      - '${APP_DB_ADMIN_PORT}:80'
    environment:
      PMA_HOST: db_server
    depends_on:
      db_server:
        condition: service_healthy
    volumes:
      - db_admin_data:/var/www/html
    networks:
      - symfony_project_2021_net

volumes:
  db_data:
  db_admin_data:

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll use official Docker images for building &lt;code&gt;db_server&lt;/code&gt; and &lt;code&gt;db_admin&lt;/code&gt; containers. You can find the official (and many other) container images on &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#server"&gt;
  &lt;/a&gt;
  Server
&lt;/h3&gt;

&lt;p&gt;We'll use our own Dockerfile to specify what the &lt;code&gt;server&lt;/code&gt; image looks like. &lt;br&gt;
Content of &lt;code&gt;/docker/server/Dockerfile&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;FROM php:8.0-apache

RUN a2enmod rewrite

RUN apt-get update &amp;amp;&amp;amp; apt-get install -y git unzip zip

WORKDIR /var/www/html

COPY --from=mlocati/php-extension-installer /usr/bin/install-php-extensions /usr/local/bin/
RUN install-php-extensions gd pdo_mysql bcmath zip intl opcache

COPY --from=composer:2.0 /usr/bin/composer /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Docker &lt;a href="https://github.com/mlocati/docker-php-extension-installer"&gt;PHP extension installer&lt;/a&gt; script will install all the required APT/APK packages. At the end of the script execution, packages that are no longer needed will be removed, so the image will be much smaller.&lt;br&gt;
Using &lt;code&gt;docker-php-ext-install&lt;/code&gt; didn't always work for me, so I'm pulling this extra script. You can expand the list of extensions to install, if necessary.&lt;br&gt;
After that, we'll also pull the Composer. What do you think about setting up a separate container for Composer?&lt;/p&gt;

&lt;p&gt;Content of our local folder &lt;code&gt;codebase&lt;/code&gt; will be considered a volume mapped to &lt;code&gt;/var/www/html&lt;/code&gt;, which is the project root.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#apache"&gt;
  &lt;/a&gt;
  Apache
&lt;/h3&gt;

&lt;p&gt;Site is defined on Apache side, in &lt;code&gt;docker/server/apache/sites-enabled/site.conf&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;VirtualHost *:80&amp;gt;
  DocumentRoot /var/www/html/public
  &amp;lt;Directory /var/www/html/public&amp;gt;
      AllowOverride None
      Order Allow,Deny
      Allow from All

      &amp;lt;IfModule mod_rewrite.c&amp;gt;
          Options -MultiViews
          RewriteEngine On
          RewriteCond %{REQUEST_FILENAME} !-f
          RewriteRule ^(.*)$ index.php [QSA,L]
      &amp;lt;/IfModule&amp;gt;
  &amp;lt;/Directory&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Again, this is Symfony-specific (something very similar would be used for Laravel projects as well).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configurations"&gt;
  &lt;/a&gt;
  Configurations
&lt;/h3&gt;

&lt;p&gt;Finally, there are some extra configurations for PHP and MariaDB in &lt;code&gt;/docker/server/php/php.ini&lt;/code&gt; and &lt;code&gt;/docker/db/mariadb/my.cnf&lt;/code&gt;, respectively.&lt;br&gt;
You can configure and overwrite defaults in those files if necessary.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;upload_max_filesize = 30M
post_max_size = 80M
short_open_tag = Off
memory_limit =  256M
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[mysqld]
collation-server = utf8mb4_unicode_ci
character-set-server = utf8mb4
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We'll use named volumes to persist data. We need such volumes because without them, every time the DB service container is destroyed the database is destroyed with it. This is what that final section in &lt;code&gt;docker-compose.yml&lt;/code&gt; is for. Volumes are referenced in &lt;code&gt;db_server&lt;/code&gt; and &lt;code&gt;db_admin&lt;/code&gt; services.&lt;/p&gt;

&lt;p&gt;Order in which containers are started is important and that's what we've set with &lt;code&gt;depends_on&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Specifying environment server variables is also completely up to you; you're free to use another &lt;code&gt;.env&lt;/code&gt; file in the Symfony project root folder. &lt;code&gt;DATABASE_URL&lt;/code&gt; variable is Symfony-specific, and if you display it on the server, you should get&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vA_DauAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94h4j7kpof12jtetw00d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vA_DauAc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/94h4j7kpof12jtetw00d.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
Variables defined like this will have precedence over those defined in &lt;code&gt;.env&lt;/code&gt; files (in Symfony project root folder).&lt;br&gt;
You can do the same thing for Laravel project.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ready-set-"&gt;
  &lt;/a&gt;
  Ready, set, ...
&lt;/h3&gt;

&lt;p&gt;In your terminal, run &lt;code&gt;docker-compose up -d --build&lt;/code&gt; to start the containers. The process will take some time, but only the first time you're building containers.&lt;/p&gt;

&lt;p&gt;After this is done, check your containers by running &lt;code&gt;docker-compose ps&lt;/code&gt; in the terminal.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--O7ai4Qtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm2phchz1txvaf6idusk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--O7ai4Qtt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wm2phchz1txvaf6idusk.png" alt="Running containers"&gt;&lt;/a&gt;&lt;br&gt;
Also, in Docker Desktop app you should see:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qzeLMhKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06ea8ytp4cec2hblhw3k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qzeLMhKH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/06ea8ytp4cec2hblhw3k.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Everything from now on should be a walk in the park. Or that's what I thought when following all online resources I could find 😃&lt;/p&gt;

&lt;p&gt;Execute Bash on &lt;code&gt;server&lt;/code&gt; container (where &lt;code&gt;server&lt;/code&gt; is the name you've given to container) by running &lt;code&gt;docker-compose exec server bash&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We've set our working directory on the server to &lt;code&gt;/var/www/html&lt;/code&gt;. While at it, run &lt;code&gt;composer create-project symfony/website-skeleton .&lt;/code&gt;. If you prefer, you can install Symfony installer as well (add it to &lt;code&gt;Dockerfile&lt;/code&gt;).&lt;br&gt;
This will install the Symfony project. &lt;br&gt;
It's important that you do this directly on the server because your local Composer and PHP versions might be different and you could run into compatibility issues. &lt;/p&gt;

&lt;p&gt;Now check &lt;a href="http://localhost:8101/"&gt;http://localhost:8101/&lt;/a&gt; and &lt;a href="http://localhost:8102/"&gt;http://localhost:8102/&lt;/a&gt;. Your site and PhpMyAdmin should be available!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BNxovAJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ah7hix77tm91k1802kk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BNxovAJg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0ah7hix77tm91k1802kk.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Was this guide "yet another" that didn't fully work for your local setup? What would you improve or change completely? &lt;br&gt;
Which other containers do you usually use to get your projects up and running?&lt;/p&gt;

</description>
      <category>engineeringmonday</category>
      <category>docker</category>
      <category>symfony</category>
      <category>devops</category>
    </item>
    <item>
      <title>How to create a gradient drop shadow</title>
      <author>Stackfindover</author>
      <pubDate>Mon, 26 Apr 2021 14:42:07 +0000</pubDate>
      <link>https://dev.to/stackfindover/how-to-create-a-gradient-drop-shadow-1699</link>
      <guid>https://dev.to/stackfindover/how-to-create-a-gradient-drop-shadow-1699</guid>
      <description>&lt;p&gt;&lt;strong&gt;&lt;em&gt;Hello, guys In this tutorial we will try to solve the mentioned query. and also we will learn how to create a gradient drop shadow&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-query"&gt;
  &lt;/a&gt;
  Common Query
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;How to create a gradient drop shadow&lt;/li&gt;
&lt;li&gt;How to an awesome drop shadow&lt;/li&gt;
&lt;li&gt;How to create a drop shadow&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;See Also :-&lt;/strong&gt; &lt;a href="https://blogs.stackfindover.com/how-to-create-a-animated-button/"&gt;How to create a animated button&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-gradient-drop-shadow-step-by-step"&gt;
  &lt;/a&gt;
  How to create gradient drop shadow step by step
&lt;/h3&gt;

&lt;p&gt;First, we need to create two files index.html and style.css then we need to do code for it.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#step1"&gt;
  &lt;/a&gt;
  Step:#1
&lt;/h3&gt;

&lt;p&gt;Add below code inside index.html&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&lt;/span&gt; &lt;span class="na"&gt;lang=&lt;/span&gt;&lt;span class="s"&gt;"en"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;"UTF-8"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;How to create gradient shadow css&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width, initial-scale=1.0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"X-UA-Compatible"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"ie=edge"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"style.css"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"https://fonts.googleapis.com/css2?family=IBM+Plex+Sans&amp;amp;display=swap"&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"box"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Stackfindover&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#step2"&gt;
  &lt;/a&gt;
  Step:#2
&lt;/h3&gt;

&lt;p&gt;Then we need to add code for style.css which code I provide in the below screen.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight css"&gt;&lt;code&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;'IBM Plex Sans'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;sans-serif&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;body&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#f2f4f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;320px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;230px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;top&lt;/span&gt; &lt;span class="nb"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#0400ff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;#ff3d00&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="nd"&gt;:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;z-index&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inherit&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;translateY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.95&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blur&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;opacity&lt;/span&gt; &lt;span class="m"&gt;0.3s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="nd"&gt;:hover:before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-create-gradient-drop-shadow-video-output"&gt;
  &lt;/a&gt;
  How to create gradient drop shadow video output:
&lt;/h3&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/qAq5GNGmuFc"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-create-gradient-drop-shadow-codepen-output"&gt;
  &lt;/a&gt;
  How to create gradient drop shadow Codepen Output:
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;We will update soon:)&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Create your personal website and host on the github page with travis</title>
      <author>Walter Nascimento</author>
      <pubDate>Mon, 26 Apr 2021 14:19:59 +0000</pubDate>
      <link>https://dev.to/walternascimentobarroso/create-your-personal-website-and-host-on-the-github-page-with-travis-27jj</link>
      <guid>https://dev.to/walternascimentobarroso/create-your-personal-website-and-host-on-the-github-page-with-travis-27jj</guid>
      <description>&lt;p&gt;&lt;a href="https://medium.com/walternascimentobarroso-pt/crie-seu-site-pessoal-e-hospede-no-github-page-com-o-travis-379548b3896d"&gt;[Clique aqui para ler em português]&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#creating-repository"&gt;
  &lt;/a&gt;
  Creating repository
&lt;/h1&gt;

&lt;p&gt;To have your website hosted for free on the github page, just go to your github account and create a repository with your username, in my case I created one like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;walternascimentobarroso.github.io
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;after creating any page that html you send will already work and you will have a website with the url like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="http://walternascimentobarroso.github.io/"&gt;http://walternascimentobarroso.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;
  &lt;a href="#template"&gt;
  &lt;/a&gt;
  Template
&lt;/h1&gt;

&lt;p&gt;There are several free personal page templates on the internet, for this post I will use this one:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://startbootstrap.com/template/resume"&gt;https://startbootstrap.com/template/resume&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#creating-personal-website"&gt;
  &lt;/a&gt;
  Creating personal website
&lt;/h2&gt;

&lt;p&gt;After creating your repository, clone the project:&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;It is best to avoid creating codes directly on the master, if you know git flow follow your flow, if you don’t know for the post not to get too big we will just use a separate branch.&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git checkout -b development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;p&gt;Then go to the website and download the template, extract the content and add it to your repository.&lt;/p&gt;

&lt;p&gt;open the index file and edit the information as you wish, if you master css you can adjust the template as you wish (remembering that this project uses the bootstrap, then if you master the bootstrap you can change the classes to be more in your style)&lt;/p&gt;

&lt;p&gt;after the changes made just send the information to the server&lt;br&gt;
&lt;/p&gt;
&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push — set-upstream origin development
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Remembering that for the url (&lt;a href="http://walternascimentobarroso.github.io/"&gt;http://walternascimentobarroso.github.io/&lt;/a&gt;) to work the content has to be in the main branch, as in our case we created a branch for development, so we will use a CI tool to do the merge&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;
  &lt;a href="#travis"&gt;
  &lt;/a&gt;
  Travis
&lt;/h1&gt;

&lt;p&gt;Travis is a continuous integration tool for open source projects.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#getting-access"&gt;
  &lt;/a&gt;
  Getting access
&lt;/h2&gt;

&lt;p&gt;Get a Github access token so that Travis can send it back to his repository:&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://github.com/settings/tokens/new"&gt;https://github.com/settings/tokens/new&lt;/a&gt; and create a new token&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7xGflm1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bla09zopkfdv7c8cduqs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7xGflm1g--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bla09zopkfdv7c8cduqs.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now follow the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy the generated token&lt;/li&gt;
&lt;li&gt;Access the travis website &lt;a href="https://travis-ci.org"&gt;https://travis-ci.org&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Log in with your github account&lt;/li&gt;
&lt;li&gt;Access the repository page and enable your repository &lt;a href="https://travis-ci.org/account/repositories"&gt;https://travis-ci.org/account/repositories&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mQZ7zAHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tawziisnzsqx5oiy679h.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mQZ7zAHV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/tawziisnzsqx5oiy679h.png" alt="alt text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click on settings and go to Environment Variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s create a variable called GH_TOKEN&lt;/p&gt;

&lt;p&gt;GH_TOKEN = // paste the copied token here&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#sending-to-travis"&gt;
  &lt;/a&gt;
  Sending to travis
&lt;/h2&gt;

&lt;p&gt;In your project create a file with the name &lt;code&gt;.travis.yml&lt;/code&gt; and enter the settings.&lt;/p&gt;


&lt;div class="ltag_gist-liquid-tag"&gt;
  
&lt;/div&gt;



&lt;p&gt;with that when committing travis read the &lt;code&gt;.travis.yml&lt;/code&gt; file&lt;/p&gt;

&lt;p&gt;finally create a file called &lt;code&gt;package.json&lt;/code&gt; you don’t need to have anything in it just one {} is enough, as travis searches for dependencies within this file&lt;/p&gt;

&lt;p&gt;after all the configurations and changes are completed just send to the server and wait&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To make the project cooler, create a readme.md file and place&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[![Build Status](https://travis-ci.org/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.svg?branch=master)](https://travis-ci.org/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io)
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;changing for your user.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h2&gt;

&lt;p&gt;If you have any questions, complaints or tips, you can leave them here in the comments. I will be happy to answer!&lt;/p&gt;

&lt;p&gt;😊😊See you! 😊😊&lt;/p&gt;

</description>
      <category>github</category>
      <category>travis</category>
      <category>deploy</category>
      <category>website</category>
    </item>
    <item>
      <title>What JS Concept should I explain?</title>
      <author>Siddharth</author>
      <pubDate>Mon, 26 Apr 2021 14:19:26 +0000</pubDate>
      <link>https://dev.to/siddharthshyniben/what-js-concept-function-should-i-explain-51na</link>
      <guid>https://dev.to/siddharthshyniben/what-js-concept-function-should-i-explain-51na</guid>
      <description>&lt;p&gt;I've learned a lot from the DEV community and I would love to give back. For this reason I have created this Series.&lt;/p&gt;

&lt;p&gt;If you want an explanation of any JS concept, you've come to the right place! Comment what you want to learn about and I will try to respond to every request with a new post in this Series.&lt;/p&gt;

&lt;p&gt;Please don't be misled by the word "concept". I will try to do anything JS related, but no libraries!&lt;/p&gt;

&lt;p&gt;Happy Learning!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>codenewbie</category>
      <category>beginners</category>
    </item>
    <item>
      <title>A Brief Introduction to React</title>
      <author>Mark Mahoney</author>
      <pubDate>Mon, 26 Apr 2021 14:12:45 +0000</pubDate>
      <link>https://dev.to/markm208/a-brief-introduction-to-react-1i7g</link>
      <guid>https://dev.to/markm208/a-brief-introduction-to-react-1i7g</guid>
      <description>&lt;p&gt;This is a short introduction to &lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;. React is an incredibly popular front-end framework that allows you to create encapsulated components that manage their own state. React has helped transform web development and bring it inline with modern software development practices.&lt;/p&gt;

&lt;p&gt;You will be asked to follow along with the programs below. Just click on the links and a code playback page will load (you might want to open each one in a new tab). Then click on the comments on the left hand side of the playback screen or hit the play button to drive the development of the code. You can download the code at any point and run it on your machine. There are some controls in the top right hand side of the screen to make the text bigger or to switch to blog mode (which is good for small screens).&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#react"&gt;
  &lt;/a&gt;
  React
&lt;/h3&gt;

&lt;p&gt;I start by showing a basic example of React and JSX. I will build a site to serve info about Computer Science legends in the first three examples. This program shows the beginning of the app:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/webdevbook/chapter4/01/playback.html"&gt;Basic React&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next, I continue to build the CS Legends app in a React project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/webdevbook/chapter4/02/playback.html"&gt;Creating a React App with create-react-app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I complete the CS Legends app by creating a back-end to serve legend data:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/webdevbook/chapter4/03/playback.html"&gt;React with Express&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, I show the beginnings of creating a scoreboard app for a kids hockey league. At the end you will be asked to download the code and add to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://markm208.github.io/webdevbook/chapter4/04/playback.html"&gt;Scoreboard React App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#comments-and-feedback"&gt;
  &lt;/a&gt;
  Comments and Feedback
&lt;/h3&gt;

&lt;p&gt;You can find all of these code playbacks in my free 'book', &lt;a href="https://markm208.github.io/webdevbook/"&gt;An Introduction to Web Development from Back to Front&lt;/a&gt;. I am always looking for feedback so please feel free to comment here or to send me a message. You can follow me on twitter &lt;a href="https://twitter.com/markm208"&gt;@markm208&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>react</category>
      <category>javascript</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>How Does The Web Work?</title>
      <author>Chuck Choi</author>
      <pubDate>Mon, 26 Apr 2021 13:38:41 +0000</pubDate>
      <link>https://dev.to/chuckchoiboi/how-does-the-web-work-543</link>
      <guid>https://dev.to/chuckchoiboi/how-does-the-web-work-543</guid>
      <description>&lt;p&gt;Car, television, stove, and refrigerator are the machines we use daily that are fairly simple to use. These are essential tools in our lives yet most of us do not fully comprehend how they work but still, it is not the end of the world. We don't have to understand their mechanisms to be able to use them. Computers and mobile devices are also other machines that most people know how to use, but they are pretty complicated machines that are capable of doing many things. &lt;/p&gt;

&lt;p&gt;Using these devices, we connect to the &lt;strong&gt;World Wide Web (www)&lt;/strong&gt; commonly known as &lt;strong&gt;the Web&lt;/strong&gt; where we can access various resources such as documents, audios, pictures, and videos. The web became very simple to use despite its complexity over time, and even a 7-year-old Larry can open his mom's iPad to watch his favorite cartoon on YouTube.&lt;/p&gt;

&lt;p&gt;Have you ever wondered what's happening behind the scenes for someone like young Larry to go on YouTube to play the video, or what the moving pieces are for you to get to a website? You came to the right place. Let us go over the key players of the web to do its work.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#the-history-of-the-world-wide-web"&gt;
  &lt;/a&gt;
  The history of the World Wide Web
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---ygEGV6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2xekhdz3i8nqw2upgk5.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---ygEGV6E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/t2xekhdz3i8nqw2upgk5.jpg" alt="sir-tim-berners-lee"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;World Wide Web&lt;/strong&gt;, also known as the web was invented by a British computer scientist named &lt;em&gt;Sir Tim Berners-Lee&lt;/em&gt; back in 1989. His parents were computer scientists, but Tim was more interested in trains growing up. He got into electronics as he had to build electronic gadgets to control the trains. Eventually, he got more interested in electronics than trains which is how he started working on computers and software.&lt;/p&gt;

&lt;p&gt;Tim became a software engineer at a physics laboratory in Switzerland named &lt;a href="https://home.cern/"&gt;&lt;strong&gt;CERN&lt;/strong&gt;&lt;/a&gt; after graduating from &lt;em&gt;Oxford University&lt;/em&gt;. Back then, things were very manual and offline which you had to log on to different computers to get the information stored. Some computers used different programs, so you had two choices: &lt;em&gt;learn a different program on each computer to access the information&lt;/em&gt;, or &lt;em&gt;go have a coffee chat with your co-worker to ask how they work.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;With millions of computers being connected together through the internet, Tim envisioned a technology to connect the world with information and proposed his idea to his supervisor at &lt;em&gt;CERN&lt;/em&gt;. Although it was never an official project, his supervisor gave him time to work on the big task.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KnsLxq7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zvoyagtahka8hxgxsgv.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KnsLxq7B--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2zvoyagtahka8hxgxsgv.jpg" alt="www-proposal"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tim has developed the three fundamental technologies by 1990 that are the foundation of the web today: &lt;strong&gt;HTML&lt;/strong&gt;, &lt;strong&gt;URI&lt;/strong&gt;, and &lt;strong&gt;HTTP&lt;/strong&gt;. Over time, the web has grown and Tim realized that the web's true potential would only prevail if it was accessible by anyone, anywhere without any cost or permission. &lt;em&gt;CERN&lt;/em&gt; agreed to make the web free forever and announced the decision in April 1993. The web has grown ever since with the number of websites totaling &lt;strong&gt;1.8 Billion&lt;/strong&gt; as of April 2021.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Had the technology been proprietary, and in my total control, it would probably not have taken off. You can’t propose that something be a universal space and at the same time keep control of it.”&lt;/em&gt; - Sir Tim Berners-Lee&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#modern-days-of-the-web"&gt;
  &lt;/a&gt;
  Modern Days of the Web
&lt;/h2&gt;

&lt;p&gt;Enough of the history lessons on the web, it's time to talk about how the offspring of Tim's noble task look like today. To summarize the flow of the web, a browser sends an HTTP request to a server to access specific content, and the server returns an HTTP response of that requested data back to the browser. We will get into more detail but it looks something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ROlmr-3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6y1j4vgbzbhg5g867wb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ROlmr-3Q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j6y1j4vgbzbhg5g867wb.png" alt="http"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's go through each of the key players of the web.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#client-server-and-http"&gt;
  &lt;/a&gt;
  Client, Server, and HTTP
&lt;/h3&gt;

&lt;p&gt;I spend a lot of free time watching YouTube. It is probably the website I spent the most time in my life. In order for me to get to the website to watch a video, I go through these steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open my computer&lt;/li&gt;
&lt;li&gt;Open Google Chrome&lt;/li&gt;
&lt;li&gt;In the browser, I type &lt;a href="http://www.youtube.com"&gt;www.youtube.com&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;I get to the website&lt;/li&gt;
&lt;li&gt;Watch a video&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this example, I am the &lt;em&gt;client&lt;/em&gt; who requests access to a video that is in YouTube's database. YouTube is serving me by providing the web service to access the video, which makes YouTube the &lt;em&gt;server&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;client&lt;/strong&gt; is internet-connected computer hardware that uses client software like a web browser. Your computer and mobile device are clients that use browsers like Chrome, Firefox, or Safari. We often refer to the device, browser, and user using the device as clients. Clients can request access to the content that servers store.&lt;/p&gt;

&lt;p&gt;On the other hand, a &lt;strong&gt;server&lt;/strong&gt; is computer software and its hardware that &lt;em&gt;serves&lt;/em&gt; clients by receiving their requests and returning responses accordingly. Servers can show web pages, send/receive emails, store files and share them, or identify and authorize user accounts. &lt;/p&gt;

&lt;p&gt;I like to compare a client and a server relationship as a patron and a librarian at a public library. The patron can ask the librarian a book he is looking for, and the librarian will respond with the location of the book if they have a copy of it. Just like that, a client can send a request to a server to view a web document.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--LyNuQZ01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egkbeud4qjbfrjmblrdp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--LyNuQZ01--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/egkbeud4qjbfrjmblrdp.png" alt="librarian-cartoon"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When humans speak to each other, we use a shared language and follow its grammar structure to deliver our messages across. Clients and servers do the same by using &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP"&gt;&lt;strong&gt;Hypertext Transfer Protocol (HTTP)&lt;/strong&gt;&lt;/a&gt; which is a request-response protocol they expect from each other when exchanging data. &lt;/p&gt;

&lt;p&gt;A client communicates with a server by sending an &lt;strong&gt;HTTP request&lt;/strong&gt; containing information on what the client is looking for, and the server responds to the client by returning an &lt;strong&gt;HTTP response&lt;/strong&gt; as a result of the request. HTTP requests and responses both have &lt;strong&gt;HTTP Header&lt;/strong&gt;, which allows clients and servers to understand each other better. HTTP Headers contain information like the client's setup (browser, operating system), browser cookie, and domain name the client wants to reach. &lt;/p&gt;

&lt;p&gt;HTTP response often contains the resource data that was requested, and the status of the requested action to indicate if it was successful or not. As the name "Hypertext" suggests, HTTP requests and responses transfer content that is beyond just text. The content could be &lt;strong&gt;code files&lt;/strong&gt; like HTML, CSS, JavaScript, or &lt;strong&gt;assets&lt;/strong&gt; like images, audio, video, documents, and etc. &lt;/p&gt;

&lt;p&gt;It is possible for hackers to intercept the data in the middle and see the data being exchanged though. This could result in horrible outcomes logging into a bank account, email, or health insurance. That is why &lt;strong&gt;Hypertext Transfer Protocol Secure (HTTPS)&lt;/strong&gt; was introduced to encrypt the data. With &lt;em&gt;HTTPS&lt;/em&gt;, hackers will see encrypted meaningless characters even if they were to intercept the data. The data can be decrypted by using the shared secret key between the client and the server.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---Pew_QG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qh86byb84hrtxqoty2k.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---Pew_QG9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4qh86byb84hrtxqoty2k.png" alt="web-workflow"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#internet-tcpip-and-dns"&gt;
  &lt;/a&gt;
  Internet, TCP/IP, and DNS
&lt;/h3&gt;

&lt;p&gt;For clients and servers to be able to communicate, they connect to the global system of computer networks called the &lt;strong&gt;Internet.&lt;/strong&gt; We pay a monthly fee to the &lt;strong&gt;internet service providers (ISP)&lt;/strong&gt; to be able to connect to the network. The internet uses the internet protocol suite (TCP/IP) to exchange data packets between computers. &lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;packets&lt;/strong&gt; are fragments of data that allow data to be transferred reliably and efficiently. Transferring a large file instead of packets would be inefficient as the speed of the data transfer varies based on how you are sending them (optical cable, copper wire, or satellite). It can result in an unexpected loss of data or a change in the order of the packets. this is where the &lt;em&gt;internet protocol suite&lt;/em&gt; comes into play. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AeRgTG70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88w3v552ae4n6q1bw3mk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AeRgTG70--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/88w3v552ae4n6q1bw3mk.png" alt="packet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;internet protocol suite&lt;/strong&gt; is a communication protocol that ensures the successful exchange of data to an intended destination. It consists of two protocols: &lt;em&gt;TCP&lt;/em&gt; and &lt;em&gt;IP&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TCP&lt;/strong&gt; stands for &lt;strong&gt;Transmission Control Protocol&lt;/strong&gt; which defines the model of the data and assigns numbers to each data packet being transferred. With the numbers assigned to each packet, it can detect loss of data during the transfer to fix them and reassemble them in the right order as one file again. Due to its complexity, it makes TCP very reliable.&lt;/p&gt;

&lt;p&gt;In order for data to get to the right place between computers, it requires the addresses of each computer. &lt;strong&gt;IP&lt;/strong&gt; stands for &lt;strong&gt;Internet Protocol&lt;/strong&gt; which routes data to the right location. IPs are numbers of unique computer addresses with a mix of digits and periods like &lt;code&gt;192.158. 1.38&lt;/code&gt; (IPv4). With the web growing its size every day, a new version of IP, IPv6 was deployed to fulfill the need for more internet addresses. Compared to its previous version with a 32-bit binary IP address, IPv6 uses a 128-bit binary IP address which allows 340 undecillion unique address space! Here's an example of an IPv6 address: &lt;code&gt;2001:0db8:85a3:0000:0000:8a2e:0370:7334&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jxw1MVzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeu5z70mxrbmjpotnyax.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jxw1MVzM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jeu5z70mxrbmjpotnyax.png" alt="network-packet"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These IP addresses are not that human-readable though, and we'd need address books to keep all the websites' IP addresses. And it'd be very inconvenient if we had to look up Google's IP address and type &lt;code&gt;http://142.250.188.238/&lt;/code&gt; in the browser to get there every time. To solve this problem, the &lt;strong&gt;Domain Name System (DNS)&lt;/strong&gt; was introduced. The DNS is like the address book of the internet. We purchase domains from DNS providers, website addresses that are more human-readable like &lt;em&gt;google.com&lt;/em&gt;, &lt;em&gt;youtube.com&lt;/em&gt;, or &lt;em&gt;facebook.com&lt;/em&gt;. With the domains purchased for the websites, the DNS provider is responsible for exchanging domain URLs to IP addresses to the clients.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YnBX-hF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmj47og7s4qtyfph6qdw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YnBX-hF6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qmj47og7s4qtyfph6qdw.jpg" alt="client-dns"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#typical-flow-of-the-web"&gt;
  &lt;/a&gt;
  Typical Flow of the Web
&lt;/h3&gt;

&lt;p&gt;With that being said, let's take a look at an example of a user accessing YouTube's home page and break down what's happening behind the scenes:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--emkGMhpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh4pa7y21xnratdi9pbg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--emkGMhpb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xh4pa7y21xnratdi9pbg.png" alt="web-works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;User opens his laptop (&lt;em&gt;client&lt;/em&gt;) that is connected to the internet and opens Google Chrome (&lt;em&gt;browser&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;User types in the web address &lt;a href="http://www.youtube.com"&gt;www.youtube.com&lt;/a&gt; to the browser address bar&lt;/li&gt;
&lt;li&gt;The browser goes to the &lt;em&gt;DNS server&lt;/em&gt; and exchange the web address into an &lt;em&gt;IP address&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;The browser uses the &lt;em&gt;IP address&lt;/em&gt; to make an &lt;em&gt;HTTP request&lt;/em&gt; to YouTube's &lt;em&gt;server&lt;/em&gt; to access the website page&lt;/li&gt;
&lt;li&gt;YouTube server looks at the &lt;em&gt;HTTP request&lt;/em&gt; and if the requested data is found, prepares the data into &lt;em&gt;packets&lt;/em&gt; and &lt;em&gt;TCP&lt;/em&gt; numbers each &lt;em&gt;packet&lt;/em&gt;
&lt;/li&gt;
&lt;li&gt;YouTube &lt;em&gt;server&lt;/em&gt; responds with an &lt;em&gt;HTTP response&lt;/em&gt; with a "200 OK" status code (means the request was processed successfully) to the user's browser&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;TCP&lt;/em&gt; assembles the &lt;em&gt;packets&lt;/em&gt; back to the data as a whole, and the web page is displayed by parsing &lt;em&gt;HTML&lt;/em&gt;, &lt;em&gt;CSS&lt;/em&gt;, &lt;em&gt;JavaScript&lt;/em&gt; and its assets like images and videos&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Jo9CZX7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgidlfw8fe90z0n4gsgz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Jo9CZX7d--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fgidlfw8fe90z0n4gsgz.png" alt="wfh"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imagine the world without the web. Imagine doing your school projects without any access to Google, just like back a couple of decades ago when things were simple without any power of the internet. You would have to access offline documents like books, newspapers, or magazines. Researchers had to fly across the country to interview the right personnel to collect data.&lt;/p&gt;

&lt;p&gt;The web has made many things possible by connecting humanity all over the world to exchange information. You can now watch Netflix anywhere with the internet instead of going to a Blockbuster store to rent a DVD, have video chats with friends and family across the globe, or simply Google any information you are looking for. Especially the COVID-19 pandemic really showed the power of the web by connecting the world regardless of the location. It minimized the damage to our society by allowing remote work, food delivery service, and quick/easy access to COVID-19 guidelines for anyone.&lt;/p&gt;

&lt;p&gt;Although you do not have to fully understand how the web works to be able to use them, I hoped to provide a little bit of history and knowledge on how the web operates. Feel free to comment below with additional information! Thank you so much for taking time to read this blog post.&lt;/p&gt;

&lt;p&gt;Follow my blog account or let's connect on &lt;a href="https://www.linkedin.com/in/chuckchoi/"&gt;LinkedIn&lt;/a&gt; to keep up with more tech content!&lt;/p&gt;

</description>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Benefits of Having a Website for Small Business</title>
      <author>Alexandr Pluzhnik</author>
      <pubDate>Mon, 26 Apr 2021 13:30:38 +0000</pubDate>
      <link>https://dev.to/alexandr_pluzhnik_93c3789/benefits-of-having-a-website-for-small-business-3fi7</link>
      <guid>https://dev.to/alexandr_pluzhnik_93c3789/benefits-of-having-a-website-for-small-business-3fi7</guid>
      <description>&lt;p&gt;Why website is crucial for a small business? See how you can sell your products, increase market penetration, and more!&lt;/p&gt;

&lt;p&gt;Most people in 2021 understand, that in order to have a successful business you need to have a website, but how it looks in the reality? Let’s take a look at some data:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#according-to-tda-research-and-bluecorona-stats"&gt;
  &lt;/a&gt;
  According to TDA research and Bluecorona stats:
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Less than 64% of small businesses have a website&lt;/li&gt;
&lt;li&gt;70-80% of people research a company online before visiting it or making a purchase.&lt;/li&gt;
&lt;li&gt;Among small businesses without a website, 29% plan to build one in 2021.&lt;/li&gt;
&lt;li&gt;As of 2019, 94% of small business websites are mobile-friendly&lt;/li&gt;
&lt;li&gt;70-80% of potential customers could be lost to businesses without a website.&lt;/li&gt;
&lt;li&gt;41% of businesses without websites say their business “does not need a website.”&lt;/li&gt;
&lt;li&gt;79% of entrepreneurs with a business website expect to grow at least 25% in the next three to five years, compared to 64% of those without a site&lt;/li&gt;
&lt;li&gt;44% of B2B buyers will leave a website if there is no contact information available&lt;/li&gt;
&lt;li&gt;In 2020, 81% of all worldwide online traffic was generated through mobile phones (Statista, 2020)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Looks interesting? Now as you understand the thing and landed there we would like to show you a few important tips on how you can use the website for your business.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#website-%E2%86%92-presence-%E2%86%92-marketing-%E2%86%92-product-sales"&gt;
  &lt;/a&gt;
  Website → presence → marketing → product sales!
&lt;/h2&gt;

&lt;p&gt;We’ve already discussed &lt;a href="https://www.unikorns.work/magazine/how-to-make-your-website-visible-on-the-web"&gt;how to make your website be visible on the web&lt;/a&gt;, now let’s talk a bit about what this visibility can bring you. First of all in 2021 if you sell anything without a web integration you probably sell vegetables on the market (ha-ha, just kidding), and the statistics above clearly show us the customer path nowadays, it’s mostly online!&lt;/p&gt;

&lt;p&gt;There are a lot of different website types and a professional studio can definitely fit one to your needs. With a fitted website, your customer journey will be highly pleasant and you’ll have a lot of loyal customers.&lt;/p&gt;

&lt;p&gt;Did you think about the &lt;strong&gt;autonomy&lt;/strong&gt; the website can give you? Let’s imagine you have a sneakers store. You have to pay rent, you need to spend time and effort to promote it somehow on the outdoor, and suddenly the world pandemic starts…Not the best scenario, is it? With a help of a website, you’ll be safe and sound selling your sneakers online.&lt;/p&gt;

&lt;p&gt;With a help of a website, you can build &lt;strong&gt;loyalty and trust.&lt;/strong&gt; When you’re new to your customer they don’t really trust you, so you can place some reviews, feedback, and build trust using your website.&lt;/p&gt;

&lt;p&gt;With a help of new technologies such as Google Analytics, Hotjar, Answer the Public you can learn a lot about your customers, their age, location, hobbies, preferences, etc. We’ve described more in our article about SEO.&lt;br&gt;
You can create strong branding. Connecting the website and social media helps businesses strengthen brand awareness that is crucial to gain loyal customers.&lt;/p&gt;

&lt;p&gt;Using the website you can be unique and better than competitors. Analyze your targeted audience, then - your competitors. What does the TA need and competitors don’t offer? Just give it, communicate, place on your website.&lt;br&gt;
Your business is available 24/7. Thanks to website customers can reach you out any time, choose a product, get to know you better, interact with you, engage with your sales and content funnel.&lt;/p&gt;

&lt;p&gt;Boost your authority. Using, for example, blog. You can create content that will be valuable for your customers and appear on valuable sources (so-called backlinking). It will help you to promote your brand’s authority in an online space.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Of course, mostly those benefits are individual from business to business but they’re definitely significant and worth their price. So what about price, how much does it cost? Read our article about &lt;a href="https://www.unikorns.work/magazine/how-much-does-the-website-cost"&gt;website types &amp;amp; prices.&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cheers"&gt;
  &lt;/a&gt;
  Cheers!
&lt;/h2&gt;

&lt;p&gt;Are you looking for a professional lightning-fast website?&lt;br&gt;
Don’t hesitate to send us a note at &lt;a href="mailto:hello@unikorns.work"&gt;hello@unikorns.work&lt;/a&gt; or visit our website: &lt;a href="http://www.unikorns.work"&gt;www.unikorns.work&lt;/a&gt;&lt;/p&gt;

</description>
      <category>beginners</category>
      <category>webdev</category>
      <category>marketing</category>
    </item>
  </channel>
</rss>
