<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Deploying podman images using  running container in centos -8</title>
      <author>anirudha ingole</author>
      <pubDate>Mon, 26 Jul 2021 14:55:20 +0000</pubDate>
      <link>https://dev.to/ingoleanirudha/deploying-podman-images-using-running-container-in-centos-8-1i60</link>
      <guid>https://dev.to/ingoleanirudha/deploying-podman-images-using-running-container-in-centos-8-1i60</guid>
      <description>&lt;p&gt;What is podman .&lt;br&gt;
What is Podman? Podman is a daemonless container engine for developing, managing, and running OCI Containers on your Linux System. Containers can either be run as root or in rootless mode.&lt;/p&gt;

&lt;p&gt;People associate running pods with Kubernetes. And when they run containers in their development runtimes, they do not even think about the role pods could play—even in a localized runtime.  Most people coming from the Docker world of running single containers do not envision the concept of running pods. There are several good reasons to consider using pods locally, other than using pods to naturally group your containers.&lt;/p&gt;

&lt;p&gt;Podman installation process in centos 8..&lt;br&gt;
sudo dnf -y module disable container-tools&lt;br&gt;
sudo dnf -y install 'dnf-command(copr)'&lt;br&gt;
sudo dnf -y copr enable rhcontainerbot/container-selinux&lt;br&gt;
sudo curl -L -o /etc/yum.repos.d/devel:kubic:libcontainers:testing.repo &lt;a href="https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/CentOS_8/devel:kubic:libcontainers:testing.repo"&gt;https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/testing/CentOS_8/devel:kubic:libcontainers:testing.repo&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#optional-for-runc-users-crun-will-be-installed-by-default-install-runc-first-if-you-prefer-runc"&gt;
  &lt;/a&gt;
  OPTIONAL FOR RUNC USERS: crun will be installed by default. Install runc first if you prefer runc
&lt;/h1&gt;

&lt;p&gt;sudo dnf -y --refresh install runc&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#install-podman"&gt;
  &lt;/a&gt;
  Install Podman
&lt;/h1&gt;

&lt;p&gt;sudo dnf -y --refresh install podman&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How To Make WebSites Load Faster</title>
      <author>Nukala Suraj</author>
      <pubDate>Mon, 26 Jul 2021 14:49:27 +0000</pubDate>
      <link>https://dev.to/lucidmach/how-to-make-websites-load-faster-524i</link>
      <guid>https://dev.to/lucidmach/how-to-make-websites-load-faster-524i</guid>
      <description>&lt;p&gt;In today's ultra fast paced world,&lt;br&gt;
3 Seconds of a not-yet-loaded-website is more than enough for the user to click that close button&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HswnvVvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7q0dmfz7u6tl0o6xu7i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HswnvVvm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/q7q0dmfz7u6tl0o6xu7i.png" alt="3 secs"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is especially important if you're trying to build a web based startup.&lt;br&gt;
Having an optimized website could lead to significantly more revenue&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#components-of-a-website"&gt;
  &lt;/a&gt;
  Components of a WebSite
&lt;/h2&gt;

&lt;p&gt;Anything on the Web has 3 main components&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;FrontEnd&lt;/li&gt;
&lt;li&gt;BackEnd&lt;/li&gt;
&lt;li&gt;Network&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--CxmiSGhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcatsygvaziwho6m4gd0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--CxmiSGhr--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kcatsygvaziwho6m4gd0.png" alt="Components"&gt;&lt;/a&gt;&lt;br&gt;
No Matter How Optimized the backend is (a common huge mistake kinda 😅)&lt;/p&gt;

&lt;p&gt;End of the day it is the network that impacts 80% of a website's performance&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wCw31bhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a969makrhacau9thdhb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wCw31bhq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5a969makrhacau9thdhb.png" alt="pareto"&gt;&lt;/a&gt;&lt;br&gt;
So by Pareto's Rule,&lt;br&gt;
We focus on the &lt;strong&gt;NETWORK&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7a2VILxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyb34cd0yiqn3imds01m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7a2VILxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyb34cd0yiqn3imds01m.png" alt="network"&gt;&lt;/a&gt; The network is what connects the &lt;em&gt;frontend&lt;/em&gt; to the &lt;em&gt;backend&lt;/em&gt;.&lt;br&gt;
Most sites make &lt;em&gt;&lt;strong&gt;100s of requests&lt;/strong&gt; in the background&lt;/em&gt; as the site loads.&lt;/p&gt;

&lt;p&gt;If each response carries a lot of data&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The time for the data to reach the client increases&lt;/li&gt;
&lt;li&gt;The time for each resource to render increases&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code&gt;basically the website take forever to load&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#solution"&gt;
  &lt;/a&gt;
  Solution
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ru160FIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55d4nokjryu5t1be2tls.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ru160FIz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/55d4nokjryu5t1be2tls.png" alt="Network"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Reduce the size of files by

&lt;ol&gt;
&lt;li&gt;Sending only what the user (and not the website needs) aka code splitting&lt;/li&gt;
&lt;li&gt;Removing &lt;code&gt;whitespaces&lt;/code&gt; or &lt;code&gt;uglifying&lt;/code&gt; the file&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;If you use webpack, this is automatically done for you&lt;br&gt;
&lt;strong&gt;BONUS&lt;/strong&gt;: You could PWA and cache data on the client [But That Topic Is For Another Blog]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
&lt;li&gt;Reducing the size of images by optimizing them&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;
  &lt;a href="#reducing-the-size-of-images-by-optimizing-them"&gt;
  &lt;/a&gt;
  Reducing the size of images by optimizing them
&lt;/h2&gt;
&lt;h3&gt;
  &lt;a href="#what-does-this-mean"&gt;
  &lt;/a&gt;
  What does this mean?
&lt;/h3&gt;

&lt;p&gt;We don't reduce the size by reducing resolution,&lt;br&gt;
We reduce the size by reducing the scale of colors.&lt;/p&gt;

&lt;p&gt;Let me explain,&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UdLaAA2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5xqp4n2sbkwz24r5rca.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UdLaAA2t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/b5xqp4n2sbkwz24r5rca.png" alt="demo"&gt;&lt;/a&gt;&lt;br&gt;
The human eye can't distinguish between #000000 and #010101.&lt;br&gt;
So when we optimize images we're reducing the bits used to store color data of pixels&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#how-do-we-do-that"&gt;
  &lt;/a&gt;
  How do we do that?
&lt;/h3&gt;

&lt;p&gt;There are libraries that take care of this for us. &lt;/p&gt;

&lt;p&gt;However we can't create a program to do this every time for every image so, I created a CLI Tool [My First CLI Application] called &lt;code&gt;Shirmkage&lt;/code&gt; which stands for &lt;code&gt;shrink&lt;/code&gt; + &lt;code&gt;image&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can check out/play around with the &lt;a href="https://github.com/LucidMach/Shrimkage"&gt;source code&lt;/a&gt; on my github.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm install -g shrimkage 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Shrimkage makes optimizing images in bulk easy&lt;/p&gt;

&lt;p&gt;You can use it directly in the terminal [that's what a CLI is tho 😅]&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shrimkage folder
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;The default level of reduction is 50 (/100). so if you want more optimization you can &lt;code&gt;shrimkage folder --level=10&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shimkage also give you the option to apply optimizations to individual images&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;shrimkage file --path=./test.png
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And That is The 20% Effort to gain an 80% increase in web performance&lt;br&gt;
✌ &lt;/p&gt;

&lt;p&gt;If You ❤️ This,&lt;/p&gt;

&lt;p&gt;Follow Me on &lt;a href="https://twitter.com/LucidMach"&gt;Twitter&lt;/a&gt;, &lt;/p&gt;

&lt;p&gt;Where you can see updates on all my work [including blogs]&lt;/p&gt;

&lt;p&gt;Also, Don't forget to DM Me&lt;br&gt;
Let's have small dev talk&lt;br&gt;
😁✌&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>performance</category>
      <category>todayilearned</category>
      <category>javascript</category>
    </item>
    <item>
      <title>The Death of Browser Games</title>
      <author>Saji Wang</author>
      <pubDate>Mon, 26 Jul 2021 14:47:37 +0000</pubDate>
      <link>https://dev.to/codesphere/the-death-of-browser-games-25af</link>
      <guid>https://dev.to/codesphere/the-death-of-browser-games-25af</guid>
      <description>&lt;p&gt;Those of us that grew up in the late 90s to mid-2000s likely spent a good chunk of our time playing browser games. While most prior gaming required a console and disc, the internet opened up the opportunity to try out thousands of online games, often for free, with minimal setup time.&lt;/p&gt;

&lt;p&gt;On the dev side, tools like Adobe Flash allowed developers with minimal resources to create and publish their own games for users.&lt;/p&gt;

&lt;p&gt;By the end of the 2000s, however, this viral sensation had largely died down, and today, with the exception of online gambling, the browser game market is nearly completely gone.&lt;br&gt;
So what exactly caused this? The apparent death of browser games is an interesting story of weak technologies, Silicon Valley feuds, and shifting consumer trends.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-problems-with%C2%A0flash"&gt;
  &lt;/a&gt;
  The Problems with Flash
&lt;/h2&gt;

&lt;p&gt;While many of us probably think back at Adobe Flash with a lot of nostalgia, we might not remember that the technology had a good amount of issues.&lt;/p&gt;

&lt;p&gt;For starters, having to manage different versions of Adobe Flash created a difficult hurdle for new internet users. In addition, the need to update your Adobe Flash Player created an opportunity for malicious developers to trick users into downloading malware.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--j_Afcn7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfip71ztw95kctscvpd.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--j_Afcn7n--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3vfip71ztw95kctscvpd.png" alt="Alt Text"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, throughout its lifespan, Flash was riddled with security vulnerabilities, especially on Android devices. In 2009, Symantec's Internet Security Threat Report stated that remote code execution in Flash Player was the second most attacked vulnerability by hackers.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-poison%C2%A0apple"&gt;
  &lt;/a&gt;
  The Poison Apple
&lt;/h2&gt;

&lt;p&gt;In April of 2010, Steve Jobs, while CEO of Apple, published an open letter criticizing Adobe Flash and explaining why it would not be allowed on Apple's increasingly popular iOS products. While it's speculated that the decision to open the letter may have had some anti-competitive and/or egotistic reasons behind it, Jobs listed the following six reasons behind his decision:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It's a proprietary product, and Apple prefers open web standards&lt;/li&gt;
&lt;li&gt;Websites are switching to better video formats&lt;/li&gt;
&lt;li&gt;Flash has bad security, reliability, and performance&lt;/li&gt;
&lt;li&gt;Flash unnecessarily drains battery&lt;/li&gt;
&lt;li&gt;Flash was not designed for a mobile format&lt;/li&gt;
&lt;li&gt;It's an unnecessary layer that holds back innovation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This letter and the corresponding ban on Flash essentially stopped any chance of Flash cornering the new mobile market, which we'll talk about next.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#new-mediums"&gt;
  &lt;/a&gt;
  New Mediums
&lt;/h2&gt;

&lt;p&gt;Perhaps the greatest nail in browser gaming's coffin was the rise of the mobile gaming market, kicked off by the release of the iPhone in 2007.&lt;/p&gt;

&lt;p&gt;More specifically mobile gaming offered the same sort of simplicity as browser games, with increased safety. Not to mention that you could play anywhere on the go.&lt;/p&gt;

&lt;p&gt;By the early 2010s, mobile gaming completely dominated the casual gaming market and arguably has ever since.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-death-of%C2%A0flash"&gt;
  &lt;/a&gt;
  The Death of Flash
&lt;/h2&gt;

&lt;p&gt;Though we're told things on the internet last forever, on December 12th, 2020, Adobe officially stopped support for Adobe Flash. As a result, most remnants of the browser game era are no longer accessible.&lt;/p&gt;

&lt;p&gt;While shifting markets removed the need for Flash on the consumer side, the improvement of HTML5 deprecated the need for Flash on the development side. Animations and games could now be made with some pretty boilerplate HTML, CSS, and Javascript, not to mention the plethora of game development libraries that now exist without any need for third-party software like Flash.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-does-the-future%C2%A0hold"&gt;
  &lt;/a&gt;
  What Does the Future Hold?
&lt;/h2&gt;

&lt;p&gt;Nostalgia aside, the story of browser games can give us an important insight into building successful software. The technology landscape is always evolving, so don't bet on what tech looks like now, bet on what you think tech is going to look like.&lt;/p&gt;




&lt;p&gt;So what do you think? Are browser games going to make a comeback? What do you think the future of casual gaming looks like?&lt;/p&gt;

&lt;p&gt;Thanks for reading. If you're trying to build your own game on the web and want a simple and powerful way to deploy it, checkout &lt;a href="https://link.codesphere.com/BS"&gt;Codesphere&lt;/a&gt;, the next-generation cloud provider.&lt;/p&gt;

</description>
      <category>gamedev</category>
      <category>webdev</category>
      <category>softwaredevelopment</category>
      <category>programming</category>
    </item>
    <item>
      <title>Amazing CSS Tips &amp; Tricks</title>
      <author>Tarandeep Singh</author>
      <pubDate>Mon, 26 Jul 2021 14:32:14 +0000</pubDate>
      <link>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0</link>
      <guid>https://dev.to/tarandeep_singh/amazing-css-tips-tricks-1jl0</guid>
      <description>&lt;p&gt;Wanna know how to use modern CSS features to write clean code by using some stunning CSS tricks? You have just landed at the right place!&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#a-tip-for-beginners"&gt;
  &lt;/a&gt;
  A Tip For Beginners
&lt;/h3&gt;

&lt;p&gt;Here's a quick tip for those who have just started to learn CSS - DON'T use Bootstrap or Tailwind! No doubt they are great tools to get a nice-looking UI quickly but using these will mean that you'll be missing on CSS fundamentals. I have personally done this mistake &amp;amp; oh boy did I regret it. &lt;br&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#grid-is-great"&gt;
  &lt;/a&gt;
  Grid is Great
&lt;/h3&gt;

&lt;p&gt;Unlike flexbox which only deals with individual columns &amp;amp; rows, Grid allows you to think about the big picture. When you set an element to &lt;code&gt;display: grid;&lt;/code&gt; you can then define its children as a bunch of columns &amp;amp; rows. Have a look at the amount of code we have eliminated by using grid instead of flexbox in the image below.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--u6WnwqZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uey8kgmk3ybat10wby6j.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--u6WnwqZc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uey8kgmk3ybat10wby6j.jpg" alt="Grid vs flexbox image"&gt;&lt;/a&gt; &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"&gt;Click here to read more about CSS Grid Layout&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#css-debugging"&gt;
  &lt;/a&gt;
  CSS Debugging
&lt;/h3&gt;

&lt;p&gt;We often use Chrome developer tools for debugging our code (including CSS) but you'll be surprised to know that Firefox developer tools are much superior especially when it comes to CSS. On inspecting an element in Firefox, you'll have a break-down of the box-model like you have in Chrome but you can also edit properties on it directly, for instance changing the padding or margin and it will also give you a breakdown of all the properties that are influencing the box-model. Not only this, Firefox also provides really nice graphics for flex &amp;amp; grid layouts.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IqLwvXVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a39m463qcewxi2vbey2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IqLwvXVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7a39m463qcewxi2vbey2.jpg" alt="Firefox dev-tool image"&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#image-filters"&gt;
  &lt;/a&gt;
  Image Filters
&lt;/h3&gt;

&lt;p&gt;It's fun to play around with images in CSS, but did you know that we can apply amazing effects to those images. In fact CSS allows using lots of filters on the images to help developers play with the graphics without changing it in Photoshop. Let’s have a look at some of the filters:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.image img {
  max-width: 300px;
}

.blur {
  filter: blur(5px);
}

.grayscale {
  filter: grayscale(100%);
}

.brightness {
  filter: brightness(150%);
}

.saturate {
  filter: saturate(200%);
}

.invert {
  filter: invert(100%);
}

.huerotate {
  filter: hue-rotate(180deg);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;br&gt;&lt;br&gt;
I have much more to write and share with you guys but it's getting a little long, so comment below if you want part 2 of &lt;strong&gt;Amazing CSS Tips &amp;amp; Tricks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can follow me on &lt;a href="https://twitter.com/Tarandeep_s1ngh"&gt;Twitter&lt;/a&gt; and &lt;a href="https://www.linkedin.com/in/tarandeep-s1ngh/"&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>css</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Let's talk about python</title>
      <author>Mohammad Ali Chraghi</author>
      <pubDate>Mon, 26 Jul 2021 14:16:50 +0000</pubDate>
      <link>https://dev.to/alichraghi/let-s-talk-about-python-2im3</link>
      <guid>https://dev.to/alichraghi/let-s-talk-about-python-2im3</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MEvccc0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sso6gv7hd7t0sss8x4ui.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MEvccc0R--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sso6gv7hd7t0sss8x4ui.jpg" alt="Alt Text"&gt;&lt;/a&gt;&lt;br&gt;
If I did not make some people angry in the previous post, I am sure they now report me to be banned&lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;

&lt;p&gt;python now is very popular, As far as I can say the most popular in history because JS is coercion to web developers, but python is widely used. idk python. i just tried it and i can't understand why programmers love it!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#keep-your-python-version"&gt;
  &lt;/a&gt;
  Keep Your Python Version
&lt;/h2&gt;

&lt;p&gt;you should keep python with your project with &lt;code&gt;venv&lt;/code&gt;. because your project may not be compatible with later versions of Python :| at least rust keeps the functions and syntax and just make it a warning. but your python project is risky. i had lot of problems with python based tools and packages for that&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#memory-leaks"&gt;
  &lt;/a&gt;
  Memory Leaks
&lt;/h2&gt;

&lt;p&gt;python memory leaks are amazing! just in a fibonacci app (omg thre's no variable) python have more than &lt;a href="https://github.com/AliChraghi/LanguagesBenchmark/tree/main/fibonacci"&gt;300Kb memory leak&lt;/a&gt;! just imagine python for a web framework like Django :( just checkout lua. it's safe&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#error-detection"&gt;
  &lt;/a&gt;
  Error Detection
&lt;/h2&gt;

&lt;p&gt;error handling is a important part of development, but python as the most popular language can't detect errors during the interpretion.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#huge-source-code"&gt;
  &lt;/a&gt;
  Huge Source Code
&lt;/h2&gt;

&lt;p&gt;yes, i think this is a problem. python source code have 2.9M lines of code and cause of the most problems. huge source code makes more mistakes and bugs. just checkout lua! it's &lt;br&gt;
 very same to python, a interpreter language without, but without any thirdparty library, lua is safe, minimal, have't &lt;br&gt;
 memory leak in a fibonacci app and just have 54K lines!!&lt;/p&gt;

&lt;p&gt;// pls don't comment &lt;code&gt;delete this post&lt;/code&gt; or &lt;code&gt;this is most shi_t post i ever seen&lt;/code&gt; they are my reasons. so pls just say your reasons&lt;/p&gt;

</description>
      <category>python</category>
    </item>
    <item>
      <title>Mutation is life / Boring Technology</title>
      <author>borislav nikolov</author>
      <pubDate>Mon, 26 Jul 2021 14:12:11 +0000</pubDate>
      <link>https://dev.to/rekki/mutation-is-life-boring-technology-11h0</link>
      <guid>https://dev.to/rekki/mutation-is-life-boring-technology-11h0</guid>
      <description>&lt;p&gt;TLDR:&lt;br&gt;
We had horrible outage where rabbitmq node ran out of memory because I&lt;br&gt;
forgot to unbind a queue (one of 50s or so), and we lost a whole bunch&lt;br&gt;
of in-producer-memory state, this made our whole infrastructure&lt;br&gt;
completely probabilistic and it took us 2 hours of blood sweat and&lt;br&gt;
tears to recover the lost data. We should've just used postgres as a&lt;br&gt;
queue.&lt;/p&gt;

&lt;p&gt;In almost any system being built today we have users that perform&lt;br&gt;
actions to mutate state. This is life, to create side effects, yes,&lt;br&gt;
mutation is life.&lt;/p&gt;

&lt;p&gt;I will illustrate it like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[ user(U) ]&amp;lt;------+
    |             |
    | action(A)   |
    v             |
[ receiver (R)]   ^ world
    |             | change
    |             |
    v             |
[ state (S) ] ----+

receiver:
   this is usually a backend endpoint

user:
   in our case is a chef

state:
   in our case: creating an order
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You can move those pieces in any way, for example the action can be a&lt;br&gt;
function of the state mutation, instead of the other way around, or&lt;br&gt;
the receiver of the action can be the user itself and the user&lt;br&gt;
directly mutates the state, etc. This however is what technical&lt;br&gt;
implementation means, looks the same to the outside, but has very&lt;br&gt;
different emergent properties.This is what this post is about,&lt;br&gt;
emergent behavior and chaos.&lt;/p&gt;

&lt;p&gt;Lets a possible technical implementation of 'user' creating an 'order'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user sends action to an endpoint /create-order&lt;/li&gt;
&lt;li&gt;backend code pushes to 'order.new'&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a) consumer of 'order.new'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;order is picked up transformed a bit and written to a database&lt;/li&gt;
&lt;li&gt;another message is sent to 'order.created' queue&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create audit log of who/when/what&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;b) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;send email to the interested parties&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;c) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;builds an email and sends it to 'email.created'&lt;/li&gt;
&lt;li&gt;logs the email for archiving purposes&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;d) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;create chat message with the order&lt;/li&gt;
&lt;li&gt;push to 'message.created'&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;e) consumer 'order.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;extract features for DS&lt;/li&gt;
&lt;li&gt;copy to salesforce etc&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'message.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;send push notification&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'email.created'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;sends the email and then pushes to a queue
email.sent&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;li&gt;

&lt;p&gt;a) consumer of 'email.sent'&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;marks the email as sent&lt;/li&gt;
&lt;/ul&gt;


&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is pretty much what we have now (maybe a bit more complicated but&lt;br&gt;
not much), you can trivially add more reactive components listening to&lt;br&gt;
specific topics, and you can fanout and etc just with rabbitmq.&lt;/p&gt;

&lt;p&gt;It is super flexible and extendible, re-triable etc.&lt;/p&gt;

&lt;p&gt;Of course it was not designed like that, but it grew over the years,&lt;br&gt;
adding bits and pieces here and there, it is very easy to&lt;br&gt;
unconsciously complicate it.&lt;/p&gt;

&lt;p&gt;Everything was really good until I did some refactor and stopped&lt;br&gt;
consuming one of the topics that was a clone of 'order.created', and I&lt;br&gt;
forgot to unbind the queue, so it kept getting messages but nobody was&lt;br&gt;
draining it, and a the RMQ node ran out of memory. Only 1 out of 3,&lt;br&gt;
because we still use elixir for that process, we were relaying on&lt;br&gt;
elixir's in-memory stability to keep a buffer of messages to resend if&lt;br&gt;
need, which of course I killed when I restarted the cluster because I&lt;br&gt;
wasn't sure what the fuck is going on.&lt;/p&gt;

&lt;p&gt;That meant that 30% of all requests went to the abyss, the true abyss.&lt;br&gt;
We had to stay to 5am to glue bits and pieces and to connect the state.&lt;/p&gt;

&lt;p&gt;Caused the worse outage I have ever been firefighting, and once I was&lt;br&gt;
involved in solving an outage that we were selling hotels for 1/100th&lt;br&gt;
of the price, losing millions of euros.&lt;/p&gt;

&lt;p&gt;Now lets discuss another implementation of the same thing:&lt;br&gt;
'user' creating an 'order':&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user sends action to an endpoint /create-order&lt;/li&gt;
&lt;li&gt;backend code:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  begin
  insert the order
  insert the message (push_notification_sent_at = null)
  insert the email (sent_at = null, delivered_at = null)
  insert log
  commit
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;a) secondly cronjob
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  select (for update) messages where push_notification_sent_at is null
  send the push notification
  update the message
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;b) secondly cronjob
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  select (for update) email where sent_at is null
  send the email
  update the email table
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Use the database as a queue, works totally fine, we can scale&lt;br&gt;
postgress vertically &lt;em&gt;forever&lt;/em&gt;. Why forever you ask? Because there are&lt;br&gt;
~30000 restaurants in London, and we can geo-shard it, and there is&lt;br&gt;
physical upper bound on amount of data in a region.&lt;/p&gt;

&lt;p&gt;Fucking queues, it is so easy to overuse them, without knowing it&lt;br&gt;
creeps up on you, and in the end you have infrastructure spaghetti.&lt;/p&gt;

&lt;p&gt;Anyway We are migrating from queues to transactions and fuck it, I cant keep&lt;br&gt;
it in my head, ultimately it all ends up in postgres anyway, just with&lt;br&gt;
extra steps.&lt;/p&gt;

&lt;p&gt;Fuck.&lt;/p&gt;

&lt;p&gt;The morale of the story is:&lt;br&gt;
If shit ends up in postgres anyway, and you can afford to directly&lt;br&gt;
write to it (which is not always the case), just write to it.&lt;/p&gt;

&lt;p&gt;Do boring technologoy, the way we wrote php3 shit 20 years ago, get&lt;br&gt;
the state and write it in the database, even though mysql didn't have&lt;br&gt;
transactions (it was helpfully accepting to BEGIN/COMMIT though haha),&lt;br&gt;
it was ok.&lt;/p&gt;

&lt;p&gt;PS:&lt;br&gt;
There were 2 missed deliveries, but CS handled them like a&lt;br&gt;
king. Sending uber to pick up the things form the supplier and sending&lt;br&gt;
it to the chef and etc. It is much easier to firefight when you know&lt;br&gt;
CustomerSuccess has your back.&lt;/p&gt;

&lt;p&gt;PPS: I think outages are the best, everyone groups up and we solve the&lt;br&gt;
problem, some panic, some adrenalin, some pressure, but in the end the&lt;br&gt;
whole company becomes more of a team.&lt;/p&gt;

</description>
      <category>boring</category>
    </item>
    <item>
      <title>First steps with Rust declarative macros!</title>
      <author>Roger Torres Paes (he/him/ele)</author>
      <pubDate>Mon, 26 Jul 2021 14:09:13 +0000</pubDate>
      <link>https://dev.to/rogertorres/first-steps-with-rust-declarative-macros-1f8m</link>
      <guid>https://dev.to/rogertorres/first-steps-with-rust-declarative-macros-1f8m</guid>
      <description>&lt;p&gt;Macros are one of the ways to extend Rust syntax. As &lt;a href="https://doc.rust-lang.org/book/ch19-06-macros.html"&gt;&lt;em&gt;The Book&lt;/em&gt;&lt;/a&gt; calls it, “a way of writing code that writes other code”. Here, I will talk about &lt;em&gt;declarative macros&lt;/em&gt;, or as it is also called, &lt;em&gt;macros by example&lt;/em&gt;. Examples of declarative macros are &lt;code&gt;vec!&lt;/code&gt;, &lt;code&gt;println!&lt;/code&gt; and &lt;code&gt;format!&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;The macros I will &lt;strong&gt;not&lt;/strong&gt; talk about are the &lt;em&gt;procedural macros&lt;/em&gt;, but you can read about them &lt;a href="https://doc.rust-lang.org/reference/procedural-macros.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, &lt;strong&gt;I am writing for beginners&lt;/strong&gt;. If you want to jump to the next level, check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;The Book's&lt;/em&gt; &lt;a href="https://doc.rust-lang.org/book/ch19-06-macros.html"&gt;section on macros&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The chapter about macros in &lt;a href="https://doc.rust-lang.org/reference/macros.html"&gt;&lt;em&gt;Rust by Example&lt;/em&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://danielkeep.github.io/tlborm/book/README.html"&gt;&lt;em&gt;The Little Book of Rust Macros&lt;/em&gt;&lt;/a&gt;, which is the most complete material I found about the topic (the second chapter is specially amusing).&lt;/li&gt;
&lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#why-do-i-need-macros"&gt;
  &lt;/a&gt;
  Why do I need macros?
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;The actual coding start in the &lt;a href="#coding"&gt;next section&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Declarative macros (from now on, just “macros”) are not functions, but it would be silly to deny the resemblance. Like functions, we use them to perform actions that would otherwise require too many lines of code or quirky commands (I am thinking about &lt;code&gt;vec!&lt;/code&gt; and &lt;code&gt;println!&lt;/code&gt;, respectively). These are (two of) the reasons to &lt;em&gt;use&lt;/em&gt; macros, but what about the reasons to &lt;em&gt;create&lt;/em&gt; them? &lt;/p&gt;

&lt;p&gt;Well, maybe you are developing a crate and want to offer this feature to the users, like warp did with &lt;a href="https://docs.rs/warp/0.1.20/warp/macro.path.html"&gt;&lt;code&gt;path!&lt;/code&gt;&lt;/a&gt;. Or maybe you want to use a macro as a boilerplate, so you don't have to create several similar functions, as I did &lt;a href="https://github.com/rogertorres/mtgsdk/blob/main/src/cards.rs#L197"&gt;here&lt;/a&gt;. It might be also the case that you need something that cannot be delivered by usual Rust syntax, like a function with initial values or structurally different parameters (such as &lt;code&gt;vec!&lt;/code&gt;, that allows calls like &lt;code&gt;vec![2,2,2]&lt;/code&gt; or &lt;code&gt;vec![2;3]&lt;/code&gt;—more on this later).&lt;/p&gt;

&lt;p&gt;That being said, I believe that the best approach is to learn how to use them, try them a few times, and when the time comes when they might be useful, you will remember this alternative.&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#declaring-macros"&gt;
  &lt;/a&gt;
  &lt;a&gt;&lt;/a&gt;Declaring macros
&lt;/h2&gt;

&lt;p&gt;This is how you declare a macro:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;etwas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You could call this macro with the commands &lt;code&gt;etwas!()&lt;/code&gt;, &lt;code&gt;etwas![]&lt;/code&gt; or &lt;code&gt;etwas!{}&lt;/code&gt;. There's no way to force one of those. When we call a macro always using one or the other—like parenthesis in &lt;code&gt;println!("text")&lt;/code&gt; or square-brackets in &lt;code&gt;vec![]&lt;/code&gt;—it is just a convention of usage (a convention that we should keep).&lt;/p&gt;

&lt;p&gt;But what is happening in this macro? Nothing. Let's add something to make it easier to visualize its structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;double!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The left side of &lt;code&gt;=&amp;gt;&lt;/code&gt; is the &lt;strong&gt;matcher&lt;/strong&gt;, the rules that define what the macro can receive as input. The right side is the &lt;strong&gt;transcriber&lt;/strong&gt;, the output processing. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Not very important, but both matcher and transcriber could be writen using either &lt;code&gt;()&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt; or &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-matching"&gt;
  &lt;/a&gt;
  The matching
&lt;/h2&gt;

&lt;p&gt;This will become clear later, but let me tell you right the way: the matching resembles &lt;a href="https://en.wikipedia.org/wiki/Regular_expression"&gt;regex&lt;/a&gt;. You may ask for specific arguments, fixed values, define acceptable repetition, etc. If you are familiar with it, you should have no problems picking this up.&lt;/p&gt;

&lt;p&gt;Let's go through the most important things you should know about the matching.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#variable-argument"&gt;
  &lt;/a&gt;
  Variable argument
&lt;/h3&gt;

&lt;p&gt;Variable arguments begin with &lt;code&gt;$&lt;/code&gt; (e.g., &lt;code&gt;$value:expr&lt;/code&gt;). Their structure is: &lt;code&gt;$&lt;/code&gt; &lt;code&gt;name&lt;/code&gt; &lt;code&gt;:&lt;/code&gt; &lt;code&gt;designator&lt;/code&gt;. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Both &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;:&lt;/code&gt; are fixed.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;name&lt;/code&gt; follows Rust variables convention. When used in the transcriber (see below), they will be called &lt;em&gt;metavariables&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Designators are &lt;strong&gt;not&lt;/strong&gt; variable types. You may think of them as “syntax categories”. Here, I will stick with &lt;a href="https://doc.rust-lang.org/reference/expressions.html"&gt;expressions&lt;/a&gt; (&lt;code&gt;expr&lt;/code&gt;), since Rust is &lt;a href="https://doc.rust-lang.org/reference/statements-and-expressions.html"&gt;“primarily an expression language”&lt;/a&gt;. A list of possible designators can be found &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html#metavariables"&gt;here&lt;/a&gt;. &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; There seems to be no consensus on the name "designator". &lt;a href="https://danielkeep.github.io/tlborm/book/mbe-min-captures-and-expansion-redux.html"&gt;The little book&lt;/a&gt; calls it "capture"; &lt;a href="https://doc.rust-lang.org/reference/macros-by-example.html"&gt;The Rust reference&lt;/a&gt; calls it "fragment-specifier"; and you will also find people referring them as "types". Just be aware of that when jumping from source to source. Here, I will stick with designator, as proposed in &lt;a href="https://doc.rust-lang.org/rust-by-example/macros/designators.html"&gt;Rust by example&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#fixed-arguments"&gt;
  &lt;/a&gt;
  Fixed arguments
&lt;/h3&gt;

&lt;p&gt;No mystery here. Just add them without &lt;code&gt;$&lt;/code&gt;. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"{}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nd"&gt;power!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3_i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I know there are things here that I have not explained yet. I will talk about them now.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#separator"&gt;
  &lt;/a&gt;
  Separator
&lt;/h3&gt;

&lt;p&gt;Some designators require some specific follow up. Expressions require one of these:  &lt;code&gt;=&amp;gt;&lt;/code&gt;, &lt;code&gt;,&lt;/code&gt; or &lt;code&gt;;&lt;/code&gt;. That is why I had to add a comma between &lt;code&gt;$value:expr&lt;/code&gt; and the fixed-value &lt;code&gt;squared&lt;/code&gt;. You will find a complete list of follow-ups &lt;a href="https://danielkeep.github.io/tlborm/book/mbe-min-captures-and-expansion-redux.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-matching"&gt;
  &lt;/a&gt;
  Multiple matching
&lt;/h3&gt;

&lt;p&gt;What if we want our macro to not only calculate a number squared, but also a number cubed? We do this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;exp&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2_i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cubed&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3_i32&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Multiple matching can be used to capture different levels of specificity. Usually, you will want to write the matching rules from the most-specific to the least-specific, so your call doesn't fall in the wrong matching. A more technical explanation can be found &lt;a href="https://danielkeep.github.io/tlborm/book/mbe-min-captures-and-expansion-redux.html"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repetition"&gt;
  &lt;/a&gt;
  Repetition
&lt;/h3&gt;

&lt;p&gt;Most macros that we use allow for a flexible number of inputs. For example, we may call &lt;code&gt;vec![2]&lt;/code&gt; or &lt;code&gt;vec![1, 2, 3]&lt;/code&gt;. This is where the matching resembles Regex the most. Basically, we wrap the variable inside &lt;code&gt;$()&lt;/code&gt; and follow up with a repetition operator:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;*&lt;/code&gt; — indicates any number of repetitions.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;+&lt;/code&gt; — indicates any number, but at least one.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;?&lt;/code&gt; — indicates an optional, with zero or one occurrence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let's say we want to add &lt;code&gt;n&lt;/code&gt; numbers. We need at least two addends, so we will have a single first value, and one or more (&lt;code&gt;+&lt;/code&gt;) second value. This is what such a matching would look like.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$left:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$right:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;adder!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We will work on the transcriber latter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#repetition-separator"&gt;
  &lt;/a&gt;
  Repetition separator
&lt;/h3&gt;

&lt;p&gt;As you can see in the example above, I added a comma before the repetition operator &lt;code&gt;+&lt;/code&gt;.  That's how we add a separator for each repetition without a trailing separator. But what if we want a trailing separator? Or maybe we want it to be flexible, allowing the user to have a trailing separator or not? You may have any of the three possibilities like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;no_trailing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$e:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;with_trailing&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$e:expr&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;either&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$e:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(,)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;no_trailing!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;with_trailing!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
    &lt;span class="nd"&gt;either!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nd"&gt;either!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#versatility"&gt;
  &lt;/a&gt;
  Versatility
&lt;/h3&gt;

&lt;p&gt;Unlike functions, you may pass rather different arguments to macros. Let's consider the &lt;code&gt;vec!&lt;/code&gt; macro example. For that, I will omit the transcriber.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$elem:expr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;$n:expr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$x:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(,)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It deals with three kinds of calls:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;vec![]&lt;/code&gt;, which creates an empty Vector.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vec!["text"; 10]&lt;/code&gt;, which repeats the first value ("text") &lt;code&gt;n&lt;/code&gt; times, where &lt;code&gt;n&lt;/code&gt; is the second value (10).&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;vec![1,2,3]&lt;/code&gt;, which creates a vector with all the listed elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want to see the implementation of the &lt;code&gt;vec!&lt;/code&gt; macro, check &lt;a href="https://www.youtube.com/watch?v=q6paRBbLgNw"&gt;Jon's stream about macros&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;




&lt;h2&gt;
  &lt;a href="#the-transcriber"&gt;
  &lt;/a&gt;
  The transcriber
&lt;/h2&gt;

&lt;p&gt;The magic happens after the &lt;code&gt;=&amp;gt;&lt;/code&gt;. Most of what you are going to do here is regular Rust, but I would like to bring your attention to some specificities.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#type"&gt;
  &lt;/a&gt;
  Type
&lt;/h3&gt;

&lt;p&gt;When I called the exponentiation macro &lt;code&gt;power!&lt;/code&gt;, I did this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;power!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3_i32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I had to specify the type &lt;code&gt;i32&lt;/code&gt; because I used the &lt;code&gt;pow()&lt;/code&gt; function, which cannot be called on ambiguous numeric type; and as we do not define types in macros, I had to let the compiler know this information somehow. This is something to be aware when dealing with macros. Of course, I could have forced it by declaring a variable and passing the metavariable value to it and thus fixing the variable type. However, to do such a thing, we need multiple statements.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#multiple-statements"&gt;
  &lt;/a&gt;
  Multiple statements
&lt;/h3&gt;

&lt;p&gt;To have more than one line in your transcriber, you have to use double curly brackets:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;etwas&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                             &lt;span class="c"&gt;//v --- this one&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$value:expr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;squared&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt; 
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;u32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="nf"&gt;.pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt;
   &lt;span class="c"&gt;//^ --- and this one&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Easy.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-repetition"&gt;
  &lt;/a&gt;
  Using repetition
&lt;/h3&gt;

&lt;p&gt;Let us finish our &lt;code&gt;adder!&lt;/code&gt; macro.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;adder&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$right:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;i32&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; 
            &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt;
    &lt;span class="p"&gt;}};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;assert_eq!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;adder!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To handle repetition, all we have to do is to place the statement we want to repeat within &lt;code&gt;$()+&lt;/code&gt; (the repetition operator should match, that is why I am using &lt;code&gt;+&lt;/code&gt; here as well). &lt;/p&gt;

&lt;p&gt;But what if we have multiple repetitions? Consider the following code.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$addend:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$multiplier:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$addend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

         &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
          &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

          &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sum: {} | Product: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nd"&gt;operations!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;How does Rust know that it must repeat &lt;em&gt;four times&lt;/em&gt; during the first repetition block and only &lt;em&gt;three times&lt;/em&gt; in the second one? By context. It checks the variable that is being use and figure out what to do. Clever, huh?&lt;/p&gt;

&lt;p&gt;Sure, you can make things harder to Rust. In fact, you may turn them indecipherable, like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="nd"&gt;macro_rules!&lt;/span&gt; &lt;span class="n"&gt;operations&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$addend:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$multiplier:expr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="nv"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="nv"&gt;$addend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;

          &lt;span class="nd"&gt;println!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Sum: {} | Product: {}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What does “clever Rust” do with something like this? Well, one of the things it does best: it gives you a clear compile error:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;error: meta-variable &lt;span class="s1"&gt;'addend'&lt;/span&gt; repeats 4 &lt;span class="nb"&gt;times&lt;/span&gt;, but &lt;span class="s1"&gt;'multiplier'&lt;/span&gt; repeats 3 &lt;span class="nb"&gt;times&lt;/span&gt;
  &lt;span class="nt"&gt;--&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; src/main.rs:43:10
   |
43 |           &lt;span class="si"&gt;$(&lt;/span&gt;
   |  __________^
44 | |             &lt;span class="nb"&gt;sum&lt;/span&gt; +&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$addend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
45 | |             product &lt;span class="k"&gt;*&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
46 | |         &lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="k"&gt;*&lt;/span&gt;
   | |_________^
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Neat! 🦀&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#expand"&gt;
  &lt;/a&gt;
  Expand
&lt;/h2&gt;

&lt;p&gt;As mentioned earlier, macros are syntax extensions, which means that Rust will turn them into regular Rust code. Sometimes, to understand what is going &lt;del&gt;wrong&lt;/del&gt; on, it is very helpful to see how rust pull that transformation off. To do so, use the following command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cargo&lt;/span&gt; &lt;span class="n"&gt;rustc&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Zunstable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;pretty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command, however, is not only verbose, but it will also call for the nightly compiler. To avoid this and get the same result, you may install &lt;a href="https://github.com/dtolnay/cargo-expand"&gt;&lt;code&gt;cargo-expand&lt;/code&gt;&lt;/a&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cargo &lt;span class="nb"&gt;install &lt;/span&gt;cargo-expand
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once it is installed, you just have to run the command &lt;code&gt;cargo expand&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Although you don't have to be using the nightly compiler, I guess (and you may call me on this) you got to have it installed. To do so, run the command &lt;code&gt;rustup instal nightly&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Look at how the macro &lt;code&gt;operations!&lt;/code&gt; is expanded.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight rust"&gt;&lt;code&gt;&lt;span class="k"&gt;fn&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="k"&gt;mut&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;product&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;std&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;io&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="mi"&gt;_&lt;/span&gt;&lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Arguments&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"Sum: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;" | Product: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
                        &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;ArgumentV1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                        &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;ArgumentV1&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;core&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nn"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                    &lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As you can see, even &lt;code&gt;println!&lt;/code&gt; was expanded.&lt;/p&gt;




&lt;p&gt;And that's all for today. There is certainly more to cover, but I will leave you with the readings I recommended earlier.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Cover image by &lt;a href="https://unsplash.com/photos/FTNGfpYCpGM"&gt;Thom Milkovic&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

</description>
      <category>beginners</category>
      <category>rust</category>
      <category>tutorial</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Integrating with the Erste Banking API</title>
      <author>Robert Radošić</author>
      <pubDate>Mon, 26 Jul 2021 13:40:49 +0000</pubDate>
      <link>https://dev.to/bornfightcompany/integrating-with-the-erste-banking-api-4gbe</link>
      <guid>https://dev.to/bornfightcompany/integrating-with-the-erste-banking-api-4gbe</guid>
      <description>&lt;h2&gt;
  &lt;a href="#intro"&gt;
  &lt;/a&gt;
  Intro
&lt;/h2&gt;

&lt;p&gt;As a part of a larger project, we had to integrate with the Erste PSD2 API. Although it's mostly your standard OAuth flow, there are a few "gotchas" along the way. This post will guide you to getting authenticated and pulling transactions.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#developer-portal"&gt;
  &lt;/a&gt;
  Developer Portal
&lt;/h2&gt;

&lt;p&gt;Before you can start writing any code, you will need an Erste developer account. You can open one on the &lt;a href="https://developers.erstegroup.com/"&gt;Erste developers portal&lt;/a&gt; where you will be able to choose the branch of the bank you will be integrating with and which of the APIs you will be using. &lt;strong&gt;Take note that the only API you can use without certification is the Corporate API&lt;/strong&gt;. Luckily this was exactly the one we needed and didn't have to go through the certification process.&lt;/p&gt;

&lt;p&gt;Among many options that are available on the portal dashboard, the only three that you are going to need to get started are OAuth settings, credentials, and the certificates section. &lt;/p&gt;

&lt;p&gt;In the OAuth settings, you are going to set the callback URI, this is the URI to which the authorization code is going to be sent. If you don't have a local server that can accept HTTP requests, you can use something like &lt;a href="https://requestbin.com"&gt;RequestBin&lt;/a&gt; to output the request and get the authorization code.&lt;/p&gt;

&lt;p&gt;In the certificates section, you will find the public and private keys which you can download and install to your devices' CA store.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#calling-api-endpoints"&gt;
  &lt;/a&gt;
  Calling API endpoints
&lt;/h2&gt;

&lt;p&gt;So, once we have the certificates installed and the callback URI setup, we can start calling the Erste API. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#consent-id"&gt;
  &lt;/a&gt;
  Consent ID
&lt;/h3&gt;

&lt;p&gt;The first endpoint that we are going to call is the /consents API which is going to return our consent ID:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
 https://webapi.developers.erstegroup.com/api/ebc/sandbox/v1/netapi/consents &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/json'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'X-Request-ID: 4774477a-0508-4293-be86-6fca6f67adda'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'psu-ip-address: 127.0.0.1'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'web-api-key: WEB_API_KEY'&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'{
  "access": {
    "accounts": [],
    "balances": [],
    "transactions": []
  },
  "recurringIndicator": false,
  "validUntil": "2019-06-30",
  "frequencyPerDay": 4,
  "combinedServiceIndicator": false
}'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the WEB_API_KEY is the API key in your developer dashboard.&lt;br&gt;
The response will return the consent ID, save it somewhere as it's going to be needed in other requests.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#oauth-url"&gt;
  &lt;/a&gt;
  OAuth URL
&lt;/h3&gt;

&lt;p&gt;After we have obtained the consent token, we have to visit the URL with the following structure:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;https://webapi.developers.erstegroup.com/api/ebc/sandbox/v1netapi/auth
    ?redirect_uri=REDIRECT_URI
    &amp;amp;client_id=CLIENT_ID
    &amp;amp;response_type=code
    &amp;amp;access_type=offline
    &amp;amp;state=loremipsum
    &amp;amp;code_challenge=loremipsum
    &amp;amp;code_challenge_method=S256
    &amp;amp;scope=AIS:CONSENT_ID%20openid%20offline_access
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the variables are following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REDIRECT_URI - the URI you put as the callback in the OAuth setting&lt;/li&gt;
&lt;li&gt;CLIENT_ID - client ID from your dashboard&lt;/li&gt;
&lt;li&gt;CONSENT_ID - consent ID from the previous request
If you put the right details in the URL you will be greeted with an OAuth mocking tool where you can choose what type of user you want to mock, and what access you are going to give for their accounts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#authorization-code"&gt;
  &lt;/a&gt;
  Authorization code
&lt;/h3&gt;

&lt;p&gt;Once you select all the options in the OAuth mocking tool you will be redirected to the URI you put in the OAuth setting. If you are using RequestBin you can now go through the request and get the authorization code from the request.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bearer-token"&gt;
  &lt;/a&gt;
  Bearer token
&lt;/h3&gt;

&lt;p&gt;At this point, once we have obtained the authorization code and the consent token, we can finally call the /token endpoint and receive the Bearer token which will be used to get transactions, accounts, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;curl &lt;span class="nt"&gt;-X&lt;/span&gt; POST &lt;span class="se"&gt;\&lt;/span&gt;
  https://webapi.developers.erstegroup.com/api/ebc/sandbox/v1/netapi/token &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="s1"&gt;'Content-Type: application/x-www-form-urlencoded'&lt;/span&gt;
  &lt;span class="nt"&gt;-d&lt;/span&gt; &lt;span class="s1"&gt;'redirect_uri=REDIRECT_URI&amp;amp;client_id=CLIENT_ID&amp;amp;client_secret=CLIENT_SECRET&amp;amp;grant_type=authorization_code&amp;amp;code_verifier=loremipsum&amp;amp;code=AUTHORIZATION_CODE'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Where the variables are following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;REDIRECT_URI - the URI you put as the callback in the OAuth setting&lt;/li&gt;
&lt;li&gt;CLIENT_ID - client ID from your dashboard&lt;/li&gt;
&lt;li&gt;CLIENT_SECRET - client secret from your dashboard&lt;/li&gt;
&lt;li&gt;AUTHORIZATION_CODE - authorization code from the previous request&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#calling-other-endpoints"&gt;
  &lt;/a&gt;
  Calling other endpoints
&lt;/h2&gt;

&lt;p&gt;Once you have the Bearer token you can use standard Bearer auth in the header of your requests. With this token, you can pull transactions and accounts from the sandbox. To go to production, the requirements will vary from country to country. The most common procedure will involve giving your VAT number and the SSL cert for the domain your app will be using.&lt;/p&gt;

&lt;p&gt;If you are going to be integrating with the Croatian branch of the Erste bank using PHP take a look at our &lt;a href="https://github.com/bornfight/erste-bank-client-php"&gt;in-house library&lt;/a&gt; to help you get started.&lt;/p&gt;

</description>
      <category>php</category>
      <category>api</category>
      <category>webdev</category>
      <category>engineeringmonday</category>
    </item>
    <item>
      <title>What Things To Remember When Developing A Taxi Service App for Business?</title>
      <author>JackKhan</author>
      <pubDate>Mon, 26 Jul 2021 13:04:53 +0000</pubDate>
      <link>https://dev.to/jackkhan/what-things-to-remember-when-developing-a-taxi-service-app-for-business-43eg</link>
      <guid>https://dev.to/jackkhan/what-things-to-remember-when-developing-a-taxi-service-app-for-business-43eg</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--bY7nC6dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnfhqr30gm9hmi71vkot.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bY7nC6dz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xnfhqr30gm9hmi71vkot.png" alt="Taxi App Development"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The on-demand taxi service business is the leading one among all other app-based online service sectors. As it is the first on-demand booking service process online in the market, it still holds its huge growth value in the business area.&lt;/p&gt;

&lt;p&gt;With the convenient options to book taxis through smartphones, customers also find it is very easy to request taxi services. Its smart progress replaces the traditional way of taxi booking offline with a powerful digitized solution.&lt;/p&gt;

&lt;p&gt;In such a gainful market platform, your business becomes a famous brand between users by developing your new business app as per the following.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#existing-market-growth-of-taxi-industry-in-realtime"&gt;
  &lt;/a&gt;
  Existing Market Growth of Taxi Industry in Real-time
&lt;/h2&gt;

&lt;p&gt;Before starting any kind of business online it is significant to analyze your selected business market growth in contemporary. It is not an exception to the online taxi-hailing startup too. It ensures the gainful evolution of your chosen business career online in the future.&lt;/p&gt;

&lt;p&gt;According to the report by Businesswire, from the recovery of the post-covid scenario, the global taxi service business market value is estimated to reach USD 41.22 bn in 2025, at a growth rate of CAGR 9.5% in the future.&lt;/p&gt;

&lt;p&gt;By analyzing its before new normal impact, the market value of the taxi business online would be projected to rise from USD 23.42 bn to 28.65 billion between the years 2020-2021. Its growth rate is estimated at a CAGR of 22.3%.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#analyze-current-taxi-service-app-user-demands-in-marketplace"&gt;
  &lt;/a&gt;
  Analyze Current Taxi Service App User Demands in Marketplace
&lt;/h2&gt;

&lt;p&gt;Taxi service business startup online definitely will be the best of your business career choice as per the statistics. Due to the core business tool being your new taxi app for your taxi service startup, it is mandated to create it powerful to the existing on-demand marketplace. &lt;/p&gt;

&lt;p&gt;So, analyzing the current demands of the existing taxi app users assists you to develop your app accordingly. That would make your app effective to the users’ experiences on the taxi service on-demand taxi service marketplace online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ride-hailing Service Requirements&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The number of users increasing in the taxi service business in real-time creates a huge demand for different platforms to access services in needed time. Many existing taxi-hailing service providers are yet to update their taxi apps concerning their business player requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Enhanced Traits Regarding Trends&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;As per the evaluations in the growing taxi service industry in real-time, the customers are expecting frequent enhancements. But today, most of the new entrepreneurs fail to fulfill the need while they develop their app for launching their taxi service businesses online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Easy On-boarding&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After the taxi-hailing platform came in a digitized service booking manner to the market, a lot of professional drivers benefited from the respective source. In many cases, the onboarding processes for new drivers seek to be smooth in verifications.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strong Security&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The players involved in the taxi service business have produced their information such as name, phone numbers, and email ID. Also, the end-users input their sensitive details like payment card numbers, social media credentials, e-wallet integrations, etc. So, the users are highly looking for a secured platform in the taxi service online.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#points-to-consider-while-developing-taxi-app-for-startup"&gt;
  &lt;/a&gt;
  Points to Consider While Developing Taxi App for Startup
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--mVu1z-Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4oihhuj83ptfzpv0f99.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--mVu1z-Ee--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4oihhuj83ptfzpv0f99.png" alt="Points to remember while developing uber clone app"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#concentrate-on-modern-features-in-ondemand-taxi-service-business-today"&gt;
  &lt;/a&gt;
  Concentrate on Modern Features in On-demand Taxi Service Business Today
&lt;/h2&gt;

&lt;p&gt;As mentioned, the latest enhancements that occur in the contemporary taxi service industry online need to be included in your own business app too. Several successful options captivate today’s taxi app users a lot in the market area. In which, the top stuff to mention here is as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Login&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The passengers can smartly log in to the taxi app using their social media credentials. Though, they can get rapid access to use the respective taxi service app online whenever they want. It allows them to book taxis at their needed time quickly even as new users.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Swifty Service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Push notifications facilities inbuilt with taxi apps alerts concerned driver players immediately while customers are requesting taxis. It assists them to instantly respond to the customer. Also, they can complete the trippings swiftly utilizing the GPS navigation mapping system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Multi Payment Mode&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The major advantage the end-users get in the app-based taxi service booking platform is multi-payment gateways. Through this, the passengers can pay their fares online or offline. They can pay smartly online using their payment card, e-wallet, or net/mobile banking.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Real-time Details&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The customers can actively track their booked taxis’ arrivals for ensuring. Thus, they could be ready with their packed things for their preferred trip plan. It avoids unnecessary waiting time for customers on board after the taxi arrival.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;History Tracking&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All the business players in the on-demand taxi service online can simply track their permitted history details from their respective business apps, whenever they want to review. As well, the admin can track all his business workflow details following history or live.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#choose-minimum-viable-product-for-your-taxi-service-startup"&gt;
  &lt;/a&gt;
  Choose Minimum Viable Product for Your Taxi Service Startup
&lt;/h2&gt;

&lt;p&gt;Developing your new taxi business app from the readymade taxi dispatch software app script offers you the greatest advantages for your new online taxi business initiation. The minimum viable product (MVP) for your startup assists you in many angels as follows.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smooth Access on Complete Process&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The already premade taxi dispatch software app/web panel is possessed with all the latest technology traits. Right from the quick login to fast taxi service completions, all make it easy for you (admin), and your business players to progressively involve in and use your service online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick App Launching&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Because your new business app from the taxi dispatch software would be ready within 15 days (approximately), you can launch your new app soon to the on-demand market area. So, you could start gaining visibility very shortly after your complete business plan.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No Need Frequent Trials&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The build-in features of the taxi dispatch software for your new business app creation are entirely tested many times before being included in the app model. So, you don’t need to wait for trials to confirm your app design for business launching.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fully Custom Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While you choose taxi dispatch software for your on-demand taxi app development process, you could receive a fully custom solution. It allows you to make complete changes in its default design as per your own business idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#handshake-with-right-app-developer-partner"&gt;
  &lt;/a&gt;
  Handshake with Right App Developer Partner
&lt;/h2&gt;

&lt;p&gt;Approaching the best app development company in the market is always a plus point to all the new entrepreneurs starting a business in the on-demand taxi service online. It would be beneficial for them with the following stuff on taxi app development processes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Experienced Development Completions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Your approach with the development company should be intelligent. Select professional app creation service providers available in the global market. Prefer at least your selected app development company should have a decade of service experience in the development field.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Standardize Progress&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;By verifying the mention, you could expect reliable app development progress for your business app development. So they are already experts, your new taxi app gets chances to be completed within your expected time period for app launching online.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Highly Concerned Client Approach&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;From such a standardized company, you get tied up with, you could receive concerns regarding your app development modulations and requirements. That would make it simple to implement your own ideas on the final app creation output.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Loyal Handshake&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Following these reminders before visiting any app development company to create your new taxi app, increases the loyalty between you and your selective company for longtime app development updates.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#stand-out-from-your-business-competitors-with-additional-modulations"&gt;
  &lt;/a&gt;
  Stand Out from Your Business Competitors with Additional Modulations
&lt;/h2&gt;

&lt;p&gt;Your app from the taxi service app developed through the taxi dispatch software app could receive the below-mentioned options. By the use of those hallmarks, you could create your new taxi service app too progressive that stands out from other competitors in the on-demand taxi business marketplace.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sketch Your Own Business Plan&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get ready with your own business plan sketched from your personal taxi service business analysis. Review your competitors’ taxi app user feedback. Find their demands on the existing on-demand taxi service industry online. Add them with your new taxi app for service to fulfill those demands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interact with Experts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Use expert guidance on your new &lt;a href="https://www.spotnrides.com/"&gt;taxi app development&lt;/a&gt;. Use your selected app development company’s full support and guidance. Get clear with your own business plan regarding app development with professionals for extra clarity to technically include new features or remove any default. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Use Custom Modulation Solution&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Make custom changes to your new taxi app. Initiate your modulations/corrections on the default settings, options, UI, and UX for unique app design output. It makes your taxi business app launch to be inaugurated as per your complete business plan analytics.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Be Engaged With Users&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;After your business launches successfully online, always be concerned with your business players. Update your app frequently in reference to the customers’ app service feedback. Be active in social media presence. Post your official information such as app enhancements, services added on, discount details, etc. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-thoughts"&gt;
  &lt;/a&gt;
  Final Thoughts
&lt;/h3&gt;

&lt;p&gt;On-demand taxi-hailing service online is gaining a huge market value in its online marketplace. By remembering the mentioned key things, you could develop your new taxi service app most powerful for business launching. As a result, your new startup has much more visibility among people to progressively increase user value in real-time.&lt;/p&gt;

</description>
      <category>uberclone</category>
      <category>development</category>
      <category>taxibookingapp</category>
      <category>taxibusiness</category>
    </item>
    <item>
      <title>Patterns: Observable pattern</title>
      <author>Jucian0</author>
      <pubDate>Mon, 26 Jul 2021 13:01:20 +0000</pubDate>
      <link>https://dev.to/jucian0/observable-pattern-3cc7</link>
      <guid>https://dev.to/jucian0/observable-pattern-3cc7</guid>
      <description>&lt;h1&gt;
  &lt;a href="#observable-pattern"&gt;
  &lt;/a&gt;
  Observable pattern
&lt;/h1&gt;

&lt;p&gt;In this post, I will explain a very common pattern used extensively by software developers, even though new developers may not know how to implement it or how it works, they're probably still using it, as &lt;code&gt;Observable&lt;/code&gt; pattern is very common in libraries.&lt;/p&gt;

&lt;p&gt;This pattern is very useful when there are many software components attached to a specific event. In that case, those components just need to subscribe to this event to be notified when the event happens.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#an-analogy"&gt;
  &lt;/a&gt;
  An analogy
&lt;/h2&gt;

&lt;p&gt;When I discovered this pattern, I read a lot of analogies trying to explain how &lt;code&gt;Observable&lt;/code&gt; pattern works, the most interesting of all was the trip raffle.&lt;/p&gt;

&lt;p&gt;A company called Atric wanted to give a trip to one of their employees, so the company created a raffle. The company released it like this:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whoever comes up with the funniest sentence about a travelling will win a trip to Petar SP. The sentences should be emailed to &lt;a href="mailto:raffle@company.com"&gt;raffle@company.com&lt;/a&gt;, and the winner will be notified by email in three weeks.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Many employees wrote the sentences, and after three weeks the employees received an e-mail saying who was won the raffle:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Thanks for your participation, and we received many subscriptions, unfortunately, your entry was not the winning contribution.&lt;br&gt;
The winner was Juciano Barbosa for his sentence, "Bringing a snake on a airplane os not a good idea!".&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#applying-the-analogy"&gt;
  &lt;/a&gt;
  Applying the analogy
&lt;/h2&gt;

&lt;p&gt;This is a simple explanation of how the &lt;code&gt;Observable&lt;/code&gt; pattern works, as when the company sent the email, every participant was notified.&lt;/p&gt;

&lt;p&gt;The raffle was an Observable and the participants were observers, the company used internal communication to recruit some participants, and after that, the company used email to notify the participants of the outcome.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UhuJoN2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fFL1gLyM--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://miro.medium.com/max/1400/1%252A1_UqvLgnW_YoveycFEHmzA.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UhuJoN2e--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--fFL1gLyM--/c_limit%252Cf_auto%252Cfl_progressive%252Cq_auto%252Cw_880/https://miro.medium.com/max/1400/1%252A1_UqvLgnW_YoveycFEHmzA.png" alt="img"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#basic-requirements"&gt;
  &lt;/a&gt;
  Basic requirements?
&lt;/h2&gt;

&lt;p&gt;To apply this tutorial you will need to have:&lt;/p&gt;

&lt;p&gt;Basic knowledge of Javascript or another programing language.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-start"&gt;
  &lt;/a&gt;
  Let's start
&lt;/h2&gt;

&lt;p&gt;In this tutorial, I use Javascript, but feel free to use another language. We can also use an approach more function, so please let me know if this interests you, but for now, we will implement using a class approach.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[...&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;};&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;observer&lt;/span&gt; &lt;span class="o"&gt;!==&lt;/span&gt; &lt;span class="nx"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;observers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;observer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;constructor&lt;/code&gt; - Start by creating a class named Observable and in the constructor, assign an empty array in the observers property. The observers property will keep the observable list.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;subscribe&lt;/code&gt; - After that, create a method named subscribe, this method receives a function as an argument, and this argument will be an observable. After that, use the spread operator to assign a new array with the function received as an argument into the observers property. The return function will be responsible for removing the observer that we just assigned into subscribers.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;unsubscribe&lt;/code&gt; - This method is responsible for removing a certain observer. The unsubscribe method receives a function and verifies if this function is present in the observers list, and if it is, removes it.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;notify&lt;/code&gt; - This method receives data as an argument, iterates the observers list, and passes the data as an argument into every observer.&lt;/li&gt;
&lt;li&gt;Finally, return an Observable object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#using-it"&gt;
  &lt;/a&gt;
  Using it
&lt;/h2&gt;

&lt;p&gt;This is a simple implementation of the Observable pattern, but we need to write a case of use to see it working. The code below is not a common case of use, but makes it easier for us to figure out how it works.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;./Observer&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;// selecting HTML elements&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text-input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstSubscriberBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first-subscriber-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondSubscriberBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second-subscriber-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstUnSubscriberBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first-un-subscriber-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondUnSubscriberBtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second-un-subscriber-btn&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textFirstSubscriber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;first-subscriber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;textSecondSubscriber&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;second-subscriber&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;//observers are inserting into text element the value received&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;firstText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textFirstSubscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;secondText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;textSecondSubscriber&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerText&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// event source, notifying all observer&lt;/span&gt;
&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;input&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;notify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;target&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

&lt;span class="c1"&gt;// subscribing&lt;/span&gt;
&lt;span class="nx"&gt;firstSubscriberBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;secondSubscriberBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;subscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// unsubscribing&lt;/span&gt;
&lt;span class="nx"&gt;firstUnSubscriberBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;firstText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="nx"&gt;secondUnSubscriberBtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;click&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;Observable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;unsubscribe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;secondText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Start by selecting some HTML elements, like a button and text input.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;firstText&lt;/code&gt; and &lt;code&gt;secondText&lt;/code&gt; are the observers that receive a certain text value and insert it into the text element using &lt;code&gt;innerText&lt;/code&gt; resource.&lt;/li&gt;
&lt;li&gt;In the next step add an event listener for input event type, this listener should be the &lt;code&gt;Observable.notify&lt;/code&gt; method. If some input event happens, the notify method will notify every observer.&lt;/li&gt;
&lt;li&gt;To try and make a dynamic subscription, use the click event to subscribe and unsubscribe on Observable.&lt;/li&gt;
&lt;li&gt;Finally, we can subscribe and unsubscribe on Observable by clicking on the subscribe or unsubscribe buttons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the end of my Observable pattern implementation; you can see the result in: &lt;a href="https://codesandbox.io/s/github/Jucian0/observer-pattern"&gt;CodeSandbox&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Now, we have an idea of how it works, and you may have figured out that some libraries use this pattern, or something similar, to implement their solution. Suppose that every observer is a component and the notify is a kind of a dispatch, we can build a rudimentary state management. Please read my post, &lt;a href="https://dev.to/jucian0/implementing-redux-pattern-1oj0"&gt;Implementing Redux Pattern&lt;/a&gt;, if you are interested in knowing how to do it.&lt;/p&gt;

&lt;p&gt;For more information on this topic, you can try &lt;a href="https://rxjs.dev/"&gt;RXJS&lt;/a&gt;, this library makes the process effortless, and you can do many things with operators.&lt;/p&gt;

&lt;p&gt;Even if you don't need this pattern in your projects, it's good that you understand how it works because many libraries use it to implement their solutions.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>programming</category>
    </item>
    <item>
      <title>Crase 🆚 Teclado ABNT</title>
      <author>Gildo Neto</author>
      <pubDate>Mon, 26 Jul 2021 13:00:07 +0000</pubDate>
      <link>https://dev.to/gildoneto/crase-teclado-abnt-59kp</link>
      <guid>https://dev.to/gildoneto/crase-teclado-abnt-59kp</guid>
      <description>&lt;p&gt;Esses dias tive que enviar meu teclado pra assistência, e estou programando no teclado do próprio notebook.&lt;/p&gt;

&lt;p&gt;Uma coisa que vem me dando preguiça é ter que toda hora alterar o teclado para o padrão americano, ou no padrão brasileiro digitar duas vezes a crase("backtricks") pra que ela apareça de fato na tela.&lt;/p&gt;

&lt;p&gt;Como estou estudando #JavaScript diariamente, e escrevendo resumos de livros em Markdown, o uso de crase pra usar &lt;code&gt;${templateString}&lt;/code&gt; ou &lt;code&gt;inline code&lt;/code&gt; no Markdown tem sido intenso.&lt;/p&gt;

&lt;p&gt;Achei uma solução paliativa onde agora seleciono o texto no VSCode e digito um comando para ele envolver o texto entre as crases. Caso você se interesse, segue passo a passo:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Digite Ctrl + Shift + P no VS Code e no campo busca escreva Open Keyboard Shortcuts e escolha a opção JSON&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ymXekgK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeiu8kkqv4ytoeu7a170.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ymXekgK8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/eeiu8kkqv4ytoeu7a170.png" alt="Atalhos VSCode"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Se seu arquivo JSON estiver vazio, copie e cole o texto abaixo e salve o arquivo:
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[
  {
    "key": "ctrl+shift+i",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "snippet": "`${TM_SELECTED_TEXT}$1`$2"
    }
  }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wJPe8PMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blbgcqzww08hjnb5cbch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wJPe8PMF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/blbgcqzww08hjnb5cbch.png" alt="Arquivo Json de Atalhos 01"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Obs.: escolhi o atalho Ctrl + Shift + i porque estava setado para exibir breadcrumbs dos arquivos abertos, que é algo que eu não preciso.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Caso já tenha algo no seu &lt;code&gt;keybindings.json&lt;/code&gt; faça desta forma:

&lt;ul&gt;
&lt;li&gt;logo após o fechamento da última chave &lt;code&gt;}&lt;/code&gt; e antes do fechamento do último colchete &lt;code&gt;]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;digite uma vírgula &lt;code&gt;},&lt;/code&gt; e pressione Enter
&lt;/li&gt;
&lt;li&gt;copie e cole o código abaixo
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  {
    "key": "ctrl+shift+i",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus",
    "args": {
      "snippet": "`${TM_SELECTED_TEXT}$1`$2"
    }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Como deve ficar seu JSON neste caso:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Yq3s6Tff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j79zduc4rjtg61s9t0ch.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Yq3s6Tff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j79zduc4rjtg61s9t0ch.png" alt="Arquivo Json de Atalhos 02"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Agora você poderá selecionar um texto qualquer e digitar o comando Ctrl + Shift + i e &lt;strong&gt;voilá!&lt;/strong&gt; the magic just happened!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0129RBU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f464onyilxakbwxzpgtn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0129RBU0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f464onyilxakbwxzpgtn.gif" alt="Gif de seleção de texto"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>vscode</category>
      <category>abnt</category>
      <category>crase</category>
      <category>begginer</category>
    </item>
    <item>
      <title>Learning Two Frameworks by Bridging Them Together (Redwood + Clerk)</title>
      <author>Zack Sheppard</author>
      <pubDate>Mon, 26 Jul 2021 12:52:37 +0000</pubDate>
      <link>https://dev.to/zackdotcomputer/learning-two-frameworks-by-bridging-them-together-redwood-clerk-2kkh</link>
      <guid>https://dev.to/zackdotcomputer/learning-two-frameworks-by-bridging-them-together-redwood-clerk-2kkh</guid>
      <description>&lt;p&gt;&lt;strong&gt;TLDR; I set out to make an app using Redwood and Clerk. I wound up learning them both by making the &lt;a href="https://github.com/redwoodjs/redwood/pull/3080"&gt;1st party integration between them&lt;/a&gt; instead. It will be in version &lt;code&gt;0.35.3&lt;/code&gt;, currently in canary, of Redwood.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are many snarky truisms about full-stack development in the Node+js ecosystem, but headline number one has to be that every week there is some new framework you "just have to" learn.&lt;/p&gt;

&lt;p&gt;Recently, that feeling has been creeping up on me again. I've felt like I should dive deeper into one of the competitors from my &lt;a href="https://blog.zack.computer/the-race-is-on-to-be-the-rails-of-react"&gt;"Rails of React" showdown&lt;/a&gt; from April. I picked  &lt;a href="https://redwoodjs.com"&gt;Redwood&lt;/a&gt;, since Prisma had featured them so heavily in the last Prisma Day. At the same time, this month's Hashnode Hackathon means I have a strong incentive to learn &lt;a href="http://clerk.dev"&gt;Clerk&lt;/a&gt;, a new player in the auth-as-service landscape.&lt;/p&gt;

&lt;p&gt;Luckily, there's an old trick I know for learning two frameworks at once: just duck-tape them together into one project. It might take you a bit longer than if you'd tried to learn just one or the other, but you it will take less than than doing two projects back to back. A week later, my plan hit a few snags and I have no side project to show for it, but I did learn a lot about the ins and outs of both Redwood and Clerk and I gathered a little more open source clout along the way.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#operation-ducktape"&gt;
  &lt;/a&gt;
  Operation Duck-Tape
&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;First, an unrelated fun fact: &lt;a href="https://en.wikipedia.org/wiki/Duct_tape"&gt;duck tape&lt;/a&gt; wasn't misnomered "duct tape" until 50 years after it was invented.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f4d4RwAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626818286767/WmkEbsx4C.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f4d4RwAx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1626818286767/WmkEbsx4C.jpeg" alt="Banana duck-taped to wall"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So, the plan here was initially to learn RedwoodJS and Clerk at the same time by building a quick side project in a weekend. I figured this would be as easy as spinning up a Redwood project and then following Clerk's instructions for how to integrate their SDK into NextJS (since that's what Redwood uses under the hood). I hadn't counted on how fully-featured I would find Redwood to be, though, which turned out to be a blessing and a curse for this project.&lt;/p&gt;

&lt;p&gt;You see, Redwood comes with its own  &lt;a href="https://redwoodjs.com/docs/authentication.html#usage-in-redwood"&gt;auth system built in&lt;/a&gt;. The framework's whole purpose is, after all, to reduce the boilerplate that you have to write to get your app finished. Auth is a huge part of most apps but also the most dangerous thing a developer can try to "do themselves." You should do anything you can do to steer clear of writing your own auth system!&lt;/p&gt;

&lt;p&gt;On the one hand, Redwood already having an auth layer was great! It meant that I could get set up with a simple &lt;code&gt;yarn rw setup auth &amp;lt;provider&amp;gt;&lt;/code&gt; command. On the other hand, this was a huge wrench in my plans to learn Clerk because Redwood hadn't yet integrated Clerk.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#diving-deeper-into-the-open-source-sea"&gt;
  &lt;/a&gt;
  Diving Deeper into the Open Source Sea
&lt;/h2&gt;

&lt;p&gt;If I wanted Clerk and Redwood to really work together, I was going to need to figure out how other providers, like Firebase and Auth0, had become integrated with Redwood.&lt;/p&gt;

&lt;p&gt;Luckily for me, Redwood is &lt;a href="https://github.com/redwoodjs/redwood"&gt;completely open source&lt;/a&gt;. So, I forked their repository and started digging in. I often find this is the best way to get features or fixes I want to see included in open source projects - especially the larger and more professional ones. Maintainers are bombarded by issues and complaints, but if you take the time to find a possible solution and make a PR with it I find most of them will take the time to help standardize and incorporate your work into the project.&lt;/p&gt;

&lt;p&gt;Indeed, I was blown away by how welcoming the Redwood maintainers were. While working through their tutorial, I ran into tiny bug and one of the maintainers helped me take that bug from a &lt;a href="https://github.com/redwoodjs/redwood/issues/3027"&gt;new issue&lt;/a&gt;, to my first PR to their project, to being released on &lt;code&gt;npm&lt;/code&gt;, all in under a week! That kind of assistance and quick turn-around really built my confidence that I would be able to create the Clerk integration for Redwood myself.&lt;/p&gt;

&lt;p&gt;I started by searching the codebase for "auth0", absorbing the flow that the framework used for that integration. I then modeled the Clerk integration on that. Indeed, the hardest part of the process was figuring out how to run the raw source locally to test it. But in the end &lt;a href="https://github.com/redwoodjs/redwood/pull/3080"&gt;a PR resulted&lt;/a&gt; and, after a few touch-up comments, has now been merged into the codebase. So, Clerk should be supported in the next version of Redwood - 0.36.0.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-i-learned"&gt;
  &lt;/a&gt;
  What I Learned
&lt;/h2&gt;

&lt;p&gt;More valuable than that sweet green squares on my Github grid, though, was the fact that this process completed my original goal: by the time my PR was merged I had a much better understanding of how both Redwood and Clerk worked inside and out. I also had some concrete lessons and takeaways that will help me work faster next time I try to tackle a project built on either of these tools:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don't try to fight Redwood.&lt;/strong&gt; Redwood is very openly an opinionated framework - this was, indeed, one of the things I have dinged them for in the past. It applies here too - because of Redwood's strictness, it was honestly easier to add Clerk support at the framework level than it would have been to shoehorn it in at the application level.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clerk is different.&lt;/strong&gt; It was all to easy to assume coming in that Clerk was going to be "yet another Auth0 clone." But I was pleasantly surprised by the new features Clerk brought to the table, even if they had some technical tradeoffs. For example, Clerk bucks the "one token controls everything" trend shared by Auth0 and others. Instead, Clerk uses two different tokens (both confusingly named "session") so that it can support multi-account sessions - the same feature that lets you be logged in to multiple Gmail accounts at once and pick which one to act as at any moment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Redwood generators are your friend.&lt;/strong&gt; Once I got my basic outline for the integration in Redwood, I started trying to make a test-project for it. Going through this process really drove home how much Redwood (and its competitors) have simplified the process of making a rich React app. Being able to type &lt;code&gt;yarn rw g page user-profile&lt;/code&gt; and have the framework handle the boilerplate templates and wiring helped me stay in a programming flow state. No more was I interrupted by the harsh vibe of having to cmd+c cmd+v the same lines of code for the 100th time!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clerk was suspiciously easy to use.&lt;/strong&gt; Compared to its monstrously complicated competitors like Auth0 and Cognito, Clerk's blend of power, ease, and beauty is almost suspicious. Overall I think this is still a point in its favor - I had a beautiful and capable auth system set up in under 15 minutes. I don't think I could replicate that on Auth0 given an entire day. But, when things are this easy it leaves me suspicious of the trade-offs and limitations I am missing. Before I use Clerk in a situation where it would be guarding truly valuable data I would want to threat-model it a little to make sure I truly trust that auth can be both easy &lt;em&gt;and&lt;/em&gt; secure.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#try-it-yourself"&gt;
  &lt;/a&gt;
  Try it Yourself
&lt;/h2&gt;

&lt;p&gt;Hopefully by the time you're reading this, Redwood's next version, &lt;code&gt;0.35.3&lt;/code&gt;, will be live. If it's not yet, you can still check out this integration using the &lt;code&gt;@canary&lt;/code&gt; version. Running that version, Clerk is just a &lt;code&gt;yarn rw setup auth clerk&lt;/code&gt; away.&lt;/p&gt;

&lt;p&gt;The real thing to try yourself, though, is making the features you want to see a reality in your favorite open source frameworks and tools. Don't just open issues if you can close them, too!&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>opensource</category>
      <category>showdev</category>
    </item>
  </channel>
</rss>
