<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>What is PyTorch: a Summary  Guide for Beginners</title>
      <author>images.cv</author>
      <pubDate>Wed, 15 Dec 2021 10:11:47 +0000</pubDate>
      <link>https://dev.to/imagescv/what-is-pytorch-a-summary-guide-for-beginners-3eeb</link>
      <guid>https://dev.to/imagescv/what-is-pytorch-a-summary-guide-for-beginners-3eeb</guid>
      <description>&lt;p&gt;&lt;a href="https://pytorch.org/"&gt;PyTorch&lt;/a&gt; is a deep learning framework that was created by Facebook. It allows you to use &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; as your main programming language, which provides flexibility and speed for many programmers who work with machine learning tasks. PyTorch is also GPU-accelerated, which makes it preferable for many users. This blog post will provide an overview of what PyTorch is and how to get started using this powerful tool.&lt;/p&gt;

&lt;p&gt;What Are Some Key Features of PyTorch?&lt;br&gt;
PyTorch has several key features that make it stand out as a deep learning framework. Some of these include:&lt;/p&gt;

&lt;p&gt;üî• &lt;u&gt;&lt;strong&gt;It's Python based&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch uses Python as its main programming language, which is an extremely popular choice for programmers who work with machine learning tasks every day. This gives you the flexibility and speed you need to get your tasks done quickly. However, if python isn't your preferred language then another great feature comes into play...&lt;/p&gt;

&lt;p&gt;üéöÔ∏è &lt;u&gt;&lt;strong&gt;GPU accelerated&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;GPU acceleration makes PyTorch preferable for many users because this allows them to run their code much faster than they would be able to without using GPUs. If this doesn't sound like something you'll use or care about right now then keep reading because there are still several other reasons why PyTorch is a great choice for you.&lt;/p&gt;

&lt;p&gt;ü™¢ &lt;u&gt;&lt;strong&gt;The use of Tensors&lt;/strong&gt;&lt;/u&gt;&lt;br&gt;
Tensors are at the heart of PyTorch, and this allows you to easily create and manipulate your data in ways that other frameworks don't always allow. This makes PyTorch an extremely powerful tool for many different tasks.&lt;/p&gt;

&lt;p&gt;üíé &lt;u&gt;&lt;strong&gt;PyTorch Modules&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch also has several modules that you can use to expand its functionality. These include &lt;a href="https://pytorch.org/vision/stable/index.html"&gt;torchvision&lt;/a&gt; for image processing, &lt;a href="https://pytorch.org/audio/stable/index.html"&gt;torchaudio&lt;/a&gt; for audio processing, and more. Having these modules available makes it possible to do a wide range of deep learning tasks with ease.&lt;/p&gt;

&lt;p&gt;üìà &lt;u&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch is flexible in the sense that you can use it for many different deep learning applications. Whether your data comes from python or an external source like Caffe, PyTorch has a way to handle and work with this data in order to get results quickly and effectively. This makes it possible to solve problems fast when they arise on the job site which keeps everyone happy!&lt;/p&gt;

&lt;p&gt;‚è±Ô∏è &lt;u&gt;&lt;strong&gt;Speed&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;PyTorch is known for its speed, which makes it great for researchers and data scientists who need to get their work done quickly. The python interface combined with GPU acceleration means you can do all this without having to worry about spending hours trying to figure out how something works or getting stuck on tasks that should be simple. This lets your team focus on the important things instead of wasting time debugging code!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#who-can-benefit-from-using-pytorch"&gt;
  &lt;/a&gt;
  Who Can Benefit From Using PyTorch?
&lt;/h2&gt;

&lt;p&gt;There are many different people who could benefit from using PyTorch including Data Scientists, Researchers, Software Engineers/Developers, and QA Testers because there isn't anyone particular industry where it wouldn't be useful! If you're looking at machine learning as a possible solution to a problem you're facing then PyTorch is definitely worth taking a look at.&lt;/p&gt;




&lt;p&gt;&lt;strong&gt;In conclusion&lt;/strong&gt;, PyTorch is a deep learning framework that was created by Facebook. It allows you to use Python as your main programming language, which provides flexibility and speed for many programmers who work with machine learning tasks. PyTorch is also GPU-accelerated, which makes it preferable for many users. It has several key features that make it stand out as a deep learning framework, including python-based, GPU accelerated, tensors, modules, flexibility, and speed. PyTorch can be used by many different people in a wide range of industries to solve machine learning problems quickly and effectively. If you're looking for a deep learning framework that has all the features you need, then PyTorch is definitely worth taking a look at.&lt;/p&gt;




&lt;p&gt;&lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; provide you with an easy way to build image datasets.&lt;br&gt;
15K+ categories to choose from&lt;br&gt;
Consistent folders structure for easy parsing&lt;br&gt;
Advanced tools for dataset pre-processing: image format, data split, image size and data augmentation.&lt;/p&gt;

&lt;p&gt;üëâVisit &lt;a href="https://images.cv/"&gt;images.cv&lt;/a&gt; to learn more&lt;/p&gt;

</description>
    </item>
    <item>
      <title>Widget Driven Development</title>
      <author>Alexey Antipov</author>
      <pubDate>Wed, 15 Dec 2021 10:02:48 +0000</pubDate>
      <link>https://dev.to/aantipov/widget-driven-development-1n5m</link>
      <guid>https://dev.to/aantipov/widget-driven-development-1n5m</guid>
      <description>&lt;h2&gt;
  &lt;a href="#preface"&gt;
  &lt;/a&gt;
  Preface
&lt;/h2&gt;

&lt;p&gt;When developing UI applications, we compose them from components. Each UI component is essentially a combination of markup, scoped styles, and some UI logic. Data Management is frequently left out of components control, resulting in a complicated architecture with convoluted data flows.&lt;/p&gt;

&lt;p&gt;In this article, I'll demonstrate how we can transform components into autonomous isolated widgets with complete control over both Data Logic and UI.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-history-of-components"&gt;
  &lt;/a&gt;
  The History of Components
&lt;/h2&gt;

&lt;p&gt;Widgets, in my opinion, are the natural successors of Components. To see this, I suggest going back in time and look at how our approaches to building UI have evolved over time.&lt;/p&gt;

&lt;p&gt;Many remember the times when all application styles were defined in a single global CSS file. Styles definitions used complex combinations of different &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"&gt;CSS selectors&lt;/a&gt;. Style collisions were common in apps. The size and complexity of those styles sometimes affected even the performance of websites.&lt;/p&gt;

&lt;p&gt;In 2009 &lt;a href="https://en.bem.info/methodology/"&gt;BEM&lt;/a&gt; was born. BEM provided a set of guidelines for defining styles and naming classes. These rules were intended to address the problem of style collisions and inefficient selectors. BEM encouraged to think of UI in terms of blocks, elements, and modifiers.&lt;/p&gt;

&lt;p&gt;2013-2015 marked the rise of &lt;strong&gt;Components&lt;/strong&gt; approach. React made it simple to divide UI into components that were a combination of markup (HTML) and UI logic (JavaScript). It was a game changer in application development. Other frameworks soon followed suit, adopting a components-based approach as well.&lt;/p&gt;

&lt;p&gt;With the rise of build tools, CSS preprocessors, and techniques like CSS-in-JS and &lt;a href="https://github.com/css-modules/css-modules"&gt;CSS Modules&lt;/a&gt;, it became feasible to make Styling a part of Components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ies03oYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh3opup6i4335y20e5x0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ies03oYW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zh3opup6i4335y20e5x0.png" alt="a combination of Markup, Styles and UI Logic" width="880" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Components playgrounds such as Storybook emerged to help developers build components in an isolated environment and ensure proper styles scoping. They encouraged developers to think of UI as &lt;a href="https://www.kn8.lt/blog/ui-is-a-function-of-data/"&gt;a function of state&lt;/a&gt;: components props values defined the look and behaviour of components.&lt;/p&gt;

&lt;p&gt;Collections of reusable high-quality components became a thing.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-unresolved-hurdles"&gt;
  &lt;/a&gt;
  The unresolved hurdles
&lt;/h2&gt;

&lt;p&gt;Component-driven approach helped break UI into isolated reusable pieces and enabled building large-scale applications using collections of pre-built components.&lt;/p&gt;

&lt;p&gt;What was missing, though, is a way of supplying UI components with data.&lt;/p&gt;

&lt;p&gt;Data management became one of the most difficult tasks in Frontend Engineering and the primary contributor to the complexity of UI apps.&lt;/p&gt;

&lt;p&gt;We learned to split components into two types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;em&gt;Presentational&lt;/em&gt; components, which are responsible for UI representation and are usually stateless and side-effect free&lt;/li&gt;
&lt;li&gt;
&lt;em&gt;Container&lt;/em&gt; components, which deal with data-related logic and pass data down to Presentational components.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All that remains is to define how Container components should work with data.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--gmOxeBWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbvb9ncnr6bvhcozu5i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--gmOxeBWT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbbvb9ncnr6bvhcozu5i.png" alt="an image of Container component that includes a Presentational component and Data logic" width="880" height="547"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-naive-approach"&gt;
  &lt;/a&gt;
  The Naive approach
&lt;/h2&gt;

&lt;p&gt;The naive approach would be for each Container component to simply fetch data needed by underlying Presentational components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fp5VQ1R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq10jejpvyf61rjendjb.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fp5VQ1R2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xq10jejpvyf61rjendjb.png" alt="an image of Frontend and Backend interaction" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the same data is usually needed by multiple different components, implementing such an approach in practice would bring a bunch of problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;duplicated requests and data over-fetching. Slow UI and overloaded server as a result.&lt;/li&gt;
&lt;li&gt;possible data inconsistency between components when requests to the same endpoint result in different data&lt;/li&gt;
&lt;li&gt;complicated data invalidation (think of a case when the data has changed on Backend and you need to make sure every dependent component refetches the data)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-common-parent-approach"&gt;
  &lt;/a&gt;
  The Common parent approach
&lt;/h2&gt;

&lt;p&gt;We learnt to overcome the problem by moving data-fetching (and mutation) functionality up to common parent components which pass data down to all underlying components.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ycFa3c8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efp3s243lqvo1xyykyy2.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ycFa3c8r--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efp3s243lqvo1xyykyy2.png" alt="an image of Frontend and Backend interaction + Prop Drilling between Components" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We solved the problem of requests duplication and data invalidation. However, we did face new challenges:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the whole application logic became more complex and more coupled&lt;/li&gt;
&lt;li&gt;we were forced to pass data down through multiple components. This issue became notorious and got a name &lt;a href="https://kentcdodds.com/blog/prop-drilling"&gt;‚ÄúProp Drilling‚Äù&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-state-management-approach"&gt;
  &lt;/a&gt;
  The State Management approach
&lt;/h2&gt;

&lt;p&gt;To bypass the Prop Drilling problem, we learnt to use State Management libraries and techniques: instead of propagating data down to underlying components, we place data in some Store that is accessible to all the components down the tree, letting them obtain the data directly from there. Components subscribe to the changes in the Store to have the data always up-to-date.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rWjmuJfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcimiwli8pey0xk4c6gw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rWjmuJfg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xcimiwli8pey0xk4c6gw.png" alt="an image of Frontend and Backend interaction + Global Store" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Prop Drilling issue was resolved, but not for free:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;we now have to deal with a completely new concept, the Store, and care about a bunch of new things, such as designing and maintaining Store structure, appropriately updating data in the Store, data normalization, mutable vs immutable, a single store vs multiple stores, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;state management libraries require us to learn a new vocabulary: &lt;em&gt;Actions&lt;/em&gt;, &lt;em&gt;Action Creators&lt;/em&gt;, &lt;em&gt;Reducers&lt;/em&gt;, &lt;em&gt;Middlewares&lt;/em&gt;, &lt;em&gt;Thunks&lt;/em&gt;, and so on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the introduced complexity and lack of clarity forced developers to create &lt;a href="https://redux.js.org/style-guide/style-guide"&gt;styleguides&lt;/a&gt; on how to work with the Store, what to do and what to avoid.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;as a result, our applications became very tangled and coupled. Frustrated developers try to mitigate the issues by inventing new state management libraries with different syntax.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-naive-approach-reimagined"&gt;
  &lt;/a&gt;
  The Naive approach reimagined
&lt;/h2&gt;

&lt;p&gt;Can we do better? Is there an easier way to approach data management? Can we have the data flows transparent and easy to understand? Can we untangle our apps and boost &lt;a href="https://www.freecodecamp.org/news/orthogonality-in-software-engineering/"&gt;orthogonality&lt;/a&gt;? Can we bring Data Logic under control of Components in the same way that we have done with Markup, Styles and UI Logic?&lt;/p&gt;

&lt;p&gt;We must have gotten too far into the woods and &lt;em&gt;can't see the forest for the trees&lt;/em&gt;. Let's go back to the starting point, to the Naive approach, and see if we can solve its problems differently.&lt;/p&gt;

&lt;p&gt;The main bummers there were requests duplication and data inconsistency.&lt;/p&gt;

&lt;p&gt;What if we could have an intermediate player between our components and Backend, say an API wrapper or interceptor, solving all those problems under the hood:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deduplicate all the requests&lt;/li&gt;
&lt;li&gt;ensure data consistency: all the components should always have the same data when using the same request&lt;/li&gt;
&lt;li&gt;provide data invalidation ability: if a component changes data on the server, other components that rely on that data should receive the new data&lt;/li&gt;
&lt;li&gt;be transparent to components and not affect their logic in any way (make components think they communicate to Backend directly)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--cKhUdzDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhk7wq6t9vw6t72zp7n.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cKhUdzDU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kyhk7wq6t9vw6t72zp7n.png" alt="Frontend and Backend interaction using an API Wrapper" width="880" height="582"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The good news is that we can have it, and there are already libraries providing such solutions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;some GraphQL clients, e.g. &lt;a href="https://relay.dev/"&gt;Relay&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://react-query.tanstack.com/"&gt;React-Query&lt;/a&gt;, &lt;a href="https://swr.vercel.app/"&gt;SWR&lt;/a&gt;, &lt;a href="https://redux-toolkit.js.org/rtk-query/overview"&gt;Redux Toolkit Query&lt;/a&gt;, &lt;a href="https://vue-query.vercel.app/"&gt;Vue Query&lt;/a&gt; for RESTful APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All we basically need to do is to wrap every API call with such an API Wrapper. The rest is handled automatically for us.&lt;/p&gt;

&lt;p&gt;The huge benefit of such an approach is that we can finally untangle our applications' data logic, put Data Logic under control of Components, and achieve better orthogonality by combining all pieces together.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--D-rrvbIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgfzyv0h6wd0hjjlmbdw.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D-rrvbIo--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hgfzyv0h6wd0hjjlmbdw.png" alt="a triangle including Data Logic, Styles, Markup and UI Logic" width="880" height="466"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#widget-driven-development"&gt;
  &lt;/a&gt;
  Widget driven development
&lt;/h2&gt;

&lt;p&gt;In my team, we started to use the described above Naive approach together with React Query and we love it. It enabled us to approach building our application differently. Let me call it &lt;em&gt;"Widget Driven Development"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea is that we split every page into so-called &lt;em&gt;widgets&lt;/em&gt;, which behave autonomously and are self-contained.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4lCIbhJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z42221shfvhv142e0ji.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4lCIbhJp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/9z42221shfvhv142e0ji.png" alt="a Page separated into Widgets" width="880" height="1000"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Every widget is responsible for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;fetching and providing all the required data to its UI&lt;/li&gt;
&lt;li&gt;mutating the related data on server if needed&lt;/li&gt;
&lt;li&gt;data representation in the UI&lt;/li&gt;
&lt;li&gt;UI for Loading state&lt;/li&gt;
&lt;li&gt;(optional) UI for Error state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Speaking of code organization, we co-locate all the widgets related files:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNzDKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uietsdgrqj2bavtvoc9d.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dLNzDKTg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/uietsdgrqj2bavtvoc9d.png" alt="an image of files grouped into widgets" width="880" height="889"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Usually, the same API endpoint is used across multiple widgets. So we decided to keep all of them in a separate shared folder.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HTzyg2kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmhjdnzzbw5xskb2f36x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HTzyg2kj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/wmhjdnzzbw5xskb2f36x.png" alt='an image of queries hooks grouped under "queries" folder' width="880" height="513"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We use React Query library and each file in the &lt;code&gt;queries/&lt;/code&gt; folder exposes fetch and mutation methods wrapped into React Query.&lt;/p&gt;

&lt;p&gt;All Container components have a similar code structure.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-router-dom&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useBookQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queries/useBookQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;useAuthorQuery&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;queries/useAuthorQuery&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Presentation&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Presentation&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Loading&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./Error&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;BookDetailsContainer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;bookId&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useParams&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isBookError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useBookQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;bookId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="na"&gt;isError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;isAuthorError&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useAuthorQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;?.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Presentation&lt;/span&gt; &lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;book&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="sr"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;gt;
&lt;/span&gt;  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;isBookError&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;isAuthorError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;Error&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;Loading&lt;/span&gt; &lt;span class="o"&gt;/&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how easy and declaratively dependant queries are handled. Also the only dependency of our widget is the presence of &lt;code&gt;bookId&lt;/code&gt; in the URL.&lt;/p&gt;

&lt;p&gt;Most of our widgets‚Äô container components have no props and rely on no external state except for URL data.&lt;/p&gt;

&lt;p&gt;Such an approach makes it transparent what API queries our widget relies upon. That transparency combined with near to zero external dependencies makes it easy to test widgets and gives us confidence in our code.&lt;/p&gt;

&lt;p&gt;Usually, changes to a widget are limited by modifications to files under that widget's folder. It significantly limits the risk of breaking any other parts of the application.&lt;/p&gt;

&lt;p&gt;Adding new widgets is also very straightforward: create a new folder for the widget with all required files in it and, if necessary, create a new query in the &lt;code&gt;/queries&lt;/code&gt; folder. Again, the risk of breaking any other parts of the application is very limited.&lt;/p&gt;

&lt;p&gt;Every widget can also be easily reused on different pages thanks to the limited dependency on the context. We usually just need to make sure the URLs of those pages contain the data identifiers needed for the widget.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;The Components approach made easy and straightforward creation of reusable independent pieces of UI.&lt;br&gt;
It didn't solve all the problems though and Frontend applications often suffer from convoluted Data Management.&lt;/p&gt;

&lt;p&gt;There are libraries that enable approaching Data Management differently and significantly reduce the complexity of our applications.&lt;/p&gt;

&lt;p&gt;Leveraging those libraries, we can put data logic under control of components and convert an application into a set of reusable self-contained widgets. It makes the data flows transparent, architecture flexible, the code resilient and easy to test.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>react</category>
      <category>statemanagement</category>
    </item>
    <item>
      <title>Blazingly fast Preview Environments for NextJS, NodeJS, and MongoDB on AWS</title>
      <author>Patryk Jeziorowski</author>
      <pubDate>Wed, 15 Dec 2021 10:00:59 +0000</pubDate>
      <link>https://dev.to/pjeziorowski/blazingly-fast-preview-environments-for-nextjs-nodejs-and-mongodb-on-aws-o1k</link>
      <guid>https://dev.to/pjeziorowski/blazingly-fast-preview-environments-for-nextjs-nodejs-and-mongodb-on-aws-o1k</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Have you ever dreamed of deploying your applications on the cloud without any hassle? Imagine a platform where all you need to do is to sign in with your AWS credentials, and automagically the platform does all the hard work of configuration of the cloud for you, and, on top of that, provides some extra features that do not exist out of the box anywhere else.&lt;/p&gt;

&lt;p&gt;Qovery is this platform - not only does it allow you to deploy your infrastructure and applications on your own cloud account, but also provides extra cool features, one of which we will see in this article.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don't take our words for granted - 14000 developers from more than 100 countries use Qovery to deploy their apps on AWS.&lt;/em&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environments"&gt;
  &lt;/a&gt;
  Preview Environments
&lt;/h3&gt;

&lt;p&gt;Imagine working on a new feature. You're dealing with a full-stack application - you have a frontend, backend, and a database. You introduce a change to your backend app - how do you test all of it? It would be great if there was a service that could deploy everything for you so you can test your changes quickly and in separation with all the components...&lt;/p&gt;

&lt;p&gt;Qovery Preview Environments are designed to help you with exactly this.&lt;/p&gt;

&lt;p&gt;It not only deploys the app you changed but all other related applications and databases as well in the cloud so that you can test your new features and collaborate with reviewers of your code.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sPdtVKP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhsaudl4xqvxuw3rmnn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sPdtVKP7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/dvhsaudl4xqvxuw3rmnn.png" alt="Image description" width="880" height="617"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Preview environments feature is available on other platforms as well. Vercel and Netlify allows you to test your changes before merging code into production. It‚Äôs perfect for single frontend applications, but the concept of Preview Environments on Qovery goes far beyond this.&lt;/p&gt;

&lt;p&gt;Qovery is able not only to create a preview environment for your frontend, but also for the backend and databases - the whole stack is supported. Running a set of backend microservices? No worries, Qovery got you covered. All services will be replicated in the new environment.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environments-benefits"&gt;
  &lt;/a&gt;
  Preview environments benefits
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;Time-saving&lt;/strong&gt; - You don't have to set up a fresh environment to test changes in isolation - Qovery does it all for you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Productivity&lt;/strong&gt; - Faster changes, quicker review, better feedback loop - the productivity and quality of your application increases dramatically&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Better tests&lt;/strong&gt; - It's best to test apps in isolation, but it's almost impossible with a complicated stack if you have to prepare the testing environment manually - Qovery does it all "automagically" for you&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Independence&lt;/strong&gt; - Each environment is completely separate, meaning more people can work flawlessly on the project, testing the changes they introduce in parallel, not blocking each other&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Deliver quickly&lt;/strong&gt; - Faster feedback loop, independent developers, fewer bugs, meaning the product is delivered more quickly&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Reduce friction&lt;/strong&gt; - Waiting for others to test your changes is frustrating - with preview envs everyone has his own testing environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#demo"&gt;
  &lt;/a&gt;
  Demo
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#aws-infrastructure"&gt;
  &lt;/a&gt;
  AWS Infrastructure
&lt;/h3&gt;

&lt;p&gt;Before we start with the deployments, we need to have our AWS infrastructure ready and deployed. It can be done as simply as by providing credentials to your cloud account, you can see how to configure the credentials in this article - &lt;a href="https://hub.qovery.com/docs/using-qovery/configuration/cloud-service-provider/amazon-web-services/"&gt;https://hub.qovery.com/docs/using-qovery/configuration/cloud-service-provider/amazon-web-services/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--iGWwz16k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ilry028dda5tk13pu3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--iGWwz16k--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/04ilry028dda5tk13pu3.png" alt="Image description" width="880" height="403"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;The initial setup takes about 15 min, and your cluster is ready to host your applications.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#full-stack-application"&gt;
  &lt;/a&gt;
  Full Stack Application
&lt;/h3&gt;

&lt;p&gt;In this example, we will use a Next.js frontend, Node.js backend, and MongoDB as a database. The app will display an image gallery with images fetched from the backend. Preview Environments feature will help us introduce a new change in the backend - moving away from a hardcoded POC list of images to a list fetched from our database.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#frontend"&gt;
  &lt;/a&gt;
  Frontend
&lt;/h3&gt;

&lt;p&gt;Our simple image gallery will look like this&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---NVyKyVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k56v3eqfatdm7zkim24.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---NVyKyVx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3k56v3eqfatdm7zkim24.png" alt="Image description" width="880" height="691"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;To generate the application, we used &lt;code&gt;npx create-next-app@latest&lt;/code&gt;, but the source code can be found here - &lt;a href="https://github.com/pjeziorowski/gallery-demo/tree/master/frontend"&gt;https://github.com/pjeziorowski/gallery-demo/tree/master/frontend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main changes introduced to the generated application scaffolding are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Adding a &lt;code&gt;Dockerfile&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:alpine&lt;/span&gt;

&lt;span class="k"&gt;RUN &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; &lt;span class="nt"&gt;-p&lt;/span&gt; /usr/src
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . /usr/src&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm run build

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 3000&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; npm run start&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding a query to our backend (which we will be built soon in the next steps) that fetches a list of images to display in our gallery&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;useImages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;useQuery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;apiRoot&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/api/v1/images`&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plus, we adjusted the HTML and styling for the demo purpose of showing a list of images&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#backend"&gt;
  &lt;/a&gt;
  Backend
&lt;/h3&gt;

&lt;p&gt;Our backend is the main star of the demo. In its first version, the backend is displaying a hardcoded list of images. In the next step, we will gradually expand its capabilities. It will connect to a database and fetch the list from MongoDB instead. To make sure the changes are correct, we will use &lt;code&gt;Preview Environment&lt;/code&gt; feature before merging the pull request to our production environment&lt;/p&gt;

&lt;p&gt;The backend was generated using Express &lt;code&gt;npx express-generator --no-view&lt;/code&gt;, and the source code can be found here - &lt;a href="https://github.com/pjeziorowski/gallery-demo/tree/master/frontend"&gt;https://github.com/pjeziorowski/gallery-demo/tree/master/backend&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changes that we introduced to the generated app scaffolding are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Adding a Dockerfile&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight docker"&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt;&lt;span class="s"&gt; node:16&lt;/span&gt;

&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; /usr/src/app&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; package*.json ./&lt;/span&gt;
&lt;span class="k"&gt;RUN &lt;/span&gt;npm &lt;span class="nb"&gt;install&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt;&lt;span class="s"&gt; . .&lt;/span&gt;

&lt;span class="k"&gt;EXPOSE&lt;/span&gt;&lt;span class="s"&gt; 8080&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt;&lt;span class="s"&gt; [ "node", "src/index.js" ]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating a &lt;code&gt;/api/v1/images&lt;/code&gt; endpoint that returns a hardcoded array of images&lt;br&gt;
&lt;/p&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/images&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;


&lt;p&gt;In the next step we will improve the function to use a Mongo database instead.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#deployment"&gt;
  &lt;/a&gt;
  Deployment
&lt;/h3&gt;

&lt;p&gt;After creating a new project, let's now set up our &lt;code&gt;production&lt;/code&gt; environment.&lt;/p&gt;

&lt;p&gt;First, let's deploy our frontend. Click &lt;code&gt;Add my first application&lt;/code&gt;, select a correct repository, &lt;code&gt;Docker&lt;/code&gt; as build mode and expose port &lt;code&gt;3000&lt;/code&gt;. The application root path is &lt;code&gt;/frontend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next step: add a &lt;code&gt;MongoDB&lt;/code&gt; database - it will be used by our backend later on. You can do so by clicking on &lt;code&gt;Add&lt;/code&gt; button in Qovery Console in Environment.&lt;/p&gt;

&lt;p&gt;Now let's deploy our backend. Click &lt;code&gt;Add&lt;/code&gt; ‚Üí &lt;code&gt;Application&lt;/code&gt;, pick up &lt;code&gt;/backend&lt;/code&gt; as application root path, &lt;code&gt;8080&lt;/code&gt; port, and &lt;code&gt;Docker&lt;/code&gt; build mode.&lt;/p&gt;

&lt;p&gt;For the future connection to DB, let's add an alias named &lt;code&gt;DATABASE_URL&lt;/code&gt; that points to our Mongo database internal URL in our backend &lt;code&gt;Environment Variable&lt;/code&gt; settings:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--YHggJGZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjh1gf92i7feako2fpig.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YHggJGZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hjh1gf92i7feako2fpig.png" alt="Image description" width="880" height="479"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Additionally, let's create an alias called &lt;code&gt;API_ROOT&lt;/code&gt; in our frontend application that points to our backend external URL:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--N6Zcci13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuf8ugubrao052hz48nq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--N6Zcci13--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/vuf8ugubrao052hz48nq.png" alt="Image description" width="880" height="270"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;This is it! Now we can deploy our production environment. After a few minutes, navigate to the frontend app, click on &lt;code&gt;Open&lt;/code&gt; - you should be redirected to the image gallery&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tk1lSS4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyy1wn6aao02wx6wevn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tk1lSS4q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3uyy1wn6aao02wx6wevn.png" alt="Image description" width="880" height="691"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#enable-preview-environments"&gt;
  &lt;/a&gt;
  Enable Preview Environments
&lt;/h3&gt;

&lt;p&gt;The next step to see the preview environment feature in action is to enable it for our backend application.&lt;/p&gt;

&lt;p&gt;To do so, navigate to &lt;code&gt;Environment&lt;/code&gt; ‚Üí &lt;code&gt;Settings&lt;/code&gt; ‚Üí &lt;code&gt;Preview Env&lt;/code&gt; and tick it for the backend app&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y-7l5ove--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aalevwhxkrxm8th41f28.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y-7l5ove--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/aalevwhxkrxm8th41f28.png" alt="Image description" width="880" height="646"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Great! The feature is enabled. To see it in action, let's edit our code in the backend app so that the list of images is fetched from the database instead.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-preview-environments"&gt;
  &lt;/a&gt;
  Testing Preview Environments
&lt;/h3&gt;

&lt;p&gt;Let's make a small update of our backend - let's connect to MongoDB and fetch images from there. Here are changes to the function we could introduce to make it happen:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;databaseUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;env&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;DATABASE_URL&lt;/span&gt;
    &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;mongodb://localhost:27017/test&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;imageSchema&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Schema&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
  &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;mongoose&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;databaseUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;router&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;req&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;imageSchema&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;find&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="nx"&gt;data&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's now create a new branch in our repository and create a pull request to our production (master branch) environment. Preview Environments feature will spin up a new environment for us so that we can safely test changes we just introduced!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7uSCLtnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8z9a6unj4zgjgj9atbe.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7uSCLtnZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/a8z9a6unj4zgjgj9atbe.png" alt="Image description" width="880" height="774"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Now, when we display environments in our project, we will see that a new environment for the pull request is being deployed:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1dZ4EThI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdg8dtj44r9vk0do92cv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1dZ4EThI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kdg8dtj44r9vk0do92cv.png" alt="Image description" width="880" height="606"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;with all the resources we need! A database, backend, frontend - we can now test our changes in complete separation from the production without any manual setting up work:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--pc1QzYw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pteka2uluhf2pgy9rxf8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--pc1QzYw9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pteka2uluhf2pgy9rxf8.png" alt="Image description" width="880" height="606"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#preview-environment-explained"&gt;
  &lt;/a&gt;
  Preview Environment Explained
&lt;/h3&gt;

&lt;p&gt;The Preview Environment feature can be enabled or disabled per app. It creates a complete copy of your environment so that you can test new changes from pull requests in separation. It deploys your databases, backend, and frontend applications to a  completely new environment once a pull request is opened. If you update your pull request, all new changes are also reflected in the new environment so that you can test them or fix problems during the review. What is great is that Qovery takes care of managing all environment variables for you as well, creates new aliases just as you had in your prod environment, so that everything is really tested separately and it all happens automagically. After the pull request is merged, Qovery automatically cleans up the preview environment to save your money.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#testing-preview-environments-pt-ii"&gt;
  &lt;/a&gt;
  Testing Preview Environments PT II
&lt;/h3&gt;

&lt;p&gt;After a few minutes, your preview environment should be up and running. You can now navigate to the frontend app and click &lt;code&gt;Open&lt;/code&gt; - in the image gallery, you will see an empty list because we don't yet have any images in the database.&lt;/p&gt;

&lt;p&gt;You can add a few images manually by connecting to your mongo instance via CLI. The credentials can be found in the database overview:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--x0164xD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqfhonsonx6yipnzfhfl.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--x0164xD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nqfhonsonx6yipnzfhfl.png" alt="Image description" width="590" height="412"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;After connecting, let's add images by executing the following:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;createCollection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;images&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nx"&gt;db&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;images&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;},&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="na"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;IMG_4985.HEIC&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;3.9 MB&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="na"&gt;source&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
             &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://images.unsplash.com/photo-1582053433976-25c00369fc93?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;amp;ixlib=rb-1.2.1&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=512&amp;amp;q=80&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
     &lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, after opening the frontend app in our preview environment, we will see all the images we put in the database! It looks like the feature is working well, so let's merge the PR:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kd2L02MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xubg6kpwcx9qnal66g9z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kd2L02MA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xubg6kpwcx9qnal66g9z.png" alt="Image description" width="880" height="585"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;What now happens is automatically after the PR merge, the preview environment is automatically cleaned up:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M9E1qSiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mcqtug1mnj4ck8ztba4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M9E1qSiX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8mcqtug1mnj4ck8ztba4.png" alt="Image description" width="880" height="607"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Great job! Thanks to Qovery Preview Environments, we managed to develop a new feature in a complete separation from our production, we tested it in a real environment deployed in the cloud, and we didn't have to spend any time preparing our environment for tests at all.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;In the article, we quickly went through the process of creating a full-stack application with frontend, backend, and database. We enabled the Preview Environment feature to develop new features more quickly. We learned what the benefits of Preview Environments are, how to use them, and how to integrate them to day to day development workflow.&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>node</category>
      <category>mongodb</category>
      <category>react</category>
    </item>
    <item>
      <title>100 Tips on Software Developer Productivity</title>
      <author>Ari Koponen</author>
      <pubDate>Wed, 15 Dec 2021 09:40:44 +0000</pubDate>
      <link>https://dev.to/apkoponen/100-tips-on-software-developer-productivity-36if</link>
      <guid>https://dev.to/apkoponen/100-tips-on-software-developer-productivity-36if</guid>
      <description>&lt;p&gt;&lt;em&gt;I've developed software professionally for the past 10 years. Here's a list of 100 things I've learned about &lt;strong&gt;software developer productivity&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;




&lt;ol&gt;
&lt;li&gt;&lt;p&gt;At the beginning of your career, learning to "code fast" significantly impacts your productivity. Once you're "good enough," the impact substantially diminishes. Pay attention to when this happens.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't be too proud to try and" hack your mind." Many productivity tips that sound patronizing actually work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write your tasks down and use a to-do list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having a tangible goal will make you move faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Procastination is normal. Start by writing a single line.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What works for someone else might not work for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Try Pomodoro. It might work for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn what makes you productive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set boundaries that enable you to work in a way that makes you productive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Strong intrinsic motivation and curiosity trumps all productivity hacks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn how to tap into your intrinsic motivation.¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pair program and watch other people code. You might pick up a skill or two that help you work faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Your intuition affects your productivity more than you know. Pay attention to cultivating a good intuition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learning out of a bad habit takes work. Invest in learning good habits.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Saying "yes" to everything will destroy your productivity. You need a personal WIP limit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being obsessed about your work will make you temporarily more productive but burn you out if stretched for too long.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Physical exercise, eating healthy, and sleeping well do not take away, but &lt;em&gt;contribute&lt;/em&gt; to your productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Take regular breaks (e.g., 10 minutes every 50 minutes).¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trying to work in too long stretches will teach your brain to start wandering off to memes and hot takes on Twitter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure you have enough focus time for deep work and "flow."¬†&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Disable all the notifications you can.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being in "flow" makes you feel productive but does not always mean you're making progress.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can spend hours polishing an abstraction but deliver zero customer and business value.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being productive does not mean you're making an impact. Work hard on things that matter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The more experience I get, the more I'm interested in improving how my team or organization works together vs. optimizing my individual productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When solving technical problems that require collaboration, the bottleneck for individual developer productivity is not your ability to write code but the team's ability to create viable solutions.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most problems in building great software products require collaboration. Your ability to collaborate will become a bottleneck.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You will be more productive in some teams/companies than others.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Eventually, the bottleneck for your productivity will be the team and organization surrounding you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developer productivity and compensation don't often go hand in hand.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Some companies will compensate you more for the same work than others.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The best" 10x engineers" are the ones who 10x the team and people working around them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delegate and help other people. Learn to celebrate their success.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn to use automation. Removing errors and reducing cognitive load has a more significant impact on your productivity than "working faster."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developer experience and ergonomics matter.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatically format your code with a deterministic code formatter like Prettier or Black.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use a linter. Learn how to write custom rules to match the way your team works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Write automated tests. Life is too short for constantly fixing trivial bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting up a Continuous Integration (CI) pipeline is likely easier than you think. Learning how to do it will save you time in every future software project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep feedback loops fast.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Automatically deploy to production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Keep your build times low.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure developers can run the test suite on their computers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enable automatically running related tests on file changes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use feature flags to allow shipping work faster to production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You might not need a staging environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You might benefit from a staging environment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It depends.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers using Vim look like they're much more productive than the rest.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't always pick the tasks that make you feel most productive. It will stagnate your learning and make you feel that you're not moving forward.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Prioritize reviewing code. It will help your team stay productive.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Every time a developer prioritizes reviewing code, a new star is born in the Torvalds &amp;amp; Carmack galaxy.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being "agile" has very little practical meaning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calculating velocity and story points rarely help teams improve their productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Small, practical change based on data trump" agile transformation."&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The goal of planning is to split the elephant into bite-sized pieces.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers often prefer working alone on large tasks for long periods.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers working alone on large tasks for long periods rarely result in the smallest possible increment being shipped fast.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working together on a task is often less productive in the short run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working together on a task improves learning and is often more productive in the long run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;With large codebases, developer productivity largely depends on their knowledge of the system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Splitting large codebases into modules helps new developers become productive faster.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Modular architecture only works if the API contracts are clear and modules are truly decoupled from each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sometimes, a developer is more productive than others only because they have more knowledge and power.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A single developer owning a disproportionate amount of knowledge and power in a team will lead to some developers underperforming.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A "10x engineer" born out of owning a disproportionate amount of knowledge and power is an anti-pattern and will lead to capable developers leaving your company. Avoid it at all costs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Measuring developer productivity only through activity (e.g. # of commits or PR reviews) does not work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trying to condense developer productivity into a single metric will fail and make developers lose their trust in the company's management.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Measuring individual developer productivity is hard. If you try to do that, you will likely lose more than gain.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When trying to measure developer productivity, data quality is crucial. Bad decisions made based on poor data are costly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is much more reliable research on software developer productivity than most developers realize.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focusing on team and organizational level developer productivity will yield the best results.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reading the book "Accelerate" and understanding the SPACE framework will give you a good start to understanding development team productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When measuring developer productivity, you should have multiple metrics that complement and challenge each other.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The subjective experience of developers is valuable data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Only relying on the subjective experience of developers is not enough. Especially when trying to improve development productivity across the organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improving software team productivity is largely about trying to improve the flow of work while keeping quality high and working at a sustainable pace.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Measuring your team's cycle time and deployment frequency will help you improve your flow of work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Knowing how much time your team spends fixing bugs vs. feature work will help you prioritize writing tests, fix technical debt, and keep your quality high.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developing software is a marathon, not a sprint. Optimize accordingly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Teams should be in charge of improving their own productivity and have access to the necessary metrics and tools.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Individual developers benefit from understanding what affects their teams' overall productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Most teams try to do too many things at the same time. You need a WIP limit.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WIP limits improve collaboration and help you ship the most important stuff.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WIP limits reduce procrastination on hard tasks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;WIP limits combined with good prioritization help individual developers work on things they're not familiar with and encourage learning.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Encouraging learning makes software developers more productive in the long run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consistently good work is better than heroics.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Organizations that put heroism above consistency good work perform worse in the long run.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers love to measure everything else but their own productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Early attempts at measuring software developer productivity ruined the whole thing for most developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is hard to recover from industry trauma.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don't focus on measuring individual developers if you're trying to improve your company's software development speed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learning about Lean and Queuing theory is valuable when improving software team productivity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Consultants have done a great job ruining Lean for the rest of us.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Measuring software team productivity can make engineering teams happier.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Measuring software team productivity only makes teams happier and more productive if they're on board.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If developers are not on board, your metrics will be gamed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Not giving your developers proper autonomy and control over their work will make them unhappy. Do not micromanage.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Happy engineers are more productive.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#see-and-share-on-twitter"&gt;
  &lt;/a&gt;
  See and share on Twitter
&lt;/h3&gt;

&lt;p&gt;You can see these tips in Twitter thread here:&lt;/p&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Vgr806zh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1434755219238395905/FGahlAHN_normal.jpg" alt="Ari Koponen ‚å®Ô∏è profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Ari Koponen ‚å®Ô∏è
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/apkoponen"&gt;@apkoponen&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      100 tweets on "software developer productivity" for this year's &lt;a href="https://twitter.com/threadapalooza"&gt;@threadapalooza&lt;/a&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      08:06 AM - 15 Dec 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1471028936314339330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1471028936314339330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1471028936314339330" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


</description>
      <category>productivity</category>
      <category>programming</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Burger Map: Fetching and Displaying Data with React</title>
      <author>Dom the dev</author>
      <pubDate>Wed, 15 Dec 2021 09:26:52 +0000</pubDate>
      <link>https://dev.to/dom_the_dev/burger-map-fetching-and-displaying-data-with-react-5cae</link>
      <guid>https://dev.to/dom_the_dev/burger-map-fetching-and-displaying-data-with-react-5cae</guid>
      <description>&lt;p&gt;Learning web development can be pretty dreary and gray. So it's always good to involve things you like into your learning process.&lt;br&gt;
Ania Kub√≥w made a Burger API in her YouTube Video &lt;strong&gt;&lt;a href="https://youtu.be/FLnxgSZ0DG4"&gt;How to mock your own API&lt;/a&gt;&lt;/strong&gt;. &lt;/p&gt;

&lt;p&gt;I took the liberty and used that API to create a Burger Map with React. And here i show you how.&lt;/p&gt;

&lt;p&gt;&lt;a href="#tldr"&gt;TL;DR&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#list-of-content"&gt;
  &lt;/a&gt;
  List of content
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="#cra"&gt;Create React App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fetch-data"&gt;Fetching Burger Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mapbox"&gt;Mapbox API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#latlong"&gt;Append Latitude and Longitude Values to the Response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#world-map"&gt;Display the World Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#render-data"&gt;Render Data on the Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#create-react-app"&gt;
  &lt;/a&gt;
  Create React App &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Let's setup our frontend application by typing the following command into your terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npx create-react-app burger-map
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will boilerplate a complete react application for you.&lt;/p&gt;

&lt;p&gt;Jump into your project with &lt;code&gt;cd burger-map&lt;/code&gt; and then start the development server with &lt;code&gt;yarn start&lt;/code&gt;,&lt;/p&gt;

&lt;p&gt;This will start the react application which you can then visit at &lt;code&gt;http://localhost:3000&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once this is done we can open up this project in the editor of our choice.&lt;/p&gt;

&lt;p&gt;In the main file &lt;code&gt;App.js&lt;/code&gt; safely remove all the stuff which is not needed the file will look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;./App.css&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;export&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="nx"&gt;App&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#fetching-burger-data"&gt;
  &lt;/a&gt;
  Fetching Burger Data &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;The next step is to fetch the data which we want to display. For that purpose we are going to use the npm module &lt;code&gt;axios&lt;/code&gt; which will execute our HTTP requests. &lt;/p&gt;

&lt;p&gt;Install it with yarn via the terminal:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add axios
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To add a state to our application, we need to import the useState hook. Since we want to call up the data right at the beginning of our application, we need the useEffect hook right away. &lt;br&gt;
Import them at the beginning of &lt;code&gt;App.js&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We need one state to set our application into the loading state while fetching data, and one to store the burger data.&lt;br&gt;
Lets to this with this to lines of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;burgers&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setBurgers&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The function to fetch the data we place the useEffect hook, to be sure it is called right at the beginning of our application.&lt;br&gt;
As mentiond we use &lt;code&gt;axios&lt;/code&gt; to handle the get-request. &lt;br&gt;
The URL of the API is where we get the burgers from is &lt;code&gt;https://my-burger-api.herokuapp.com/burgers&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The useEffect hook should now look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchBurgers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-burger-api.herokuapp.com/burgers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nx"&gt;setBurgers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchBurgers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#mapbox-api"&gt;
  &lt;/a&gt;
  Mapbox API&lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;For further purposes we need to create an free account at &lt;a href="//mapbox.com"&gt;mapbox.com&lt;/a&gt;. Then under your Account you can create an Access Token which we need to call the Mapbox Api.&lt;br&gt;
Copy this token and put it in ca &lt;code&gt;const&lt;/code&gt; in your application.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#append-latitude-and-longitude-values-to-the-response"&gt;
  &lt;/a&gt;
  Append Latitude and Longitude Values to the Response &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;When we check the response for e.g. with &lt;code&gt;console.log(data)&lt;/code&gt;&lt;br&gt;
we see that currently the address for each burger looks something like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;addressId:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;country:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"United Kingdom"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;line&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Brick Lane"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;line&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"Shoreditch"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;number:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"104"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="err"&gt;postcode:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"E1 6RL"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Since the Mapbox App is needing the &lt;code&gt;latitude&lt;/code&gt; and &lt;code&gt;longitude&lt;/code&gt; values to display the data on the correct position we have to call the geocoding endpoint. Here we have to pass the address object as a string seperated with ampersands. &lt;/p&gt;

&lt;p&gt;For that case create the getLatLong function like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;getLatLong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;line1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;address&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;searchKey&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;line1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;line2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;postcode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;country&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;replaceAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`https://api.mapbox.com/geocoding/v5/mapbox.places/&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;searchKey&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.json?access_token=&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we need to call this function for each burger so adjust the &lt;code&gt;fetchBurgers&lt;/code&gt; function to look like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="nx"&gt;useEffect&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fetchBurgers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;burgers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;axios&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://my-burger-api.herokuapp.com/burgers&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;burger&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latLong&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="nx"&gt;getLatLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addresses&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="nx"&gt;burgers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;setBurgers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;burgers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nx"&gt;setLoading&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;fetchBurgers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;[]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now when we check our burger object we see a property &lt;code&gt;latLong&lt;/code&gt; which is an array containing the lat and long values.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#display-the-world-map"&gt;
  &lt;/a&gt;
  Display the World Map &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;To display the data on a map let's install the &lt;a href="https://visgl.github.io/react-map-gl/"&gt;ReactMapGL&lt;/a&gt; component.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yarn add react-map-gl
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then import the Map as well as the Markers Component at the beginning of our App.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;ReactMapGL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;react-map-gl&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's adjust the return from our App.js and add the Map Component like that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;loading burgers..&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;className&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"App"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="na"&gt;textAlign&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;center&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;World Map&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactMapGL&lt;/span&gt;
            &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;
            &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vh"&lt;/span&gt;
            &lt;span class="na"&gt;mapboxApiAccessToken&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ReactMapGL&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now you already should be able to see a fullscreen map in your browser. &lt;/p&gt;

&lt;p&gt;To make our map interactive we need to add a so called viewport as well as the function to change it. &lt;/p&gt;

&lt;p&gt;So add a new state, as well as adjust the Map Component:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;vieport&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;setVieport&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;useState&lt;/span&gt;&lt;span class="p"&gt;({})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactMapGL&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;vieport&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vh"&lt;/span&gt;
    &lt;span class="na"&gt;onViewportChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nextVieport&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVieport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextVieport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;            
    &lt;span class="na"&gt;mapboxApiAccessToken&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ReactMapGL&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Go and check the map. You can now drag and drop, as well as zoom in and zoom out.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#render-data-on-the-map"&gt;
  &lt;/a&gt;
  Render Data on the Map &lt;a&gt;&lt;/a&gt;
&lt;/h2&gt;

&lt;p&gt;Now we come to the last part. We have to combine the data and the map.&lt;/p&gt;

&lt;p&gt;For that create the &lt;code&gt;renderBurgers&lt;/code&gt; function and call inside of the ReactMapGL component.&lt;br&gt;
The renderBurgers function maps over all burgers, passes the lat and long values to the Marker and returns them on their location.&lt;br&gt;
Whatever you pass inside the Marker Component will then be displayed on the map. In this case we render a &lt;code&gt;X&lt;/code&gt; for each burger.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;renderBurgers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;burgers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Marker&lt;/span&gt;
            &lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;latitude&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latLong&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;longitude&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;burger&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;latLong&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            X
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;Marker&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The last step is to call the &lt;code&gt;renderBurgers&lt;/code&gt; function in the ReactMapGl Component. So let's add it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight jsx"&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;ReactMapGL&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;vieport&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vw"&lt;/span&gt;
    &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"100vh"&lt;/span&gt;
    &lt;span class="na"&gt;onViewportChange&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;nextVieport&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;setVieport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;nextVieport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;mapboxApiAccessToken&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;MAPBOX_TOKEN&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;renderBurgers&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nc"&gt;ReactMapGL&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;In this I showed you how to create a react app, fetch data from an API. Then we used the Mapbox react component to display the data on the Map. &lt;/p&gt;

&lt;p&gt;This was my first article ever, if you liked it let me now. And if you didn't liked it let me now what can be improved.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#thanks-for-reading"&gt;
  &lt;/a&gt;
  Thanks for reading!
&lt;/h3&gt;

&lt;p&gt;GitHub: &lt;a href="https://github.com/dom-the-dev/burger-map"&gt;https://github.com/dom-the-dev/burger-map&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; &lt;a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I also made a step by step video for this burger map on my &lt;a href="#https://www.youtube.com/channel/UCAa2t4QIxlaUuPO2FKq5TDw"&gt;YouTube Channel&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/FuOODVaByNA"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>react</category>
      <category>mapbox</category>
      <category>api</category>
      <category>tutorial</category>
    </item>
    <item>
      <title>Implementing Approval Tests For PDF Document Generation</title>
      <author>Jan Van Ryswyck</author>
      <pubDate>Wed, 15 Dec 2021 09:24:26 +0000</pubDate>
      <link>https://dev.to/janvanryswyck/implementing-approval-tests-for-pdf-document-generation-11lo</link>
      <guid>https://dev.to/janvanryswyck/implementing-approval-tests-for-pdf-document-generation-11lo</guid>
      <description>&lt;p&gt;In the previous blog post, we discussed how to use &lt;a href="https://dev.to/janvanryswyck/approval-tests-for-pdf-document-generation-1ceb"&gt;Approval Tests for verifying generated PDF documents&lt;/a&gt;. In this blog post I‚Äôm going to show how to extend the &lt;a href="https://github.com/approvals/ApprovalTests.Java"&gt;Approval Test library for Java&lt;/a&gt; in order to support PDF documents. Let‚Äôs just dive right into the code.&lt;/p&gt;

&lt;p&gt;The first thing that needs to happen is making a new implementation of the &lt;code&gt;ApprovalApprover&lt;/code&gt; interface, which is provided by the &lt;em&gt;Approval Test&lt;/em&gt; library. The following code demonstrates how this can be implemented.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PdfFileApprover&lt;/span&gt; &lt;span class="kd"&gt;implements&lt;/span&gt; &lt;span class="nc"&gt;ApprovalApprover&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="no"&gt;PDF_DIFF_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
        &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="s"&gt;"PdfDiffOutputDirectory"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;ApprovalNamer&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;ApprovalWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;allowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;approved&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PdfFileApprover&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ApprovalWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;allowedDiffInPercent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAllowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;excludedAreas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getExcludedAreas&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;namer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParent&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;forFile&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;getNamer&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;

        &lt;span class="n"&gt;received&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getReceivedFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFileExtensionWithDot&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="n"&gt;approved&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getApprovedFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getFileExtensionWithDot&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;VerifyResult&lt;/span&gt; &lt;span class="nf"&gt;approve&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;received&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeReceivedFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;approvePdfFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;approved&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;cleanUpAfterSuccess&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ApprovalFailureReporter&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delete&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nc"&gt;ApprovalReporterWithCleanUp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="nc"&gt;ApprovalReporterWithCleanUp&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;cleanUp&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;approved&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;VerifyResult&lt;/span&gt; &lt;span class="nf"&gt;reportFailure&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ApprovalFailureReporter&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;report&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;approved&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt; &lt;span class="k"&gt;instanceof&lt;/span&gt; &lt;span class="nc"&gt;ReporterWithApprovalPower&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ReporterWithApprovalPower&lt;/span&gt; &lt;span class="n"&gt;reporterWithApprovalPower&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ReporterWithApprovalPower&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reporterWithApprovalPower&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;approveWhenReported&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;VerifyResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FAILURE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fail&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;Error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Failed Approval\n Approved:%s\n Received:%s"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
            &lt;span class="n"&gt;approved&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAbsolutePath&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;VerifyResult&lt;/span&gt; &lt;span class="nf"&gt;approvePdfFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="n"&gt;approved&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;SimpleEnvironment&lt;/span&gt; &lt;span class="n"&gt;environment&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SimpleEnvironment&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setAllowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;allowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="nc"&gt;PdfComparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CompareResultImpl&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pdfComparator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PdfComparator&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;(&lt;/span&gt;&lt;span class="n"&gt;approved&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;received&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
                &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withEnvironment&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forEach&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;pdfComparator:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;withIgnore&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

            &lt;span class="nc"&gt;CompareResultImpl&lt;/span&gt; &lt;span class="n"&gt;comparisonResult&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pdfComparator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;compare&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comparisonResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isNotEqual&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;outputFileName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;determineDiffOutputFileName&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;comparisonResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;writeTo&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputFileName&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;VerifyResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;from&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comparisonResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isEqual&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;IOException&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;VerifyResult&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FAILURE&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;determineDiffOutputFileName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;outputDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PackageLevelSettings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getValueFor&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="no"&gt;PDF_DIFF_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;outputDirectory&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;outputDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getSourceFilePath&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;of&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputDirectory&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"diffOutput"&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;PdfFileApprover&lt;/code&gt; class provides the core implementation for supporting PDF documents. Most of the code is quite similar to the &lt;code&gt;FileApprover&lt;/code&gt; class of the &lt;em&gt;Approval Test&lt;/em&gt; library. However, the &lt;code&gt;approvePdfFile&lt;/code&gt; method is the most important part. This method expects two arguments; the received PDF file and the approved PDF file. The purpose of the &lt;code&gt;approvePdfFile&lt;/code&gt; method is to compare both incoming PDF files. For doing the actual comparison we make use of the &lt;a href="https://github.com/red6/pdfcompare"&gt;PDFCompare library&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When there‚Äôs a difference between these PDF files, we save the result of the comparison to a PDF file so that we can visually inspect the differences as well as instruct the framework to fail the test. Also notice that the &lt;code&gt;PDFCompare&lt;/code&gt; library has the ability to exclude certain areas within a PDF file from the comparison as well as allowing a certain percentage of differences.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PdfApprovals&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_ALLOWED_DIFF_IN_PERCENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emptyList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;DEFAULT_ALLOWED_DIFF_IN_PERCENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;allowedDiffInPercentage&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowedDiffInPercentage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emptyList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;allowedDiffInPercentage&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; 
                              &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;ByteArrayInputStream&lt;/span&gt; &lt;span class="n"&gt;inputStream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ByteArrayInputStream&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outputStream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;toByteArray&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
        &lt;span class="nc"&gt;ApprovalBinaryFileWriter&lt;/span&gt; &lt;span class="n"&gt;binaryFileWriter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;ApprovalBinaryFileWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputStream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"pdf"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withAllowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allowedDiffInPercentage&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
            &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;withExcludedAreas&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

        &lt;span class="nc"&gt;PdfApprovals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;binaryFileWriter&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ApprovalWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;PdfFileApprover&lt;/span&gt; &lt;span class="n"&gt;pdfFileApprover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;PdfFileApprover&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="nc"&gt;Approvals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pdfFileApprover&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getParent&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;PdfApprovals&lt;/code&gt; class provides a number of static helper methods that can be used by the tests themselves. These helper methods ultimately use the &lt;code&gt;PdfFileApprover&lt;/code&gt; class to perform the actual comparison. A number of overloaded methods are available to provide the ability of excluding certain areas and/or tweaking the allowed percentage of differences when performing the comparison.&lt;/p&gt;

&lt;p&gt;These can be used as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;PdfApprovals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nc"&gt;PdfApprovals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.18&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Arrays&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;asList&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;38&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;PdfApprovals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="nc"&gt;PdfApprovals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;verify&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.18&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;For completeness, the following code shows the implementation of the &lt;code&gt;PdfFileOptions&lt;/code&gt; and &lt;code&gt;PackageSettings&lt;/code&gt; classes. These are necessary to provide the &lt;code&gt;PdfFileApprover&lt;/code&gt; class with the necessary configuration settings for performing the comparison and saving the output files.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="no"&gt;DEFAULT_ALLOWED_DIFF_IN_PERCENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;enum&lt;/span&gt; &lt;span class="nc"&gt;CustomFields&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="no"&gt;ALLOWED_DIFF_IN_PERCENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
        &lt;span class="no"&gt;EXCLUDED_AREAS&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;CustomFields&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Object&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customFields&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Options&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;PdfFileOptions&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="n"&gt;customFields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;HashMap&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class="n"&gt;customFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALLOWED_DIFF_IN_PERCENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="no"&gt;DEFAULT_ALLOWED_DIFF_IN_PERCENT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;customFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EXCLUDED_AREAS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;emptyList&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

        &lt;span class="n"&gt;options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Options&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;forFile&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;withExtension&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;".pdf"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;getAllowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;customFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALLOWED_DIFF_IN_PERCENT&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;getExcludedAreas&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="n"&gt;customFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EXCLUDED_AREAS&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Options&lt;/span&gt; &lt;span class="nf"&gt;getParent&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt; &lt;span class="nf"&gt;withAllowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;allowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;customFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;ALLOWED_DIFF_IN_PERCENT&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allowedDiffInPercent&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;PdfFileOptions&lt;/span&gt; &lt;span class="nf"&gt;withExcludedAreas&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;PageArea&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;customFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;put&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CustomFields&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;EXCLUDED_AREAS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;excludedAreas&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PackageSettings&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nc"&gt;ApprovalBaseDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"../resources"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nc"&gt;PdfDiffOutputDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
        &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;format&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s/build/tmp"&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getProperty&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"user.dir"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;That‚Äôs all there is to it. With just this tiny bit of code we‚Äôre able to use &lt;em&gt;Approval Tests&lt;/em&gt; for PDF documents.&lt;/p&gt;

</description>
      <category>unittests</category>
      <category>tdd</category>
      <category>testing</category>
      <category>softwaredesign</category>
    </item>
    <item>
      <title>A Complete Guide on React Fundamentals: Props and State</title>
      <author>Tarun Gurang</author>
      <pubDate>Wed, 15 Dec 2021 09:08:36 +0000</pubDate>
      <link>https://dev.to/tarungurang/a-complete-guide-on-react-fundamentals-props-and-state-5c9o</link>
      <guid>https://dev.to/tarungurang/a-complete-guide-on-react-fundamentals-props-and-state-5c9o</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;When we talk about State and Props, both are considered as variables, but they work for different tasks and purposes. To manage the structure of reacting data props can only pass it by using unidirectional from parent component to child.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-are-props"&gt;
  &lt;/a&gt;
  What are props?
&lt;/h3&gt;

&lt;p&gt;Props are defined in the parent component as variable and pass the value to the child component. Normally we familiar with C and C++ we define the variable before we must declare the variable. Same as it props are declared on one component (parent) and define in another component(child). Props follow the uni-directional flow (from parent component to child component). We can say that props are read-only components because it just assigns a value and passes the value as parameter.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-declare-props"&gt;
  &lt;/a&gt;
  How to declare props?
&lt;/h3&gt;

&lt;p&gt;Here Details are child component which is imported in a parent component&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;&amp;lt;details&amp;gt;&amp;lt;/details&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Title its props attribute and my first props are props value&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;&amp;lt;details title="my first props"&amp;gt;&amp;lt;/details&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can also pass the array as props using list&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
     const value= [1, 2, 3, 4, 5];
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;&amp;lt;details 2="" const="" item="{[1,"&amp;gt;&amp;lt;/details&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h4&gt;
  &lt;a href="#how-to-pass-the-value"&gt;
  &lt;/a&gt;
  How to pass the value?
&lt;/h4&gt;

&lt;p&gt;Props are normally used for the set the internal which is based on props value which we define in constructor like that.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
 class Details extends React.Component {
  constructor(props) {
    super(props)
    console.log(props.title)
  }
}
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can directly assign in the render method&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
 render {
 return (&amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;Suject details:&amp;lt;/h2&amp;gt;
&amp;lt;h2&amp;gt;{this.props.title}&amp;lt;/h2&amp;gt;&amp;lt;/div&amp;gt;
      )
}
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Props never change the value it only passes the value. Props also used to allow the child component to access the method In the parent component. There is a good way to manage the state in the parent component. Every time component will display some kind of information which is based on the props.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Read More: &lt;a href="https://www.ifourtechnolab.com/blog/explain-authentication-in-react-application"&gt;Explain Authentication In React Application&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parent Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
import &amp;amp;#39;./App.css&amp;amp;#39;;
import React from &amp;amp;#39;react&amp;amp;#39;;
import Details from &amp;amp;#39;./Details&amp;amp;#39;;
class Footer extends React.Component
 {
    render()
    {             
    var person =
     {
      sub1: &amp;amp;#39;Java&amp;amp;#39;,
      sub2: &amp;amp;#39;php&amp;amp;#39;,
      sub3:&amp;amp;#39;React&amp;amp;#39;
     };
     const value= [1, 2, 3, 4, 5];

     return (&amp;lt;div classname=""&amp;gt;
          {/* Details component which accepts props */}&amp;lt;details title="my first props"&amp;gt;&amp;lt;/details&amp;gt;&amp;lt;/div&amp;gt;
      );


  }

}
export default Footer;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;Child Component&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
import React, { } from &amp;amp;#39;react&amp;amp;#39;;

class Details extends React.Component 
{
  render() 
  {
Const {sub1,sub2,sub3}={...this.props};/// expmple of sperad and rest 
const {a}={...this.props.item}
   return(&amp;lt;div&amp;gt;&amp;lt;h2&amp;gt;Suject details:&amp;lt;/h2&amp;gt;
&amp;lt;h2&amp;gt;{this.props.item}&amp;lt;/h2&amp;gt;
&amp;lt;h2&amp;gt;{this.props.title}&amp;lt;/h2&amp;gt;
&amp;lt;ol&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;sub1:{sub1}&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;sub2:{sub2}&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;sub3:{sub3}&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ol&amp;gt;
) }&amp;lt;/div&amp;gt;
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#what-is-state"&gt;
  &lt;/a&gt;
  What is State?
&lt;/h5&gt;

&lt;p&gt;The state is mange the data it can change the data while props never change the data state even set the state of data when we perform any event like button click or input change event we have to set the state of data that time state performs their task for managing the overall data.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#how-to-update-a-components-state"&gt;
  &lt;/a&gt;
  How To Update a Component‚Äôs State?
&lt;/h5&gt;

&lt;p&gt;State can not be modified directly we have to modify with a special method called setstate()&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;this.setState=name:‚Äôrahi‚Äô     //wrong        
        this.setState({name: ‚Äòrahi‚Äô})    //right

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h5&gt;
  &lt;a href="#what-happens-when-the-state-changes"&gt;
  &lt;/a&gt;
  What happens when the state changes?
&lt;/h5&gt;

&lt;p&gt;The state will be changed depending on the input when the time input changes then the event will be triggered and that time state is rendered and the state collects the initial value of the state. When the state change reacts then it takes the all information immediately and re-render the DOM only which component gets an update in the state, and that‚Äôs why it react faster.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#can-we-use-state-in-every-component"&gt;
  &lt;/a&gt;
  Can we use state in every component?
&lt;/h5&gt;

&lt;p&gt;There are two components, one is the functional component and the second is the class component. The function is also called the stateless component because the function component is only used to define the variable work on the simple task. State is only used in the class component.&lt;/p&gt;

&lt;p&gt;But now through the React Hooks, we can use state in function component but compatibility class component is better than function component.&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#what-are-the-differences-between-props-and-state"&gt;
  &lt;/a&gt;
  What are the differences between props and state?
&lt;/h5&gt;

&lt;p&gt;Props are used to pass the data while the state is used for manipulate the data and manage the data. Props only read the data while state modified the data and it's modified by its own component another component can‚Äôt be accessed by from outside. Props used attribute and value to pass the data while state used state() method.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--F6Tyk676--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6z8q7sgfxezdtzr6lor.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--F6Tyk676--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/u6z8q7sgfxezdtzr6lor.jpg" alt="react props and state" width="839" height="381"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Planning to &lt;a href="https://www.ifourtechnolab.com/hire-dedicated-react-developers"&gt;Hire React Developer&lt;/a&gt;? Your Search ends here.&lt;/strong&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#full-development-example-of-props-and-state"&gt;
  &lt;/a&gt;
  Full development example of props and state
&lt;/h5&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;xmp&amp;gt;
import React, { Component } from &amp;amp;#39;react&amp;amp;#39;;
export default class FormDataComponent extends Component {
    userData;
    constructor(props) {
        super(props);
        this.onChangeName = this.onChangeName.bind(this);
        this.onChangeEmail = this.onChangeEmail.bind(this);
        this.onChangePhone = this.onChangePhone.bind(this);
        this.onSubmit = this.onSubmit.bind(this);
        this.state = {
            name: &amp;amp;#39;&amp;amp;#39;,
            email: &amp;amp;#39;&amp;amp;#39;,
            phone: &amp;amp;#39;&amp;amp;#39;
        }
    }
    // Form Events
    onChangeName(e) {
        this.setState({ name: e.target.value })
    }
    onChangeEmail(e) {
        this.setState({ email: e.target.value })
    }
    onChangePhone(e) {
        this.setState({ phone: e.target.value })
    }
    onSubmit(e) {
        e.preventDefault()
        this.setState({
            name: &amp;amp;#39;&amp;amp;#39;,
            email: &amp;amp;#39;&amp;amp;#39;,
            phone: &amp;amp;#39;&amp;amp;#39;
        })
    }
    // React Life Cycle
    componentDidMount() {
        this.userData = JSON.parse(localStorage.getItem(&amp;amp;#39;user&amp;amp;#39;));
        if (localStorage.getItem(&amp;amp;#39;user&amp;amp;#39;)) {
            this.setState({
                name: this.userData.name,
                email: this.userData.email,
                phone: this.userData.phone
            })
        } else {
            this.setState({
                name: &amp;amp;#39;&amp;amp;#39;,
                email: &amp;amp;#39;&amp;amp;#39;,
                phone: &amp;amp;#39;&amp;amp;#39;
            })
        }
    }
    componentWillUpdate(nextProps, nextState) {
        localStorage.setItem(&amp;amp;#39;user&amp;amp;#39;, JSON.stringify(nextState));
    }
    render() {
        return (&amp;lt;div classname="container"&amp;gt;&amp;lt;form onsubmit="{this.onSubmit}"&amp;gt;&amp;lt;div classname="form-group"&amp;gt;
                        &amp;lt;label&amp;gt;Name&amp;lt;/label&amp;gt;
                        &amp;lt;input classname="form-control" onchange="{this.onChangeName}" type="text" value="{this.state.name}" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div classname="form-group"&amp;gt;
                        &amp;lt;label&amp;gt;Email&amp;lt;/label&amp;gt;
                        &amp;lt;input classname="form-control" onchange="{this.onChangeEmail}" type="email" value="{this.state.email}" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div classname="form-group"&amp;gt;
                        &amp;lt;label&amp;gt;Phone&amp;lt;/label&amp;gt;
                        &amp;lt;input classname="form-control" onchange="{this.onChangePhone}" type="tel" value="{this.state.phone}" /&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;button classname="btn btn-primary btn-block" type="submit"&amp;gt;Submit&amp;lt;/button&amp;gt;&amp;lt;/form&amp;gt;&amp;lt;/div&amp;gt;
        )
    }
}
&amp;lt;/xmp&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h6&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h6&gt;

&lt;p&gt;In this blog, what we have learned is about props and state with examples for each. We have also discussed the task and their purposes. How they are different from each other and in what way they are similar. We also discussed their performance and compatibility. Through this practical blog, you will get a complete idea about all these topics.&lt;/p&gt;

</description>
      <category>react</category>
      <category>reactnative</category>
      <category>programming</category>
    </item>
    <item>
      <title>Luos Get Startedd: tuto #3</title>
      <author>Emanuel Allely</author>
      <pubDate>Wed, 15 Dec 2021 09:08:17 +0000</pubDate>
      <link>https://dev.to/luos/luos-get-startedd-tuto-3-4537</link>
      <guid>https://dev.to/luos/luos-get-startedd-tuto-3-4537</guid>
      <description>&lt;p&gt;After the tutorials #1 and #2 of the Luos Get Started (&lt;a href="https://youtu.be/VcK-LJ-gnDo"&gt;https://youtu.be/VcK-LJ-gnDo&lt;/a&gt;). Here is the final one ‚Üí &lt;a href="https://youtu.be/3NsDadp1IYM"&gt;https://youtu.be/3NsDadp1IYM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Luos is an open-source and real-time orchestrator for distributed architectures, to easily design, test and deploy embedded applications (like Tesla, SpaceX and Dyson do!).&lt;/p&gt;

&lt;p&gt;If you have questions, join the Community: &lt;a href="https://www.luos.io"&gt;https://www.luos.io&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;iframe width="710" height="399" src="https://www.youtube.com/embed/3NsDadp1IYM"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

</description>
      <category>tutorial</category>
      <category>opensource</category>
      <category>embedded</category>
      <category>luos</category>
    </item>
    <item>
      <title>Why Every Developer should Learn Docker in 2022</title>
      <author>javinpaul</author>
      <pubDate>Wed, 15 Dec 2021 08:39:56 +0000</pubDate>
      <link>https://dev.to/javinpaul/why-every-developer-should-learn-docker-in-2022-2ndi</link>
      <guid>https://dev.to/javinpaul/why-every-developer-should-learn-docker-in-2022-2ndi</guid>
      <description>&lt;p&gt;&lt;em&gt;Disclosure: This post includes affiliate links; I may receive compensation if you purchase products or services from the different links provided in this article.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/working-with-containers-docker-docker-compose?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3zoaZNWJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/cdn-cgi/image/f%3Dauto%2Cfit%3Dcover%2Cw%3D620/v2api/collection/10370001/6445473125629952/image/5769023684870144" alt="Working with Containers: Docker &amp;amp;amp; Docker Compose - Learn Interactively" width="620" height="310"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Hello Devs, if you are wondering whether you should learn Docker in 2022 or not then you have come to the right place. I have been asking my readers to learn Docker since last year and also shared &lt;a href="(https://www.java67.com/2018/02/5-free-docker-courses-for-java-and-DevOps-engineers.html)"&gt;free Docker courses&lt;/a&gt; and &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-books-to-learn-docker-for-beginners.html"&gt;best Docker books&lt;/a&gt; to encourage them to learn Docker. &lt;/p&gt;

&lt;p&gt;Why have I been doing this? Because Docker is not just another tool, it's a game-changer, and I firmly believe that every Programmer, be it a Java developer, a C++ developer, or a Web Developer coding in JavaScript, all should learn Docker. &lt;/p&gt;

&lt;p&gt;The first and foremost reason is that Docker simplifies both the development and Deployment of Software projects, for example, you can deploy a &lt;a href="https://javarevisited.blogspot.com/2018/02/top-5-spring-microservices-courses-with-spring-boot-and-spring-cloud.html"&gt;Java Microservice&lt;/a&gt; in the same way as a node application once you wrap them in a container. &lt;/p&gt;

&lt;p&gt;Just like &lt;a href="https://medium.com/javarevisited/6-best-maven-courses-for-beginners-in-2020-23ea3cba89"&gt;Maven&lt;/a&gt; made it easy to maintain project dependencies, Docker takes it to another level by building applications and shipping them into containers.&lt;/p&gt;

&lt;p&gt;When you ship applications into the container, you don't need to deploy your application, OS, database, runtimes separately, instead you use them together as a container. &lt;/p&gt;

&lt;p&gt;This makes deployment and scaling easier. If you want to scale further, you can deploy more containers very quickly instead of setting up a whole new environment.&lt;/p&gt;

&lt;p&gt;Similarly, if you want to scale down, you can destroy containers quickly, and the best thing is you don't need to do that yourself, there are tools like &lt;a href="https://javarevisited.blogspot.com/2019/05/top-5-courses-to-learn-docker-and-kubernetes-for-devops.html#axzz6ehrUZiIN"&gt;Kubernetes&lt;/a&gt; which can manage and scale your Docker containers automatically.&lt;/p&gt;

&lt;p&gt;Docker is also a big help for programmers, especially when you are starting on a new application. It is often troublesome to set up your application in IDE and run it from your Windows or &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-linux-command-line-in-2020-best-and-free-f3ee4a78d0c0"&gt;Linux machine&lt;/a&gt; where you are doing development because of dependencies like on OS or a particular library, which is only available in specific versions of OS.&lt;/p&gt;

&lt;p&gt;With &lt;a href="https://medium.com/javarevisited/10-free-courses-to-learn-docker-and-devops-for-frontend-developers-691ac7652cee"&gt;Docker&lt;/a&gt;, you don't need that, you can just ship your application as a Docker image, and your team member can start and debug the application by running Docker images as a container. &lt;/p&gt;

&lt;p&gt;This makes the Developer's life easy. Docker also helps with &lt;a href="https://medium.com/javarevisited/13-best-courses-to-learn-devops-for-senior-developers-in-2020-a2997ff7c33c"&gt;DevOps&lt;/a&gt; because it simplifies deployment and scaling, and that's why Every DevOps engineer should learn Docker in 2022.&lt;/p&gt;

&lt;p&gt;These simplification of development, deployment, scalability, and DevOps are significant reasons to learn Docker in 2022, now that you know the crux of it let's go into a little bit more detail to understand why &lt;a href="https://javarevisited.blogspot.com/2018/02/10-free-docker-container-courses-for-Java-Developers.html"&gt;Docker&lt;/a&gt; is such an essential tool for programmers and DevOps professionals.&lt;/p&gt;

&lt;p&gt;With every organization going towards the Cloud, the container model is going to be even more critical in the coming years, and Docker and Kubernetes will play a significant role in deploying and running software from Cloud.&lt;/p&gt;

&lt;p&gt;That's why it's very, very important for both programmers and DevOps engineers to learn Docker and Kubernetes to do well on their current job and add an in-demand technical skill into their colorful resume.&lt;/p&gt;

&lt;p&gt;And if you are serious about learning Docker in 2022 then I highly recommend you to check out Maximilian Schwarzmuller's  &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;Docker &amp;amp; Kubernetes: The Practical Guide&lt;/a&gt;&lt;/strong&gt; course on Udemy This 23 course is now available for just $10 only on Udemy sale, which is like free considering its value.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--9sgMsdAJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://i.ytimg.com/vi/1mzlOUyPkzU/maxresdefault.jpg" alt="Docker &amp;amp;amp; Kubernetes: The Practical Guide best course" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#1-what-is-a-docker-image"&gt;
  &lt;/a&gt;
  1. &lt;strong&gt;What is a Docker image?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Docker image is like a snapshot of your application. It is an executable file (like a big tarball) that contains everything your application needs to run, including operating systems, third-party libraries, configuration, and any other dependencies you need to execute your application.&lt;/p&gt;

&lt;p&gt;You create a docker image by running the docker build command which takes your Dockerfile and creates a Docker image.&lt;/p&gt;

&lt;p&gt;`` $ docker build -t myapp:v1.0 .&lt;/p&gt;

&lt;p&gt;This command is building a Docker image from the docker file **myapp **which is present in the current directory. It has multiple layers stacked on top of each other and is represented as a single object. A docker image is created using a docker file, we will get to that in a bit.&lt;/p&gt;

&lt;p&gt;You can also see all the images using the docker image command.  You can further see &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-mastery%2F"&gt;Docker Mastery: with Kubernetes +Swarm from a Docker Captain &lt;/a&gt;&lt;/strong&gt; course to learn more about essential Docker concepts and commands. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fdocker-kubernetes-the-practical-guide%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--RoIIg6o0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-XdysovKSUNs/XuW3jYV8uCI/AAAAAAAAf5w/0rCx4qYFT8UswPckI6WBYwxLpU1HPWEGQCLcBGAsYHQ/w400-h211/Docker%252Bimage%252Band%252BDocker%252Bcontainer%252BPluralsight%252Bcourse.png" alt="Why Developer should learn Docker" width="394" height="211"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#2-what-is-a-docker-container"&gt;
  &lt;/a&gt;
  2. &lt;strong&gt;What is a Docker container?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Docker Container is a running instance of your docker image. When you run your docker image using the $ docker run command then these containers are created. Y*ou can run as many containers as you want using the same docker image.*&lt;/p&gt;

&lt;p&gt;You can even run them on the same host as they are completely &lt;em&gt;separated&lt;/em&gt; from each other. This is truly great and allows you to run any command from the web as the effect will be isolated to only that Docker container. Many online interactive courses platform like &lt;a href="https://javarevisited.blogspot.com/2020/05/top-10-educative-courses-for-programmers.html"&gt;Educative&lt;/a&gt;, use Docker containers to allow users to run code from the browser.&lt;/p&gt;

&lt;p&gt;So, you can see that it's straightforward to use Docker. All you need is to make a start, download &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, create a Docker image by reusing an existing one from the &lt;a href="https://hub.docker.com/"&gt;Docker hub&lt;/a&gt;, and start running your application inside Docker container.&lt;/p&gt;

&lt;p&gt;``$ docker run -p 8084:8084 -d myapp:v1.0&lt;/p&gt;

&lt;p&gt;This command will start the docker container which will listen on port 8084. It will also be running in the background because we started the container in detached mode ( -d  option).&lt;/p&gt;

&lt;p&gt;Now when you run the docker ps command you can see this container running on the host/&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2019/03/5-free-devops-courses-to-learn-jenkins.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6kAg9_QK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-rKWkeYq8B8o/XuW2fmcM9pI/AAAAAAAAf5Y/a_i_O5jtx5MeyXW1YDUyf1V2i_6MS2bSQCLcBGAsYHQ/w400-h308/Docker%252Bcontainer%252Bon%252BLinux%252BUdemy%252BCourse.png" alt="why Java developer should learn Docker" width="398" height="308"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#3-what-is-difference-between-virtual-machine-and-docker"&gt;
  &lt;/a&gt;
  3. What is difference between Virtual Machine and Docker?
&lt;/h3&gt;

&lt;p&gt;Many developers often confuse between a VM and a Docker container. Let me tell you that both of them are different things.&lt;/p&gt;

&lt;p&gt;They may look similar, but the most crucial difference between a Virtual Machine and Docker is that the underlying physical host and its resources are shared in containers but not in a Virtual Machine.&lt;/p&gt;

&lt;p&gt;Since a picture is worth a thousand words, here is a diagram that clearly shows the difference between a Virtual machine and a &lt;a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773"&gt;Docker&lt;/a&gt; or any other container:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.java67.com/2018/02/5-free-docker-courses-for-java-and-DevOps-engineers.html"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2rMJTbJh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-7LLnVOvSriY/XuW0iPFjJjI/AAAAAAAAf5I/yYICo2gtsMcjidkSYsLH6IxSejWuOU7CwCLcBGAsYHQ/w400-h200/Docker%252BContainer%252Bvs%252BVirtual%252BMachines.png" alt="Docker vs Virtual Machine" width="395" height="200"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#4-how-do-you-use-docker"&gt;
  &lt;/a&gt;
  4. &lt;strong&gt;How do you use Docker?&lt;/strong&gt;
&lt;/h3&gt;

&lt;p&gt;Now the question comes, how can programmers use Docker? Well, to use Docker you need to install it. Once you install Docker, you can execute docker commands to create a Docker file that contains the instructor to create a Docker image.&lt;/p&gt;

&lt;p&gt;Once you have a Docker image you can run them using the $ docker run command and it will create Docker containers running your application.&lt;/p&gt;

&lt;p&gt;I use Docker to run our apps which can only be run on Linux servers, earlier I used Virtual Box but with Docker I don't really need it. &lt;/p&gt;

&lt;p&gt;You can further see &lt;a href="https://www.educative.io/courses/docker-for-developers?affiliate_id=5073518643380224"&gt;Docker for Developers&lt;/a&gt; course on Educative to learn more about how developers can use Docker to make their life simple. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.educative.io/courses/docker-for-developers?affiliate_id=5073518643380224"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DJ8FYBIg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.educative.io/cdn-cgi/image/f%3Dauto%2Cfit%3Dcover%2Cw%3D620/v2api/collection/10370001/6598398019371008/image/5016866440871936" alt="Docker for Developers - Learn Interactively course" width="620" height="310"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#5-why-do-developers-and-devops-use-docker"&gt;
  &lt;/a&gt;
  5. Why do Developers and DevOps use Docker?
&lt;/h3&gt;

&lt;p&gt;A couple of years back, when the business needed other applications, the &lt;a href="https://javarevisited.blogspot.com/2018/09/10-devops-courses-for-experienced-java-developers.html"&gt;DevOps&lt;/a&gt; or infra team would raise a request to purchase new servers and buy a server without knowing the performance requirements of the new application.&lt;/p&gt;

&lt;p&gt;This often results in a wastage of money and resources, which could be used for other apps. They try to solve this problem by sharing a single host with multiple applications by running them on different participation, but that also put some management and operational overhead.&lt;/p&gt;

&lt;p&gt;Then comes a wave of Virtualization and Virtual machines or VM, which allowed &lt;a href="https://medium.com/javarevisited/top-5-online-courses-to-become-a-devops-engineer-in-2020-764f5e60c2b"&gt;DevOps engineers&lt;/a&gt; to run multiple applications on the same physical resource but as a completely different server like you have separate runtime space and name, but there was a potential drawback.&lt;/p&gt;

&lt;p&gt;Every Virtual machine required an entire OS to run. Every OS needs its own CPU, RAM, etc. to run, it needs patching and licensing, which in turn increases cost and resiliency. &lt;/p&gt;

&lt;p&gt;Then comes the container model or Docker model, which was aimed to address the shortcomings of the Virtual Machine and mitigate the wastage of resources by sharing OS, CPU, and RAM and so far its most successful model.&lt;/p&gt;

&lt;p&gt;It helps you scale your application on-demand as Docker makes the deployment easy and Kubernetes makes the deployment of Docker container at scale easier (see **&lt;a href="https://www.educative.io/courses/practical-guide-to-kubernetes?affiliate_id=5073518643380224"&gt;A Practical Guide to Kubernetes&lt;/a&gt; **course) on Cloud Platforms like AWS, Azure, and Google Cloud Platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=CuIbQrBnhiw&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Flearn-docker%2F"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--po9esdJj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ecK4k9DB_AU/X_G9JaF68MI/AAAAAAAAlYg/pLse1PgHc3kkRjs00MBb_6EF0PS-QZoHgCLcBGAsYHQ/w400-h259/Why%252Bevery%252Bprogrammer%252Bshould%252Blearn%252BDocker.png" alt="why every developer should learn Docker" width="400" height="259"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h3&gt;
  &lt;a href="#6-how-does-docker-helps-developers"&gt;
  &lt;/a&gt;
  6. How does Docker helps Developers?
&lt;/h3&gt;

&lt;p&gt;The most significant benefit of Docker from a programmer's or developer's perspective is that it makes sure that the execution environment is the same for all developers and all servers I mean, including UAT, QA, Production.&lt;/p&gt;

&lt;p&gt;The good thing is that any member of the team can set up the project quickly, with no need to mess with config, install libraries, set up dependencies, etc. In simple language, Docker is a platform that enables us to develop, deploy, and run applications with containers.&lt;/p&gt;

&lt;p&gt;You can further check &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fdocker-getting-started"&gt;Getting Started with Docker&lt;/a&gt;&lt;/strong&gt; By Nigel Poulton on Pluralsight to learn more about what benefits Docker offers to web developers. This diagram highlights some of the major benefits Docker offers to programmers and developers.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Fcourses%2Fdocker-getting-started"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--S7ZLR1my--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-B01GYFxVm84/XuW3jQICFCI/AAAAAAAAf50/oFzEIcZPlKoG7n6N7kzwuW-EDzZ5-GnhgCLcBGAsYHQ/w400-h187/Docker%252Bbenefit%252Bfor%252BWeb%252Bdevelopers%252Bpluralsight%252Bcourse.png" alt="best Pluralsight course to learn Docker" width="391" height="187"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;By the way, you will need a Pluralsight membership to join this course which costs around $29 per month or $199 per year &lt;strong&gt;(40% discount now&lt;/strong&gt;). I highly recommend this subscription to all programmers as it provides instant access to more than 7000+ online courses to learn any tech skill. Alternatively, you can also use their &lt;strong&gt;&lt;a href="https://pluralsight.pxf.io/c/1193463/424552/7490?u=https%3A%2F%2Fwww.pluralsight.com%2Flearn"&gt;10-day-free-trial&lt;/a&gt;&lt;/strong&gt; to watch this course for FREE.&lt;/p&gt;




&lt;p&gt;That's all about &lt;strong&gt;why a developer should learn Docker in 2022.&lt;/strong&gt; As I said, Docker really simplifies how you develop and deploy your code, and run your application. Shipping your application into a container makes deployment and scaling smooth and drives automation. It makes DevOps easy and makes your production environment robust.&lt;/p&gt;

&lt;p&gt;With a more significant push to Cloud every year, the container model is going to be the default model for software development, and Docker and Kubernetes will play an essential role in the near future. &lt;/p&gt;

&lt;p&gt;That's why every Developer and DevOps engineer should learn Docker to do well in their current job and also add an in-demand skill on their resume to get a better job.&lt;/p&gt;

&lt;p&gt;Other &lt;strong&gt;DevOps Articles and Courses&lt;/strong&gt; you may like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;  &lt;a href="https://dev.to/javinpaul/top-10-courses-to-learn-docker-and-kubernetes-for-programmers-4lg0"&gt;10 Docker and Kubernetes Courses for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/hackernoon/the-2018-devops-roadmap-31588d8670cb"&gt;The DevOps Developer RoadMap&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-devops-for-experienced-programmers-d93b666db151"&gt;My favorite courses to learn DevOps for experienced&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-10-courses-to-learn-amazon-web-services-aws-cloud-in-2020-best-and-free-317f10d7c21d"&gt;10 Free Courses to learn AWS and Cloud for Programmers&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-7-courses-to-learn-selenium-for-java-and-c-developers-to-learn-automation-testing-free-and-e91637cd9622"&gt;7 Free Courses to learn Selenium for DevOps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.sg/2018/02/10-free-docker-container-courses-for-Java-Developers.html"&gt;10 Free Docker Courses for Java and DevOps Professionals&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2018/09/top-5-jenkins-courses-for-java-and-DevOps-Programmers.html"&gt;Top 5 Courses to Learn Jenkins for Automation and DevOps&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/7-free-online-courses-to-learn-kubernetes-in-2020-3b8a68ec7abc"&gt;7 Free Online Courses to learn Kubernetes&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/05/top-5-amazon-web-services-aws-courses-for-beginners-and-experienced-programmers.html"&gt;My favorite courses to learn Amazon Web Service&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/13-best-courses-to-learn-devops-for-senior-developers-in-2020-a2997ff7c33c"&gt;13 Best DevOps Courses for Senior Developers &lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://javarevisited.blogspot.com/2020/04/top-5-books-to-learn-devops-for-developers.html"&gt;Top 5 Books to learn DevOps for Beginners&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;  &lt;a href="https://medium.com/javarevisited/top-15-online-courses-to-learn-docker-kubernetes-and-aws-for-fullstack-developers-and-devops-d8cc4f16e773"&gt;15 online Courses to learn Docker, Kubernetes, and AWS &lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thanks for reading this article so far. If you also think that &lt;em&gt;every developer or Programmer should learn Docker in 2022&lt;/em&gt;, then please share it with your friends and colleagues. Together we'll help each other to become better programmers and developers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;P. S. -&lt;/strong&gt; If you are want to learn Docker and Kubernetes in-depth and looking for the best online courses then you can also check out Stephen Grider's &lt;strong&gt;&lt;a href="https://click.linksynergy.com/deeplink?id=JVFxdTr9V80&amp;amp;mid=39197&amp;amp;murl=https%3A%2F%2Fwww.udemy.com%2Fdocker-and-kubernetes-the-complete-guide%2F"&gt;Docker and Kubernetes: The Complete Guide&lt;/a&gt;&lt;/strong&gt; course on Udemy. It's a great course to learn both of these tools in 2022.&lt;/p&gt;

</description>
      <category>docker</category>
      <category>devops</category>
      <category>programming</category>
      <category>developer</category>
    </item>
    <item>
      <title>ES6 - A beginners guide - Promises and Fetch</title>
      <author>Stefan Wright</author>
      <pubDate>Wed, 15 Dec 2021 08:00:48 +0000</pubDate>
      <link>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-promises-and-fetch-24ln</link>
      <guid>https://dev.to/stefanwrightcodes/es6-a-beginners-guide-promises-and-fetch-24ln</guid>
      <description>&lt;h2&gt;
  &lt;a href="#promises-and-fetch"&gt;
  &lt;/a&gt;
  Promises and Fetch
&lt;/h2&gt;

&lt;p&gt;This time I am going to cover ES6's introduction of Promise and Fetch as native JavaScript functionality in the browser. A lot of dev's will use 3rd party libraries such as Axios, SuperAgent, or jQuery although it might not always be necessary to do so and it may just add bloat to your projects. We'll start by looking at ES6 Promises, before heading on over to details about Fetch&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#promises"&gt;
  &lt;/a&gt;
  Promises
&lt;/h2&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-promise"&gt;
  &lt;/a&gt;
  What is a Promise?
&lt;/h3&gt;

&lt;p&gt;Much like in the real world, a promise is the result of saying we will do something and give something back. Let's say we wanted to run this piece of code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;http://www.json.com&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;makeRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the above, our console.log will result in showing undefined because we will simply be executing line 3 immediately after line 2, regardless of how quick that makeRequest function runs, it will never be quicker than the execution of the following line. JavaScript Promises give us a method of using 3 different states whilst waiting for something to complete, such as an AJAX request. The three states were can use are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;unresolved&lt;/code&gt; - This is out "waiting" phase, if we were to check in on the value of a Promise periodically using a setTimeout() or similar we would see this until the promise either completed or failed&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;resolved&lt;/code&gt; - This is our "finished" state, we have finished getting the data, the promise is fulfilled and something is ready to be returned.&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;rejected&lt;/code&gt; - This is our "error" state, something went wrong, this would be used to trigger some form of error handling.
Off the back of these states we have two possible callbacks that we can use:&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;then&lt;/code&gt; - This can be used after a &lt;code&gt;resolved&lt;/code&gt; state is triggered, it tells our code what to do next&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;catch&lt;/code&gt; - Much like with a try/catch loop, this is where we perform our error handling
### How about an example?
The following examples, can easily be plugged straight into the Dev Tools of your browser and run from the Console screen. Let's get started:
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Uh oh! we got an error, but why? well, if you run the above code you should see an error similar to &lt;code&gt;Uncaught TypeError: Promise resolver undefined is not a function&lt;/code&gt;. This error response is telling us that the browser knows what a Promise is, but we haven't told it what to do in order to resolve the promise. It's actually really simple to fix. Let's fix it now:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt;&lt;span class="o"&gt;=&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have created a promise, if you run the above code you'll see that it gives a response similar to this:&lt;br&gt;
&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}[[Prototype]]: Promise[[PromiseState]]: "pending"[[PromiseResult]]: undefined&lt;/code&gt;. So now we have created a promise, it doesn't do much right now though. When we define a promise we need to handle how/when its resolved and rejected, luckily the &lt;code&gt;Promise&lt;/code&gt; had two built in arguments that we can use, these are &lt;code&gt;resolve&lt;/code&gt; and &lt;code&gt;reject&lt;/code&gt;. Let's have a look at that:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseResolve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above you'll see we create a new &lt;code&gt;Promise&lt;/code&gt;, we include our two arguments in our inner function. We then call &lt;code&gt;resolve()&lt;/code&gt; inside our function in order to complete the execution. If you run the code above the browser will output something like: &lt;code&gt;Promise¬†{&amp;lt;fulfilled&amp;gt;: undefined}&lt;/code&gt;. Likewise we can do the same with &lt;code&gt;reject()&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseReject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Wait! we got a warning, we have the following returned &lt;code&gt;Promise¬†{&amp;lt;rejected&amp;gt;: undefined}&lt;/code&gt; this is expected, however we also got &lt;code&gt;Uncaught (in promise) undefined&lt;/code&gt; because we didn't handle the rejection properly. Let's look at our callbacks, they'll help us handle both state calls above.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-callbacks"&gt;
  &lt;/a&gt;
  Using callbacks
&lt;/h3&gt;

&lt;p&gt;ES6 Promises give us two built in callback methods as mentioned above they are &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt;. We can use &lt;code&gt;.then()&lt;/code&gt; when we resolve a promise to instruct our code on the next action, and the parameter in the function will automatically take the value that was returned in our promise. Let's look at an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseResolve&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseResolve&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolvedValue&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;resolvedValue&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Still resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Notice how in our first &lt;code&gt;.then()&lt;/code&gt; we have a parameter for our function, we then use that parameter in the return of the arrow function, however rather than giving us an error about the variable being undefined the above code will actually give use the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise resolved
Still resolved
Promise¬†{&amp;lt;fulfilled&amp;gt;: undefined}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as we can see &lt;code&gt;resolvedValue&lt;/code&gt; actually gives us the value we passed back in the resolve. We're going to revisit this later in the article when we look at using &lt;code&gt;fetch&lt;/code&gt; to pull remote data. Now on to error handling, let's jump straight into an example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseReject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseReject&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Still resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;As with the above, we can now see that our catch is including a parameter and our console.log message contains &lt;code&gt;Promise rejected&lt;/code&gt; but we do not output &lt;code&gt;Promise resolved&lt;/code&gt; or &lt;code&gt;Still resolved&lt;/code&gt; and this is because we fired the &lt;code&gt;reject()&lt;/code&gt; line in out promise.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#using-asyncronous-callbacks"&gt;
  &lt;/a&gt;
  Using asyncronous callbacks
&lt;/h3&gt;

&lt;p&gt;We can use asyncronous callback in our ES6 Promises, this can help to simulate what would happen when making an AJAX call or similar to pull data. In the example below we will wait for 5 seconds before resolving our promise.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starting Promise...&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise resolved&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;promiseAsync&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can use a library like jQuery to make a request and using a promise we can then take an action when it completes, take a look below, we will add a log to say we have started, then we'll fetch a JSON sample of blog posts in a promise, and then log that response&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="nx"&gt;promiseAsync&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Promise&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Starting promise&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="na"&gt;url&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;GET&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="na"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;resolve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="na"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;reject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="nx"&gt;promiseAsync&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Promise rejected&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Running the code above gives us &lt;code&gt;Starting promise&lt;/code&gt; and then &lt;code&gt;Array(100)&lt;/code&gt; in the dev tools. I ran this on JSFiddle so that I could ensure jQuery was included.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#so-what-about-fetch"&gt;
  &lt;/a&gt;
  So what about Fetch?
&lt;/h2&gt;

&lt;p&gt;Fetch is a new feature included with ES6, it provides us to combine a network request with a promise in a super simple form! It does have its limitations though, and i'll go into them in a bit, but first...you know what's coming...an example!&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will simply give us a pending Promise in the browser, that's no use to us in this state. With a Promise, as above, we would have to supply a function to handle the resolve/reject conditions, fetch does this for us though. All we need to do is supply callbacks&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Well, we're getting there, we now get the following output when we use this in the Console window:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
Response¬†{type: 'cors', url: 'https://jsonplaceholder.typicode.com/posts/', redirected: false, status: 200, ok: true,¬†‚Ä¶}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This doesn't give us the actual response data, just some metadata. If we want to extract the actual information from jsonplaceholder we are going to pass this through a different function first, let's take a look:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Above, we are first using &lt;code&gt;.json()&lt;/code&gt; in order to take the response stream and render the response body text as JSON (&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Response/json"&gt;MDN Documentation&lt;/a&gt;), we then call &lt;code&gt;.then()&lt;/code&gt; again, this time taking in the return value from &lt;code&gt;response.json()&lt;/code&gt; and then passing that to &lt;code&gt;console.log&lt;/code&gt;. This gives us the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
(100)¬†[{‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}, {‚Ä¶}]
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#but-stefan-you-mentioned-some-downfalls-of-fetch"&gt;
  &lt;/a&gt;
  But Stefan, you mentioned some downfalls of Fetch??
&lt;/h2&gt;

&lt;p&gt;That's right, I did. I mentioned that we can use &lt;code&gt;.then()&lt;/code&gt; and &lt;code&gt;.catch()&lt;/code&gt; with Fetch, however the &lt;code&gt;.catch()&lt;/code&gt; handler isn't always triggered when you expect it. For example, if you go to a page/endpoint that does not exist and gives you an HTTP404 response you won't actually hit the &lt;code&gt;.catch()&lt;/code&gt; code&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts1321654646186/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCESS: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The code above will give ue the following output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode.com/posts1321654646186/ 404 (Not Found)
SUCCESS: Response¬†{type: 'cors', url: 'https://jsonplaceholder.typicode.com/posts1321654646186/', redirected: false, status: 404, ok: false,¬†‚Ä¶}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We can see we got a 404 response, but the output is from our &lt;code&gt;.then()&lt;/code&gt; callback. Fetch is designed in such a way that you would only hit the &lt;code&gt;.catch()&lt;/code&gt; callback is there was a network level error (such as a failed DNS lookup). The following example would actually go to the &lt;code&gt;.catch()&lt;/code&gt; callback:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrlHost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode12345.com/posts/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrlHost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;SUCCESS: &lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This time our console gives us:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode12345.com/posts/ net::ERR_TUNNEL_CONNECTION_FAILED
ERROR TypeError: Failed to fetch at &amp;lt;anonymous&amp;gt;:2:1
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is ok, but we still want to handle HTTP4XX or HTTP5XX errors gracefully&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#there-is-a-way-around-this"&gt;
  &lt;/a&gt;
  There is a way around this
&lt;/h3&gt;

&lt;p&gt;There are generally a couple of suggested "workarounds" for working with these kinds of requests. If you NEED to use the Fetch API, then the following kind of code construction would be better for you:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts1321654646186/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;I'm an error&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Response Data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the code above we are now throwing an exception because the response metadatas property for &lt;code&gt;ok&lt;/code&gt; was false.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode.com/posts1321654646186/ 404 (Not Found)
ERROR Error: I'm an error
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;From the metadata we could use either &lt;code&gt;.ok&lt;/code&gt; or &lt;code&gt;.status&lt;/code&gt; if we wanted to handle errors differently for HTTP4xx errors as opposed to HTTP5XX errors (for example), or we could use both for generic error handling, such as below:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;badUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;https://jsonplaceholder.typicode.com/posts1321654646186/&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;badUrl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ok&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;status&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; - &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;statusText&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;})&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;Response Data&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;ERROR&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we see the following error output:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Promise¬†{&amp;lt;pending&amp;gt;}
GET https://jsonplaceholder.typicode.com/posts1321654646186/ 404 (Not Found)
ERROR Error: 404 - Not Found
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;I mentioned that there were a couple of suggestions for workarounds, alternatives to the above would be using 3rd Party Libraries/Tools such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jQuery (&lt;a href="https://jquery.com"&gt;https://jquery.com&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Axios (&lt;a href="https://axios-http.com/docs/intro"&gt;https://axios-http.com/docs/intro&lt;/a&gt;) - This is my personal favourite and I use it in my own projects&lt;/li&gt;
&lt;li&gt;SuperAgent (&lt;a href="https://github.com/visionmedia/superagent"&gt;https://github.com/visionmedia/superagent&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You could also just use XMLHttpRequest which has long been baked into browsers as default functionality, information on that can be found on &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"&gt;MDN here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Creating markdown blog or docs generator with js (serverless).</title>
      <author>SHUBHAM </author>
      <pubDate>Wed, 15 Dec 2021 07:55:20 +0000</pubDate>
      <link>https://dev.to/shubham_ingale/creating-markdown-blog-or-docs-generator-with-js-serverless-2e6b</link>
      <guid>https://dev.to/shubham_ingale/creating-markdown-blog-or-docs-generator-with-js-serverless-2e6b</guid>
      <description>&lt;p&gt;Hey there everyone ,&lt;br&gt;
If you've created blog on dev.to , you're might be familiar with blog generator with md.&lt;br&gt;
I'll share how you can create that type of generator with only js.&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#libraries-to-use"&gt;
  &lt;/a&gt;
  libraries to use.
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://github.com/showdownjs/showdown"&gt;Showdown.js&lt;/a&gt; @showdownjs&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://sgi-capp-at2.github.io/"&gt;Markdown.css by sindresorhus&lt;/a&gt; @markdown-css&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;
  &lt;a href="#showdownjs"&gt;
  &lt;/a&gt;
  showdown.js
&lt;/h2&gt;

&lt;p&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hbOe4h0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/showdownjs/logo/master/dist/logo.readme.png" class="article-body-image-wrapper"&gt;&lt;img alt="showdownjs-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--hbOe4h0q--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/showdownjs/logo/master/dist/logo.readme.png" width="251" height="49"&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Showdownjs is a library which converts markdown code into HTML code.&lt;br&gt;
From&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight markdown"&gt;&lt;code&gt;&lt;span class="gh"&gt;# header&lt;/span&gt;
&lt;span class="gs"&gt;**Bold**&lt;/span&gt;
&lt;span class="ge"&gt;_italic_&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;header&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;bold&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;em&amp;gt;&lt;/span&gt;italic&lt;span class="nt"&gt;&amp;lt;/em&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#how-to-use-showdownjs"&gt;
  &lt;/a&gt;
  How to use showdown.js
&lt;/h3&gt;

&lt;p&gt;You should visit to &lt;a href="https://github.com/showdownjs/showdown"&gt;official docs&lt;/a&gt; for advanced level tools of library.&lt;br&gt;
I'll show you how you can convert the md into html with GitHub flavour of markdown.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;my_markdown_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;querySelector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;#mdinput&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;converter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;showdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;converted_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;converter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;makeHtml&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;my_markdown_input&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// converted_text will be variable having html code &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#markdown-css"&gt;
  &lt;/a&gt;
  Markdown css
&lt;/h2&gt;

&lt;p&gt;The style created by sindresorhus which looks like github markdown body.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-to-use-markdown-css-"&gt;
  &lt;/a&gt;
  How to use markdown css ?
&lt;/h3&gt;

&lt;p&gt;The markdown css by sindresorhus is very simple to use. You just have to add classname "markdown-body" and it will convert html into GitHub like markdown styled html.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"markdown-body"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://sgi-capp-at2.github.io/blogs/Creating%20markdown%20blog%20or%20docs%20generator%20with%20js%20(serverless)./#how-to-use-markdown-css-"&gt;..Read More&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>markdown</category>
      <category>html</category>
      <category>webdev</category>
    </item>
    <item>
      <title>GitHub Students Developer Pack: Get $10000+ benefits</title>
      <author>Nomadevüíªüî±</author>
      <pubDate>Wed, 15 Dec 2021 07:34:15 +0000</pubDate>
      <link>https://dev.to/thenomadevel/github-students-developer-pack-get-10000-benefits-2i84</link>
      <guid>https://dev.to/thenomadevel/github-students-developer-pack-get-10000-benefits-2i84</guid>
      <description>&lt;p&gt;Hello, techies  &lt;a href="https://twitter.com/thenomadevel"&gt;Nomadev &lt;/a&gt; here, back with another blog on tech. Today I will share what is possibly the best deal in tech, the  &lt;a href="https://education.github.com/pack"&gt;&lt;strong&gt;GitHub Student Developer Pack&lt;/strong&gt;&lt;/a&gt;. If you are wondering it's clickbait, the answer is a big no. GitHub Student Developer Pack is one of the most underrated and the most useful free developer pack of tools and resources a student can have. Before moving further first let's know about GitHub first.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-github"&gt;
  &lt;/a&gt;
  What is GitHub?
&lt;/h2&gt;

&lt;p&gt;It is a web-based version-control and collaboration platform for software developers. GitHub facilitates social coding by providing a web interface to the Git code repository and management tools for collaboration. GitHub is owned by &lt;strong&gt;Microsoft&lt;/strong&gt; and it is well known for being the best code hosting platform for version control and collaboration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#github-student-developer-pack"&gt;
  &lt;/a&gt;
  GitHub Student Developer Pack
&lt;/h2&gt;

&lt;p&gt;GitHub Student Developer Pack is a super collection of all the things you need to learn how to code. This is made for the student developers to help them to have hands-on experience in various technologies. As for most students, real-world tools can be cost-prohibitive. GitHub created Student Developer Pack with some of their partners to help students to learn to code effectively for &lt;strong&gt;free&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2tyy4RVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639552850180/_5p_LFPZWD.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2tyy4RVW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639552850180/_5p_LFPZWD.png" alt="gsdp.png" width="880" height="343"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-get-it"&gt;
  &lt;/a&gt;
  How to get it?
&lt;/h2&gt;

&lt;p&gt;You have to go to GitHub Education and select the Students section, there you will find an option named Get your Student Developer Pack.&lt;br&gt;
Or you can get there directly -  &lt;a href="https://education.github.com/pack"&gt;GitHub Student Developer Pack&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#requirements"&gt;
  &lt;/a&gt;
  Requirements
&lt;/h2&gt;

&lt;p&gt;To be eligible for the GitHub Student Developer Pack, you must:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be currently enrolled in a degree or diploma-granting course of studies such as a high school, secondary school, college, university, homeschool, or similar educational institution&lt;/li&gt;
&lt;li&gt;Have a verifiable school-issued email address or upload documents that prove your current student status&lt;/li&gt;
&lt;li&gt;Have a GitHub user account&lt;/li&gt;
&lt;li&gt;Be at least 13 years old&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;In most of the cases, they will only ask your student email id&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#whats-in-the-pack"&gt;
  &lt;/a&gt;
  What's in the pack?
&lt;/h2&gt;

&lt;p&gt;GitHub Student Developers Pack contains many real-world tools and numerous benefits. Here are some top offers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#canva"&gt;
  &lt;/a&gt;
  Canva
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FhNOk9_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639554822848/1iWwoPHed.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FhNOk9_8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639554822848/1iWwoPHed.png" alt="canva.png" width="300" height="168"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With Canva, anyone can create professional-looking graphics and designs. Featuring thousands of templates and an easy-to-use editor.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benefit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free 12 month subscription of Canva's Pro tier.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jetbrains"&gt;
  &lt;/a&gt;
  JETBRAINS
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---6WNWK0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559300103/k7pRLwlyX.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---6WNWK0H--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559300103/k7pRLwlyX.png" alt="jet.png" width="880" height="492"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;About JetBrains - &lt;/p&gt;

&lt;p&gt;Professional desktop IDEs: IntelliJ IDEA, PyCharm, and more.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A free subscription for students, to be renewed annually.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#microsoft-azure"&gt;
  &lt;/a&gt;
  Microsoft Azure
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AuZZQXCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559287643/Qq-IcKSgk.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AuZZQXCh--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559287643/Qq-IcKSgk.png" alt="azure.png" width="284" height="178"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Access to Microsoft Azure cloud services and learning resources ‚Äì no credit card required&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free access to 25+ Microsoft Azure cloud services plus $100 in Azure credit.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bootstrap-studio"&gt;
  &lt;/a&gt;
  Bootstrap Studio
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--7QfVZr4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559425415/Y2dvsWsyE.jpeg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--7QfVZr4z--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559425415/Y2dvsWsyE.jpeg" alt="boot.jfif" width="389" height="129"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bootstrap Studio is a powerful desktop app for creating responsive websites using the Bootstrap framework.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A free license for Bootstrap Studio while you are a student.&lt;br&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#digitalocean"&gt;
  &lt;/a&gt;
  DigitalOcean
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--DlJze93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559439674/rnqahzlx0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--DlJze93---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559439674/rnqahzlx0.png" alt="digi.png" width="323" height="156"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Simple cloud hosting, built for developers&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;$100 in platform credit for new users.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#github"&gt;
  &lt;/a&gt;
  GitHub
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--brLy1oR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559462347/0qyCG_tRrp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--brLy1oR2--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559462347/0qyCG_tRrp.png" alt="github.png" width="880" height="440"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Powerful collaboration, code review, and code management&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Benifit&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Free GitHub Pro while you are a student.&lt;/p&gt;



&lt;h3&gt;
  &lt;a href="#datacamp"&gt;
  &lt;/a&gt;
  DataCamp
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--f9nqRgVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559494167/iBXTW8QPs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--f9nqRgVt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1639559494167/iBXTW8QPs.png" alt="datacamp.png" width="367" height="137"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DataCamp helps companies and individuals make better use of data. Our users build data fluency while learning from the world‚Äôs top data scientists.&lt;/p&gt;

&lt;p&gt;Benefit&lt;/p&gt;

&lt;p&gt;Free 3-month individual subscription for students.&lt;/p&gt;




&lt;p&gt;and much more in the list, you can see explore them from here -  &lt;a href="https://education.github.com/pack"&gt;GitHub Education&lt;/a&gt; and get your real-time tools ready.&lt;/p&gt;

&lt;p&gt;I hope you liked it and for other such information make sure to follow me on  &lt;a href="https://twitter.com/thenomadevel"&gt;Twitter&lt;/a&gt; and here also.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/thenomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4oXBZZGL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1638859846607/CmXZ9RBvb.jpeg" alt="Twitter.jpg" width="880" height="418"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;And if you want to appreciate my work you can  &lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;buy me a coffee&lt;/a&gt;, &lt;strong&gt;Your appreciation is my motivation.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.buymeacoffee.com/nomadevel"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8Vno0upf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn.hashnode.com/res/hashnode/image/upload/v1637869195331/r4SfPP57h.jpeg" alt="coffee.jfif" width="880" height="441"&gt;&lt;/a&gt; &lt;/p&gt;

</description>
      <category>github</category>
      <category>javascript</category>
      <category>webdev</category>
      <category>beginners</category>
    </item>
  </channel>
</rss>
