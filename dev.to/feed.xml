<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Adding tests for my static site generator using Jest</title>
      <author>Tuan Thanh Tan</author>
      <pubDate>Fri, 12 Nov 2021 17:56:31 +0000</pubDate>
      <link>https://dev.to/tuanthanh2067/adding-tests-for-my-static-site-generator-using-jest-2gpc</link>
      <guid>https://dev.to/tuanthanh2067/adding-tests-for-my-static-site-generator-using-jest-2gpc</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Hello everyone, my name is Dustin. Today, I wanted to talk about testing in &lt;strong&gt;nodejs&lt;/strong&gt; project. This is literally one of my first time writing tests using Jest library. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#reason"&gt;
  &lt;/a&gt;
  Reason
&lt;/h2&gt;

&lt;p&gt;Testing is very important when it comes to a good project. Either your project is small or big, testing should always be important and be paid attention as no developers can cover every potential error or bug. When the project grows, more and more code will be added not only by you but other developers, it is very easy to break things. A new added function seems to work perfectly itself but bringing it to the project is another different story as it involves other factors and sometimes it will break other people's code. However, testing will take care of that as it will help developers fully run the project with every edge cases, and even good cases.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#experience"&gt;
  &lt;/a&gt;
  Experience
&lt;/h2&gt;

&lt;p&gt;At the beginning, I didn't think that it would take much of the time as it looks very simple and easy to write. But when I started write the very first one, I was like &lt;em&gt;what should I test with this code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Testing is not way too difficult but it has its own challenges. For example, writing a feature in nodejs just takes 15 mins and 30 lines of code, however, writing testings for that feature will take 2 to 3 times that amount, or more. Testing doesn't require much of researching but a lot of thinking to make sure that I've covered enough cases. More testings can be added later when I discover a case that can break your code. I haven't got a chance to finish my testing code but I'll try my best to add more testings for my project.&lt;/p&gt;

&lt;p&gt;As I have around 6 classes, so I'll have 5 to 6 testing files. There's a class that has 2 functions that call an external library, so I don't need to add testings for that class.&lt;/p&gt;

&lt;p&gt;However, there' still a few errors with my testing code as it generates some warnings while testing and I have not done with my e2e testing part. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-test"&gt;
  &lt;/a&gt;
  How to test
&lt;/h2&gt;

&lt;p&gt;Testing the project is easy and can be done by using &lt;code&gt;npm test&lt;/code&gt; to run all the tests, or &lt;code&gt;npm test e2e&lt;/code&gt; to just run end-to-end testing.  &lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/tuanthanh2067/cv-ssg"&gt;The project can be found here&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>testing</category>
      <category>beginners</category>
    </item>
    <item>
      <title>Flowbite - open source component library built with Tailwind CSS</title>
      <author>Zoltán Szőgyényi</author>
      <pubDate>Fri, 12 Nov 2021 17:50:35 +0000</pubDate>
      <link>https://dev.to/themesberg/show-dev-flowbite-open-source-component-library-built-with-tailwind-css-1070</link>
      <guid>https://dev.to/themesberg/show-dev-flowbite-open-source-component-library-built-with-tailwind-css-1070</guid>
      <description>&lt;p&gt;Hello DEV community 👋&lt;/p&gt;

&lt;p&gt;I just wanted to let you know that I helped build an &lt;a href="https://github.com/themesberg/flowbite"&gt;open source component library&lt;/a&gt; built with the utility classes from Tailwind CSS.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kfzn5mBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91gqecaupx5lgwbgmf5b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kfzn5mBl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/91gqecaupx5lgwbgmf5b.png" alt="Flowbite Github repository" width="880" height="472"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I believe that it's an important and useful project for those have been using Tailwind CSS as it can give you a pretty solid foundation when you want to build websites.&lt;/p&gt;

&lt;p&gt;I love the utility classes from Tailwind CSS, but the lack of components makes building websites a bit slower in some ways compared to Bootstrap or Bulma.&lt;/p&gt;

&lt;p&gt;With Flowbite you get the best of two worlds: flexibility of using the utility classes but also a set of components to quickly get started.&lt;/p&gt;

&lt;p&gt;The project is open source under the MIT license and you can &lt;a href="https://github.com/themesberg/flowbite"&gt;check it out on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you appreciate the project, a lucky star would be very welcome! 🤗&lt;/p&gt;

</description>
      <category>showdev</category>
      <category>opensource</category>
      <category>tailwindcss</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Tips to improve your django skills  - part 1 </title>
      <author>Snehal Adbol</author>
      <pubDate>Fri, 12 Nov 2021 17:40:05 +0000</pubDate>
      <link>https://dev.to/snehal_02/tips-to-improve-your-django-skills-part-1-25jp</link>
      <guid>https://dev.to/snehal_02/tips-to-improve-your-django-skills-part-1-25jp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#makemigrations-and-then-sqlmigrate"&gt;
  &lt;/a&gt;
  makemigrations and then sqlmigrate
&lt;/h2&gt;

&lt;p&gt;I only now discovered sqlmigrate and regret not having known about it    before. sqlmigrate prints the SQL for your migrations, so run a fast    sqlmigrate after creating a new migration. Very often, you will see    that this migration is not performing any SQL migrations; for    example, if you change a field, you will frequently get the following    sqlmigrate output:&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;BEGIN;  
--  
-- Alter field name on player  
--  
COMMIT;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;p&gt;I recommend giving it a shot if you want to learn more about Django migration. You'll quickly figure out which modifications have an impact on your database and which don't. As a consequence, learning SQL on the go is always a good idea.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#use-time-zone-and-stop-using-datetoday"&gt;
  &lt;/a&gt;
  Use time zone and stop using date.today()
&lt;/h2&gt;

&lt;p&gt;Most users don't worry about time zone at the start of a project, so they're content to use datetime.datetime.now() and datetime.date.today() . However, you may eventually encounter strange errors in which certain computations appear to be off by two hours or even a day.&lt;/p&gt;

&lt;p&gt;I know what it's like to attempt to correct all these errors by making all your thousands of now() and today() calls time zone aware, because I've had to do it twice for larger applications. You'll most likely have to do them one at a time, and you'll always run into difficulties where adding a time zone later is difficult.&lt;/p&gt;

&lt;p&gt;This is readily avoided by just using time zones all of the time. Especially because Django is so wonderful at supporting it. So, don't be frightened, and just support time zones, even if you believe you don't need them. Add the setting USE TZ = True and then always call django.utils.timezone.now() or django.utils.timezone.now().date.&lt;/p&gt;

&lt;p&gt;More information about Django's time zones can be found &lt;a href="https://docs.djangoproject.com/en/dev/topics/i18n/timezones/"&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#adding-forms-to-views-py"&gt;
  &lt;/a&gt;
  Adding forms to views. py
&lt;/h2&gt;

&lt;p&gt;It is advised that you put all of your forms in a separate &lt;code&gt;forms.py&lt;/code&gt; file, however since forms are merely a method of styling a view, it makes more sense to put each form at the top of its view. You will be working on the view and the form at the same time, so if your &lt;code&gt;models.py&lt;/code&gt; becomes too cluttered, you may transfer some of your models into a second model file. That's true, your models don't all have to be in the same file.&lt;/p&gt;

&lt;p&gt;This configuration enables you to work on both your form and your view at the same time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#closing-notes"&gt;
  &lt;/a&gt;
  Closing notes
&lt;/h2&gt;

&lt;p&gt;Thank you for spending the time to read my blog post! I hope these three tips have aided you in improving your Django work. Please let me know in the comments below whether you found these strategies useful or if you've discovered even better solutions, since I'm really interested in your feedback!&lt;/p&gt;

&lt;p&gt;follow me on &lt;a href="https://github.com/Snehal0203"&gt;github&lt;/a&gt; and &lt;a href="https://mobile.twitter.com/SnehalAdbol"&gt;twitter&lt;/a&gt;&lt;/p&gt;

</description>
      <category>django</category>
      <category>programming</category>
      <category>python</category>
      <category>beginners</category>
    </item>
    <item>
      <title>What exactly is IPFS?</title>
      <author>Enoch Chejieh</author>
      <pubDate>Fri, 12 Nov 2021 17:37:02 +0000</pubDate>
      <link>https://dev.to/ecj222/what-exactly-is-ipfs-3a8c</link>
      <guid>https://dev.to/ecj222/what-exactly-is-ipfs-3a8c</guid>
      <description>&lt;p&gt;InterPlanetary File System (IPFS) is a term used to describe a peer-to-peer (p2p) distributed file-sharing system for storing and accessing data.&lt;/p&gt;

&lt;p&gt;IPFS is one of a few projects that are part of the Protocol Labs Organization, which was also founded by Benet. Inter-Planetary Linked Data (IPLD) and Filecoin are two Protocol Labs projects that are closely related to IPFS. The IPLD data model is a data model for distributed data structures such as blockchains. This model makes it simple to store and access blockchain data via IPFS. Users who store data on IPFS will be rewarded with Filecoin.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#how-does-ipfs-work"&gt;
  &lt;/a&gt;
  How does IPFS work?
&lt;/h3&gt;

&lt;p&gt;Let's imagine you just uploaded some content to IPFS. That content will then be split up into small pieces of data, the data is then given a certain unique fingerprint called a cryptographic hash.&lt;/p&gt;

&lt;p&gt;When multiple people upload the same content to IPFS, it will only be created once and that makes the network very efficient.&lt;/p&gt;

&lt;p&gt;Also when you need to look up content to view or download on IPFS you don't need to remember the hash assigned to that content, every content on IPFS can be found using Inter-Planetary Naming System (IPNS), a human-readable decentralized naming system for IPFS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-use-ipfs"&gt;
  &lt;/a&gt;
  Why use IPFS?
&lt;/h3&gt;

&lt;p&gt;The internet as it is today is built on technologies like Hypertext Transfer Protocol (HTTP), Domain Name System (DNS), and the way it works is by looking up IP addresses and forwarding the content from the IP address, This is called location-based addressing.&lt;/p&gt;

&lt;p&gt;When a user searches for a website, let's say &lt;a href="http://amazon.com"&gt;amazon.com&lt;/a&gt; for instance the user is trusting that whatever is located at that server to be the content that they want and that could be a problem because theirs nothing stopping the content from changing without the user doing anything about it.&lt;/p&gt;

&lt;p&gt;Another problem is that when there's only one source of content it creates constriction and centralization. On the contrary, IPFS uses content-based addressing. So when a user is requesting a piece of data it retrieves the content and not the location of that content which is more efficient. This really makes the web a lot more robust and protected.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h3&gt;

&lt;p&gt;Software developers are currently moving to decentralized data networks as a way to build new models around data ownership and to develop a better internet.&lt;/p&gt;

&lt;p&gt;This article is just an introduction to IPFS, there's still a lot to know about this wonderful technology. If you want to know more you can check out their &lt;a href="https://ipfs.io/"&gt;website&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>web3</category>
      <category>beginners</category>
      <category>tutorial</category>
      <category>discuss</category>
    </item>
    <item>
      <title>How to Host Website on Google Drive</title>
      <author>Bhavyashah</author>
      <pubDate>Fri, 12 Nov 2021 17:32:34 +0000</pubDate>
      <link>https://dev.to/bhavyashah/how-to-host-website-on-google-drive-422j</link>
      <guid>https://dev.to/bhavyashah/how-to-host-website-on-google-drive-422j</guid>
      <description>&lt;p&gt;Today I am going to teach you how to host website on google drive with custom free domain with free SSL certificates .We all know that google drive is one of the most popular content storage system in web, where we can upload our documents with no hassle.&lt;/p&gt;


&lt;p&gt;&lt;span&gt;There are few steps that you have to follow that you have to apply before host a website on google drive:&lt;/span&gt;&lt;/p&gt;
&lt;span&gt;&lt;span&gt;1)&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;&lt;span&gt;First of all, you have to create a new folder and name the folder like your website name. In&lt;/span&gt;&lt;span&gt; my case, the website name is (&lt;/span&gt;&lt;b&gt;&lt;a href="https://www.gocodergo.tk"&gt;&lt;span&gt;&lt;a href="http://www.gocodergo.tk"&gt;www.gocodergo.tk&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;span&gt;). Now you have to create your HTML file and name your HTML file named as &lt;/span&gt;&lt;b&gt;index.html.&lt;/b&gt;&lt;span&gt; After you have made your HTML file, paste your file in your given folder and upload this folder in google drive, as you can see in the image&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://1.bp.blogspot.com/-nMknIWsMePU/YE8-jeLlnZI/AAAAAAAAAHs/wEWfsqevar0BZfjJDtlOf8fRduPOBsYlACLcBGAsYHQ/s765/1.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XNGjTiE0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-nMknIWsMePU/YE8-jeLlnZI/AAAAAAAAAHs/wEWfsqevar0BZfjJDtlOf8fRduPOBsYlACLcBGAsYHQ/s16000/1.jpg" width="765" height="424"&gt;&lt;/a&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;2) After you have uploaded your folder now to have to public your folder as we have listed below:&lt;/span&gt;&lt;span&gt;&lt;b&gt;Right-click&lt;/b&gt; on your folder you can see an option to &lt;b&gt;get a link. Click&lt;/b&gt; on the get link. You can see this type of interface as image shown below:&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://1.bp.blogspot.com/-ucp_RpKtVME/YE9AVUa5p4I/AAAAAAAAAH0/3schQDzicoMmDatkXdmMQj_ZBqUZsJLLwCLcBGAsYHQ/s973/2.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XhLZwgEF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ucp_RpKtVME/YE9AVUa5p4I/AAAAAAAAAH0/3schQDzicoMmDatkXdmMQj_ZBqUZsJLLwCLcBGAsYHQ/w640-h384/2.jpg" width="639" height="384"&gt;&lt;/a&gt;&lt;br&gt;&lt;span&gt;Here you have to select &lt;b&gt;anyone with this link. Now&lt;/b&gt; click on done. After that, your link will be publicly shown to anyone. &lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;3) Now you have to go to the website &lt;b&gt;&lt;a href="https://drv.tw/"&gt;&lt;span&gt;Drive to web&lt;/span&gt;&lt;/a&gt;&lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;Here on this website, you have to host your website using google drive here, click on the &lt;b&gt;host on google drive, &lt;/b&gt;and log in with the same account. You have to give permission after that, you have to click you will automatically redirect on servers account panel like in this image given below:&lt;/span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt; &lt;a href="https://1.bp.blogspot.com/-XekpD_dPcnI/YE9D2cVXQBI/AAAAAAAAAH8/0xS8uFmI3hkXmMkHVC4V3-CF6bOK20jwACLcBGAsYHQ/s1117/4.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AGAmPMZG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-XekpD_dPcnI/YE9D2cVXQBI/AAAAAAAAAH8/0xS8uFmI3hkXmMkHVC4V3-CF6bOK20jwACLcBGAsYHQ/w640-h480/4.jpg" width="640" height="480"&gt;&lt;/a&gt;&lt;br&gt;&lt;/b&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;span&gt;4) When you click on the link, it will host your site, but you can see that you do not have a custom domain as you can see this in the image: like &lt;b&gt;random-name/&lt;a href="http://www.your"&gt;www.your&lt;/a&gt; folder name. tk/&lt;/b&gt;&lt;/span&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;a href="https://1.bp.blogspot.com/-XlarMCZAJ_Y/YE9EoMCtyfI/AAAAAAAAAIE/fjY9sjiwrowV6FNFxRxLoJLDTRyYoZCTQCLcBGAsYHQ/s1077/5.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wfaTNLJn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-XlarMCZAJ_Y/YE9EoMCtyfI/AAAAAAAAAIE/fjY9sjiwrowV6FNFxRxLoJLDTRyYoZCTQCLcBGAsYHQ/w640-h150/5.jpg" width="640" height="150"&gt;&lt;/a&gt;&lt;br&gt;&lt;span&gt;5) As we can see that we have hosted your website, but now we can add the free custom domain name&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;First, you must register with &lt;u&gt;&lt;a href="https://www.freenom.com/en/index.html?lang=en"&gt;&lt;b&gt;&lt;span&gt;Freenom.com&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&lt;/u&gt; to get a .tk domain for free. This site also allows you to have other free domains such as .ml, .ck, etc.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;6) Now, you can find the domain as you want. In my case, the domain name was &lt;b&gt;&lt;a href="https://www.gocodergo.tk"&gt;&lt;span&gt;&lt;a href="http://www.gocodergo.tk"&gt;www.gocodergo.tk&lt;/a&gt;&lt;/span&gt;&lt;/a&gt;. As&lt;/b&gt; I have searched, this type of domain is available, so I will buy this domain for 1 year, as you can see in the image:&lt;/span&gt;&lt;br&gt;&lt;a href="https://1.bp.blogspot.com/-sGRH2YbD-hc/YE9IfSHz5BI/AAAAAAAAAIM/3d2lsfgSdFY2X7KvAwFBxlyxwrjLt7xrQCLcBGAsYHQ/s1711/12.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jyn4z-RE--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-sGRH2YbD-hc/YE9IfSHz5BI/AAAAAAAAAIM/3d2lsfgSdFY2X7KvAwFBxlyxwrjLt7xrQCLcBGAsYHQ/w640-h268/12.jpg" width="640" height="268"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;7) If you have bought your domain name, then you can see this type of typo interface &lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;a href="https://1.bp.blogspot.com/-LLLoODbmpks/YE9KYfLJM2I/AAAAAAAAAIU/aj5W05JjIOs6ZVRQlbsoriYeh_liSWCdwCLcBGAsYHQ/s1777/13.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--cdYtp8zD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-LLLoODbmpks/YE9KYfLJM2I/AAAAAAAAAIU/aj5W05JjIOs6ZVRQlbsoriYeh_liSWCdwCLcBGAsYHQ/w640-h96/13.jpg" width="640" height="96"&gt;&lt;/a&gt;&lt;br&gt;&lt;span&gt;8) Now, you can go to the manage DNS section and add the name as listed below:&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;how to add a name first of going to manage DNS and then select cname in the manage DNS section after that you have to fill &lt;b&gt;target&lt;/b&gt; &lt;b&gt;column of your link as given bold but your link you have to add &lt;/b&gt;&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;https://&lt;b&gt;lzfdfj8ryhtzcrap3bmxqq-on.drv.tw&lt;/b&gt;/&lt;a href="http://www.yourdomainname.domainlevel/"&gt;www.yourdomainname.domainlevel/&lt;/a&gt;&lt;/span&gt;&lt;br&gt;&lt;a href="https://1.bp.blogspot.com/-U1Ibfrg_ryc/YE9MJkl370I/AAAAAAAAAIc/pAHvsK086ZE1gutypbIC0f-SkDwrQq5RgCLcBGAsYHQ/s1894/16.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--K6XZ2pcO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-U1Ibfrg_ryc/YE9MJkl370I/AAAAAAAAAIc/pAHvsK086ZE1gutypbIC0f-SkDwrQq5RgCLcBGAsYHQ/w640-h218/16.jpg" width="640" height="217"&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;span&gt;9) Now, you have to wait for &lt;b&gt;half an hour to Update DNS, and then your website is hosted with the custom domain name. as you can see in my case in the image given below (&lt;a href="http://www.gocdergo.tk"&gt;www.gocdergo.tk&lt;/a&gt;)&lt;/b&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://1.bp.blogspot.com/-ySDMeyvvFbA/YFHNIRwaNaI/AAAAAAAAAJE/n0Z3JG7L8BIrM6ytov8cY1PNHup84nnKQCLcBGAsYHQ/s1321/18.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bY3a71LD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-ySDMeyvvFbA/YFHNIRwaNaI/AAAAAAAAAJE/n0Z3JG7L8BIrM6ytov8cY1PNHup84nnKQCLcBGAsYHQ/s16000/18.jpg" width="880" height="136"&gt;&lt;/a&gt;&lt;br&gt;


  &lt;b&gt;Read Also:&lt;/b&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href="https://www.blogtriggers.com/2021/03/host-a-website-in-infinityfree-hosting-for-free.html"&gt;Host website in infinity free hosting&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;




&lt;p&gt;&lt;span&gt;10) Now, you can see that your website is ready, but their problem is that the SSL certificate and your site are also not secure; for that, you have to use &lt;span&gt;&lt;a href="https://www.cloudflare.com"&gt;&lt;b&gt;Cloudflare&lt;/b&gt;&lt;/a&gt;.&lt;/span&gt; &lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;&lt;b&gt;Cloudflare can protect your website from DDoS attacks&lt;/b&gt;. And watch your website from all types of attacks. Now we use Cloudflare to protect our website and also for SSL certificates.&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;span&gt;First of all, signup for Cloudflare or account on Cloudflare, so log in. after signup or login, add your website domain name in Cloudflare. Now you have to set your DNS in your Cloudflare account. as shown in the given image&lt;/span&gt;&lt;a href="https://1.bp.blogspot.com/-6EwCnfetjI4/YFHOji-NwvI/AAAAAAAAAJM/ssuoJlJO-pwf86v64wnnN-vdsLwmsGrvgCLcBGAsYHQ/s811/19.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kJ63Pzzf--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-6EwCnfetjI4/YFHOji-NwvI/AAAAAAAAAJM/ssuoJlJO-pwf86v64wnnN-vdsLwmsGrvgCLcBGAsYHQ/s16000/19.jpg" width="811" height="355"&gt;&lt;/a&gt;&lt;span&gt;After adding your site now you have to checkout for a plan here in this, you can see &lt;b&gt;free plan &lt;/b&gt;at the bottom after that you have can see this image in the given below, and in this, you have to add a record with&lt;b&gt; text &lt;/b&gt;and write the &lt;b&gt;name www &lt;/b&gt;then you have to fill the content like the &lt;/span&gt;&lt;span&gt;URL&lt;/span&gt;&lt;span&gt;&lt;span&gt;https://&lt;/span&gt;&lt;b&gt;lzfdfj8ryhtzcrap3bmxqqon.drv.tw&lt;/b&gt;&lt;span&gt;/&lt;a href="http://www.gocodergo.tk/"&gt;www.gocodergo.tk/&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt; &lt;/span&gt;&lt;span&gt;of this part. Still, you have to write only this part of the URL name and then click continue.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;a href="https://1.bp.blogspot.com/-bnMhQAnjy_c/YFHPoxhhQmI/AAAAAAAAAJQ/CZ_UdvgwaIYu3Nvp4T3jnnfoEvRQCG6AwCLcBGAsYHQ/s1495/20.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UNc-JUSB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-bnMhQAnjy_c/YFHPoxhhQmI/AAAAAAAAAJQ/CZ_UdvgwaIYu3Nvp4T3jnnfoEvRQCG6AwCLcBGAsYHQ/s16000/20.jpg" width="880" height="403"&gt;&lt;/a&gt;&lt;span&gt;&lt;br&gt;&lt;span&gt;After that, you have to change the nameservers and replace your nameservers with Cloudflare 2 nameservers. &lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;After changing the nameservers, you have to wait for 24 hrs, and your site is ready to protect from &lt;b&gt;DDoS attacks. You&lt;/b&gt; have also seen your site have an &lt;b&gt;SSL certificate&lt;/b&gt; for one year after that, you have to renew both the SSL certificate also and the domain also as you can show in the below images:&lt;/span&gt;&lt;span&gt;&lt;br&gt;&lt;/span&gt;&lt;a href="https://1.bp.blogspot.com/-LezO8xJMUS4/YFH2TC-nNHI/AAAAAAAAAJc/EhXZYSCY2P0S8yr_0Ia6Hnvy40wzQGGmQCLcBGAsYHQ/s1032/Screenshot%2B2021-03-17%2B175935.jpg"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--V9ieQXOZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://1.bp.blogspot.com/-LezO8xJMUS4/YFH2TC-nNHI/AAAAAAAAAJc/EhXZYSCY2P0S8yr_0Ia6Hnvy40wzQGGmQCLcBGAsYHQ/s16000/Screenshot%252B2021-03-17%252B175935.jpg" width="880" height="220"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope you Like our Post on &lt;a href="https://www.blogtriggers.com/2021/03/how-to-host-website-in-google-drive.html"&gt;host website on google drive&lt;/a&gt;. If you Find Any Queries regarding Host website on google drive then comment us we will solve your all queries below.&lt;/p&gt;

</description>
      <category>hosting</category>
      <category>beginners</category>
      <category>webdev</category>
    </item>
    <item>
      <title>MVVM Design Pattern in iOS</title>
      <author>MKilmer</author>
      <pubDate>Fri, 12 Nov 2021 17:10:42 +0000</pubDate>
      <link>https://dev.to/mkilmer/mvvm-design-pattern-in-ios-5f9f</link>
      <guid>https://dev.to/mkilmer/mvvm-design-pattern-in-ios-5f9f</guid>
      <description>&lt;h1&gt;
  &lt;a href="#mvvm-modelviewmodel-model-"&gt;
  &lt;/a&gt;
  MVVM ( Model-ViewModel- Model )
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#you-can-ask-me-marcos-whats-mvvm-why-use-it-there-why-not-use-another"&gt;
  &lt;/a&gt;
  You can ask me : "Marcos, what's MVVM? Why use it there? Why not use another?"
&lt;/h2&gt;

&lt;p&gt;## Well, adopting a design pattern will depend on many things. Whether it's a business strategy, be size of what will be developed, testing requirements and so on. In this article, i will show some &lt;strong&gt;&lt;em&gt;concepts&lt;/em&gt;&lt;/strong&gt; about MVVM and a &lt;strong&gt;&lt;em&gt;code&lt;/em&gt;&lt;/strong&gt; demonstration.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#lets-go"&gt;
  &lt;/a&gt;
  Let's go!!!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/TLqkzhMIZxAQg/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/TLqkzhMIZxAQg/giphy.gif" alt="Alt Text" width="380" height="285"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#mvvm-flow"&gt;
  &lt;/a&gt;
  MVVM Flow
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;ViewController / View will have a reference to the ViewModel&lt;/li&gt;
&lt;li&gt;ViewController / View get some &lt;strong&gt;&lt;em&gt;user action&lt;/em&gt;&lt;/strong&gt; and will call &lt;strong&gt;&lt;em&gt;ViewModel&lt;/em&gt;&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;ViewModel request some API Service and API Service will sends a response to ViewModel&lt;/li&gt;
&lt;li&gt;ViewModel will notifies the ViewController / View with binding&lt;/li&gt;
&lt;li&gt;The ViewController / View will update the UI with data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BR1IPrXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34096743/141125060-b219cac2-0295-421f-bcb7-cbea1aff449e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BR1IPrXA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://user-images.githubusercontent.com/34096743/141125060-b219cac2-0295-421f-bcb7-cbea1aff449e.png" alt="1_8MiNUZRqM1XDtjtifxTSqA" width="820" height="238"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;h2&gt;
  &lt;a href="#project-informations"&gt;
  &lt;/a&gt;
  Project Informations
&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Use &lt;strong&gt;&lt;em&gt;jsonplaceholder&lt;/em&gt;&lt;/strong&gt; REST API&lt;/li&gt;
&lt;li&gt;URLSession to fetch data&lt;/li&gt;
&lt;li&gt;The table view will show data from service &lt;/li&gt;
&lt;/ol&gt;




&lt;h1&gt;
  &lt;a href="#mvvm-modelviewmodel-model-"&gt;
  &lt;/a&gt;
  MVVM ( Model-ViewModel- Model )
&lt;/h1&gt;

&lt;h2&gt;
  &lt;a href="#m-model-represents-data-just-it-holds-the-data-and-has-nothing-and-dont-have-business-logic"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;M&lt;/em&gt;&lt;/strong&gt; ( Model ) : Represents data. &lt;strong&gt;&lt;em&gt;JUST&lt;/em&gt;&lt;/strong&gt; it. Holds the data and has &lt;strong&gt;&lt;em&gt;nothing&lt;/em&gt;&lt;/strong&gt; and don't have business logic.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Decodable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;userId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
  &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#v-view-represents-the-ui-in-the-view-we-have-user-actions-that-will-call-view-model-to-call-api-service-after-it-the-data-will-through-to-view-view-model-is-responsible-to-do-it-and-shows-informations-in-the-screen"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;V&lt;/em&gt;&lt;/strong&gt; ( View ) : Represents the &lt;strong&gt;&lt;em&gt;UI&lt;/em&gt;&lt;/strong&gt;. In the view, we have &lt;strong&gt;&lt;em&gt;User Actions&lt;/em&gt;&lt;/strong&gt; that will call view model to call api service. After it, the data will through to view ( view model is responsible to do it ) and shows informations in the screen.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PostViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIViewController&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;postViewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PostViewModel&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;postDataSource&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewDataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;PostTableViewCell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;postDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewDelegate&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;postTableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;tableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tableView&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;viewDidLoad&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;setupViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;setupConstraints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;updateUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;setupViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;PostTableViewCell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;forCellReuseIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewCell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cellIdentifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;setupConstraints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widthAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heightAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;centerXAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;centerXAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;centerYAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;centerYAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;updateUI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;postViewModel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;PostViewModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;postDelegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewDelegate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;postViewModel&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bindPostViewModelToController&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;weak&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;updateDataSource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;updateDataSource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;postViewModel&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;postDataSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewDataSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cellIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewCell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cellIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;configureCell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configureCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="kt"&gt;DispatchQueue&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;async&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postDelegate&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dataSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postDataSource&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postTableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reloadData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;PostTableViewCell&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewCell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableViewCell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;cellIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"PostTableViewCellIdentifier"&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;titleLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UILabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UILabel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numberOfLines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineBreakMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;byWordWrapping&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIFont&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;boldSystemFont&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ofSize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bodyLabel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UILabel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UILabel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;numberOfLines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lineBreakMode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;byWordWrapping&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;
        &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;postStackView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UIStackView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;stackView&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;UIStackView&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;stackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vertical&lt;/span&gt;
        &lt;span class="n"&gt;stackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spacing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
        &lt;span class="n"&gt;stackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distribution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;
        &lt;span class="n"&gt;stackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translatesAutoresizingMaskIntoConstraints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;stackView&lt;/span&gt;
    &lt;span class="p"&gt;}()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableViewCell&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;CellStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;reuseIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;reuseIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reuseIdentifier&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setupViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nf"&gt;setupConstraints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;required&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;?(&lt;/span&gt;&lt;span class="n"&gt;coder&lt;/span&gt; &lt;span class="nv"&gt;aDecoder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSCoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;coder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aDecoder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;prepareForReuse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;prepareForReuse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;titleLabel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
        &lt;span class="n"&gt;bodyLabel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;configureCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;post&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;titleLabel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
        &lt;span class="n"&gt;bodyLabel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;setupViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;contentView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;postStackView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;postStackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addArrangedSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;titleLabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;postStackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addArrangedSubview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bodyLabel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;setupConstraints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;NSLayoutConstraint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
            &lt;span class="n"&gt;postStackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contentView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;leadingAnchor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postStackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contentView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;trailingAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postStackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contentView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;topAnchor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;postStackView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomAnchor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constraint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;contentView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bottomAnchor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;PostTableViewDataSource&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewDataSource&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;CELL&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableViewCell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UITableViewDataSource&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;cellIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;configureCell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CELL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cellIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;configureCell&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;CELL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cellIdentifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cellIdentifier&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configureCell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;configureCell&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfRowsInSection&lt;/span&gt; &lt;span class="nv"&gt;section&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cellForRowAt&lt;/span&gt; &lt;span class="nv"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;UITableViewCell&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;cell&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tableView&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dequeueReusableCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;withIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cellIdentifier&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as?&lt;/span&gt; &lt;span class="kt"&gt;CELL&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;indexPath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configureCell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cell&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cell&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kt"&gt;UITableViewCell&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;PostTableViewDelegate&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PostTableViewDelegate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;UITableViewDelegate&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;tableView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;UITableView&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heightForRowAt&lt;/span&gt; &lt;span class="nv"&gt;indexPath&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;IndexPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;CGFloat&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mf"&gt;300.0&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#vm-viewmodel-responsible-to-call-service-class-to-fetch-data-from-the-serverthe-viewmodel-dont-know-what-the-views-and-what-thew-view-does"&gt;
  &lt;/a&gt;
  &lt;strong&gt;&lt;em&gt;VM&lt;/em&gt;&lt;/strong&gt; ( ViewModel ) : Responsible to call service class to fetch data from the server.The ViewModel don't know what the views and what thew view does.
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PostViewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;NSObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;postService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;PostService&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Array&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;didSet&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bindPostToViewController&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;postService&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;PostService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;callGetPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="nv"&gt;bindPostToViewController&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;callGetPosts&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;postService&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apiToGetPosts&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;strong&gt;&lt;em&gt;posts is a property observer, so when we have API response, we will populate posts variable and call bindPostToViewController. Once we have data from view model, we can update the UI. bindPostToViewController will tell us when the response is already.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;PostService&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight swift"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;PostService&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;postsPath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"https://jsonplaceholder.typicode.com/posts"&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;func&lt;/span&gt; &lt;span class="nf"&gt;apiToGetPosts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;@escaping&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;]?,&lt;/span&gt; &lt;span class="kt"&gt;Error&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;postsPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kt"&gt;URLSession&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shared&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dataTask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;guard&lt;/span&gt; &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;dataReceive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;posts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="kt"&gt;JSONDecoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kt"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="k"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dataReceive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nf"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;posts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;completion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resume&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;






&lt;h2&gt;
  &lt;a href="#thanks-for-all-metal"&gt;
  &lt;/a&gt;
  Thanks for all! 🤘
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;I hope that i help you. Any question, please, tell me in comments&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/mkilmerr/MVVM"&gt;Github Project&lt;/a&gt;&lt;/p&gt;

</description>
      <category>swift</category>
      <category>mvvm</category>
      <category>pattern</category>
      <category>ios</category>
    </item>
    <item>
      <title>proxy with wget </title>
      <author>karenpanahi</author>
      <pubDate>Fri, 12 Nov 2021 17:09:20 +0000</pubDate>
      <link>https://dev.to/karenpanahi/proxy-with-wget-1nnk</link>
      <guid>https://dev.to/karenpanahi/proxy-with-wget-1nnk</guid>
      <description>&lt;p&gt;&lt;a href="https://askubuntu.com/questions/346649/how-do-i-force-wget-to-use-a-proxy-server-without-modifying-system-files"&gt;https://askubuntu.com/questions/346649/how-do-i-force-wget-to-use-a-proxy-server-without-modifying-system-files&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.thegeekdiary.com/how-to-use-wget-to-download-file-via-proxy/"&gt;https://www.thegeekdiary.com/how-to-use-wget-to-download-file-via-proxy/&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#follow"&gt;
  &lt;/a&gt;
  follow:
&lt;/h3&gt;

&lt;p&gt;Without modifying your system files at /etc/wgetrc you could create a file at your home directory ~/.wgetrc. It will enable you to modify wget settings locally at user level. Now write the following at ~/.wgetrc to use wget behind a proxy server:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;use_proxy = on
http_proxy =  http://username:password@proxy.server.address:port/
https_proxy =  http://username:password@proxy.server.address:port/
ftp_proxy =  http://username:password@proxy.server.address:port/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you do not have proxy username and password just write the proxy-address and port everywhere like,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;http_proxy =  http://proxy.server.address:port/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;example :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;export http_proxy=http://110.232.67.44:55443/
export https_proxy=http://110.232.67.44:55443/
export ftp_proxy=http://110.232.67.44:55443/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;for checking the environement variables you can do :&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;env | grep proxy 

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This should work. I am assuming you already have proxy settings for all other applications.&lt;/p&gt;

</description>
    </item>
    <item>
      <title>How do you like to learn a new language?</title>
      <author>Brett Martin</author>
      <pubDate>Fri, 12 Nov 2021 17:07:00 +0000</pubDate>
      <link>https://dev.to/bamartindev/how-do-you-like-to-learn-a-new-language-8n</link>
      <guid>https://dev.to/bamartindev/how-do-you-like-to-learn-a-new-language-8n</guid>
      <description>&lt;p&gt;I have noticed there are a couple of different approaches to teaching a new language through online courses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;"Traditional"&lt;/strong&gt; - each section covers a language feature with some small exercises at the end, similar in flow to college courses.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Small Focused Projects&lt;/strong&gt; - learn a language feature with a small, focused project that highlights that feature.  Each project is small, and distinct.&lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;Large project&lt;/strong&gt; - Learn the language by building a large project that incorporates and highlights features throughout.  At the end, you will have something closer to a "real world" application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do you prefer and why?  If I missed a type that you prefer let me know in the comments!&lt;/p&gt;

</description>
      <category>discuss</category>
      <category>programming</category>
      <category>writing</category>
    </item>
    <item>
      <title>Quickstart template with CI for React project</title>
      <author>Timo</author>
      <pubDate>Fri, 12 Nov 2021 16:59:48 +0000</pubDate>
      <link>https://dev.to/tim012432/quickstart-template-with-ci-for-react-project-1nde</link>
      <guid>https://dev.to/tim012432/quickstart-template-with-ci-for-react-project-1nde</guid>
      <description>&lt;h3&gt;
  &lt;a href="#my-workflow"&gt;
  &lt;/a&gt;
  My Workflow
&lt;/h3&gt;

&lt;p&gt;I created a &lt;a href="https://github.com/tim0-12432/react-ci-template"&gt;template project&lt;/a&gt; for using the GitHub workflow with a example React project.&lt;br&gt;
The workflow itself is inside the repository: &lt;a href="https://github.com/tim0-12432/react-ci-template/blob/main/.github/workflows/production.yml"&gt;production.yml&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#input"&gt;
  &lt;/a&gt;
  Input:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;pull-request on main branch&lt;/li&gt;
&lt;li&gt;manual dispatch&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;
  &lt;a href="#output"&gt;
  &lt;/a&gt;
  Output:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;1.0.0-information.zip containing coverage and license report&lt;/li&gt;
&lt;li&gt;deploys build files directly on GitHub Pages&lt;/li&gt;
&lt;li&gt;creates a tag and a release and pushes the build files to the release&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;
  &lt;a href="#submission-category"&gt;
  &lt;/a&gt;
  Submission Category:
&lt;/h3&gt;

&lt;p&gt;DIY Deployments&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#yaml-file-or-link-to-code"&gt;
  &lt;/a&gt;
  Yaml File or Link to Code
&lt;/h3&gt;


&lt;div class="ltag-github-readme-tag"&gt;
  &lt;div class="readme-overview"&gt;
    &lt;h2&gt;
      &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--i3JOwpme--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg" alt="GitHub logo"&gt;
      &lt;a href="https://github.com/tim0-12432"&gt;
        tim0-12432
      &lt;/a&gt; / &lt;a href="https://github.com/tim0-12432/react-ci-template"&gt;
        react-ci-template
      &lt;/a&gt;
    &lt;/h2&gt;
    &lt;h3&gt;
      A template for react projects with includes linting and github actions workflow.
    &lt;/h3&gt;
  &lt;/div&gt;
  &lt;div class="ltag-github-body"&gt;
    
&lt;div id="readme" class="md"&gt;
&lt;h1&gt;
CReactApp Template with CI&lt;/h1&gt;
&lt;p&gt;This project was bootstrapped with &lt;a href="https://github.com/facebook/create-react-app"&gt;Create React App&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/tim0-12432/react-ci-template/actions/workflows/production.yml"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--TOiAoUYH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://github.com/tim0-12432/react-ci-template/actions/workflows/production.yml/badge.svg" alt="Production"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
Usage&lt;/h2&gt;
&lt;p&gt;To change the content of the page, just change the files in the public and src directories.&lt;/p&gt;
&lt;h2&gt;
Available Scripts&lt;/h2&gt;
&lt;p&gt;In the project directory, you can run:&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm start&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Runs the app in the development mode on &lt;a href="http://localhost:3000" rel="nofollow"&gt;http://localhost:3000&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm test&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run build&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run eject&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Note: this is a one-way operation. Once you &lt;code&gt;eject&lt;/code&gt;, you can’t go back!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you aren’t satisfied with the build tool and configuration choices, you can &lt;code&gt;eject&lt;/code&gt; at any time. This command will remove the single build dependency from your project.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run ci:test&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;CI: Runs the test runner in the continuous integration mode.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run ci:licenses&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;CI: Generates the license report as a csv-file.&lt;/p&gt;
&lt;h3&gt;
&lt;code&gt;npm run lint:es&lt;/code&gt;
&lt;/h3&gt;
&lt;p&gt;CI: Runs the…&lt;/p&gt;
&lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="gh-btn-container"&gt;&lt;a class="gh-btn" href="https://github.com/tim0-12432/react-ci-template"&gt;View on GitHub&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/tim0-12432/react-ci-template/blob/main/README.md"&gt;README&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tim0-12432/react-ci-template/blob/main/.github/workflows/production.yml"&gt;WORKFLOW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://github.com/tim0-12432/react-ci-template/blob/main/LICENSE.md"&gt;LICENSE&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;Production&lt;/span&gt;

&lt;span class="na"&gt;on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;workflow_dispatch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;pull_request&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;branches&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;main&lt;/span&gt;

&lt;span class="na"&gt;jobs&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;Linting_and_tests&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;strategy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;matrix&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;node&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;14.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;15.x&lt;/span&gt;&lt;span class="pi"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;16.x&lt;/span&gt;&lt;span class="pi"&gt;]&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;install node&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ matrix.node }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get version&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;package-version&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;martinbeentjes/npm-get-version-action@master&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;install dependencies&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
          &lt;span class="s"&gt;npm install&lt;/span&gt;
          &lt;span class="s"&gt;npm install -g license-report&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;eslint&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run lint:es&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;stylelint&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run lint:style&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;run tests&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run ci:test&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;licenses&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run ci:licenses&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;upload artifacts&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/upload-artifact@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.package-version.outputs.current-version }}-information&lt;/span&gt;
          &lt;span class="na"&gt;path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="pi"&gt;|&lt;/span&gt;
            &lt;span class="s"&gt;coverage/&lt;/span&gt;
            &lt;span class="s"&gt;licenses.csv&lt;/span&gt;
          &lt;span class="na"&gt;if-no-files-found&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;error&lt;/span&gt;

  &lt;span class="na"&gt;Build_and_deploy&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;runs-on&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ubuntu-latest&lt;/span&gt;

    &lt;span class="na"&gt;steps&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;git checkout&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/checkout@v2&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;install node&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/setup-node@v2&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;node-version&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;16.x&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;get version&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;package-version&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;martinbeentjes/npm-get-version-action@master&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;install dependencies&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm install&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;
        &lt;span class="na"&gt;run&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;npm run build&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;zip build files&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;montudor/action-zip@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;args&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;zip -qq -r build.zip build&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;deploy&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;JamesIves/github-pages-deploy-action@4.1.1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;branch&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;built-page&lt;/span&gt;
          &lt;span class="na"&gt;folder&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;release&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;avakar/tag-and-release@v1&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;tag_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v${{ steps.package-version.outputs.current-version }}&lt;/span&gt;
          &lt;span class="na"&gt;release_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v${{ steps.package-version.outputs.current-version }}&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;release&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;

      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;upload binaries to release&lt;/span&gt;
        &lt;span class="na"&gt;uses&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;actions/upload-release-asset@v1&lt;/span&gt;
        &lt;span class="na"&gt;env&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
        &lt;span class="na"&gt;with&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
          &lt;span class="na"&gt;asset_path&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;build.zip&lt;/span&gt;
          &lt;span class="na"&gt;asset_name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;built-page-ready-to-deploy-v${{ steps.package-version.outputs.current-version }}.zip&lt;/span&gt;
          &lt;span class="na"&gt;asset_content_type&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;application/zip&lt;/span&gt;
          &lt;span class="na"&gt;upload_url&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;${{ steps.release.outputs.upload_url }}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;

&lt;h3&gt;
  &lt;a href="#additional-resources-info"&gt;
  &lt;/a&gt;
  Additional Resources / Info
&lt;/h3&gt;

&lt;p&gt;So what actions did I use in my workflow and what do the different steps in my yaml file?&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#linting-and-tests"&gt;
  &lt;/a&gt;
  Linting and tests
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;actions/checkout@v2&lt;/code&gt;: checks out the current branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;actions/setup-node@v2&lt;/code&gt;: installs few versions of NodeJS&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;martinbeentjes/npm-get-version-action&lt;/code&gt;: gets the current version of the package&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm install&lt;/code&gt;: install the dependencies used by the package&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run lint:es&lt;/code&gt;: runs linter for JS-files&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run lint:style&lt;/code&gt;: runs linter for stylesheets&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run ci:test&lt;/code&gt;: runs tests&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run ci:licenses&lt;/code&gt;: gets the licenses from used packages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;actions/upload-artifact@v2&lt;/code&gt;: uploads the generated reports as an artifact&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;
  &lt;a href="#build-and-deploy"&gt;
  &lt;/a&gt;
  Build and deploy
&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;actions/checkout@v2&lt;/code&gt;: checks out the current branch&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;actions/setup-node@v2&lt;/code&gt;: installs NodeJS 16&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;martinbeentjes/npm-get-version-action&lt;/code&gt;: gets the current version of the package&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm install&lt;/code&gt;: install the dependencies used by the package&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;npm run build&lt;/code&gt;: builds the app for production&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;montudor/action-zip@v1&lt;/code&gt;: zips the build folder&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;JamesIves/github-pages-deploy-action@4.1.1&lt;/code&gt;: deploys the build to GitHub Pages&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;avakar/tag-and-release@v1&lt;/code&gt;: creates a tag and release&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;actions/upload-release-asset@v1&lt;/code&gt;: uploads the build files to the release&lt;/li&gt;
&lt;/ol&gt;




&lt;div class="ltag__user ltag__user__id__687996"&gt;
  
    .ltag__user__id__687996 .follow-action-button {
      background-color: #000000 !important;
      color: #b8ffff !important;
      border-color: #000000 !important;
    }
  
    &lt;a href="/tim012432" class="ltag__user__link profile-image-link"&gt;
      &lt;div class="ltag__user__pic"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0Ake6opS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--lQav2NML--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_66%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/687996/f03824c3-d17a-40ee-a254-067f298f4466.gif" alt="tim012432 image"&gt;
      &lt;/div&gt;
    &lt;/a&gt;
  &lt;div class="ltag__user__content"&gt;
    &lt;h2&gt;
&lt;a class="ltag__user__link" href="/tim012432"&gt;Timo&lt;/a&gt;Follow
&lt;/h2&gt;
    &lt;div class="ltag__user__summary"&gt;
      &lt;a class="ltag__user__link" href="/tim012432"&gt;&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;Created with ❤️ by &lt;a href="https://hashnode.com/@tim012432"&gt;Timo&lt;/a&gt;&lt;/p&gt;

</description>
      <category>actionshackathon21</category>
    </item>
    <item>
      <title>How To Protect Next.js Apps with Jscrambler</title>
      <author>Jscrambler</author>
      <pubDate>Fri, 12 Nov 2021 16:52:55 +0000</pubDate>
      <link>https://dev.to/jscrambler/how-to-protect-nextjs-apps-with-jscrambler-6ih</link>
      <guid>https://dev.to/jscrambler/how-to-protect-nextjs-apps-with-jscrambler-6ih</guid>
      <description>&lt;p&gt;Next.js is an open-source React-based framework built on top of Node.js that is aimed at developing web apps. It includes handy features such as hybrid static &amp;amp; server rendering, TypeScript support, smart bundling, and route pre-fetching.&lt;/p&gt;

&lt;p&gt;In the 2020 &lt;a href="https://2020.stateofjs.com/en-US/technologies/back-end-frameworks/"&gt;State of JavaScript&lt;/a&gt; survey, Next.js was the second most used back-end framework (behind Express) but claimed the top spot when it came to satisfaction, with 92% of its users stating they are satisfied with the framework.&lt;/p&gt;

&lt;p&gt;In this article, we’ll look at how you can integrate &lt;a href="https://jscrambler.com/?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=next-js"&gt;Jscrambler&lt;/a&gt; into your Next.js app development workflow. This will enable you to protect your JavaScript source code, through a combination of advanced obfuscation, code locks, anti-tampering, and anti-debugging.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#prerequisites"&gt;
  &lt;/a&gt;
  Pre-Requisites
&lt;/h2&gt;

&lt;p&gt;In order to properly integrate Jscrambler into your Next.js build process, there are two things we need to do first: &lt;strong&gt;creating a Next.js app&lt;/strong&gt; and &lt;strong&gt;configuring Jscrambler&lt;/strong&gt;. Let's go through those steps.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-your-nextjs-application"&gt;
  &lt;/a&gt;
  Creating Your Next.js Application
&lt;/h3&gt;

&lt;p&gt;If you are not very experienced with Next.js yet, feel free to check their "&lt;a href="https://nextjs.org/learn/basics/create-nextjs-app"&gt;Create a Next.js App&lt;/a&gt;” tutorial before moving forward. We will actually be using this example app in our integration tutorial, so let’s install it:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/JscramblerBlog/nextjs-jscrambler-integration-tutorial.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now, let's install all app dependencies using npm:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;nextjs-jscrambler-integration-tutorial
npm i
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The (simplified) base project structure of our &lt;em&gt;Next.js&lt;/em&gt; application is as follows:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;nextjs-jscrambler-integration-tutorial/
|-- package-lock.json
|-- package.json
|-- README.md
|-- .next
| |-- static/
| | |-- chunks/
| | | |-- pages/
|-- node_modules/
|-- pages/
|-- public/
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; contains all the configurations which are related to npm such as dependencies, version, and scripts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;pages&lt;/code&gt; directory features all the source code of the application. The sources are then built and packed into the &lt;code&gt;.next/static/&lt;/code&gt; directory. This is where our protected HTML and JavaScript files will be placed after the build.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;public&lt;/code&gt; directory contains all publicly accessible files, such as images.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can easily run a development server just to make sure that the app is running properly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight shell"&gt;&lt;code&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get an URL in the console with the development server and, after opening it, you should see the app running as shown below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B5MuUcpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.jscrambler.com/content/images/2021/09/jscrambler-blog-initial-next-js.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B5MuUcpR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.jscrambler.com/content/images/2021/09/jscrambler-blog-initial-next-js.png" alt="jscrambler-blog-initial-next-js" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And this is pretty much it in terms of our Next.js app. Let's move forward to protecting it with Jscrambler.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#configuring-jscrambler"&gt;
  &lt;/a&gt;
  Configuring Jscrambler
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;If you haven't created a &lt;a href="https://jscrambler.com/signup?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=next-js"&gt;Jscrambler account&lt;/a&gt; yet, be sure to do so before moving forward.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;All of Jscrambler's configuration will reside inside a single file: &lt;code&gt;.jscramblerrc&lt;/code&gt;. As such, we will need to create this file to specify which transformations we wish to use.&lt;/p&gt;

&lt;p&gt;The quickest way to achieve this is via the &lt;a href="https://app.jscrambler.com/dashboard?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=next-js"&gt;Jscrambler Web App&lt;/a&gt;. Once there, create a new app. Now, check the &lt;em&gt;Templates&lt;/em&gt; and &lt;em&gt;Fine-Tuning&lt;/em&gt; tabs to select the template or transformations you want to use to protect your code. In this tutorial, we'll be selecting the &lt;em&gt;Obfuscation&lt;/em&gt; template. If you need help with these steps, please refer to our &lt;a href="https://blog.jscrambler.com/jscrambler-101-how-to-use-the-cli/"&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, we simply have to download a &lt;strong&gt;JSON file with all this configuration&lt;/strong&gt;, which will be used only for quickly getting the required settings.&lt;/p&gt;


&lt;center&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dyVqwibD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://blog.jscrambler.com/content/images/2021/02/jscrambler-app-download-JSON-4.gif" alt="Download Jscrambler JSON" width="287" height="358"&gt;&lt;/center&gt;

&lt;p&gt;Now, let's create a new file named &lt;code&gt;.jscramblerrc&lt;/code&gt; on the Next.js project’s root folder. Open the &lt;code&gt;jscrambler.json&lt;/code&gt; file we just downloaded and copy all its contents to the &lt;code&gt;.jscramblerrc&lt;/code&gt; file. After that, we just have to add two new sections to &lt;code&gt;.jscramblerrc&lt;/code&gt;, which are &lt;code&gt;filesSrc&lt;/code&gt; and &lt;code&gt;filesDest&lt;/code&gt; (see below). Your final &lt;code&gt;.jscramblerrc&lt;/code&gt; file should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight json"&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"accessKey"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;ACCESS_KEY_HERE&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="nl"&gt;"secretKey"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;SECRET_KEY_HERE&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"applicationId"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;lt;APP_ID_HERE&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"filesSrc"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="s2"&gt;"./.next/**/*.html"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
   &lt;/span&gt;&lt;span class="s2"&gt;"./.next/**/*.js"&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
 &lt;/span&gt;&lt;span class="nl"&gt;"filesDest"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"./"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nl"&gt;"params"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"objectPropertiesSparsing"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"variableMasking"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"whitespaceRemoval"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"identifiersRenaming"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"mode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"SAFEST"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"globalVariableIndirection"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"dotToBracketNotation"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"stringConcealing"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"functionReordering"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"freq"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"features"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"opaqueFunctions"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"functionOutlining"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"propertyKeysObfuscation"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"options"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="nl"&gt;"encoding"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="w"&gt;
          &lt;/span&gt;&lt;span class="s2"&gt;"hexadecimal"&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"regexObfuscation"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="nl"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"booleanToAnything"&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"areSubscribersOrdered"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useRecommendedOrder"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"jscramblerVersion"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;7.X&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"tolerateMinification"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"profilingDataMode"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"off"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"useAppClassification"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nl"&gt;"browsers"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Because we got this information directly via the Jscrambler Web App, our &lt;code&gt;accessKey&lt;/code&gt;, &lt;code&gt;secretKey&lt;/code&gt; and &lt;code&gt;applicationId&lt;/code&gt; fields are already filled. If you wish to retrieve them manually, refer to our &lt;a href="https://blog.jscrambler.com/jscrambler-101-first-use/"&gt;guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It's important to note that the &lt;code&gt;params&lt;/code&gt; section specifies the transformations that will be used to protect your Next.js app. &lt;strong&gt;These can be hand-picked by you&lt;/strong&gt;, by selecting them in the Web App or setting them manually. You can find documentation on all the available transformations &lt;a href="https://docs.jscrambler.com/code-integrity/documentation/transformations?utm_source=blog.jscrambler.com&amp;amp;utm_medium=referral&amp;amp;utm_campaign=protect-nextjs"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also change &lt;code&gt;filesSrc&lt;/code&gt; to match the files you need/want to protect. For our example—and all Next.js apps—we recommend protecting the &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.js&lt;/code&gt; files. Certainly, with a better understanding of the project, you may identify what’s critical and essential protecting.&lt;/p&gt;

&lt;p&gt;By using &lt;code&gt;filesDest: './'&lt;/code&gt;, the files we send to protect will be overwritten by their protected version.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#integrating-jscrambler-in-the-build-process"&gt;
  &lt;/a&gt;
  Integrating Jscrambler in the Build Process
&lt;/h2&gt;

&lt;p&gt;Using the CLI is likely the most common way of generating your build. We will use our boilerplate app to showcase how to integrate Jscrambler into the build process.&lt;/p&gt;

&lt;p&gt;The first step of our integration with &lt;em&gt;Jscrambler&lt;/em&gt; is installing the &lt;a href="https://github.com/jscrambler/jscrambler/tree/master/packages/jscrambler-cli"&gt;Jscrambler API Client&lt;/a&gt;. Simply run:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm i jscrambler --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;To integrate Jscrambler in our application's build process via the CLI, we need to create a CLI hook in the &lt;em&gt;scripts&lt;/em&gt; section of &lt;code&gt;package.json&lt;/code&gt;. The section should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  "scripts": {
    "dev": "next dev",
    "build": "next build &amp;amp;&amp;amp; jscrambler",
    "start": "next start"
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The specific &lt;code&gt;"build": "next build &amp;amp;&amp;amp; jscrambler"&lt;/code&gt; hook will trigger the &lt;code&gt;jscrambler&lt;/code&gt; command after the build process is finished.&lt;/p&gt;

&lt;p&gt;In order for this command to be executable, &lt;strong&gt;we need to make sure that the &lt;code&gt;.jscramblerrc&lt;/code&gt; file that we created before is in our project's root folder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We are now ready to protect our code and build our application via the CLI:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This will create the protected production files on &lt;code&gt;.next/static/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And you're done! Now all your HTML and JavaScript files are protected with Jscrambler against code theft and reverse-engineering. Remember that you can always fine-tune your protections to manage eventual performance hits. If that's the case, be sure to follow our tutorials on &lt;a href="https://blog.jscrambler.com/jscrambler-101-code-annotations/"&gt;Code Annotations&lt;/a&gt; and &lt;a href="https://blog.jscrambler.com/jscrambler-101-profiling/"&gt;Profiling&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#testing-the-protected-nextjs-app"&gt;
  &lt;/a&gt;
  Testing the Protected Next.js App
&lt;/h2&gt;

&lt;p&gt;As a final step, let's check if the app is running successfully with the newly protected source code:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;npm run start
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Open the URL provided in the console and it will open up a server with the production files.&lt;/p&gt;

&lt;p&gt;Now, you can check what your protected code looks like. This can be achieved simply by opening the browser's debugger and opening the files from the "Sources" tab. The protected code should look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hEhjQka4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.jscrambler.com/content/images/2021/09/jscrambler-blog-protected-nextjs-code.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hEhjQka4--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://blog.jscrambler.com/content/images/2021/09/jscrambler-blog-protected-nextjs-code.png" alt="jscrambler-blog-protected-nextjs-code" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Next.js has truly been a rising star in the web development ecosystem. The 4-year-old framework has been growing rapidly and bringing several welcome features for developers, making it much easier to release production-ready applications.&lt;/p&gt;

&lt;p&gt;If you're building Next.js applications which have sensitive logic, want to prevent &lt;strong&gt;reverse-engineering, licensing violations, and tampering&lt;/strong&gt;, a security solution such as Jscrambler is a must.&lt;/p&gt;

&lt;p&gt;Integrating Jscrambler into Next.js's build process is simple and enables protecting your code with the most sophisticated &lt;strong&gt;polymorphic obfuscation&lt;/strong&gt;, &lt;strong&gt;code locks&lt;/strong&gt;, and &lt;strong&gt;self-defensive&lt;/strong&gt; capabilities.&lt;/p&gt;

&lt;p&gt;This all comes with premium support, so be sure to &lt;a href="https://jscrambler.com/contact?utm_source=dev.to&amp;amp;utm_medium=referral&amp;amp;utm_campaign=next-js"&gt;contact us&lt;/a&gt; if you have any questions!&lt;/p&gt;

</description>
      <category>security</category>
      <category>javascript</category>
      <category>nextjs</category>
      <category>appsecurity</category>
    </item>
    <item>
      <title>Analyze Live Salesforce Data in Infragistics Reveal </title>
      <author>Jerod Johnson</author>
      <pubDate>Fri, 12 Nov 2021 16:44:35 +0000</pubDate>
      <link>https://dev.to/jerodimusprime/analyze-live-salesforce-data-in-infragistics-reveal-44j5</link>
      <guid>https://dev.to/jerodimusprime/analyze-live-salesforce-data-in-infragistics-reveal-44j5</guid>
      <description>&lt;p&gt;Infragistics Reveal is a data visualization solution that simplifies the way you add embedded analytics and visualizations to your apps. Reveal supports connecting to OData APIs, but many enterprise APIs are not built using the OData standard. By combining Reveal with &lt;a href="https://www.cdata.com/products/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData solutions&lt;/a&gt;, you can instantly build dynamic dashboards from live enterprise data sources like Salesforce. &lt;/p&gt;

&lt;p&gt;With access to live data, you can build real-time, responsive dashboards that retrieve new data points with every refresh. &lt;a href="https://www.cdata.com/connect/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData Connect Cloud&lt;/a&gt; and &lt;a href="https://www.cdata.com/apiserver/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;API Server&lt;/a&gt; let you generate standard data APIs like OData for all your data, offering out-of-the-box connectivity to tools like Reveal. &lt;/p&gt;

&lt;p&gt;In this article, we walk through how to connect to Salesforce to Infragistics Reveal to create a simple dashboard, leveraging CData Connect Cloud and CData API server to facilitate the connection. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-cdata"&gt;
  &lt;/a&gt;
  Why CData?
&lt;/h3&gt;

&lt;p&gt;Both CData Connect Cloud and CData API Server provide a single point of contact for all your enterprise data through standard data interfaces like SQL and OData. Instead of migrating data from dozens of sources to a static data store or writing your own integrations, simply point your tools to Connect Cloud or API Server and get instant, live access to all your data. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-connect-cloud"&gt;
  &lt;/a&gt;
  Why Connect Cloud?
&lt;/h3&gt;

&lt;p&gt;As a cloud-based integration platform, Connect Cloud is ideal for working with cloud apps that have embedded Reveal visualizations. With no servers to configure or data proxies to set up, you can simply use the Web-based UI to create a virtual database for Salesforce, generate an OData API, and connect from Reveal to start building dashboards based on live Salesforce data.  &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-cdata-api-server"&gt;
  &lt;/a&gt;
  Why CData API Server?
&lt;/h3&gt;

&lt;p&gt;CData API Server can be installed on-prem or in a self-hosted environment enabling you to connect to data from on-prem or self-hosted apps built on Reveal dashboards. Create an OData endpoint for Salesforce using the straightforward point-and-click interface and connect from Reveal to create dynamic Salesforce visualizations.  &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#getting-started-salesforce-connection-properties"&gt;
  &lt;/a&gt;
  Getting Started: Salesforce Connection Properties
&lt;/h1&gt;

&lt;p&gt;To work with live Salesforce data in Reveal, you need to authenticate with Salesforce. There are several authentication methods available for connecting to Salesforce: Login, OAuth, and SSO. The Login method requires you to have the username, password, and security token of the user. &lt;/p&gt;

&lt;p&gt;If you do not have access to the username and password or do not wish to require them, you can use OAuth authentication. &lt;/p&gt;

&lt;p&gt;Use SSO (single sign-on) by setting the SSOProperties, SSOLoginUrl, and TokenUrl connection properties, which allow you to authenticate to an identity provider. See the "Getting Started" chapter in the help documentation for more information. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-cdata-connect-cloud"&gt;
  &lt;/a&gt;
  Using CData Connect Cloud
&lt;/h1&gt;

&lt;p&gt;To connect to your Salesforce data in Connect Cloud and enable OData access, navigate to the web interface for your Connect Cloud instance (&lt;a href="https://www.cdatacloud.net/myinstance"&gt;https://www.cdatacloud.net/myinstance&lt;/a&gt;). Follow the steps below to configure Connect Cloud. (Jump to building a dashboard.) &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#add-a-connect-cloud-user"&gt;
  &lt;/a&gt;
  Add a Connect Cloud User
&lt;/h2&gt;

&lt;p&gt;Create a User to connect to Salesforce from Reveal through Connect Cloud. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click Users -&amp;gt;  Add &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure a User &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d_6tM2y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7su5jmqywrs6ctcv66i.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d_6tM2y_--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7su5jmqywrs6ctcv66i.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Save Changes and make a note of the Authtoken for the new user &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o081ONlu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwci48u9zpqr1gp5ggrq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o081ONlu--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwci48u9zpqr1gp5ggrq.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-salesforce-from-connect-cloud"&gt;
  &lt;/a&gt;
  Connect to Salesforce from Connect Cloud
&lt;/h3&gt;

&lt;p&gt;CData Connect Cloud uses a straightforward, point-and-click interface to connect to data sources and generate APIs. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open Connect Cloud and click Databases &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--MnHrNifH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2afqyxm1ojpcigdk744x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--MnHrNifH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2afqyxm1ojpcigdk744x.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Select "Salesforce" from Available Data Sources &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the necessary authentication properties to connect to Salesforce (see above) &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tpLKaF_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt8qtqef4y688v8biri4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tpLKaF_9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kt8qtqef4y688v8biri4.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click  Test Database &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click Privileges -&amp;gt;  Add and add the new user (or an existing user) with the appropriate permissions (SELECT is the only required permission for Reveal) &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#add-salesforce-odata-endpoints-in-connect-cloud"&gt;
  &lt;/a&gt;
  Add Salesforce OData Endpoints in Connect Cloud
&lt;/h3&gt;

&lt;p&gt;After connecting to Salesforce, create OData Endpoint for the desired table(s). &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click OData -&amp;gt; Tables -&amp;gt; Add Tables &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--_2ji8Gtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2d4adhz247rymmeeshc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_2ji8Gtd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d2d4adhz247rymmeeshc.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the Salesforce database &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KHzAcRRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inqq08jp2w6kkwwxfqa6.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KHzAcRRH--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/inqq08jp2w6kkwwxfqa6.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the table(s) you wish to work with and click Next &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--UPTmH8pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcfka4xsys5qvhn0ocx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--UPTmH8pi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kbcfka4xsys5qvhn0ocx.png" alt="Image description" width="880" height="557"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;(Optional) Edit the resource to select specific fields and more &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the settings &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#optional-configure-crossorigin-resource-sharing-cors"&gt;
  &lt;/a&gt;
  (Optional) Configure Cross-Origin Resource Sharing (CORS)
&lt;/h3&gt;

&lt;p&gt;When accessing and connecting to multiple different domains from an application such as Ajax, there is a possibility of violating the limitations of cross-site scripting. In that case, configure the CORS settings in OData -&amp;gt; Settings. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable cross-origin resource sharing (CORS): ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow all domains without '*': ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Methods: GET, PUT, POST, OPTIONS &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Headers: Authorization &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the changes to the settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FxiW5m14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yne8m299vyvfp8m5hrd3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FxiW5m14--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yne8m299vyvfp8m5hrd3.png" alt="Image description" width="880" height="495"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#using-api-server"&gt;
  &lt;/a&gt;
  Using API Server
&lt;/h1&gt;

&lt;p&gt;To connect to your Salesforce data in API Server and enable OData access, navigate to the web interface for your API Server instance (&lt;a href="https://localhost:8153"&gt;https://localhost:8153&lt;/a&gt;). Follow the steps below to configure the API Server. (Jump to building a dashboard.) &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#connect-to-salesforce-from-api-server"&gt;
  &lt;/a&gt;
  Connect to Salesforce from API Server
&lt;/h3&gt;

&lt;p&gt;CData API Server uses a straightforward, point-and-click interface to connect to data sources and generate APIs. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Open API Server and click Settings -&amp;gt; Connection -&amp;gt;  Add Connection &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--XjtcBlBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i126nt9bi7frn444usmp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--XjtcBlBA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/i126nt9bi7frn444usmp.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select "Salesforce" &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Pd0dIPiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7qhjqhtrm8gvmw7wyqx.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Pd0dIPiN--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x7qhjqhtrm8gvmw7wyqx.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Enter the necessary authentication properties to connect to Salesforce (see above) &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oXtG6IqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xolrvexiikffd2e8ha5w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oXtG6IqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xolrvexiikffd2e8ha5w.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-salesforce-resource-definitions-in-api-server"&gt;
  &lt;/a&gt;
  Add Salesforce Resource Definitions in API Server
&lt;/h3&gt;

&lt;p&gt;After connecting to Salesforce, create Resources, which represent API endpoints for Salesforce data. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click Settings -&amp;gt; Resources -&amp;gt; Add Resource &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--FCHIJwCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u7xt3j5jn37ffsvcql9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--FCHIJwCG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2u7xt3j5jn37ffsvcql9.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the Salesforce connection &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq-6dcC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li0037b65traiapd8z9u.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lq-6dcC---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/li0037b65traiapd8z9u.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the table you wish to retrieve and click Next &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ARtYUHBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ue1hzcsn501fu2izd0m.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ARtYUHBq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3ue1hzcsn501fu2izd0m.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;(Optional) Edit the resource to select specific fields and more &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Save the settings &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#add-an-api-server-user"&gt;
  &lt;/a&gt;
  Add an API Server User
&lt;/h3&gt;

&lt;p&gt;Create a User to connect to Salesforce from Reveal through API Server. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Click Settings -&amp;gt; Users &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Click  Add &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Configure a User with access to the Salesforce Connection and Resource(s) &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--QdDP5Vdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1bv804752olacfec092.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--QdDP5Vdl--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w1bv804752olacfec092.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Nl5X-NZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl5jz4tjo8a0wj6jf7y4.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Nl5X-NZM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/hl5jz4tjo8a0wj6jf7y4.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#optional-configure-crossorigin-resource-sharing-cors"&gt;
  &lt;/a&gt;
  (Optional) Configure Cross-Origin Resource Sharing (CORS)
&lt;/h3&gt;

&lt;p&gt;When accessing and connecting to multiple different domains from an application such as Ajax, there is a possibility of violating the limitations of cross-site scripting. In that case, configure the CORS settings in Settings -&amp;gt; Server. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable cross-origin resource sharing (CORS): ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Allow all domains without '*': ON &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Methods: GET, PUT, POST, OPTIONS &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Access-Control-Allow-Headers: Authorization &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Save the changes to the settings. &lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BcSZxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/239ajiquudh7fmnylkvs.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--d2BcSZxS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/239ajiquudh7fmnylkvs.png" alt="Image description" width="880" height="573"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#create-a-dashboard-in-reveal"&gt;
  &lt;/a&gt;
  Create a Dashboard in Reveal
&lt;/h1&gt;

&lt;p&gt;With the API Server configured, we can visualize Salesforce data in Reveal. &lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Log into Reveal and click Dashboards -&amp;gt;  New &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--dOpa9FWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhq0ev54wlgm5wssjws.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--dOpa9FWD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zxhq0ev54wlgm5wssjws.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Click  Data Source -&amp;gt; OData Feed &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--5JNfCSaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz5gozzg9vd9e76xpxz9.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--5JNfCSaX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cz5gozzg9vd9e76xpxz9.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Specify the API Server or Connect Cloud API endpoint URL, for example, &lt;a href="https://serverurl/api.rsc"&gt;https://serverurl/api.rsc&lt;/a&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kSe7ADcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v89jczk19wxejsyaw912.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kSe7ADcJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/v89jczk19wxejsyaw912.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select Generic Credentials and specify the API Server username and authentication token &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JtmmTnXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp4e6bw7m5n84hfjfhpv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JtmmTnXV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bp4e6bw7m5n84hfjfhpv.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select the entity you wish to visualize &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kgw_FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyvqt20mws71fkwh70in.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--o7kgw_FW--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/pyvqt20mws71fkwh70in.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Select fields and choose a chart type &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--zUXp8UNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzy8ri0eb3zvwckp33ry.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zUXp8UNj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/bzy8ri0eb3zvwckp33ry.png" alt="Image description" width="880" height="574"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more-information"&gt;
  &lt;/a&gt;
  More Information
&lt;/h1&gt;

&lt;p&gt;Companies everywhere are looking to leverage their data to make effective decisions and grow their businesses. &lt;/p&gt;

&lt;p&gt;By providing industry-standard connectivity, both &lt;a href="https://www.cdata.com/connect/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData Connect Cloud&lt;/a&gt; and &lt;a href="https://www.cdata.com/apiserver/?utm_source=dev.to&amp;amp;utm_medium=kb-article-posting&amp;amp;utm_campaign=analyze-live-salesforce-data-in-infragistics-reveal"&gt;CData API Server&lt;/a&gt; democratize Salesforce access. Now everyone in the organization, from IT professionals &amp;amp; app developers to citizen analysts &amp;amp; data scientists can work with and find value from the entire Salesforce platform. &lt;/p&gt;

</description>
      <category>automation</category>
      <category>integration</category>
      <category>database</category>
      <category>connectivity</category>
    </item>
    <item>
      <title>Full Stack Developer Road-map 2021 || FREE RESOURCES 🔥🔥( Front-end)  Part I</title>
      <author>Femil Savaliya</author>
      <pubDate>Fri, 12 Nov 2021 16:44:34 +0000</pubDate>
      <link>https://dev.to/femil/full-stack-developer-road-map-2021-free-resources-front-end-part-i-2ceh</link>
      <guid>https://dev.to/femil/full-stack-developer-road-map-2021-free-resources-front-end-part-i-2ceh</guid>
      <description>&lt;p&gt;First thing first, &lt;br&gt;
Do you have questions? Here's an answer&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#what-is-a-fullstack-developer"&gt;
  &lt;/a&gt;
  What is a full-stack developer??
&lt;/h3&gt;

&lt;p&gt;A Full-Stack Developer is someone who works with the Back End — or server-side — of the application as well as the Front End or client-side.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#why-become-a-fullstack-developer"&gt;
  &lt;/a&gt;
  Why Become a Full-Stack Developer??
&lt;/h3&gt;

&lt;p&gt;A Full-Stack Developer, or someone who can work on both the back-end and front-end of an application, is a rare and valuable person to have on a team. It's why they can earn upwards of $120,000 a year and why companies fight to snag one for their team.&lt;/p&gt;

&lt;p&gt;In this blog, I will cover the front-end part. Let's jump into it.&lt;/p&gt;

&lt;p&gt;As easy as eating a burger!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--M8qoedD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.linkpicture.com/q/hamburger-full-stack.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--M8qoedD1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.linkpicture.com/q/hamburger-full-stack.jpg" alt="full-stack burgur" width="735" height="593"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you can digest this burger, then you are good to go 🤣🤣,&lt;/p&gt;

&lt;p&gt;Now serious, let's look at this front-end web dev languages and technologies 🙌,&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#1html"&gt;
  &lt;/a&gt;
  1.HTML
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;HyperText Markup Language (HTML)&lt;/strong&gt; is the set of markup symbols or codes inserted into a file intended for display on the Internet. The markup tells web browsers how to display a web page's words and images&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML describes the structure of a Web page&lt;/li&gt;
&lt;li&gt;HTML consists of a series of elements&lt;/li&gt;
&lt;li&gt;HTML elements tell the browser how to display the content&lt;/li&gt;
&lt;li&gt;HTML elements label pieces of content such as "this is a 
heading", "this is a paragraph", "this is a link", etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
      &lt;li&gt;
        &lt;a href="https://www.w3schools.com/html/"&gt;W3Schools&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.codecademy.com/learn/learn-html"&gt;Learn HTML&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.udemy.com/topic/html/free/"&gt;Free UDEMY Course for HTML/CSS from scratch&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.freecodecamp.org/news/html-css-11-hour-course/"&gt;HTML and CSS From scratch - FreeCodeCamp&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://youtu.be/pQN-pnXPaVg"&gt;HTML in 2hr - FreeCodeCamp&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#2css"&gt;
  &lt;/a&gt;
  2.CSS
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Cascading Style Sheets (CSS)&lt;/strong&gt; is a stylesheet language used to describe the presentation of a document written in HTML or XML (including XML dialects such as SVG, MathML or XHTML).&lt;/p&gt;

&lt;ul&gt;
      &lt;li&gt;CSS describes how HTML elements are to be displayed on screen, 
          paper, or in other media&lt;/li&gt;
&lt;li&gt;HTML consists of a series of elements&lt;/li&gt;
&lt;li&gt;External stylesheets are stored in CSS files&lt;/li&gt;
&lt;li&gt;CSS saves a lot of work. It can control the layout of multiple 
  web pages all at once
&lt;/li&gt;
    &lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
      &lt;li&gt;
        &lt;a href="https://www.w3schools.com/w3css/defaulT.asp"&gt;W3Schools CSS&lt;/a&gt;
      &lt;/li&gt;
      
      &lt;li&gt;
        &lt;a href="https://www.freecodecamp.org/news/tag/css/"&gt;FreeCodeCamp - CSS Course&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://youtu.be/3_9znKVNe5g"&gt;Intro CSS - This series will teach you CSS in one hour&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://openbase.com/search?q=css"&gt;ulma - Tutorials provided by OpenBase&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#3javascript"&gt;
  &lt;/a&gt;
  3.JAVASCRIPT
&lt;/h2&gt;

&lt;p&gt;JavaScript is a &lt;strong&gt;dynamic computer programming language&lt;/strong&gt;. It is lightweight and most commonly used as a part of web pages, whose implementations allow client-side scripts to interact with the user and make dynamic pages. It is an interpreted programming language with object-oriented capabilities.&lt;/p&gt;

&lt;ul&gt;
      &lt;li&gt;JavaScript can update and change both HTML and CSS.&lt;/li&gt;
&lt;li&gt;JavaScript can calculate, manipulate and validate data.&lt;/li&gt;
&lt;li&gt;JavaScript is the Programming Language for the Web.&lt;/li&gt;

    &lt;/ul&gt;

&lt;h3&gt;Resources&lt;/h3&gt;

&lt;ul&gt;
      &lt;li&gt;
        &lt;a href="https://www.w3schools.com/whatis/whatis_js.asp"&gt;W3Schools JS&lt;/a&gt;
      &lt;/li&gt;
      
      &lt;li&gt;
        &lt;a href="https://www.freecodecamp.org/news/learn-javascript-full-course/"&gt;FreeCodeCamp - JS Course&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://youtu.be/W6NZfCO5SIk%0A%20%20%20%20%20%20%20%20%20%20target="&gt;JavaScript Tutorial for Beginners: Learn JavaScript in 1 Hour&lt;/a&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href="https://www.javascript.com"&gt;Javascript&lt;/a&gt;
      &lt;/li&gt;
    &lt;/ul&gt;




&lt;h2&gt;
  &lt;a href="#frameworks"&gt;
  &lt;/a&gt;
  ||Frameworks||
&lt;/h2&gt;

&lt;p&gt;The front-end of a website or application is the stuff visible to the user on the website. ... In addition, it includes building user-friendly interfaces and efficiently presenting the data from the back end to a user. Thus, &lt;strong&gt;a Front-end Framework is a platform/tool to build the front end of your website&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;There are many debet on which frameworks are better, and why, but as per global user this are top five,&lt;/p&gt;

&lt;ul&gt;
      &lt;li&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://vuejs.org/"&gt;VueJs&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://jquery.com/"&gt;JQuery&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href="https://emberjs.com/"&gt;EmberJs&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;

&lt;p&gt;Best way to learn and understand each concept in deep, I recommend you to refer to the documentation of a particular framework.&lt;/p&gt;

&lt;p&gt;Although there are more technologies for all HTML, CSS, and JAVASCRIPT that will help you to enhance your productivity and make it easy to write code if you ask me first to understand and learn the core language, then go for the framework and their technologies.&lt;/p&gt;

&lt;p&gt;Congratulations!!! You’re now a front-end developer. 😎&lt;/p&gt;

&lt;p&gt;All the best  &lt;code&gt;&amp;lt;p style="life:flex;"&amp;gt;Happy Code&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Part II will be uploaded soon. Thanks for reading. 💖💖&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>html</category>
      <category>css</category>
      <category>javascript</category>
    </item>
  </channel>
</rss>
