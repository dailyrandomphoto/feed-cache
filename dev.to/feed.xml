<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>How immutable data can benefit your data-driven application.</title>
      <author>Cassidy Mountjoy</author>
      <pubDate>Wed, 18 Aug 2021 18:32:35 +0000</pubDate>
      <link>https://dev.to/cassidymountjoy/how-immutable-data-can-benefit-your-data-driven-application-28pm</link>
      <guid>https://dev.to/cassidymountjoy/how-immutable-data-can-benefit-your-data-driven-application-28pm</guid>
      <description>&lt;p&gt;The promise of blockchain technology set out to change data systems and revolutionize networks. Blockchain advocates pledged to decentralize voting, registration, commerce, and currency. Although various changes have been made to many of these fields, there is still a lot more work to be done. Don’t get me wrong, CryptoKitties is pretty cool and the cats are so darn cute, but I think blockchain technology is far from reaching its full potential.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--0eW0q6JU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyq3zif5l1zhqv98j3pi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--0eW0q6JU--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oyq3zif5l1zhqv98j3pi.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One of the fundamental ideas behind blockchain systems is that data is &lt;strong&gt;immutable&lt;/strong&gt;. Immutable data prevents adversaries from changing existing values within the database. This establishes trust and greatly enhances the security of the overall system, preventing data discrepancies that have potentially catastrophic results.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jZIOYXEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxtwpx220zkjmyoej2sg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jZIOYXEL--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/kxtwpx220zkjmyoej2sg.png" alt="image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-cabinet-dilemma"&gt;
  &lt;/a&gt;
  The Cabinet Dilemma
&lt;/h2&gt;

&lt;p&gt;Traditional industries are becoming digitized, moving their pen and paper operations to applications and electronic storage. This entails trading locked file cabinets for database management systems. While the lock on the cabinet provides the primary layer of security, the documents inside have an additional layer of security, their wet signatures.&lt;/p&gt;

&lt;p&gt;Immutable data is the equivalent of a wet signature. The paper has been signed, there is no going back or “modifying” the signature. On the contrary mutable systems are equivalent to signing the document in pencil and attempting to hide the eraser. If the cabinet is opened, the freedom to re-write data is granted to the adversary.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;With over 80,000 cyber attacks per day, our virtual file cabinets need to be as secure as possible. You wouldn’t sign your documents in pencil would you?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Data breaches are dangerous to your customers, a headache for your engineers, and embarrassing. We should be doing as much as possible to stop such violations of privacy. Blockchain fundamentals, such as immutability, must be applied to traditional systems to add much needed security and create an overall safer environment.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#providing-additional-value-to-immutable-data"&gt;
  &lt;/a&gt;
  Providing Additional Value to Immutable Data
&lt;/h2&gt;

&lt;p&gt;On face value, immutable data deepens insight and enhances the security of your system. When applied to relational databases, immutable data provides other solutions to application demands, here’s why.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#speed"&gt;
  &lt;/a&gt;
  Speed
&lt;/h3&gt;

&lt;p&gt;While developing an immutable relational database, we learned that storage techniques associated with write-only system are greatly simplified. When adding data to the system becomes a simple procedure, database resources are made more accessible to users.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#auditing-and-analytics"&gt;
  &lt;/a&gt;
  Auditing and Analytics
&lt;/h3&gt;

&lt;p&gt;Immutable data can be used as a trusted resource for auditing. Additionally, analytics teams have access to the complete history, allowing them to run more in-depth queries for analyzing changes over time.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;When we explore blockchain fundamentals a bit deeper, its apparent that immutable data provides many needed benefits to our applications. As traditional industries move their services online, sensitive data should be secured at the lowest level possible. With that being said, immutable systems are a necessity for us to protect our businesses, sensitive information, and quality of life.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#blockpoint"&gt;
  &lt;/a&gt;
  Blockpoint
&lt;/h2&gt;

&lt;p&gt;At &lt;a href="https://blockpointdb.com/"&gt;blockpoint Systems&lt;/a&gt; we value immutability and think you should too. We developed a multi-version database that brings together blockchain immutability with traditional relational database infrastructure. Check out our website or feel free to reach out to us at &lt;a href="mailto:contact@blockpoint.systems"&gt;contact@blockpoint.systems&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>database</category>
      <category>sql</category>
      <category>blockchain</category>
      <category>security</category>
    </item>
    <item>
      <title>Is it time to let go of Bootstrap?</title>
      <author>Vishwa.R</author>
      <pubDate>Wed, 18 Aug 2021 18:29:31 +0000</pubDate>
      <link>https://dev.to/codereaper08/is-it-time-to-let-go-of-bootstrap-347i</link>
      <guid>https://dev.to/codereaper08/is-it-time-to-let-go-of-bootstrap-347i</guid>
      <description>&lt;p&gt;Hello again!, After a short break, I am back again with a non-technical post. As Web-Dev's, we use and search all possible ways, to get our job done in the easy way. The most vital visual part of Web-Dev, the &lt;strong&gt;FRONT-END&lt;/strong&gt;, is very important to catch the eyes and to give a nice user-friendly experience for the user. To make this job easy, we use CSS frameworks like Bootstrap. So, after these many good years with many technical competitors, is Bootstrap still good to hang on with? &lt;br&gt;
Let's see about this in today's blog.&lt;/p&gt;

&lt;p&gt;So, we'll start with&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-bootstrap"&gt;
  &lt;/a&gt;
  What is Bootstrap?
&lt;/h2&gt;

&lt;p&gt;Bootstrap is a CSS framework (Most popular), which uses class based Web-design. The official site of Bootstrap describes itself as,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;“Quickly design and customize responsive mobile-first sites with Bootstrap, the world’s most popular front-end open source toolkit, featuring Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful JavaScript plugins.”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And that's completely true, Bootstrap is fast and provide responsive mobile-first build classes to achieve what we Web-Dev's dream of as “RESPONSIVE DESIGN”. It provides an awesome grid system(Which I love) and JavaScript plugins(I hate them using jQuery, we'll get into it).&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#competitors"&gt;
  &lt;/a&gt;
  Competitors
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--6I60PL3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tekkiwebsolutions.com/wp-content/uploads/Top-CSS-Frameworks.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--6I60PL3E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://www.tekkiwebsolutions.com/wp-content/uploads/Top-CSS-Frameworks.jpg" alt="CSS frameworks"&gt;&lt;/a&gt;&lt;/p&gt;
Image source: www.tekkiwebsolutions.com



&lt;p&gt;Bootstrap now faces a reasonable competition from similar UI kit based CSS frameworks like &lt;strong&gt;&lt;em&gt;Foundation&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Bulma&lt;/em&gt;&lt;/strong&gt;. Apart from these, It also faces a severe blow from &lt;strong&gt;&lt;em&gt;TailwindCSS&lt;/em&gt;&lt;/strong&gt;. Bootstrap is always criticized for its inflexibility. I would say, it's not inflexibility, but the huge amount of time taken for customizing the defaults provided by Bootstrap(It provides default UI components, because it's a UI Kit based CSS framework). Whereas in frameworks like &lt;strong&gt;&lt;em&gt;TailwindCSS&lt;/em&gt;&lt;/strong&gt;, Utility classes, which provide low-level flexibility, are provided.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-bootstrap-worry-about-competition"&gt;
  &lt;/a&gt;
  Should Bootstrap worry about competition?
&lt;/h2&gt;

&lt;p&gt;I would say Bootstrap was not made to work like &lt;strong&gt;TailwindCSS&lt;/strong&gt;. Bootstrap was made to provide developers of all levels, from beginners to advanced, the ability to quickly spin up a nice looking UI without worrying about responsiveness. Bootstrap's users are mostly beginners, who start their journey of using class based CSS utilities from pure CSS. It also has a good learning curve, so people get it better soon, as frameworks like &lt;strong&gt;TailwindCSS&lt;/strong&gt;, &lt;strong&gt;Foundation&lt;/strong&gt; and &lt;strong&gt;Bulma&lt;/strong&gt; comparatively has a steeper learning curve.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#should-we-use-bootstrap-still-in-2021"&gt;
  &lt;/a&gt;
  Should we use Bootstrap still in 2021?
&lt;/h2&gt;

&lt;p&gt;Of course, It is best in class for rapid web-deign, where you want a useful and nice looking site, without any brand colour pallets or pixel specific needs. Even today, more than 19% of websites use &lt;strong&gt;Bootstrap&lt;/strong&gt; as their CSS framework. I would say, it's the most probable gateway for learners, who get into class based CSS frameworks from pure CSS and HTML. If you want a quick site for a Boot camp you arrange next week, go for Bootstrap, It's faster to build, gives responsiveness.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bootstrap-is-gearing-back-again"&gt;
  &lt;/a&gt;
  Bootstrap is gearing back again!
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kuuhVTxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://getbootstrap.com/docs/5.0/assets/brand/bootstrap-social.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kuuhVTxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://getbootstrap.com/docs/5.0/assets/brand/bootstrap-social.png" alt="Bootstrap 5"&gt;&lt;/a&gt;&lt;/p&gt;
Image source: getbootstrap.com



&lt;p&gt;As you all know, Bootstrap 5 came with a nice update from 4. It let go of jQuery and switched to Vanilla JavaScript. So, now how good is that!&lt;br&gt;
Bootstrap also managed to bring back the Bootstrap icon support.&lt;br&gt;
It also came up with some low level utility classes for added flexibility. Overall, Bootstrap is not going to be dead, but getting back on track.&lt;/p&gt;

&lt;p&gt;Thanks for Reading and following me!&lt;br&gt;
If you didn't, make sure to follow me, so we can learn and discuss tech-stuff.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#attributions"&gt;
  &lt;/a&gt;
  Attributions:
&lt;/h3&gt;

&lt;p&gt;cover-image : &lt;a href="http://www.drupal.org"&gt;www.drupal.org&lt;/a&gt;&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>todayisearched</category>
      <category>html</category>
    </item>
    <item>
      <title>Best chrome extensions you should use.</title>
      <author>Aman Singh</author>
      <pubDate>Wed, 18 Aug 2021 18:03:07 +0000</pubDate>
      <link>https://dev.to/aman2221/best-chrome-extensions-you-should-use-3bci</link>
      <guid>https://dev.to/aman2221/best-chrome-extensions-you-should-use-3bci</guid>
      <description>&lt;h3&gt;
  &lt;a href="#10-chrome-extension-you-should-use-as-a-developer"&gt;
  &lt;/a&gt;
  10 Chrome extension you should use as a developer.
&lt;/h3&gt;

&lt;h3&gt;
  &lt;a href="#1-colorzilla"&gt;
  &lt;/a&gt;
  1. ColorZilla
&lt;/h3&gt;

&lt;p&gt;Advanced Eyedropper, Color Picker, Gradient Generator and other colorful goodies.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--W3UuXErS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rehzwpoi0v3aw5whuoxh.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--W3UuXErS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/rehzwpoi0v3aw5whuoxh.jpg" alt="ColorZilla"&gt;&lt;/a&gt;&lt;br&gt;
Link : &lt;a href="https://chrome.google.com/webstore/detail/colorzilla/bhlhnicpbhignbdhedgjhgdocnmhomnp?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#2-cssviewer"&gt;
  &lt;/a&gt;
  2. CSSViewer
&lt;/h2&gt;

&lt;p&gt;A simple CSS property viewer&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#"&gt;
  &lt;/a&gt;
  &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--svsZQkD9--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gub07pg2bygytj7h4wdc.jpg" alt="cssViewer"&gt;
&lt;/h1&gt;

&lt;p&gt;Link : &lt;a href="https://chrome.google.com/webstore/detail/cssviewer/ggfgijbpiheegefliciemofobhmofgce?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#3-grammarly-for-chrome"&gt;
  &lt;/a&gt;
  3. Grammarly for Chrome
&lt;/h2&gt;

&lt;p&gt;Write your best with Grammarly for Chrome.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--sZmn-qH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sh4os9zus1i74xsj57x.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sZmn-qH8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5sh4os9zus1i74xsj57x.jpg" alt="gram"&gt;&lt;/a&gt;&lt;br&gt;
Link : &lt;a href="https://chrome.google.com/webstore/detail/grammarly-for-chrome/kbfnbcaeplbcioakkpcpgfkobkghlhen?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#4-react-developer-tools"&gt;
  &lt;/a&gt;
  4. React Developer Tools
&lt;/h2&gt;

&lt;p&gt;Adds React debugging tools to the Chrome Developer Tools. Created &lt;br&gt;
from revision 1d2528097 on 8/16/2021.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IABDg6XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ega9ef4llpl83132l56a.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IABDg6XR--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ega9ef4llpl83132l56a.jpg" alt="first"&gt;&lt;/a&gt;&lt;br&gt;
Link : &lt;a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#5-screen-recorder"&gt;
  &lt;/a&gt;
  5. Screen Recorder
&lt;/h2&gt;

&lt;p&gt;Record a video from the camera or capture it from the screen (desktop, specific application window or browser tab)&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B2f2g-vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de2i7tcw1tgxliz4mykv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B2f2g-vg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/de2i7tcw1tgxliz4mykv.png" alt="screen"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://chrome.google.com/webstore/detail/scrnli-screenshot-screen/ijejnggjjphlenbhmjhhgcdpehhacaal?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#6-url-render"&gt;
  &lt;/a&gt;
  6. url render
&lt;/h2&gt;

&lt;p&gt;Browse websites from your favorite search engine result page.&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWkx27Jm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvjrp6yuyeabqmg0703x.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZWkx27Jm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xvjrp6yuyeabqmg0703x.png" alt="utl"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://chrome.google.com/webstore/detail/url-render/flhclpkhoiajoikkabbfbinnjapaflog?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#7-wappalyzer"&gt;
  &lt;/a&gt;
  7. Wappalyzer
&lt;/h2&gt;

&lt;p&gt;Identify web technologies.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--3I04u5Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ee5owtx07ky7tb20ji6g.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--3I04u5Yg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ee5owtx07ky7tb20ji6g.png" alt="wap"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#8-web-developer-checklist"&gt;
  &lt;/a&gt;
  8. Web Developer Checklist
&lt;/h2&gt;

&lt;p&gt;Analyses any web page for violations of best practices.![webDev]!&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qYioFhIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83h1iwk5lp70si2e2q55.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qYioFhIG--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/83h1iwk5lp70si2e2q55.png" alt="webDev"&gt;&lt;/a&gt;&lt;br&gt;
Link : &lt;a href="https://chrome.google.com/webstore/detail/web-developer-checklist/iahamcpedabephpcgkeikbclmaljebjp?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#9-whatfont"&gt;
  &lt;/a&gt;
  9. WhatFont
&lt;/h2&gt;

&lt;p&gt;The easiest way to identify fonts on web pages.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--a9cZBsD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x69bdq010syq2igqkh98.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--a9cZBsD0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/x69bdq010syq2igqkh98.png" alt="font"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://chrome.google.com/webstore/detail/%E5%AD%97%E4%BD%93%E6%A3%80%E6%B5%8B/ofjeanmickkjincopmpbfkciiookidha?hl=en"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#10-just-black"&gt;
  &lt;/a&gt;
  10. Just Black
&lt;/h2&gt;

&lt;p&gt;A theme brought to you by The Chrome Team.&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vsh6wU54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quh7ql60rynzx4pr7vxw.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vsh6wU54--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/quh7ql60rynzx4pr7vxw.jpg" alt="theme"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Link : &lt;a href="https://chrome.google.com/webstore/detail/just-black/aghfnjkcakhmadgdomlmlhhaocbkloab"&gt;Click Me&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank You❤️️❤️️&lt;/p&gt;

</description>
      <category>html</category>
      <category>javascript</category>
      <category>webdev</category>
    </item>
    <item>
      <title>Goodbye Adobe! Or: why we are leaving the Adobe product family!</title>
      <author>masdot</author>
      <pubDate>Wed, 18 Aug 2021 17:52:17 +0000</pubDate>
      <link>https://dev.to/masdot/goodbye-adobe-or-why-we-are-leaving-the-adobe-product-family-35cg</link>
      <guid>https://dev.to/masdot/goodbye-adobe-or-why-we-are-leaving-the-adobe-product-family-35cg</guid>
      <description>&lt;p&gt;My team and I have been using Adobe Creative Cloud for several years now. Despite the relatively high price, we were mainly convinced by the familiarity of the software as well as the good interoperability of the individual software solutions and the same or at least very similar user interface in the various programs. Likewise, the common cloud connection of the programs has accelerated our workflow quite a bit.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#why-we-are-now-leaving-adobe"&gt;
  &lt;/a&gt;
  Why we are now leaving Adobe?
&lt;/h2&gt;

&lt;p&gt;So, why do we want to leave the Adobe Family now?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Adobe has long relied on their good name&lt;/strong&gt;&lt;br&gt;
The user experience has been ignored for a long time in the ongoing development of many Adobe products. For example, the speed and flow of working in many Adobe programs is very slow. The loading times when importing files are also very long.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The Adobe Support&lt;/strong&gt;&lt;br&gt;
Adobe technical support is one of the worst I have ever had the pleasure of using. It is usually quicker to ask colleagues or search engines about problems than to contact technical support.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;br&gt;
Even high-performance laptops and desktop PCs work up a good sweat when using Adobe products. The high load on the device despite the slow loading times and the poor performance of many programs is not really clear to me.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pricing&lt;/strong&gt;&lt;br&gt;
The Adobe programs are all quite cost-intensive. Besides, the Adobe products have been switched to a subscription model which causes relatively high monthly costs.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We have not yet decided which programs we will switch to in detail. We will probably replace Photoshop, InDesign and Illustrator with Affinity Photo, Affinity Publisher and Affinity Designer. We are still looking for alternatives for the other programs we use.&lt;/p&gt;

</description>
      <category>adobe</category>
      <category>design</category>
      <category>develop</category>
      <category>affinity</category>
    </item>
    <item>
      <title>Listen to S6E2 of DevDiscuss: "An AWS Service Deep Dive" with Ken Collins &amp; Vlad Ionescu</title>
      <author>dev.to staff</author>
      <pubDate>Wed, 18 Aug 2021 17:12:08 +0000</pubDate>
      <link>https://dev.to/devteam/listen-to-s6e2-of-devdiscuss-solving-problems-via-aws-with-ken-collins-vlad-ionescu-4lj2</link>
      <guid>https://dev.to/devteam/listen-to-s6e2-of-devdiscuss-solving-problems-via-aws-with-ken-collins-vlad-ionescu-4lj2</guid>
      <description>&lt;h2&gt;
  &lt;a href="#listen-to-devdiscuss-s6e2-right-here-on-dev"&gt;
  &lt;/a&gt;
  Listen to DevDiscuss S6E2 right here on DEV:
&lt;/h2&gt;


&lt;div class="podcastliquidtag"&gt;
  &lt;div class="podcastliquidtag__info"&gt;
    &lt;a href="/devdiscuss/s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive"&gt;
      &lt;h1 class="podcastliquidtag__info__episodetitle"&gt;S6:E2 - Lambda, Fargate, EC2, Oh My! An AWS Service Deep Dive&lt;/h1&gt;
    &lt;/a&gt;
    &lt;a href="/devdiscuss"&gt;
      &lt;h2 class="podcastliquidtag__info__podcasttitle"&gt;
        DevDiscuss  

      &lt;/h2&gt;
    &lt;/a&gt;
  &lt;/div&gt;
  &lt;div id="record-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" class="podcastliquidtag__record"&gt;
    &lt;img class="button play-butt" id="play-butt-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png" alt="play"&gt;
    &lt;img class="button pause-butt" id="pause-butt-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png" alt="pause"&gt;
    &lt;img class="podcastliquidtag__podcastimage" id="podcastimage-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive" alt="DevDiscuss" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZtvK04RF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--j-SdIkjZ--/c_fill%2Cf_auto%2Cfl_progressive%2Cq_auto/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
  &lt;/div&gt;

  &lt;div class="hidden-audio" id="hidden-audio-s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive"&gt;
  
    
    Your browser does not support the audio element.
  
  &lt;div id="progressBar" class="audio-player-display"&gt;
    &lt;a href="/devdiscuss/s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive"&gt;
      &lt;img id="episode-profile-image" alt="S6:E2 - Lambda, Fargate, EC2, Oh My! An AWS Service Deep Dive" width="420" height="420" src="https://res.cloudinary.com/practicaldev/image/fetch/s--zTELFWpP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--otY2jCJh--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_420%2Cq_auto%2Cw_420/https://dev-to-uploads.s3.amazonaws.com/uploads/podcast/image/235/08786d8b-7ef4-4c00-bc40-f4b3cbca5834.jpg"&gt;
      &lt;img id="animated-bars" src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZzrPEFmt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev.to/assets/animated-bars-4e8c57c8b58285fcf7d123680ad8af034cd5cd43b4d9209fe3aab49d1e9d77b3.gif" alt="animated volume bars"&gt;
    &lt;/a&gt;
    &lt;span id="barPlayPause"&gt;
      &lt;img class="butt play-butt" alt="play" src="https://res.cloudinary.com/practicaldev/image/fetch/s--1SirfZpJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/playbutt-5e444a2eae28832efea0dec3342ccf28a228b326c47f46700d771801f75d6b88.png"&gt;
      &lt;img class="butt pause-butt" alt="pause" src="https://res.cloudinary.com/practicaldev/image/fetch/s--8YU2a2mP--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/pausebutt-bba7cb5f432cfb16510e78835378fa22f45fa6ae52a624f7c9794fefa765c384.png"&gt;
    &lt;/span&gt;
    &lt;span id="volume"&gt;
      &lt;span id="volumeindicator" class="volume-icon-wrapper showing"&gt;
        &lt;span id="volbutt"&gt;
          &lt;img alt="volume" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--vTou7JP3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-cd20707230ae3fc117b02de53c72af742cf7d666007e16e12f7ac11ebd8130a7.png"&gt;
        &lt;/span&gt;
        &lt;span class="range-wrapper"&gt;
          
        &lt;/span&gt;
      &lt;/span&gt;
      &lt;span id="mutebutt" class="volume-icon-wrapper hidden"&gt;
        &lt;img alt="volume-mute" class="icon-img" height="16" width="16" src="https://res.cloudinary.com/practicaldev/image/fetch/s--OX5NjT0t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/volume-mute-8f08ec668105565af8f8394eb18ab63acb386adbe0703afe3748eca8f2ecbf3b.png"&gt;
      &lt;/span&gt;
      &lt;span class="speed" id="speed"&gt;1x&lt;/span&gt;
    &lt;/span&gt;
    &lt;span class="buffer-wrapper" id="bufferwrapper"&gt;
      &lt;span id="buffer"&gt;&lt;/span&gt;
      &lt;span id="progress"&gt;&lt;/span&gt;
      &lt;span id="time"&gt;initializing...&lt;/span&gt;
      &lt;span id="closebutt"&gt;×&lt;/span&gt;
    &lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;


&lt;p&gt;&lt;em&gt;DevDiscuss is the first original podcast from DEV all about the burning topics that impact all our lives as developers.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This week, we talk about solving problems via Amazon Web Services with two AWS "Heroes".&lt;/strong&gt; ⚡️ &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#hosts"&gt;
  &lt;/a&gt;
  Hosts:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/ben"&gt;@ben&lt;/a&gt;
 — Creator of DEV &amp;amp; Co-Founder of Forem&lt;/li&gt;
&lt;li&gt;
&lt;a class="mentioned-user" href="https://dev.to/coffeecraftcode"&gt;@coffeecraftcode&lt;/a&gt;
 — Developer Advocate @ Forem&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#guests"&gt;
  &lt;/a&gt;
  Guests:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@metaskills"&gt;Ken Collins&lt;/a&gt; — Principal Engineer @ Custom Ink &lt;/li&gt;
&lt;li&gt;
&lt;a href="http://twitter.com/@iamvlaaaaaaad."&gt;Vlad Ionescu&lt;/a&gt; — Independent Consultant&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy our show this week, folks!&lt;/p&gt;

&lt;p&gt;&lt;a href="https://i.giphy.com/media/dW15ZwOHekcRyFpH70/giphy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://i.giphy.com/media/dW15ZwOHekcRyFpH70/giphy.gif" alt="Animation of microphone with an atom overlaid on it"&gt;&lt;/a&gt;&lt;/p&gt;




&lt;p&gt;&lt;em&gt;You can &lt;a href="//dev.to/devdiscuss"&gt;follow DevDiscuss&lt;/a&gt; to get episode notifications and listen right in your feed&lt;/em&gt; — or subscribe on your platform of choice! Plus, if you leave us a review, we'll send you a free pack of thank-you stickers. Details &lt;a href="https://airtable.com/shr8oKAIMZgdYnBxx"&gt;here&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#quick-listening-links"&gt;
  &lt;/a&gt;
  Quick Listening Links
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://podcasts.apple.com/us/podcast/s6-e2-lambda-fargate-ec2-oh-my-an-aws-service-deep-dive/id1513053883?i=1000532363288"&gt;Apple Podcasts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://open.spotify.com/episode/4lF0IQurXyhiI8ImqnAcla"&gt;Spotify&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://podcasts.google.com/feed/aHR0cHM6Ly9mZWVkcy5kZXZwb2RzLmRldi9kZXZkaXNjdXNzX3BvZGNhc3QueG1s/episode/aHR0cHM6Ly9kZXZwb2RzLmRldi9wb2RjYXN0cy9kZXZkaXNjdXNzLzQz?sa=X&amp;amp;ved=0CAQQkfYCahcKEwigj7u9jbvyAhUAAAAAHQAAAAAQEA"&gt;Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.listennotes.com/podcasts/devdiscuss/s6e2-lambda-fargate-ec2-oh-mcs7r9-uTnX/"&gt;Listen Notes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tunein.com/podcasts/Technology-Podcasts/DevDiscuss-p1324596/?topicId=165202003"&gt;TuneIn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://feeds.codenewbie.org/devnews_podcast.xml"&gt;RSS Feed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://devpods.herokuapp.com/podcasts/devdiscuss/episodes/180"&gt;DEV Pods Site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;




&lt;p&gt;&lt;em&gt;Acknowledgements&lt;/em&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a class="mentioned-user" href="https://dev.to/levisharpe"&gt;@levisharpe&lt;/a&gt;
 for producing &amp;amp; mixing the show&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Our season six sponsors: &lt;a href="//cockroachlabs.com/devdiscuss"&gt;CockroachDB&lt;/a&gt; &amp;amp; &lt;a href="https://www.scoutapm.com/devdiscuss"&gt;Scout APM&lt;/a&gt;!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>discuss</category>
      <category>podcast</category>
    </item>
    <item>
      <title>Get types by Writing Hybrid JavaScript </title>
      <author>rafalou38</author>
      <pubDate>Wed, 18 Aug 2021 17:03:53 +0000</pubDate>
      <link>https://dev.to/rafaelmc/writing-hybrid-javascript-10mk</link>
      <guid>https://dev.to/rafaelmc/writing-hybrid-javascript-10mk</guid>
      <description>&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  introduction
&lt;/h2&gt;

&lt;p&gt;We all know the frustration caused by not having typed JavaScript, it's also one of the main reasons why people tend to switch to typescript to gain access to live code error prediction and of course &lt;strong&gt;types&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The problem with typescript is that you have to compile your code, add a &lt;code&gt;tsconfig.json&lt;/code&gt; file, fix non typed modules, and integrate a lot of code to your JavaScript to make the compiler happy.&lt;/p&gt;

&lt;p&gt;But wait, there is a solution!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#jsdoc"&gt;
  &lt;/a&gt;
  JsDoc
&lt;/h2&gt;

&lt;p&gt;To start gaining access to types without typescript, you have to use &lt;code&gt;jsdoc&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;JsDoc is originally built to allow you to document your JavaScript code using comments, but you can use it to &lt;strong&gt;type&lt;/strong&gt; your code.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#jsdoc-syntax"&gt;
  &lt;/a&gt;
  JsDoc syntax
&lt;/h3&gt;

&lt;p&gt;You start a JsDoc comment with &lt;code&gt;/**&lt;/code&gt;, each new line starts with &lt;code&gt;*&lt;/code&gt; and it ends with &lt;code&gt;*/&lt;/code&gt;&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 * 
 * 
 * 
 */&lt;/span&gt;

&lt;span class="c1"&gt;// OR&lt;/span&gt;

&lt;span class="cm"&gt;/** */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If you are in vscode it will automatically detect that you are writing a JsDoc comment and add &lt;code&gt;*&lt;/code&gt; to each new line.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#jsdoc-tags"&gt;
  &lt;/a&gt;
  JsDoc Tags
&lt;/h3&gt;

&lt;p&gt;JsDoc uses &lt;code&gt;tags&lt;/code&gt; to type your code, we will focus on two of them but feel free to check on the 65 others in &lt;a href="https://jsdoc.app/#block-tags"&gt;JsDoc Docs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A tag contains a &lt;code&gt;@&lt;/code&gt;, the tag name, and the arguments.&lt;/p&gt;

&lt;p&gt;To type a &lt;strong&gt;function parameter&lt;/strong&gt;, use the &lt;code&gt;@param&lt;/code&gt; tag followed by a TypeScript type in brackets and the name of the  parameter:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/**
 *
 * @param {string} name
 */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;say_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;hello&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And 🎉 you get autocompletion and types:&lt;br&gt;
&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--hqA9Uhh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnwcym7yjtwm3ydegp4b.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--hqA9Uhh7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cnwcym7yjtwm3ydegp4b.png" alt="vscode preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use it with complex types, for example in a discord bot:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nx"&gt;Discord&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**
 *
 * @param {Discord.Client&amp;lt;boolean&amp;gt;} client
 * @param {Discord.Message} message
 */&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;ban&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tLKYr_CD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a75ilt75w1elmxnx0oz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tLKYr_CD--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4a75ilt75w1elmxnx0oz.png" alt="vscode preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To type a &lt;strong&gt;variable&lt;/strong&gt;, use the &lt;code&gt;@type&lt;/code&gt; tag:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {string} */&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#custom-types"&gt;
  &lt;/a&gt;
  Custom types
&lt;/h3&gt;

&lt;p&gt;You can also use custom types using typescript interfaces:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {{
 *  name: "string";
 *  age: number;
 *  interests: {
 *     [key: string]: number;
 *  }
 * }} */&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Au8qn5xb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efcltur1s6lxp51qzjc8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Au8qn5xb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/efcltur1s6lxp51qzjc8.png" alt="vscode preview"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#using-declaration-files"&gt;
  &lt;/a&gt;
  using declaration files
&lt;/h2&gt;

&lt;p&gt;Writing types like this works great, but you will soon realize that there is a lot of repetition when you are using the same custom type and that your code is cluttered.&lt;/p&gt;

&lt;p&gt;The solution is to use &lt;strong&gt;TypeScript declaration files&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Just create a file in your project ending in &lt;code&gt;.d.ts&lt;/code&gt; and declare your types in it using typescript types&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight typescript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// types.d.ts&lt;/span&gt;
&lt;span class="kr"&gt;declare&lt;/span&gt; &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="nx"&gt;User&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;interests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kr"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; &lt;span class="kr"&gt;number&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Once that's done, you will be able to reference the &lt;code&gt;User&lt;/code&gt; type directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="cm"&gt;/** @type {User} */&lt;/span&gt;
&lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vOt8zzLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12f68cdc5whzbganww7s.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vOt8zzLg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/12f68cdc5whzbganww7s.png" alt="vscode preview"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>typescript</category>
      <category>node</category>
    </item>
    <item>
      <title>Day 5: 100 days of code</title>
      <author>Gaurav-Shekhawat</author>
      <pubDate>Wed, 18 Aug 2021 16:39:44 +0000</pubDate>
      <link>https://dev.to/gauravshekhawat/day-5-100-days-of-code-li3</link>
      <guid>https://dev.to/gauravshekhawat/day-5-100-days-of-code-li3</guid>
      <description>&lt;p&gt;Starting day 5…&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontendmentor%C2%A0-order-summary-component"&gt;
  &lt;/a&gt;
  FrontendMentor :- Order Summary Component
&lt;/h2&gt;

&lt;p&gt;Learnings:-&lt;br&gt;
Made an outer-container, and then set the background image as that svg file, due to this there is no distortion in that. Also, set the background-size to 100vw, so that the image fill the whole width of the outer-container.&lt;br&gt;
It is good if you put the below code at the start of each sass file. By this, we can then manually set the margin and padding for each element.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;*{ 
margin:0;
padding:0;
box-sizing:border-box;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In the sass file, while putting colors as hsl or rgb, you have to put spaces between the values otherwise it will give an error. Hence,&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;box-shadow: 0px 0px 16px 5px rgba(0, 0, 0, 0.21);
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;will work but&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;box-shadow: 0px 0px 16px 5px rgba(0 0 0 0.21);      //wontwork
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Set the width of the "card" div not in term of percentage of the "outer-container", because it will shrink in that case as we decrease the size of the window. Better, you should set the width as:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.card{
max-width: 450px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;By this, the size of your card will not decrease as the width of the window decreases.&lt;br&gt;
Setting the media queries:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;@media only screen and (max-width: 600px) {
* {
font-size: 14px;
}
.outer-container {
background: url("./order-summary-component-main/images/pattern-background-mobile.svg") hsl(225deg, 100%, 94%);
background-size: 100vw;
background-repeat: no-repeat;
}
.container {
margin: 70px 0;
width: 330px;
}
.annual-plan {
width: content-width;
}
}

&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Remember that&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;width:content-width;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;is a very powerful tool. Use it wisely.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#frontendmentor%C2%A0-stats-preview-card-component"&gt;
  &lt;/a&gt;
  FrontendMentor :- Stats preview card component
&lt;/h2&gt;

&lt;p&gt;Learnings:-&lt;br&gt;
wasted 30 minutes, trying to put that violet mask over the image, then found the correct way to do that using pseudo elements(covered in day 2, also remember that don't try to use pseudo elements on images, as it will not work sadly).&lt;/p&gt;

&lt;p&gt;HTML code:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="imagediv"&amp;gt;
&amp;lt;img src="./stats-preview-card-component-main/images/image-header-desktop.jpg" alt="" /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS code:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.imagediv{
position: relative;
}
.imagediv::after{
position: absolute;
content:'';
display: block;
inset:0;
width:100%;
opacity:0.5;
height:100%;
background: hsl(277, 84%, 61%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Spent the whole time to fit the image inside of that container, to the left. The best solution I found was using this:-&lt;/p&gt;

&lt;p&gt;HTML:-&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&amp;lt;div class="imagediv"&amp;gt;
&amp;lt;img src="./stats-preview-card-component-main/images/image-header-desktop.jpg" alt=""/&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;CSS -&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;.imagediv {
position: relative;    //  this is used for the point this point.
width:50%;     // width of image container as half of total
img {
object-fit:cover;      //this preserve the aspect ratio and 
                         trims off extra image left                                                                 
width:100%;
height:100%;
}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;If two div's borders are overlapping, then you can combine them using:-
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;border-collapse: collapse;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Full reference:- &lt;a href="https://css-tricks.com/almanac/properties/b/border-collapse/"&gt;CSS tricks&lt;/a&gt;  &lt;/p&gt;

&lt;p&gt;&lt;iframe height="600" src="https://codepen.io/grvskwt/embed/RwVzMzp?height=600&amp;amp;default-tab=result&amp;amp;embed-version=2"&gt;
&lt;/iframe&gt;
&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-checked-pseudo-class"&gt;
  &lt;/a&gt;
  CSS checked pseudo class
&lt;/h3&gt;

&lt;p&gt;The implementation can be seen in the above codepen. &lt;br&gt;
The full description, you can find on:- &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:checked"&gt;MDNdocs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Summary: &lt;a href="https://css-tricks.com/almanac/selectors/c/checked/"&gt;css-tricks&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-raw-element1element2-endraw-selector"&gt;
  &lt;/a&gt;
  CSS &lt;code&gt;element1~element2&lt;/code&gt; Selector
&lt;/h3&gt;

&lt;p&gt;FULL description :-  &lt;a href="https://www.w3schools.com/cssref/sel_gen_sibling.asp"&gt;W3Schools&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Summary: Basically if the code is &lt;code&gt;p~ul&lt;/code&gt; , then it selects all the &lt;code&gt;ul&lt;/code&gt; below &lt;code&gt;p&lt;/code&gt; which have the same parent as &lt;code&gt;p&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#css-raw-elementelement-endraw-selector"&gt;
  &lt;/a&gt;
  CSS &lt;code&gt;element+element&lt;/code&gt; Selector
&lt;/h3&gt;

&lt;p&gt;Summary: If the code is &lt;code&gt;div + p&lt;/code&gt; then it selects all the &lt;code&gt;p&lt;/code&gt; , immediately after &lt;code&gt;div&lt;/code&gt; ( and not as child of div, basically the p which is just after the closing div tag)&lt;/p&gt;

&lt;p&gt;Full reference :- &lt;a href="https://www.w3schools.com/cssref/sel_element_pluss.asp"&gt;w3schools&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#other-frontendmentor-projects-done"&gt;
  &lt;/a&gt;
  Other frontendmentor projects done:-
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;four card feature section&lt;/li&gt;
&lt;li&gt;three column preview card&lt;/li&gt;
&lt;li&gt;profile card component.&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>webdev</category>
      <category>100daysofcode</category>
      <category>frontendmentor</category>
      <category>css</category>
    </item>
    <item>
      <title>Redis caching layer for Cloudflare KV in Golang</title>
      <author>Dinesh</author>
      <pubDate>Wed, 18 Aug 2021 16:29:38 +0000</pubDate>
      <link>https://dev.to/dineshsonachalam/redis-caching-layer-for-cloudflare-kv-in-golang-9cm</link>
      <guid>https://dev.to/dineshsonachalam/redis-caching-layer-for-cloudflare-kv-in-golang-9cm</guid>
      <description>&lt;h2&gt;
  &lt;a href="#why-rediscloudflarekv"&gt;
  &lt;/a&gt;
  Why redis-cloudflare-kv?
&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Cloudflare KV is a highly distributed, eventually consistent, key-value store that spans Cloudflare's global edge. It allows you to store billions of key-value pairs and read them with some average latency (2 to 3 seconds) anywhere in the world.&lt;/li&gt;
&lt;li&gt;Cloudflare KV Read operation is very slow when compared to Redis which offers memory efficiency, fast operating speed, and high availability. So it's better to use Redis as a caching layer for Cloudflare KV to provide fast, economic scaling for your application.&lt;/li&gt;
&lt;li&gt;redis-cloudflare-kv checks if there is a cached result for a query in Redis. &lt;/li&gt;
&lt;li&gt;If not found in the cache, it will retrieve data from Cloudflare KV and on the successful result, cache it in Redis for future queries.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#application-architecture"&gt;
  &lt;/a&gt;
  Application Architecture
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0Cx7kqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/dineshsonachalam/redis-cloudflare-kv/main/architecture.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Z0Cx7kqF--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/dineshsonachalam/redis-cloudflare-kv/main/architecture.png"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation"&gt;
  &lt;/a&gt;
  Installation
&lt;/h2&gt;

&lt;p&gt;You need a working Go environment.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;go get github.com/dineshsonachalam/redis-cloudflare-kv
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#quickstart"&gt;
  &lt;/a&gt;
  Quickstart
&lt;/h2&gt;



&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight go"&gt;&lt;code&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s"&gt;"fmt"&lt;/span&gt;
    &lt;span class="s"&gt;"log"&lt;/span&gt;
    &lt;span class="s"&gt;"os"&lt;/span&gt;

    &lt;span class="n"&gt;rediscloudflarekv&lt;/span&gt; &lt;span class="s"&gt;"github.com/dineshsonachalam/redis-cloudflare-kv"&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;func&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;// Construct a new KV Client object&lt;/span&gt;
    &lt;span class="n"&gt;kvClient&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;rediscloudflarekv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;New&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="c"&gt;// REDIS_URL -&amp;gt; TCP Connection:  redis://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;host&amp;gt;:&amp;lt;port&amp;gt;/&amp;lt;db_number&amp;gt;&lt;/span&gt;
        &lt;span class="c"&gt;//              UNIX Connection: unix://&amp;lt;user&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;/path/to/redis.sock&amp;gt;?db=&amp;lt;db_number&amp;gt;&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"REDIS_URL"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CLOUDFLARE_ACCESS_KEY"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CLOUDFLARE_EMAIL_ADDRESS"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"CLOUDFLARE_ACCOUNT_ID"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;namespaceID&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"TEST_NAMESPACE_ID"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;key1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"opensource.facebook.react"&lt;/span&gt;
    &lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"A declarative, efficient, and flexible JavaScript library for building user interfaces."&lt;/span&gt;
    &lt;span class="n"&gt;key2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"opensource.facebook.react-native"&lt;/span&gt;
    &lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"A framework for building native apps with React."&lt;/span&gt;
    &lt;span class="n"&gt;key3&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"opensource.facebook.flow"&lt;/span&gt;
    &lt;span class="n"&gt;value3&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Adds static typing to JavaScript to improve developer productivity and code quality."&lt;/span&gt;
    &lt;span class="n"&gt;key4&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"opensource.facebook.docusaurus"&lt;/span&gt;
    &lt;span class="n"&gt;value4&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Easy to maintain open source documentation websites."&lt;/span&gt;

    &lt;span class="c"&gt;// Write writes a value identified by a key in Redis and Cloudflare KV&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;kvClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;namespaceID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Write operation is successful for key: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// Read returns the value associated with the given key&lt;/span&gt;
    &lt;span class="c"&gt;// If the key is not available in the Redis server,&lt;/span&gt;
    &lt;span class="c"&gt;// it searches for the key in Cloudflare KV and if the key is available, it writes the key/value in the Redis.&lt;/span&gt;
    &lt;span class="c"&gt;// Then it returns the value associated with the given key.&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;kvClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaceID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Read operation is successful. Key: %v, Value: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c"&gt;// Delete deletes a key/value in Redis and Cloudflare KV&lt;/span&gt;
    &lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kvClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaceID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;status&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Delete operation is successful for key: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;kvClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;namespaceID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;kvClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;namespaceID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;kvClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;namespaceID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;// ListKeysByPrefix returns keys that matches the prefix&lt;/span&gt;
    &lt;span class="c"&gt;// If there are no key's that matches the prefix in the Redis&lt;/span&gt;
    &lt;span class="c"&gt;// We search for the prefix pattern in Cloudflare KV, if there are keys&lt;/span&gt;
    &lt;span class="c"&gt;// that matches the prefix, we return the keys.&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;kvClient&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ListKeysByPrefix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"opensource.facebook"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;namespaceID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ListKeysByPrefix operation is successful. Keys: %v&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c"&gt;// Output:&lt;/span&gt;
&lt;span class="c"&gt;// dineshsonachalam@macbook examples % go run main.go&lt;/span&gt;
&lt;span class="c"&gt;// Write operation is successful for key: opensource.facebook.react&lt;/span&gt;
&lt;span class="c"&gt;// Read operation is successful. Key: opensource.facebook.react, Value: A declarative, efficient, and flexible JavaScript library for building user interfaces.&lt;/span&gt;
&lt;span class="c"&gt;// Delete operation is successful for key: opensource.facebook.react&lt;/span&gt;
&lt;span class="c"&gt;// ListKeysByPrefix operation is successful. Keys: [opensource.facebook.docusaurus opensource.facebook.react-native opensource.facebook.flow]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#license"&gt;
  &lt;/a&gt;
  License
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://choosealicense.com/licenses/mit/"&gt;MIT&lt;/a&gt; © &lt;a href="https://www.github.com/dineshsonachalam"&gt;dineshsonachalam&lt;/a&gt;&lt;/p&gt;

</description>
      <category>cloudflare</category>
      <category>redis</category>
      <category>go</category>
      <category>github</category>
    </item>
    <item>
      <title>Keeping Yourself Safe Online</title>
      <author>Maxim King</author>
      <pubDate>Wed, 18 Aug 2021 16:25:20 +0000</pubDate>
      <link>https://dev.to/maximking1/keeping-yourself-safe-online-oa7</link>
      <guid>https://dev.to/maximking1/keeping-yourself-safe-online-oa7</guid>
      <description>&lt;p&gt;As the Internet evolves so does the threats and attackers that lie below it, did you know 60% of small company’s close within 6 months to cyberattacks?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#protecting-yourself-on-the-internet"&gt;
  &lt;/a&gt;
  Protecting Yourself On The Internet
&lt;/h2&gt;

&lt;p&gt;The internet is probably the most important section in this post, many threats can lie on it. My first recommendation is using DuckDuckGo instead of Google, Google tracks nearly everything you do from your IP to everything your search for there “Personalised Ads” these are mostly intrusive. DuckDuckGo on the other hand doesn't collect any information not even your IP Address, they don’t use Personalised Ads so they are less intrusive on your Privacy.&lt;/p&gt;

&lt;p&gt;The second thing I would recommend is a VPN which stands for Virtual Private Network, this service will be Paid but can be as low as £5 a month I personally recommend &lt;a href="https://www.vyprvpn.com/"&gt;VyperVPN&lt;/a&gt; the one I personally use, &lt;a href="https://www.vyprvpn.com/"&gt;VyperVPN&lt;/a&gt; will connect you to the nearest server so you would look as if your at there Server, this service completely hides your IP online. I choose &lt;a href="https://www.vyprvpn.com/"&gt;VyperVPN&lt;/a&gt; as they provide Zero Logging Servers and even offer there own Zero Logging DNS Servers. &lt;/p&gt;

&lt;p&gt;The third thing I would recommend is using a third-party DNS Provider, your DNS (Domain Name Server) will map a domain to an IP Address, say for example I looked up (blah.com) my DNS Server will say okay (blah.com) goes to (192.168.1.1), your DNS Server will most likely be your ISP’s DNS which most likely track the sites you visit. If you are on windows &lt;a href="https://www.lifewire.com/how-to-change-dns-servers-in-windows-2626242"&gt;visit this guild&lt;/a&gt; and change the DNS Primary to 1.1.1.1 and Secondary to 1.0.0.1 these DNS Servers are CloudFlares which provide the fastest servers and also provide great Privacy.&lt;/p&gt;

&lt;p&gt;The forth thing is always use a Password Manager, do you ever find yourself using the same password over and over again on each site? If a hacker got that password they would have access to all your accounts. I would suggest using a Password Manager like &lt;a href="https://1password.com/"&gt;1Password&lt;/a&gt;, &lt;a href="https://www.dashlane.com/"&gt;Dashlane&lt;/a&gt; or &lt;a href="https://www.lastpass.com/"&gt;Lastpass&lt;/a&gt;. I personally use 1Password due to the extra security features but it is Paid and Dashlane and Lastpass are good Free Options.&lt;/p&gt;

&lt;p&gt;The last thing is to use a AntiVirus, this isn’t directly linked to online but this will prevent you from downloading anything malicious onto your computer. I would recommend looking at &lt;a href="https://www.bitdefender.com/"&gt;Bitdefender&lt;/a&gt; they offer a Free Plan and a great Paid Plan, this is the one I personally use and never had an issue with it…&lt;/p&gt;

&lt;p&gt;Even after using all these it won’t make it impossible to download anything malicious or to get any information exposed or collected. Always use the Internet with caution, it can bring some wonders but also some great dangers..&lt;/p&gt;

</description>
      <category>duckduckgo</category>
      <category>privacy</category>
      <category>security</category>
      <category>productivity</category>
    </item>
    <item>
      <title>Rest vs. GraphQL: A Critical Review</title>
      <author>Anthony M.</author>
      <pubDate>Wed, 18 Aug 2021 16:06:09 +0000</pubDate>
      <link>https://dev.to/amorriscode/rest-vs-graphql-a-critical-review-290b</link>
      <guid>https://dev.to/amorriscode/rest-vs-graphql-a-critical-review-290b</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Originally posted on the &lt;a href="https://wewatch.tech/posts/rest-vs-graphql"&gt;We Watch Tech website&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This week at &lt;a href="https://monthly.com"&gt;work&lt;/a&gt;, an engineer proposed that we start putting effort into ensuring our backend endpoints follow RESTful practices. The team was excited by the idea. Our endpoints don't currently follow any spec, RESTful or otherwise. You never know what you're going to get.&lt;/p&gt;

&lt;p&gt;This proposal reminded me that I've had a talk on my YouTube watchlist for a while. An opinionated, critical view comparing REST and GraphQL. I've enjoyed the GraphQL developer experience in the past. I may be susceptible to &lt;a href="https://en.wikipedia.org/wiki/Shiny_object_syndrome"&gt;shiny object syndrome&lt;/a&gt;, but there's clear pros to using GraphQL... right?&lt;/p&gt;

&lt;p&gt;REST and GraphQL aren't actually the same thing. Z points out that REST is an &lt;strong&gt;architectural style&lt;/strong&gt; while GraphQL is a &lt;strong&gt;language and framework&lt;/strong&gt;. One is more like a suggestion while the other strict and tangible. Both of them help us create a communication layer between our distributed systems. Or, as Z suggests, we'll call them API paradigms for now.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#a-world-of-constraints"&gt;
  &lt;/a&gt;
  A World of Constraints
&lt;/h2&gt;

&lt;p&gt;One of my favourite parts of Z's talk is when he talks about constraints. When making any technical decision we should be looking at the constraints of our system. It seems obvious but defining your constraints can be quite challenging. They're bound to evolve as your systems do as well.&lt;/p&gt;

&lt;p&gt;No matter what solutions we decide on, our choice should always a be a function of our constraints. Z gives a great example of someone who builds a colonial home simply because they like colonial houses. Well, those houses were built because of colonial constraints. Just because you can do something doesn't mean you should.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#constraints-imply-properties"&gt;
  &lt;/a&gt;
  Constraints Imply Properties
&lt;/h3&gt;

&lt;p&gt;Whatever constraints we build &lt;em&gt;into&lt;/em&gt; our system, we can derive certain properties.&lt;/p&gt;

&lt;p&gt;Having a decoupled client and server &lt;em&gt;implies&lt;/em&gt; two codebases that can evolve separately. Having a stateless server &lt;em&gt;implies&lt;/em&gt; that your server is reliable and scaleable. Having a stateless server decoupled from our client will ultimately give us a codebase with reliability, scalability, and evolvability built in.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#properties-of-distributed-systems-and-ecosystems"&gt;
  &lt;/a&gt;
  Properties of Distributed Systems and Ecosystems
&lt;/h2&gt;

&lt;p&gt;So, if constraints imply properties, what properties should we care about? This will also depend on your situation. Z does suggest a few properties to consider.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#distributed-system-properties"&gt;
  &lt;/a&gt;
  Distributed System Properties
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Modifiability&lt;/li&gt;
&lt;li&gt;Visibility&lt;/li&gt;
&lt;li&gt;Portability&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Discoverability&lt;/li&gt;
&lt;li&gt;Type-safety&lt;/li&gt;
&lt;li&gt;Developer experience&lt;/li&gt;
&lt;li&gt;Cost effectivity&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;
  &lt;a href="#distributed-ecosystem-properties"&gt;
  &lt;/a&gt;
  Distributed Ecosystem Properties
&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Community&lt;/li&gt;
&lt;li&gt;Tooling&lt;/li&gt;
&lt;li&gt;Ecosystem maturity&lt;/li&gt;
&lt;li&gt;Resources&lt;/li&gt;
&lt;li&gt;Enterprise readiness&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For any system you're architecting, you'll want to pick the properties you care most about and optimize for those. It's rare that any one solution checks all the boxes.&lt;/p&gt;

&lt;p&gt;Every team is going to have different types of constraints. From business (customer or product requirements) to cultural (resources or knowledge). They will also be optimizing for different properties. Because of this, there will never be a clear winner for arguments like REST vs. GraphQL.&lt;/p&gt;

&lt;p&gt;That won't stop us from arguing about it though, will it? Let the battle commence!&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#the-weigh-in"&gt;
  &lt;/a&gt;
  The Weigh In
&lt;/h2&gt;

&lt;p&gt;There are two contenders in this fight. REST is old. Tried and true but starting to show its age in the ring. GraphQL has a spring in its step. But sometimes rookies make simple mistakes. This is what Z has to say about the pros and cons for each solution.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#rest"&gt;
  &lt;/a&gt;
  REST
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scales indefinitely&lt;/li&gt;
&lt;li&gt;Great performance (thanks HTTP2)&lt;/li&gt;
&lt;li&gt;Tried and true&lt;/li&gt;
&lt;li&gt;Affordance-centric (API is expressed as structured messages)&lt;/li&gt;
&lt;li&gt;Server-driven&lt;/li&gt;
&lt;li&gt;Decoupled client and server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Huge barrier to entry (difficult to master, etc.)&lt;/li&gt;
&lt;li&gt;Challenging mindset shift from SOAP to REST&lt;/li&gt;
&lt;li&gt;Poor (or no) tooling for clients&lt;/li&gt;
&lt;li&gt;No framework or tooling guidance&lt;/li&gt;
&lt;li&gt;Requires discipline&lt;/li&gt;
&lt;li&gt;Even hard for experts to get it right&lt;/li&gt;
&lt;li&gt;Hard to keep consistent&lt;/li&gt;
&lt;li&gt;Hard to govern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#graphql"&gt;
  &lt;/a&gt;
  GraphQL
&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Easy to start with&lt;/li&gt;
&lt;li&gt;Easy to produce and consume&lt;/li&gt;
&lt;li&gt;Lots of hand-holding&lt;/li&gt;
&lt;li&gt;Contract-driven&lt;/li&gt;
&lt;li&gt;Built-in introspection&lt;/li&gt;
&lt;li&gt;Easy to keep consistent&lt;/li&gt;
&lt;li&gt;Easy to govern&lt;/li&gt;
&lt;li&gt;Closer to SOAP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ignores problems of distributed systems&lt;/li&gt;
&lt;li&gt;Queries can be suboptimal&lt;/li&gt;
&lt;li&gt;Bikeshedding age old solutions (caching, etc.)&lt;/li&gt;
&lt;li&gt;DIY scaling and performance&lt;/li&gt;
&lt;li&gt;Ignores hard work done by HTTP (&lt;code&gt;POST&lt;/code&gt; for everything!)&lt;/li&gt;
&lt;li&gt;JSON all the things&lt;/li&gt;
&lt;li&gt;Lack of ecosystem maturity&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#the-clear-winner"&gt;
  &lt;/a&gt;
  The Clear Winner
&lt;/h2&gt;

&lt;p&gt;There isn't one. Both of the options have plenty of pros and cons. Like everything in the world of software, there are many ways to skin an eggplant.&lt;/p&gt;

&lt;p&gt;If you're looking to make a decision between REST and GraphQL, it might not be an easy one. Start by narrowing down the properties that are most important to you and work your way back.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-rest-wins"&gt;
  &lt;/a&gt;
  Where REST Wins
&lt;/h3&gt;

&lt;p&gt;If you're looking to build a system for the long term. REST isn't a new idea. It's been battle tested. There are standards built around important things like authentication, caching, and rate limiting. It has scalability in mind.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#where-graphql-wins"&gt;
  &lt;/a&gt;
  Where GraphQL Wins
&lt;/h3&gt;

&lt;p&gt;The communication between your frontend and backend are simple. Or if you want a data-driven approach to the API paradigm. Also, the developer experience is pretty darn enjoyable.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#socalled-rest"&gt;
  &lt;/a&gt;
  So-Called REST
&lt;/h2&gt;

&lt;p&gt;All of the information covered this far is useful, but it wasn't the most mind blowing for me. You probably don't have to search to hard to see a lot of this covered elsewhere on the interwebs.&lt;/p&gt;

&lt;p&gt;One of the cons Z listed for REST piqued my curiosity. It was the fact that there is a huge barrier to entry. I've seen "RESTful practices" used a lot in my career so far. I thought I &lt;em&gt;knew&lt;/em&gt; REST. It turns out, I've seen more &lt;em&gt;so-called&lt;/em&gt; REST than anything else.&lt;/p&gt;

&lt;p&gt;Here's a quote written in 2008 by &lt;a href="https://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven"&gt;Roy Fielding&lt;/a&gt;(he created REST by the way):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What needs to be done to make the REST architectural style clear on the notion that hypertext is a constraint? In other words, if the engine of application state (and hence the API) is not being driven by hypertext, then it cannot be RESTful and cannot be a REST API. Period. Is there some broken manual somewhere that needs to be fixed?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I've never actually seen a REST API that reached &lt;a href="https://restfulapi.net/richardson-maturity-model/#level-three"&gt;level three on the Richardson Maturity Model&lt;/a&gt;. One that has true discoverability and uses &lt;a href="https://restfulapi.net/hateoas/"&gt;hypermedia as the engine of application state&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But does that matter?&lt;/p&gt;

&lt;p&gt;Z argues that GraphQL is far better than a so-called REST API. The proposal at work this week was for a &lt;em&gt;so-called&lt;/em&gt; REST API and I'm not mad about it. We're optimizing for properties like simplicity, portability, discoverability, and developer experience. In our current system, those properties are sadly lacking.&lt;/p&gt;

&lt;p&gt;There's a lot of tooling out there that makes REST more accessible these days too. From the &lt;a href="https://swagger.io/specification/"&gt;OpenAPI specification&lt;/a&gt; to things like &lt;a href="https://flask-restful.readthedocs.io/en/latest/"&gt;Flaks RESTful&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even with that in mind, I can't help but think about GraphQL. Can we optimize for the properties listed about while solving other problems clients face like slow and spotty internet?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#microservices"&gt;
  &lt;/a&gt;
  Microservices
&lt;/h2&gt;

&lt;p&gt;When mentioning microservices, I was surprised to hear Z recommend REST. He says it is almost as if they were born to be used together. What about &lt;a href="https://grpc.io/"&gt;gRPC&lt;/a&gt;? Or an &lt;a href="https://en.wikipedia.org/wiki/Event-driven_architecture"&gt;event-driven architecture&lt;/a&gt;? I think there's more to the story here.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#no-contest"&gt;
  &lt;/a&gt;
  No Contest
&lt;/h2&gt;

&lt;p&gt;This talk hasn't made me more confident in my ability to implement a RESTful API. It hasn't shown me that either option is the obvious solution for my API communication woes.&lt;/p&gt;

&lt;p&gt;We will forever have to decide between many options to solve our problems. Framing these decisions based on the constraints and desired properties of our systems will always lead to better results.&lt;/p&gt;

&lt;p&gt;Even though there's no clear winner to this fight, there are a ton of great resources about REST, GraphQL, and APIs. Here are a few worth looking at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://restfulapi.net/"&gt;REST API Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://graphql.org/learn/"&gt;Introduction to GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.apollographql.com/blog/graphql/basics/graphql-vs-rest/"&gt;GraphQL vs. REST from Apollo GraphQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.philosophicalhacker.com/post/rest-in-2018"&gt;The so-called 'RESTful' web in 2018 and beyond&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.github.com/en/graphql"&gt;GitHub's GraphQL documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://adidas.gitbook.io/api-guidelines"&gt;adidas' API Guidelines*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/good-api/rest-vs-graphql-a-critical-review-5f77392658e7"&gt;Z's own writeup about his talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;*I never thought I'd be reading API guidelines from a shoe/fashion company. It turns out &lt;a href="https://github.com/adidas" rel="”noreferrer"&gt;they have a decent amount of open source projects&lt;/a&gt;!&lt;/p&gt;

</description>
      <category>graphql</category>
      <category>rest</category>
      <category>api</category>
      <category>techtalks</category>
    </item>
    <item>
      <title>Deploying a "serverless" app</title>
      <author>Luke</author>
      <pubDate>Wed, 18 Aug 2021 16:05:41 +0000</pubDate>
      <link>https://dev.to/styxofdynamite/deploying-a-serverless-app-3fa0</link>
      <guid>https://dev.to/styxofdynamite/deploying-a-serverless-app-3fa0</guid>
      <description>&lt;h2&gt;
  &lt;a href="#background"&gt;
  &lt;/a&gt;
  Background
&lt;/h2&gt;

&lt;p&gt;So last night I decided to deploy a serverless app that generates some number of random words.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#aws-services"&gt;
  &lt;/a&gt;
  AWS Services
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Route53&lt;/li&gt;
&lt;li&gt;Lambda&lt;/li&gt;
&lt;li&gt;API Gateway&lt;/li&gt;
&lt;li&gt;S3 Storage&lt;/li&gt;
&lt;li&gt;Cloudfront Cache&lt;/li&gt;
&lt;li&gt;Certificate Manager&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First up, this isn't a tutorial as there are plenty of those about and I wanted to share a more high level description of the various AWS services used and how they all linked together in my example deployment.&lt;/p&gt;

&lt;p&gt;So first off the example app, its a very simple react app that takes a user given number of random words to return and a time setting as to how frequently those words should be updated.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--l5Igyr7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0vg89ezrd86fjq2e14e.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--l5Igyr7E--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/c0vg89ezrd86fjq2e14e.png" alt="JustRandom.net"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This react app is deployed at &lt;a href="//justrandom.net"&gt;justrandom.net&lt;/a&gt; a domain name configured via &lt;strong&gt;Route53&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This app is being served from an &lt;strong&gt;S3 Bucket&lt;/strong&gt;, via &lt;strong&gt;Cloudfront&lt;/strong&gt; using an AWS managed SSL Certificate.&lt;/p&gt;

&lt;p&gt;When the app is set to fetch some random words, every 5, 15 or 30 seconds, it sends a request to an &lt;strong&gt;API Gateway&lt;/strong&gt; this request is then passed to a &lt;strong&gt;Lambda&lt;/strong&gt; function, which is written in Javascript.&lt;/p&gt;

&lt;p&gt;This &lt;strong&gt;Lambda&lt;/strong&gt; function returns a JSON response containing the requested number of random words back to the &lt;strong&gt;API Gateway&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is then returned to the waiting react app, and all in less than 40ms in most cases!&lt;/p&gt;

</description>
      <category>serverless</category>
      <category>aws</category>
      <category>react</category>
      <category>api</category>
    </item>
    <item>
      <title>10 reasons to switch from Java to Kotlin right now!</title>
      <author>v-aksenov</author>
      <pubDate>Wed, 18 Aug 2021 16:05:14 +0000</pubDate>
      <link>https://dev.to/vaksenov/10-reasons-to-switch-from-java-to-kotlin-right-now-3ihj</link>
      <guid>https://dev.to/vaksenov/10-reasons-to-switch-from-java-to-kotlin-right-now-3ihj</guid>
      <description>&lt;p&gt;My name is Viacheslav Aksenov, I am developer of big and complex backend systems. I started from Java 7, than upped to Java 8 and sometimes Java 11 for developing. Last year I Writing all new code on Kotlin and this is totally changed my life. I didn't know before that Kotlin can be used for backend developing and more than - for backend developing using all top Java framework like Spring, Jackson, etc.&lt;/p&gt;

&lt;p&gt;So I want to share my happiness with you and give 10 reasons of why you should to take a see on Kotlin and integrate it to your projects.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#1-null-safety"&gt;
  &lt;/a&gt;
  1. Null safety
&lt;/h1&gt;

&lt;p&gt;In Kotlin, it is required to explicitly indicate whether a particular method can return null or not. Thus, we can assume that all data is already wrapped in an analogue of Optional. And NullPointerException will be so rare by you that you will miss it.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveReviewNullable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reviewRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;savedReviewNullable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;saveReviewNullable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt; &lt;span class="c1"&gt;// can throw NPE. Not safety&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;savedReviewNotNull&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;saveReviewNullable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// safety way&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#2-highlighting-the-main-constructor"&gt;
  &lt;/a&gt;
  2. Highlighting the main constructor
&lt;/h1&gt;

&lt;p&gt;The bottom line is: there is a Primary constructor and a Secondary constructor. Helpers are required to call the main one as a constructor of the parent class.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"fixed color"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#3-initialization-and-logic-of-working-with-dto-classes"&gt;
  &lt;/a&gt;
  3. Initialization and logic of working with DTO classes
&lt;/h1&gt;

&lt;p&gt;The example is hackneyed, but as clear as possible.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;And now it's the same in Java:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Cat&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="nf"&gt;getColor&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;Integer&lt;/span&gt; &lt;span class="nf"&gt;getHeight&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getClass&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="nc"&gt;Cat&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;color&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hashCode&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nc"&gt;Objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It seems to me that even comments are superfluous here.&lt;/p&gt;

&lt;p&gt;Data class pointers in Kotlin by default imply getter, setter (for var fields), equals, hashcode, toString for all fields. If you want, you can override each of these methods in your own way, but this is rarely required.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"overridden toString"&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#4-explicit-declaration-of-mutable-and-immutable-fields-varval"&gt;
  &lt;/a&gt;
  4. Explicit declaration of mutable and immutable fields - var/val
&lt;/h1&gt;

&lt;p&gt;Another advantage: in Kotlin, you get pretty simple and elegant constructs. If you want the dto field to be changeable, then var is used to declare it. Then the setter method will be created and the field will not be final.&lt;/p&gt;

&lt;p&gt;And if you need to make the field immutable, you should use val for the declaration. It looks very nice and simple. Plus no need to follow up on helper methods.&lt;/p&gt;

&lt;p&gt;Example: the color and height fields can be changed after creation, and the name can only be changed when the object is initialized:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#5-collections-are-immutable-by-default"&gt;
  &lt;/a&gt;
  5. Collections are immutable by default
&lt;/h1&gt;

&lt;p&gt;What appeared in Java a little later has long been in Kotlin - creating collections is immediately immutable.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;map&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mapOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;set&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;setOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Any changes to these collections will create a new immutable collection after conversion:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;plus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"three"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;But you won't be able to change any element separately. For classic mutable collections, explicitly mutable analogs are used:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableListOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;map&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableMapOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;set&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;mutableSetOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#6-extensions"&gt;
  &lt;/a&gt;
  6. Extensions.
&lt;/h1&gt;

&lt;p&gt;For example you have really uncomfortable model from other API, that store data in really high nesting. In Java you would need to write converter from one useless model to usefull one.&lt;/p&gt;

&lt;p&gt;In Kotlin you can just add Exctension for any class, even for class from external libriary and use it as you want:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;SomeBadModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;innerModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;EvenBadModel&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;EvenBadModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tons&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;SomeBadModel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doGoodStuff&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;any&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;?):&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;usefullLogicHere&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#7-working-with-complex-classes-using-primitive-methods"&gt;
  &lt;/a&gt;
  7. Working with complex classes using primitive methods
&lt;/h1&gt;

&lt;p&gt;An advantage of Kotlin, which I never cease to rejoice in is the ability to use operators for basic operations on complex classes. If you need to add BigDecimal numbers, you take them and write them through plus. You do not need to explicitly call the method on the first term.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;a&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BigDecimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;b&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BigDecimal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sum&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In Java, you need to call a special method:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="nc"&gt;BigDecimal&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BigDecimal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;BigDecimal&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;BigDecimal&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="nc"&gt;BigDecimal&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's the same with arrays: if you want to remove an element from a mutable array, you write the array minus this element. And if the element is present, then it will be removed.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;list&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"two"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="s"&gt;"one"&lt;/span&gt; &lt;span class="c1"&gt;// list = ["two"]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#8-possibility-of-oneline-methods-really-on-one-line"&gt;
  &lt;/a&gt;
  8. Possibility of one-line methods really on one line
&lt;/h1&gt;

&lt;p&gt;If the method is simple and consists of one operation or a chain of operations written in one line, then it is not necessary to write curly braces and return. You write directly:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getReviewByTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reviewRepository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getAllByTitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Instead of Java option:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight java"&gt;&lt;code&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reviewRepository&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getAllByTitle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#9-scope-functions"&gt;
  &lt;/a&gt;
  9. Scope functions
&lt;/h1&gt;

&lt;p&gt;Interesting moves towards functional programming in the spirit of highlighting context: lambdas can be rotated as you like.&lt;/p&gt;

&lt;p&gt;There are let, apply, also, with, run functions. Because of their abundance, at first the question arises: what is suitable for a particular case. But when you get used to it, it becomes unclear how you used to live without them.&lt;/p&gt;

&lt;p&gt;A simple example: take the result and process it somehow:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;review&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Review&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;saveReview&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;comment&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Or initialize the object and additionally initialize its var fields:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Fred"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;daoService&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getPopularColor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h1&gt;
  &lt;a href="#10-easy-to-integrate-into-an-existing-java-project"&gt;
  &lt;/a&gt;
  10. Easy to integrate into an existing Java project.
&lt;/h1&gt;

&lt;p&gt;If you are just looking at Kotlin for the backend, then keep in mind that in the environment that launches your project in Java 8, you can run a compiled project in Kotlin without dancing with a tambourine. Yes, on the same jvm, on the same environment and with a minimum of effort. &lt;/p&gt;

&lt;p&gt;It was a discovery for me that even within the same application there can be classes in Java and Kotlin. All the magic happens at compile time. Depending on the settings, you can specify what to build first: Kotlin classes or Java classes.&lt;/p&gt;

&lt;p&gt;Compilation of Kotlin sources into byte code from Java LTS - 8, 11 and (so far experimental) 16 is now available. &lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#conclusions"&gt;
  &lt;/a&gt;
  Conclusions
&lt;/h1&gt;

&lt;p&gt;Someone might say that this is sugar sugar and they will be right. But on my own I will say: if a large number of boilerplate things are included in the language, and you do not need to constantly think about them, the development process becomes simpler, the number of errors is less. But you need to think about the code style more often, because without it you can screw a lot.&lt;/p&gt;

&lt;p&gt;Now I still continue to write and see code in Java, but in 99% of cases this is due to educational programs in which I take part as a mentor.&lt;/p&gt;

&lt;p&gt;I advise everyone to try it - at least on a pet project to understand whether the Kotlin paradigms are right for you or not. &lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>java</category>
      <category>programming</category>
      <category>jvm</category>
    </item>
  </channel>
</rss>
