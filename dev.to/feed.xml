<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>DEV Community</title>
    <author>DEV Community</author>
    <description>A constructive and inclusive social network for software developers. With you every step of your journey.</description>
    <link>https://dev.to</link>
    <language>en</language>
    <item>
      <title>Usando a Biblioteca Exposed</title>
      <author>Ederson Ferreira</author>
      <pubDate>Mon, 27 Sep 2021 00:33:42 +0000</pubDate>
      <link>https://dev.to/kotlinautas/usando-a-biblioteca-exposed-442</link>
      <guid>https://dev.to/kotlinautas/usando-a-biblioteca-exposed-442</guid>
      <description>&lt;h2&gt;
  &lt;a href="#kotlinautas"&gt;
  &lt;/a&gt;
  Kotlinautas
&lt;/h2&gt;

&lt;p&gt;Esse conteúdo é oferecido e distribuído pela comunidade &lt;a href="https://twitter.com/kotlinautas/"&gt;Kotlinautas&lt;/a&gt;, uma comunidade brasileira que busca oferecer conteúdo gratuito sobre a linguagem Kotlin em um espaço plural.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--BE6z6Pw1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jreawpvk6whxigcpmctf.png" alt="capa Kotlinautas"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-um-orm"&gt;
  &lt;/a&gt;
  O quê é um ORM?
&lt;/h2&gt;

&lt;p&gt;ORM (Mapeamento de Objeto Relacional) é uma maneira de mapear dados de um banco de dados, em objetos de uma aplicação. Como se fosse uma ponte entre classes da nossa aplicação, e o banco de dados da aplicação.&lt;/p&gt;

&lt;p&gt;ORM's servem principalmente para facilitar a comunicação entre uma aplicação e seu banco de dados. Facilitando processos de leitura, escrita, atualização e remoção de dados.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-%C3%A9-exposed"&gt;
  &lt;/a&gt;
  O quê é Exposed?
&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt; é a biblioteca oficial de ORM para Kotlin, criada pela própria JetBrains. Uma de suas principais vantagens é poder usar diferentes bancos de dados, e poder trocar qual banco você está usando de maneira fácil. A lista de bancos de dados atualmente suportada pelo Exposed é:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;H2&lt;/li&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MariaDB&lt;/li&gt;
&lt;li&gt;Oracle&lt;/li&gt;
&lt;li&gt;PostgreSQL&lt;/li&gt;
&lt;li&gt;SQL Server&lt;/li&gt;
&lt;li&gt;SQLite&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#o-qu%C3%AA-vamos-criar"&gt;
  &lt;/a&gt;
  O quê vamos criar?
&lt;/h2&gt;

&lt;p&gt;Vamos criar um sistema de cadastro de planetas. Onde poderemos inserir informações sobre um planeta, e essas informações serão inseridas em um banco de dados. Com isso, poderemos usar a Exposed para conectar a nossa aplicação, á um banco de dados que desejarmos.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#criando-o-projeto"&gt;
  &lt;/a&gt;
  Criando o projeto
&lt;/h2&gt;

&lt;p&gt;Abra seu IntelliJ no menu inicial e clique em &lt;em&gt;New Project&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IfdAWxqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3xauc7y38mqtdej31ka.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IfdAWxqk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/e3xauc7y38mqtdej31ka.png" alt="botão New Project no menu inicial do IntelliJ"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Depois, selecione a opção &lt;strong&gt;Kotlin DSL build script&lt;/strong&gt;, selecione também a opção &lt;strong&gt;Kotlin/JVM&lt;/strong&gt;, e opicionalmente remova a primeira opção &lt;strong&gt;Java&lt;/strong&gt;. Essa opção não vai mudar em nada, pois ela dá suporte do Gradle á linguagem Java, mas apenas iremos usar Kotlin.&lt;/p&gt;

&lt;p&gt;Após isso, clique em &lt;strong&gt;Next&lt;/strong&gt; e escreva o nome do projeto e a localização na sua máquina. Essas duas opção são completamente pessoais, caso não tenha nenhuma ideia, coloque algo como &lt;strong&gt;exposed&lt;/strong&gt; apenas como identificação.&lt;/p&gt;

&lt;p&gt;Agora, com o projeto aberto, vá ao aquivo &lt;code&gt;build.gradle.kts&lt;/code&gt; e adicione as dependências da Exposed, com a seção &lt;code&gt;dependencies&lt;/code&gt; ficando assim:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kotlin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"stdlib"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-core:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-dao:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.jetbrains.exposed:exposed-jdbc:0.33.1"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"com.h2database:h2:1.4.199"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-api:1.7.5"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;implementation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"org.slf4j:slf4j-simple:1.6.4"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora, clique no elefante no canto superior direito para carregar as alterações no Gradle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNZzWp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25316fmqf0v5omh9q6fi.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--jSNZzWp5--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/25316fmqf0v5omh9q6fi.png" alt="Elefante do Gradle no canto superior direito"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Após isso, poderemos começar a programar. Você pode criar um arquivo em &lt;code&gt;src/main/kotlin/&lt;/code&gt; chamado &lt;code&gt;main.kt&lt;/code&gt; para ser o arquivo principal da aplicação.&lt;/p&gt;

&lt;p&gt;Mas com qualquer nome de arquivo, como você irá usar a Exposed, sempre se lembre de importar a Exposed no começo do arquivo:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h2&gt;
  &lt;a href="#usando-a-exposed"&gt;
  &lt;/a&gt;
  Usando a Exposed
&lt;/h2&gt;

&lt;p&gt;Primeiro, vamos precisar criar um objeto que irá representar uma tabela em nosso banco de dados, e dentro desse objeto inserir as colunas do nosso banco (como propriedades). Isso pode ser feito da seguinte maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.*&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;org.jetbrains.exposed.sql.transactions.transaction&lt;/span&gt;

&lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Table&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nome&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;varchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"nome"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massa&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"massa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solido&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"solido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos a palavra &lt;code&gt;object&lt;/code&gt; para criar o objeto, colocamos o nome da tabela &lt;code&gt;Planetas&lt;/code&gt;, e o tipo da variável, que é um tipo da Exposed, Sendo &lt;code&gt;Table&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Dentro do objeto, criamos três variáveis, sendo &lt;code&gt;nome&lt;/code&gt;, &lt;code&gt;massa&lt;/code&gt;, e &lt;code&gt;solido&lt;/code&gt;. &lt;code&gt;nome&lt;/code&gt; irá guardar o nome do planeta, &lt;code&gt;massa&lt;/code&gt; irá guardar a massa do planeta comparada á terra e &lt;code&gt;solido&lt;/code&gt; irá determinar se o planeta é sólido ou não;&lt;/li&gt;
&lt;li&gt;Para determinar essas variáveis, usamos tipos de dados de um banco de dados, como &lt;code&gt;varchar&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, e &lt;code&gt;bool&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Após isso, podemos criar a nossa função &lt;code&gt;main&lt;/code&gt;. Dentro dela, vamos primeiramente conectar ao banco de dados. Isso pode ser feito com a função &lt;code&gt;Database.connect&lt;/code&gt; dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Estamos usando o banco de dados H2. Um banco de dados Java, que pode funcionar apenas na memória. Vamos usar esse banco de dados pois a cada vez que rodarmos o programa, teremos um novo banco totalmente zerado. Com isso você ficará livre para testar o banco, criando, lendo, editando e removendo dados;&lt;/li&gt;
&lt;li&gt;Para fazer essa conexão, tivemos que passar um texto que representa esse banco. Caso você queira mudar o banco, você apenas irá precisar mudar esse texto;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora precisamos inserir a tabela &lt;code&gt;Planetas&lt;/code&gt; que criamos no banco. Isso pode ser feito de maneira completamente automática usando a função &lt;code&gt;SchemaUtils.create&lt;/code&gt;. Essa função pode ser usada da seguinte maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Usamos um bloco &lt;code&gt;transaction&lt;/code&gt; pois toda conexão ao banco (escrita, leitura, edição e remoção) precisa estar dentro de um bloco &lt;code&gt;transaction&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;Passamos ao &lt;code&gt;SchemaUtils.create&lt;/code&gt; o nosso objeto &lt;code&gt;Planetas&lt;/code&gt;. Com isso, essa tabela será criada no banco de dados;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, vamos criar um bloco &lt;code&gt;while (true)&lt;/code&gt; onde iremos executar um mesmo trecho de código eternamente, onde iremos ler o nome, massa e se o planeta é sólido ou não, vamos enviar esses dados ao banco de dados, e também mostrar todas as linhas do banco na tela.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos usar a função &lt;code&gt;readLine&lt;/code&gt; para pegar os dados da linha de comando, mostrando na tela pergunta por pergunta:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;na variável &lt;code&gt;nomePlaneta&lt;/code&gt; apenas transformamos o texto escrito na linha de comando em &lt;code&gt;String&lt;/code&gt; com &lt;code&gt;.toString()&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;na variável &lt;code&gt;massaPlaneta&lt;/code&gt; primeiro transformamos o texto escrito em &lt;code&gt;String&lt;/code&gt;, e depois transformamos essa &lt;code&gt;String&lt;/code&gt; em &lt;code&gt;Double&lt;/code&gt;. Para assim obtermos o número decimal da massa do planeta em relação á terra;&lt;/li&gt;
&lt;li&gt;na variável &lt;code&gt;solidoPlaneta&lt;/code&gt; testamos se o texto escrito é igual á "sim". se essa condição for verdadeira, o planeta é sólido. Se não, o planeta não é sólido;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora vamos executar a transação para inserirmos esses dados no banco:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Para inserirmos esses dados, podemos usar a função &lt;code&gt;Planetas.insert&lt;/code&gt;, informando o valor de cada coluna do banco com &lt;code&gt;it[COLUNA] = valor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora já conseguimos escrever dados no banco. Por fim, vamos pegar todos os dados do banco, e mostrar na tela. Mostrando que realmente conseguimos escrever os dados. Primeiro, vamos pegar todas as linhas da tabela &lt;code&gt;Planetas&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;planetasSalvos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Agora vamos percorrer por todo essa lista de dados, e mostrar na tela planeta por planeta usando um &lt;code&gt;.map&lt;/code&gt;:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
  &lt;span class="nc"&gt;Database&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jdbc:h2:mem:regular;DB_CLOSE_DELAY=-1;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"org.h2.Driver"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;SchemaUtils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira o nome do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;nomePlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Insira a massa do planeta: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;massaPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;toDouble&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"O planeta é sólido? [sim/não]: "&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;solidoPlaneta&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;readLine&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sim"&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nomePlaneta&lt;/span&gt;
          &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;massa&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;massaPlaneta&lt;/span&gt;
          &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;solidoPlaneta&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;planetasSalvos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;selectAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="n"&gt;planetasSalvos&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;solido&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
          &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Planeta ${it[Planetas.nome]} tem ${it[Planetas.massa]} massas terrestres e é sólido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Planeta ${it[Planetas.nome]} tem ${it[Planetas.massa]} massas terrestres e não é sólido"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Dentro de um &lt;code&gt;map&lt;/code&gt;, percorrermos elemento por elemento, e para nos referirmos ao elemento atual, podemos usar a variável &lt;code&gt;it&lt;/code&gt;. e dentro desse &lt;code&gt;it&lt;/code&gt; podemos pegar os valores de cada linha, podendo assim mostrar na tela;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agora, executando esse programa, poderemos ver na prática como criamos um código que pode inserir e ler dados de maneira dinâmica:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Insira o nome do planeta: Mercúrio
Insira a massa do planeta: 0.1
O planeta é sólido? [sim/não]: sim
Planeta Mercúrio tem 0.1 massas terrestres e é sólido
Insira o nome do planeta: Vênus
Insira a massa do planeta: 0.9
O planeta é sólido? [sim/não]: sim
Planeta Mercúrio tem 0.1 massas terrestres e é sólido
Planeta Vênus tem 0.9 massas terrestres e é sólido
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#update-e-delete"&gt;
  &lt;/a&gt;
  Update e Delete
&lt;/h3&gt;

&lt;p&gt;Duas operações que não usamos foram a &lt;strong&gt;Update&lt;/strong&gt;e &lt;strong&gt;Delete&lt;/strong&gt;. Essas duas são muito parecidas em seu uso na Exposed. Pois nas duas é (quase sempre) necessário usar um parâmetro &lt;code&gt;WHERE&lt;/code&gt; para definir quais linhas desejamos mudar/remover. Por exemplo, podemos fazer um Update com WHERE colocando a condição como argumento da função, e a alteração em si no corpo. Dessa maneira:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s"&gt;"teste"&lt;/span&gt; &lt;span class="p"&gt;}){&lt;/span&gt;
    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Vênus"&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;ul&gt;
&lt;li&gt;Colocamos a condição entre &lt;code&gt;{}&lt;/code&gt; como argumento da função, e no corpo alteramos a linha diretamente;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E para o Delete podemos fazer a mesma coisa, mas agora apenas precisamos colocar a condição:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight kotlin"&gt;&lt;code&gt;&lt;span class="nf"&gt;transaction&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deleteWhere&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nc"&gt;Planetas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s"&gt;"teste"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#usando-outros-bancos-de-dados"&gt;
  &lt;/a&gt;
  Usando outros bancos de dados
&lt;/h3&gt;

&lt;p&gt;Caso você queira usar os outros bancos de dados que a Exposed suporta, você pode ver a lista de URL's de conexão de diferentes bancos. Essa lista pode ser acessada &lt;a href="https://github.com/JetBrains/Exposed/wiki/DataBase-and-DataSource"&gt;clicando aqui&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#finaliza%C3%A7%C3%A3o"&gt;
  &lt;/a&gt;
  Finalização
&lt;/h2&gt;

&lt;p&gt;Nesse artigo você aprendeu como usar de forma básica a biblioteca &lt;a href="https://github.com/JetBrains/Exposed"&gt;Exposed&lt;/a&gt;, para escrever, ler, editar e remover dados de um banco.&lt;/p&gt;

&lt;p&gt;Obrigado por ler 💙&lt;/p&gt;

</description>
      <category>kotlin</category>
      <category>backend</category>
      <category>database</category>
    </item>
    <item>
      <title>Big O Basics  </title>
      <author>Danielle Ellis</author>
      <pubDate>Sun, 26 Sep 2021 23:04:51 +0000</pubDate>
      <link>https://dev.to/thedanielleellis/big-o-basics-3j6h</link>
      <guid>https://dev.to/thedanielleellis/big-o-basics-3j6h</guid>
      <description>&lt;p&gt;The code we choose to use can impact the speed and the performance of our program. How would we know which algorithm is most efficient? Big O Notation is used in Computer Science and measures how quickly the runtime of an algorithm based on the number of input in a function. &lt;/p&gt;

&lt;p&gt;Big O looks at the worst case scenario or the max number of steps to take in a problem. On the other hand, Big Omega looks at the best case scenario or the least number of steps to take in a problem. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#common-runtimes-from-least-to-greatest-effectiveness"&gt;
  &lt;/a&gt;
  Common Runtimes from least to greatest effectiveness:
&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;strong&gt;O(n^2)&lt;/strong&gt;: Quadratic time - as (n) grows, runtime squares. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(n)&lt;/strong&gt;: Linear - as (n) scales, runtime scales. &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(log n)&lt;/strong&gt;: Logarithmic time - halves dataset until it finds (n). &lt;/li&gt;
&lt;li&gt;
&lt;strong&gt;O(1)&lt;/strong&gt;: Constant - as (n) grows, there is no impact. &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#big-o-complexity-chart"&gt;
  &lt;/a&gt;
  Big O Complexity chart
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--NZrROxqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4c3l6pys5u3v1a6s9g8.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--NZrROxqO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h4c3l6pys5u3v1a6s9g8.png" alt="Big ) Chart"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This chart shows the runtime with green shaded area being the most effective to the red shaded areas being the least effective. &lt;/p&gt;

</description>
      <category>computerscience</category>
      <category>algorithms</category>
      <category>codenewbie</category>
    </item>
    <item>
      <title>Git and GitHub: The Complete Guides - Chapter 7: Forking and Cloning</title>
      <author>Goran Kortjie</author>
      <pubDate>Sun, 26 Sep 2021 22:17:15 +0000</pubDate>
      <link>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-7-forking-and-cloning-25gl</link>
      <guid>https://dev.to/ifierygod/git-and-github-the-complete-guides-chapter-7-forking-and-cloning-25gl</guid>
      <description>&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---q85aXGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r15spp4r75strpqbnm05.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---q85aXGs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/r15spp4r75strpqbnm05.gif" alt="hello-bubble"&gt;&lt;/a&gt;&lt;br&gt;
Today we are going to copy 'someone else's' repository on our GitHub account and learn how to clone it to our local computer. We will be looking at &lt;strong&gt;Forking&lt;/strong&gt; and &lt;strong&gt;Cloning&lt;/strong&gt; in GitHub.&lt;/p&gt;

&lt;p&gt;Those two options allow us to get access to any open source repositories which are available on GitHub, it allows us to work on them, make some changes, update files and contribute those updates to the original &lt;u&gt;maintainers/owner&lt;/u&gt; of the project.&lt;/p&gt;
&lt;h4&gt;
  &lt;a href="#here-we-will-cover"&gt;
  &lt;/a&gt;
  Here we will cover:
&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Forking&lt;/li&gt;
&lt;li&gt;Cloning&lt;/li&gt;
&lt;li&gt;Contribute to the original project&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--r6x08k90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywjsn5798jowhj6kmzs3.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--r6x08k90--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ywjsn5798jowhj6kmzs3.gif" alt="collab"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;
  &lt;a href="#forking"&gt;
  &lt;/a&gt;
  Forking
&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;To follow along you will need to create a second account on GitHub.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Once we have a new account we need to search for the project we've been working on so far, &lt;em&gt;i.e our first account&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In general we can search and use any of the open source repositories available on GitHub.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We need to search for the &lt;em&gt;username&lt;/em&gt; of the previous account because if we just search for the name of the project which in this case is &lt;code&gt;gitProject&lt;/code&gt;, we will get tons of results.&lt;/p&gt;

&lt;p&gt;To search for the username of the previous project we type:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;iFieryGodME
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;My username is &lt;strong&gt;iFieryGodME&lt;/strong&gt; but yours will be different!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Once we run the search, we should come across a list. At the bottom of the list is a tab called &lt;code&gt;Users&lt;/code&gt;, when we click on that we should see our username of the previous account.&lt;/p&gt;

&lt;p&gt;When we click on the account, we are taken to the overview of the account where we will see the repository we've been working on as well as some other things specific to our account.&lt;/p&gt;

&lt;p&gt;We click on the repository and at the very top-right, we should see the button that says &lt;code&gt;fork&lt;/code&gt;. We click this &lt;code&gt;fork&lt;/code&gt; button to begin the forking process.&lt;/p&gt;

&lt;p&gt;It will take a few seconds for the process to complete and once it is done, we will see the entire repository has been copied to our new account.🍴&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wxItSyTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2znf1iopoidf4ito68zx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wxItSyTq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/2znf1iopoidf4ito68zx.gif" alt="forking-on-github"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now we have the exact same copy of the original repo, all the source files are here as well as all the commits which have been made so far. The fork option in GitHub allows us to copy the original repository to our account.&lt;/p&gt;

&lt;p&gt;If we go back to the original repo, at the top-right, right after the fork button we will see the number of forks. If we click on the number we will see the owner of the original repo and the username who forked the repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--IsZ4MiTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqnl6461i8h6lteaq5s4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--IsZ4MiTB--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cqnl6461i8h6lteaq5s4.gif" alt="github-fork"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#cloning"&gt;
  &lt;/a&gt;
  Cloning
&lt;/h2&gt;

&lt;p&gt;To start with cloning lets go to the terminal in VS-CODE and create a new folder on the desktop directory.&lt;/p&gt;

&lt;p&gt;Since we are in the project directory currently, we need to go up one directory by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we need to create the folder and call it &lt;code&gt;git-project-clone&lt;/code&gt; by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;mkdir git-project-clone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;After the folder is created we can enter into it by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd git-project-clone
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Awesome we done here for now!💪&lt;/p&gt;

&lt;p&gt;We now have to go back to GitHub account with our original project and click on the green button that reads &lt;code&gt;Code&lt;/code&gt;, a dropdown will appear and we see a link, we copy the link by clicking on the &lt;code&gt;copy icon&lt;/code&gt; to the right of the link.&lt;/p&gt;

&lt;p&gt;Once the link is copied, go back to the terminal and run the following command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by the link we copied on GitHub. For example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/iFieryGodME/gitProject.git
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Your link will be different to mine since it will have a different account name or username.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVeibe59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi4z70cwlpag101vbcmx.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ZVeibe59--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oi4z70cwlpag101vbcmx.gif" alt="git-clone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Awesome job, we just cloned the remote repo to our local folder we created.👥&lt;/p&gt;

&lt;p&gt;We can check this by running the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command will display to us the files and folders inside of our directory.&lt;/p&gt;

&lt;p&gt;We will see a folder with the name of our original project and if we go into it and show its contents, we will see all the source files. Also if we run the history we will see all the commits that we ran on the original repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--qNhP9qt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v731prryhiicajpczfb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--qNhP9qt7--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5v731prryhiicajpczfb.gif" alt="git-clone"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#contribute-to-the-original-project"&gt;
  &lt;/a&gt;
  Contribute to the original project
&lt;/h2&gt;

&lt;p&gt;Let us consider how we can contribute to an open source repository. Nowadays there are tons of open source projects on Github, which many different developers are working on. They copy the repo's, update them and then send pull requests to the owners.&lt;/p&gt;

&lt;p&gt;On the other side of things, the owners receive pull requests from the contributors, they consider the changes and if they are happy, they merge the updates with original repository.&lt;/p&gt;

&lt;p&gt;This process is called &lt;strong&gt;Contributing&lt;/strong&gt;, and this is the way different libraries and frameworks are updating today.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" alt="collab-human-paper-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h5&gt;
  &lt;a href="#we-are-going-to-simulate-the-scenario-of-contributing"&gt;
  &lt;/a&gt;
  We are going to simulate the scenario of contributing.
&lt;/h5&gt;

&lt;p&gt;We are starting from the directory &lt;code&gt;git-project-clone&lt;/code&gt;, where we have cloned the original repo.&lt;/p&gt;

&lt;p&gt;We now can update this repository by making changes to the index.html file and the style.css file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--rLz7JfDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmjgdm49ea1sd3gonlz4.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--rLz7JfDO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fmjgdm49ea1sd3gonlz4.gif" alt="Modify-index-and-style"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Once we make the changes we save and commit them to history as usual.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We should be familiar with this process now, since we have done it many times during the chapters.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After we have committed the files to history we need to push the changes to the master branch, i.e the new GitHub account we created.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--y73NIFp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytivb8g7t3vzexr8xqiy.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--y73NIFp0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ytivb8g7t3vzexr8xqiy.gif" alt="git-push-to-remote"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You might encounter a problem trying to push the changes to the new account, remember we setup the Git and GitHub credentials previously. We need permission to push the changes through to our new account.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many ways of doing this type of thing depending on whether you are working on Windows or Mac.&lt;/p&gt;

&lt;p&gt;On Mac, in the terminal run the command to remove the remote the current origin:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote rm origin
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then you need to add a new origin, we need to have an SSH key to run this command. If you do not have one or you are not sure whether you have generated one, you can run the following command in the terminal to find out:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ls -al ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;If you get a response that says &lt;code&gt;no such file exists&lt;/code&gt;, then you need to generate an SSH key. To do this you need to run the following command, substituting the email with your own:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ssh-keygen -t ed25519 -C "your_email@example.com"
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;You will get the following message:&lt;code&gt;&amp;gt; Generating public/private ed25519 key pair.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next you will be prompted to "Enter a file in which to save the key," just press Enter. Then at the prompt, type a secure passphrase and confirm it again.&lt;/p&gt;

&lt;p&gt;Awesome stuff👌&lt;/p&gt;

&lt;p&gt;Now you need to copy your public key to your clipboard, you can do this by running the command.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pbcopy &amp;lt; ~/.ssh/id_ed25519.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;If your &lt;strong&gt;id_ed25519&lt;/strong&gt; is different then you need to specify that id, you can find the id by running &lt;strong&gt;cd ~/.ssh&lt;/strong&gt;, then show the contents of the folder with an &lt;strong&gt;ls&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now go to your GitHub account and go to the settings menu, in the dropdown click the &lt;code&gt;SSH and GPG Keys&lt;/code&gt;. Give your key a title and in the &lt;strong&gt;key&lt;/strong&gt; field you paste the public key, then click &lt;code&gt;add ssh key&lt;/code&gt; button.&lt;/p&gt;

&lt;p&gt;You will be prompted to confirm your GitHub account password.&lt;/p&gt;

&lt;p&gt;Once complete, go back to your project in GitHub and click on the green button that reads &lt;code&gt;Code&lt;/code&gt;. Choose the SSH option and now you will see an SSH key available, click on the far right side to copy the SSH Key to your clipboard.&lt;/p&gt;

&lt;p&gt;Now back in the terminal run the command:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git remote add origin 
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This command is followed by your SSH key, after you run this command you are able to push your changes to the new GitHub account. &lt;/p&gt;

&lt;p&gt;If you still run into issues you can go to the official GitHub docs for instruction. &lt;a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh"&gt;GitHub Docs&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are on Windows you can change your GitHub login details by clicking &lt;code&gt;manage windows credentials&lt;/code&gt; in the Credential Manager and then find the GitHub link. If you run into any issues feel free to ask.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back to contributing...When we go back to our new GitHub account then we should see our commits we just made from our local repo.&lt;/p&gt;

&lt;p&gt;To send these changes to the original owner we need to create a &lt;u&gt;new pull request&lt;/u&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--T2wbScwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrv1681e0fmcxtdc7ai.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--T2wbScwI--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/iwrv1681e0fmcxtdc7ai.gif" alt="github-pull-request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see when we create a &lt;u&gt;new pull request&lt;/u&gt;, GitHub compares the owner origin/master with the our new account origin/master. In our case we have no merging conflicts.&lt;/p&gt;

&lt;p&gt;Next we need to give a description. In the real world you want to give the owner a clear and thorough explanation of the changes you made in the description. Then we click the green button marked &lt;code&gt;create pull request&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next GitHub will check if we can merge with the owner's repo. Notice that we cannot perform the merge on our side, this is because it is up to the owner whether they want to accept the merge.&lt;/p&gt;

&lt;p&gt;Now we go to the owners GitHub account of the original project. You will notice that there is &lt;strong&gt;1&lt;/strong&gt; pull request on the owners repo. We can click on it.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Ju-eTicj--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nhh1pkwnrgu1go8udutn.png" alt="collab-human-paper-image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here you will see the pull request from the second account with its commits and the changes, we can review the commits made by the other user as well as the changes that were made to the project. The green background indicates the changes that were added.&lt;/p&gt;

&lt;p&gt;If we are happy with the changes we can merge the branches. Also we can write a comment to the contributor. &lt;/p&gt;

&lt;p&gt;Once we click the &lt;code&gt;merge pull request&lt;/code&gt; green button. The branches will merge and the changes will be reflected on the owners repo.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--1ViP36hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tnikzs9xgsz7j1g2yu7.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--1ViP36hs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6tnikzs9xgsz7j1g2yu7.gif" alt="github-pull-request"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That is the way we can contribute to an open source project on GitHub.&lt;/p&gt;

&lt;p&gt;Let’s consider what might happen if we encounter a &lt;strong&gt;merge conflict&lt;/strong&gt; this way.&lt;/p&gt;

&lt;p&gt;As usual a merge conflict will occur when both parties try to edit the same line of the same file. In this case we can simulate a scenario where we as the contributor try to modify the style.css file and before we create a pull request, the owner is busy editing on the same line of the same file.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4q2mNenV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhwns35afen9uqrks7rb.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4q2mNenV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/fhwns35afen9uqrks7rb.gif" alt="scenario-creating-merge-conflict"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When we commit our changes and create the pull request, we will see that there is a merge conflict, however you are still able to create the pull request.&lt;/p&gt;

&lt;p&gt;Here we can choose to resolve the conflict ourselves or we can allow the owner to resolve the conflict, because there is a conflict with the repo's the pull request has been sent to the owner already.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kF2LLGiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi4qz2w7totgr25nu8jz.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kF2LLGiS--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/zi4qz2w7totgr25nu8jz.gif" alt="github-merge"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you go to the owner account, you will see &lt;strong&gt;1&lt;/strong&gt; pull request, and this pull request has a conflict. We as the owner can resolve this issue by deciding which code we want to keep.&lt;/p&gt;

&lt;p&gt;Once we are happy we can click &lt;code&gt;marked as resolve&lt;/code&gt;, then click &lt;code&gt;commit merge&lt;/code&gt;, you will see GitHub warns us that &lt;strong&gt;this will commit to master&lt;/strong&gt;. We confirm that we understand.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fDm61W0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m27nh13s91awm1q5ioo.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fDm61W0h--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/6m27nh13s91awm1q5ioo.gif" alt="github-merge-2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally we merge the pull request with our master branch. If we look at the commits history, we will see all the commits of both accounts as well as the merge commits.&lt;/p&gt;

&lt;p&gt;That is it about contributing to the original open source repository, I really hope this made sense to you. Lets all move on to the next and final chapter...&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--JXxb1ztO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u50nqbcpc90284iexqn.gif" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--JXxb1ztO--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/3u50nqbcpc90284iexqn.gif" alt="shocked-gif"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>github</category>
      <category>beginners</category>
      <category>webdev</category>
      <category>git</category>
    </item>
    <item>
      <title>Optimizing Productivity With Contract Developers</title>
      <author>Nessii-green</author>
      <pubDate>Sun, 26 Sep 2021 21:55:25 +0000</pubDate>
      <link>https://dev.to/nessiigreen/optimizing-productivity-with-contract-developers-1bkb</link>
      <guid>https://dev.to/nessiigreen/optimizing-productivity-with-contract-developers-1bkb</guid>
      <description>&lt;p&gt;&lt;em&gt;Misunderstanding has become common in our daily affairs with humans. It is mainly bound to occur because we humans, undoubtedly of the same species, are a different breed. We are categorically aligned with other priorities, experiences, and environments. It is even quite questionable if a relationship, dealing, or partnership should thrive without a single moment of misunderstanding.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#introduction"&gt;
  &lt;/a&gt;
  Introduction
&lt;/h2&gt;

&lt;p&gt;Often, it’s one’s inability to let go of the desire to be right that causes a common misunderstanding to soar and finally damage a relationship. We will review how these misreadings, misinterpretations, and miscalculations affect the relationship between &lt;strong&gt;a contract developer and a client&lt;/strong&gt;. You will also find analytical strategies to resolve this for a more productive working environment.&lt;/p&gt;

&lt;p&gt;Being a contract developer has it’s Benefits and equally comes with Negatives, leading us to the;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#edges-and-drawbacks-of-being-a-contract-developer"&gt;
  &lt;/a&gt;
  Edges and drawbacks of being a contract developer.
&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;Edges&lt;/strong&gt; that come with being a contract developer are quite a handful, and below is a rundown.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Independence is the primary benefit. Having a flexible working schedule, nothing else appears to be more tempting because most folks perceive working full-time as being imprisoned. Contract Developers are working on their own time, far off any influence by a boss or under a company.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next is the compensation; contractors, in most cases, are paid better than regular employees. There’s the freedom to give yourself a raise at will, which never happens with full-time developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The short duration comes in handy also; for people who mostly get bored by repetitions, there’s room for making changes without having to go through the ceremony of quitting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Having the view of what it’s like to work on different things, there’s always a thrill that comes with it, and by all means, it comes with its feeling altogether.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It helps diversify the exposure to something new, too different challenges even though in the same field.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Experience is designated most of the time as the by-product of exposure, a full stack developer who’s been working for 5-10 years doesn’t necessarily have the 5-10 years experience because he’s doing the same thing over and over again within the span of that amount of year. But a contractor who’s had the opportunity to take on different things within the same period would be termed more experienced.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having cataloged most, if not all, of the benefits, the &lt;strong&gt;Negatives&lt;/strong&gt; follow suit.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There's the added worry and stress over situations. Situations like instability; for example, halfway into working, a client cancels a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A significant drawback on this chosen part is; you don't work, you don't eat, unlike the salary earners who can call in sick, and at the end of the day, they still get their salaries.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It would help if you always lined up work while handling a project; of course, it wouldn't be a pleasant experience having your hands on nothing even after running a project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There's also the hassle of getting paid. Contract developers experience this. With salary earners, their pay is sure, even though delayed in some cases, but it can be pretty different with contractors.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contractors do not get raises or bonuses as salary earners do, only the agreed rate stipulated in the contract.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sole/personal liabilities to losses caused by you because you're under no company that'll cover up for you. Sometimes in incidents like these, one could risk being sued by the client for damages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contract developers can be easily laid-off because there's no going through the process of some political safety that shields them as the full-time developers have, which has always been a hassle for managers and employers to go through before sacking an employee.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Compensations can become low after additional responsibilities have been taken care of, like getting the project's equipment and when taxes and insurance come in.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This stage is where we divulge to you the &lt;strong&gt;Trials that occur in a contract developer-client Relationship&lt;/strong&gt;.&lt;br&gt;
These conflicts are the primary causes of project failures, and they come in factions.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Data and facts which could be complex might be omitted before the commencement of the project—these result in unpredictabilities and fluctuation in agreement. There are situations where a client adjusts project requirements; these changes might be minor, and you cannot charge for them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Confusions and misinterpretations between client and contractor put to mind disagreements. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The absence of conversations on the charges of certain risks also adds to problems.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When human behavior, management, and communication come in. These have escalated more conflicts than usual. Distrust in amalgamation with a poor grasp of each other's dividends derives from a state of affairs where both parties do not acknowledge and regard one another. &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Non-viable expectations on the client's part in collaboration with an over-ambitious bearing of the hired contractor is very much a bad blend for a project when occurring together.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Contract confusions, absence of transparency like mentioned in the first faction, and proficiency can evoke conflicts. &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
  &lt;a href="#patience-as-requisite"&gt;
  &lt;/a&gt;
  Patience as Requisite
&lt;/h2&gt;

&lt;p&gt;There’s the ease of  jumping into conclusions, which is (every) now and then proven not to be logical at the end of the day. Sometimes either party does not carefully observe and subsequently, frustration fills out and then you find yourself enstranging the person you’re working with.&lt;/p&gt;

&lt;p&gt;Impatience can be counterproductive; when one draws inferences quickly, they arrive at fabricating a schedule in their mind. When persons or procedures stall from aligning to that schedule, the mind can run wild with frustration. &lt;br&gt;
You begin to query the rationale and intentions of the hired contractor who’s on the other side of the equation, and proffer demands that may or may not be rational, possibly leading to an unfortunate ending.&lt;/p&gt;

&lt;p&gt;Impatience can make the contractor perceive you as wanting or desperate; propelling a partner with hostility or going with insensitive demands is exceedingly appalling and is seen as a significant disadvantage to the contractor which might kill the deal.&lt;br&gt;
Also, when your judgment is overcast and when one is close-minded, damages could be done. For instance, when an operation stalls for longer than necessary. Adjusting to the “take it or leave it” stance more often than not scatters the deal.&lt;/p&gt;

&lt;p&gt;Patience is really, very necessary in every business practice. Every business-inclined person lives in a world that goes with logical thinking and brave actions and measures; thus has become an asset in the business world. If these attributes display themselves in the form of impatience, conflicts tend to rise, and damages are done. Clients must remember that patience, especially in business, is genuinely requisite as hard as it may be.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#approaches-to-take-down-these-challenges"&gt;
  &lt;/a&gt;
  Approaches to take down these challenges.
&lt;/h2&gt;

&lt;p&gt;The following are factors that should help in navigating the trials of a client-contractor relationship.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When there's professionalism, which is laid down procedures or ethics in every profession, this factor is essential for building a healthy relationship with your hired contractor. You, as a client, will not engage the services of a contractor who does not deliver quality work. Likewise, a contractor will not enter into a contract with a client who does not redeem his part of the deal. In this case, professionalism should be synonymous with proficiency.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When there's client and contractor satisfaction, loyalty is bound to be procured.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Effective communication in a client-contractor relationship is crucial to being synonymous with the role of food to the human body; it is very essential.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The importance of the project does it too. In life as a whole, every individual or institution is ever ready to channel its assets into a life-transforming activity, provided it is a priority. Such reason pushes clients and contractors to merge their best resources into achieving value for money, creating a good relationship between them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trust stands as the genesis of every meaningful relationship. The significance of trust in a business relationship is equivalent to the foundation of a building because the absence of trust will kill the partnership within a concise term.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Accepting and executing your role in a given project irrespective that you are the owner of the project in conformity with the stated principle automatically brings the client and contractor to a good place.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Interdependence can trigger business relationships because affiliations to a contract need the complementary part to survive; the faster this fact is acknowledged, the better the business relationship.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adaptation to changes and flexibility in terms of the contract should be appropriately applied.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here are also some &lt;strong&gt;Bonus tips for connecting the dots.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To have a successful partnership between friends or family, one must keep up a severance between business and personal relationships.&lt;/li&gt;
&lt;li&gt;Differing dedication among the client and contractor can damage the relationship. The success of the project is based on contributions of both client and contractor.&lt;/li&gt;
&lt;li&gt;Clients should use a creative point of reference in sorting out contractors for their projects. &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Structuring labor relations takes forbearance and persistence, and for a project to be accomplished, the possessor of the project must be prepared to make compromises and commitments.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#resourcesreference"&gt;
  &lt;/a&gt;
  Resources/Reference.
&lt;/h3&gt;

&lt;p&gt;&lt;a href="http://www.researchgate.net"&gt;www.researchgate.net&lt;/a&gt;&lt;br&gt;
Forbes magazine.&lt;br&gt;
TUDelft.&lt;/p&gt;

</description>
      <category>career</category>
      <category>productivity</category>
      <category>programming</category>
      <category>react</category>
    </item>
    <item>
      <title>Stop abusing .map()!</title>
      <author>Pan Seba</author>
      <pubDate>Sun, 26 Sep 2021 19:41:41 +0000</pubDate>
      <link>https://dev.to/catchmareck/stop-abusing-map-51mj</link>
      <guid>https://dev.to/catchmareck/stop-abusing-map-51mj</guid>
      <description>&lt;p&gt;Every once in a while when I do code review or visit StackOverflow I stumble upon code snippets that look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oragne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;fruitIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`fruit-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So as you can see it's just a simple iteration where for every element in the &lt;code&gt;fruitIds&lt;/code&gt; array we add &lt;code&gt;active&lt;/code&gt; class to a certain HTML element in a DOM.&lt;/p&gt;

&lt;p&gt;Many programmers (especially new) wouldn't notice anything wrong with the code above. &lt;strong&gt;However&lt;/strong&gt;, there is a one major issue here - the usage of &lt;code&gt;.map()&lt;/code&gt;. Let me explain.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#what-is-wrong-with-raw-map-endraw-"&gt;
  &lt;/a&gt;
  What is wrong with &lt;code&gt;.map()&lt;/code&gt;?
&lt;/h2&gt;

&lt;p&gt;Well, there is completely nothing wrong with this particular array method. In fact, I think it is very handy and beautifully wraps one of the iteration patterns - &lt;em&gt;mapping&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In simple words, mapping is an operation which applies a function to every element of a collection and returns a new collection with elements changed by the mentioned function. For example, if we have an array of numbers &lt;code&gt;const nums = [1, 2, 3, 4];&lt;/code&gt; and would like to receive a new array of doubled numbers, we could &lt;em&gt;map&lt;/em&gt; the original array to a new one like this (in JavaScript):&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;biggerNums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;nums&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;// &amp;gt;&amp;gt; [2, 4, 6, 8];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;The &lt;code&gt;biggerNums&lt;/code&gt; array would consist of numbers from the original &lt;code&gt;nums&lt;/code&gt; array multiplied by &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Notice how &lt;code&gt;.map()&lt;/code&gt; is used - we assigned the result of this method to a new variable called &lt;code&gt;biggerNums&lt;/code&gt;. I have also mentioned earlier that mapping is an operation that &lt;strong&gt;returns a new collection&lt;/strong&gt; of elements. And this is the very reason the code snippet showed at the beginning of this article is wrong. The &lt;code&gt;.map()&lt;/code&gt; returns a new array - &lt;strong&gt;always&lt;/strong&gt; - and if we don't need that array, we shouldn't use &lt;code&gt;.map()&lt;/code&gt; in the first place. In this particular case (simple iteration) a different array method should be used - &lt;code&gt;.forEach()&lt;/code&gt; - which is specifically designed for such cases. It doesn't return a new collection, it simply walks through an array and invokes a callback function for every element allowing you to do something for each of them.&lt;/p&gt;

&lt;p&gt;So the correct version of the mentioned snippet should look like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// good way&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oragne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;fruitIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`fruit-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We don't need a new array so we simply iterate over the &lt;code&gt;fruitIds&lt;/code&gt; array and add the &lt;code&gt;active&lt;/code&gt; class to an HTML element for each of the array items.&lt;/p&gt;

&lt;p&gt;Okay, but why should I care? &lt;code&gt;.map()&lt;/code&gt; is shorter and easier to write than &lt;code&gt;.forEach()&lt;/code&gt;. What could possible go wrong?&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#consequences-of-abusing-raw-map-endraw-"&gt;
  &lt;/a&gt;
  Consequences of abusing &lt;code&gt;.map()&lt;/code&gt;
&lt;/h2&gt;

&lt;p&gt;One of the worst consequences of abusing &lt;code&gt;.map()&lt;/code&gt; is the fact that it returns a new redundant array. To be more specific - it returns a new array of the same size as the one this method was called on. It means that if we have an array of 1000 elements, &lt;code&gt;.map()&lt;/code&gt; will return a new array of 1000 elements - &lt;strong&gt;every time&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;In JavaScript, all functions return a value. Even if we don't use the &lt;code&gt;return&lt;/code&gt; keyword, the function will return &lt;code&gt;undefined&lt;/code&gt; implicitly. That's how the language has been designed. This rule also applies to callbacks - they are functions too.&lt;/p&gt;

&lt;p&gt;Having said that, let's get back to the original example:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="c1"&gt;// wrong way&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;fruitIds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;apple&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;oragne&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;banana&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nx"&gt;fruitIds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;map&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`fruit-&lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;classList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;active&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What happens here? An array of fruit IDs is created and then it's &lt;strong&gt;mapped&lt;/strong&gt; to another array of the same size. Even though the array returned by &lt;code&gt;.map()&lt;/code&gt; is not used, it does take place in memory. This new (unused) array looks like this:&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight javascript"&gt;&lt;code&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;It's because the callback passed to the &lt;code&gt;.map()&lt;/code&gt; method does not have the &lt;code&gt;return&lt;/code&gt; keyword and as we know, if there is no &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; is returned implicitly.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How bad is it? Very bad.&lt;/strong&gt; In this particular example it won't bring any serious consequences - there are only three items in the array so creating another three-element array won't cause any problems. However, the problem arises when we deal with big arrays of complex data. If we want to iterate over an array of five thousand objects and we abuse &lt;code&gt;.map()&lt;/code&gt;, we create another array of five thousand elements - &lt;code&gt;undefined&lt;/code&gt;s. So we end up storing 10 000 elements in memory from which a whole half is redundant. It is a very non-optimal practice and in some scenarios it may even lead to the application overload. This is why we should pick right methods to the right tasks.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#summary"&gt;
  &lt;/a&gt;
  Summary
&lt;/h2&gt;

&lt;p&gt;There are many practices that are essentialy bad, but the negative consequences will start to be visible only when dealing with bigger datasets. One of such practices is abuse of &lt;code&gt;.map()&lt;/code&gt;. When operating on small arrays, it won't cause any hurt. But when we make this mistake with a bigger array it will start overloading our application and it may be quite hard to debug.&lt;/p&gt;

&lt;p&gt;This is why we should never let it pass by and whenever we see this abuse, we should take care of it. I hope now you understand why.&lt;/p&gt;

</description>
      <category>javascript</category>
      <category>programming</category>
      <category>functional</category>
      <category>codereview</category>
    </item>
    <item>
      <title>6 Strategies Learnt from 6 months of Job Hunting</title>
      <author>Nerando Johnson</author>
      <pubDate>Sun, 26 Sep 2021 19:28:56 +0000</pubDate>
      <link>https://dev.to/nerajno/6-strategies-learnt-from-6-months-of-job-hunting-14hn</link>
      <guid>https://dev.to/nerajno/6-strategies-learnt-from-6-months-of-job-hunting-14hn</guid>
      <description>&lt;p&gt;After months of applying, interviewing, building, practising, connecting with others in the industry and being ghosted, I got an email that would change my previous situation, #opentowork to currently at &lt;em&gt;&lt;strong&gt;XYZ&lt;/strong&gt;&lt;/em&gt;. The email started with the line I spent months waiting to hear. &lt;em&gt;“We are pleased to offer you the position of Fullstack Developer.”&lt;/em&gt;  I think I stared at it for a few minutes and double-checked the header to make sure it wasn’t an ill-mannered prank.&lt;/p&gt;

&lt;p&gt;Let's see, it's been 182 days had passed since I last had a paying position. That was followed by 6 months of job hunting and believe me .... it is literally &lt;em&gt;&lt;strong&gt;hunting&lt;/strong&gt;&lt;/em&gt;. Job hunting or seeking or questing is one of the least spoken about skills that developers needs. If I was supposed to deconstruct this skill to its purest form,  it's learning to sell yourself as a solution to a potential employer's need/problem. One should also remember you are not meant for every opportunity that you seek. Your personality, skill set, how you approach a problem and relate to people is unique, even if I am the only person to tell you that one fact. Believe me. So here are six lessons I learned while on the hunt. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#networking"&gt;
  &lt;/a&gt;
  Networking
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--tFEdClDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_Vsra7WUAcqx43%3Fformat%3Djpg%26name%3Dlarge" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--tFEdClDs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/media/E_Vsra7WUAcqx43%3Fformat%3Djpg%26name%3Dlarge" alt="Networking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You are the sum of the six people you surround yourself with. I think that’s one of the lessons I learned from skimming the book: &lt;em&gt;The 7 Habits of Highly Effective People by Stephen Covey&lt;/em&gt;.  I decided to surround myself with those I could learn from, but it didn’t stop at coding or developers, as my future demanded a different version of me. I took the time to become an active participant in certain communities both virtually and in-person (namely &lt;br&gt;
&lt;a href="https://twitter.com/freeCodeCamp"&gt;FreeCodeCamp&lt;/a&gt;, &lt;a href="https://twitter.com/CodeNewbies"&gt;CodeNewbies&lt;/a&gt;, the tech side of Twitter, &lt;a href="https://twitter.com/techsofcolor"&gt;Technologists of Color&lt;/a&gt; and most recently, &lt;a href="https://twitter.com/VirtualCoffeeIO"&gt;Virtual Coffee&lt;/a&gt;), this meant commenting, presenting, talking, listening, contributing from your unique skillset, asking for help, participating and building new connections. &lt;/p&gt;

&lt;p&gt;I stepped out of my comfort zone, and if you know anything about my past career and life as a middle school teacher, stepping out of one’s comfort zone is the beginning of understanding. And where understanding is wisdom will surely follow (we hope, at least !!!).&lt;/p&gt;

&lt;p&gt;So as you continue to seek your next role, it's important to make your presence known and felt by becoming a part of communities..... not a community. You want to reach a place of connecting with the mind and talents from all walks of life. Coding isn’t just about understanding a specific language JavaScript or Ruby, it’s understanding how the code will solve a human problem. The same can be said about people, you might gain some understanding from other disciplines to help you write better code and see the world clearer.&lt;/p&gt;

&lt;p&gt;If you are new to building a network, I recommend meetups ~ virtually, online communities, LinkedIn, Twitter, twitter-chats ( looking at you #CodeNewbie and ), Slack communities, blogging communities [Dev.to, Medium, Hashnode, etc.]. And if you are asking me to tell you how to build a community on LinkedIn, no worries, I made a whole section for that and a bit more. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#linkedin"&gt;
  &lt;/a&gt;
  LinkedIn
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--wSp7Fpu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/267350/pexels-photo-267350.jpeg%3Fcs%3Dsrgb%26dl%3Dpexels-pixabay-267350.jpg%26fm%3Djpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--wSp7Fpu0--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/267350/pexels-photo-267350.jpeg%3Fcs%3Dsrgb%26dl%3Dpexels-pixabay-267350.jpg%26fm%3Djpg" alt="test Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;LinkedIn has changed over the last five years to become more than just a job-seeking site to one where professionals can share their insight and learn from each other. And yes, even the occasional joke can pop up in your feed. But it matters how you connect with others and what they share. No, I am not saying that you should spend all your time on another social media platform when you could be programming. What I am saying is that if you post once a week with questions, sharing your insight, talking about your experience, you will be in the 1% of people who post on LinkedIn.&lt;/p&gt;

&lt;p&gt;LinkedIn has over 740 million users each year, and with one weekly post, you can land in the eyes of your dream job. Companies are looking for people who can tell their stories. Can you? Before you say, “But, I don’t know what to post, and no one will read it.” You’re wrong, you need to understand your writing is owning your space in this ecosystem. Here’s a &lt;br&gt;
 few repeatable steps you can use to build your network on LinkedIn : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Post your favourite quote and who said it, bonus points if it helped you to become a better developer.&lt;/li&gt;
&lt;li&gt;Tell a story of how you got started. What sparked your curiosity or what did you want to build?&lt;/li&gt;
&lt;li&gt;Comment rather than just liking a post. It builds engagement and sometimes your opinion is just what is needed on the post. &lt;/li&gt;
&lt;li&gt;When sending or making a new connection, write a note saying who you are, what you hope to learn from the person, what value you can bring to the relationship and/or where you met. &lt;/li&gt;
&lt;li&gt;If you want to have a virtual coffee, just say so. Make sure you are respectful of the other person’s time.&lt;/li&gt;
&lt;li&gt;Celebrate each other’s wins and send someone a small note of encouragement when you see they need it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LinkedIn, essentially, is about connecting with other people with shared professional interests, remember to treat them as human first, and having an interest in job hunting maybe later. One of the best pieces of advice I have ever gotten on LinkedIn was to listen to this &lt;a href="https://bit.ly/3zqYNXc"&gt;series&lt;/a&gt; by &lt;a href="https://twitter.com/DThompsonDev"&gt;Danny Thompson&lt;/a&gt;, make notes and implement them accordingly. &lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#portfolio"&gt;
  &lt;/a&gt;
  Portfolio
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://camo.githubusercontent.com/4a4649e1a31118d6f275e67bd80fe5601770247e8ad0497165e441e9148eaf35/68747470733a2f2f696d6167652e6962622e636f2f6535754266302f436170747572652e706e67" class="article-body-image-wrapper"&gt;&lt;img src="https://camo.githubusercontent.com/4a4649e1a31118d6f275e67bd80fe5601770247e8ad0497165e441e9148eaf35/68747470733a2f2f696d6167652e6962622e636f2f6535754266302f436170747572652e706e67" alt="Portfolio Screenshot Example"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So you’re looking for a job, but what do you have to prove you can do it? &lt;strong&gt;&lt;em&gt;Building a portfolio is essential in today’s job market&lt;/em&gt;&lt;/strong&gt;, note my strong emphasis.  Learn to show off your project because your future self needs to learn how to advocate for yourself and your future employer needs to see it. The creation of a portfolio that demonstrates your ability to problem-solve, your tech-stack, documentation of your process, and creative tools you know how to use was more essential to getting an interview than you may think. If you are transitioning from consulting /freelancing to seeking a full-time position at a company, having a well-rounded portfolio that speaks to their interest and tech stack can be the deciding factor that lands you that new opportunity.&lt;br&gt;
      All your portfolio should contain at least 3-4 projects with technologies that you feel competent and comfortable explaining. Each project should have a well-documented repository with a live version &lt;em&gt;&lt;strong&gt;(preferably if applicable)&lt;/strong&gt;&lt;/em&gt;. Here are two different resources you can use to create or fix your portfolio, &lt;a href="https://bit.ly/39lkOw8"&gt;Ultimate Guide to Creating a Programmer Portfolio&lt;/a&gt; and  &lt;a href="https://youtu.be/nrWGr2OvBD4"&gt;10 Web Developer Portfolio Tips&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#resume"&gt;
  &lt;/a&gt;
  Resume
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--2APtCVVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/5989933/pexels-photo-5989933.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--2APtCVVQ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/5989933/pexels-photo-5989933.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" alt="Resume Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Resumes can be a fickle thing, but you’ll need one and a very solid one. It can help you highlight your portfolio and further demonstrate your capability for your dream role. On any given day, one should have three versions of their resume, one with all their professional experience, one with all their tech experience and for each role, a tailored version. I am an advocate for one to constantly revising and updating each with new experiences and skills acquired over a 4-6 week period.   &lt;/p&gt;

&lt;p&gt;Remember that you are more than just your resume, you may not have all the skills now, but your resume should help to display your ability to learn as one of your greatest assets. If you are looking for tips on how to create a good developer resume, check out  &lt;a href="https://youtu.be/JEPqB0x8Cns"&gt;Guidance Counselor 2.0 + How to Actually Write a Resume by Taylor Desseyn&lt;/a&gt;, any of his &lt;a href="https://www.taylordesseyn.com/freeguides"&gt;guides&lt;/a&gt; that align with resume creation with developers in mind. FreeCodeCamp's  &lt;a href="https://www.freecodecamp.org/news/search/?query=resume%20"&gt;guides&lt;/a&gt; are also good references for this topic.&lt;/p&gt;
&lt;h3&gt;
  &lt;a href="#practice"&gt;
  &lt;/a&gt;
  Practice
&lt;/h3&gt;


&lt;blockquote class="ltag__twitter-tweet"&gt;

  &lt;div class="ltag__twitter-tweet__main"&gt;
    &lt;div class="ltag__twitter-tweet__header"&gt;
      &lt;img class="ltag__twitter-tweet__profile-image" src="https://res.cloudinary.com/practicaldev/image/fetch/s--Lv8vsqff--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://pbs.twimg.com/profile_images/1420406130455588868/6Xw09aZG_normal.jpg" alt="Danny Thompson profile image"&gt;
      &lt;div class="ltag__twitter-tweet__full-name"&gt;
        Danny Thompson
      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__username"&gt;
        &lt;a class="mentioned-user" href="https://dev.to/dthompsondev"&gt;@dthompsondev&lt;/a&gt;

      &lt;/div&gt;
      &lt;div class="ltag__twitter-tweet__twitter-logo"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ir1kO05j--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg" alt="twitter logo"&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__body"&gt;
      "How did you get better at coding?"&lt;br&gt;Practice&lt;br&gt;&lt;br&gt;"How can I understand Javascript better?"&lt;br&gt;Practice&lt;br&gt;&lt;br&gt;"How can I cook better?"&lt;br&gt;Practice&lt;br&gt;&lt;br&gt;"How can I dance better?"&lt;br&gt;Practice&lt;br&gt;&lt;br&gt;"How can I play better basketball?"&lt;br&gt;Practice&lt;br&gt;&lt;br&gt;This is going to work in any field.&lt;br&gt;Practice!!!!
    &lt;/div&gt;
    &lt;div class="ltag__twitter-tweet__date"&gt;
      12:21 PM - 03 May 2021
    &lt;/div&gt;


    &lt;div class="ltag__twitter-tweet__actions"&gt;
      &lt;a href="https://twitter.com/intent/tweet?in_reply_to=1389193270211796996" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fFnoeFxk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg" alt="Twitter reply action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/retweet?tweet_id=1389193270211796996" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--k6dcrOn8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg" alt="Twitter retweet action"&gt;
      &lt;/a&gt;
      &lt;a href="https://twitter.com/intent/like?tweet_id=1389193270211796996" class="ltag__twitter-tweet__actions__button"&gt;
        &lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SRQc9lOp--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev.to/assets/twitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg" alt="Twitter like action"&gt;
      &lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;


&lt;p&gt;A core skill of being a developer is taking the time to hone your skills; whether by taking on new challenges or collaborating with others to become a part of communities around yourself. As you are what you do repeatedly, a better developer is someone is who makes the time to refine the application of their skill set to solve a problem. Practising, however,  doesn’t just mean coding alone full steam on a project, learning how to collaborate is a form of practice. Making time to read, make notes and build is a form of practice. Reading other’s experiences can help you develop your approach to coding and building a new product is a form of practice. Remember that actively practising includes resting, taking care of your body, and don’t forget to connect with your friends in any way you can. &lt;/p&gt;

&lt;p&gt;Here are a few resources that speak to this topic :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/TrudnCVNJ60"&gt;Importance of Practice - K. Bryan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/1-sjUoGO250"&gt;Deliberate Practice: Achieve Mastery in Anything&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.freecodecamp.org/news/how-to-use-deliberate-practice-to-learn-programming-fast/"&gt;How to Use Deliberate Practice to Learn Programming More Efficiently&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--any41prV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/7376/startup-photos.jpg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--any41prV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/7376/startup-photos.jpg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" alt="Routine test Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#creating-routines"&gt;
  &lt;/a&gt;
  Creating Routines
&lt;/h3&gt;

&lt;p&gt;"Don't give up. Obstacles can be overcome through strategy and learning. ~ Hidetaka Miyazaki." (Canva the quote and add as an image)&lt;/p&gt;

&lt;p&gt;From no-job having status to job-having status is a big leap as the dynamics of your life change. Not surprisingly though getting there without focus and discipline is almost a work of God. One begs to ask how one gets a new position? Everyone I have asked that question has a different answer, but one aspect of their answer remained the same— creating a routine that works for you. &lt;/p&gt;

&lt;p&gt;Essentially you should break the goal of securing a job into smaller steps. So take the time to sit down and analyze all the components that come with looking for a job as a software developer ( deliberate practice, collaboration with other developers, job applications, responding to emails, creating content, participating in communities, going to meetups and virtual coffees, etc). Next, start by creating repeatable actions that will give you some form of control, think themed days or activities that put you in the mindset to code; think of creating a schedule and then sticking to it. Limit distractions and GET TO WORK !!!! This is never gonna work unless you do.  &lt;/p&gt;

&lt;p&gt;Additionally, we need to create a project with a goal in mind (What should it do for us). The schedule helps you stay on track to finish your project in a specific number of days or time slots. Use this as a template to demonstrate your workflow to future employers. Remember to be kind to yourself when setting up a routine, it takes at least 21-65 to form a habit, and you already have the blueprints to an amazing routine. Here are some additional steps you can take to create better routines that will help with the job hunt : * &lt;a href="https://www.trilogyed.com/blog/10-effective-job-search-strategies-according-to-a-software-engineer/"&gt;10 Effective Job Search Strategies, According to a Software Engineer&lt;/a&gt; &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://hackernoon.com/the-junior-engineers-job-search-strategy-guide-69c98e396483"&gt;The Junior Software Engineer’s Job Search Strategy Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.themuse.com/advice/entry-level-engineer-software-developer-how-to-get-hired"&gt;Are You an Entry-Level Software Developer? Here's How to Stand Out and Get Hired&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
  &lt;a href="#things-to-consider"&gt;
  &lt;/a&gt;
  Things To Consider
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQRj15zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/1194197/pexels-photo-1194197.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26w%3D500" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQRj15zk--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/1194197/pexels-photo-1194197.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26w%3D500" alt="test Image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;So many developers fail to reach out to their communities when they need help. Be proactive. Build bridges so you can cross them and meet other people. Write about your experience, trust me, you could be helping someone who is having a hard time. Stay consistent and keep going. Please remember, a closed mouth doesn’t get fed and as you’ve heard the argument many times it bears repeating. Consider asking for an opportunity to show your work or help someone else as that is a part of your advocacy. As time goes by, you become a part of a community for a reason; ask for what you need. So start a blog, tweet about it, post on LinkedIn. Do whatever it takes to get the word out. &lt;/p&gt;

&lt;p&gt;You are a talented developer, and you will need others around you to amplify your voice. Learn to shout together.  But the most important thing to consider is to be kind to yourself. You are so much more than your job hunting process/progress. You are human, lovely and flawed, creating a solution with code that can change the world. Believe in yourself, and others will learn to have faith in your work. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#final-2cents"&gt;
  &lt;/a&gt;
  Final #2cents
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yXVIEaMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/4326363/pexels-photo-4326363.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yXVIEaMJ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/4326363/pexels-photo-4326363.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26h%3D650%26w%3D940" alt="test image"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These are but the first six strategies that came to my mind while thinking about what to write. I would appreciate any feedback or your own tips. Find me &lt;em&gt;"&lt;a href="https://twitter.com/nerajno"&gt;@nerajno&lt;/a&gt;"&lt;/em&gt; if you would like to chat, my DMs are open.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;My secret sauce is that I have an editor and i tend to just string together ideas and she adds some body to them. Her name is &lt;a href="https://twitter.com/JJnibbles"&gt;Joy&lt;/a&gt;. She is a storyteller, home cook, poet, and writing consultant. She enjoys talking about building communities and the human condition. If you find her in a bookstore, approach her carefully with snacks. When she isn't banging her head against a desk to write, you can find her drinking tea and reading a book. (probably a biography or manga).&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#fin-"&gt;
  &lt;/a&gt;
  FIN !
&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yxN-G3W8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/4835419/pexels-photo-4835419.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26w%3D500" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yxN-G3W8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://images.pexels.com/photos/4835419/pexels-photo-4835419.jpeg%3Fauto%3Dcompress%26cs%3Dtinysrgb%26dpr%3D2%26w%3D500" alt="fin"&gt;&lt;/a&gt;&lt;/p&gt;

</description>
      <category>jobhunting</category>
      <category>interview</category>
      <category>networking</category>
      <category>javascript</category>
    </item>
    <item>
      <title>How to run docker on Windows without Docker Desktop</title>
      <author>Nicolas Louis</author>
      <pubDate>Sun, 26 Sep 2021 19:25:09 +0000</pubDate>
      <link>https://dev.to/_nicolas_louis_/how-to-run-docker-on-windows-without-docker-desktop-hik</link>
      <guid>https://dev.to/_nicolas_louis_/how-to-run-docker-on-windows-without-docker-desktop-hik</guid>
      <description>&lt;p&gt;Since  Docker announced a new subscription for Docker Desktop for personal use, educational institutions, non-commercial open-source projects and small businesses, other enterprises need to acquire licences for all installations of Docker Desktop.&lt;/p&gt;

&lt;p&gt;So is there an alternative on Windows to continue to legally use containers with a docker command and a nice UI like VSCode without paying a licence : the answer is YES !&lt;/p&gt;

&lt;p&gt;We are doing magic with Windows 10, Ubuntu on WSL2, &lt;em&gt;docker builder cli&lt;/em&gt; for windows and a little elbow grease.&lt;/p&gt;

&lt;p&gt;Big Thanks to Jonathan Bowman for &lt;a href="https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9"&gt;his article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I reused and I adapted it to make &lt;em&gt;VisualCode&lt;/em&gt; working with &lt;strong&gt;dockerd&lt;/strong&gt; under WSL2.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#installation-on-windows"&gt;
  &lt;/a&gt;
  Installation on Windows
&lt;/h2&gt;

&lt;p&gt;On your windows, you need to install a couple of things :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WSL2 : &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install#step-2-update-to-wsl-2"&gt;Install WSL | Microsoft Docs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Ubuntu on WSL2 : in Microsoft Store Ubuntu 20.04 LTS&lt;/li&gt;
&lt;li&gt;Visual Code : it can be downloaded at &lt;a href="https://code.visualstudio.com/"&gt;Visual Studio Code - Code Editing. Redefined&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Docker extension for VSCode : directly from Visual Code Extensions Marketplace
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--ONarkfTn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/p4l24p641gi3paubq2c2.png" alt="VSCode Docker extension"&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
  &lt;a href="#installation-of-dockerd-in-wsl2ubuntu"&gt;
  &lt;/a&gt;
  Installation of dockerd in WSL2/Ubuntu
&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;(Inspired from the Jonathan Bowman's article)&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#is-your-user-a-sudoer-"&gt;
  &lt;/a&gt;
  Is your user a "sudoer" ?
&lt;/h3&gt;

&lt;p&gt;Check if &lt;strong&gt;sudo&lt;/strong&gt; is installed if not : &lt;code&gt;*apt install sudo*&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;grep -E 'sudo|wheel' /etc/group&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You would see something like  &lt;em&gt;sudo: x:27:myusername&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Otherwise, We use &lt;strong&gt;usermod&lt;/strong&gt; to add an user to the &lt;em&gt;sudoer&lt;/em&gt; group&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;usermod -aG sudo myusername&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Finally you can check with this command : &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;sudo grep -E '%sudo|%wheel' /etc/sudoers&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You'll have something like&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;%wheel ALL=(ALL) ALL&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If you see a # at the first position, the line is commented, run &lt;strong&gt;sudo visudo&lt;/strong&gt;, find the corresponding line and remove the #, save and check again.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#update-your-ubuntu-distro"&gt;
  &lt;/a&gt;
  Update your Ubuntu distro
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#remove-residue-from-previous-docker-installations"&gt;
  &lt;/a&gt;
  Remove Residue from previous docker installations
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;sudo apt remove docker docker-engine docker.io containerd runc&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#debianubuntu-package-repository-configuration"&gt;
  &lt;/a&gt;
  Debian/Ubuntu package repository configuration
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;source /etc/os-release&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Trust the repo :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;curl -fsSL &lt;a href="https://download.docker.com/linux/%24%7BID%7D/gpg"&gt;https://download.docker.com/linux/${ID}/gpg&lt;/a&gt; | sudo apt-key add -&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update repo info :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;echo "deb [arch=amd64] &lt;a href="https://download.docker.com/linux/%24%7BID%7D"&gt;https://download.docker.com/linux/${ID}&lt;/a&gt; ${VERSION_CODENAME} stable" | sudo tee /etc/apt/sources.list.d/docker.list&lt;br&gt;
sudo apt update&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#install-official-docker-release"&gt;
  &lt;/a&gt;
  Install official Docker release
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;sudo apt install docker-ce docker-ce-cli containerd.io&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#add-user-to-docker-group"&gt;
  &lt;/a&gt;
  Add user to docker group
&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;sudo usermod -aG docker $USER&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;"Then close that WSL window, and launch WSL again. You should see docker when you run the command groups to list group memberships."&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#get-ip-address-in-wsl2"&gt;
  &lt;/a&gt;
  Get IP address in WSL2
&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;echo `ifconfig eth0 | grep -E "([0-9]{1,3}.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;You should have something like  &lt;strong&gt;172.20.5.64&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#launch-dockerd"&gt;
  &lt;/a&gt;
  Launch dockerd
&lt;/h2&gt;

&lt;p&gt;In WSL, there is no &lt;em&gt;systemd&lt;/em&gt; or other init system. So we need to launch manually docker with the automatic collect of the IP address&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;sudo dockerd -H  `ifconfig eth0 | grep -E "([0-9]{1,3}.){3}[0-9]{1,3}" | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d:&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;There should be several lines of info, warnings related to tls, and the like, with something like API listen on &lt;strong&gt;172.20.5.64:2375&lt;/strong&gt; at the end. If so, you have success.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#test-docker-command"&gt;
  &lt;/a&gt;
  Test docker command
&lt;/h2&gt;

&lt;p&gt;Get the IP address given with the line API listen and In another WSL terminal, you can test the following command :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;docker -H 172.20.5.64 run --rm hello-world&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You'll get something like this :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello from Docker! &lt;/p&gt;

&lt;p&gt;...&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;
  &lt;a href="#installing-dockerexe-on-windows"&gt;
  &lt;/a&gt;
  Installing &lt;strong&gt;Docker.exe&lt;/strong&gt; on Windows
&lt;/h2&gt;

&lt;p&gt;Stefan Scherer is maintaining the project docker-cli-builder on &lt;a href="https://github.com/StefanScherer/docker-cli-builder/releases"&gt;GitHub&lt;/a&gt; where we can download the &lt;strong&gt;docker.exe&lt;/strong&gt; command in standalone :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the exe&lt;/li&gt;
&lt;li&gt;Put it in the directory like &lt;strong&gt;c:\bin&lt;/strong&gt;
&lt;/li&gt;
&lt;li&gt;Add this directory in the path for executables : &lt;em&gt;System Properties\Environement Variables\System Variables\Path&lt;/em&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--t6CwQGQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfwpqdkh8xhy2xhy6hwc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--t6CwQGQc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sfwpqdkh8xhy2xhy6hwc.png" alt="Add path to docker binary"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#check-if-docker-is-working"&gt;
  &lt;/a&gt;
  Check if &lt;strong&gt;docker&lt;/strong&gt; is working
&lt;/h3&gt;

&lt;p&gt;Once done, logout from your session and log again&lt;br&gt;
In a windows terminal (Windows Power Shell) , launch :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;docker --version&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You would get something like :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Docker version 20.10.5, build 55c4c8896&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;
  &lt;a href="#launch-dockerd"&gt;
  &lt;/a&gt;
  Launch dockerd
&lt;/h3&gt;

&lt;p&gt;Open a terminal in Wsl2, you execute &lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;sudo dockerd -H  `ifconfig eth0 | grep -E "([0-9]{1,3}.){3}[0-9]{1,3}" | grep -v 127.0.0.1 |awk '{ print $2 }' | cut -f2 -d:&lt;code&gt;&lt;/code&gt;`&lt;/p&gt;

&lt;p&gt;And you get the IP address, as described before&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#test-docker-on-windows"&gt;
  &lt;/a&gt;
  Test docker on Windows
&lt;/h3&gt;

&lt;p&gt;In the Powershell windows of the terminal, you can run the following command&lt;br&gt;
&lt;code&gt;&lt;/code&gt;c:\bin\docker -H tcp://172.20.5.64 run --rm hello-world&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And you would get :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hello from Docker!&lt;/p&gt;

&lt;p&gt;...        &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Great we have now docker in windows running with WSL2.&lt;/em&gt;&lt;br&gt;
&lt;em&gt;But let's continue magic !&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#configure-vscode-to-access-to-wsl2-docker"&gt;
  &lt;/a&gt;
  Configure VSCode to access to WSL2 docker
&lt;/h2&gt;

&lt;p&gt;If you launch Visual Code and you select the docker extension, you'll get error in the panel asking if docker is installed... Yes of course it's installed but not configured to access to WSL2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--4TqeLCkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4onnmug3igs95alhd9hh.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--4TqeLCkM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/4onnmug3igs95alhd9hh.png" alt="VSCode with docker extension errors"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To do so, click on the icon (?) on the top right of the section "Containers" and select "Edit settings..."&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--eIDRuGok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w88fkywtbd5sm4sf1ota.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--eIDRuGok--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/w88fkywtbd5sm4sf1ota.png" alt="VSCode edit docker settings"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You'll get around 56 settings and you search for  &lt;em&gt;"Docker:Host"&lt;/em&gt;  where you put the line &lt;strong&gt;"tcp://172.20.5.64:2375"&lt;/strong&gt;  where you can replace the highlighted ip address by the one you got before&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--egPq8goX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6b02nk14i4xaielwoxr.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--egPq8goX--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/h6b02nk14i4xaielwoxr.png" alt="VSCode set Docker:Host"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once done, you come back to the panel and you click on &lt;em&gt;"refresh"&lt;/em&gt; icon (top right of each sections) and you would get information from your &lt;strong&gt;dockerd&lt;/strong&gt; running in WSL2&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--R86SMWRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehfyeoma7e96xao94nqn.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--R86SMWRm--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ehfyeoma7e96xao94nqn.png" alt="VSCode it works"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#making-everything-works-without-knowing-ip"&gt;
  &lt;/a&gt;
  Making everything works without knowing IP
&lt;/h2&gt;

&lt;p&gt;Now, how to run &lt;strong&gt;dockerd&lt;/strong&gt; and &lt;em&gt;docker&lt;/em&gt; without copy&amp;amp;paste IP address in command line nor VSCode. &lt;/p&gt;

&lt;p&gt;In WSL2, it's not possible to assign IP address but, I can use the windows port forwarding to redirect a local port from the host to a specific one of my distribution. Hence I could put &lt;strong&gt;"tcp://localhost:2375"&lt;/strong&gt; in VsCode and the calls will be redirected to dockerd running in WSL2-Ubuntu.&lt;/p&gt;

&lt;p&gt;For this, I run the powershell script lines in windows  terminal &lt;em&gt;running as administrator&lt;/em&gt; :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;$ip = (wsl sh -c "hostname -I").Split(" ")[0]&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;netsh interface portproxy add v4tov4 listenport=2375 connectport=2375 connectaddress=$ip&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;wsl sh -c "sudo dockerd -H tcp://$ip"&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Script explanation :    &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;First, I collect the IP address of my default distro with the wsl command.&lt;/li&gt;
&lt;li&gt;Second, I set the port forwarding &lt;em&gt;2375&lt;/em&gt; to my distro&lt;/li&gt;
&lt;li&gt;Third, I launch in my distro dockerd with the IP&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When executing these lines you'll be prompted to enter your distro password (&lt;em&gt;sudo&lt;/em&gt;) and I'll see after the log of dockerd. Everything will work fine when I'll see the message &lt;em&gt;"API listen on 172.18.75.23:2375"&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In parallel, in a windows terminal opened in my distro, I can check with &lt;strong&gt;top&lt;/strong&gt; or &lt;strong&gt;htop&lt;/strong&gt; if &lt;em&gt;dockerd&lt;/em&gt; processes are running.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;VSCode&lt;/em&gt;, I update my &lt;em&gt;Docker:Host&lt;/em&gt; setting with &lt;em&gt;tcp://localhost:2375&lt;/em&gt; :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Y35Mh4J1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv8ty56xvrw5vjw9tqsm.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Y35Mh4J1--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/cv8ty56xvrw5vjw9tqsm.png" alt="VSCode Docker host to localhost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the magic is there :&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--nK65QG9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/100j4d491bo3f9uq82iq.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--nK65QG9p--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/100j4d491bo3f9uq82iq.png" alt="VSCode Docker extension working with localhost"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now I can know create a dedicated powershell script with the previous line : &lt;strong&gt;start_docker.ps1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In a windows terminal running with administrator privileges, I set the &lt;em&gt;Execution policy&lt;/em&gt; with  :&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;Set-ExecutionPolicy RemoteSigned&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And every time I want to run &lt;strong&gt;dockerd&lt;/strong&gt;, I launch the &lt;strong&gt;start_docker.ps1&lt;/strong&gt; script:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KM_EVu5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ft5cjuok5l546a715uz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KM_EVu5t--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/7ft5cjuok5l546a715uz.png" alt="Launch docked from Windows"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if you see &lt;em&gt;API Listen on 172.18.75.23:2375&lt;/em&gt; &lt;/p&gt;

&lt;p&gt;Everything works !&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--yQjNn8b6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f0xyu8rxvhu13bwai0z.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--yQjNn8b6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/1f0xyu8rxvhu13bwai0z.png" alt="Logs 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, I want to use &lt;strong&gt;docker&lt;/strong&gt; without &lt;em&gt;-H&lt;/em&gt; parameter, for this, I add a new system environment variable called &lt;em&gt;DOCKER_HOST&lt;/em&gt; set to &lt;strong&gt;tcp://localhost:2375&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--SV9WqtJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1dwdxjebmy8j4d108rg.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--SV9WqtJ6--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f1dwdxjebmy8j4d108rg.png" alt="Add DOCKER_HOST as system variable"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, in a windows terminal, I can simply run a command like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&lt;/code&gt;docker image ls&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--Oyd5SqOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oplxg2wm78f4lg5gevrz.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Oyd5SqOM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oplxg2wm78f4lg5gevrz.png" alt="Simple use of docker command"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#in-conclusion"&gt;
  &lt;/a&gt;
  In conclusion
&lt;/h2&gt;

&lt;p&gt;This article shows how we can use docker in windows and WSL2 without Docker Workstation&lt;br&gt;
To do so, we just need first to run a powershell script launching &lt;strong&gt;dockerd&lt;/strong&gt; in WSL2 and once &lt;strong&gt;dockerd&lt;/strong&gt; is listening we can simply use the command &lt;strong&gt;docker&lt;/strong&gt; (maintained by Stefan Scherer).&lt;/p&gt;

&lt;p&gt;Yes ! We can continue to develop with containers without Docker Workstation.&lt;/p&gt;

&lt;p&gt;Enjoy !&lt;/p&gt;

</description>
      <category>docker</category>
      <category>windows</category>
      <category>wsl2</category>
    </item>
    <item>
      <title>Pre-Sale Stage is Open Now</title>
      <author>Cryptourism.io</author>
      <pubDate>Sun, 26 Sep 2021 19:23:22 +0000</pubDate>
      <link>https://dev.to/cryptourism/pre-sale-stage-is-open-now-4ka</link>
      <guid>https://dev.to/cryptourism/pre-sale-stage-is-open-now-4ka</guid>
      <description>&lt;p&gt;Pre-Sale Stage is Open Now&lt;/p&gt;

&lt;p&gt;We are proud to report that the Private Pre-Sale of its native token CTR ended on August 31st and it was a success. All 750.000 CTR tokens were sold and a total of 75.000$ were secured.&lt;br&gt;
The Pre-Sale Stage is now fully integrated with KYC and waiting for your participation.&lt;/p&gt;

&lt;p&gt;The so far 100% successful ICO is set to continue and will run until June 31st 2022, with the Pre-Sale ending December 31st 2021.&lt;br&gt;
Check &lt;a href="https://cryptourism.io"&gt;https://cryptourism.io&lt;/a&gt; and invest in the future of tourism!&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#cryptocurrency-tourism-investment-cryptourism-bitcoin-ctr"&gt;
  &lt;/a&gt;
  cryptocurrency #tourism #investment #cryptourism #bitcoin #CTR
&lt;/h1&gt;

</description>
      <category>bitcoin</category>
      <category>cryptocurrency</category>
      <category>cryptourism</category>
      <category>tourism</category>
    </item>
    <item>
      <title>Organizing styles better with BEM + ITCSS + Sass</title>
      <author>Sivantha Paranavithana</author>
      <pubDate>Sun, 26 Sep 2021 19:16:36 +0000</pubDate>
      <link>https://dev.to/sivantha96/organizing-styles-better-with-bem-itcss-sass-43d0</link>
      <guid>https://dev.to/sivantha96/organizing-styles-better-with-bem-itcss-sass-43d0</guid>
      <description>&lt;p&gt;Writing CSS is easy. &lt;/p&gt;

&lt;p&gt;But maintaining them is not!&lt;/p&gt;

&lt;p&gt;On smaller projects, how you organize your code isn’t usually a big concern. However, when it comes to larger, complex projects, how you write and organize code can affect at least in three ways.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How long it takes to write code.&lt;/li&gt;
&lt;li&gt;How much code you have to write.&lt;/li&gt;
&lt;li&gt;How much loading your browser have to do.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Organizing code becomes really important when you are working with a team. The code you write should be transparent. In other words, it should be clear and obvious to understand. And also they should be consistent. Having consistent code throughout the project reduces the amount of mental overhead needed when writing new code, debugging or refactoring.&lt;/p&gt;

&lt;p&gt;Another importance of organizing code is to make the code self documenting as much as possible. In that way we don't have to lose time in writing or reading lengthy, supplementary documentation or give boring KTs to other developers.&lt;/p&gt;

&lt;p&gt;There are plenty of methodologies to reduce the CSS footprint, organize collaboration and maintain large CSS codebases. Among them the mix of BEM, ITCSS and the power of Sass is the most favorite of mine.&lt;/p&gt;

&lt;p&gt;Let me convince you why it should be your favorite as well.&lt;/p&gt;

&lt;p&gt;Let's start with ITCSS.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#itcss"&gt;
  &lt;/a&gt;
  ITCSS
&lt;/h2&gt;

&lt;p&gt;ITCSS is a CSS architecture to make your CSS more scalable and maintainable. ITCSS stands for "Inverted Triangle CSS". What that mean is that dividing the CSS codebase to several sections (called layers), which take the form of an inverted triangle.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--VYcxxq3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq8d6f82ehht4ztpmzo2.jpg" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--VYcxxq3s--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/nq8d6f82ehht4ztpmzo2.jpg" alt="ITCSS"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ITCSS works with other methodologies such as &lt;a href="http://smacss.com"&gt;SMACSS&lt;/a&gt;, &lt;a href="http://oocss.org"&gt;OOCSS&lt;/a&gt; and even &lt;a href="http://getbem.com"&gt;BEM&lt;/a&gt;. Also, we can take the advantage of the power of a preprocessor such a &lt;a href="https://sass-lang.com"&gt;Sass&lt;/a&gt; to make it more flexible and powerful.&lt;/p&gt;

&lt;p&gt;The layers in ITCSS are ordered in a way that it takes the full advantage of some of the most fundamental concepts of CSS, &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance"&gt;cascade, inheritance and specificity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It start out with the most generic, low-level, catch-all, unremarkable styles, and eventually progress to more explicit and specific rules as we move through the project. &lt;/p&gt;

&lt;p&gt;In other words, selectors in the beginning of the triangle affect a lot of the DOM and the reach gets narrower as we go down the triangle.&lt;/p&gt;

&lt;p&gt;So it's all about organization. We can use a folder structure as below to organize our styles according to the ITCSS architecture.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight plaintext"&gt;&lt;code&gt;// folder structure

theme
│
└─── settings
│    ├── _settings.colors.scss
│    ├──  _settings.fonts.scss
│    ├──  ...
│    └─── _index.scss
│
└─── tools
│    ├──  _tools.gradients.scss
│    ├──  _tools.font-sizing.scss
│    ├──  ...
│    └─── _index.scss
│
└─── generics
│    ├──  _generics.page.scss
│    ├──  _generics.normalize.scss
│    ├──  ...
│    └─── _index.scss
│
└─── elements
│    ├──  ...
│    └─── _index.scss
│
└─── objects
│    ├──  ...
│    └─── _index.scss
│
└─── components
│    ├──  ...
│    └─── _index.scss
│
└─── trumps
│    ├──  ...
│    └─── _index.scss
│
└─── _index.scss
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Note that here we are using a Sass concept called &lt;a href="https://sass-lang.com/guide#topic-4"&gt;partials&lt;/a&gt; for stylesheets inside layers. A partial is a small chunk of styles which we can later import into another sass file. We name partials with a preceding underscore. &lt;/p&gt;

&lt;p&gt;Inside each layer we create an &lt;code&gt;_index.scss&lt;/code&gt; file. Inside that file, we use the &lt;code&gt;@forward&lt;/code&gt; rule in sass to combine everything inside that layer and forward it as a module.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/settings/_index.scss&lt;/span&gt;

&lt;span class="k"&gt;@forward&lt;/span&gt; &lt;span class="s1"&gt;'./settings.colors'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@forward&lt;/span&gt; &lt;span class="s1"&gt;'./settings.fonts'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Then we import all the modules into the &lt;code&gt;_index.scss&lt;/code&gt; file using the &lt;code&gt;@use&lt;/code&gt; rule as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/_index.scss&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'./settings'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'./tools'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'./generics'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'./elements'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'./objects'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'./components'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'./trumps'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;These &lt;code&gt;_index.scss&lt;/code&gt; files are optional and we use this pattern only if we want a single global style file. Otherwise it is recommended to use each layer as modules using &lt;code&gt;@use&lt;/code&gt; rule or use individual partials by themselves.&lt;/p&gt;

&lt;p&gt;You can learn more about sass "at-rules" in &lt;a href="https://sass-lang.com/documentation/at-rules"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Notice that in each sass at-rule (&lt;code&gt;@forward&lt;/code&gt; or &lt;code&gt;@use&lt;/code&gt;), underscore and the '.scss' extension is omitted&lt;/p&gt;

&lt;p&gt;Here we have used &lt;code&gt;@use&lt;/code&gt; rule instead of &lt;code&gt;@import&lt;/code&gt; since Sass recommend the use of &lt;code&gt;@use&lt;/code&gt; over &lt;code&gt;@import&lt;/code&gt; for many reasons. You can read more about that in &lt;a href="https://sass-lang.com/documentation/at-rules/import"&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now let's take a look at each layer of ITCSS.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#settings"&gt;
  &lt;/a&gt;
  Settings
&lt;/h3&gt;

&lt;p&gt;This layer holds any global settings for your project. We should include settings which can be accessed from anywhere in this layer. For examples, font size, color palettes and configuration available for the entire project should be included in this layer. &lt;/p&gt;

&lt;p&gt;In here we can use &lt;a href="https://sass-lang.com/documentation/variables"&gt;Sass variables&lt;/a&gt; to define colors, fonts used in the project as settings, then we can use that variable around the project.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/settings/_settings.color.scss&lt;/span&gt;

&lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ea691e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ff9988&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nv"&gt;$primary-light&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#fbcfc7&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/components/_components.button.scss&lt;/span&gt;

&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'../settings/settings.colors'&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;.example-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;When using variables, mixing, etc. inside another partial, it is recommended to use the &lt;code&gt;@use&lt;/code&gt; rule with an &lt;code&gt;alias&lt;/code&gt; instead of using &lt;code&gt;@import&lt;/code&gt; to import everything inside the partial. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Because, if we import the same stylesheet more than once, it will be evaluated again each time. If that stylesheet just defines functions and mixins, this usually isn’t a big deal, but if it contains style rules they’ll be compiled to CSS more than once.&lt;/p&gt;

&lt;p&gt;With this approach, if you realize you need to change something, for an example the theme color, you only need change it in one place.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#tools"&gt;
  &lt;/a&gt;
  Tools
&lt;/h3&gt;

&lt;p&gt;This layer houses the globally available tooling, namely &lt;a href="https://sass-lang.com/documentation/at-rules/mixin"&gt;mixins&lt;/a&gt; and &lt;a href="https://sass-lang.com/documentation/at-rules/function"&gt;functions&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Note that in here as well, we only keep globally available stuff in here. Any mixin or function that does not need accessing globally should belong in the partial to which it relates.&lt;/p&gt;

&lt;p&gt;Tools layer comes after the Settings layer because, these mixins and functions may need global settings as parameters.&lt;/p&gt;

&lt;p&gt;Examples for tooling that goes inside this layer are gradient mixins, font-sizing mixins, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/tools/_tools.gradients.scss&lt;/span&gt;

&lt;span class="k"&gt;@mixin&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$direction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;-webkit-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$direction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;-moz-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$direction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;-o-linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$direction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nl"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;linear-gradient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$direction&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$colors&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#generics"&gt;
  &lt;/a&gt;
  Generics
&lt;/h3&gt;

&lt;p&gt;The Generic layer is the layer that houses very high-level, far reaching styles. It contains things like global box-sizing rules, normalize styles, CSS resets, etc.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/generics/_generics.input.scss&lt;/span&gt;

&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"search"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-search-decoration&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
&lt;span class="nt"&gt;input&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"search"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="nd"&gt;::-webkit-search-cancel-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="na"&gt;-webkit-appearance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#elements"&gt;
  &lt;/a&gt;
  Elements
&lt;/h3&gt;

&lt;p&gt;This layer includes the styles which are applied to bare HTML elements. We basically use HTML tag selectors in this layer. This is still a very low-specificity layer, but affects slightly less of the DOM, and is slightly more opinionated, hence its location in the Triangle.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/elements/_elements.headings.scss&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'../settings/settings.fonts'&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;fonts&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-family&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;fonts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$primary&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Typically, this layer is the last layer we'd find bare HTML element selectors. After this layer we'll basically be using classes to define everything else.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#objects"&gt;
  &lt;/a&gt;
  Objects
&lt;/h3&gt;

&lt;p&gt;This is the first layer in which we find class selectors. As the name imply, we write the styles aiming objects which defines undecorated design patterns. Such objects can range from something simple as a &lt;code&gt;.container&lt;/code&gt; of layout systems to complex object with many children. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If we are going to combine our partials to a single file, it's better to prefix everything inside our partials some keyword to avoid conflicts between class names. &lt;br&gt;
(We have used &lt;code&gt;xmpl&lt;/code&gt; as our prefix from here on)&lt;br&gt;
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/objects/_objects.container.scss&lt;/span&gt;
&lt;span class="k"&gt;@use&lt;/span&gt; &lt;span class="s1"&gt;'../settings/settings.breakpoints'&lt;/span&gt; &lt;span class="nt"&gt;as&lt;/span&gt; &lt;span class="nt"&gt;breakpoints&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nc"&gt;.xmpl-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;breakpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$medium&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;720px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;@media&lt;/span&gt; &lt;span class="n"&gt;screen&lt;/span&gt; &lt;span class="nf"&gt;and&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;breakpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;$small&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;max-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;540px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;blockquote&gt;
&lt;p&gt;Note that here we have used &lt;a href="https://sass-lang.com/guide#topic-3"&gt;nesting&lt;/a&gt; to add the &lt;code&gt;@media&lt;/code&gt; queries to the class.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This layer affects less of the DOM than the last layer, yet making modifications to the classes inside this layer could potentially have effects in a lot of other unrelated places.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#components"&gt;
  &lt;/a&gt;
  Components
&lt;/h3&gt;

&lt;p&gt;This I where we begin to style the recognizable parts of our UI. So, this is where the majority of our work takes place. In here also we are using classes for defining styles. Therefore the specificity has not increased yet. We shouldn't find any selectors with a lower specificity than one class in this layer.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/components/_components.button.scss&lt;/span&gt;

&lt;span class="nc"&gt;.xmpl-button&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;inline-block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;white-space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;nowrap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;vertical-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt; &lt;span class="nb"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;.375rem&lt;/span&gt; &lt;span class="mi"&gt;.75rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;line-height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;.25rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5s&lt;/span&gt; &lt;span class="n"&gt;ease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;h3&gt;
  &lt;a href="#trumps"&gt;
  &lt;/a&gt;
  Trumps
&lt;/h3&gt;

&lt;p&gt;This is the highest specificity layer. It includes the most explicit types of rule, with the most narrow focus. &lt;/p&gt;

&lt;p&gt;Typically this layer beats (trumps) all other layers, and has the power to override anything at all that has gone before it. This layer contains utility and helper classes, hacks and overrides. &lt;/p&gt;

&lt;p&gt;A lot of the declarations in this layer will carry &lt;code&gt;!important&lt;/code&gt; tag.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight sass"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/trumps/_trumps.utilities.scss&lt;/span&gt;

&lt;span class="nc"&gt;.text-center&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;centre&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;So, with ITCSS we are breaking our CSS codebase into groups based around specificity, reach and explicitness. This format allows us to write our CSS in an order that only ever adds to and inherits from what came previously.&lt;/p&gt;

&lt;p&gt;So, now you might be wondering (or not), &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what if I want to change the h2 tag in a specific page? &lt;/li&gt;
&lt;li&gt;Where do I put that style? &lt;/li&gt;
&lt;li&gt;Should it go inside the elements layer in the headings partial, or should I define those kind of style outside the ITCSS folder structure? &lt;/li&gt;
&lt;li&gt;Maybe inside another separate stylesheet or go with in-line styles?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, personally I don't like inline styles. And defining those styles outside the ITCSS folder structure in a different stylesheet is not right as well.&lt;/p&gt;

&lt;p&gt;So, if we need to change the styles of the h2 tag in a specific page (let's call it &lt;code&gt;my-page&lt;/code&gt;), what we have to do is create a &lt;code&gt;_components.my-page.scss&lt;/code&gt; inside the components layer and create a specific class for that h2 element and bind that h2 element to that class instead of binding to the html element directly.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!-- my-page.html --&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h2&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"xmpl-my-page__title"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Hello world&lt;span class="nt"&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/components/_components.my-page.scss&lt;/span&gt;

&lt;span class="nc"&gt;.xmpl-my-page__title&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ffffff&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;In my experience, with this approach we end-up creating so many component partials inside the component layer as well. Therefore, I prefer to maintain another layer right below the components layer called &lt;code&gt;features&lt;/code&gt; or &lt;code&gt;pages&lt;/code&gt; to keep these kind of styles separate. But it's not in the ITCSS architecture. It's just my preference 🤓.&lt;/p&gt;

&lt;p&gt;So, that's pretty my everything (As I know) about ITCSS architecture. Right now we have organize all of our stylesheets (files) in a scalable and maintainable manner.&lt;/p&gt;

&lt;p&gt;Now let's move into how we can organize the code we write inside all the partials we have created to house them. &lt;/p&gt;

&lt;p&gt;You might have notices in the above example that I have used a strange way to name my class. Well, that's the BEM convention. Let's dig deeper on that topic.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#bem"&gt;
  &lt;/a&gt;
  BEM
&lt;/h2&gt;

&lt;p&gt;BEM stands for "Block Element Modifier". It is a naming convention that makes our code more  consistent, transparent, scalable and maintainable. The BEM approach ensures that everyone in the team works with a single codebase and speaks the same language. &lt;/p&gt;

&lt;p&gt;Now, what are Blocks, Elements and Modifiers?&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blocks"&gt;
  &lt;/a&gt;
  Blocks
&lt;/h3&gt;

&lt;p&gt;Blocks are the standalone entities which are meaningful on its own. For examples, we can identify a header, a list, a menu, a checkbox or an input as an entity.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#elements"&gt;
  &lt;/a&gt;
  Elements
&lt;/h3&gt;

&lt;p&gt;An element is a part of a block that has no standalone meaning and is semantically tied to its block. For an example, we can identify a single item of a menu as an element, or the caption of a checkbox, or an item of a list, etc.&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;__element&lt;/code&gt; suffix to denote elements in BEM approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modifiers"&gt;
  &lt;/a&gt;
  Modifiers
&lt;/h3&gt;

&lt;p&gt;A modifier is a flag on a block or an element. We can use them to identify a change appearance or behavior of a particular block or an element. For an example, we can identify 'disabled' as the modifier in a disabled menu item, or the 'color yellow' of a container, etc.&lt;/p&gt;

&lt;p&gt;We use &lt;code&gt;--modifier&lt;/code&gt; suffix to denote elements in BEM approach.&lt;/p&gt;

&lt;p&gt;So, how can BEM be any help?&lt;/p&gt;

&lt;p&gt;Either we follow ITCSS or not, we have to write CSS class names sooner or later. But when naming those classes, we need to have a specific way of doing that. That's where BEM comes into play. &lt;/p&gt;

&lt;p&gt;We can use the BEM's Blocks, Elements and Modifier pattern to name each class we create.&lt;/p&gt;

&lt;p&gt;But why is it REALLY helpful? &lt;/p&gt;

&lt;p&gt;The power of BEM comes with a preprocessor such as Sass. &lt;/p&gt;

&lt;p&gt;Let's see why with an example.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Let's say we need to style the above button with an icon inside (A sharable component). Also we need to have three colors for the button to support default, success and danger scenarios as below.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82m2-MaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hyop94zx6zt6z4vqmhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82m2-MaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hyop94zx6zt6z4vqmhv.png" alt="Final result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let's try to follow the previously learned ITCSS style as well.&lt;/p&gt;

&lt;p&gt;In this case, first we need to create a partial to hold this component. Let's name it &lt;code&gt;_components.my-button.scss&lt;/code&gt;. Then we need to identify Blocks, Elements and Modifiers. So, in this case the Block would be the &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; itself. We can identify the &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; as elements. And we can identify &lt;code&gt;default&lt;/code&gt;, &lt;code&gt;success&lt;/code&gt; and &lt;code&gt;danger&lt;/code&gt; as modifiers.&lt;/p&gt;

&lt;p&gt;Now we can get into naming classes.&lt;/p&gt;

&lt;p&gt;We can name the Block as &lt;code&gt;btn&lt;/code&gt; since it is a button. From there we start to name elements as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;What we have right now is this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s---YzeAdGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgt0vi6np7zpn2f7s5oc.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s---YzeAdGq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/qgt0vi6np7zpn2f7s5oc.png" alt="Step 1"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;With that we can define the styles as below.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/components/_components.button.scss&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#cdcccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;This is the beauty of BEM + Sass. We can nest the classes using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator or Sass. What is it does is, basically denoting the parent objects name. So that &lt;code&gt;&amp;amp;__icon&lt;/code&gt; equals to &lt;code&gt;.btn__icon&lt;/code&gt; and &lt;code&gt;&amp;amp;__text&lt;/code&gt; equals to &lt;code&gt;.btn__text&lt;/code&gt;. Since we have the BEM's Blocks and Elements here nesting like this don't make our code unreadable.&lt;/p&gt;

&lt;p&gt;After applying those styles, now we have this.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--HFwQmAs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yfwa4t6h9adwemjk8p0.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--HFwQmAs---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/0yfwa4t6h9adwemjk8p0.png" alt="Step 2"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Since we need three buttons to show three states, we can create three sets of block with the modifiers to denote each state.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn--success"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn--danger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;Now we have this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--fnaZPumz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3ek1dnxc4qygn1c75i3.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--fnaZPumz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/f3ek1dnxc4qygn1c75i3.png" alt="Step 3"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice that we haven't used the &lt;code&gt;--default&lt;/code&gt; modifier since, it is not needed as we already have the default state without any modifiers.&lt;/p&gt;

&lt;p&gt;Now we can take the advantage of the BEM's modifiers in the stylesheet to create the other two states.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/components/_components.button.scss&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#cdcccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--success&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#709558&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--danger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ca5b5b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;We have nested the &lt;code&gt;--success&lt;/code&gt; and &lt;code&gt;--danger&lt;/code&gt; modifiers inside the &lt;code&gt;.btn&lt;/code&gt; class, so that we can get the resulting classes as &lt;code&gt;.btn--success&lt;/code&gt; and &lt;code&gt;.btn--danger&lt;/code&gt; as we used in our html. &lt;/p&gt;

&lt;p&gt;Also notice that we haven't changed the btn class name in our HTML. instead we added the btn--success class to the class list. In that we, the styles defined under the &lt;code&gt;.btn&lt;/code&gt; class also get applied to the button and only the &lt;code&gt;background-color&lt;/code&gt; property gets replaced.&lt;/p&gt;

&lt;p&gt;Now we have this,&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--KUl709oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifv21eavqpsqeq93opng.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--KUl709oe--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ifv21eavqpsqeq93opng.png" alt="Step 4"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are few more changes have to be done. We have to invert the color of the icon in success and danger states. And we also have to change the color of the text to white in that states as well.&lt;/p&gt;

&lt;p&gt;For this we can introduce more modifiers to our HTML like below and use them to style them.&lt;br&gt;
&lt;/p&gt;

&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__icon"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__text"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn--success"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__icon btn__icon--inverted"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__text btn__text--white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn btn--danger"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__icon btn__icon--inverted"&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;"/assets/icon.svg"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"btn__text btn__text--white"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Submit&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;





&lt;div class="highlight js-code-highlight"&gt;
&lt;pre class="highlight scss"&gt;&lt;code&gt;&lt;span class="c1"&gt;// theme/components/_components.button.scss&lt;/span&gt;

&lt;span class="nc"&gt;.btn&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;justify-content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#cdcccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__icon&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;margin-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--inverted&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;invert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;__text&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;15px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--white&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--success&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#709558&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nt"&gt;--danger&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ca5b5b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;



&lt;p&gt;With that, now we have the final result.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--82m2-MaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hyop94zx6zt6z4vqmhv.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--82m2-MaA--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/8hyop94zx6zt6z4vqmhv.png" alt="Final result"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, we also can prefix the &lt;code&gt;.btn&lt;/code&gt; class at the root with some keyword (eg: &lt;code&gt;.xmpl-btn&lt;/code&gt;) so that we won't get any conflicts in class names later on.&lt;/p&gt;

&lt;p&gt;That's how we can take the advantage of BEM to write more organized CSS. &lt;/p&gt;

&lt;p&gt;There are 3 major benefits we get with BEM approach.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#modularity"&gt;
  &lt;/a&gt;
  Modularity
&lt;/h3&gt;

&lt;p&gt;Block styles are never dependent on other elements on a page, so you will never experience problems from cascading.&lt;/p&gt;

&lt;p&gt;You can also export the blocks from your old finished projects to new ones with ease.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#reusability"&gt;
  &lt;/a&gt;
  Reusability
&lt;/h3&gt;

&lt;p&gt;Composing independent blocks in different ways, and reusing them intelligently, reduces the amount of CSS code that you will have to maintain.&lt;/p&gt;

&lt;p&gt;Also, with the power of a preprocessor such as Sass, you can further reduce the amount of code you have to write using nesting.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#structure"&gt;
  &lt;/a&gt;
  Structure
&lt;/h3&gt;

&lt;p&gt;BEM methodology gives your CSS code a solid and consistent structure that remains simple and easy to understand.&lt;/p&gt;

&lt;p&gt;That's it folks. It was quite a long article. But I hope this will be helpful guide for you.&lt;/p&gt;

&lt;p&gt;See you in the next article. ✌️&lt;/p&gt;

</description>
      <category>webdev</category>
      <category>css</category>
      <category>html</category>
      <category>productivity</category>
    </item>
    <item>
      <title>How to Fix Clickjacking on NGINX Server in 6 Simple Steps🔥</title>
      <author>Keshav Malik</author>
      <pubDate>Sun, 26 Sep 2021 18:49:17 +0000</pubDate>
      <link>https://dev.to/theinfosecguy/how-to-fix-clickjacking-on-nginx-server-in-6-simple-steps-2lbp</link>
      <guid>https://dev.to/theinfosecguy/how-to-fix-clickjacking-on-nginx-server-in-6-simple-steps-2lbp</guid>
      <description>&lt;h2&gt;
  &lt;a href="#what-is-clickacking"&gt;
  &lt;/a&gt;
  What is Clickacking?
&lt;/h2&gt;

&lt;p&gt;Clickjacking is the practice of tricking a user into clicking on something different from what they think they are clicking on. This often occurs in web browsers, where scripts can be used to make an invisible iframe appear to the user, but the iframe loads a different website than what the user thinks. For example, when a user clicks on a “Like” button, the user might instead unknowingly be liking the attacker’s Facebook profile.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--oRxuFTCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epe2fimz7i0pwchqwa1w.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--oRxuFTCV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/epe2fimz7i0pwchqwa1w.png" alt="Clickjacking"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#how-to-fix-clickjacking-on-nginx-server"&gt;
  &lt;/a&gt;
  How to fix Clickjacking on NGINX server?
&lt;/h2&gt;

&lt;p&gt;There are multiple way to fix Clickjacking Vulnerability, but in this blog post we’ll see how to fix Clickjacking using X-Frame-Options headers.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#1-login-to-your-server"&gt;
  &lt;/a&gt;
  1. Login to your server
&lt;/h3&gt;

&lt;p&gt;First things first, Login to your server using ssh.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ssh root@&amp;lt;&amp;lt;server_ip&amp;gt;&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#2-open-your-nginx-config-file"&gt;
  &lt;/a&gt;
  2. Open your NGINX Config file
&lt;/h3&gt;

&lt;p&gt;To make changes in the configuration file, use any text editor to edit the file. I’ll be using vi text editor.&lt;/p&gt;

&lt;p&gt;Use the following command to open the text editor:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo vi /etc/nginx/nginx.conf&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now press i to enter into insert mode (Only for vi text editor)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#3-update-the-config-file"&gt;
  &lt;/a&gt;
  3. Update the Config file
&lt;/h3&gt;

&lt;p&gt;In the http block of the config file, add the following code block:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;add_header X-Frame-Options sameorigin always;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Once done, save the config file by pressing ESC key and then type &lt;code&gt;:x&lt;/code&gt; and press enter. (Only for vi text editor)&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#4-test-the-config-file"&gt;
  &lt;/a&gt;
  4. Test the Config File
&lt;/h3&gt;

&lt;p&gt;After saving the configuration file, test the file using following command:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo nginx -t&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If the output states not successful, you have probably made some mistake in the configuration.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#5-restart-nginx-server"&gt;
  &lt;/a&gt;
  5. Restart NGINX Server
&lt;/h3&gt;

&lt;p&gt;If the result of the above command was successful, you need to restart your server to update the changes that we have made.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo service nginx restart&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or use &lt;code&gt;sudo systemctl restart nginx&lt;/code&gt;&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#6-verify-the-results"&gt;
  &lt;/a&gt;
  6. Verify the results
&lt;/h3&gt;

&lt;p&gt;Now, we are already done with the heavy lifting. It’s time to test if Clickjacking Vulnerability is fixed or not. &lt;a href="https://www.vulnerable.live/clickjacking"&gt;Vulnerable.Live&lt;/a&gt; is an online platform to test for Clickjacking.&lt;/p&gt;

&lt;p&gt;Go to &lt;a href="https://www.vulnerable.live/clickjacking"&gt;Vulnerable.Live&lt;/a&gt; and Enter your domain name.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--B61_MUE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfk9thrvs0l57uxbrzps.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--B61_MUE3--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/yfk9thrvs0l57uxbrzps.png" alt="Vulnerable.Live Dashboard"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vulnerable.Live helps test for Clickjacking and generate report and POC for the vulnerability.&lt;/p&gt;

&lt;h2&gt;
  &lt;a href="#conclusion"&gt;
  &lt;/a&gt;
  Conclusion
&lt;/h2&gt;

&lt;p&gt;Clickjacking is usually considered as a low hanging fruit but you never know which vulnerability hackers can exploit. Keep your Web Application secure from hackers using &lt;a href="https://www.vulnerable.live"&gt;Vulnerable.Live&lt;/a&gt;.&lt;/p&gt;

</description>
      <category>development</category>
      <category>infosec</category>
      <category>nginx</category>
      <category>clickjacking</category>
    </item>
    <item>
      <title>Blockchain 101 (and the protocols that use it)</title>
      <author>Angie Jones</author>
      <pubDate>Sun, 26 Sep 2021 18:42:33 +0000</pubDate>
      <link>https://dev.to/techgirl1908/blockchain-101-and-the-protocols-that-use-it-527p</link>
      <guid>https://dev.to/techgirl1908/blockchain-101-and-the-protocols-that-use-it-527p</guid>
      <description>&lt;p&gt;Lately, I'm hearing a lot about crypto, blockchain, bitcoin, Ethereum, smart contracts, defi (decentralized finance), dapps (decentralized applications), DAOs (decentralized autonomous organizations), NFTs (non-fungible tokens), web3, and on and on. &lt;/p&gt;

&lt;p&gt;I wanted to learn more about all of this stuff so I started digging around for tutorials. I found myself pausing each one shortly after starting because they all seemed to assume I had even the slightest clue as to what some of this means. I got particularly confused because they'd call it a beginners guide and yet reference some of the other terms as if I already knew what they meant. Reader, I did not know!&lt;/p&gt;

&lt;p&gt;Eventually, I found a &lt;a href="https://youtu.be/M576WGiDBdQ"&gt;wonderful tutorial&lt;/a&gt; on Free Code Camp. This video tutorial is 16 hours long, so this will probably be a series of blog posts.&lt;/p&gt;

&lt;p&gt;Here are my notes on the concepts - from an absolute complete beginner's perspective.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#whats-the-purpose"&gt;
  &lt;/a&gt;
  What's the Purpose
&lt;/h3&gt;

&lt;p&gt;It's difficult to grasp new concepts when you don't know what they are used for, so let's start here.&lt;/p&gt;

&lt;p&gt;Physical currency and the way we spend it is governed by entities such as country leaders, banks, and other financial institutions. A couple of recent cases that come to mind are with Robinhood and OnlyFans.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.cnbc.com/2021/01/28/robinhood-interactive-brokers-restrict-trading-in-gamestop-s.html"&gt;Robinhood haulted buying of GameStop shares&lt;/a&gt; (at least for some people) after a coordinated effort of Reddit users caused the value of the shares to skyrocket. While Robinhood's move infuriated a lot of people, there wasn't much they could do because Robinhood governs who can buy and sell what on their platform.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.bloomberg.com/news/articles/2021-08-19/onlyfans-to-block-sexually-explicit-videos-starting-in-october"&gt;OnlyFans announced they were banning sexual content&lt;/a&gt; after mounting pressure from payment providers such as Visa and Mastercard. Because of the power of these financial institutions, the company feels forced to play by their rules or lose the ability to accept these forms of payments. &lt;/p&gt;

&lt;p&gt;There have also been many instances where banks prevent withdrawing your own money for various reasons, or hold deposits before allowing you access.&lt;/p&gt;

&lt;p&gt;A decentralized network that is not controlled by individual entities addresses these concerns. With decentralized networks, we get transparency, freedom, and security.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#blockchain"&gt;
  &lt;/a&gt;
  Blockchain
&lt;/h3&gt;

&lt;p&gt;The starting point is blockchain - a type of database that stores information in individual blocks that are chained together. &lt;/p&gt;

&lt;p&gt;A blockchain is shared across many computers (known as nodes), so there's no single record, but rather multiple copies of the record - making it almost impossible to hack. All of these records are visible to everyone.&lt;/p&gt;

&lt;p&gt;Unlike traditional databases, blocks within the blockchain are immutable, which means they cannot be changed. So when something is written onto the blockchain, it serves as a permanent record. &lt;/p&gt;

&lt;p&gt;When new data needs to be added to the blockchain, it must be written in a new block and then chained together to the last block. The blocks are in sequential order.&lt;/p&gt;

&lt;p&gt;Because blockchain is decentralized, there is no central governance controlling what can and cannot occur.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#bitcoin"&gt;
  &lt;/a&gt;
  Bitcoin
&lt;/h3&gt;

&lt;p&gt;Bitcoin is one of the first protocols to use blockchain. It is a cryptocurrency (I'm thinking of it as "digital money") used in peer to peer transactions in a decentralized network to buy and sell things. Records of all of these transactions are stored on the blockchain.&lt;/p&gt;

&lt;p&gt;But just because it's digital doesn't mean there's an infinite amount of it. There is a finite amount of bitcoin, just like with physical money. &lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#ethereum"&gt;
  &lt;/a&gt;
  Ethereum
&lt;/h3&gt;

&lt;p&gt;Ethereum is another blockchain protocol. The cryptocurrency of this protocol is called Ether (ETH).&lt;/p&gt;

&lt;p&gt;Ethereum takes its use of blockchain a step further than bitcoin. With Ethereum, you're not just limited to decentralized currency, but it enables people to build decentralized applications (also known as dapps) and decentralized organizations (also known as DAOs).&lt;/p&gt;

&lt;p&gt;Ethereum is not the only advanced protocol utilizing blockchain, but it is by far the most popular.&lt;/p&gt;

&lt;p&gt;Ethereum is &lt;a href="https://en.wikipedia.org/wiki/Turing_completeness"&gt;turing-complete&lt;/a&gt; which means we can also program anything with it! These programs are known as  smart contracts.&lt;/p&gt;

&lt;h3&gt;
  &lt;a href="#smart-contracts"&gt;
  &lt;/a&gt;
  Smart Contracts
&lt;/h3&gt;

&lt;p&gt;Smart contracts are code that describe an agreement between parties and executes the terms of that agreement on its own. Smart contracts execute on a blockchain. On Ethereum, smart contracts are coded in the &lt;a href="https://soliditylang.org/"&gt;Solidity programming language&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;What's great about smart contracts is that trust between parties is not required. The terms and conditions are coded and automatically executed, so you don't have to worry about the other party (e.g., insurance company) not holding up their end of the bargain.&lt;/p&gt;

&lt;p&gt;This is one of the main advantages of the Ethereum protocol over the Bitcoin protocol. Bitcoin also has smart contracts, however, by design, they are not turing-complete - meaning they aren't capable of the wide range of functionality possible with Ethereum. Bitcoin is viewed more as an asset whereas Ethereum is an asset as well as a platform to build smart contracts.&lt;/p&gt;

&lt;p&gt;What happens in blockchain stays in blockchain (this concept is also known as on-chain), which poses a problem for smart contracts that need to access outside data or computations. Blockchain Oracles solve this. &lt;/p&gt;

&lt;p&gt;Oracles are able to perform computations and provide information to smart contracts on the blockchain. But because oracles are external to the blockchain, we need to make sure the data they are providing is decentralized before sending it to the blockchain. &lt;/p&gt;

&lt;p&gt;Chainlink is a decentralized oracle network (the most popular one) that will facilitate the transfer of the external data onto the blockchain, ensuring that it is clean. Smart contracts that use external data are technically known as hybrid smart contracts, but this term is interchangeable with smart contracts. If someone explicitly says "hybrid smart contract" they are intentionally pointing out the fact that external data (off-chain) was used. Chainlink can be used with any of the blockchain and smart contract platforms, not just Ethereum.&lt;/p&gt;

&lt;p&gt;Dapps are decentralized applications that typically comprise of multiple smart contracts.&lt;/p&gt;

&lt;p&gt;Ok, that's what I know for now. Stay tuned as I learn more.&lt;/p&gt;

</description>
      <category>blockchain</category>
      <category>ethereum</category>
      <category>defi</category>
      <category>crypto</category>
    </item>
    <item>
      <title>Top 5 IntelliJ IDEA Tips &amp; Tricks!</title>
      <author>Will BL</author>
      <pubDate>Sun, 26 Sep 2021 18:16:39 +0000</pubDate>
      <link>https://dev.to/williambl/top-5-intellij-idea-tips-tricks-3cid</link>
      <guid>https://dev.to/williambl/top-5-intellij-idea-tips-tricks-3cid</guid>
      <description>&lt;p&gt;&lt;a href="https://www.jetbrains.com/idea/"&gt;IntelliJ IDEA&lt;/a&gt; is an excellent all-rounder IDE by Jetbrains. It's most often used for Java and Kotlin, but can also be used to develop for JS, Rust, and many more languages. It's what I use for most of my programming, and so I thought I'd share what config tweaks, tricks, and plugins I've used that make it nicer.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#darcula-make-it-darker"&gt;
  &lt;/a&gt;
  Darcula? Make it darker!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--AmP1q1Cx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhe73qmxss6olwwyjcao.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--AmP1q1Cx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/jhe73qmxss6olwwyjcao.png" alt="An IntelliJ window with Darcula Darker theme"&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Darcula is a very nice theme, but it always bugged me that it wasn't nearly as dark as the light theme is light. It felt like there was more potential there. &lt;a href="https://plugins.jetbrains.com/plugin/12692-darcula-darker-theme"&gt;Darcula Darker, by Vecheslav Druzhbin&lt;/a&gt;, darkens backgrounds, contrasting it more against text.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#rainbow-brackets"&gt;
  &lt;/a&gt;
  Rainbow Brackets
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--kdFh5IBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7b89ucycppjlpasvcts.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--kdFh5IBi--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/j7b89ucycppjlpasvcts.png" alt="An example of rainbow brackets"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets"&gt;This plugin&lt;/a&gt; may sound silly at first, but rainbow brackets honestly vastly improves readability of nested brackets. It works by giving each pair of brackets its own colour, so that nested sets are visually distinct.&lt;/p&gt;

&lt;p&gt;While we're on the rainbow topic, for those who work with CSV files often, &lt;a href="https://plugins.jetbrains.com/plugin/12896-rainbow-csv"&gt;Rainbow CSV&lt;/a&gt; may be useful.&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#errors-should-be-visible"&gt;
  &lt;/a&gt;
  Errors should be visible!
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--8vclOspM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ibfwi8pgxur0znmngp.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--8vclOspM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/d3ibfwi8pgxur0znmngp.png" alt="Code with an error highlighted in red"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Sometimes, in very dense code, it can be difficult to find a single-character syntax error at a glance, as its signified by a tiny red squiggly line. How do you fix that, and make it stand out? Add a red highlight, too!&lt;/p&gt;

&lt;p&gt;(This can be done by going into Settings -&amp;gt; Editor -&amp;gt; Color Scheme -&amp;gt; General -&amp;gt; Errors and Warnings -&amp;gt; Error and setting Background to #630202)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#comments-are-for-humans"&gt;
  &lt;/a&gt;
  Comments are for humans
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--v9cBJoua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcfufg9d2jjw724bzdw1.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--v9cBJoua--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gcfufg9d2jjw724bzdw1.png" alt="Some code with bright pink comments"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;One thing I will never understand is that comments, despite being more for humans' benefit than &lt;em&gt;the rest of the code&lt;/em&gt;, are always put in low-contrast greys, as if the machine, envious that it cannot read them, doesn't want me to be able to either.&lt;/p&gt;

&lt;p&gt;So make your comments bright pink.&lt;/p&gt;

&lt;p&gt;(This can be done by going into Settings -&amp;gt; Editor -&amp;gt; Color Scheme -&amp;gt; Language Defaults -&amp;gt; Block Comment + Line Comment and setting Foreground to #FC7CE1)&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#nyanyanyanyanya-or-is-it-nyannyannyan"&gt;
  &lt;/a&gt;
  nya-nya-nya-nya-nya (or is it nyan-nyan-nyan?)
&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://res.cloudinary.com/practicaldev/image/fetch/s--vKz3jndd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sds8n1iwx1lidijqk5le.png" class="article-body-image-wrapper"&gt;&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vKz3jndd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/sds8n1iwx1lidijqk5le.png" alt="A nyan cat progress bar"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don't have any reason for &lt;a href="https://plugins.jetbrains.com/plugin/8575-nyan-progress-bar"&gt;this&lt;/a&gt; other than that it makes me smile. But do I really need another reason?&lt;/p&gt;

&lt;h1&gt;
  &lt;a href="#more"&gt;
  &lt;/a&gt;
  More!
&lt;/h1&gt;

&lt;p&gt;I have yet more &lt;em&gt;opinions&lt;/em&gt; on how to get the most out of your editor - follow me to get notified when part two of this series is out! You'll get to learn:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to get even more powerful git support&lt;/li&gt;
&lt;li&gt;How you might be able to get IntelliJ IDEA Ultimate for free&lt;/li&gt;
&lt;li&gt;Which side of the Emacs v. Vim editor war I'm on!&lt;/li&gt;
&lt;/ul&gt;

</description>
      <category>ide</category>
      <category>intellij</category>
      <category>java</category>
      <category>kotlin</category>
    </item>
  </channel>
</rss>
